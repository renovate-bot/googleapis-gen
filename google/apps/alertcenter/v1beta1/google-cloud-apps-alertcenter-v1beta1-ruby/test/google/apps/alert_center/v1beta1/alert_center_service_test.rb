# frozen_string_literal: true

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "helper"

require "gapic/grpc/service_stub"

require "google/apps/alertcenter/v1beta1/alertcenter_pb"
require "google/apps/alertcenter/v1beta1/alertcenter_services_pb"
require "google/apps/alert_center/v1beta1/alert_center_service"

class ::Google::Apps::AlertCenter::V1beta1::AlertCenterService::ClientTest < Minitest::Test
  class ClientStub
    attr_accessor :call_rpc_count, :requests

    def initialize response, operation, &block
      @response = response
      @operation = operation
      @block = block
      @call_rpc_count = 0
      @requests = []
    end

    def call_rpc *args, **kwargs
      @call_rpc_count += 1

      @requests << @block&.call(*args, **kwargs)

      yield @response, @operation if block_given?

      @response
    end
  end

  def test_list_alerts
    # Create GRPC objects.
    grpc_response = ::Google::Apps::AlertCenter::V1beta1::ListAlertsResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    customer_id = "hello world"
    page_size = 42
    page_token = "hello world"
    filter = "hello world"
    order_by = "hello world"

    list_alerts_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :list_alerts, name
      assert_kind_of ::Google::Apps::AlertCenter::V1beta1::ListAlertsRequest, request
      assert_equal "hello world", request["customer_id"]
      assert_equal 42, request["page_size"]
      assert_equal "hello world", request["page_token"]
      assert_equal "hello world", request["filter"]
      assert_equal "hello world", request["order_by"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, list_alerts_client_stub do
      # Create client
      client = ::Google::Apps::AlertCenter::V1beta1::AlertCenterService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.list_alerts({ customer_id: customer_id, page_size: page_size, page_token: page_token, filter: filter, order_by: order_by }) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.list_alerts customer_id: customer_id, page_size: page_size, page_token: page_token, filter: filter, order_by: order_by do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.list_alerts ::Google::Apps::AlertCenter::V1beta1::ListAlertsRequest.new(customer_id: customer_id, page_size: page_size, page_token: page_token, filter: filter, order_by: order_by) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.list_alerts({ customer_id: customer_id, page_size: page_size, page_token: page_token, filter: filter, order_by: order_by }, grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.list_alerts(::Google::Apps::AlertCenter::V1beta1::ListAlertsRequest.new(customer_id: customer_id, page_size: page_size, page_token: page_token, filter: filter, order_by: order_by), grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, list_alerts_client_stub.call_rpc_count
    end
  end

  def test_get_alert
    # Create GRPC objects.
    grpc_response = ::Google::Apps::AlertCenter::V1beta1::Alert.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    customer_id = "hello world"
    alert_id = "hello world"

    get_alert_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :get_alert, name
      assert_kind_of ::Google::Apps::AlertCenter::V1beta1::GetAlertRequest, request
      assert_equal "hello world", request["customer_id"]
      assert_equal "hello world", request["alert_id"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, get_alert_client_stub do
      # Create client
      client = ::Google::Apps::AlertCenter::V1beta1::AlertCenterService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.get_alert({ customer_id: customer_id, alert_id: alert_id }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.get_alert customer_id: customer_id, alert_id: alert_id do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.get_alert ::Google::Apps::AlertCenter::V1beta1::GetAlertRequest.new(customer_id: customer_id, alert_id: alert_id) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.get_alert({ customer_id: customer_id, alert_id: alert_id }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.get_alert(::Google::Apps::AlertCenter::V1beta1::GetAlertRequest.new(customer_id: customer_id, alert_id: alert_id), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, get_alert_client_stub.call_rpc_count
    end
  end

  def test_delete_alert
    # Create GRPC objects.
    grpc_response = ::Google::Protobuf::Empty.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    customer_id = "hello world"
    alert_id = "hello world"

    delete_alert_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :delete_alert, name
      assert_kind_of ::Google::Apps::AlertCenter::V1beta1::DeleteAlertRequest, request
      assert_equal "hello world", request["customer_id"]
      assert_equal "hello world", request["alert_id"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, delete_alert_client_stub do
      # Create client
      client = ::Google::Apps::AlertCenter::V1beta1::AlertCenterService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.delete_alert({ customer_id: customer_id, alert_id: alert_id }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.delete_alert customer_id: customer_id, alert_id: alert_id do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.delete_alert ::Google::Apps::AlertCenter::V1beta1::DeleteAlertRequest.new(customer_id: customer_id, alert_id: alert_id) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.delete_alert({ customer_id: customer_id, alert_id: alert_id }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.delete_alert(::Google::Apps::AlertCenter::V1beta1::DeleteAlertRequest.new(customer_id: customer_id, alert_id: alert_id), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, delete_alert_client_stub.call_rpc_count
    end
  end

  def test_undelete_alert
    # Create GRPC objects.
    grpc_response = ::Google::Apps::AlertCenter::V1beta1::Alert.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    customer_id = "hello world"
    alert_id = "hello world"

    undelete_alert_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :undelete_alert, name
      assert_kind_of ::Google::Apps::AlertCenter::V1beta1::UndeleteAlertRequest, request
      assert_equal "hello world", request["customer_id"]
      assert_equal "hello world", request["alert_id"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, undelete_alert_client_stub do
      # Create client
      client = ::Google::Apps::AlertCenter::V1beta1::AlertCenterService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.undelete_alert({ customer_id: customer_id, alert_id: alert_id }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.undelete_alert customer_id: customer_id, alert_id: alert_id do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.undelete_alert ::Google::Apps::AlertCenter::V1beta1::UndeleteAlertRequest.new(customer_id: customer_id, alert_id: alert_id) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.undelete_alert({ customer_id: customer_id, alert_id: alert_id }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.undelete_alert(::Google::Apps::AlertCenter::V1beta1::UndeleteAlertRequest.new(customer_id: customer_id, alert_id: alert_id), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, undelete_alert_client_stub.call_rpc_count
    end
  end

  def test_create_alert_feedback
    # Create GRPC objects.
    grpc_response = ::Google::Apps::AlertCenter::V1beta1::AlertFeedback.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    customer_id = "hello world"
    alert_id = "hello world"
    feedback = {}

    create_alert_feedback_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :create_alert_feedback, name
      assert_kind_of ::Google::Apps::AlertCenter::V1beta1::CreateAlertFeedbackRequest, request
      assert_equal "hello world", request["customer_id"]
      assert_equal "hello world", request["alert_id"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Apps::AlertCenter::V1beta1::AlertFeedback), request["feedback"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, create_alert_feedback_client_stub do
      # Create client
      client = ::Google::Apps::AlertCenter::V1beta1::AlertCenterService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.create_alert_feedback({ customer_id: customer_id, alert_id: alert_id, feedback: feedback }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.create_alert_feedback customer_id: customer_id, alert_id: alert_id, feedback: feedback do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.create_alert_feedback ::Google::Apps::AlertCenter::V1beta1::CreateAlertFeedbackRequest.new(customer_id: customer_id, alert_id: alert_id, feedback: feedback) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.create_alert_feedback({ customer_id: customer_id, alert_id: alert_id, feedback: feedback }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.create_alert_feedback(::Google::Apps::AlertCenter::V1beta1::CreateAlertFeedbackRequest.new(customer_id: customer_id, alert_id: alert_id, feedback: feedback), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, create_alert_feedback_client_stub.call_rpc_count
    end
  end

  def test_list_alert_feedback
    # Create GRPC objects.
    grpc_response = ::Google::Apps::AlertCenter::V1beta1::ListAlertFeedbackResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    customer_id = "hello world"
    alert_id = "hello world"
    filter = "hello world"

    list_alert_feedback_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :list_alert_feedback, name
      assert_kind_of ::Google::Apps::AlertCenter::V1beta1::ListAlertFeedbackRequest, request
      assert_equal "hello world", request["customer_id"]
      assert_equal "hello world", request["alert_id"]
      assert_equal "hello world", request["filter"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, list_alert_feedback_client_stub do
      # Create client
      client = ::Google::Apps::AlertCenter::V1beta1::AlertCenterService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.list_alert_feedback({ customer_id: customer_id, alert_id: alert_id, filter: filter }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.list_alert_feedback customer_id: customer_id, alert_id: alert_id, filter: filter do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.list_alert_feedback ::Google::Apps::AlertCenter::V1beta1::ListAlertFeedbackRequest.new(customer_id: customer_id, alert_id: alert_id, filter: filter) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.list_alert_feedback({ customer_id: customer_id, alert_id: alert_id, filter: filter }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.list_alert_feedback(::Google::Apps::AlertCenter::V1beta1::ListAlertFeedbackRequest.new(customer_id: customer_id, alert_id: alert_id, filter: filter), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, list_alert_feedback_client_stub.call_rpc_count
    end
  end

  def test_get_alert_metadata
    # Create GRPC objects.
    grpc_response = ::Google::Apps::AlertCenter::V1beta1::AlertMetadata.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    customer_id = "hello world"
    alert_id = "hello world"

    get_alert_metadata_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :get_alert_metadata, name
      assert_kind_of ::Google::Apps::AlertCenter::V1beta1::GetAlertMetadataRequest, request
      assert_equal "hello world", request["customer_id"]
      assert_equal "hello world", request["alert_id"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, get_alert_metadata_client_stub do
      # Create client
      client = ::Google::Apps::AlertCenter::V1beta1::AlertCenterService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.get_alert_metadata({ customer_id: customer_id, alert_id: alert_id }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.get_alert_metadata customer_id: customer_id, alert_id: alert_id do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.get_alert_metadata ::Google::Apps::AlertCenter::V1beta1::GetAlertMetadataRequest.new(customer_id: customer_id, alert_id: alert_id) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.get_alert_metadata({ customer_id: customer_id, alert_id: alert_id }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.get_alert_metadata(::Google::Apps::AlertCenter::V1beta1::GetAlertMetadataRequest.new(customer_id: customer_id, alert_id: alert_id), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, get_alert_metadata_client_stub.call_rpc_count
    end
  end

  def test_get_settings
    # Create GRPC objects.
    grpc_response = ::Google::Apps::AlertCenter::V1beta1::Settings.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    customer_id = "hello world"

    get_settings_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :get_settings, name
      assert_kind_of ::Google::Apps::AlertCenter::V1beta1::GetSettingsRequest, request
      assert_equal "hello world", request["customer_id"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, get_settings_client_stub do
      # Create client
      client = ::Google::Apps::AlertCenter::V1beta1::AlertCenterService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.get_settings({ customer_id: customer_id }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.get_settings customer_id: customer_id do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.get_settings ::Google::Apps::AlertCenter::V1beta1::GetSettingsRequest.new(customer_id: customer_id) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.get_settings({ customer_id: customer_id }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.get_settings(::Google::Apps::AlertCenter::V1beta1::GetSettingsRequest.new(customer_id: customer_id), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, get_settings_client_stub.call_rpc_count
    end
  end

  def test_update_settings
    # Create GRPC objects.
    grpc_response = ::Google::Apps::AlertCenter::V1beta1::Settings.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    customer_id = "hello world"
    settings = {}

    update_settings_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :update_settings, name
      assert_kind_of ::Google::Apps::AlertCenter::V1beta1::UpdateSettingsRequest, request
      assert_equal "hello world", request["customer_id"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Apps::AlertCenter::V1beta1::Settings), request["settings"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, update_settings_client_stub do
      # Create client
      client = ::Google::Apps::AlertCenter::V1beta1::AlertCenterService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.update_settings({ customer_id: customer_id, settings: settings }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.update_settings customer_id: customer_id, settings: settings do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.update_settings ::Google::Apps::AlertCenter::V1beta1::UpdateSettingsRequest.new(customer_id: customer_id, settings: settings) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.update_settings({ customer_id: customer_id, settings: settings }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.update_settings(::Google::Apps::AlertCenter::V1beta1::UpdateSettingsRequest.new(customer_id: customer_id, settings: settings), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, update_settings_client_stub.call_rpc_count
    end
  end

  def test_batch_delete_alerts
    # Create GRPC objects.
    grpc_response = ::Google::Apps::AlertCenter::V1beta1::BatchDeleteAlertsResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    customer_id = "hello world"
    alert_id = ["hello world"]

    batch_delete_alerts_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :batch_delete_alerts, name
      assert_kind_of ::Google::Apps::AlertCenter::V1beta1::BatchDeleteAlertsRequest, request
      assert_equal "hello world", request["customer_id"]
      assert_equal ["hello world"], request["alert_id"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, batch_delete_alerts_client_stub do
      # Create client
      client = ::Google::Apps::AlertCenter::V1beta1::AlertCenterService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.batch_delete_alerts({ customer_id: customer_id, alert_id: alert_id }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.batch_delete_alerts customer_id: customer_id, alert_id: alert_id do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.batch_delete_alerts ::Google::Apps::AlertCenter::V1beta1::BatchDeleteAlertsRequest.new(customer_id: customer_id, alert_id: alert_id) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.batch_delete_alerts({ customer_id: customer_id, alert_id: alert_id }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.batch_delete_alerts(::Google::Apps::AlertCenter::V1beta1::BatchDeleteAlertsRequest.new(customer_id: customer_id, alert_id: alert_id), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, batch_delete_alerts_client_stub.call_rpc_count
    end
  end

  def test_batch_undelete_alerts
    # Create GRPC objects.
    grpc_response = ::Google::Apps::AlertCenter::V1beta1::BatchUndeleteAlertsResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    customer_id = "hello world"
    alert_id = ["hello world"]

    batch_undelete_alerts_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :batch_undelete_alerts, name
      assert_kind_of ::Google::Apps::AlertCenter::V1beta1::BatchUndeleteAlertsRequest, request
      assert_equal "hello world", request["customer_id"]
      assert_equal ["hello world"], request["alert_id"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, batch_undelete_alerts_client_stub do
      # Create client
      client = ::Google::Apps::AlertCenter::V1beta1::AlertCenterService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.batch_undelete_alerts({ customer_id: customer_id, alert_id: alert_id }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.batch_undelete_alerts customer_id: customer_id, alert_id: alert_id do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.batch_undelete_alerts ::Google::Apps::AlertCenter::V1beta1::BatchUndeleteAlertsRequest.new(customer_id: customer_id, alert_id: alert_id) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.batch_undelete_alerts({ customer_id: customer_id, alert_id: alert_id }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.batch_undelete_alerts(::Google::Apps::AlertCenter::V1beta1::BatchUndeleteAlertsRequest.new(customer_id: customer_id, alert_id: alert_id), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, batch_undelete_alerts_client_stub.call_rpc_count
    end
  end

  def test_configure
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure

    client = block_config = config = nil
    Gapic::ServiceStub.stub :new, nil do
      client = ::Google::Apps::AlertCenter::V1beta1::AlertCenterService::Client.new do |config|
        config.credentials = grpc_channel
      end
    end

    config = client.configure do |c|
      block_config = c
    end

    assert_same block_config, config
    assert_kind_of ::Google::Apps::AlertCenter::V1beta1::AlertCenterService::Client::Configuration, config
  end
end
