# frozen_string_literal: true

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/cloud/errors"
require "google/apps/alertcenter/v1beta1/alertcenter_pb"

module Google
  module Apps
    module AlertCenter
      module V1beta1
        module AlertCenterService
          ##
          # Client for the AlertCenterService service.
          #
          # Google Workspace Alert Center API (beta).
          #
          class Client
            # @private
            attr_reader :alert_center_service_stub

            ##
            # Configure the AlertCenterService Client class.
            #
            # See {::Google::Apps::AlertCenter::V1beta1::AlertCenterService::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @example
            #
            #   # Modify the configuration for all AlertCenterService clients
            #   ::Google::Apps::AlertCenter::V1beta1::AlertCenterService::Client.configure do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def self.configure
              @configure ||= begin
                namespace = ["Google", "Apps", "AlertCenter", "V1beta1"]
                parent_config = while namespace.any?
                                  parent_name = namespace.join "::"
                                  parent_const = const_get parent_name
                                  break parent_const.configure if parent_const.respond_to? :configure
                                  namespace.pop
                                end
                default_config = Client::Configuration.new parent_config

                default_config.timeout = 60.0

                default_config
              end
              yield @configure if block_given?
              @configure
            end

            ##
            # Configure the AlertCenterService Client instance.
            #
            # The configuration is set to the derived mode, meaning that values can be changed,
            # but structural changes (adding new fields, etc.) are not allowed. Structural changes
            # should be made on {Client.configure}.
            #
            # See {::Google::Apps::AlertCenter::V1beta1::AlertCenterService::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def configure
              yield @config if block_given?
              @config
            end

            ##
            # Create a new AlertCenterService client object.
            #
            # @example
            #
            #   # Create a client using the default configuration
            #   client = ::Google::Apps::AlertCenter::V1beta1::AlertCenterService::Client.new
            #
            #   # Create a client using a custom configuration
            #   client = ::Google::Apps::AlertCenter::V1beta1::AlertCenterService::Client.new do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the AlertCenterService client.
            # @yieldparam config [Client::Configuration]
            #
            def initialize
              # These require statements are intentionally placed here to initialize
              # the gRPC module only when it's required.
              # See https://github.com/googleapis/toolkit/issues/446
              require "gapic/grpc"
              require "google/apps/alertcenter/v1beta1/alertcenter_services_pb"

              # Create the configuration object
              @config = Configuration.new Client.configure

              # Yield the configuration if needed
              yield @config if block_given?

              # Create credentials
              credentials = @config.credentials
              # Use self-signed JWT if the endpoint is unchanged from default,
              # but only if the default endpoint does not have a region prefix.
              enable_self_signed_jwt = @config.endpoint == Client.configure.endpoint &&
                                       !@config.endpoint.split(".").first.include?("-")
              credentials ||= Credentials.default scope: @config.scope,
                                                  enable_self_signed_jwt: enable_self_signed_jwt
              if credentials.is_a?(::String) || credentials.is_a?(::Hash)
                credentials = Credentials.new credentials, scope: @config.scope
              end
              @quota_project_id = @config.quota_project
              @quota_project_id ||= credentials.quota_project_id if credentials.respond_to? :quota_project_id

              @alert_center_service_stub = ::Gapic::ServiceStub.new(
                ::Google::Apps::AlertCenter::V1beta1::AlertCenterService::Stub,
                credentials:  credentials,
                endpoint:     @config.endpoint,
                channel_args: @config.channel_args,
                interceptors: @config.interceptors
              )
            end

            # Service calls

            ##
            # Lists the alerts.
            #
            # @overload list_alerts(request, options = nil)
            #   Pass arguments to `list_alerts` via a request object, either of type
            #   {::Google::Apps::AlertCenter::V1beta1::ListAlertsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Apps::AlertCenter::V1beta1::ListAlertsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_alerts(customer_id: nil, page_size: nil, page_token: nil, filter: nil, order_by: nil)
            #   Pass arguments to `list_alerts` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param customer_id [::String]
            #     Optional. The unique identifier of the Google Workspace organization
            #     account of the customer the alerts are associated with.
            #     Inferred from the caller identity if not provided.
            #   @param page_size [::Integer]
            #     Optional. The requested page size. Server may return fewer items than
            #     requested. If unspecified, server picks an appropriate default.
            #   @param page_token [::String]
            #     Optional. A token identifying a page of results the server should return.
            #     If empty, a new iteration is started. To continue an iteration, pass in
            #     the value from the previous ListAlertsResponse's
            #     {::Google::Apps::AlertCenter::V1beta1::ListAlertsResponse#next_page_token next_page_token} field.
            #   @param filter [::String]
            #     Optional. A query string for filtering alert results.
            #     For more details, see [Query
            #     filters](https://developers.google.com/admin-sdk/alertcenter/guides/query-filters) and [Supported
            #     query filter
            #     fields](https://developers.google.com/admin-sdk/alertcenter/reference/filter-fields#alerts.list).
            #   @param order_by [::String]
            #     Optional. The sort order of the list results.
            #     If not specified results may be returned in arbitrary order.
            #     You can sort the results in descending order based on the creation
            #     timestamp using `order_by="create_time desc"`.
            #     Currently, supported sorting are `create_time asc`, `create_time desc`,
            #     `update_time desc`
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Apps::AlertCenter::V1beta1::Alert>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Apps::AlertCenter::V1beta1::Alert>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def list_alerts request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Apps::AlertCenter::V1beta1::ListAlertsRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_alerts.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Apps::Alertcenter::V1beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.list_alerts.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_alerts.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @alert_center_service_stub.call_rpc :list_alerts, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @alert_center_service_stub, :list_alerts, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Gets the specified alert. Attempting to get a nonexistent alert returns
            # `NOT_FOUND` error.
            #
            # @overload get_alert(request, options = nil)
            #   Pass arguments to `get_alert` via a request object, either of type
            #   {::Google::Apps::AlertCenter::V1beta1::GetAlertRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Apps::AlertCenter::V1beta1::GetAlertRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_alert(customer_id: nil, alert_id: nil)
            #   Pass arguments to `get_alert` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param customer_id [::String]
            #     Optional. The unique identifier of the Google Workspace organization
            #     account of the customer the alert is associated with.
            #     Inferred from the caller identity if not provided.
            #   @param alert_id [::String]
            #     Required. The identifier of the alert to retrieve.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Apps::AlertCenter::V1beta1::Alert]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Apps::AlertCenter::V1beta1::Alert]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def get_alert request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Apps::AlertCenter::V1beta1::GetAlertRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_alert.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Apps::Alertcenter::V1beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "alert_id" => request.alert_id
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get_alert.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_alert.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @alert_center_service_stub.call_rpc :get_alert, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Marks the specified alert for deletion. An alert that has been marked for
            # deletion is removed from Alert Center after 30 days.
            # Marking an alert for deletion has no effect on an alert which has
            # already been marked for deletion. Attempting to mark a nonexistent alert
            # for deletion results in a `NOT_FOUND` error.
            #
            # @overload delete_alert(request, options = nil)
            #   Pass arguments to `delete_alert` via a request object, either of type
            #   {::Google::Apps::AlertCenter::V1beta1::DeleteAlertRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Apps::AlertCenter::V1beta1::DeleteAlertRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload delete_alert(customer_id: nil, alert_id: nil)
            #   Pass arguments to `delete_alert` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param customer_id [::String]
            #     Optional. The unique identifier of the Google Workspace organization
            #     account of the customer the alert is associated with.
            #     Inferred from the caller identity if not provided.
            #   @param alert_id [::String]
            #     Required. The identifier of the alert to delete.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Protobuf::Empty]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Protobuf::Empty]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def delete_alert request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Apps::AlertCenter::V1beta1::DeleteAlertRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.delete_alert.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Apps::Alertcenter::V1beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "alert_id" => request.alert_id
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.delete_alert.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.delete_alert.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @alert_center_service_stub.call_rpc :delete_alert, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Restores, or "undeletes", an alert that was marked for deletion within the
            # past 30 days. Attempting to undelete an alert which was marked for deletion
            # over 30 days ago (which has been removed from the Alert Center database) or
            # a nonexistent alert returns a `NOT_FOUND` error. Attempting to
            # undelete an alert which has not been marked for deletion has no effect.
            #
            # @overload undelete_alert(request, options = nil)
            #   Pass arguments to `undelete_alert` via a request object, either of type
            #   {::Google::Apps::AlertCenter::V1beta1::UndeleteAlertRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Apps::AlertCenter::V1beta1::UndeleteAlertRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload undelete_alert(customer_id: nil, alert_id: nil)
            #   Pass arguments to `undelete_alert` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param customer_id [::String]
            #     Optional. The unique identifier of the Google Workspace organization
            #     account of the customer the alert is associated with.
            #     Inferred from the caller identity if not provided.
            #   @param alert_id [::String]
            #     Required. The identifier of the alert to undelete.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Apps::AlertCenter::V1beta1::Alert]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Apps::AlertCenter::V1beta1::Alert]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def undelete_alert request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Apps::AlertCenter::V1beta1::UndeleteAlertRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.undelete_alert.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Apps::Alertcenter::V1beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "alert_id" => request.alert_id
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.undelete_alert.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.undelete_alert.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @alert_center_service_stub.call_rpc :undelete_alert, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Creates new feedback for an alert. Attempting to create a feedback for
            # a non-existent alert returns `NOT_FOUND` error. Attempting to create a
            # feedback for an alert that is marked for deletion returns
            # `FAILED_PRECONDITION' error.
            #
            # @overload create_alert_feedback(request, options = nil)
            #   Pass arguments to `create_alert_feedback` via a request object, either of type
            #   {::Google::Apps::AlertCenter::V1beta1::CreateAlertFeedbackRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Apps::AlertCenter::V1beta1::CreateAlertFeedbackRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload create_alert_feedback(customer_id: nil, alert_id: nil, feedback: nil)
            #   Pass arguments to `create_alert_feedback` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param customer_id [::String]
            #     Optional. The unique identifier of the Google Workspace organization
            #     account of the customer the alert is associated with.
            #     Inferred from the caller identity if not provided.
            #   @param alert_id [::String]
            #     Required. The identifier of the alert this feedback belongs to.
            #   @param feedback [::Google::Apps::AlertCenter::V1beta1::AlertFeedback, ::Hash]
            #     Required. The new alert feedback to create.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Apps::AlertCenter::V1beta1::AlertFeedback]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Apps::AlertCenter::V1beta1::AlertFeedback]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def create_alert_feedback request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Apps::AlertCenter::V1beta1::CreateAlertFeedbackRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.create_alert_feedback.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Apps::Alertcenter::V1beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "alert_id" => request.alert_id
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.create_alert_feedback.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.create_alert_feedback.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @alert_center_service_stub.call_rpc :create_alert_feedback, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Lists all the feedback for an alert. Attempting to list feedbacks for
            # a non-existent alert returns `NOT_FOUND` error.
            #
            # @overload list_alert_feedback(request, options = nil)
            #   Pass arguments to `list_alert_feedback` via a request object, either of type
            #   {::Google::Apps::AlertCenter::V1beta1::ListAlertFeedbackRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Apps::AlertCenter::V1beta1::ListAlertFeedbackRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_alert_feedback(customer_id: nil, alert_id: nil, filter: nil)
            #   Pass arguments to `list_alert_feedback` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param customer_id [::String]
            #     Optional. The unique identifier of the Google Workspace organization
            #     account of the customer the alert feedback are associated with.
            #     Inferred from the caller identity if not provided.
            #   @param alert_id [::String]
            #     Required. The alert identifier.
            #     The "-" wildcard could be used to represent all alerts.
            #   @param filter [::String]
            #     Optional. A query string for filtering alert feedback results.
            #     For more details, see [Query
            #     filters](https://developers.google.com/admin-sdk/alertcenter/guides/query-filters) and [Supported
            #     query filter
            #     fields](https://developers.google.com/admin-sdk/alertcenter/reference/filter-fields#alerts.feedback.list).
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Apps::AlertCenter::V1beta1::ListAlertFeedbackResponse]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Apps::AlertCenter::V1beta1::ListAlertFeedbackResponse]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def list_alert_feedback request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Apps::AlertCenter::V1beta1::ListAlertFeedbackRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_alert_feedback.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Apps::Alertcenter::V1beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "alert_id" => request.alert_id
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.list_alert_feedback.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_alert_feedback.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @alert_center_service_stub.call_rpc :list_alert_feedback, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Returns the metadata of an alert. Attempting to get metadata for
            # a non-existent alert returns `NOT_FOUND` error.
            #
            # @overload get_alert_metadata(request, options = nil)
            #   Pass arguments to `get_alert_metadata` via a request object, either of type
            #   {::Google::Apps::AlertCenter::V1beta1::GetAlertMetadataRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Apps::AlertCenter::V1beta1::GetAlertMetadataRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_alert_metadata(customer_id: nil, alert_id: nil)
            #   Pass arguments to `get_alert_metadata` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param customer_id [::String]
            #     Optional. The unique identifier of the Google Workspace organization
            #     account of the customer the alert metadata is associated with.
            #     Inferred from the caller identity if not provided.
            #   @param alert_id [::String]
            #     Required. The identifier of the alert this metadata belongs to.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Apps::AlertCenter::V1beta1::AlertMetadata]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Apps::AlertCenter::V1beta1::AlertMetadata]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def get_alert_metadata request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Apps::AlertCenter::V1beta1::GetAlertMetadataRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_alert_metadata.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Apps::Alertcenter::V1beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "alert_id" => request.alert_id
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get_alert_metadata.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_alert_metadata.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @alert_center_service_stub.call_rpc :get_alert_metadata, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Returns customer-level settings.
            #
            # @overload get_settings(request, options = nil)
            #   Pass arguments to `get_settings` via a request object, either of type
            #   {::Google::Apps::AlertCenter::V1beta1::GetSettingsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Apps::AlertCenter::V1beta1::GetSettingsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_settings(customer_id: nil)
            #   Pass arguments to `get_settings` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param customer_id [::String]
            #     Optional. The unique identifier of the Google Workspace organization
            #     account of the customer the alert settings are associated with.
            #     Inferred from the caller identity if not provided.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Apps::AlertCenter::V1beta1::Settings]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Apps::AlertCenter::V1beta1::Settings]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def get_settings request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Apps::AlertCenter::V1beta1::GetSettingsRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_settings.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Apps::Alertcenter::V1beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.get_settings.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_settings.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @alert_center_service_stub.call_rpc :get_settings, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Updates the customer-level settings.
            #
            # @overload update_settings(request, options = nil)
            #   Pass arguments to `update_settings` via a request object, either of type
            #   {::Google::Apps::AlertCenter::V1beta1::UpdateSettingsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Apps::AlertCenter::V1beta1::UpdateSettingsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload update_settings(customer_id: nil, settings: nil)
            #   Pass arguments to `update_settings` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param customer_id [::String]
            #     Optional. The unique identifier of the Google Workspace organization
            #     account of the customer the alert settings are associated with.
            #     Inferred from the caller identity if not provided.
            #   @param settings [::Google::Apps::AlertCenter::V1beta1::Settings, ::Hash]
            #     The customer settings to update.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Apps::AlertCenter::V1beta1::Settings]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Apps::AlertCenter::V1beta1::Settings]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def update_settings request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Apps::AlertCenter::V1beta1::UpdateSettingsRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.update_settings.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Apps::Alertcenter::V1beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.update_settings.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.update_settings.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @alert_center_service_stub.call_rpc :update_settings, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Performs batch delete operation on alerts.
            #
            # @overload batch_delete_alerts(request, options = nil)
            #   Pass arguments to `batch_delete_alerts` via a request object, either of type
            #   {::Google::Apps::AlertCenter::V1beta1::BatchDeleteAlertsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Apps::AlertCenter::V1beta1::BatchDeleteAlertsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload batch_delete_alerts(customer_id: nil, alert_id: nil)
            #   Pass arguments to `batch_delete_alerts` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param customer_id [::String]
            #     Optional. The unique identifier of the Google Workspace organization
            #     account of the customer the alerts are associated with.
            #   @param alert_id [::Array<::String>]
            #     Required. list of alert IDs.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Apps::AlertCenter::V1beta1::BatchDeleteAlertsResponse]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Apps::AlertCenter::V1beta1::BatchDeleteAlertsResponse]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def batch_delete_alerts request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Apps::AlertCenter::V1beta1::BatchDeleteAlertsRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.batch_delete_alerts.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Apps::Alertcenter::V1beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.batch_delete_alerts.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.batch_delete_alerts.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @alert_center_service_stub.call_rpc :batch_delete_alerts, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Performs batch undelete operation on alerts.
            #
            # @overload batch_undelete_alerts(request, options = nil)
            #   Pass arguments to `batch_undelete_alerts` via a request object, either of type
            #   {::Google::Apps::AlertCenter::V1beta1::BatchUndeleteAlertsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Apps::AlertCenter::V1beta1::BatchUndeleteAlertsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload batch_undelete_alerts(customer_id: nil, alert_id: nil)
            #   Pass arguments to `batch_undelete_alerts` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param customer_id [::String]
            #     Optional. The unique identifier of the Google Workspace organization
            #     account of the customer the alerts are associated with.
            #   @param alert_id [::Array<::String>]
            #     Required. list of alert IDs.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Apps::AlertCenter::V1beta1::BatchUndeleteAlertsResponse]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Apps::AlertCenter::V1beta1::BatchUndeleteAlertsResponse]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def batch_undelete_alerts request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Apps::AlertCenter::V1beta1::BatchUndeleteAlertsRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.batch_undelete_alerts.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Apps::Alertcenter::V1beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.batch_undelete_alerts.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.batch_undelete_alerts.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @alert_center_service_stub.call_rpc :batch_undelete_alerts, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Configuration class for the AlertCenterService API.
            #
            # This class represents the configuration for AlertCenterService,
            # providing control over timeouts, retry behavior, logging, transport
            # parameters, and other low-level controls. Certain parameters can also be
            # applied individually to specific RPCs. See
            # {::Google::Apps::AlertCenter::V1beta1::AlertCenterService::Client::Configuration::Rpcs}
            # for a list of RPCs that can be configured independently.
            #
            # Configuration can be applied globally to all clients, or to a single client
            # on construction.
            #
            # @example
            #
            #   # Modify the global config, setting the timeout for
            #   # list_alerts to 20 seconds,
            #   # and all remaining timeouts to 10 seconds.
            #   ::Google::Apps::AlertCenter::V1beta1::AlertCenterService::Client.configure do |config|
            #     config.timeout = 10.0
            #     config.rpcs.list_alerts.timeout = 20.0
            #   end
            #
            #   # Apply the above configuration only to a new client.
            #   client = ::Google::Apps::AlertCenter::V1beta1::AlertCenterService::Client.new do |config|
            #     config.timeout = 10.0
            #     config.rpcs.list_alerts.timeout = 20.0
            #   end
            #
            # @!attribute [rw] endpoint
            #   The hostname or hostname:port of the service endpoint.
            #   Defaults to `"alertcenter.googleapis.com"`.
            #   @return [::String]
            # @!attribute [rw] credentials
            #   Credentials to send with calls. You may provide any of the following types:
            #    *  (`String`) The path to a service account key file in JSON format
            #    *  (`Hash`) A service account key as a Hash
            #    *  (`Google::Auth::Credentials`) A googleauth credentials object
            #       (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
            #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
            #       (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
            #    *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
            #    *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
            #    *  (`nil`) indicating no credentials
            #   @return [::Object]
            # @!attribute [rw] scope
            #   The OAuth scopes
            #   @return [::Array<::String>]
            # @!attribute [rw] lib_name
            #   The library name as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] lib_version
            #   The library version as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] channel_args
            #   Extra parameters passed to the gRPC channel. Note: this is ignored if a
            #   `GRPC::Core::Channel` object is provided as the credential.
            #   @return [::Hash]
            # @!attribute [rw] interceptors
            #   An array of interceptors that are run before calls are executed.
            #   @return [::Array<::GRPC::ClientInterceptor>]
            # @!attribute [rw] timeout
            #   The call timeout in seconds.
            #   @return [::Numeric]
            # @!attribute [rw] metadata
            #   Additional gRPC headers to be sent with the call.
            #   @return [::Hash{::Symbol=>::String}]
            # @!attribute [rw] retry_policy
            #   The retry policy. The value is a hash with the following keys:
            #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
            #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
            #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
            #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
            #       trigger a retry.
            #   @return [::Hash]
            # @!attribute [rw] quota_project
            #   A separate project against which to charge quota.
            #   @return [::String]
            #
            class Configuration
              extend ::Gapic::Config

              config_attr :endpoint,      "alertcenter.googleapis.com", ::String
              config_attr :credentials,   nil do |value|
                allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
                allowed += [::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials] if defined? ::GRPC
                allowed.any? { |klass| klass === value }
              end
              config_attr :scope,         nil, ::String, ::Array, nil
              config_attr :lib_name,      nil, ::String, nil
              config_attr :lib_version,   nil, ::String, nil
              config_attr(:channel_args,  { "grpc.service_config_disable_resolution" => 1 }, ::Hash, nil)
              config_attr :interceptors,  nil, ::Array, nil
              config_attr :timeout,       nil, ::Numeric, nil
              config_attr :metadata,      nil, ::Hash, nil
              config_attr :retry_policy,  nil, ::Hash, ::Proc, nil
              config_attr :quota_project, nil, ::String, nil

              # @private
              def initialize parent_config = nil
                @parent_config = parent_config unless parent_config.nil?

                yield self if block_given?
              end

              ##
              # Configurations for individual RPCs
              # @return [Rpcs]
              #
              def rpcs
                @rpcs ||= begin
                  parent_rpcs = nil
                  parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config.respond_to?(:rpcs)
                  Rpcs.new parent_rpcs
                end
              end

              ##
              # Configuration RPC class for the AlertCenterService API.
              #
              # Includes fields providing the configuration for each RPC in this service.
              # Each configuration object is of type `Gapic::Config::Method` and includes
              # the following configuration fields:
              #
              #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
              #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
              #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
              #     include the following keys:
              #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
              #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
              #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
              #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
              #         trigger a retry.
              #
              class Rpcs
                ##
                # RPC-specific configuration for `list_alerts`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_alerts
                ##
                # RPC-specific configuration for `get_alert`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_alert
                ##
                # RPC-specific configuration for `delete_alert`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :delete_alert
                ##
                # RPC-specific configuration for `undelete_alert`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :undelete_alert
                ##
                # RPC-specific configuration for `create_alert_feedback`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :create_alert_feedback
                ##
                # RPC-specific configuration for `list_alert_feedback`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_alert_feedback
                ##
                # RPC-specific configuration for `get_alert_metadata`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_alert_metadata
                ##
                # RPC-specific configuration for `get_settings`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_settings
                ##
                # RPC-specific configuration for `update_settings`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :update_settings
                ##
                # RPC-specific configuration for `batch_delete_alerts`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :batch_delete_alerts
                ##
                # RPC-specific configuration for `batch_undelete_alerts`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :batch_undelete_alerts

                # @private
                def initialize parent_rpcs = nil
                  list_alerts_config = parent_rpcs.list_alerts if parent_rpcs.respond_to? :list_alerts
                  @list_alerts = ::Gapic::Config::Method.new list_alerts_config
                  get_alert_config = parent_rpcs.get_alert if parent_rpcs.respond_to? :get_alert
                  @get_alert = ::Gapic::Config::Method.new get_alert_config
                  delete_alert_config = parent_rpcs.delete_alert if parent_rpcs.respond_to? :delete_alert
                  @delete_alert = ::Gapic::Config::Method.new delete_alert_config
                  undelete_alert_config = parent_rpcs.undelete_alert if parent_rpcs.respond_to? :undelete_alert
                  @undelete_alert = ::Gapic::Config::Method.new undelete_alert_config
                  create_alert_feedback_config = parent_rpcs.create_alert_feedback if parent_rpcs.respond_to? :create_alert_feedback
                  @create_alert_feedback = ::Gapic::Config::Method.new create_alert_feedback_config
                  list_alert_feedback_config = parent_rpcs.list_alert_feedback if parent_rpcs.respond_to? :list_alert_feedback
                  @list_alert_feedback = ::Gapic::Config::Method.new list_alert_feedback_config
                  get_alert_metadata_config = parent_rpcs.get_alert_metadata if parent_rpcs.respond_to? :get_alert_metadata
                  @get_alert_metadata = ::Gapic::Config::Method.new get_alert_metadata_config
                  get_settings_config = parent_rpcs.get_settings if parent_rpcs.respond_to? :get_settings
                  @get_settings = ::Gapic::Config::Method.new get_settings_config
                  update_settings_config = parent_rpcs.update_settings if parent_rpcs.respond_to? :update_settings
                  @update_settings = ::Gapic::Config::Method.new update_settings_config
                  batch_delete_alerts_config = parent_rpcs.batch_delete_alerts if parent_rpcs.respond_to? :batch_delete_alerts
                  @batch_delete_alerts = ::Gapic::Config::Method.new batch_delete_alerts_config
                  batch_undelete_alerts_config = parent_rpcs.batch_undelete_alerts if parent_rpcs.respond_to? :batch_undelete_alerts
                  @batch_undelete_alerts = ::Gapic::Config::Method.new batch_undelete_alerts_config

                  yield self if block_given?
                end
              end
            end
          end
        end
      end
    end
  end
end
