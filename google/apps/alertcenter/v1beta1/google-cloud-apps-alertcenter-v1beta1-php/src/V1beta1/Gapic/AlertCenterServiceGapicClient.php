<?php
/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * Generated by gapic-generator-php from the file
 * https://github.com/googleapis/googleapis/blob/master/google/apps/alertcenter/v1beta1/alertcenter.proto
 * Updates to the above are reflected here through a refresh process.
 *
 * @experimental
 */

namespace Google\Apps\AlertCenter\V1beta1\Gapic;

use Google\ApiCore\ApiException;
use Google\ApiCore\CredentialsWrapper;

use Google\ApiCore\GapicClientTrait;
use Google\ApiCore\RequestParamsHeaderDescriptor;
use Google\ApiCore\RetrySettings;
use Google\ApiCore\Transport\TransportInterface;
use Google\ApiCore\ValidationException;
use Google\Apps\AlertCenter\V1beta1\Alert;
use Google\Apps\AlertCenter\V1beta1\AlertFeedback;
use Google\Apps\AlertCenter\V1beta1\AlertMetadata;
use Google\Apps\AlertCenter\V1beta1\BatchDeleteAlertsRequest;
use Google\Apps\AlertCenter\V1beta1\BatchDeleteAlertsResponse;
use Google\Apps\AlertCenter\V1beta1\BatchUndeleteAlertsRequest;
use Google\Apps\AlertCenter\V1beta1\BatchUndeleteAlertsResponse;
use Google\Apps\AlertCenter\V1beta1\CreateAlertFeedbackRequest;
use Google\Apps\AlertCenter\V1beta1\DeleteAlertRequest;
use Google\Apps\AlertCenter\V1beta1\GetAlertMetadataRequest;
use Google\Apps\AlertCenter\V1beta1\GetAlertRequest;
use Google\Apps\AlertCenter\V1beta1\GetSettingsRequest;
use Google\Apps\AlertCenter\V1beta1\ListAlertFeedbackRequest;
use Google\Apps\AlertCenter\V1beta1\ListAlertFeedbackResponse;
use Google\Apps\AlertCenter\V1beta1\ListAlertsRequest;
use Google\Apps\AlertCenter\V1beta1\ListAlertsResponse;
use Google\Apps\AlertCenter\V1beta1\Settings;
use Google\Apps\AlertCenter\V1beta1\UndeleteAlertRequest;
use Google\Apps\AlertCenter\V1beta1\UpdateSettingsRequest;
use Google\Auth\FetchAuthTokenInterface;
use Google\Protobuf\GPBEmpty;

/**
 * Service Description: Google Workspace Alert Center API (beta).
 *
 * This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods. Sample code to get started:
 *
 * ```
 * $alertCenterServiceClient = new AlertCenterServiceClient();
 * try {
 *     $response = $alertCenterServiceClient->batchDeleteAlerts();
 * } finally {
 *     $alertCenterServiceClient->close();
 * }
 * ```
 *
 * @experimental
 */
class AlertCenterServiceGapicClient
{
    use GapicClientTrait;

    /**
     * The name of the service.
     */
    const SERVICE_NAME = 'google.apps.alertcenter.v1beta1.AlertCenterService';

    /**
     * The default address of the service.
     */
    const SERVICE_ADDRESS = 'alertcenter.googleapis.com';

    /**
     * The default port of the service.
     */
    const DEFAULT_SERVICE_PORT = 443;

    /**
     * The name of the code generator, to be included in the agent header.
     */
    const CODEGEN_NAME = 'gapic';

    /**
     * The default scopes required by the service.
     */
    public static $serviceScopes = [
        'https://www.googleapis.com/auth/apps.alerts',
    ];

    private static function getClientDefaults()
    {
        return [
            'serviceName' => self::SERVICE_NAME,
            'serviceAddress' => self::SERVICE_ADDRESS . ':' . self::DEFAULT_SERVICE_PORT,
            'clientConfig' => __DIR__ . '/../resources/alert_center_service_client_config.json',
            'descriptorsConfigPath' => __DIR__ . '/../resources/alert_center_service_descriptor_config.php',
            'gcpApiConfigPath' => __DIR__ . '/../resources/alert_center_service_grpc_config.json',
            'credentialsConfig' => [
                'defaultScopes' => self::$serviceScopes,
            ],
            'transportConfig' => [
                'rest' => [
                    'restClientConfigPath' => __DIR__ . '/../resources/alert_center_service_rest_client_config.php',
                ],
            ],
        ];
    }

    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *
     *     @type string $serviceAddress
     *           The address of the API remote host. May optionally include the port, formatted
     *           as "<uri>:<port>". Default 'alertcenter.googleapis.com:443'.
     *     @type string|array|FetchAuthTokenInterface|CredentialsWrapper $credentials
     *           The credentials to be used by the client to authorize API calls. This option
     *           accepts either a path to a credentials file, or a decoded credentials file as a
     *           PHP array.
     *           *Advanced usage*: In addition, this option can also accept a pre-constructed
     *           {@see \Google\Auth\FetchAuthTokenInterface} object or
     *           {@see \Google\ApiCore\CredentialsWrapper} object. Note that when one of these
     *           objects are provided, any settings in $credentialsConfig will be ignored.
     *     @type array $credentialsConfig
     *           Options used to configure credentials, including auth token caching, for the
     *           client. For a full list of supporting configuration options, see
     *           {@see \Google\ApiCore\CredentialsWrapper::build()} .
     *     @type bool $disableRetries
     *           Determines whether or not retries defined by the client configuration should be
     *           disabled. Defaults to `false`.
     *     @type string|array $clientConfig
     *           Client method configuration, including retry settings. This option can be either
     *           a path to a JSON file, or a PHP array containing the decoded JSON data. By
     *           default this settings points to the default client config file, which is
     *           provided in the resources folder.
     *     @type string|TransportInterface $transport
     *           The transport used for executing network requests. May be either the string
     *           `rest` or `grpc`. Defaults to `grpc` if gRPC support is detected on the system.
     *           *Advanced usage*: Additionally, it is possible to pass in an already
     *           instantiated {@see \Google\ApiCore\Transport\TransportInterface} object. Note
     *           that when this object is provided, any settings in $transportConfig, and any
     *           $serviceAddress setting, will be ignored.
     *     @type array $transportConfig
     *           Configuration options that will be used to construct the transport. Options for
     *           each supported transport type should be passed in a key for that transport. For
     *           example:
     *           $transportConfig = [
     *               'grpc' => [...],
     *               'rest' => [...],
     *           ];
     *           See the {@see \Google\ApiCore\Transport\GrpcTransport::build()} and
     *           {@see \Google\ApiCore\Transport\RestTransport::build()} methods for the
     *           supported options.
     *     @type callable $clientCertSource
     *           A callable which returns the client cert as a string. This can be used to
     *           provide a certificate and private key to the transport layer for mTLS.
     * }
     *
     * @throws ValidationException
     *
     * @experimental
     */
    public function __construct(array $options = [])
    {
        $clientOptions = $this->buildClientOptions($options);
        $this->setClientOptions($clientOptions);
    }

    /**
     * Performs batch delete operation on alerts.
     *
     * Sample code:
     * ```
     * $alertCenterServiceClient = new AlertCenterServiceClient();
     * try {
     *     $response = $alertCenterServiceClient->batchDeleteAlerts();
     * } finally {
     *     $alertCenterServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $customerId
     *           Optional. The unique identifier of the Google Workspace organization
     *           account of the customer the alerts are associated with.
     *     @type string[] $alertId
     *           Required. list of alert IDs.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Apps\AlertCenter\V1beta1\BatchDeleteAlertsResponse
     *
     * @throws ApiException if the remote call fails
     *
     * @experimental
     */
    public function batchDeleteAlerts(array $optionalArgs = [])
    {
        $request = new BatchDeleteAlertsRequest();
        if (isset($optionalArgs['customerId'])) {
            $request->setCustomerId($optionalArgs['customerId']);
        }

        if (isset($optionalArgs['alertId'])) {
            $request->setAlertId($optionalArgs['alertId']);
        }

        return $this->startCall('BatchDeleteAlerts', BatchDeleteAlertsResponse::class, $optionalArgs, $request)->wait();
    }

    /**
     * Performs batch undelete operation on alerts.
     *
     * Sample code:
     * ```
     * $alertCenterServiceClient = new AlertCenterServiceClient();
     * try {
     *     $response = $alertCenterServiceClient->batchUndeleteAlerts();
     * } finally {
     *     $alertCenterServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $customerId
     *           Optional. The unique identifier of the Google Workspace organization
     *           account of the customer the alerts are associated with.
     *     @type string[] $alertId
     *           Required. list of alert IDs.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Apps\AlertCenter\V1beta1\BatchUndeleteAlertsResponse
     *
     * @throws ApiException if the remote call fails
     *
     * @experimental
     */
    public function batchUndeleteAlerts(array $optionalArgs = [])
    {
        $request = new BatchUndeleteAlertsRequest();
        if (isset($optionalArgs['customerId'])) {
            $request->setCustomerId($optionalArgs['customerId']);
        }

        if (isset($optionalArgs['alertId'])) {
            $request->setAlertId($optionalArgs['alertId']);
        }

        return $this->startCall('BatchUndeleteAlerts', BatchUndeleteAlertsResponse::class, $optionalArgs, $request)->wait();
    }

    /**
     * Creates new feedback for an alert. Attempting to create a feedback for
     * a non-existent alert returns `NOT_FOUND` error. Attempting to create a
     * feedback for an alert that is marked for deletion returns
     * `FAILED_PRECONDITION' error.
     *
     * Sample code:
     * ```
     * $alertCenterServiceClient = new AlertCenterServiceClient();
     * try {
     *     $response = $alertCenterServiceClient->createAlertFeedback();
     * } finally {
     *     $alertCenterServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $customerId
     *           Optional. The unique identifier of the Google Workspace organization
     *           account of the customer the alert is associated with.
     *           Inferred from the caller identity if not provided.
     *     @type string $alertId
     *           Required. The identifier of the alert this feedback belongs to.
     *     @type AlertFeedback $feedback
     *           Required. The new alert feedback to create.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Apps\AlertCenter\V1beta1\AlertFeedback
     *
     * @throws ApiException if the remote call fails
     *
     * @experimental
     */
    public function createAlertFeedback(array $optionalArgs = [])
    {
        $request = new CreateAlertFeedbackRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['customerId'])) {
            $request->setCustomerId($optionalArgs['customerId']);
        }

        if (isset($optionalArgs['alertId'])) {
            $request->setAlertId($optionalArgs['alertId']);
            $requestParamHeaders['alert_id'] = $optionalArgs['alertId'];
        }

        if (isset($optionalArgs['feedback'])) {
            $request->setFeedback($optionalArgs['feedback']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('CreateAlertFeedback', AlertFeedback::class, $optionalArgs, $request)->wait();
    }

    /**
     * Marks the specified alert for deletion. An alert that has been marked for
     * deletion is removed from Alert Center after 30 days.
     * Marking an alert for deletion has no effect on an alert which has
     * already been marked for deletion. Attempting to mark a nonexistent alert
     * for deletion results in a `NOT_FOUND` error.
     *
     * Sample code:
     * ```
     * $alertCenterServiceClient = new AlertCenterServiceClient();
     * try {
     *     $alertCenterServiceClient->deleteAlert();
     * } finally {
     *     $alertCenterServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $customerId
     *           Optional. The unique identifier of the Google Workspace organization
     *           account of the customer the alert is associated with.
     *           Inferred from the caller identity if not provided.
     *     @type string $alertId
     *           Required. The identifier of the alert to delete.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @throws ApiException if the remote call fails
     *
     * @experimental
     */
    public function deleteAlert(array $optionalArgs = [])
    {
        $request = new DeleteAlertRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['customerId'])) {
            $request->setCustomerId($optionalArgs['customerId']);
        }

        if (isset($optionalArgs['alertId'])) {
            $request->setAlertId($optionalArgs['alertId']);
            $requestParamHeaders['alert_id'] = $optionalArgs['alertId'];
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('DeleteAlert', GPBEmpty::class, $optionalArgs, $request)->wait();
    }

    /**
     * Gets the specified alert. Attempting to get a nonexistent alert returns
     * `NOT_FOUND` error.
     *
     * Sample code:
     * ```
     * $alertCenterServiceClient = new AlertCenterServiceClient();
     * try {
     *     $response = $alertCenterServiceClient->getAlert();
     * } finally {
     *     $alertCenterServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $customerId
     *           Optional. The unique identifier of the Google Workspace organization
     *           account of the customer the alert is associated with.
     *           Inferred from the caller identity if not provided.
     *     @type string $alertId
     *           Required. The identifier of the alert to retrieve.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Apps\AlertCenter\V1beta1\Alert
     *
     * @throws ApiException if the remote call fails
     *
     * @experimental
     */
    public function getAlert(array $optionalArgs = [])
    {
        $request = new GetAlertRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['customerId'])) {
            $request->setCustomerId($optionalArgs['customerId']);
        }

        if (isset($optionalArgs['alertId'])) {
            $request->setAlertId($optionalArgs['alertId']);
            $requestParamHeaders['alert_id'] = $optionalArgs['alertId'];
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('GetAlert', Alert::class, $optionalArgs, $request)->wait();
    }

    /**
     * Returns the metadata of an alert. Attempting to get metadata for
     * a non-existent alert returns `NOT_FOUND` error.
     *
     * Sample code:
     * ```
     * $alertCenterServiceClient = new AlertCenterServiceClient();
     * try {
     *     $response = $alertCenterServiceClient->getAlertMetadata();
     * } finally {
     *     $alertCenterServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $customerId
     *           Optional. The unique identifier of the Google Workspace organization
     *           account of the customer the alert metadata is associated with.
     *           Inferred from the caller identity if not provided.
     *     @type string $alertId
     *           Required. The identifier of the alert this metadata belongs to.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Apps\AlertCenter\V1beta1\AlertMetadata
     *
     * @throws ApiException if the remote call fails
     *
     * @experimental
     */
    public function getAlertMetadata(array $optionalArgs = [])
    {
        $request = new GetAlertMetadataRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['customerId'])) {
            $request->setCustomerId($optionalArgs['customerId']);
        }

        if (isset($optionalArgs['alertId'])) {
            $request->setAlertId($optionalArgs['alertId']);
            $requestParamHeaders['alert_id'] = $optionalArgs['alertId'];
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('GetAlertMetadata', AlertMetadata::class, $optionalArgs, $request)->wait();
    }

    /**
     * Returns customer-level settings.
     *
     * Sample code:
     * ```
     * $alertCenterServiceClient = new AlertCenterServiceClient();
     * try {
     *     $response = $alertCenterServiceClient->getSettings();
     * } finally {
     *     $alertCenterServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $customerId
     *           Optional. The unique identifier of the Google Workspace organization
     *           account of the customer the alert settings are associated with.
     *           Inferred from the caller identity if not provided.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Apps\AlertCenter\V1beta1\Settings
     *
     * @throws ApiException if the remote call fails
     *
     * @experimental
     */
    public function getSettings(array $optionalArgs = [])
    {
        $request = new GetSettingsRequest();
        if (isset($optionalArgs['customerId'])) {
            $request->setCustomerId($optionalArgs['customerId']);
        }

        return $this->startCall('GetSettings', Settings::class, $optionalArgs, $request)->wait();
    }

    /**
     * Lists all the feedback for an alert. Attempting to list feedbacks for
     * a non-existent alert returns `NOT_FOUND` error.
     *
     * Sample code:
     * ```
     * $alertCenterServiceClient = new AlertCenterServiceClient();
     * try {
     *     $response = $alertCenterServiceClient->listAlertFeedback();
     * } finally {
     *     $alertCenterServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $customerId
     *           Optional. The unique identifier of the Google Workspace organization
     *           account of the customer the alert feedback are associated with.
     *           Inferred from the caller identity if not provided.
     *     @type string $alertId
     *           Required. The alert identifier.
     *           The "-" wildcard could be used to represent all alerts.
     *     @type string $filter
     *           Optional. A query string for filtering alert feedback results.
     *           For more details, see [Query
     *           filters](https://developers.google.com/admin-sdk/alertcenter/guides/query-filters) and [Supported
     *           query filter
     *           fields](https://developers.google.com/admin-sdk/alertcenter/reference/filter-fields#alerts.feedback.list).
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Apps\AlertCenter\V1beta1\ListAlertFeedbackResponse
     *
     * @throws ApiException if the remote call fails
     *
     * @experimental
     */
    public function listAlertFeedback(array $optionalArgs = [])
    {
        $request = new ListAlertFeedbackRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['customerId'])) {
            $request->setCustomerId($optionalArgs['customerId']);
        }

        if (isset($optionalArgs['alertId'])) {
            $request->setAlertId($optionalArgs['alertId']);
            $requestParamHeaders['alert_id'] = $optionalArgs['alertId'];
        }

        if (isset($optionalArgs['filter'])) {
            $request->setFilter($optionalArgs['filter']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('ListAlertFeedback', ListAlertFeedbackResponse::class, $optionalArgs, $request)->wait();
    }

    /**
     * Lists the alerts.
     *
     * Sample code:
     * ```
     * $alertCenterServiceClient = new AlertCenterServiceClient();
     * try {
     *     // Iterate over pages of elements
     *     $pagedResponse = $alertCenterServiceClient->listAlerts();
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *     // Alternatively:
     *     // Iterate through all elements
     *     $pagedResponse = $alertCenterServiceClient->listAlerts();
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $alertCenterServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $customerId
     *           Optional. The unique identifier of the Google Workspace organization
     *           account of the customer the alerts are associated with.
     *           Inferred from the caller identity if not provided.
     *     @type int $pageSize
     *           The maximum number of resources contained in the underlying API
     *           response. The API may return fewer values in a page, even if
     *           there are additional values to be retrieved.
     *     @type string $pageToken
     *           A page token is used to specify a page of values to be returned.
     *           If no page token is specified (the default), the first page
     *           of values will be returned. Any page token used here must have
     *           been generated by a previous call to the API.
     *     @type string $filter
     *           Optional. A query string for filtering alert results.
     *           For more details, see [Query
     *           filters](https://developers.google.com/admin-sdk/alertcenter/guides/query-filters) and [Supported
     *           query filter
     *           fields](https://developers.google.com/admin-sdk/alertcenter/reference/filter-fields#alerts.list).
     *     @type string $orderBy
     *           Optional. The sort order of the list results.
     *           If not specified results may be returned in arbitrary order.
     *           You can sort the results in descending order based on the creation
     *           timestamp using `order_by="create_time desc"`.
     *           Currently, supported sorting are `create_time asc`, `create_time desc`,
     *           `update_time desc`
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     *
     * @experimental
     */
    public function listAlerts(array $optionalArgs = [])
    {
        $request = new ListAlertsRequest();
        if (isset($optionalArgs['customerId'])) {
            $request->setCustomerId($optionalArgs['customerId']);
        }

        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }

        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        if (isset($optionalArgs['filter'])) {
            $request->setFilter($optionalArgs['filter']);
        }

        if (isset($optionalArgs['orderBy'])) {
            $request->setOrderBy($optionalArgs['orderBy']);
        }

        return $this->getPagedListResponse('ListAlerts', $optionalArgs, ListAlertsResponse::class, $request);
    }

    /**
     * Restores, or "undeletes", an alert that was marked for deletion within the
     * past 30 days. Attempting to undelete an alert which was marked for deletion
     * over 30 days ago (which has been removed from the Alert Center database) or
     * a nonexistent alert returns a `NOT_FOUND` error. Attempting to
     * undelete an alert which has not been marked for deletion has no effect.
     *
     * Sample code:
     * ```
     * $alertCenterServiceClient = new AlertCenterServiceClient();
     * try {
     *     $response = $alertCenterServiceClient->undeleteAlert();
     * } finally {
     *     $alertCenterServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $customerId
     *           Optional. The unique identifier of the Google Workspace organization
     *           account of the customer the alert is associated with.
     *           Inferred from the caller identity if not provided.
     *     @type string $alertId
     *           Required. The identifier of the alert to undelete.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Apps\AlertCenter\V1beta1\Alert
     *
     * @throws ApiException if the remote call fails
     *
     * @experimental
     */
    public function undeleteAlert(array $optionalArgs = [])
    {
        $request = new UndeleteAlertRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['customerId'])) {
            $request->setCustomerId($optionalArgs['customerId']);
        }

        if (isset($optionalArgs['alertId'])) {
            $request->setAlertId($optionalArgs['alertId']);
            $requestParamHeaders['alert_id'] = $optionalArgs['alertId'];
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('UndeleteAlert', Alert::class, $optionalArgs, $request)->wait();
    }

    /**
     * Updates the customer-level settings.
     *
     * Sample code:
     * ```
     * $alertCenterServiceClient = new AlertCenterServiceClient();
     * try {
     *     $response = $alertCenterServiceClient->updateSettings();
     * } finally {
     *     $alertCenterServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $customerId
     *           Optional. The unique identifier of the Google Workspace organization
     *           account of the customer the alert settings are associated with.
     *           Inferred from the caller identity if not provided.
     *     @type Settings $settings
     *           The customer settings to update.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Apps\AlertCenter\V1beta1\Settings
     *
     * @throws ApiException if the remote call fails
     *
     * @experimental
     */
    public function updateSettings(array $optionalArgs = [])
    {
        $request = new UpdateSettingsRequest();
        if (isset($optionalArgs['customerId'])) {
            $request->setCustomerId($optionalArgs['customerId']);
        }

        if (isset($optionalArgs['settings'])) {
            $request->setSettings($optionalArgs['settings']);
        }

        return $this->startCall('UpdateSettings', Settings::class, $optionalArgs, $request)->wait();
    }
}
