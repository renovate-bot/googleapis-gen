<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/apps/alertcenter/v1beta1/alertcenter.proto

namespace Google\Apps\AlertCenter\V1beta1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * An alert metadata.
 *
 * Generated from protobuf message <code>google.apps.alertcenter.v1beta1.AlertMetadata</code>
 */
class AlertMetadata extends \Google\Protobuf\Internal\Message
{
    /**
     * Output only. The unique identifier of the Google account of the customer.
     *
     * Generated from protobuf field <code>string customer_id = 1;</code>
     */
    protected $customer_id = '';
    /**
     * Output only. The alert identifier.
     *
     * Generated from protobuf field <code>string alert_id = 2;</code>
     */
    protected $alert_id = '';
    /**
     * The current status of the alert.
     * The supported values are the following:
     * * NOT_STARTED
     * * IN_PROGRESS
     * * CLOSED
     *
     * Generated from protobuf field <code>string status = 4;</code>
     */
    protected $status = '';
    /**
     * The email address of the user assigned to the alert.
     *
     * Generated from protobuf field <code>string assignee = 5;</code>
     */
    protected $assignee = '';
    /**
     * Output only. The time this metadata was last updated.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp update_time = 6;</code>
     */
    protected $update_time = null;
    /**
     * The severity value of the alert. Alert Center will set this field at alert
     * creation time, default's to an empty string when it could not be
     * determined.
     * The supported values for update actions on this field are the following:
     * * HIGH
     * * MEDIUM
     * * LOW
     *
     * Generated from protobuf field <code>string severity = 7;</code>
     */
    protected $severity = '';
    /**
     * Optional. `etag` is used for optimistic concurrency control as a way to
     * help prevent simultaneous updates of an alert metadata from overwriting
     * each other. It is strongly suggested that systems make use of the `etag` in
     * the read-modify-write cycle to perform metatdata updates in order to avoid
     * race conditions: An `etag` is returned in the response which contains alert
     * metadata, and systems are expected to put that etag in the request to
     * update alert metadata to ensure that their change will be applied to the
     * same version of the alert metadata.
     * If no `etag` is provided in the call to update alert metadata, then the
     * existing alert metadata is overwritten blindly.
     *
     * Generated from protobuf field <code>string etag = 8;</code>
     */
    protected $etag = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $customer_id
     *           Output only. The unique identifier of the Google account of the customer.
     *     @type string $alert_id
     *           Output only. The alert identifier.
     *     @type string $status
     *           The current status of the alert.
     *           The supported values are the following:
     *           * NOT_STARTED
     *           * IN_PROGRESS
     *           * CLOSED
     *     @type string $assignee
     *           The email address of the user assigned to the alert.
     *     @type \Google\Protobuf\Timestamp $update_time
     *           Output only. The time this metadata was last updated.
     *     @type string $severity
     *           The severity value of the alert. Alert Center will set this field at alert
     *           creation time, default's to an empty string when it could not be
     *           determined.
     *           The supported values for update actions on this field are the following:
     *           * HIGH
     *           * MEDIUM
     *           * LOW
     *     @type string $etag
     *           Optional. `etag` is used for optimistic concurrency control as a way to
     *           help prevent simultaneous updates of an alert metadata from overwriting
     *           each other. It is strongly suggested that systems make use of the `etag` in
     *           the read-modify-write cycle to perform metatdata updates in order to avoid
     *           race conditions: An `etag` is returned in the response which contains alert
     *           metadata, and systems are expected to put that etag in the request to
     *           update alert metadata to ensure that their change will be applied to the
     *           same version of the alert metadata.
     *           If no `etag` is provided in the call to update alert metadata, then the
     *           existing alert metadata is overwritten blindly.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Apps\Alertcenter\V1Beta1\Alertcenter::initOnce();
        parent::__construct($data);
    }

    /**
     * Output only. The unique identifier of the Google account of the customer.
     *
     * Generated from protobuf field <code>string customer_id = 1;</code>
     * @return string
     */
    public function getCustomerId()
    {
        return $this->customer_id;
    }

    /**
     * Output only. The unique identifier of the Google account of the customer.
     *
     * Generated from protobuf field <code>string customer_id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setCustomerId($var)
    {
        GPBUtil::checkString($var, True);
        $this->customer_id = $var;

        return $this;
    }

    /**
     * Output only. The alert identifier.
     *
     * Generated from protobuf field <code>string alert_id = 2;</code>
     * @return string
     */
    public function getAlertId()
    {
        return $this->alert_id;
    }

    /**
     * Output only. The alert identifier.
     *
     * Generated from protobuf field <code>string alert_id = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setAlertId($var)
    {
        GPBUtil::checkString($var, True);
        $this->alert_id = $var;

        return $this;
    }

    /**
     * The current status of the alert.
     * The supported values are the following:
     * * NOT_STARTED
     * * IN_PROGRESS
     * * CLOSED
     *
     * Generated from protobuf field <code>string status = 4;</code>
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * The current status of the alert.
     * The supported values are the following:
     * * NOT_STARTED
     * * IN_PROGRESS
     * * CLOSED
     *
     * Generated from protobuf field <code>string status = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setStatus($var)
    {
        GPBUtil::checkString($var, True);
        $this->status = $var;

        return $this;
    }

    /**
     * The email address of the user assigned to the alert.
     *
     * Generated from protobuf field <code>string assignee = 5;</code>
     * @return string
     */
    public function getAssignee()
    {
        return $this->assignee;
    }

    /**
     * The email address of the user assigned to the alert.
     *
     * Generated from protobuf field <code>string assignee = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setAssignee($var)
    {
        GPBUtil::checkString($var, True);
        $this->assignee = $var;

        return $this;
    }

    /**
     * Output only. The time this metadata was last updated.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp update_time = 6;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getUpdateTime()
    {
        return $this->update_time;
    }

    public function hasUpdateTime()
    {
        return isset($this->update_time);
    }

    public function clearUpdateTime()
    {
        unset($this->update_time);
    }

    /**
     * Output only. The time this metadata was last updated.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp update_time = 6;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setUpdateTime($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->update_time = $var;

        return $this;
    }

    /**
     * The severity value of the alert. Alert Center will set this field at alert
     * creation time, default's to an empty string when it could not be
     * determined.
     * The supported values for update actions on this field are the following:
     * * HIGH
     * * MEDIUM
     * * LOW
     *
     * Generated from protobuf field <code>string severity = 7;</code>
     * @return string
     */
    public function getSeverity()
    {
        return $this->severity;
    }

    /**
     * The severity value of the alert. Alert Center will set this field at alert
     * creation time, default's to an empty string when it could not be
     * determined.
     * The supported values for update actions on this field are the following:
     * * HIGH
     * * MEDIUM
     * * LOW
     *
     * Generated from protobuf field <code>string severity = 7;</code>
     * @param string $var
     * @return $this
     */
    public function setSeverity($var)
    {
        GPBUtil::checkString($var, True);
        $this->severity = $var;

        return $this;
    }

    /**
     * Optional. `etag` is used for optimistic concurrency control as a way to
     * help prevent simultaneous updates of an alert metadata from overwriting
     * each other. It is strongly suggested that systems make use of the `etag` in
     * the read-modify-write cycle to perform metatdata updates in order to avoid
     * race conditions: An `etag` is returned in the response which contains alert
     * metadata, and systems are expected to put that etag in the request to
     * update alert metadata to ensure that their change will be applied to the
     * same version of the alert metadata.
     * If no `etag` is provided in the call to update alert metadata, then the
     * existing alert metadata is overwritten blindly.
     *
     * Generated from protobuf field <code>string etag = 8;</code>
     * @return string
     */
    public function getEtag()
    {
        return $this->etag;
    }

    /**
     * Optional. `etag` is used for optimistic concurrency control as a way to
     * help prevent simultaneous updates of an alert metadata from overwriting
     * each other. It is strongly suggested that systems make use of the `etag` in
     * the read-modify-write cycle to perform metatdata updates in order to avoid
     * race conditions: An `etag` is returned in the response which contains alert
     * metadata, and systems are expected to put that etag in the request to
     * update alert metadata to ensure that their change will be applied to the
     * same version of the alert metadata.
     * If no `etag` is provided in the call to update alert metadata, then the
     * existing alert metadata is overwritten blindly.
     *
     * Generated from protobuf field <code>string etag = 8;</code>
     * @param string $var
     * @return $this
     */
    public function setEtag($var)
    {
        GPBUtil::checkString($var, True);
        $this->etag = $var;

        return $this;
    }

}

