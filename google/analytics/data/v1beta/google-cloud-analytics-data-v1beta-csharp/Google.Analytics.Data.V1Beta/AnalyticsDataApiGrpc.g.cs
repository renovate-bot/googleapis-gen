// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/analytics/data/v1beta/analytics_data_api.proto
// </auto-generated>
// Original file comments:
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Analytics.Data.V1Beta {
  /// <summary>
  /// Google Analytics reporting data service.
  /// </summary>
  public static partial class BetaAnalyticsData
  {
    static readonly string __ServiceName = "google.analytics.data.v1beta.BetaAnalyticsData";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Analytics.Data.V1Beta.RunReportRequest> __Marshaller_google_analytics_data_v1beta_RunReportRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Analytics.Data.V1Beta.RunReportRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Analytics.Data.V1Beta.RunReportResponse> __Marshaller_google_analytics_data_v1beta_RunReportResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Analytics.Data.V1Beta.RunReportResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Analytics.Data.V1Beta.RunPivotReportRequest> __Marshaller_google_analytics_data_v1beta_RunPivotReportRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Analytics.Data.V1Beta.RunPivotReportRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Analytics.Data.V1Beta.RunPivotReportResponse> __Marshaller_google_analytics_data_v1beta_RunPivotReportResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Analytics.Data.V1Beta.RunPivotReportResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Analytics.Data.V1Beta.BatchRunReportsRequest> __Marshaller_google_analytics_data_v1beta_BatchRunReportsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Analytics.Data.V1Beta.BatchRunReportsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Analytics.Data.V1Beta.BatchRunReportsResponse> __Marshaller_google_analytics_data_v1beta_BatchRunReportsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Analytics.Data.V1Beta.BatchRunReportsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Analytics.Data.V1Beta.BatchRunPivotReportsRequest> __Marshaller_google_analytics_data_v1beta_BatchRunPivotReportsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Analytics.Data.V1Beta.BatchRunPivotReportsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Analytics.Data.V1Beta.BatchRunPivotReportsResponse> __Marshaller_google_analytics_data_v1beta_BatchRunPivotReportsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Analytics.Data.V1Beta.BatchRunPivotReportsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Analytics.Data.V1Beta.GetMetadataRequest> __Marshaller_google_analytics_data_v1beta_GetMetadataRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Analytics.Data.V1Beta.GetMetadataRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Analytics.Data.V1Beta.Metadata> __Marshaller_google_analytics_data_v1beta_Metadata = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Analytics.Data.V1Beta.Metadata.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Analytics.Data.V1Beta.RunRealtimeReportRequest> __Marshaller_google_analytics_data_v1beta_RunRealtimeReportRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Analytics.Data.V1Beta.RunRealtimeReportRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Analytics.Data.V1Beta.RunRealtimeReportResponse> __Marshaller_google_analytics_data_v1beta_RunRealtimeReportResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Analytics.Data.V1Beta.RunRealtimeReportResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Analytics.Data.V1Beta.CheckCompatibilityRequest> __Marshaller_google_analytics_data_v1beta_CheckCompatibilityRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Analytics.Data.V1Beta.CheckCompatibilityRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Analytics.Data.V1Beta.CheckCompatibilityResponse> __Marshaller_google_analytics_data_v1beta_CheckCompatibilityResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Analytics.Data.V1Beta.CheckCompatibilityResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Analytics.Data.V1Beta.RunReportRequest, global::Google.Analytics.Data.V1Beta.RunReportResponse> __Method_RunReport = new grpc::Method<global::Google.Analytics.Data.V1Beta.RunReportRequest, global::Google.Analytics.Data.V1Beta.RunReportResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RunReport",
        __Marshaller_google_analytics_data_v1beta_RunReportRequest,
        __Marshaller_google_analytics_data_v1beta_RunReportResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Analytics.Data.V1Beta.RunPivotReportRequest, global::Google.Analytics.Data.V1Beta.RunPivotReportResponse> __Method_RunPivotReport = new grpc::Method<global::Google.Analytics.Data.V1Beta.RunPivotReportRequest, global::Google.Analytics.Data.V1Beta.RunPivotReportResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RunPivotReport",
        __Marshaller_google_analytics_data_v1beta_RunPivotReportRequest,
        __Marshaller_google_analytics_data_v1beta_RunPivotReportResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Analytics.Data.V1Beta.BatchRunReportsRequest, global::Google.Analytics.Data.V1Beta.BatchRunReportsResponse> __Method_BatchRunReports = new grpc::Method<global::Google.Analytics.Data.V1Beta.BatchRunReportsRequest, global::Google.Analytics.Data.V1Beta.BatchRunReportsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchRunReports",
        __Marshaller_google_analytics_data_v1beta_BatchRunReportsRequest,
        __Marshaller_google_analytics_data_v1beta_BatchRunReportsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Analytics.Data.V1Beta.BatchRunPivotReportsRequest, global::Google.Analytics.Data.V1Beta.BatchRunPivotReportsResponse> __Method_BatchRunPivotReports = new grpc::Method<global::Google.Analytics.Data.V1Beta.BatchRunPivotReportsRequest, global::Google.Analytics.Data.V1Beta.BatchRunPivotReportsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchRunPivotReports",
        __Marshaller_google_analytics_data_v1beta_BatchRunPivotReportsRequest,
        __Marshaller_google_analytics_data_v1beta_BatchRunPivotReportsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Analytics.Data.V1Beta.GetMetadataRequest, global::Google.Analytics.Data.V1Beta.Metadata> __Method_GetMetadata = new grpc::Method<global::Google.Analytics.Data.V1Beta.GetMetadataRequest, global::Google.Analytics.Data.V1Beta.Metadata>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMetadata",
        __Marshaller_google_analytics_data_v1beta_GetMetadataRequest,
        __Marshaller_google_analytics_data_v1beta_Metadata);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Analytics.Data.V1Beta.RunRealtimeReportRequest, global::Google.Analytics.Data.V1Beta.RunRealtimeReportResponse> __Method_RunRealtimeReport = new grpc::Method<global::Google.Analytics.Data.V1Beta.RunRealtimeReportRequest, global::Google.Analytics.Data.V1Beta.RunRealtimeReportResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RunRealtimeReport",
        __Marshaller_google_analytics_data_v1beta_RunRealtimeReportRequest,
        __Marshaller_google_analytics_data_v1beta_RunRealtimeReportResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Analytics.Data.V1Beta.CheckCompatibilityRequest, global::Google.Analytics.Data.V1Beta.CheckCompatibilityResponse> __Method_CheckCompatibility = new grpc::Method<global::Google.Analytics.Data.V1Beta.CheckCompatibilityRequest, global::Google.Analytics.Data.V1Beta.CheckCompatibilityResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CheckCompatibility",
        __Marshaller_google_analytics_data_v1beta_CheckCompatibilityRequest,
        __Marshaller_google_analytics_data_v1beta_CheckCompatibilityResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Analytics.Data.V1Beta.AnalyticsDataApiReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of BetaAnalyticsData</summary>
    [grpc::BindServiceMethod(typeof(BetaAnalyticsData), "BindService")]
    public abstract partial class BetaAnalyticsDataBase
    {
      /// <summary>
      /// Returns a customized report of your Google Analytics event data. Reports
      /// contain statistics derived from data collected by the Google Analytics
      /// tracking code. The data returned from the API is as a table with columns
      /// for the requested dimensions and metrics. Metrics are individual
      /// measurements of user activity on your property, such as active users or
      /// event count. Dimensions break down metrics across some common criteria,
      /// such as country or event name.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Analytics.Data.V1Beta.RunReportResponse> RunReport(global::Google.Analytics.Data.V1Beta.RunReportRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a customized pivot report of your Google Analytics event data.
      /// Pivot reports are more advanced and expressive formats than regular
      /// reports. In a pivot report, dimensions are only visible if they are
      /// included in a pivot. Multiple pivots can be specified to further dissect
      /// your data.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Analytics.Data.V1Beta.RunPivotReportResponse> RunPivotReport(global::Google.Analytics.Data.V1Beta.RunPivotReportRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns multiple reports in a batch. All reports must be for the same
      /// GA4 Property.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Analytics.Data.V1Beta.BatchRunReportsResponse> BatchRunReports(global::Google.Analytics.Data.V1Beta.BatchRunReportsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns multiple pivot reports in a batch. All reports must be for the same
      /// GA4 Property.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Analytics.Data.V1Beta.BatchRunPivotReportsResponse> BatchRunPivotReports(global::Google.Analytics.Data.V1Beta.BatchRunPivotReportsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns metadata for dimensions and metrics available in reporting methods.
      /// Used to explore the dimensions and metrics. In this method, a Google
      /// Analytics GA4 Property Identifier is specified in the request, and
      /// the metadata response includes Custom dimensions and metrics as well as
      /// Universal metadata.
      ///
      /// For example if a custom metric with parameter name `levels_unlocked` is
      /// registered to a property, the Metadata response will contain
      /// `customEvent:levels_unlocked`. Universal metadata are dimensions and
      /// metrics applicable to any property such as `country` and `totalUsers`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Analytics.Data.V1Beta.Metadata> GetMetadata(global::Google.Analytics.Data.V1Beta.GetMetadataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// The Google Analytics Realtime API returns a customized report of realtime
      /// event data for your property. These reports show events and usage from the
      /// last 30 minutes.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Analytics.Data.V1Beta.RunRealtimeReportResponse> RunRealtimeReport(global::Google.Analytics.Data.V1Beta.RunRealtimeReportRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// This compatibility method lists dimensions and metrics that can be added to
      /// a report request and maintain compatibility. This method fails if the
      /// request's dimensions and metrics are incompatible.
      ///
      /// In Google Analytics, reports fail if they request incompatible dimensions
      /// and/or metrics; in that case, you will need to remove dimensions and/or
      /// metrics from the incompatible report until the report is compatible.
      ///
      /// The Realtime and Core reports have different compatibility rules. This
      /// method checks compatibility for Core reports.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Analytics.Data.V1Beta.CheckCompatibilityResponse> CheckCompatibility(global::Google.Analytics.Data.V1Beta.CheckCompatibilityRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for BetaAnalyticsData</summary>
    public partial class BetaAnalyticsDataClient : grpc::ClientBase<BetaAnalyticsDataClient>
    {
      /// <summary>Creates a new client for BetaAnalyticsData</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public BetaAnalyticsDataClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for BetaAnalyticsData that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public BetaAnalyticsDataClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected BetaAnalyticsDataClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected BetaAnalyticsDataClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Returns a customized report of your Google Analytics event data. Reports
      /// contain statistics derived from data collected by the Google Analytics
      /// tracking code. The data returned from the API is as a table with columns
      /// for the requested dimensions and metrics. Metrics are individual
      /// measurements of user activity on your property, such as active users or
      /// event count. Dimensions break down metrics across some common criteria,
      /// such as country or event name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Analytics.Data.V1Beta.RunReportResponse RunReport(global::Google.Analytics.Data.V1Beta.RunReportRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RunReport(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a customized report of your Google Analytics event data. Reports
      /// contain statistics derived from data collected by the Google Analytics
      /// tracking code. The data returned from the API is as a table with columns
      /// for the requested dimensions and metrics. Metrics are individual
      /// measurements of user activity on your property, such as active users or
      /// event count. Dimensions break down metrics across some common criteria,
      /// such as country or event name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Analytics.Data.V1Beta.RunReportResponse RunReport(global::Google.Analytics.Data.V1Beta.RunReportRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RunReport, null, options, request);
      }
      /// <summary>
      /// Returns a customized report of your Google Analytics event data. Reports
      /// contain statistics derived from data collected by the Google Analytics
      /// tracking code. The data returned from the API is as a table with columns
      /// for the requested dimensions and metrics. Metrics are individual
      /// measurements of user activity on your property, such as active users or
      /// event count. Dimensions break down metrics across some common criteria,
      /// such as country or event name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Analytics.Data.V1Beta.RunReportResponse> RunReportAsync(global::Google.Analytics.Data.V1Beta.RunReportRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RunReportAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a customized report of your Google Analytics event data. Reports
      /// contain statistics derived from data collected by the Google Analytics
      /// tracking code. The data returned from the API is as a table with columns
      /// for the requested dimensions and metrics. Metrics are individual
      /// measurements of user activity on your property, such as active users or
      /// event count. Dimensions break down metrics across some common criteria,
      /// such as country or event name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Analytics.Data.V1Beta.RunReportResponse> RunReportAsync(global::Google.Analytics.Data.V1Beta.RunReportRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RunReport, null, options, request);
      }
      /// <summary>
      /// Returns a customized pivot report of your Google Analytics event data.
      /// Pivot reports are more advanced and expressive formats than regular
      /// reports. In a pivot report, dimensions are only visible if they are
      /// included in a pivot. Multiple pivots can be specified to further dissect
      /// your data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Analytics.Data.V1Beta.RunPivotReportResponse RunPivotReport(global::Google.Analytics.Data.V1Beta.RunPivotReportRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RunPivotReport(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a customized pivot report of your Google Analytics event data.
      /// Pivot reports are more advanced and expressive formats than regular
      /// reports. In a pivot report, dimensions are only visible if they are
      /// included in a pivot. Multiple pivots can be specified to further dissect
      /// your data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Analytics.Data.V1Beta.RunPivotReportResponse RunPivotReport(global::Google.Analytics.Data.V1Beta.RunPivotReportRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RunPivotReport, null, options, request);
      }
      /// <summary>
      /// Returns a customized pivot report of your Google Analytics event data.
      /// Pivot reports are more advanced and expressive formats than regular
      /// reports. In a pivot report, dimensions are only visible if they are
      /// included in a pivot. Multiple pivots can be specified to further dissect
      /// your data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Analytics.Data.V1Beta.RunPivotReportResponse> RunPivotReportAsync(global::Google.Analytics.Data.V1Beta.RunPivotReportRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RunPivotReportAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a customized pivot report of your Google Analytics event data.
      /// Pivot reports are more advanced and expressive formats than regular
      /// reports. In a pivot report, dimensions are only visible if they are
      /// included in a pivot. Multiple pivots can be specified to further dissect
      /// your data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Analytics.Data.V1Beta.RunPivotReportResponse> RunPivotReportAsync(global::Google.Analytics.Data.V1Beta.RunPivotReportRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RunPivotReport, null, options, request);
      }
      /// <summary>
      /// Returns multiple reports in a batch. All reports must be for the same
      /// GA4 Property.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Analytics.Data.V1Beta.BatchRunReportsResponse BatchRunReports(global::Google.Analytics.Data.V1Beta.BatchRunReportsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchRunReports(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns multiple reports in a batch. All reports must be for the same
      /// GA4 Property.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Analytics.Data.V1Beta.BatchRunReportsResponse BatchRunReports(global::Google.Analytics.Data.V1Beta.BatchRunReportsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchRunReports, null, options, request);
      }
      /// <summary>
      /// Returns multiple reports in a batch. All reports must be for the same
      /// GA4 Property.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Analytics.Data.V1Beta.BatchRunReportsResponse> BatchRunReportsAsync(global::Google.Analytics.Data.V1Beta.BatchRunReportsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchRunReportsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns multiple reports in a batch. All reports must be for the same
      /// GA4 Property.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Analytics.Data.V1Beta.BatchRunReportsResponse> BatchRunReportsAsync(global::Google.Analytics.Data.V1Beta.BatchRunReportsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchRunReports, null, options, request);
      }
      /// <summary>
      /// Returns multiple pivot reports in a batch. All reports must be for the same
      /// GA4 Property.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Analytics.Data.V1Beta.BatchRunPivotReportsResponse BatchRunPivotReports(global::Google.Analytics.Data.V1Beta.BatchRunPivotReportsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchRunPivotReports(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns multiple pivot reports in a batch. All reports must be for the same
      /// GA4 Property.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Analytics.Data.V1Beta.BatchRunPivotReportsResponse BatchRunPivotReports(global::Google.Analytics.Data.V1Beta.BatchRunPivotReportsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchRunPivotReports, null, options, request);
      }
      /// <summary>
      /// Returns multiple pivot reports in a batch. All reports must be for the same
      /// GA4 Property.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Analytics.Data.V1Beta.BatchRunPivotReportsResponse> BatchRunPivotReportsAsync(global::Google.Analytics.Data.V1Beta.BatchRunPivotReportsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchRunPivotReportsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns multiple pivot reports in a batch. All reports must be for the same
      /// GA4 Property.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Analytics.Data.V1Beta.BatchRunPivotReportsResponse> BatchRunPivotReportsAsync(global::Google.Analytics.Data.V1Beta.BatchRunPivotReportsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchRunPivotReports, null, options, request);
      }
      /// <summary>
      /// Returns metadata for dimensions and metrics available in reporting methods.
      /// Used to explore the dimensions and metrics. In this method, a Google
      /// Analytics GA4 Property Identifier is specified in the request, and
      /// the metadata response includes Custom dimensions and metrics as well as
      /// Universal metadata.
      ///
      /// For example if a custom metric with parameter name `levels_unlocked` is
      /// registered to a property, the Metadata response will contain
      /// `customEvent:levels_unlocked`. Universal metadata are dimensions and
      /// metrics applicable to any property such as `country` and `totalUsers`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Analytics.Data.V1Beta.Metadata GetMetadata(global::Google.Analytics.Data.V1Beta.GetMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMetadata(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns metadata for dimensions and metrics available in reporting methods.
      /// Used to explore the dimensions and metrics. In this method, a Google
      /// Analytics GA4 Property Identifier is specified in the request, and
      /// the metadata response includes Custom dimensions and metrics as well as
      /// Universal metadata.
      ///
      /// For example if a custom metric with parameter name `levels_unlocked` is
      /// registered to a property, the Metadata response will contain
      /// `customEvent:levels_unlocked`. Universal metadata are dimensions and
      /// metrics applicable to any property such as `country` and `totalUsers`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Analytics.Data.V1Beta.Metadata GetMetadata(global::Google.Analytics.Data.V1Beta.GetMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMetadata, null, options, request);
      }
      /// <summary>
      /// Returns metadata for dimensions and metrics available in reporting methods.
      /// Used to explore the dimensions and metrics. In this method, a Google
      /// Analytics GA4 Property Identifier is specified in the request, and
      /// the metadata response includes Custom dimensions and metrics as well as
      /// Universal metadata.
      ///
      /// For example if a custom metric with parameter name `levels_unlocked` is
      /// registered to a property, the Metadata response will contain
      /// `customEvent:levels_unlocked`. Universal metadata are dimensions and
      /// metrics applicable to any property such as `country` and `totalUsers`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Analytics.Data.V1Beta.Metadata> GetMetadataAsync(global::Google.Analytics.Data.V1Beta.GetMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMetadataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns metadata for dimensions and metrics available in reporting methods.
      /// Used to explore the dimensions and metrics. In this method, a Google
      /// Analytics GA4 Property Identifier is specified in the request, and
      /// the metadata response includes Custom dimensions and metrics as well as
      /// Universal metadata.
      ///
      /// For example if a custom metric with parameter name `levels_unlocked` is
      /// registered to a property, the Metadata response will contain
      /// `customEvent:levels_unlocked`. Universal metadata are dimensions and
      /// metrics applicable to any property such as `country` and `totalUsers`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Analytics.Data.V1Beta.Metadata> GetMetadataAsync(global::Google.Analytics.Data.V1Beta.GetMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMetadata, null, options, request);
      }
      /// <summary>
      /// The Google Analytics Realtime API returns a customized report of realtime
      /// event data for your property. These reports show events and usage from the
      /// last 30 minutes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Analytics.Data.V1Beta.RunRealtimeReportResponse RunRealtimeReport(global::Google.Analytics.Data.V1Beta.RunRealtimeReportRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RunRealtimeReport(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// The Google Analytics Realtime API returns a customized report of realtime
      /// event data for your property. These reports show events and usage from the
      /// last 30 minutes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Analytics.Data.V1Beta.RunRealtimeReportResponse RunRealtimeReport(global::Google.Analytics.Data.V1Beta.RunRealtimeReportRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RunRealtimeReport, null, options, request);
      }
      /// <summary>
      /// The Google Analytics Realtime API returns a customized report of realtime
      /// event data for your property. These reports show events and usage from the
      /// last 30 minutes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Analytics.Data.V1Beta.RunRealtimeReportResponse> RunRealtimeReportAsync(global::Google.Analytics.Data.V1Beta.RunRealtimeReportRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RunRealtimeReportAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// The Google Analytics Realtime API returns a customized report of realtime
      /// event data for your property. These reports show events and usage from the
      /// last 30 minutes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Analytics.Data.V1Beta.RunRealtimeReportResponse> RunRealtimeReportAsync(global::Google.Analytics.Data.V1Beta.RunRealtimeReportRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RunRealtimeReport, null, options, request);
      }
      /// <summary>
      /// This compatibility method lists dimensions and metrics that can be added to
      /// a report request and maintain compatibility. This method fails if the
      /// request's dimensions and metrics are incompatible.
      ///
      /// In Google Analytics, reports fail if they request incompatible dimensions
      /// and/or metrics; in that case, you will need to remove dimensions and/or
      /// metrics from the incompatible report until the report is compatible.
      ///
      /// The Realtime and Core reports have different compatibility rules. This
      /// method checks compatibility for Core reports.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Analytics.Data.V1Beta.CheckCompatibilityResponse CheckCompatibility(global::Google.Analytics.Data.V1Beta.CheckCompatibilityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckCompatibility(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This compatibility method lists dimensions and metrics that can be added to
      /// a report request and maintain compatibility. This method fails if the
      /// request's dimensions and metrics are incompatible.
      ///
      /// In Google Analytics, reports fail if they request incompatible dimensions
      /// and/or metrics; in that case, you will need to remove dimensions and/or
      /// metrics from the incompatible report until the report is compatible.
      ///
      /// The Realtime and Core reports have different compatibility rules. This
      /// method checks compatibility for Core reports.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Analytics.Data.V1Beta.CheckCompatibilityResponse CheckCompatibility(global::Google.Analytics.Data.V1Beta.CheckCompatibilityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CheckCompatibility, null, options, request);
      }
      /// <summary>
      /// This compatibility method lists dimensions and metrics that can be added to
      /// a report request and maintain compatibility. This method fails if the
      /// request's dimensions and metrics are incompatible.
      ///
      /// In Google Analytics, reports fail if they request incompatible dimensions
      /// and/or metrics; in that case, you will need to remove dimensions and/or
      /// metrics from the incompatible report until the report is compatible.
      ///
      /// The Realtime and Core reports have different compatibility rules. This
      /// method checks compatibility for Core reports.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Analytics.Data.V1Beta.CheckCompatibilityResponse> CheckCompatibilityAsync(global::Google.Analytics.Data.V1Beta.CheckCompatibilityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckCompatibilityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This compatibility method lists dimensions and metrics that can be added to
      /// a report request and maintain compatibility. This method fails if the
      /// request's dimensions and metrics are incompatible.
      ///
      /// In Google Analytics, reports fail if they request incompatible dimensions
      /// and/or metrics; in that case, you will need to remove dimensions and/or
      /// metrics from the incompatible report until the report is compatible.
      ///
      /// The Realtime and Core reports have different compatibility rules. This
      /// method checks compatibility for Core reports.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Analytics.Data.V1Beta.CheckCompatibilityResponse> CheckCompatibilityAsync(global::Google.Analytics.Data.V1Beta.CheckCompatibilityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CheckCompatibility, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override BetaAnalyticsDataClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new BetaAnalyticsDataClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(BetaAnalyticsDataBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_RunReport, serviceImpl.RunReport)
          .AddMethod(__Method_RunPivotReport, serviceImpl.RunPivotReport)
          .AddMethod(__Method_BatchRunReports, serviceImpl.BatchRunReports)
          .AddMethod(__Method_BatchRunPivotReports, serviceImpl.BatchRunPivotReports)
          .AddMethod(__Method_GetMetadata, serviceImpl.GetMetadata)
          .AddMethod(__Method_RunRealtimeReport, serviceImpl.RunRealtimeReport)
          .AddMethod(__Method_CheckCompatibility, serviceImpl.CheckCompatibility).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, BetaAnalyticsDataBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_RunReport, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Analytics.Data.V1Beta.RunReportRequest, global::Google.Analytics.Data.V1Beta.RunReportResponse>(serviceImpl.RunReport));
      serviceBinder.AddMethod(__Method_RunPivotReport, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Analytics.Data.V1Beta.RunPivotReportRequest, global::Google.Analytics.Data.V1Beta.RunPivotReportResponse>(serviceImpl.RunPivotReport));
      serviceBinder.AddMethod(__Method_BatchRunReports, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Analytics.Data.V1Beta.BatchRunReportsRequest, global::Google.Analytics.Data.V1Beta.BatchRunReportsResponse>(serviceImpl.BatchRunReports));
      serviceBinder.AddMethod(__Method_BatchRunPivotReports, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Analytics.Data.V1Beta.BatchRunPivotReportsRequest, global::Google.Analytics.Data.V1Beta.BatchRunPivotReportsResponse>(serviceImpl.BatchRunPivotReports));
      serviceBinder.AddMethod(__Method_GetMetadata, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Analytics.Data.V1Beta.GetMetadataRequest, global::Google.Analytics.Data.V1Beta.Metadata>(serviceImpl.GetMetadata));
      serviceBinder.AddMethod(__Method_RunRealtimeReport, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Analytics.Data.V1Beta.RunRealtimeReportRequest, global::Google.Analytics.Data.V1Beta.RunRealtimeReportResponse>(serviceImpl.RunRealtimeReport));
      serviceBinder.AddMethod(__Method_CheckCompatibility, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Analytics.Data.V1Beta.CheckCompatibilityRequest, global::Google.Analytics.Data.V1Beta.CheckCompatibilityResponse>(serviceImpl.CheckCompatibility));
    }

  }
}
#endregion
