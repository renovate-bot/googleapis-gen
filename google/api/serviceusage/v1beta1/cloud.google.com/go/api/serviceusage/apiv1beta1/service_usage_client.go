// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package serviceusage

import (
	"context"
	"fmt"
	"math"
	"net/url"
	"time"

	"cloud.google.com/go/longrunning"
	lroauto "cloud.google.com/go/longrunning/autogen"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	serviceusagepb "google.golang.org/genproto/googleapis/api/serviceusage/v1beta1"
	longrunningpb "google.golang.org/genproto/googleapis/longrunning"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	"google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

var newClientHook clientHook

// CallOptions contains the retry settings for each method of Client.
type CallOptions struct {
	EnableService            []gax.CallOption
	DisableService           []gax.CallOption
	GetService               []gax.CallOption
	ListServices             []gax.CallOption
	BatchEnableServices      []gax.CallOption
	ListConsumerQuotaMetrics []gax.CallOption
	GetConsumerQuotaMetric   []gax.CallOption
	GetConsumerQuotaLimit    []gax.CallOption
	CreateAdminOverride      []gax.CallOption
	UpdateAdminOverride      []gax.CallOption
	DeleteAdminOverride      []gax.CallOption
	ListAdminOverrides       []gax.CallOption
	ImportAdminOverrides     []gax.CallOption
	CreateConsumerOverride   []gax.CallOption
	UpdateConsumerOverride   []gax.CallOption
	DeleteConsumerOverride   []gax.CallOption
	ListConsumerOverrides    []gax.CallOption
	ImportConsumerOverrides  []gax.CallOption
	GenerateServiceIdentity  []gax.CallOption
}

func defaultGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("serviceusage.googleapis.com:443"),
		internaloption.WithDefaultMTLSEndpoint("serviceusage.mtls.googleapis.com:443"),
		internaloption.WithDefaultAudience("https://serviceusage.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		option.WithGRPCDialOption(grpc.WithDisableServiceConfig()),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultCallOptions() *CallOptions {
	return &CallOptions{
		EnableService:            []gax.CallOption{},
		DisableService:           []gax.CallOption{},
		GetService:               []gax.CallOption{},
		ListServices:             []gax.CallOption{},
		BatchEnableServices:      []gax.CallOption{},
		ListConsumerQuotaMetrics: []gax.CallOption{},
		GetConsumerQuotaMetric:   []gax.CallOption{},
		GetConsumerQuotaLimit:    []gax.CallOption{},
		CreateAdminOverride:      []gax.CallOption{},
		UpdateAdminOverride:      []gax.CallOption{},
		DeleteAdminOverride:      []gax.CallOption{},
		ListAdminOverrides:       []gax.CallOption{},
		ImportAdminOverrides:     []gax.CallOption{},
		CreateConsumerOverride:   []gax.CallOption{},
		UpdateConsumerOverride:   []gax.CallOption{},
		DeleteConsumerOverride:   []gax.CallOption{},
		ListConsumerOverrides:    []gax.CallOption{},
		ImportConsumerOverrides:  []gax.CallOption{},
		GenerateServiceIdentity:  []gax.CallOption{},
	}
}

// internalClient is an interface that defines the methods availaible from Service Usage API.
type internalClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	EnableService(context.Context, *serviceusagepb.EnableServiceRequest, ...gax.CallOption) (*EnableServiceOperation, error)
	EnableServiceOperation(name string) *EnableServiceOperation
	DisableService(context.Context, *serviceusagepb.DisableServiceRequest, ...gax.CallOption) (*DisableServiceOperation, error)
	DisableServiceOperation(name string) *DisableServiceOperation
	GetService(context.Context, *serviceusagepb.GetServiceRequest, ...gax.CallOption) (*serviceusagepb.Service, error)
	ListServices(context.Context, *serviceusagepb.ListServicesRequest, ...gax.CallOption) *ServiceIterator
	BatchEnableServices(context.Context, *serviceusagepb.BatchEnableServicesRequest, ...gax.CallOption) (*BatchEnableServicesOperation, error)
	BatchEnableServicesOperation(name string) *BatchEnableServicesOperation
	ListConsumerQuotaMetrics(context.Context, *serviceusagepb.ListConsumerQuotaMetricsRequest, ...gax.CallOption) *ConsumerQuotaMetricIterator
	GetConsumerQuotaMetric(context.Context, *serviceusagepb.GetConsumerQuotaMetricRequest, ...gax.CallOption) (*serviceusagepb.ConsumerQuotaMetric, error)
	GetConsumerQuotaLimit(context.Context, *serviceusagepb.GetConsumerQuotaLimitRequest, ...gax.CallOption) (*serviceusagepb.ConsumerQuotaLimit, error)
	CreateAdminOverride(context.Context, *serviceusagepb.CreateAdminOverrideRequest, ...gax.CallOption) (*CreateAdminOverrideOperation, error)
	CreateAdminOverrideOperation(name string) *CreateAdminOverrideOperation
	UpdateAdminOverride(context.Context, *serviceusagepb.UpdateAdminOverrideRequest, ...gax.CallOption) (*UpdateAdminOverrideOperation, error)
	UpdateAdminOverrideOperation(name string) *UpdateAdminOverrideOperation
	DeleteAdminOverride(context.Context, *serviceusagepb.DeleteAdminOverrideRequest, ...gax.CallOption) (*DeleteAdminOverrideOperation, error)
	DeleteAdminOverrideOperation(name string) *DeleteAdminOverrideOperation
	ListAdminOverrides(context.Context, *serviceusagepb.ListAdminOverridesRequest, ...gax.CallOption) *QuotaOverrideIterator
	ImportAdminOverrides(context.Context, *serviceusagepb.ImportAdminOverridesRequest, ...gax.CallOption) (*ImportAdminOverridesOperation, error)
	ImportAdminOverridesOperation(name string) *ImportAdminOverridesOperation
	CreateConsumerOverride(context.Context, *serviceusagepb.CreateConsumerOverrideRequest, ...gax.CallOption) (*CreateConsumerOverrideOperation, error)
	CreateConsumerOverrideOperation(name string) *CreateConsumerOverrideOperation
	UpdateConsumerOverride(context.Context, *serviceusagepb.UpdateConsumerOverrideRequest, ...gax.CallOption) (*UpdateConsumerOverrideOperation, error)
	UpdateConsumerOverrideOperation(name string) *UpdateConsumerOverrideOperation
	DeleteConsumerOverride(context.Context, *serviceusagepb.DeleteConsumerOverrideRequest, ...gax.CallOption) (*DeleteConsumerOverrideOperation, error)
	DeleteConsumerOverrideOperation(name string) *DeleteConsumerOverrideOperation
	ListConsumerOverrides(context.Context, *serviceusagepb.ListConsumerOverridesRequest, ...gax.CallOption) *QuotaOverrideIterator
	ImportConsumerOverrides(context.Context, *serviceusagepb.ImportConsumerOverridesRequest, ...gax.CallOption) (*ImportConsumerOverridesOperation, error)
	ImportConsumerOverridesOperation(name string) *ImportConsumerOverridesOperation
	GenerateServiceIdentity(context.Context, *serviceusagepb.GenerateServiceIdentityRequest, ...gax.CallOption) (*GenerateServiceIdentityOperation, error)
	GenerateServiceIdentityOperation(name string) *GenerateServiceIdentityOperation
}

// Client is a client for interacting with Service Usage API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// Service Usage API (at https://cloud.google.com/service-usage/docs/overview)
type Client struct {
	// The internal transport-dependent client.
	internalClient internalClient

	// The call options for this service.
	CallOptions *CallOptions

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient *lroauto.OperationsClient
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *Client) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *Client) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *Client) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// EnableService enables a service so that it can be used with a project.
//
// Operation response type: google.protobuf.Empty
//
// Deprecated: EnableService may be removed in a future version.
func (c *Client) EnableService(ctx context.Context, req *serviceusagepb.EnableServiceRequest, opts ...gax.CallOption) (*EnableServiceOperation, error) {
	return c.internalClient.EnableService(ctx, req, opts...)
}

// EnableServiceOperation returns a new EnableServiceOperation from a given name.
// The name must be that of a previously created EnableServiceOperation, possibly from a different process.
func (c *Client) EnableServiceOperation(name string) *EnableServiceOperation {
	return c.internalClient.EnableServiceOperation(name)
}

// DisableService disables a service so that it can no longer be used with a project.
// This prevents unintended usage that may cause unexpected billing
// charges or security leaks.
//
// It is not valid to call the disable method on a service that is not
// currently enabled. Callers will receive a FAILED_PRECONDITION status if
// the target service is not currently enabled.
//
// Operation response type: google.protobuf.Empty
//
// Deprecated: DisableService may be removed in a future version.
func (c *Client) DisableService(ctx context.Context, req *serviceusagepb.DisableServiceRequest, opts ...gax.CallOption) (*DisableServiceOperation, error) {
	return c.internalClient.DisableService(ctx, req, opts...)
}

// DisableServiceOperation returns a new DisableServiceOperation from a given name.
// The name must be that of a previously created DisableServiceOperation, possibly from a different process.
func (c *Client) DisableServiceOperation(name string) *DisableServiceOperation {
	return c.internalClient.DisableServiceOperation(name)
}

// GetService returns the service configuration and enabled state for a given service.
//
// Deprecated: GetService may be removed in a future version.
func (c *Client) GetService(ctx context.Context, req *serviceusagepb.GetServiceRequest, opts ...gax.CallOption) (*serviceusagepb.Service, error) {
	return c.internalClient.GetService(ctx, req, opts...)
}

// ListServices lists all services available to the specified project, and the current
// state of those services with respect to the project. The list includes
// all public services, all services for which the calling user has the
// servicemanagement.services.bind permission, and all services that have
// already been enabled on the project. The list can be filtered to
// only include services in a specific state, for example to only include
// services enabled on the project.
//
// Deprecated: ListServices may be removed in a future version.
func (c *Client) ListServices(ctx context.Context, req *serviceusagepb.ListServicesRequest, opts ...gax.CallOption) *ServiceIterator {
	return c.internalClient.ListServices(ctx, req, opts...)
}

// BatchEnableServices enables multiple services on a project. The operation is atomic: if
// enabling any service fails, then the entire batch fails, and no state
// changes occur.
//
// Operation response type: google.protobuf.Empty
//
// Deprecated: BatchEnableServices may be removed in a future version.
func (c *Client) BatchEnableServices(ctx context.Context, req *serviceusagepb.BatchEnableServicesRequest, opts ...gax.CallOption) (*BatchEnableServicesOperation, error) {
	return c.internalClient.BatchEnableServices(ctx, req, opts...)
}

// BatchEnableServicesOperation returns a new BatchEnableServicesOperation from a given name.
// The name must be that of a previously created BatchEnableServicesOperation, possibly from a different process.
func (c *Client) BatchEnableServicesOperation(name string) *BatchEnableServicesOperation {
	return c.internalClient.BatchEnableServicesOperation(name)
}

// ListConsumerQuotaMetrics retrieves a summary of all quota information visible to the service
// consumer, organized by service metric. Each metric includes information
// about all of its defined limits. Each limit includes the limit
// configuration (quota unit, preciseness, default value), the current
// effective limit value, and all of the overrides applied to the limit.
func (c *Client) ListConsumerQuotaMetrics(ctx context.Context, req *serviceusagepb.ListConsumerQuotaMetricsRequest, opts ...gax.CallOption) *ConsumerQuotaMetricIterator {
	return c.internalClient.ListConsumerQuotaMetrics(ctx, req, opts...)
}

// GetConsumerQuotaMetric retrieves a summary of quota information for a specific quota metric
func (c *Client) GetConsumerQuotaMetric(ctx context.Context, req *serviceusagepb.GetConsumerQuotaMetricRequest, opts ...gax.CallOption) (*serviceusagepb.ConsumerQuotaMetric, error) {
	return c.internalClient.GetConsumerQuotaMetric(ctx, req, opts...)
}

// GetConsumerQuotaLimit retrieves a summary of quota information for a specific quota limit.
func (c *Client) GetConsumerQuotaLimit(ctx context.Context, req *serviceusagepb.GetConsumerQuotaLimitRequest, opts ...gax.CallOption) (*serviceusagepb.ConsumerQuotaLimit, error) {
	return c.internalClient.GetConsumerQuotaLimit(ctx, req, opts...)
}

// CreateAdminOverride creates an admin override.
// An admin override is applied by an administrator of a parent folder or
// parent organization of the consumer receiving the override. An admin
// override is intended to limit the amount of quota the consumer can use out
// of the total quota pool allocated to all children of the folder or
// organization.
func (c *Client) CreateAdminOverride(ctx context.Context, req *serviceusagepb.CreateAdminOverrideRequest, opts ...gax.CallOption) (*CreateAdminOverrideOperation, error) {
	return c.internalClient.CreateAdminOverride(ctx, req, opts...)
}

// CreateAdminOverrideOperation returns a new CreateAdminOverrideOperation from a given name.
// The name must be that of a previously created CreateAdminOverrideOperation, possibly from a different process.
func (c *Client) CreateAdminOverrideOperation(name string) *CreateAdminOverrideOperation {
	return c.internalClient.CreateAdminOverrideOperation(name)
}

// UpdateAdminOverride updates an admin override.
func (c *Client) UpdateAdminOverride(ctx context.Context, req *serviceusagepb.UpdateAdminOverrideRequest, opts ...gax.CallOption) (*UpdateAdminOverrideOperation, error) {
	return c.internalClient.UpdateAdminOverride(ctx, req, opts...)
}

// UpdateAdminOverrideOperation returns a new UpdateAdminOverrideOperation from a given name.
// The name must be that of a previously created UpdateAdminOverrideOperation, possibly from a different process.
func (c *Client) UpdateAdminOverrideOperation(name string) *UpdateAdminOverrideOperation {
	return c.internalClient.UpdateAdminOverrideOperation(name)
}

// DeleteAdminOverride deletes an admin override.
func (c *Client) DeleteAdminOverride(ctx context.Context, req *serviceusagepb.DeleteAdminOverrideRequest, opts ...gax.CallOption) (*DeleteAdminOverrideOperation, error) {
	return c.internalClient.DeleteAdminOverride(ctx, req, opts...)
}

// DeleteAdminOverrideOperation returns a new DeleteAdminOverrideOperation from a given name.
// The name must be that of a previously created DeleteAdminOverrideOperation, possibly from a different process.
func (c *Client) DeleteAdminOverrideOperation(name string) *DeleteAdminOverrideOperation {
	return c.internalClient.DeleteAdminOverrideOperation(name)
}

// ListAdminOverrides lists all admin overrides on this limit.
func (c *Client) ListAdminOverrides(ctx context.Context, req *serviceusagepb.ListAdminOverridesRequest, opts ...gax.CallOption) *QuotaOverrideIterator {
	return c.internalClient.ListAdminOverrides(ctx, req, opts...)
}

// ImportAdminOverrides creates or updates multiple admin overrides atomically, all on the
// same consumer, but on many different metrics or limits.
// The name field in the quota override message should not be set.
func (c *Client) ImportAdminOverrides(ctx context.Context, req *serviceusagepb.ImportAdminOverridesRequest, opts ...gax.CallOption) (*ImportAdminOverridesOperation, error) {
	return c.internalClient.ImportAdminOverrides(ctx, req, opts...)
}

// ImportAdminOverridesOperation returns a new ImportAdminOverridesOperation from a given name.
// The name must be that of a previously created ImportAdminOverridesOperation, possibly from a different process.
func (c *Client) ImportAdminOverridesOperation(name string) *ImportAdminOverridesOperation {
	return c.internalClient.ImportAdminOverridesOperation(name)
}

// CreateConsumerOverride creates a consumer override.
// A consumer override is applied to the consumer on its own authority to
// limit its own quota usage. Consumer overrides cannot be used to grant more
// quota than would be allowed by admin overrides, producer overrides, or the
// default limit of the service.
func (c *Client) CreateConsumerOverride(ctx context.Context, req *serviceusagepb.CreateConsumerOverrideRequest, opts ...gax.CallOption) (*CreateConsumerOverrideOperation, error) {
	return c.internalClient.CreateConsumerOverride(ctx, req, opts...)
}

// CreateConsumerOverrideOperation returns a new CreateConsumerOverrideOperation from a given name.
// The name must be that of a previously created CreateConsumerOverrideOperation, possibly from a different process.
func (c *Client) CreateConsumerOverrideOperation(name string) *CreateConsumerOverrideOperation {
	return c.internalClient.CreateConsumerOverrideOperation(name)
}

// UpdateConsumerOverride updates a consumer override.
func (c *Client) UpdateConsumerOverride(ctx context.Context, req *serviceusagepb.UpdateConsumerOverrideRequest, opts ...gax.CallOption) (*UpdateConsumerOverrideOperation, error) {
	return c.internalClient.UpdateConsumerOverride(ctx, req, opts...)
}

// UpdateConsumerOverrideOperation returns a new UpdateConsumerOverrideOperation from a given name.
// The name must be that of a previously created UpdateConsumerOverrideOperation, possibly from a different process.
func (c *Client) UpdateConsumerOverrideOperation(name string) *UpdateConsumerOverrideOperation {
	return c.internalClient.UpdateConsumerOverrideOperation(name)
}

// DeleteConsumerOverride deletes a consumer override.
func (c *Client) DeleteConsumerOverride(ctx context.Context, req *serviceusagepb.DeleteConsumerOverrideRequest, opts ...gax.CallOption) (*DeleteConsumerOverrideOperation, error) {
	return c.internalClient.DeleteConsumerOverride(ctx, req, opts...)
}

// DeleteConsumerOverrideOperation returns a new DeleteConsumerOverrideOperation from a given name.
// The name must be that of a previously created DeleteConsumerOverrideOperation, possibly from a different process.
func (c *Client) DeleteConsumerOverrideOperation(name string) *DeleteConsumerOverrideOperation {
	return c.internalClient.DeleteConsumerOverrideOperation(name)
}

// ListConsumerOverrides lists all consumer overrides on this limit.
func (c *Client) ListConsumerOverrides(ctx context.Context, req *serviceusagepb.ListConsumerOverridesRequest, opts ...gax.CallOption) *QuotaOverrideIterator {
	return c.internalClient.ListConsumerOverrides(ctx, req, opts...)
}

// ImportConsumerOverrides creates or updates multiple consumer overrides atomically, all on the
// same consumer, but on many different metrics or limits.
// The name field in the quota override message should not be set.
func (c *Client) ImportConsumerOverrides(ctx context.Context, req *serviceusagepb.ImportConsumerOverridesRequest, opts ...gax.CallOption) (*ImportConsumerOverridesOperation, error) {
	return c.internalClient.ImportConsumerOverrides(ctx, req, opts...)
}

// ImportConsumerOverridesOperation returns a new ImportConsumerOverridesOperation from a given name.
// The name must be that of a previously created ImportConsumerOverridesOperation, possibly from a different process.
func (c *Client) ImportConsumerOverridesOperation(name string) *ImportConsumerOverridesOperation {
	return c.internalClient.ImportConsumerOverridesOperation(name)
}

// GenerateServiceIdentity generates service identity for service.
func (c *Client) GenerateServiceIdentity(ctx context.Context, req *serviceusagepb.GenerateServiceIdentityRequest, opts ...gax.CallOption) (*GenerateServiceIdentityOperation, error) {
	return c.internalClient.GenerateServiceIdentity(ctx, req, opts...)
}

// GenerateServiceIdentityOperation returns a new GenerateServiceIdentityOperation from a given name.
// The name must be that of a previously created GenerateServiceIdentityOperation, possibly from a different process.
func (c *Client) GenerateServiceIdentityOperation(name string) *GenerateServiceIdentityOperation {
	return c.internalClient.GenerateServiceIdentityOperation(name)
}

// gRPCClient is a client for interacting with Service Usage API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type gRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// flag to opt out of default deadlines via GOOGLE_API_GO_EXPERIMENTAL_DISABLE_DEFAULT_DEADLINE
	disableDeadlines bool

	// Points back to the CallOptions field of the containing Client
	CallOptions **CallOptions

	// The gRPC API client.
	client serviceusagepb.ServiceUsageClient

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient **lroauto.OperationsClient

	// The x-goog-* metadata to be sent with each request.
	xGoogMetadata metadata.MD
}

// NewClient creates a new service usage client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// Service Usage API (at https://cloud.google.com/service-usage/docs/overview)
func NewClient(ctx context.Context, opts ...option.ClientOption) (*Client, error) {
	clientOpts := defaultGRPCClientOptions()
	if newClientHook != nil {
		hookOpts, err := newClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	disableDeadlines, err := checkDisableDeadlines()
	if err != nil {
		return nil, err
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := Client{CallOptions: defaultCallOptions()}

	c := &gRPCClient{
		connPool:         connPool,
		disableDeadlines: disableDeadlines,
		client:           serviceusagepb.NewServiceUsageClient(connPool),
		CallOptions:      &client.CallOptions,
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	client.LROClient, err = lroauto.NewOperationsClient(ctx, gtransport.WithConnPool(connPool))
	if err != nil {
		// This error "should not happen", since we are just reusing old connection pool
		// and never actually need to dial.
		// If this does happen, we could leak connp. However, we cannot close conn:
		// If the user invoked the constructor with option.WithGRPCConn,
		// we would close a connection that's still in use.
		// TODO: investigate error conditions.
		return nil, err
	}
	c.LROClient = &client.LROClient
	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *gRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *gRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", versionGo()}, keyval...)
	kv = append(kv, "gapic", versionClient, "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogMetadata = metadata.Pairs("x-goog-api-client", gax.XGoogHeader(kv...))
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *gRPCClient) Close() error {
	return c.connPool.Close()
}

func (c *gRPCClient) EnableService(ctx context.Context, req *serviceusagepb.EnableServiceRequest, opts ...gax.CallOption) (*EnableServiceOperation, error) {
	if _, ok := ctx.Deadline(); !ok && !c.disableDeadlines {
		cctx, cancel := context.WithTimeout(ctx, 5000*time.Millisecond)
		defer cancel()
		ctx = cctx
	}
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).EnableService[0:len((*c.CallOptions).EnableService):len((*c.CallOptions).EnableService)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.EnableService(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &EnableServiceOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *gRPCClient) DisableService(ctx context.Context, req *serviceusagepb.DisableServiceRequest, opts ...gax.CallOption) (*DisableServiceOperation, error) {
	if _, ok := ctx.Deadline(); !ok && !c.disableDeadlines {
		cctx, cancel := context.WithTimeout(ctx, 5000*time.Millisecond)
		defer cancel()
		ctx = cctx
	}
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).DisableService[0:len((*c.CallOptions).DisableService):len((*c.CallOptions).DisableService)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.DisableService(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &DisableServiceOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *gRPCClient) GetService(ctx context.Context, req *serviceusagepb.GetServiceRequest, opts ...gax.CallOption) (*serviceusagepb.Service, error) {
	if _, ok := ctx.Deadline(); !ok && !c.disableDeadlines {
		cctx, cancel := context.WithTimeout(ctx, 5000*time.Millisecond)
		defer cancel()
		ctx = cctx
	}
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).GetService[0:len((*c.CallOptions).GetService):len((*c.CallOptions).GetService)], opts...)
	var resp *serviceusagepb.Service
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.GetService(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) ListServices(ctx context.Context, req *serviceusagepb.ListServicesRequest, opts ...gax.CallOption) *ServiceIterator {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).ListServices[0:len((*c.CallOptions).ListServices):len((*c.CallOptions).ListServices)], opts...)
	it := &ServiceIterator{}
	req = proto.Clone(req).(*serviceusagepb.ListServicesRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*serviceusagepb.Service, string, error) {
		resp := &serviceusagepb.ListServicesResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.client.ListServices(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetServices(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *gRPCClient) BatchEnableServices(ctx context.Context, req *serviceusagepb.BatchEnableServicesRequest, opts ...gax.CallOption) (*BatchEnableServicesOperation, error) {
	if _, ok := ctx.Deadline(); !ok && !c.disableDeadlines {
		cctx, cancel := context.WithTimeout(ctx, 5000*time.Millisecond)
		defer cancel()
		ctx = cctx
	}
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).BatchEnableServices[0:len((*c.CallOptions).BatchEnableServices):len((*c.CallOptions).BatchEnableServices)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.BatchEnableServices(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &BatchEnableServicesOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *gRPCClient) ListConsumerQuotaMetrics(ctx context.Context, req *serviceusagepb.ListConsumerQuotaMetricsRequest, opts ...gax.CallOption) *ConsumerQuotaMetricIterator {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).ListConsumerQuotaMetrics[0:len((*c.CallOptions).ListConsumerQuotaMetrics):len((*c.CallOptions).ListConsumerQuotaMetrics)], opts...)
	it := &ConsumerQuotaMetricIterator{}
	req = proto.Clone(req).(*serviceusagepb.ListConsumerQuotaMetricsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*serviceusagepb.ConsumerQuotaMetric, string, error) {
		resp := &serviceusagepb.ListConsumerQuotaMetricsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.client.ListConsumerQuotaMetrics(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetMetrics(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *gRPCClient) GetConsumerQuotaMetric(ctx context.Context, req *serviceusagepb.GetConsumerQuotaMetricRequest, opts ...gax.CallOption) (*serviceusagepb.ConsumerQuotaMetric, error) {
	if _, ok := ctx.Deadline(); !ok && !c.disableDeadlines {
		cctx, cancel := context.WithTimeout(ctx, 5000*time.Millisecond)
		defer cancel()
		ctx = cctx
	}
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).GetConsumerQuotaMetric[0:len((*c.CallOptions).GetConsumerQuotaMetric):len((*c.CallOptions).GetConsumerQuotaMetric)], opts...)
	var resp *serviceusagepb.ConsumerQuotaMetric
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.GetConsumerQuotaMetric(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) GetConsumerQuotaLimit(ctx context.Context, req *serviceusagepb.GetConsumerQuotaLimitRequest, opts ...gax.CallOption) (*serviceusagepb.ConsumerQuotaLimit, error) {
	if _, ok := ctx.Deadline(); !ok && !c.disableDeadlines {
		cctx, cancel := context.WithTimeout(ctx, 5000*time.Millisecond)
		defer cancel()
		ctx = cctx
	}
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).GetConsumerQuotaLimit[0:len((*c.CallOptions).GetConsumerQuotaLimit):len((*c.CallOptions).GetConsumerQuotaLimit)], opts...)
	var resp *serviceusagepb.ConsumerQuotaLimit
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.GetConsumerQuotaLimit(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) CreateAdminOverride(ctx context.Context, req *serviceusagepb.CreateAdminOverrideRequest, opts ...gax.CallOption) (*CreateAdminOverrideOperation, error) {
	if _, ok := ctx.Deadline(); !ok && !c.disableDeadlines {
		cctx, cancel := context.WithTimeout(ctx, 5000*time.Millisecond)
		defer cancel()
		ctx = cctx
	}
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).CreateAdminOverride[0:len((*c.CallOptions).CreateAdminOverride):len((*c.CallOptions).CreateAdminOverride)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.CreateAdminOverride(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &CreateAdminOverrideOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *gRPCClient) UpdateAdminOverride(ctx context.Context, req *serviceusagepb.UpdateAdminOverrideRequest, opts ...gax.CallOption) (*UpdateAdminOverrideOperation, error) {
	if _, ok := ctx.Deadline(); !ok && !c.disableDeadlines {
		cctx, cancel := context.WithTimeout(ctx, 5000*time.Millisecond)
		defer cancel()
		ctx = cctx
	}
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).UpdateAdminOverride[0:len((*c.CallOptions).UpdateAdminOverride):len((*c.CallOptions).UpdateAdminOverride)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.UpdateAdminOverride(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &UpdateAdminOverrideOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *gRPCClient) DeleteAdminOverride(ctx context.Context, req *serviceusagepb.DeleteAdminOverrideRequest, opts ...gax.CallOption) (*DeleteAdminOverrideOperation, error) {
	if _, ok := ctx.Deadline(); !ok && !c.disableDeadlines {
		cctx, cancel := context.WithTimeout(ctx, 5000*time.Millisecond)
		defer cancel()
		ctx = cctx
	}
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).DeleteAdminOverride[0:len((*c.CallOptions).DeleteAdminOverride):len((*c.CallOptions).DeleteAdminOverride)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.DeleteAdminOverride(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &DeleteAdminOverrideOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *gRPCClient) ListAdminOverrides(ctx context.Context, req *serviceusagepb.ListAdminOverridesRequest, opts ...gax.CallOption) *QuotaOverrideIterator {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).ListAdminOverrides[0:len((*c.CallOptions).ListAdminOverrides):len((*c.CallOptions).ListAdminOverrides)], opts...)
	it := &QuotaOverrideIterator{}
	req = proto.Clone(req).(*serviceusagepb.ListAdminOverridesRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*serviceusagepb.QuotaOverride, string, error) {
		resp := &serviceusagepb.ListAdminOverridesResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.client.ListAdminOverrides(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetOverrides(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *gRPCClient) ImportAdminOverrides(ctx context.Context, req *serviceusagepb.ImportAdminOverridesRequest, opts ...gax.CallOption) (*ImportAdminOverridesOperation, error) {
	if _, ok := ctx.Deadline(); !ok && !c.disableDeadlines {
		cctx, cancel := context.WithTimeout(ctx, 5000*time.Millisecond)
		defer cancel()
		ctx = cctx
	}
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).ImportAdminOverrides[0:len((*c.CallOptions).ImportAdminOverrides):len((*c.CallOptions).ImportAdminOverrides)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.ImportAdminOverrides(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &ImportAdminOverridesOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *gRPCClient) CreateConsumerOverride(ctx context.Context, req *serviceusagepb.CreateConsumerOverrideRequest, opts ...gax.CallOption) (*CreateConsumerOverrideOperation, error) {
	if _, ok := ctx.Deadline(); !ok && !c.disableDeadlines {
		cctx, cancel := context.WithTimeout(ctx, 5000*time.Millisecond)
		defer cancel()
		ctx = cctx
	}
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).CreateConsumerOverride[0:len((*c.CallOptions).CreateConsumerOverride):len((*c.CallOptions).CreateConsumerOverride)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.CreateConsumerOverride(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &CreateConsumerOverrideOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *gRPCClient) UpdateConsumerOverride(ctx context.Context, req *serviceusagepb.UpdateConsumerOverrideRequest, opts ...gax.CallOption) (*UpdateConsumerOverrideOperation, error) {
	if _, ok := ctx.Deadline(); !ok && !c.disableDeadlines {
		cctx, cancel := context.WithTimeout(ctx, 5000*time.Millisecond)
		defer cancel()
		ctx = cctx
	}
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).UpdateConsumerOverride[0:len((*c.CallOptions).UpdateConsumerOverride):len((*c.CallOptions).UpdateConsumerOverride)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.UpdateConsumerOverride(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &UpdateConsumerOverrideOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *gRPCClient) DeleteConsumerOverride(ctx context.Context, req *serviceusagepb.DeleteConsumerOverrideRequest, opts ...gax.CallOption) (*DeleteConsumerOverrideOperation, error) {
	if _, ok := ctx.Deadline(); !ok && !c.disableDeadlines {
		cctx, cancel := context.WithTimeout(ctx, 5000*time.Millisecond)
		defer cancel()
		ctx = cctx
	}
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).DeleteConsumerOverride[0:len((*c.CallOptions).DeleteConsumerOverride):len((*c.CallOptions).DeleteConsumerOverride)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.DeleteConsumerOverride(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &DeleteConsumerOverrideOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *gRPCClient) ListConsumerOverrides(ctx context.Context, req *serviceusagepb.ListConsumerOverridesRequest, opts ...gax.CallOption) *QuotaOverrideIterator {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).ListConsumerOverrides[0:len((*c.CallOptions).ListConsumerOverrides):len((*c.CallOptions).ListConsumerOverrides)], opts...)
	it := &QuotaOverrideIterator{}
	req = proto.Clone(req).(*serviceusagepb.ListConsumerOverridesRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*serviceusagepb.QuotaOverride, string, error) {
		resp := &serviceusagepb.ListConsumerOverridesResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.client.ListConsumerOverrides(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetOverrides(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *gRPCClient) ImportConsumerOverrides(ctx context.Context, req *serviceusagepb.ImportConsumerOverridesRequest, opts ...gax.CallOption) (*ImportConsumerOverridesOperation, error) {
	if _, ok := ctx.Deadline(); !ok && !c.disableDeadlines {
		cctx, cancel := context.WithTimeout(ctx, 5000*time.Millisecond)
		defer cancel()
		ctx = cctx
	}
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).ImportConsumerOverrides[0:len((*c.CallOptions).ImportConsumerOverrides):len((*c.CallOptions).ImportConsumerOverrides)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.ImportConsumerOverrides(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &ImportConsumerOverridesOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *gRPCClient) GenerateServiceIdentity(ctx context.Context, req *serviceusagepb.GenerateServiceIdentityRequest, opts ...gax.CallOption) (*GenerateServiceIdentityOperation, error) {
	if _, ok := ctx.Deadline(); !ok && !c.disableDeadlines {
		cctx, cancel := context.WithTimeout(ctx, 5000*time.Millisecond)
		defer cancel()
		ctx = cctx
	}
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).GenerateServiceIdentity[0:len((*c.CallOptions).GenerateServiceIdentity):len((*c.CallOptions).GenerateServiceIdentity)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.GenerateServiceIdentity(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &GenerateServiceIdentityOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

// BatchEnableServicesOperation manages a long-running operation from BatchEnableServices.
type BatchEnableServicesOperation struct {
	lro *longrunning.Operation
}

// BatchEnableServicesOperation returns a new BatchEnableServicesOperation from a given name.
// The name must be that of a previously created BatchEnableServicesOperation, possibly from a different process.
func (c *gRPCClient) BatchEnableServicesOperation(name string) *BatchEnableServicesOperation {
	return &BatchEnableServicesOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// Wait blocks until the long-running operation is completed, returning the response and any errors encountered.
//
// See documentation of Poll for error-handling information.
func (op *BatchEnableServicesOperation) Wait(ctx context.Context, opts ...gax.CallOption) error {
	return op.lro.WaitWithInterval(ctx, nil, time.Minute, opts...)
}

// Poll fetches the latest state of the long-running operation.
//
// Poll also fetches the latest metadata, which can be retrieved by Metadata.
//
// If Poll fails, the error is returned and op is unmodified. If Poll succeeds and
// the operation has completed with failure, the error is returned and op.Done will return true.
// If Poll succeeds and the operation has completed successfully,
// op.Done will return true, and the response of the operation is returned.
// If Poll succeeds and the operation has not completed, the returned response and error are both nil.
func (op *BatchEnableServicesOperation) Poll(ctx context.Context, opts ...gax.CallOption) error {
	return op.lro.Poll(ctx, nil, opts...)
}

// Metadata returns metadata associated with the long-running operation.
// Metadata itself does not contact the server, but Poll does.
// To get the latest metadata, call this method after a successful call to Poll.
// If the metadata is not available, the returned metadata and error are both nil.
func (op *BatchEnableServicesOperation) Metadata() (*serviceusagepb.OperationMetadata, error) {
	var meta serviceusagepb.OperationMetadata
	if err := op.lro.Metadata(&meta); err == longrunning.ErrNoMetadata {
		return nil, nil
	} else if err != nil {
		return nil, err
	}
	return &meta, nil
}

// Done reports whether the long-running operation has completed.
func (op *BatchEnableServicesOperation) Done() bool {
	return op.lro.Done()
}

// Name returns the name of the long-running operation.
// The name is assigned by the server and is unique within the service from which the operation is created.
func (op *BatchEnableServicesOperation) Name() string {
	return op.lro.Name()
}

// CreateAdminOverrideOperation manages a long-running operation from CreateAdminOverride.
type CreateAdminOverrideOperation struct {
	lro *longrunning.Operation
}

// CreateAdminOverrideOperation returns a new CreateAdminOverrideOperation from a given name.
// The name must be that of a previously created CreateAdminOverrideOperation, possibly from a different process.
func (c *gRPCClient) CreateAdminOverrideOperation(name string) *CreateAdminOverrideOperation {
	return &CreateAdminOverrideOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// Wait blocks until the long-running operation is completed, returning the response and any errors encountered.
//
// See documentation of Poll for error-handling information.
func (op *CreateAdminOverrideOperation) Wait(ctx context.Context, opts ...gax.CallOption) (*serviceusagepb.QuotaOverride, error) {
	var resp serviceusagepb.QuotaOverride
	if err := op.lro.WaitWithInterval(ctx, &resp, time.Minute, opts...); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Poll fetches the latest state of the long-running operation.
//
// Poll also fetches the latest metadata, which can be retrieved by Metadata.
//
// If Poll fails, the error is returned and op is unmodified. If Poll succeeds and
// the operation has completed with failure, the error is returned and op.Done will return true.
// If Poll succeeds and the operation has completed successfully,
// op.Done will return true, and the response of the operation is returned.
// If Poll succeeds and the operation has not completed, the returned response and error are both nil.
func (op *CreateAdminOverrideOperation) Poll(ctx context.Context, opts ...gax.CallOption) (*serviceusagepb.QuotaOverride, error) {
	var resp serviceusagepb.QuotaOverride
	if err := op.lro.Poll(ctx, &resp, opts...); err != nil {
		return nil, err
	}
	if !op.Done() {
		return nil, nil
	}
	return &resp, nil
}

// Metadata returns metadata associated with the long-running operation.
// Metadata itself does not contact the server, but Poll does.
// To get the latest metadata, call this method after a successful call to Poll.
// If the metadata is not available, the returned metadata and error are both nil.
func (op *CreateAdminOverrideOperation) Metadata() (*serviceusagepb.OperationMetadata, error) {
	var meta serviceusagepb.OperationMetadata
	if err := op.lro.Metadata(&meta); err == longrunning.ErrNoMetadata {
		return nil, nil
	} else if err != nil {
		return nil, err
	}
	return &meta, nil
}

// Done reports whether the long-running operation has completed.
func (op *CreateAdminOverrideOperation) Done() bool {
	return op.lro.Done()
}

// Name returns the name of the long-running operation.
// The name is assigned by the server and is unique within the service from which the operation is created.
func (op *CreateAdminOverrideOperation) Name() string {
	return op.lro.Name()
}

// CreateConsumerOverrideOperation manages a long-running operation from CreateConsumerOverride.
type CreateConsumerOverrideOperation struct {
	lro *longrunning.Operation
}

// CreateConsumerOverrideOperation returns a new CreateConsumerOverrideOperation from a given name.
// The name must be that of a previously created CreateConsumerOverrideOperation, possibly from a different process.
func (c *gRPCClient) CreateConsumerOverrideOperation(name string) *CreateConsumerOverrideOperation {
	return &CreateConsumerOverrideOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// Wait blocks until the long-running operation is completed, returning the response and any errors encountered.
//
// See documentation of Poll for error-handling information.
func (op *CreateConsumerOverrideOperation) Wait(ctx context.Context, opts ...gax.CallOption) (*serviceusagepb.QuotaOverride, error) {
	var resp serviceusagepb.QuotaOverride
	if err := op.lro.WaitWithInterval(ctx, &resp, time.Minute, opts...); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Poll fetches the latest state of the long-running operation.
//
// Poll also fetches the latest metadata, which can be retrieved by Metadata.
//
// If Poll fails, the error is returned and op is unmodified. If Poll succeeds and
// the operation has completed with failure, the error is returned and op.Done will return true.
// If Poll succeeds and the operation has completed successfully,
// op.Done will return true, and the response of the operation is returned.
// If Poll succeeds and the operation has not completed, the returned response and error are both nil.
func (op *CreateConsumerOverrideOperation) Poll(ctx context.Context, opts ...gax.CallOption) (*serviceusagepb.QuotaOverride, error) {
	var resp serviceusagepb.QuotaOverride
	if err := op.lro.Poll(ctx, &resp, opts...); err != nil {
		return nil, err
	}
	if !op.Done() {
		return nil, nil
	}
	return &resp, nil
}

// Metadata returns metadata associated with the long-running operation.
// Metadata itself does not contact the server, but Poll does.
// To get the latest metadata, call this method after a successful call to Poll.
// If the metadata is not available, the returned metadata and error are both nil.
func (op *CreateConsumerOverrideOperation) Metadata() (*serviceusagepb.OperationMetadata, error) {
	var meta serviceusagepb.OperationMetadata
	if err := op.lro.Metadata(&meta); err == longrunning.ErrNoMetadata {
		return nil, nil
	} else if err != nil {
		return nil, err
	}
	return &meta, nil
}

// Done reports whether the long-running operation has completed.
func (op *CreateConsumerOverrideOperation) Done() bool {
	return op.lro.Done()
}

// Name returns the name of the long-running operation.
// The name is assigned by the server and is unique within the service from which the operation is created.
func (op *CreateConsumerOverrideOperation) Name() string {
	return op.lro.Name()
}

// DeleteAdminOverrideOperation manages a long-running operation from DeleteAdminOverride.
type DeleteAdminOverrideOperation struct {
	lro *longrunning.Operation
}

// DeleteAdminOverrideOperation returns a new DeleteAdminOverrideOperation from a given name.
// The name must be that of a previously created DeleteAdminOverrideOperation, possibly from a different process.
func (c *gRPCClient) DeleteAdminOverrideOperation(name string) *DeleteAdminOverrideOperation {
	return &DeleteAdminOverrideOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// Wait blocks until the long-running operation is completed, returning the response and any errors encountered.
//
// See documentation of Poll for error-handling information.
func (op *DeleteAdminOverrideOperation) Wait(ctx context.Context, opts ...gax.CallOption) error {
	return op.lro.WaitWithInterval(ctx, nil, time.Minute, opts...)
}

// Poll fetches the latest state of the long-running operation.
//
// Poll also fetches the latest metadata, which can be retrieved by Metadata.
//
// If Poll fails, the error is returned and op is unmodified. If Poll succeeds and
// the operation has completed with failure, the error is returned and op.Done will return true.
// If Poll succeeds and the operation has completed successfully,
// op.Done will return true, and the response of the operation is returned.
// If Poll succeeds and the operation has not completed, the returned response and error are both nil.
func (op *DeleteAdminOverrideOperation) Poll(ctx context.Context, opts ...gax.CallOption) error {
	return op.lro.Poll(ctx, nil, opts...)
}

// Metadata returns metadata associated with the long-running operation.
// Metadata itself does not contact the server, but Poll does.
// To get the latest metadata, call this method after a successful call to Poll.
// If the metadata is not available, the returned metadata and error are both nil.
func (op *DeleteAdminOverrideOperation) Metadata() (*serviceusagepb.OperationMetadata, error) {
	var meta serviceusagepb.OperationMetadata
	if err := op.lro.Metadata(&meta); err == longrunning.ErrNoMetadata {
		return nil, nil
	} else if err != nil {
		return nil, err
	}
	return &meta, nil
}

// Done reports whether the long-running operation has completed.
func (op *DeleteAdminOverrideOperation) Done() bool {
	return op.lro.Done()
}

// Name returns the name of the long-running operation.
// The name is assigned by the server and is unique within the service from which the operation is created.
func (op *DeleteAdminOverrideOperation) Name() string {
	return op.lro.Name()
}

// DeleteConsumerOverrideOperation manages a long-running operation from DeleteConsumerOverride.
type DeleteConsumerOverrideOperation struct {
	lro *longrunning.Operation
}

// DeleteConsumerOverrideOperation returns a new DeleteConsumerOverrideOperation from a given name.
// The name must be that of a previously created DeleteConsumerOverrideOperation, possibly from a different process.
func (c *gRPCClient) DeleteConsumerOverrideOperation(name string) *DeleteConsumerOverrideOperation {
	return &DeleteConsumerOverrideOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// Wait blocks until the long-running operation is completed, returning the response and any errors encountered.
//
// See documentation of Poll for error-handling information.
func (op *DeleteConsumerOverrideOperation) Wait(ctx context.Context, opts ...gax.CallOption) error {
	return op.lro.WaitWithInterval(ctx, nil, time.Minute, opts...)
}

// Poll fetches the latest state of the long-running operation.
//
// Poll also fetches the latest metadata, which can be retrieved by Metadata.
//
// If Poll fails, the error is returned and op is unmodified. If Poll succeeds and
// the operation has completed with failure, the error is returned and op.Done will return true.
// If Poll succeeds and the operation has completed successfully,
// op.Done will return true, and the response of the operation is returned.
// If Poll succeeds and the operation has not completed, the returned response and error are both nil.
func (op *DeleteConsumerOverrideOperation) Poll(ctx context.Context, opts ...gax.CallOption) error {
	return op.lro.Poll(ctx, nil, opts...)
}

// Metadata returns metadata associated with the long-running operation.
// Metadata itself does not contact the server, but Poll does.
// To get the latest metadata, call this method after a successful call to Poll.
// If the metadata is not available, the returned metadata and error are both nil.
func (op *DeleteConsumerOverrideOperation) Metadata() (*serviceusagepb.OperationMetadata, error) {
	var meta serviceusagepb.OperationMetadata
	if err := op.lro.Metadata(&meta); err == longrunning.ErrNoMetadata {
		return nil, nil
	} else if err != nil {
		return nil, err
	}
	return &meta, nil
}

// Done reports whether the long-running operation has completed.
func (op *DeleteConsumerOverrideOperation) Done() bool {
	return op.lro.Done()
}

// Name returns the name of the long-running operation.
// The name is assigned by the server and is unique within the service from which the operation is created.
func (op *DeleteConsumerOverrideOperation) Name() string {
	return op.lro.Name()
}

// DisableServiceOperation manages a long-running operation from DisableService.
type DisableServiceOperation struct {
	lro *longrunning.Operation
}

// DisableServiceOperation returns a new DisableServiceOperation from a given name.
// The name must be that of a previously created DisableServiceOperation, possibly from a different process.
func (c *gRPCClient) DisableServiceOperation(name string) *DisableServiceOperation {
	return &DisableServiceOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// Wait blocks until the long-running operation is completed, returning the response and any errors encountered.
//
// See documentation of Poll for error-handling information.
func (op *DisableServiceOperation) Wait(ctx context.Context, opts ...gax.CallOption) error {
	return op.lro.WaitWithInterval(ctx, nil, time.Minute, opts...)
}

// Poll fetches the latest state of the long-running operation.
//
// Poll also fetches the latest metadata, which can be retrieved by Metadata.
//
// If Poll fails, the error is returned and op is unmodified. If Poll succeeds and
// the operation has completed with failure, the error is returned and op.Done will return true.
// If Poll succeeds and the operation has completed successfully,
// op.Done will return true, and the response of the operation is returned.
// If Poll succeeds and the operation has not completed, the returned response and error are both nil.
func (op *DisableServiceOperation) Poll(ctx context.Context, opts ...gax.CallOption) error {
	return op.lro.Poll(ctx, nil, opts...)
}

// Metadata returns metadata associated with the long-running operation.
// Metadata itself does not contact the server, but Poll does.
// To get the latest metadata, call this method after a successful call to Poll.
// If the metadata is not available, the returned metadata and error are both nil.
func (op *DisableServiceOperation) Metadata() (*serviceusagepb.OperationMetadata, error) {
	var meta serviceusagepb.OperationMetadata
	if err := op.lro.Metadata(&meta); err == longrunning.ErrNoMetadata {
		return nil, nil
	} else if err != nil {
		return nil, err
	}
	return &meta, nil
}

// Done reports whether the long-running operation has completed.
func (op *DisableServiceOperation) Done() bool {
	return op.lro.Done()
}

// Name returns the name of the long-running operation.
// The name is assigned by the server and is unique within the service from which the operation is created.
func (op *DisableServiceOperation) Name() string {
	return op.lro.Name()
}

// EnableServiceOperation manages a long-running operation from EnableService.
type EnableServiceOperation struct {
	lro *longrunning.Operation
}

// EnableServiceOperation returns a new EnableServiceOperation from a given name.
// The name must be that of a previously created EnableServiceOperation, possibly from a different process.
func (c *gRPCClient) EnableServiceOperation(name string) *EnableServiceOperation {
	return &EnableServiceOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// Wait blocks until the long-running operation is completed, returning the response and any errors encountered.
//
// See documentation of Poll for error-handling information.
func (op *EnableServiceOperation) Wait(ctx context.Context, opts ...gax.CallOption) error {
	return op.lro.WaitWithInterval(ctx, nil, time.Minute, opts...)
}

// Poll fetches the latest state of the long-running operation.
//
// Poll also fetches the latest metadata, which can be retrieved by Metadata.
//
// If Poll fails, the error is returned and op is unmodified. If Poll succeeds and
// the operation has completed with failure, the error is returned and op.Done will return true.
// If Poll succeeds and the operation has completed successfully,
// op.Done will return true, and the response of the operation is returned.
// If Poll succeeds and the operation has not completed, the returned response and error are both nil.
func (op *EnableServiceOperation) Poll(ctx context.Context, opts ...gax.CallOption) error {
	return op.lro.Poll(ctx, nil, opts...)
}

// Metadata returns metadata associated with the long-running operation.
// Metadata itself does not contact the server, but Poll does.
// To get the latest metadata, call this method after a successful call to Poll.
// If the metadata is not available, the returned metadata and error are both nil.
func (op *EnableServiceOperation) Metadata() (*serviceusagepb.OperationMetadata, error) {
	var meta serviceusagepb.OperationMetadata
	if err := op.lro.Metadata(&meta); err == longrunning.ErrNoMetadata {
		return nil, nil
	} else if err != nil {
		return nil, err
	}
	return &meta, nil
}

// Done reports whether the long-running operation has completed.
func (op *EnableServiceOperation) Done() bool {
	return op.lro.Done()
}

// Name returns the name of the long-running operation.
// The name is assigned by the server and is unique within the service from which the operation is created.
func (op *EnableServiceOperation) Name() string {
	return op.lro.Name()
}

// GenerateServiceIdentityOperation manages a long-running operation from GenerateServiceIdentity.
type GenerateServiceIdentityOperation struct {
	lro *longrunning.Operation
}

// GenerateServiceIdentityOperation returns a new GenerateServiceIdentityOperation from a given name.
// The name must be that of a previously created GenerateServiceIdentityOperation, possibly from a different process.
func (c *gRPCClient) GenerateServiceIdentityOperation(name string) *GenerateServiceIdentityOperation {
	return &GenerateServiceIdentityOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// Wait blocks until the long-running operation is completed, returning the response and any errors encountered.
//
// See documentation of Poll for error-handling information.
func (op *GenerateServiceIdentityOperation) Wait(ctx context.Context, opts ...gax.CallOption) (*serviceusagepb.ServiceIdentity, error) {
	var resp serviceusagepb.ServiceIdentity
	if err := op.lro.WaitWithInterval(ctx, &resp, time.Minute, opts...); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Poll fetches the latest state of the long-running operation.
//
// Poll also fetches the latest metadata, which can be retrieved by Metadata.
//
// If Poll fails, the error is returned and op is unmodified. If Poll succeeds and
// the operation has completed with failure, the error is returned and op.Done will return true.
// If Poll succeeds and the operation has completed successfully,
// op.Done will return true, and the response of the operation is returned.
// If Poll succeeds and the operation has not completed, the returned response and error are both nil.
func (op *GenerateServiceIdentityOperation) Poll(ctx context.Context, opts ...gax.CallOption) (*serviceusagepb.ServiceIdentity, error) {
	var resp serviceusagepb.ServiceIdentity
	if err := op.lro.Poll(ctx, &resp, opts...); err != nil {
		return nil, err
	}
	if !op.Done() {
		return nil, nil
	}
	return &resp, nil
}

// Metadata returns metadata associated with the long-running operation.
// Metadata itself does not contact the server, but Poll does.
// To get the latest metadata, call this method after a successful call to Poll.
// If the metadata is not available, the returned metadata and error are both nil.
func (op *GenerateServiceIdentityOperation) Metadata() (*emptypb.Empty, error) {
	var meta emptypb.Empty
	if err := op.lro.Metadata(&meta); err == longrunning.ErrNoMetadata {
		return nil, nil
	} else if err != nil {
		return nil, err
	}
	return &meta, nil
}

// Done reports whether the long-running operation has completed.
func (op *GenerateServiceIdentityOperation) Done() bool {
	return op.lro.Done()
}

// Name returns the name of the long-running operation.
// The name is assigned by the server and is unique within the service from which the operation is created.
func (op *GenerateServiceIdentityOperation) Name() string {
	return op.lro.Name()
}

// ImportAdminOverridesOperation manages a long-running operation from ImportAdminOverrides.
type ImportAdminOverridesOperation struct {
	lro *longrunning.Operation
}

// ImportAdminOverridesOperation returns a new ImportAdminOverridesOperation from a given name.
// The name must be that of a previously created ImportAdminOverridesOperation, possibly from a different process.
func (c *gRPCClient) ImportAdminOverridesOperation(name string) *ImportAdminOverridesOperation {
	return &ImportAdminOverridesOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// Wait blocks until the long-running operation is completed, returning the response and any errors encountered.
//
// See documentation of Poll for error-handling information.
func (op *ImportAdminOverridesOperation) Wait(ctx context.Context, opts ...gax.CallOption) (*serviceusagepb.ImportAdminOverridesResponse, error) {
	var resp serviceusagepb.ImportAdminOverridesResponse
	if err := op.lro.WaitWithInterval(ctx, &resp, time.Minute, opts...); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Poll fetches the latest state of the long-running operation.
//
// Poll also fetches the latest metadata, which can be retrieved by Metadata.
//
// If Poll fails, the error is returned and op is unmodified. If Poll succeeds and
// the operation has completed with failure, the error is returned and op.Done will return true.
// If Poll succeeds and the operation has completed successfully,
// op.Done will return true, and the response of the operation is returned.
// If Poll succeeds and the operation has not completed, the returned response and error are both nil.
func (op *ImportAdminOverridesOperation) Poll(ctx context.Context, opts ...gax.CallOption) (*serviceusagepb.ImportAdminOverridesResponse, error) {
	var resp serviceusagepb.ImportAdminOverridesResponse
	if err := op.lro.Poll(ctx, &resp, opts...); err != nil {
		return nil, err
	}
	if !op.Done() {
		return nil, nil
	}
	return &resp, nil
}

// Metadata returns metadata associated with the long-running operation.
// Metadata itself does not contact the server, but Poll does.
// To get the latest metadata, call this method after a successful call to Poll.
// If the metadata is not available, the returned metadata and error are both nil.
func (op *ImportAdminOverridesOperation) Metadata() (*serviceusagepb.ImportAdminOverridesMetadata, error) {
	var meta serviceusagepb.ImportAdminOverridesMetadata
	if err := op.lro.Metadata(&meta); err == longrunning.ErrNoMetadata {
		return nil, nil
	} else if err != nil {
		return nil, err
	}
	return &meta, nil
}

// Done reports whether the long-running operation has completed.
func (op *ImportAdminOverridesOperation) Done() bool {
	return op.lro.Done()
}

// Name returns the name of the long-running operation.
// The name is assigned by the server and is unique within the service from which the operation is created.
func (op *ImportAdminOverridesOperation) Name() string {
	return op.lro.Name()
}

// ImportConsumerOverridesOperation manages a long-running operation from ImportConsumerOverrides.
type ImportConsumerOverridesOperation struct {
	lro *longrunning.Operation
}

// ImportConsumerOverridesOperation returns a new ImportConsumerOverridesOperation from a given name.
// The name must be that of a previously created ImportConsumerOverridesOperation, possibly from a different process.
func (c *gRPCClient) ImportConsumerOverridesOperation(name string) *ImportConsumerOverridesOperation {
	return &ImportConsumerOverridesOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// Wait blocks until the long-running operation is completed, returning the response and any errors encountered.
//
// See documentation of Poll for error-handling information.
func (op *ImportConsumerOverridesOperation) Wait(ctx context.Context, opts ...gax.CallOption) (*serviceusagepb.ImportConsumerOverridesResponse, error) {
	var resp serviceusagepb.ImportConsumerOverridesResponse
	if err := op.lro.WaitWithInterval(ctx, &resp, time.Minute, opts...); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Poll fetches the latest state of the long-running operation.
//
// Poll also fetches the latest metadata, which can be retrieved by Metadata.
//
// If Poll fails, the error is returned and op is unmodified. If Poll succeeds and
// the operation has completed with failure, the error is returned and op.Done will return true.
// If Poll succeeds and the operation has completed successfully,
// op.Done will return true, and the response of the operation is returned.
// If Poll succeeds and the operation has not completed, the returned response and error are both nil.
func (op *ImportConsumerOverridesOperation) Poll(ctx context.Context, opts ...gax.CallOption) (*serviceusagepb.ImportConsumerOverridesResponse, error) {
	var resp serviceusagepb.ImportConsumerOverridesResponse
	if err := op.lro.Poll(ctx, &resp, opts...); err != nil {
		return nil, err
	}
	if !op.Done() {
		return nil, nil
	}
	return &resp, nil
}

// Metadata returns metadata associated with the long-running operation.
// Metadata itself does not contact the server, but Poll does.
// To get the latest metadata, call this method after a successful call to Poll.
// If the metadata is not available, the returned metadata and error are both nil.
func (op *ImportConsumerOverridesOperation) Metadata() (*serviceusagepb.ImportConsumerOverridesMetadata, error) {
	var meta serviceusagepb.ImportConsumerOverridesMetadata
	if err := op.lro.Metadata(&meta); err == longrunning.ErrNoMetadata {
		return nil, nil
	} else if err != nil {
		return nil, err
	}
	return &meta, nil
}

// Done reports whether the long-running operation has completed.
func (op *ImportConsumerOverridesOperation) Done() bool {
	return op.lro.Done()
}

// Name returns the name of the long-running operation.
// The name is assigned by the server and is unique within the service from which the operation is created.
func (op *ImportConsumerOverridesOperation) Name() string {
	return op.lro.Name()
}

// UpdateAdminOverrideOperation manages a long-running operation from UpdateAdminOverride.
type UpdateAdminOverrideOperation struct {
	lro *longrunning.Operation
}

// UpdateAdminOverrideOperation returns a new UpdateAdminOverrideOperation from a given name.
// The name must be that of a previously created UpdateAdminOverrideOperation, possibly from a different process.
func (c *gRPCClient) UpdateAdminOverrideOperation(name string) *UpdateAdminOverrideOperation {
	return &UpdateAdminOverrideOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// Wait blocks until the long-running operation is completed, returning the response and any errors encountered.
//
// See documentation of Poll for error-handling information.
func (op *UpdateAdminOverrideOperation) Wait(ctx context.Context, opts ...gax.CallOption) (*serviceusagepb.QuotaOverride, error) {
	var resp serviceusagepb.QuotaOverride
	if err := op.lro.WaitWithInterval(ctx, &resp, time.Minute, opts...); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Poll fetches the latest state of the long-running operation.
//
// Poll also fetches the latest metadata, which can be retrieved by Metadata.
//
// If Poll fails, the error is returned and op is unmodified. If Poll succeeds and
// the operation has completed with failure, the error is returned and op.Done will return true.
// If Poll succeeds and the operation has completed successfully,
// op.Done will return true, and the response of the operation is returned.
// If Poll succeeds and the operation has not completed, the returned response and error are both nil.
func (op *UpdateAdminOverrideOperation) Poll(ctx context.Context, opts ...gax.CallOption) (*serviceusagepb.QuotaOverride, error) {
	var resp serviceusagepb.QuotaOverride
	if err := op.lro.Poll(ctx, &resp, opts...); err != nil {
		return nil, err
	}
	if !op.Done() {
		return nil, nil
	}
	return &resp, nil
}

// Metadata returns metadata associated with the long-running operation.
// Metadata itself does not contact the server, but Poll does.
// To get the latest metadata, call this method after a successful call to Poll.
// If the metadata is not available, the returned metadata and error are both nil.
func (op *UpdateAdminOverrideOperation) Metadata() (*serviceusagepb.OperationMetadata, error) {
	var meta serviceusagepb.OperationMetadata
	if err := op.lro.Metadata(&meta); err == longrunning.ErrNoMetadata {
		return nil, nil
	} else if err != nil {
		return nil, err
	}
	return &meta, nil
}

// Done reports whether the long-running operation has completed.
func (op *UpdateAdminOverrideOperation) Done() bool {
	return op.lro.Done()
}

// Name returns the name of the long-running operation.
// The name is assigned by the server and is unique within the service from which the operation is created.
func (op *UpdateAdminOverrideOperation) Name() string {
	return op.lro.Name()
}

// UpdateConsumerOverrideOperation manages a long-running operation from UpdateConsumerOverride.
type UpdateConsumerOverrideOperation struct {
	lro *longrunning.Operation
}

// UpdateConsumerOverrideOperation returns a new UpdateConsumerOverrideOperation from a given name.
// The name must be that of a previously created UpdateConsumerOverrideOperation, possibly from a different process.
func (c *gRPCClient) UpdateConsumerOverrideOperation(name string) *UpdateConsumerOverrideOperation {
	return &UpdateConsumerOverrideOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// Wait blocks until the long-running operation is completed, returning the response and any errors encountered.
//
// See documentation of Poll for error-handling information.
func (op *UpdateConsumerOverrideOperation) Wait(ctx context.Context, opts ...gax.CallOption) (*serviceusagepb.QuotaOverride, error) {
	var resp serviceusagepb.QuotaOverride
	if err := op.lro.WaitWithInterval(ctx, &resp, time.Minute, opts...); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Poll fetches the latest state of the long-running operation.
//
// Poll also fetches the latest metadata, which can be retrieved by Metadata.
//
// If Poll fails, the error is returned and op is unmodified. If Poll succeeds and
// the operation has completed with failure, the error is returned and op.Done will return true.
// If Poll succeeds and the operation has completed successfully,
// op.Done will return true, and the response of the operation is returned.
// If Poll succeeds and the operation has not completed, the returned response and error are both nil.
func (op *UpdateConsumerOverrideOperation) Poll(ctx context.Context, opts ...gax.CallOption) (*serviceusagepb.QuotaOverride, error) {
	var resp serviceusagepb.QuotaOverride
	if err := op.lro.Poll(ctx, &resp, opts...); err != nil {
		return nil, err
	}
	if !op.Done() {
		return nil, nil
	}
	return &resp, nil
}

// Metadata returns metadata associated with the long-running operation.
// Metadata itself does not contact the server, but Poll does.
// To get the latest metadata, call this method after a successful call to Poll.
// If the metadata is not available, the returned metadata and error are both nil.
func (op *UpdateConsumerOverrideOperation) Metadata() (*serviceusagepb.OperationMetadata, error) {
	var meta serviceusagepb.OperationMetadata
	if err := op.lro.Metadata(&meta); err == longrunning.ErrNoMetadata {
		return nil, nil
	} else if err != nil {
		return nil, err
	}
	return &meta, nil
}

// Done reports whether the long-running operation has completed.
func (op *UpdateConsumerOverrideOperation) Done() bool {
	return op.lro.Done()
}

// Name returns the name of the long-running operation.
// The name is assigned by the server and is unique within the service from which the operation is created.
func (op *UpdateConsumerOverrideOperation) Name() string {
	return op.lro.Name()
}

// ConsumerQuotaMetricIterator manages a stream of *serviceusagepb.ConsumerQuotaMetric.
type ConsumerQuotaMetricIterator struct {
	items    []*serviceusagepb.ConsumerQuotaMetric
	pageInfo *iterator.PageInfo
	nextFunc func() error

	// Response is the raw response for the current page.
	// It must be cast to the RPC response type.
	// Calling Next() or InternalFetch() updates this value.
	Response interface{}

	// InternalFetch is for use by the Google Cloud Libraries only.
	// It is not part of the stable interface of this package.
	//
	// InternalFetch returns results from a single call to the underlying RPC.
	// The number of results is no greater than pageSize.
	// If there are no more results, nextPageToken is empty and err is nil.
	InternalFetch func(pageSize int, pageToken string) (results []*serviceusagepb.ConsumerQuotaMetric, nextPageToken string, err error)
}

// PageInfo supports pagination. See the google.golang.org/api/iterator package for details.
func (it *ConsumerQuotaMetricIterator) PageInfo() *iterator.PageInfo {
	return it.pageInfo
}

// Next returns the next result. Its second return value is iterator.Done if there are no more
// results. Once Next returns Done, all subsequent calls will return Done.
func (it *ConsumerQuotaMetricIterator) Next() (*serviceusagepb.ConsumerQuotaMetric, error) {
	var item *serviceusagepb.ConsumerQuotaMetric
	if err := it.nextFunc(); err != nil {
		return item, err
	}
	item = it.items[0]
	it.items = it.items[1:]
	return item, nil
}

func (it *ConsumerQuotaMetricIterator) bufLen() int {
	return len(it.items)
}

func (it *ConsumerQuotaMetricIterator) takeBuf() interface{} {
	b := it.items
	it.items = nil
	return b
}

// QuotaOverrideIterator manages a stream of *serviceusagepb.QuotaOverride.
type QuotaOverrideIterator struct {
	items    []*serviceusagepb.QuotaOverride
	pageInfo *iterator.PageInfo
	nextFunc func() error

	// Response is the raw response for the current page.
	// It must be cast to the RPC response type.
	// Calling Next() or InternalFetch() updates this value.
	Response interface{}

	// InternalFetch is for use by the Google Cloud Libraries only.
	// It is not part of the stable interface of this package.
	//
	// InternalFetch returns results from a single call to the underlying RPC.
	// The number of results is no greater than pageSize.
	// If there are no more results, nextPageToken is empty and err is nil.
	InternalFetch func(pageSize int, pageToken string) (results []*serviceusagepb.QuotaOverride, nextPageToken string, err error)
}

// PageInfo supports pagination. See the google.golang.org/api/iterator package for details.
func (it *QuotaOverrideIterator) PageInfo() *iterator.PageInfo {
	return it.pageInfo
}

// Next returns the next result. Its second return value is iterator.Done if there are no more
// results. Once Next returns Done, all subsequent calls will return Done.
func (it *QuotaOverrideIterator) Next() (*serviceusagepb.QuotaOverride, error) {
	var item *serviceusagepb.QuotaOverride
	if err := it.nextFunc(); err != nil {
		return item, err
	}
	item = it.items[0]
	it.items = it.items[1:]
	return item, nil
}

func (it *QuotaOverrideIterator) bufLen() int {
	return len(it.items)
}

func (it *QuotaOverrideIterator) takeBuf() interface{} {
	b := it.items
	it.items = nil
	return b
}

// ServiceIterator manages a stream of *serviceusagepb.Service.
type ServiceIterator struct {
	items    []*serviceusagepb.Service
	pageInfo *iterator.PageInfo
	nextFunc func() error

	// Response is the raw response for the current page.
	// It must be cast to the RPC response type.
	// Calling Next() or InternalFetch() updates this value.
	Response interface{}

	// InternalFetch is for use by the Google Cloud Libraries only.
	// It is not part of the stable interface of this package.
	//
	// InternalFetch returns results from a single call to the underlying RPC.
	// The number of results is no greater than pageSize.
	// If there are no more results, nextPageToken is empty and err is nil.
	InternalFetch func(pageSize int, pageToken string) (results []*serviceusagepb.Service, nextPageToken string, err error)
}

// PageInfo supports pagination. See the google.golang.org/api/iterator package for details.
func (it *ServiceIterator) PageInfo() *iterator.PageInfo {
	return it.pageInfo
}

// Next returns the next result. Its second return value is iterator.Done if there are no more
// results. Once Next returns Done, all subsequent calls will return Done.
func (it *ServiceIterator) Next() (*serviceusagepb.Service, error) {
	var item *serviceusagepb.Service
	if err := it.nextFunc(); err != nil {
		return item, err
	}
	item = it.items[0]
	it.items = it.items[1:]
	return item, nil
}

func (it *ServiceIterator) bufLen() int {
	return len(it.items)
}

func (it *ServiceIterator) takeBuf() interface{} {
	b := it.items
	it.items = nil
	return b
}
