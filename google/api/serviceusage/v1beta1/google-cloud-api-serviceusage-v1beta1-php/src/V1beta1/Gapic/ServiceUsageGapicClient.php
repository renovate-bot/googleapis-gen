<?php
/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * Generated by gapic-generator-php from the file
 * https://github.com/googleapis/googleapis/blob/master/google/api/serviceusage/v1beta1/serviceusage.proto
 * Updates to the above are reflected here through a refresh process.
 *
 * @experimental
 */

namespace Google\Api\ServiceUsage\V1beta1\Gapic;

use Google\Api\ServiceUsage\V1beta1\BatchEnableServicesRequest;
use Google\Api\ServiceUsage\V1beta1\ConsumerQuotaLimit;

use Google\Api\ServiceUsage\V1beta1\ConsumerQuotaMetric;

use Google\Api\ServiceUsage\V1beta1\CreateAdminOverrideRequest;

use Google\Api\ServiceUsage\V1beta1\CreateConsumerOverrideRequest;
use Google\Api\ServiceUsage\V1beta1\DeleteAdminOverrideRequest;
use Google\Api\ServiceUsage\V1beta1\DeleteConsumerOverrideRequest;
use Google\Api\ServiceUsage\V1beta1\DisableServiceRequest;
use Google\Api\ServiceUsage\V1beta1\EnableServiceRequest;
use Google\Api\ServiceUsage\V1beta1\GenerateServiceIdentityRequest;
use Google\Api\ServiceUsage\V1beta1\GetConsumerQuotaLimitRequest;
use Google\Api\ServiceUsage\V1beta1\GetConsumerQuotaMetricRequest;
use Google\Api\ServiceUsage\V1beta1\GetServiceRequest;
use Google\Api\ServiceUsage\V1beta1\ImportAdminOverridesRequest;
use Google\Api\ServiceUsage\V1beta1\ImportConsumerOverridesRequest;
use Google\Api\ServiceUsage\V1beta1\ListAdminOverridesRequest;
use Google\Api\ServiceUsage\V1beta1\ListAdminOverridesResponse;
use Google\Api\ServiceUsage\V1beta1\ListConsumerOverridesRequest;
use Google\Api\ServiceUsage\V1beta1\ListConsumerOverridesResponse;
use Google\Api\ServiceUsage\V1beta1\ListConsumerQuotaMetricsRequest;
use Google\Api\ServiceUsage\V1beta1\ListConsumerQuotaMetricsResponse;
use Google\Api\ServiceUsage\V1beta1\ListServicesRequest;
use Google\Api\ServiceUsage\V1beta1\ListServicesResponse;
use Google\Api\ServiceUsage\V1beta1\OverrideInlineSource;
use Google\Api\ServiceUsage\V1beta1\QuotaOverride;
use Google\Api\ServiceUsage\V1beta1\QuotaSafetyCheck;
use Google\Api\ServiceUsage\V1beta1\Service;
use Google\Api\ServiceUsage\V1beta1\UpdateAdminOverrideRequest;
use Google\Api\ServiceUsage\V1beta1\UpdateConsumerOverrideRequest;
use Google\ApiCore\ApiException;
use Google\ApiCore\CredentialsWrapper;
use Google\ApiCore\GapicClientTrait;
use Google\ApiCore\LongRunning\OperationsClient;

use Google\ApiCore\OperationResponse;
use Google\ApiCore\RequestParamsHeaderDescriptor;
use Google\ApiCore\RetrySettings;
use Google\ApiCore\Transport\TransportInterface;
use Google\ApiCore\ValidationException;
use Google\Auth\FetchAuthTokenInterface;
use Google\LongRunning\Operation;
use Google\Protobuf\FieldMask;

/**
 * Service Description: [Service Usage API](https://cloud.google.com/service-usage/docs/overview)
 *
 * This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods. Sample code to get started:
 *
 * ```
 * $serviceUsageClient = new ServiceUsageClient();
 * try {
 *     $operationResponse = $serviceUsageClient->batchEnableServices();
 *     $operationResponse->pollUntilComplete();
 *     if ($operationResponse->operationSucceeded()) {
 *         // operation succeeded and returns no value
 *     } else {
 *         $error = $operationResponse->getError();
 *         // handleError($error)
 *     }
 *     // Alternatively:
 *     // start the operation, keep the operation name, and resume later
 *     $operationResponse = $serviceUsageClient->batchEnableServices();
 *     $operationName = $operationResponse->getName();
 *     // ... do other work
 *     $newOperationResponse = $serviceUsageClient->resumeOperation($operationName, 'batchEnableServices');
 *     while (!$newOperationResponse->isDone()) {
 *         // ... do other work
 *         $newOperationResponse->reload();
 *     }
 *     if ($newOperationResponse->operationSucceeded()) {
 *         // operation succeeded and returns no value
 *     } else {
 *         $error = $newOperationResponse->getError();
 *         // handleError($error)
 *     }
 * } finally {
 *     $serviceUsageClient->close();
 * }
 * ```
 *
 * @experimental
 */
class ServiceUsageGapicClient
{
    use GapicClientTrait;

    /**
     * The name of the service.
     */
    const SERVICE_NAME = 'google.api.serviceusage.v1beta1.ServiceUsage';

    /**
     * The default address of the service.
     */
    const SERVICE_ADDRESS = 'serviceusage.googleapis.com';

    /**
     * The default port of the service.
     */
    const DEFAULT_SERVICE_PORT = 443;

    /**
     * The name of the code generator, to be included in the agent header.
     */
    const CODEGEN_NAME = 'gapic';

    /**
     * The default scopes required by the service.
     */
    public static $serviceScopes = [
        'https://www.googleapis.com/auth/cloud-platform',
        'https://www.googleapis.com/auth/cloud-platform.read-only',
        'https://www.googleapis.com/auth/service.management',
    ];

    private $operationsClient;

    private static function getClientDefaults()
    {
        return [
            'serviceName' => self::SERVICE_NAME,
            'serviceAddress' => self::SERVICE_ADDRESS . ':' . self::DEFAULT_SERVICE_PORT,
            'clientConfig' => __DIR__ . '/../resources/service_usage_client_config.json',
            'descriptorsConfigPath' => __DIR__ . '/../resources/service_usage_descriptor_config.php',
            'gcpApiConfigPath' => __DIR__ . '/../resources/service_usage_grpc_config.json',
            'credentialsConfig' => [
                'defaultScopes' => self::$serviceScopes,
            ],
            'transportConfig' => [
                'rest' => [
                    'restClientConfigPath' => __DIR__ . '/../resources/service_usage_rest_client_config.php',
                ],
            ],
        ];
    }

    /**
     * Return an OperationsClient object with the same endpoint as $this.
     *
     * @return OperationsClient
     *
     * @experimental
     */
    public function getOperationsClient()
    {
        return $this->operationsClient;
    }

    /**
     * Resume an existing long running operation that was previously started by a long
     * running API method. If $methodName is not provided, or does not match a long
     * running API method, then the operation can still be resumed, but the
     * OperationResponse object will not deserialize the final response.
     *
     * @param string $operationName The name of the long running operation
     * @param string $methodName    The name of the method used to start the operation
     *
     * @return OperationResponse
     *
     * @experimental
     */
    public function resumeOperation($operationName, $methodName = null)
    {
        $options = isset($this->descriptors[$methodName]['longRunning']) ? $this->descriptors[$methodName]['longRunning'] : [];
        $operation = new OperationResponse($operationName, $this->getOperationsClient(), $options);
        $operation->reload();
        return $operation;
    }

    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *
     *     @type string $serviceAddress
     *           The address of the API remote host. May optionally include the port, formatted
     *           as "<uri>:<port>". Default 'serviceusage.googleapis.com:443'.
     *     @type string|array|FetchAuthTokenInterface|CredentialsWrapper $credentials
     *           The credentials to be used by the client to authorize API calls. This option
     *           accepts either a path to a credentials file, or a decoded credentials file as a
     *           PHP array.
     *           *Advanced usage*: In addition, this option can also accept a pre-constructed
     *           {@see \Google\Auth\FetchAuthTokenInterface} object or
     *           {@see \Google\ApiCore\CredentialsWrapper} object. Note that when one of these
     *           objects are provided, any settings in $credentialsConfig will be ignored.
     *     @type array $credentialsConfig
     *           Options used to configure credentials, including auth token caching, for the
     *           client. For a full list of supporting configuration options, see
     *           {@see \Google\ApiCore\CredentialsWrapper::build()} .
     *     @type bool $disableRetries
     *           Determines whether or not retries defined by the client configuration should be
     *           disabled. Defaults to `false`.
     *     @type string|array $clientConfig
     *           Client method configuration, including retry settings. This option can be either
     *           a path to a JSON file, or a PHP array containing the decoded JSON data. By
     *           default this settings points to the default client config file, which is
     *           provided in the resources folder.
     *     @type string|TransportInterface $transport
     *           The transport used for executing network requests. May be either the string
     *           `rest` or `grpc`. Defaults to `grpc` if gRPC support is detected on the system.
     *           *Advanced usage*: Additionally, it is possible to pass in an already
     *           instantiated {@see \Google\ApiCore\Transport\TransportInterface} object. Note
     *           that when this object is provided, any settings in $transportConfig, and any
     *           $serviceAddress setting, will be ignored.
     *     @type array $transportConfig
     *           Configuration options that will be used to construct the transport. Options for
     *           each supported transport type should be passed in a key for that transport. For
     *           example:
     *           $transportConfig = [
     *               'grpc' => [...],
     *               'rest' => [...],
     *           ];
     *           See the {@see \Google\ApiCore\Transport\GrpcTransport::build()} and
     *           {@see \Google\ApiCore\Transport\RestTransport::build()} methods for the
     *           supported options.
     *     @type callable $clientCertSource
     *           A callable which returns the client cert as a string. This can be used to
     *           provide a certificate and private key to the transport layer for mTLS.
     * }
     *
     * @throws ValidationException
     *
     * @experimental
     */
    public function __construct(array $options = [])
    {
        $clientOptions = $this->buildClientOptions($options);
        $this->setClientOptions($clientOptions);
        $this->operationsClient = $this->createOperationsClient($clientOptions);
    }

    /**
     * Enables multiple services on a project. The operation is atomic: if
     * enabling any service fails, then the entire batch fails, and no state
     * changes occur.
     *
     * Operation response type: `google.protobuf.Empty`
     *
     * Sample code:
     * ```
     * $serviceUsageClient = new ServiceUsageClient();
     * try {
     *     $operationResponse = $serviceUsageClient->batchEnableServices();
     *     $operationResponse->pollUntilComplete();
     *     if ($operationResponse->operationSucceeded()) {
     *         // operation succeeded and returns no value
     *     } else {
     *         $error = $operationResponse->getError();
     *         // handleError($error)
     *     }
     *     // Alternatively:
     *     // start the operation, keep the operation name, and resume later
     *     $operationResponse = $serviceUsageClient->batchEnableServices();
     *     $operationName = $operationResponse->getName();
     *     // ... do other work
     *     $newOperationResponse = $serviceUsageClient->resumeOperation($operationName, 'batchEnableServices');
     *     while (!$newOperationResponse->isDone()) {
     *         // ... do other work
     *         $newOperationResponse->reload();
     *     }
     *     if ($newOperationResponse->operationSucceeded()) {
     *         // operation succeeded and returns no value
     *     } else {
     *         $error = $newOperationResponse->getError();
     *         // handleError($error)
     *     }
     * } finally {
     *     $serviceUsageClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $parent
     *           Parent to enable services on.
     *
     *           An example name would be:
     *           `projects/123`
     *           where `123` is the project number (not project ID).
     *
     *           The `BatchEnableServices` method currently only supports projects.
     *     @type string[] $serviceIds
     *           The identifiers of the services to enable on the project.
     *
     *           A valid identifier would be:
     *           serviceusage.googleapis.com
     *
     *           Enabling services requires that each service is public or is shared with
     *           the user enabling the service.
     *
     *           Two or more services must be specified. To enable a single service,
     *           use the `EnableService` method instead.
     *
     *           A single request can enable a maximum of 20 services at a time. If more
     *           than 20 services are specified, the request will fail, and no state changes
     *           will occur.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\OperationResponse
     *
     * @throws ApiException if the remote call fails
     *
     * @experimental
     *
     * @deprecated This method will be removed in the next major version update.
     */
    public function batchEnableServices(array $optionalArgs = [])
    {
        $request = new BatchEnableServicesRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['parent'])) {
            $request->setParent($optionalArgs['parent']);
            $requestParamHeaders['parent'] = $optionalArgs['parent'];
        }

        if (isset($optionalArgs['serviceIds'])) {
            $request->setServiceIds($optionalArgs['serviceIds']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startOperationsCall('BatchEnableServices', $optionalArgs, $request, $this->getOperationsClient())->wait();
    }

    /**
     * Creates an admin override.
     * An admin override is applied by an administrator of a parent folder or
     * parent organization of the consumer receiving the override. An admin
     * override is intended to limit the amount of quota the consumer can use out
     * of the total quota pool allocated to all children of the folder or
     * organization.
     *
     * Sample code:
     * ```
     * $serviceUsageClient = new ServiceUsageClient();
     * try {
     *     $operationResponse = $serviceUsageClient->createAdminOverride();
     *     $operationResponse->pollUntilComplete();
     *     if ($operationResponse->operationSucceeded()) {
     *         $result = $operationResponse->getResult();
     *     // doSomethingWith($result)
     *     } else {
     *         $error = $operationResponse->getError();
     *         // handleError($error)
     *     }
     *     // Alternatively:
     *     // start the operation, keep the operation name, and resume later
     *     $operationResponse = $serviceUsageClient->createAdminOverride();
     *     $operationName = $operationResponse->getName();
     *     // ... do other work
     *     $newOperationResponse = $serviceUsageClient->resumeOperation($operationName, 'createAdminOverride');
     *     while (!$newOperationResponse->isDone()) {
     *         // ... do other work
     *         $newOperationResponse->reload();
     *     }
     *     if ($newOperationResponse->operationSucceeded()) {
     *         $result = $newOperationResponse->getResult();
     *     // doSomethingWith($result)
     *     } else {
     *         $error = $newOperationResponse->getError();
     *         // handleError($error)
     *     }
     * } finally {
     *     $serviceUsageClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $parent
     *           The resource name of the parent quota limit, returned by a
     *           ListConsumerQuotaMetrics or GetConsumerQuotaMetric call.
     *
     *           An example name would be:
     *           `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion`
     *     @type QuotaOverride $override
     *           The admin override to create.
     *     @type bool $force
     *           Whether to force the creation of the quota override.
     *           Setting the force parameter to 'true' ignores all quota safety checks that
     *           would fail the request. QuotaSafetyCheck lists all such validations.
     *     @type int[] $forceOnly
     *           The list of quota safety checks to ignore before the override mutation.
     *           Unlike 'force' field that ignores all the quota safety checks, the
     *           'force_only' field ignores only the specified checks; other checks are
     *           still enforced. The 'force' and 'force_only' fields cannot both be set.
     *           For allowed values, use constants defined on {@see \Google\Api\ServiceUsage\V1beta1\QuotaSafetyCheck}
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\OperationResponse
     *
     * @throws ApiException if the remote call fails
     *
     * @experimental
     */
    public function createAdminOverride(array $optionalArgs = [])
    {
        $request = new CreateAdminOverrideRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['parent'])) {
            $request->setParent($optionalArgs['parent']);
            $requestParamHeaders['parent'] = $optionalArgs['parent'];
        }

        if (isset($optionalArgs['override'])) {
            $request->setOverride($optionalArgs['override']);
        }

        if (isset($optionalArgs['force'])) {
            $request->setForce($optionalArgs['force']);
        }

        if (isset($optionalArgs['forceOnly'])) {
            $request->setForceOnly($optionalArgs['forceOnly']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startOperationsCall('CreateAdminOverride', $optionalArgs, $request, $this->getOperationsClient())->wait();
    }

    /**
     * Creates a consumer override.
     * A consumer override is applied to the consumer on its own authority to
     * limit its own quota usage. Consumer overrides cannot be used to grant more
     * quota than would be allowed by admin overrides, producer overrides, or the
     * default limit of the service.
     *
     * Sample code:
     * ```
     * $serviceUsageClient = new ServiceUsageClient();
     * try {
     *     $operationResponse = $serviceUsageClient->createConsumerOverride();
     *     $operationResponse->pollUntilComplete();
     *     if ($operationResponse->operationSucceeded()) {
     *         $result = $operationResponse->getResult();
     *     // doSomethingWith($result)
     *     } else {
     *         $error = $operationResponse->getError();
     *         // handleError($error)
     *     }
     *     // Alternatively:
     *     // start the operation, keep the operation name, and resume later
     *     $operationResponse = $serviceUsageClient->createConsumerOverride();
     *     $operationName = $operationResponse->getName();
     *     // ... do other work
     *     $newOperationResponse = $serviceUsageClient->resumeOperation($operationName, 'createConsumerOverride');
     *     while (!$newOperationResponse->isDone()) {
     *         // ... do other work
     *         $newOperationResponse->reload();
     *     }
     *     if ($newOperationResponse->operationSucceeded()) {
     *         $result = $newOperationResponse->getResult();
     *     // doSomethingWith($result)
     *     } else {
     *         $error = $newOperationResponse->getError();
     *         // handleError($error)
     *     }
     * } finally {
     *     $serviceUsageClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $parent
     *           The resource name of the parent quota limit, returned by a
     *           ListConsumerQuotaMetrics or GetConsumerQuotaMetric call.
     *
     *           An example name would be:
     *           `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion`
     *     @type QuotaOverride $override
     *           The override to create.
     *     @type bool $force
     *           Whether to force the creation of the quota override.
     *           Setting the force parameter to 'true' ignores all quota safety checks that
     *           would fail the request. QuotaSafetyCheck lists all such validations.
     *     @type int[] $forceOnly
     *           The list of quota safety checks to ignore before the override mutation.
     *           Unlike 'force' field that ignores all the quota safety checks, the
     *           'force_only' field ignores only the specified checks; other checks are
     *           still enforced. The 'force' and 'force_only' fields cannot both be set.
     *           For allowed values, use constants defined on {@see \Google\Api\ServiceUsage\V1beta1\QuotaSafetyCheck}
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\OperationResponse
     *
     * @throws ApiException if the remote call fails
     *
     * @experimental
     */
    public function createConsumerOverride(array $optionalArgs = [])
    {
        $request = new CreateConsumerOverrideRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['parent'])) {
            $request->setParent($optionalArgs['parent']);
            $requestParamHeaders['parent'] = $optionalArgs['parent'];
        }

        if (isset($optionalArgs['override'])) {
            $request->setOverride($optionalArgs['override']);
        }

        if (isset($optionalArgs['force'])) {
            $request->setForce($optionalArgs['force']);
        }

        if (isset($optionalArgs['forceOnly'])) {
            $request->setForceOnly($optionalArgs['forceOnly']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startOperationsCall('CreateConsumerOverride', $optionalArgs, $request, $this->getOperationsClient())->wait();
    }

    /**
     * Deletes an admin override.
     *
     * Sample code:
     * ```
     * $serviceUsageClient = new ServiceUsageClient();
     * try {
     *     $operationResponse = $serviceUsageClient->deleteAdminOverride();
     *     $operationResponse->pollUntilComplete();
     *     if ($operationResponse->operationSucceeded()) {
     *         // operation succeeded and returns no value
     *     } else {
     *         $error = $operationResponse->getError();
     *         // handleError($error)
     *     }
     *     // Alternatively:
     *     // start the operation, keep the operation name, and resume later
     *     $operationResponse = $serviceUsageClient->deleteAdminOverride();
     *     $operationName = $operationResponse->getName();
     *     // ... do other work
     *     $newOperationResponse = $serviceUsageClient->resumeOperation($operationName, 'deleteAdminOverride');
     *     while (!$newOperationResponse->isDone()) {
     *         // ... do other work
     *         $newOperationResponse->reload();
     *     }
     *     if ($newOperationResponse->operationSucceeded()) {
     *         // operation succeeded and returns no value
     *     } else {
     *         $error = $newOperationResponse->getError();
     *         // handleError($error)
     *     }
     * } finally {
     *     $serviceUsageClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $name
     *           The resource name of the override to delete.
     *
     *           An example name would be:
     *           `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/adminOverrides/4a3f2c1d`
     *     @type bool $force
     *           Whether to force the deletion of the quota override.
     *           Setting the force parameter to 'true' ignores all quota safety checks that
     *           would fail the request. QuotaSafetyCheck lists all such validations.
     *     @type int[] $forceOnly
     *           The list of quota safety checks to ignore before the override mutation.
     *           Unlike 'force' field that ignores all the quota safety checks, the
     *           'force_only' field ignores only the specified checks; other checks are
     *           still enforced. The 'force' and 'force_only' fields cannot both be set.
     *           For allowed values, use constants defined on {@see \Google\Api\ServiceUsage\V1beta1\QuotaSafetyCheck}
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\OperationResponse
     *
     * @throws ApiException if the remote call fails
     *
     * @experimental
     */
    public function deleteAdminOverride(array $optionalArgs = [])
    {
        $request = new DeleteAdminOverrideRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['name'])) {
            $request->setName($optionalArgs['name']);
            $requestParamHeaders['name'] = $optionalArgs['name'];
        }

        if (isset($optionalArgs['force'])) {
            $request->setForce($optionalArgs['force']);
        }

        if (isset($optionalArgs['forceOnly'])) {
            $request->setForceOnly($optionalArgs['forceOnly']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startOperationsCall('DeleteAdminOverride', $optionalArgs, $request, $this->getOperationsClient())->wait();
    }

    /**
     * Deletes a consumer override.
     *
     * Sample code:
     * ```
     * $serviceUsageClient = new ServiceUsageClient();
     * try {
     *     $operationResponse = $serviceUsageClient->deleteConsumerOverride();
     *     $operationResponse->pollUntilComplete();
     *     if ($operationResponse->operationSucceeded()) {
     *         // operation succeeded and returns no value
     *     } else {
     *         $error = $operationResponse->getError();
     *         // handleError($error)
     *     }
     *     // Alternatively:
     *     // start the operation, keep the operation name, and resume later
     *     $operationResponse = $serviceUsageClient->deleteConsumerOverride();
     *     $operationName = $operationResponse->getName();
     *     // ... do other work
     *     $newOperationResponse = $serviceUsageClient->resumeOperation($operationName, 'deleteConsumerOverride');
     *     while (!$newOperationResponse->isDone()) {
     *         // ... do other work
     *         $newOperationResponse->reload();
     *     }
     *     if ($newOperationResponse->operationSucceeded()) {
     *         // operation succeeded and returns no value
     *     } else {
     *         $error = $newOperationResponse->getError();
     *         // handleError($error)
     *     }
     * } finally {
     *     $serviceUsageClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $name
     *           The resource name of the override to delete.
     *
     *           An example name would be:
     *           `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/consumerOverrides/4a3f2c1d`
     *     @type bool $force
     *           Whether to force the deletion of the quota override.
     *           Setting the force parameter to 'true' ignores all quota safety checks that
     *           would fail the request. QuotaSafetyCheck lists all such validations.
     *     @type int[] $forceOnly
     *           The list of quota safety checks to ignore before the override mutation.
     *           Unlike 'force' field that ignores all the quota safety checks, the
     *           'force_only' field ignores only the specified checks; other checks are
     *           still enforced. The 'force' and 'force_only' fields cannot both be set.
     *           For allowed values, use constants defined on {@see \Google\Api\ServiceUsage\V1beta1\QuotaSafetyCheck}
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\OperationResponse
     *
     * @throws ApiException if the remote call fails
     *
     * @experimental
     */
    public function deleteConsumerOverride(array $optionalArgs = [])
    {
        $request = new DeleteConsumerOverrideRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['name'])) {
            $request->setName($optionalArgs['name']);
            $requestParamHeaders['name'] = $optionalArgs['name'];
        }

        if (isset($optionalArgs['force'])) {
            $request->setForce($optionalArgs['force']);
        }

        if (isset($optionalArgs['forceOnly'])) {
            $request->setForceOnly($optionalArgs['forceOnly']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startOperationsCall('DeleteConsumerOverride', $optionalArgs, $request, $this->getOperationsClient())->wait();
    }

    /**
     * Disables a service so that it can no longer be used with a project.
     * This prevents unintended usage that may cause unexpected billing
     * charges or security leaks.
     *
     * It is not valid to call the disable method on a service that is not
     * currently enabled. Callers will receive a `FAILED_PRECONDITION` status if
     * the target service is not currently enabled.
     *
     * Operation response type: `google.protobuf.Empty`
     *
     * Sample code:
     * ```
     * $serviceUsageClient = new ServiceUsageClient();
     * try {
     *     $operationResponse = $serviceUsageClient->disableService();
     *     $operationResponse->pollUntilComplete();
     *     if ($operationResponse->operationSucceeded()) {
     *         // operation succeeded and returns no value
     *     } else {
     *         $error = $operationResponse->getError();
     *         // handleError($error)
     *     }
     *     // Alternatively:
     *     // start the operation, keep the operation name, and resume later
     *     $operationResponse = $serviceUsageClient->disableService();
     *     $operationName = $operationResponse->getName();
     *     // ... do other work
     *     $newOperationResponse = $serviceUsageClient->resumeOperation($operationName, 'disableService');
     *     while (!$newOperationResponse->isDone()) {
     *         // ... do other work
     *         $newOperationResponse->reload();
     *     }
     *     if ($newOperationResponse->operationSucceeded()) {
     *         // operation succeeded and returns no value
     *     } else {
     *         $error = $newOperationResponse->getError();
     *         // handleError($error)
     *     }
     * } finally {
     *     $serviceUsageClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $name
     *           Name of the consumer and service to disable the service on.
     *
     *           The enable and disable methods currently only support projects.
     *
     *           An example name would be:
     *           `projects/123/services/serviceusage.googleapis.com`
     *           where `123` is the project number (not project ID).
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\OperationResponse
     *
     * @throws ApiException if the remote call fails
     *
     * @experimental
     *
     * @deprecated This method will be removed in the next major version update.
     */
    public function disableService(array $optionalArgs = [])
    {
        $request = new DisableServiceRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['name'])) {
            $request->setName($optionalArgs['name']);
            $requestParamHeaders['name'] = $optionalArgs['name'];
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startOperationsCall('DisableService', $optionalArgs, $request, $this->getOperationsClient())->wait();
    }

    /**
     * Enables a service so that it can be used with a project.
     *
     * Operation response type: `google.protobuf.Empty`
     *
     * Sample code:
     * ```
     * $serviceUsageClient = new ServiceUsageClient();
     * try {
     *     $operationResponse = $serviceUsageClient->enableService();
     *     $operationResponse->pollUntilComplete();
     *     if ($operationResponse->operationSucceeded()) {
     *         // operation succeeded and returns no value
     *     } else {
     *         $error = $operationResponse->getError();
     *         // handleError($error)
     *     }
     *     // Alternatively:
     *     // start the operation, keep the operation name, and resume later
     *     $operationResponse = $serviceUsageClient->enableService();
     *     $operationName = $operationResponse->getName();
     *     // ... do other work
     *     $newOperationResponse = $serviceUsageClient->resumeOperation($operationName, 'enableService');
     *     while (!$newOperationResponse->isDone()) {
     *         // ... do other work
     *         $newOperationResponse->reload();
     *     }
     *     if ($newOperationResponse->operationSucceeded()) {
     *         // operation succeeded and returns no value
     *     } else {
     *         $error = $newOperationResponse->getError();
     *         // handleError($error)
     *     }
     * } finally {
     *     $serviceUsageClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $name
     *           Name of the consumer and service to enable the service on.
     *
     *           The `EnableService` and `DisableService` methods currently only support
     *           projects.
     *
     *           Enabling a service requires that the service is public or is shared with
     *           the user enabling the service.
     *
     *           An example name would be:
     *           `projects/123/services/serviceusage.googleapis.com`
     *           where `123` is the project number (not project ID).
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\OperationResponse
     *
     * @throws ApiException if the remote call fails
     *
     * @experimental
     *
     * @deprecated This method will be removed in the next major version update.
     */
    public function enableService(array $optionalArgs = [])
    {
        $request = new EnableServiceRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['name'])) {
            $request->setName($optionalArgs['name']);
            $requestParamHeaders['name'] = $optionalArgs['name'];
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startOperationsCall('EnableService', $optionalArgs, $request, $this->getOperationsClient())->wait();
    }

    /**
     * Generates service identity for service.
     *
     * Sample code:
     * ```
     * $serviceUsageClient = new ServiceUsageClient();
     * try {
     *     $operationResponse = $serviceUsageClient->generateServiceIdentity();
     *     $operationResponse->pollUntilComplete();
     *     if ($operationResponse->operationSucceeded()) {
     *         $result = $operationResponse->getResult();
     *     // doSomethingWith($result)
     *     } else {
     *         $error = $operationResponse->getError();
     *         // handleError($error)
     *     }
     *     // Alternatively:
     *     // start the operation, keep the operation name, and resume later
     *     $operationResponse = $serviceUsageClient->generateServiceIdentity();
     *     $operationName = $operationResponse->getName();
     *     // ... do other work
     *     $newOperationResponse = $serviceUsageClient->resumeOperation($operationName, 'generateServiceIdentity');
     *     while (!$newOperationResponse->isDone()) {
     *         // ... do other work
     *         $newOperationResponse->reload();
     *     }
     *     if ($newOperationResponse->operationSucceeded()) {
     *         $result = $newOperationResponse->getResult();
     *     // doSomethingWith($result)
     *     } else {
     *         $error = $newOperationResponse->getError();
     *         // handleError($error)
     *     }
     * } finally {
     *     $serviceUsageClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $parent
     *           Name of the consumer and service to generate an identity for.
     *
     *           The `GenerateServiceIdentity` methods currently only support projects.
     *
     *           An example name would be:
     *           `projects/123/services/example.googleapis.com` where `123` is the
     *           project number.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\OperationResponse
     *
     * @throws ApiException if the remote call fails
     *
     * @experimental
     */
    public function generateServiceIdentity(array $optionalArgs = [])
    {
        $request = new GenerateServiceIdentityRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['parent'])) {
            $request->setParent($optionalArgs['parent']);
            $requestParamHeaders['parent'] = $optionalArgs['parent'];
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startOperationsCall('GenerateServiceIdentity', $optionalArgs, $request, $this->getOperationsClient())->wait();
    }

    /**
     * Retrieves a summary of quota information for a specific quota limit.
     *
     * Sample code:
     * ```
     * $serviceUsageClient = new ServiceUsageClient();
     * try {
     *     $response = $serviceUsageClient->getConsumerQuotaLimit();
     * } finally {
     *     $serviceUsageClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $name
     *           The resource name of the quota limit.
     *
     *           Use the quota limit resource name returned by previous
     *           ListConsumerQuotaMetrics and GetConsumerQuotaMetric API calls.
     *     @type int $view
     *           Specifies the level of detail for quota information in the response.
     *           For allowed values, use constants defined on {@see \Google\Api\ServiceUsage\V1beta1\QuotaView}
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Api\ServiceUsage\V1beta1\ConsumerQuotaLimit
     *
     * @throws ApiException if the remote call fails
     *
     * @experimental
     */
    public function getConsumerQuotaLimit(array $optionalArgs = [])
    {
        $request = new GetConsumerQuotaLimitRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['name'])) {
            $request->setName($optionalArgs['name']);
            $requestParamHeaders['name'] = $optionalArgs['name'];
        }

        if (isset($optionalArgs['view'])) {
            $request->setView($optionalArgs['view']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('GetConsumerQuotaLimit', ConsumerQuotaLimit::class, $optionalArgs, $request)->wait();
    }

    /**
     * Retrieves a summary of quota information for a specific quota metric
     *
     * Sample code:
     * ```
     * $serviceUsageClient = new ServiceUsageClient();
     * try {
     *     $response = $serviceUsageClient->getConsumerQuotaMetric();
     * } finally {
     *     $serviceUsageClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $name
     *           The resource name of the quota limit.
     *
     *           An example name would be:
     *           `projects/123/services/serviceusage.googleapis.com/quotas/metrics/serviceusage.googleapis.com%2Fmutate_requests`
     *     @type int $view
     *           Specifies the level of detail for quota information in the response.
     *           For allowed values, use constants defined on {@see \Google\Api\ServiceUsage\V1beta1\QuotaView}
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Api\ServiceUsage\V1beta1\ConsumerQuotaMetric
     *
     * @throws ApiException if the remote call fails
     *
     * @experimental
     */
    public function getConsumerQuotaMetric(array $optionalArgs = [])
    {
        $request = new GetConsumerQuotaMetricRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['name'])) {
            $request->setName($optionalArgs['name']);
            $requestParamHeaders['name'] = $optionalArgs['name'];
        }

        if (isset($optionalArgs['view'])) {
            $request->setView($optionalArgs['view']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('GetConsumerQuotaMetric', ConsumerQuotaMetric::class, $optionalArgs, $request)->wait();
    }

    /**
     * Returns the service configuration and enabled state for a given service.
     *
     * Sample code:
     * ```
     * $serviceUsageClient = new ServiceUsageClient();
     * try {
     *     $response = $serviceUsageClient->getService();
     * } finally {
     *     $serviceUsageClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $name
     *           Name of the consumer and service to get the `ConsumerState` for.
     *
     *           An example name would be:
     *           `projects/123/services/serviceusage.googleapis.com`
     *           where `123` is the project number (not project ID).
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Api\ServiceUsage\V1beta1\Service
     *
     * @throws ApiException if the remote call fails
     *
     * @experimental
     *
     * @deprecated This method will be removed in the next major version update.
     */
    public function getService(array $optionalArgs = [])
    {
        $request = new GetServiceRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['name'])) {
            $request->setName($optionalArgs['name']);
            $requestParamHeaders['name'] = $optionalArgs['name'];
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('GetService', Service::class, $optionalArgs, $request)->wait();
    }

    /**
     * Creates or updates multiple admin overrides atomically, all on the
     * same consumer, but on many different metrics or limits.
     * The name field in the quota override message should not be set.
     *
     * Sample code:
     * ```
     * $serviceUsageClient = new ServiceUsageClient();
     * try {
     *     $operationResponse = $serviceUsageClient->importAdminOverrides();
     *     $operationResponse->pollUntilComplete();
     *     if ($operationResponse->operationSucceeded()) {
     *         $result = $operationResponse->getResult();
     *     // doSomethingWith($result)
     *     } else {
     *         $error = $operationResponse->getError();
     *         // handleError($error)
     *     }
     *     // Alternatively:
     *     // start the operation, keep the operation name, and resume later
     *     $operationResponse = $serviceUsageClient->importAdminOverrides();
     *     $operationName = $operationResponse->getName();
     *     // ... do other work
     *     $newOperationResponse = $serviceUsageClient->resumeOperation($operationName, 'importAdminOverrides');
     *     while (!$newOperationResponse->isDone()) {
     *         // ... do other work
     *         $newOperationResponse->reload();
     *     }
     *     if ($newOperationResponse->operationSucceeded()) {
     *         $result = $newOperationResponse->getResult();
     *     // doSomethingWith($result)
     *     } else {
     *         $error = $newOperationResponse->getError();
     *         // handleError($error)
     *     }
     * } finally {
     *     $serviceUsageClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $parent
     *           The resource name of the consumer.
     *
     *           An example name would be:
     *           `projects/123/services/compute.googleapis.com`
     *     @type OverrideInlineSource $inlineSource
     *           The import data is specified in the request message itself
     *     @type bool $force
     *           Whether to force the creation of the quota overrides.
     *           Setting the force parameter to 'true' ignores all quota safety checks that
     *           would fail the request. QuotaSafetyCheck lists all such validations.
     *     @type int[] $forceOnly
     *           The list of quota safety checks to ignore before the override mutation.
     *           Unlike 'force' field that ignores all the quota safety checks, the
     *           'force_only' field ignores only the specified checks; other checks are
     *           still enforced. The 'force' and 'force_only' fields cannot both be set.
     *           For allowed values, use constants defined on {@see \Google\Api\ServiceUsage\V1beta1\QuotaSafetyCheck}
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\OperationResponse
     *
     * @throws ApiException if the remote call fails
     *
     * @experimental
     */
    public function importAdminOverrides(array $optionalArgs = [])
    {
        $request = new ImportAdminOverridesRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['parent'])) {
            $request->setParent($optionalArgs['parent']);
            $requestParamHeaders['parent'] = $optionalArgs['parent'];
        }

        if (isset($optionalArgs['inlineSource'])) {
            $request->setInlineSource($optionalArgs['inlineSource']);
        }

        if (isset($optionalArgs['force'])) {
            $request->setForce($optionalArgs['force']);
        }

        if (isset($optionalArgs['forceOnly'])) {
            $request->setForceOnly($optionalArgs['forceOnly']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startOperationsCall('ImportAdminOverrides', $optionalArgs, $request, $this->getOperationsClient())->wait();
    }

    /**
     * Creates or updates multiple consumer overrides atomically, all on the
     * same consumer, but on many different metrics or limits.
     * The name field in the quota override message should not be set.
     *
     * Sample code:
     * ```
     * $serviceUsageClient = new ServiceUsageClient();
     * try {
     *     $operationResponse = $serviceUsageClient->importConsumerOverrides();
     *     $operationResponse->pollUntilComplete();
     *     if ($operationResponse->operationSucceeded()) {
     *         $result = $operationResponse->getResult();
     *     // doSomethingWith($result)
     *     } else {
     *         $error = $operationResponse->getError();
     *         // handleError($error)
     *     }
     *     // Alternatively:
     *     // start the operation, keep the operation name, and resume later
     *     $operationResponse = $serviceUsageClient->importConsumerOverrides();
     *     $operationName = $operationResponse->getName();
     *     // ... do other work
     *     $newOperationResponse = $serviceUsageClient->resumeOperation($operationName, 'importConsumerOverrides');
     *     while (!$newOperationResponse->isDone()) {
     *         // ... do other work
     *         $newOperationResponse->reload();
     *     }
     *     if ($newOperationResponse->operationSucceeded()) {
     *         $result = $newOperationResponse->getResult();
     *     // doSomethingWith($result)
     *     } else {
     *         $error = $newOperationResponse->getError();
     *         // handleError($error)
     *     }
     * } finally {
     *     $serviceUsageClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $parent
     *           The resource name of the consumer.
     *
     *           An example name would be:
     *           `projects/123/services/compute.googleapis.com`
     *     @type OverrideInlineSource $inlineSource
     *           The import data is specified in the request message itself
     *     @type bool $force
     *           Whether to force the creation of the quota overrides.
     *           Setting the force parameter to 'true' ignores all quota safety checks that
     *           would fail the request. QuotaSafetyCheck lists all such validations.
     *     @type int[] $forceOnly
     *           The list of quota safety checks to ignore before the override mutation.
     *           Unlike 'force' field that ignores all the quota safety checks, the
     *           'force_only' field ignores only the specified checks; other checks are
     *           still enforced. The 'force' and 'force_only' fields cannot both be set.
     *           For allowed values, use constants defined on {@see \Google\Api\ServiceUsage\V1beta1\QuotaSafetyCheck}
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\OperationResponse
     *
     * @throws ApiException if the remote call fails
     *
     * @experimental
     */
    public function importConsumerOverrides(array $optionalArgs = [])
    {
        $request = new ImportConsumerOverridesRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['parent'])) {
            $request->setParent($optionalArgs['parent']);
            $requestParamHeaders['parent'] = $optionalArgs['parent'];
        }

        if (isset($optionalArgs['inlineSource'])) {
            $request->setInlineSource($optionalArgs['inlineSource']);
        }

        if (isset($optionalArgs['force'])) {
            $request->setForce($optionalArgs['force']);
        }

        if (isset($optionalArgs['forceOnly'])) {
            $request->setForceOnly($optionalArgs['forceOnly']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startOperationsCall('ImportConsumerOverrides', $optionalArgs, $request, $this->getOperationsClient())->wait();
    }

    /**
     * Lists all admin overrides on this limit.
     *
     * Sample code:
     * ```
     * $serviceUsageClient = new ServiceUsageClient();
     * try {
     *     // Iterate over pages of elements
     *     $pagedResponse = $serviceUsageClient->listAdminOverrides();
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *     // Alternatively:
     *     // Iterate through all elements
     *     $pagedResponse = $serviceUsageClient->listAdminOverrides();
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $serviceUsageClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $parent
     *           The resource name of the parent quota limit, returned by a
     *           ListConsumerQuotaMetrics or GetConsumerQuotaMetric call.
     *
     *           An example name would be:
     *           `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion`
     *     @type int $pageSize
     *           The maximum number of resources contained in the underlying API
     *           response. The API may return fewer values in a page, even if
     *           there are additional values to be retrieved.
     *     @type string $pageToken
     *           A page token is used to specify a page of values to be returned.
     *           If no page token is specified (the default), the first page
     *           of values will be returned. Any page token used here must have
     *           been generated by a previous call to the API.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     *
     * @experimental
     */
    public function listAdminOverrides(array $optionalArgs = [])
    {
        $request = new ListAdminOverridesRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['parent'])) {
            $request->setParent($optionalArgs['parent']);
            $requestParamHeaders['parent'] = $optionalArgs['parent'];
        }

        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }

        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->getPagedListResponse('ListAdminOverrides', $optionalArgs, ListAdminOverridesResponse::class, $request);
    }

    /**
     * Lists all consumer overrides on this limit.
     *
     * Sample code:
     * ```
     * $serviceUsageClient = new ServiceUsageClient();
     * try {
     *     // Iterate over pages of elements
     *     $pagedResponse = $serviceUsageClient->listConsumerOverrides();
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *     // Alternatively:
     *     // Iterate through all elements
     *     $pagedResponse = $serviceUsageClient->listConsumerOverrides();
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $serviceUsageClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $parent
     *           The resource name of the parent quota limit, returned by a
     *           ListConsumerQuotaMetrics or GetConsumerQuotaMetric call.
     *
     *           An example name would be:
     *           `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion`
     *     @type int $pageSize
     *           The maximum number of resources contained in the underlying API
     *           response. The API may return fewer values in a page, even if
     *           there are additional values to be retrieved.
     *     @type string $pageToken
     *           A page token is used to specify a page of values to be returned.
     *           If no page token is specified (the default), the first page
     *           of values will be returned. Any page token used here must have
     *           been generated by a previous call to the API.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     *
     * @experimental
     */
    public function listConsumerOverrides(array $optionalArgs = [])
    {
        $request = new ListConsumerOverridesRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['parent'])) {
            $request->setParent($optionalArgs['parent']);
            $requestParamHeaders['parent'] = $optionalArgs['parent'];
        }

        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }

        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->getPagedListResponse('ListConsumerOverrides', $optionalArgs, ListConsumerOverridesResponse::class, $request);
    }

    /**
     * Retrieves a summary of all quota information visible to the service
     * consumer, organized by service metric. Each metric includes information
     * about all of its defined limits. Each limit includes the limit
     * configuration (quota unit, preciseness, default value), the current
     * effective limit value, and all of the overrides applied to the limit.
     *
     * Sample code:
     * ```
     * $serviceUsageClient = new ServiceUsageClient();
     * try {
     *     // Iterate over pages of elements
     *     $pagedResponse = $serviceUsageClient->listConsumerQuotaMetrics();
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *     // Alternatively:
     *     // Iterate through all elements
     *     $pagedResponse = $serviceUsageClient->listConsumerQuotaMetrics();
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $serviceUsageClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $parent
     *           Parent of the quotas resource.
     *
     *           Some example names would be:
     *           `projects/123/services/serviceconsumermanagement.googleapis.com`
     *           `folders/345/services/serviceconsumermanagement.googleapis.com`
     *           `organizations/456/services/serviceconsumermanagement.googleapis.com`
     *     @type int $pageSize
     *           The maximum number of resources contained in the underlying API
     *           response. The API may return fewer values in a page, even if
     *           there are additional values to be retrieved.
     *     @type string $pageToken
     *           A page token is used to specify a page of values to be returned.
     *           If no page token is specified (the default), the first page
     *           of values will be returned. Any page token used here must have
     *           been generated by a previous call to the API.
     *     @type int $view
     *           Specifies the level of detail for quota information in the response.
     *           For allowed values, use constants defined on {@see \Google\Api\ServiceUsage\V1beta1\QuotaView}
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     *
     * @experimental
     */
    public function listConsumerQuotaMetrics(array $optionalArgs = [])
    {
        $request = new ListConsumerQuotaMetricsRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['parent'])) {
            $request->setParent($optionalArgs['parent']);
            $requestParamHeaders['parent'] = $optionalArgs['parent'];
        }

        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }

        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        if (isset($optionalArgs['view'])) {
            $request->setView($optionalArgs['view']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->getPagedListResponse('ListConsumerQuotaMetrics', $optionalArgs, ListConsumerQuotaMetricsResponse::class, $request);
    }

    /**
     * Lists all services available to the specified project, and the current
     * state of those services with respect to the project. The list includes
     * all public services, all services for which the calling user has the
     * `servicemanagement.services.bind` permission, and all services that have
     * already been enabled on the project. The list can be filtered to
     * only include services in a specific state, for example to only include
     * services enabled on the project.
     *
     * Sample code:
     * ```
     * $serviceUsageClient = new ServiceUsageClient();
     * try {
     *     // Iterate over pages of elements
     *     $pagedResponse = $serviceUsageClient->listServices();
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *     // Alternatively:
     *     // Iterate through all elements
     *     $pagedResponse = $serviceUsageClient->listServices();
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $serviceUsageClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $parent
     *           Parent to search for services on.
     *
     *           An example name would be:
     *           `projects/123`
     *           where `123` is the project number (not project ID).
     *     @type int $pageSize
     *           The maximum number of resources contained in the underlying API
     *           response. The API may return fewer values in a page, even if
     *           there are additional values to be retrieved.
     *     @type string $pageToken
     *           A page token is used to specify a page of values to be returned.
     *           If no page token is specified (the default), the first page
     *           of values will be returned. Any page token used here must have
     *           been generated by a previous call to the API.
     *     @type string $filter
     *           Only list services that conform to the given filter.
     *           The allowed filter strings are `state:ENABLED` and `state:DISABLED`.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     *
     * @experimental
     *
     * @deprecated This method will be removed in the next major version update.
     */
    public function listServices(array $optionalArgs = [])
    {
        $request = new ListServicesRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['parent'])) {
            $request->setParent($optionalArgs['parent']);
            $requestParamHeaders['parent'] = $optionalArgs['parent'];
        }

        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }

        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        if (isset($optionalArgs['filter'])) {
            $request->setFilter($optionalArgs['filter']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->getPagedListResponse('ListServices', $optionalArgs, ListServicesResponse::class, $request);
    }

    /**
     * Updates an admin override.
     *
     * Sample code:
     * ```
     * $serviceUsageClient = new ServiceUsageClient();
     * try {
     *     $operationResponse = $serviceUsageClient->updateAdminOverride();
     *     $operationResponse->pollUntilComplete();
     *     if ($operationResponse->operationSucceeded()) {
     *         $result = $operationResponse->getResult();
     *     // doSomethingWith($result)
     *     } else {
     *         $error = $operationResponse->getError();
     *         // handleError($error)
     *     }
     *     // Alternatively:
     *     // start the operation, keep the operation name, and resume later
     *     $operationResponse = $serviceUsageClient->updateAdminOverride();
     *     $operationName = $operationResponse->getName();
     *     // ... do other work
     *     $newOperationResponse = $serviceUsageClient->resumeOperation($operationName, 'updateAdminOverride');
     *     while (!$newOperationResponse->isDone()) {
     *         // ... do other work
     *         $newOperationResponse->reload();
     *     }
     *     if ($newOperationResponse->operationSucceeded()) {
     *         $result = $newOperationResponse->getResult();
     *     // doSomethingWith($result)
     *     } else {
     *         $error = $newOperationResponse->getError();
     *         // handleError($error)
     *     }
     * } finally {
     *     $serviceUsageClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $name
     *           The resource name of the override to update.
     *
     *           An example name would be:
     *           `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/adminOverrides/4a3f2c1d`
     *     @type QuotaOverride $override
     *           The new override.
     *           Only the override_value is updated; all other fields are ignored.
     *     @type bool $force
     *           Whether to force the update of the quota override.
     *           Setting the force parameter to 'true' ignores all quota safety checks that
     *           would fail the request. QuotaSafetyCheck lists all such validations.
     *     @type FieldMask $updateMask
     *           Update only the specified fields of the override.
     *           If unset, all fields will be updated.
     *     @type int[] $forceOnly
     *           The list of quota safety checks to ignore before the override mutation.
     *           Unlike 'force' field that ignores all the quota safety checks, the
     *           'force_only' field ignores only the specified checks; other checks are
     *           still enforced. The 'force' and 'force_only' fields cannot both be set.
     *           For allowed values, use constants defined on {@see \Google\Api\ServiceUsage\V1beta1\QuotaSafetyCheck}
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\OperationResponse
     *
     * @throws ApiException if the remote call fails
     *
     * @experimental
     */
    public function updateAdminOverride(array $optionalArgs = [])
    {
        $request = new UpdateAdminOverrideRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['name'])) {
            $request->setName($optionalArgs['name']);
            $requestParamHeaders['name'] = $optionalArgs['name'];
        }

        if (isset($optionalArgs['override'])) {
            $request->setOverride($optionalArgs['override']);
        }

        if (isset($optionalArgs['force'])) {
            $request->setForce($optionalArgs['force']);
        }

        if (isset($optionalArgs['updateMask'])) {
            $request->setUpdateMask($optionalArgs['updateMask']);
        }

        if (isset($optionalArgs['forceOnly'])) {
            $request->setForceOnly($optionalArgs['forceOnly']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startOperationsCall('UpdateAdminOverride', $optionalArgs, $request, $this->getOperationsClient())->wait();
    }

    /**
     * Updates a consumer override.
     *
     * Sample code:
     * ```
     * $serviceUsageClient = new ServiceUsageClient();
     * try {
     *     $operationResponse = $serviceUsageClient->updateConsumerOverride();
     *     $operationResponse->pollUntilComplete();
     *     if ($operationResponse->operationSucceeded()) {
     *         $result = $operationResponse->getResult();
     *     // doSomethingWith($result)
     *     } else {
     *         $error = $operationResponse->getError();
     *         // handleError($error)
     *     }
     *     // Alternatively:
     *     // start the operation, keep the operation name, and resume later
     *     $operationResponse = $serviceUsageClient->updateConsumerOverride();
     *     $operationName = $operationResponse->getName();
     *     // ... do other work
     *     $newOperationResponse = $serviceUsageClient->resumeOperation($operationName, 'updateConsumerOverride');
     *     while (!$newOperationResponse->isDone()) {
     *         // ... do other work
     *         $newOperationResponse->reload();
     *     }
     *     if ($newOperationResponse->operationSucceeded()) {
     *         $result = $newOperationResponse->getResult();
     *     // doSomethingWith($result)
     *     } else {
     *         $error = $newOperationResponse->getError();
     *         // handleError($error)
     *     }
     * } finally {
     *     $serviceUsageClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $name
     *           The resource name of the override to update.
     *
     *           An example name would be:
     *           `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/consumerOverrides/4a3f2c1d`
     *     @type QuotaOverride $override
     *           The new override.
     *           Only the override_value is updated; all other fields are ignored.
     *     @type bool $force
     *           Whether to force the update of the quota override.
     *           Setting the force parameter to 'true' ignores all quota safety checks that
     *           would fail the request. QuotaSafetyCheck lists all such validations.
     *     @type FieldMask $updateMask
     *           Update only the specified fields of the override.
     *           If unset, all fields will be updated.
     *     @type int[] $forceOnly
     *           The list of quota safety checks to ignore before the override mutation.
     *           Unlike 'force' field that ignores all the quota safety checks, the
     *           'force_only' field ignores only the specified checks; other checks are
     *           still enforced. The 'force' and 'force_only' fields cannot both be set.
     *           For allowed values, use constants defined on {@see \Google\Api\ServiceUsage\V1beta1\QuotaSafetyCheck}
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\OperationResponse
     *
     * @throws ApiException if the remote call fails
     *
     * @experimental
     */
    public function updateConsumerOverride(array $optionalArgs = [])
    {
        $request = new UpdateConsumerOverrideRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['name'])) {
            $request->setName($optionalArgs['name']);
            $requestParamHeaders['name'] = $optionalArgs['name'];
        }

        if (isset($optionalArgs['override'])) {
            $request->setOverride($optionalArgs['override']);
        }

        if (isset($optionalArgs['force'])) {
            $request->setForce($optionalArgs['force']);
        }

        if (isset($optionalArgs['updateMask'])) {
            $request->setUpdateMask($optionalArgs['updateMask']);
        }

        if (isset($optionalArgs['forceOnly'])) {
            $request->setForceOnly($optionalArgs['forceOnly']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startOperationsCall('UpdateConsumerOverride', $optionalArgs, $request, $this->getOperationsClient())->wait();
    }
}
