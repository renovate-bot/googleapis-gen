# frozen_string_literal: true

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/cloud/errors"
require "google/api/serviceusage/v1beta1/serviceusage_pb"

module Google
  module Api
    module ServiceUsage
      module V1beta1
        module ServiceUsage
          ##
          # Client for the ServiceUsage service.
          #
          # [Service Usage API](https://cloud.google.com/service-usage/docs/overview)
          #
          class Client
            # @private
            attr_reader :service_usage_stub

            ##
            # Configure the ServiceUsage Client class.
            #
            # See {::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @example
            #
            #   # Modify the configuration for all ServiceUsage clients
            #   ::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Client.configure do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def self.configure
              @configure ||= begin
                namespace = ["Google", "Api", "ServiceUsage", "V1beta1"]
                parent_config = while namespace.any?
                                  parent_name = namespace.join "::"
                                  parent_const = const_get parent_name
                                  break parent_const.configure if parent_const.respond_to? :configure
                                  namespace.pop
                                end
                default_config = Client::Configuration.new parent_config

                default_config.timeout = 5.0

                default_config
              end
              yield @configure if block_given?
              @configure
            end

            ##
            # Configure the ServiceUsage Client instance.
            #
            # The configuration is set to the derived mode, meaning that values can be changed,
            # but structural changes (adding new fields, etc.) are not allowed. Structural changes
            # should be made on {Client.configure}.
            #
            # See {::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def configure
              yield @config if block_given?
              @config
            end

            ##
            # Create a new ServiceUsage client object.
            #
            # @example
            #
            #   # Create a client using the default configuration
            #   client = ::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Client.new
            #
            #   # Create a client using a custom configuration
            #   client = ::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Client.new do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the ServiceUsage client.
            # @yieldparam config [Client::Configuration]
            #
            def initialize
              # These require statements are intentionally placed here to initialize
              # the gRPC module only when it's required.
              # See https://github.com/googleapis/toolkit/issues/446
              require "gapic/grpc"
              require "google/api/serviceusage/v1beta1/serviceusage_services_pb"

              # Create the configuration object
              @config = Configuration.new Client.configure

              # Yield the configuration if needed
              yield @config if block_given?

              # Create credentials
              credentials = @config.credentials
              # Use self-signed JWT if the endpoint is unchanged from default,
              # but only if the default endpoint does not have a region prefix.
              enable_self_signed_jwt = @config.endpoint == Client.configure.endpoint &&
                                       !@config.endpoint.split(".").first.include?("-")
              credentials ||= Credentials.default scope: @config.scope,
                                                  enable_self_signed_jwt: enable_self_signed_jwt
              if credentials.is_a?(::String) || credentials.is_a?(::Hash)
                credentials = Credentials.new credentials, scope: @config.scope
              end
              @quota_project_id = @config.quota_project
              @quota_project_id ||= credentials.quota_project_id if credentials.respond_to? :quota_project_id

              @operations_client = Operations.new do |config|
                config.credentials = credentials
                config.endpoint = @config.endpoint
              end

              @service_usage_stub = ::Gapic::ServiceStub.new(
                ::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Stub,
                credentials:  credentials,
                endpoint:     @config.endpoint,
                channel_args: @config.channel_args,
                interceptors: @config.interceptors
              )
            end

            ##
            # Get the associated client for long-running operations.
            #
            # @return [::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Operations]
            #
            attr_reader :operations_client

            # Service calls

            ##
            # Enables a service so that it can be used with a project.
            #
            # Operation response type: `google.protobuf.Empty`
            #
            # @deprecated This method is deprecated and may be removed in the next major version update.
            #
            # @overload enable_service(request, options = nil)
            #   Pass arguments to `enable_service` via a request object, either of type
            #   {::Google::Api::ServiceUsage::V1beta1::EnableServiceRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Api::ServiceUsage::V1beta1::EnableServiceRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload enable_service(name: nil)
            #   Pass arguments to `enable_service` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Name of the consumer and service to enable the service on.
            #
            #     The `EnableService` and `DisableService` methods currently only support
            #     projects.
            #
            #     Enabling a service requires that the service is public or is shared with
            #     the user enabling the service.
            #
            #     An example name would be:
            #     `projects/123/services/serviceusage.googleapis.com`
            #     where `123` is the project number (not project ID).
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def enable_service request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Api::ServiceUsage::V1beta1::EnableServiceRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.enable_service.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::ServiceUsage::V1beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.enable_service.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.enable_service.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @service_usage_stub.call_rpc :enable_service, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Disables a service so that it can no longer be used with a project.
            # This prevents unintended usage that may cause unexpected billing
            # charges or security leaks.
            #
            # It is not valid to call the disable method on a service that is not
            # currently enabled. Callers will receive a `FAILED_PRECONDITION` status if
            # the target service is not currently enabled.
            #
            # Operation response type: `google.protobuf.Empty`
            #
            # @deprecated This method is deprecated and may be removed in the next major version update.
            #
            # @overload disable_service(request, options = nil)
            #   Pass arguments to `disable_service` via a request object, either of type
            #   {::Google::Api::ServiceUsage::V1beta1::DisableServiceRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Api::ServiceUsage::V1beta1::DisableServiceRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload disable_service(name: nil)
            #   Pass arguments to `disable_service` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Name of the consumer and service to disable the service on.
            #
            #     The enable and disable methods currently only support projects.
            #
            #     An example name would be:
            #     `projects/123/services/serviceusage.googleapis.com`
            #     where `123` is the project number (not project ID).
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def disable_service request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Api::ServiceUsage::V1beta1::DisableServiceRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.disable_service.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::ServiceUsage::V1beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.disable_service.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.disable_service.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @service_usage_stub.call_rpc :disable_service, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Returns the service configuration and enabled state for a given service.
            #
            # @deprecated This method is deprecated and may be removed in the next major version update.
            #
            # @overload get_service(request, options = nil)
            #   Pass arguments to `get_service` via a request object, either of type
            #   {::Google::Api::ServiceUsage::V1beta1::GetServiceRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Api::ServiceUsage::V1beta1::GetServiceRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_service(name: nil)
            #   Pass arguments to `get_service` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Name of the consumer and service to get the `ConsumerState` for.
            #
            #     An example name would be:
            #     `projects/123/services/serviceusage.googleapis.com`
            #     where `123` is the project number (not project ID).
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Api::ServiceUsage::V1beta1::Service]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Api::ServiceUsage::V1beta1::Service]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def get_service request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Api::ServiceUsage::V1beta1::GetServiceRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_service.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::ServiceUsage::V1beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get_service.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_service.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @service_usage_stub.call_rpc :get_service, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Lists all services available to the specified project, and the current
            # state of those services with respect to the project. The list includes
            # all public services, all services for which the calling user has the
            # `servicemanagement.services.bind` permission, and all services that have
            # already been enabled on the project. The list can be filtered to
            # only include services in a specific state, for example to only include
            # services enabled on the project.
            #
            # @deprecated This method is deprecated and may be removed in the next major version update.
            #
            # @overload list_services(request, options = nil)
            #   Pass arguments to `list_services` via a request object, either of type
            #   {::Google::Api::ServiceUsage::V1beta1::ListServicesRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Api::ServiceUsage::V1beta1::ListServicesRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_services(parent: nil, page_size: nil, page_token: nil, filter: nil)
            #   Pass arguments to `list_services` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Parent to search for services on.
            #
            #     An example name would be:
            #     `projects/123`
            #     where `123` is the project number (not project ID).
            #   @param page_size [::Integer]
            #     Requested size of the next page of data.
            #     Requested page size cannot exceed 200.
            #      If not set, the default page size is 50.
            #   @param page_token [::String]
            #     Token identifying which result to start with, which is returned by a
            #     previous list call.
            #   @param filter [::String]
            #     Only list services that conform to the given filter.
            #     The allowed filter strings are `state:ENABLED` and `state:DISABLED`.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Api::ServiceUsage::V1beta1::Service>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Api::ServiceUsage::V1beta1::Service>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def list_services request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Api::ServiceUsage::V1beta1::ListServicesRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_services.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::ServiceUsage::V1beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "parent" => request.parent
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.list_services.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_services.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @service_usage_stub.call_rpc :list_services, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @service_usage_stub, :list_services, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Enables multiple services on a project. The operation is atomic: if
            # enabling any service fails, then the entire batch fails, and no state
            # changes occur.
            #
            # Operation response type: `google.protobuf.Empty`
            #
            # @deprecated This method is deprecated and may be removed in the next major version update.
            #
            # @overload batch_enable_services(request, options = nil)
            #   Pass arguments to `batch_enable_services` via a request object, either of type
            #   {::Google::Api::ServiceUsage::V1beta1::BatchEnableServicesRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Api::ServiceUsage::V1beta1::BatchEnableServicesRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload batch_enable_services(parent: nil, service_ids: nil)
            #   Pass arguments to `batch_enable_services` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Parent to enable services on.
            #
            #     An example name would be:
            #     `projects/123`
            #     where `123` is the project number (not project ID).
            #
            #     The `BatchEnableServices` method currently only supports projects.
            #   @param service_ids [::Array<::String>]
            #     The identifiers of the services to enable on the project.
            #
            #     A valid identifier would be:
            #     serviceusage.googleapis.com
            #
            #     Enabling services requires that each service is public or is shared with
            #     the user enabling the service.
            #
            #     Two or more services must be specified. To enable a single service,
            #     use the `EnableService` method instead.
            #
            #     A single request can enable a maximum of 20 services at a time. If more
            #     than 20 services are specified, the request will fail, and no state changes
            #     will occur.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def batch_enable_services request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Api::ServiceUsage::V1beta1::BatchEnableServicesRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.batch_enable_services.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::ServiceUsage::V1beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "parent" => request.parent
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.batch_enable_services.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.batch_enable_services.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @service_usage_stub.call_rpc :batch_enable_services, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Retrieves a summary of all quota information visible to the service
            # consumer, organized by service metric. Each metric includes information
            # about all of its defined limits. Each limit includes the limit
            # configuration (quota unit, preciseness, default value), the current
            # effective limit value, and all of the overrides applied to the limit.
            #
            # @overload list_consumer_quota_metrics(request, options = nil)
            #   Pass arguments to `list_consumer_quota_metrics` via a request object, either of type
            #   {::Google::Api::ServiceUsage::V1beta1::ListConsumerQuotaMetricsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Api::ServiceUsage::V1beta1::ListConsumerQuotaMetricsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_consumer_quota_metrics(parent: nil, page_size: nil, page_token: nil, view: nil)
            #   Pass arguments to `list_consumer_quota_metrics` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Parent of the quotas resource.
            #
            #     Some example names would be:
            #     `projects/123/services/serviceconsumermanagement.googleapis.com`
            #     `folders/345/services/serviceconsumermanagement.googleapis.com`
            #     `organizations/456/services/serviceconsumermanagement.googleapis.com`
            #   @param page_size [::Integer]
            #     Requested size of the next page of data.
            #   @param page_token [::String]
            #     Token identifying which result to start with; returned by a previous list
            #     call.
            #   @param view [::Google::Api::ServiceUsage::V1beta1::QuotaView]
            #     Specifies the level of detail for quota information in the response.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Api::ServiceUsage::V1beta1::ConsumerQuotaMetric>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Api::ServiceUsage::V1beta1::ConsumerQuotaMetric>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def list_consumer_quota_metrics request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Api::ServiceUsage::V1beta1::ListConsumerQuotaMetricsRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_consumer_quota_metrics.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::ServiceUsage::V1beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "parent" => request.parent
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.list_consumer_quota_metrics.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_consumer_quota_metrics.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @service_usage_stub.call_rpc :list_consumer_quota_metrics, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @service_usage_stub, :list_consumer_quota_metrics, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Retrieves a summary of quota information for a specific quota metric
            #
            # @overload get_consumer_quota_metric(request, options = nil)
            #   Pass arguments to `get_consumer_quota_metric` via a request object, either of type
            #   {::Google::Api::ServiceUsage::V1beta1::GetConsumerQuotaMetricRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Api::ServiceUsage::V1beta1::GetConsumerQuotaMetricRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_consumer_quota_metric(name: nil, view: nil)
            #   Pass arguments to `get_consumer_quota_metric` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     The resource name of the quota limit.
            #
            #     An example name would be:
            #     `projects/123/services/serviceusage.googleapis.com/quotas/metrics/serviceusage.googleapis.com%2Fmutate_requests`
            #   @param view [::Google::Api::ServiceUsage::V1beta1::QuotaView]
            #     Specifies the level of detail for quota information in the response.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Api::ServiceUsage::V1beta1::ConsumerQuotaMetric]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Api::ServiceUsage::V1beta1::ConsumerQuotaMetric]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def get_consumer_quota_metric request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Api::ServiceUsage::V1beta1::GetConsumerQuotaMetricRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_consumer_quota_metric.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::ServiceUsage::V1beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get_consumer_quota_metric.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_consumer_quota_metric.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @service_usage_stub.call_rpc :get_consumer_quota_metric, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Retrieves a summary of quota information for a specific quota limit.
            #
            # @overload get_consumer_quota_limit(request, options = nil)
            #   Pass arguments to `get_consumer_quota_limit` via a request object, either of type
            #   {::Google::Api::ServiceUsage::V1beta1::GetConsumerQuotaLimitRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Api::ServiceUsage::V1beta1::GetConsumerQuotaLimitRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_consumer_quota_limit(name: nil, view: nil)
            #   Pass arguments to `get_consumer_quota_limit` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     The resource name of the quota limit.
            #
            #     Use the quota limit resource name returned by previous
            #     ListConsumerQuotaMetrics and GetConsumerQuotaMetric API calls.
            #   @param view [::Google::Api::ServiceUsage::V1beta1::QuotaView]
            #     Specifies the level of detail for quota information in the response.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Api::ServiceUsage::V1beta1::ConsumerQuotaLimit]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Api::ServiceUsage::V1beta1::ConsumerQuotaLimit]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def get_consumer_quota_limit request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Api::ServiceUsage::V1beta1::GetConsumerQuotaLimitRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_consumer_quota_limit.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::ServiceUsage::V1beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get_consumer_quota_limit.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_consumer_quota_limit.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @service_usage_stub.call_rpc :get_consumer_quota_limit, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Creates an admin override.
            # An admin override is applied by an administrator of a parent folder or
            # parent organization of the consumer receiving the override. An admin
            # override is intended to limit the amount of quota the consumer can use out
            # of the total quota pool allocated to all children of the folder or
            # organization.
            #
            # @overload create_admin_override(request, options = nil)
            #   Pass arguments to `create_admin_override` via a request object, either of type
            #   {::Google::Api::ServiceUsage::V1beta1::CreateAdminOverrideRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Api::ServiceUsage::V1beta1::CreateAdminOverrideRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload create_admin_override(parent: nil, override: nil, force: nil, force_only: nil)
            #   Pass arguments to `create_admin_override` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     The resource name of the parent quota limit, returned by a
            #     ListConsumerQuotaMetrics or GetConsumerQuotaMetric call.
            #
            #     An example name would be:
            #     `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion`
            #   @param override [::Google::Api::ServiceUsage::V1beta1::QuotaOverride, ::Hash]
            #     The admin override to create.
            #   @param force [::Boolean]
            #     Whether to force the creation of the quota override.
            #     Setting the force parameter to 'true' ignores all quota safety checks that
            #     would fail the request. QuotaSafetyCheck lists all such validations.
            #   @param force_only [::Array<::Google::Api::ServiceUsage::V1beta1::QuotaSafetyCheck>]
            #     The list of quota safety checks to ignore before the override mutation.
            #     Unlike 'force' field that ignores all the quota safety checks, the
            #     'force_only' field ignores only the specified checks; other checks are
            #     still enforced. The 'force' and 'force_only' fields cannot both be set.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def create_admin_override request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Api::ServiceUsage::V1beta1::CreateAdminOverrideRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.create_admin_override.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::ServiceUsage::V1beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "parent" => request.parent
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.create_admin_override.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.create_admin_override.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @service_usage_stub.call_rpc :create_admin_override, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Updates an admin override.
            #
            # @overload update_admin_override(request, options = nil)
            #   Pass arguments to `update_admin_override` via a request object, either of type
            #   {::Google::Api::ServiceUsage::V1beta1::UpdateAdminOverrideRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Api::ServiceUsage::V1beta1::UpdateAdminOverrideRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload update_admin_override(name: nil, override: nil, force: nil, update_mask: nil, force_only: nil)
            #   Pass arguments to `update_admin_override` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     The resource name of the override to update.
            #
            #     An example name would be:
            #     `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/adminOverrides/4a3f2c1d`
            #   @param override [::Google::Api::ServiceUsage::V1beta1::QuotaOverride, ::Hash]
            #     The new override.
            #     Only the override_value is updated; all other fields are ignored.
            #   @param force [::Boolean]
            #     Whether to force the update of the quota override.
            #     Setting the force parameter to 'true' ignores all quota safety checks that
            #     would fail the request. QuotaSafetyCheck lists all such validations.
            #   @param update_mask [::Google::Protobuf::FieldMask, ::Hash]
            #     Update only the specified fields of the override.
            #     If unset, all fields will be updated.
            #   @param force_only [::Array<::Google::Api::ServiceUsage::V1beta1::QuotaSafetyCheck>]
            #     The list of quota safety checks to ignore before the override mutation.
            #     Unlike 'force' field that ignores all the quota safety checks, the
            #     'force_only' field ignores only the specified checks; other checks are
            #     still enforced. The 'force' and 'force_only' fields cannot both be set.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def update_admin_override request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Api::ServiceUsage::V1beta1::UpdateAdminOverrideRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.update_admin_override.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::ServiceUsage::V1beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.update_admin_override.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.update_admin_override.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @service_usage_stub.call_rpc :update_admin_override, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Deletes an admin override.
            #
            # @overload delete_admin_override(request, options = nil)
            #   Pass arguments to `delete_admin_override` via a request object, either of type
            #   {::Google::Api::ServiceUsage::V1beta1::DeleteAdminOverrideRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Api::ServiceUsage::V1beta1::DeleteAdminOverrideRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload delete_admin_override(name: nil, force: nil, force_only: nil)
            #   Pass arguments to `delete_admin_override` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     The resource name of the override to delete.
            #
            #     An example name would be:
            #     `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/adminOverrides/4a3f2c1d`
            #   @param force [::Boolean]
            #     Whether to force the deletion of the quota override.
            #     Setting the force parameter to 'true' ignores all quota safety checks that
            #     would fail the request. QuotaSafetyCheck lists all such validations.
            #   @param force_only [::Array<::Google::Api::ServiceUsage::V1beta1::QuotaSafetyCheck>]
            #     The list of quota safety checks to ignore before the override mutation.
            #     Unlike 'force' field that ignores all the quota safety checks, the
            #     'force_only' field ignores only the specified checks; other checks are
            #     still enforced. The 'force' and 'force_only' fields cannot both be set.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def delete_admin_override request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Api::ServiceUsage::V1beta1::DeleteAdminOverrideRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.delete_admin_override.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::ServiceUsage::V1beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.delete_admin_override.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.delete_admin_override.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @service_usage_stub.call_rpc :delete_admin_override, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Lists all admin overrides on this limit.
            #
            # @overload list_admin_overrides(request, options = nil)
            #   Pass arguments to `list_admin_overrides` via a request object, either of type
            #   {::Google::Api::ServiceUsage::V1beta1::ListAdminOverridesRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Api::ServiceUsage::V1beta1::ListAdminOverridesRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_admin_overrides(parent: nil, page_size: nil, page_token: nil)
            #   Pass arguments to `list_admin_overrides` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     The resource name of the parent quota limit, returned by a
            #     ListConsumerQuotaMetrics or GetConsumerQuotaMetric call.
            #
            #     An example name would be:
            #     `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion`
            #   @param page_size [::Integer]
            #     Requested size of the next page of data.
            #   @param page_token [::String]
            #     Token identifying which result to start with; returned by a previous list
            #     call.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Api::ServiceUsage::V1beta1::QuotaOverride>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Api::ServiceUsage::V1beta1::QuotaOverride>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def list_admin_overrides request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Api::ServiceUsage::V1beta1::ListAdminOverridesRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_admin_overrides.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::ServiceUsage::V1beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "parent" => request.parent
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.list_admin_overrides.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_admin_overrides.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @service_usage_stub.call_rpc :list_admin_overrides, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @service_usage_stub, :list_admin_overrides, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Creates or updates multiple admin overrides atomically, all on the
            # same consumer, but on many different metrics or limits.
            # The name field in the quota override message should not be set.
            #
            # @overload import_admin_overrides(request, options = nil)
            #   Pass arguments to `import_admin_overrides` via a request object, either of type
            #   {::Google::Api::ServiceUsage::V1beta1::ImportAdminOverridesRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Api::ServiceUsage::V1beta1::ImportAdminOverridesRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload import_admin_overrides(parent: nil, inline_source: nil, force: nil, force_only: nil)
            #   Pass arguments to `import_admin_overrides` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     The resource name of the consumer.
            #
            #     An example name would be:
            #     `projects/123/services/compute.googleapis.com`
            #   @param inline_source [::Google::Api::ServiceUsage::V1beta1::OverrideInlineSource, ::Hash]
            #     The import data is specified in the request message itself
            #   @param force [::Boolean]
            #     Whether to force the creation of the quota overrides.
            #     Setting the force parameter to 'true' ignores all quota safety checks that
            #     would fail the request. QuotaSafetyCheck lists all such validations.
            #   @param force_only [::Array<::Google::Api::ServiceUsage::V1beta1::QuotaSafetyCheck>]
            #     The list of quota safety checks to ignore before the override mutation.
            #     Unlike 'force' field that ignores all the quota safety checks, the
            #     'force_only' field ignores only the specified checks; other checks are
            #     still enforced. The 'force' and 'force_only' fields cannot both be set.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def import_admin_overrides request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Api::ServiceUsage::V1beta1::ImportAdminOverridesRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.import_admin_overrides.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::ServiceUsage::V1beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "parent" => request.parent
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.import_admin_overrides.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.import_admin_overrides.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @service_usage_stub.call_rpc :import_admin_overrides, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Creates a consumer override.
            # A consumer override is applied to the consumer on its own authority to
            # limit its own quota usage. Consumer overrides cannot be used to grant more
            # quota than would be allowed by admin overrides, producer overrides, or the
            # default limit of the service.
            #
            # @overload create_consumer_override(request, options = nil)
            #   Pass arguments to `create_consumer_override` via a request object, either of type
            #   {::Google::Api::ServiceUsage::V1beta1::CreateConsumerOverrideRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Api::ServiceUsage::V1beta1::CreateConsumerOverrideRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload create_consumer_override(parent: nil, override: nil, force: nil, force_only: nil)
            #   Pass arguments to `create_consumer_override` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     The resource name of the parent quota limit, returned by a
            #     ListConsumerQuotaMetrics or GetConsumerQuotaMetric call.
            #
            #     An example name would be:
            #     `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion`
            #   @param override [::Google::Api::ServiceUsage::V1beta1::QuotaOverride, ::Hash]
            #     The override to create.
            #   @param force [::Boolean]
            #     Whether to force the creation of the quota override.
            #     Setting the force parameter to 'true' ignores all quota safety checks that
            #     would fail the request. QuotaSafetyCheck lists all such validations.
            #   @param force_only [::Array<::Google::Api::ServiceUsage::V1beta1::QuotaSafetyCheck>]
            #     The list of quota safety checks to ignore before the override mutation.
            #     Unlike 'force' field that ignores all the quota safety checks, the
            #     'force_only' field ignores only the specified checks; other checks are
            #     still enforced. The 'force' and 'force_only' fields cannot both be set.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def create_consumer_override request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Api::ServiceUsage::V1beta1::CreateConsumerOverrideRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.create_consumer_override.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::ServiceUsage::V1beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "parent" => request.parent
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.create_consumer_override.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.create_consumer_override.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @service_usage_stub.call_rpc :create_consumer_override, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Updates a consumer override.
            #
            # @overload update_consumer_override(request, options = nil)
            #   Pass arguments to `update_consumer_override` via a request object, either of type
            #   {::Google::Api::ServiceUsage::V1beta1::UpdateConsumerOverrideRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Api::ServiceUsage::V1beta1::UpdateConsumerOverrideRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload update_consumer_override(name: nil, override: nil, force: nil, update_mask: nil, force_only: nil)
            #   Pass arguments to `update_consumer_override` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     The resource name of the override to update.
            #
            #     An example name would be:
            #     `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/consumerOverrides/4a3f2c1d`
            #   @param override [::Google::Api::ServiceUsage::V1beta1::QuotaOverride, ::Hash]
            #     The new override.
            #     Only the override_value is updated; all other fields are ignored.
            #   @param force [::Boolean]
            #     Whether to force the update of the quota override.
            #     Setting the force parameter to 'true' ignores all quota safety checks that
            #     would fail the request. QuotaSafetyCheck lists all such validations.
            #   @param update_mask [::Google::Protobuf::FieldMask, ::Hash]
            #     Update only the specified fields of the override.
            #     If unset, all fields will be updated.
            #   @param force_only [::Array<::Google::Api::ServiceUsage::V1beta1::QuotaSafetyCheck>]
            #     The list of quota safety checks to ignore before the override mutation.
            #     Unlike 'force' field that ignores all the quota safety checks, the
            #     'force_only' field ignores only the specified checks; other checks are
            #     still enforced. The 'force' and 'force_only' fields cannot both be set.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def update_consumer_override request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Api::ServiceUsage::V1beta1::UpdateConsumerOverrideRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.update_consumer_override.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::ServiceUsage::V1beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.update_consumer_override.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.update_consumer_override.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @service_usage_stub.call_rpc :update_consumer_override, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Deletes a consumer override.
            #
            # @overload delete_consumer_override(request, options = nil)
            #   Pass arguments to `delete_consumer_override` via a request object, either of type
            #   {::Google::Api::ServiceUsage::V1beta1::DeleteConsumerOverrideRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Api::ServiceUsage::V1beta1::DeleteConsumerOverrideRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload delete_consumer_override(name: nil, force: nil, force_only: nil)
            #   Pass arguments to `delete_consumer_override` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     The resource name of the override to delete.
            #
            #     An example name would be:
            #     `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/consumerOverrides/4a3f2c1d`
            #   @param force [::Boolean]
            #     Whether to force the deletion of the quota override.
            #     Setting the force parameter to 'true' ignores all quota safety checks that
            #     would fail the request. QuotaSafetyCheck lists all such validations.
            #   @param force_only [::Array<::Google::Api::ServiceUsage::V1beta1::QuotaSafetyCheck>]
            #     The list of quota safety checks to ignore before the override mutation.
            #     Unlike 'force' field that ignores all the quota safety checks, the
            #     'force_only' field ignores only the specified checks; other checks are
            #     still enforced. The 'force' and 'force_only' fields cannot both be set.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def delete_consumer_override request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Api::ServiceUsage::V1beta1::DeleteConsumerOverrideRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.delete_consumer_override.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::ServiceUsage::V1beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.delete_consumer_override.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.delete_consumer_override.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @service_usage_stub.call_rpc :delete_consumer_override, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Lists all consumer overrides on this limit.
            #
            # @overload list_consumer_overrides(request, options = nil)
            #   Pass arguments to `list_consumer_overrides` via a request object, either of type
            #   {::Google::Api::ServiceUsage::V1beta1::ListConsumerOverridesRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Api::ServiceUsage::V1beta1::ListConsumerOverridesRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_consumer_overrides(parent: nil, page_size: nil, page_token: nil)
            #   Pass arguments to `list_consumer_overrides` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     The resource name of the parent quota limit, returned by a
            #     ListConsumerQuotaMetrics or GetConsumerQuotaMetric call.
            #
            #     An example name would be:
            #     `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion`
            #   @param page_size [::Integer]
            #     Requested size of the next page of data.
            #   @param page_token [::String]
            #     Token identifying which result to start with; returned by a previous list
            #     call.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Api::ServiceUsage::V1beta1::QuotaOverride>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Api::ServiceUsage::V1beta1::QuotaOverride>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def list_consumer_overrides request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Api::ServiceUsage::V1beta1::ListConsumerOverridesRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_consumer_overrides.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::ServiceUsage::V1beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "parent" => request.parent
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.list_consumer_overrides.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_consumer_overrides.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @service_usage_stub.call_rpc :list_consumer_overrides, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @service_usage_stub, :list_consumer_overrides, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Creates or updates multiple consumer overrides atomically, all on the
            # same consumer, but on many different metrics or limits.
            # The name field in the quota override message should not be set.
            #
            # @overload import_consumer_overrides(request, options = nil)
            #   Pass arguments to `import_consumer_overrides` via a request object, either of type
            #   {::Google::Api::ServiceUsage::V1beta1::ImportConsumerOverridesRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Api::ServiceUsage::V1beta1::ImportConsumerOverridesRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload import_consumer_overrides(parent: nil, inline_source: nil, force: nil, force_only: nil)
            #   Pass arguments to `import_consumer_overrides` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     The resource name of the consumer.
            #
            #     An example name would be:
            #     `projects/123/services/compute.googleapis.com`
            #   @param inline_source [::Google::Api::ServiceUsage::V1beta1::OverrideInlineSource, ::Hash]
            #     The import data is specified in the request message itself
            #   @param force [::Boolean]
            #     Whether to force the creation of the quota overrides.
            #     Setting the force parameter to 'true' ignores all quota safety checks that
            #     would fail the request. QuotaSafetyCheck lists all such validations.
            #   @param force_only [::Array<::Google::Api::ServiceUsage::V1beta1::QuotaSafetyCheck>]
            #     The list of quota safety checks to ignore before the override mutation.
            #     Unlike 'force' field that ignores all the quota safety checks, the
            #     'force_only' field ignores only the specified checks; other checks are
            #     still enforced. The 'force' and 'force_only' fields cannot both be set.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def import_consumer_overrides request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Api::ServiceUsage::V1beta1::ImportConsumerOverridesRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.import_consumer_overrides.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::ServiceUsage::V1beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "parent" => request.parent
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.import_consumer_overrides.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.import_consumer_overrides.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @service_usage_stub.call_rpc :import_consumer_overrides, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Generates service identity for service.
            #
            # @overload generate_service_identity(request, options = nil)
            #   Pass arguments to `generate_service_identity` via a request object, either of type
            #   {::Google::Api::ServiceUsage::V1beta1::GenerateServiceIdentityRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Api::ServiceUsage::V1beta1::GenerateServiceIdentityRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload generate_service_identity(parent: nil)
            #   Pass arguments to `generate_service_identity` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Name of the consumer and service to generate an identity for.
            #
            #     The `GenerateServiceIdentity` methods currently only support projects.
            #
            #     An example name would be:
            #     `projects/123/services/example.googleapis.com` where `123` is the
            #     project number.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def generate_service_identity request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Api::ServiceUsage::V1beta1::GenerateServiceIdentityRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.generate_service_identity.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::ServiceUsage::V1beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "parent" => request.parent
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.generate_service_identity.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.generate_service_identity.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @service_usage_stub.call_rpc :generate_service_identity, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Configuration class for the ServiceUsage API.
            #
            # This class represents the configuration for ServiceUsage,
            # providing control over timeouts, retry behavior, logging, transport
            # parameters, and other low-level controls. Certain parameters can also be
            # applied individually to specific RPCs. See
            # {::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Client::Configuration::Rpcs}
            # for a list of RPCs that can be configured independently.
            #
            # Configuration can be applied globally to all clients, or to a single client
            # on construction.
            #
            # @example
            #
            #   # Modify the global config, setting the timeout for
            #   # enable_service to 20 seconds,
            #   # and all remaining timeouts to 10 seconds.
            #   ::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Client.configure do |config|
            #     config.timeout = 10.0
            #     config.rpcs.enable_service.timeout = 20.0
            #   end
            #
            #   # Apply the above configuration only to a new client.
            #   client = ::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Client.new do |config|
            #     config.timeout = 10.0
            #     config.rpcs.enable_service.timeout = 20.0
            #   end
            #
            # @!attribute [rw] endpoint
            #   The hostname or hostname:port of the service endpoint.
            #   Defaults to `"serviceusage.googleapis.com"`.
            #   @return [::String]
            # @!attribute [rw] credentials
            #   Credentials to send with calls. You may provide any of the following types:
            #    *  (`String`) The path to a service account key file in JSON format
            #    *  (`Hash`) A service account key as a Hash
            #    *  (`Google::Auth::Credentials`) A googleauth credentials object
            #       (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
            #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
            #       (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
            #    *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
            #    *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
            #    *  (`nil`) indicating no credentials
            #   @return [::Object]
            # @!attribute [rw] scope
            #   The OAuth scopes
            #   @return [::Array<::String>]
            # @!attribute [rw] lib_name
            #   The library name as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] lib_version
            #   The library version as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] channel_args
            #   Extra parameters passed to the gRPC channel. Note: this is ignored if a
            #   `GRPC::Core::Channel` object is provided as the credential.
            #   @return [::Hash]
            # @!attribute [rw] interceptors
            #   An array of interceptors that are run before calls are executed.
            #   @return [::Array<::GRPC::ClientInterceptor>]
            # @!attribute [rw] timeout
            #   The call timeout in seconds.
            #   @return [::Numeric]
            # @!attribute [rw] metadata
            #   Additional gRPC headers to be sent with the call.
            #   @return [::Hash{::Symbol=>::String}]
            # @!attribute [rw] retry_policy
            #   The retry policy. The value is a hash with the following keys:
            #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
            #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
            #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
            #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
            #       trigger a retry.
            #   @return [::Hash]
            # @!attribute [rw] quota_project
            #   A separate project against which to charge quota.
            #   @return [::String]
            #
            class Configuration
              extend ::Gapic::Config

              config_attr :endpoint,      "serviceusage.googleapis.com", ::String
              config_attr :credentials,   nil do |value|
                allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
                allowed += [::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials] if defined? ::GRPC
                allowed.any? { |klass| klass === value }
              end
              config_attr :scope,         nil, ::String, ::Array, nil
              config_attr :lib_name,      nil, ::String, nil
              config_attr :lib_version,   nil, ::String, nil
              config_attr(:channel_args,  { "grpc.service_config_disable_resolution" => 1 }, ::Hash, nil)
              config_attr :interceptors,  nil, ::Array, nil
              config_attr :timeout,       nil, ::Numeric, nil
              config_attr :metadata,      nil, ::Hash, nil
              config_attr :retry_policy,  nil, ::Hash, ::Proc, nil
              config_attr :quota_project, nil, ::String, nil

              # @private
              def initialize parent_config = nil
                @parent_config = parent_config unless parent_config.nil?

                yield self if block_given?
              end

              ##
              # Configurations for individual RPCs
              # @return [Rpcs]
              #
              def rpcs
                @rpcs ||= begin
                  parent_rpcs = nil
                  parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config.respond_to?(:rpcs)
                  Rpcs.new parent_rpcs
                end
              end

              ##
              # Configuration RPC class for the ServiceUsage API.
              #
              # Includes fields providing the configuration for each RPC in this service.
              # Each configuration object is of type `Gapic::Config::Method` and includes
              # the following configuration fields:
              #
              #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
              #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
              #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
              #     include the following keys:
              #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
              #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
              #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
              #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
              #         trigger a retry.
              #
              class Rpcs
                ##
                # RPC-specific configuration for `enable_service`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :enable_service
                ##
                # RPC-specific configuration for `disable_service`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :disable_service
                ##
                # RPC-specific configuration for `get_service`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_service
                ##
                # RPC-specific configuration for `list_services`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_services
                ##
                # RPC-specific configuration for `batch_enable_services`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :batch_enable_services
                ##
                # RPC-specific configuration for `list_consumer_quota_metrics`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_consumer_quota_metrics
                ##
                # RPC-specific configuration for `get_consumer_quota_metric`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_consumer_quota_metric
                ##
                # RPC-specific configuration for `get_consumer_quota_limit`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_consumer_quota_limit
                ##
                # RPC-specific configuration for `create_admin_override`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :create_admin_override
                ##
                # RPC-specific configuration for `update_admin_override`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :update_admin_override
                ##
                # RPC-specific configuration for `delete_admin_override`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :delete_admin_override
                ##
                # RPC-specific configuration for `list_admin_overrides`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_admin_overrides
                ##
                # RPC-specific configuration for `import_admin_overrides`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :import_admin_overrides
                ##
                # RPC-specific configuration for `create_consumer_override`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :create_consumer_override
                ##
                # RPC-specific configuration for `update_consumer_override`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :update_consumer_override
                ##
                # RPC-specific configuration for `delete_consumer_override`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :delete_consumer_override
                ##
                # RPC-specific configuration for `list_consumer_overrides`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_consumer_overrides
                ##
                # RPC-specific configuration for `import_consumer_overrides`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :import_consumer_overrides
                ##
                # RPC-specific configuration for `generate_service_identity`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :generate_service_identity

                # @private
                def initialize parent_rpcs = nil
                  enable_service_config = parent_rpcs.enable_service if parent_rpcs.respond_to? :enable_service
                  @enable_service = ::Gapic::Config::Method.new enable_service_config
                  disable_service_config = parent_rpcs.disable_service if parent_rpcs.respond_to? :disable_service
                  @disable_service = ::Gapic::Config::Method.new disable_service_config
                  get_service_config = parent_rpcs.get_service if parent_rpcs.respond_to? :get_service
                  @get_service = ::Gapic::Config::Method.new get_service_config
                  list_services_config = parent_rpcs.list_services if parent_rpcs.respond_to? :list_services
                  @list_services = ::Gapic::Config::Method.new list_services_config
                  batch_enable_services_config = parent_rpcs.batch_enable_services if parent_rpcs.respond_to? :batch_enable_services
                  @batch_enable_services = ::Gapic::Config::Method.new batch_enable_services_config
                  list_consumer_quota_metrics_config = parent_rpcs.list_consumer_quota_metrics if parent_rpcs.respond_to? :list_consumer_quota_metrics
                  @list_consumer_quota_metrics = ::Gapic::Config::Method.new list_consumer_quota_metrics_config
                  get_consumer_quota_metric_config = parent_rpcs.get_consumer_quota_metric if parent_rpcs.respond_to? :get_consumer_quota_metric
                  @get_consumer_quota_metric = ::Gapic::Config::Method.new get_consumer_quota_metric_config
                  get_consumer_quota_limit_config = parent_rpcs.get_consumer_quota_limit if parent_rpcs.respond_to? :get_consumer_quota_limit
                  @get_consumer_quota_limit = ::Gapic::Config::Method.new get_consumer_quota_limit_config
                  create_admin_override_config = parent_rpcs.create_admin_override if parent_rpcs.respond_to? :create_admin_override
                  @create_admin_override = ::Gapic::Config::Method.new create_admin_override_config
                  update_admin_override_config = parent_rpcs.update_admin_override if parent_rpcs.respond_to? :update_admin_override
                  @update_admin_override = ::Gapic::Config::Method.new update_admin_override_config
                  delete_admin_override_config = parent_rpcs.delete_admin_override if parent_rpcs.respond_to? :delete_admin_override
                  @delete_admin_override = ::Gapic::Config::Method.new delete_admin_override_config
                  list_admin_overrides_config = parent_rpcs.list_admin_overrides if parent_rpcs.respond_to? :list_admin_overrides
                  @list_admin_overrides = ::Gapic::Config::Method.new list_admin_overrides_config
                  import_admin_overrides_config = parent_rpcs.import_admin_overrides if parent_rpcs.respond_to? :import_admin_overrides
                  @import_admin_overrides = ::Gapic::Config::Method.new import_admin_overrides_config
                  create_consumer_override_config = parent_rpcs.create_consumer_override if parent_rpcs.respond_to? :create_consumer_override
                  @create_consumer_override = ::Gapic::Config::Method.new create_consumer_override_config
                  update_consumer_override_config = parent_rpcs.update_consumer_override if parent_rpcs.respond_to? :update_consumer_override
                  @update_consumer_override = ::Gapic::Config::Method.new update_consumer_override_config
                  delete_consumer_override_config = parent_rpcs.delete_consumer_override if parent_rpcs.respond_to? :delete_consumer_override
                  @delete_consumer_override = ::Gapic::Config::Method.new delete_consumer_override_config
                  list_consumer_overrides_config = parent_rpcs.list_consumer_overrides if parent_rpcs.respond_to? :list_consumer_overrides
                  @list_consumer_overrides = ::Gapic::Config::Method.new list_consumer_overrides_config
                  import_consumer_overrides_config = parent_rpcs.import_consumer_overrides if parent_rpcs.respond_to? :import_consumer_overrides
                  @import_consumer_overrides = ::Gapic::Config::Method.new import_consumer_overrides_config
                  generate_service_identity_config = parent_rpcs.generate_service_identity if parent_rpcs.respond_to? :generate_service_identity
                  @generate_service_identity = ::Gapic::Config::Method.new generate_service_identity_config

                  yield self if block_given?
                end
              end
            end
          end
        end
      end
    end
  end
end
