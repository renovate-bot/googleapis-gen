# frozen_string_literal: true

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "helper"

require "gapic/grpc/service_stub"

require "google/api/serviceusage/v1beta1/serviceusage_pb"
require "google/api/serviceusage/v1beta1/serviceusage_services_pb"
require "google/api/service_usage/v1beta1/service_usage"

class ::Google::Api::ServiceUsage::V1beta1::ServiceUsage::ClientTest < Minitest::Test
  class ClientStub
    attr_accessor :call_rpc_count, :requests

    def initialize response, operation, &block
      @response = response
      @operation = operation
      @block = block
      @call_rpc_count = 0
      @requests = []
    end

    def call_rpc *args, **kwargs
      @call_rpc_count += 1

      @requests << @block&.call(*args, **kwargs)

      yield @response, @operation if block_given?

      @response
    end
  end

  def test_enable_service
    # Create GRPC objects.
    grpc_response = ::Google::Longrunning::Operation.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"

    enable_service_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :enable_service, name
      assert_kind_of ::Google::Api::ServiceUsage::V1beta1::EnableServiceRequest, request
      assert_equal "hello world", request["name"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, enable_service_client_stub do
      # Create client
      client = ::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.enable_service({ name: name }) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.enable_service name: name do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.enable_service ::Google::Api::ServiceUsage::V1beta1::EnableServiceRequest.new(name: name) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.enable_service({ name: name }, grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.enable_service(::Google::Api::ServiceUsage::V1beta1::EnableServiceRequest.new(name: name), grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, enable_service_client_stub.call_rpc_count
    end
  end

  def test_disable_service
    # Create GRPC objects.
    grpc_response = ::Google::Longrunning::Operation.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"

    disable_service_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :disable_service, name
      assert_kind_of ::Google::Api::ServiceUsage::V1beta1::DisableServiceRequest, request
      assert_equal "hello world", request["name"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, disable_service_client_stub do
      # Create client
      client = ::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.disable_service({ name: name }) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.disable_service name: name do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.disable_service ::Google::Api::ServiceUsage::V1beta1::DisableServiceRequest.new(name: name) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.disable_service({ name: name }, grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.disable_service(::Google::Api::ServiceUsage::V1beta1::DisableServiceRequest.new(name: name), grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, disable_service_client_stub.call_rpc_count
    end
  end

  def test_get_service
    # Create GRPC objects.
    grpc_response = ::Google::Api::ServiceUsage::V1beta1::Service.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"

    get_service_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :get_service, name
      assert_kind_of ::Google::Api::ServiceUsage::V1beta1::GetServiceRequest, request
      assert_equal "hello world", request["name"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, get_service_client_stub do
      # Create client
      client = ::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.get_service({ name: name }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.get_service name: name do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.get_service ::Google::Api::ServiceUsage::V1beta1::GetServiceRequest.new(name: name) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.get_service({ name: name }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.get_service(::Google::Api::ServiceUsage::V1beta1::GetServiceRequest.new(name: name), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, get_service_client_stub.call_rpc_count
    end
  end

  def test_list_services
    # Create GRPC objects.
    grpc_response = ::Google::Api::ServiceUsage::V1beta1::ListServicesResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    parent = "hello world"
    page_size = 42
    page_token = "hello world"
    filter = "hello world"

    list_services_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :list_services, name
      assert_kind_of ::Google::Api::ServiceUsage::V1beta1::ListServicesRequest, request
      assert_equal "hello world", request["parent"]
      assert_equal 42, request["page_size"]
      assert_equal "hello world", request["page_token"]
      assert_equal "hello world", request["filter"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, list_services_client_stub do
      # Create client
      client = ::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.list_services({ parent: parent, page_size: page_size, page_token: page_token, filter: filter }) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.list_services parent: parent, page_size: page_size, page_token: page_token, filter: filter do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.list_services ::Google::Api::ServiceUsage::V1beta1::ListServicesRequest.new(parent: parent, page_size: page_size, page_token: page_token, filter: filter) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.list_services({ parent: parent, page_size: page_size, page_token: page_token, filter: filter }, grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.list_services(::Google::Api::ServiceUsage::V1beta1::ListServicesRequest.new(parent: parent, page_size: page_size, page_token: page_token, filter: filter), grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, list_services_client_stub.call_rpc_count
    end
  end

  def test_batch_enable_services
    # Create GRPC objects.
    grpc_response = ::Google::Longrunning::Operation.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    parent = "hello world"
    service_ids = ["hello world"]

    batch_enable_services_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :batch_enable_services, name
      assert_kind_of ::Google::Api::ServiceUsage::V1beta1::BatchEnableServicesRequest, request
      assert_equal "hello world", request["parent"]
      assert_equal ["hello world"], request["service_ids"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, batch_enable_services_client_stub do
      # Create client
      client = ::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.batch_enable_services({ parent: parent, service_ids: service_ids }) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.batch_enable_services parent: parent, service_ids: service_ids do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.batch_enable_services ::Google::Api::ServiceUsage::V1beta1::BatchEnableServicesRequest.new(parent: parent, service_ids: service_ids) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.batch_enable_services({ parent: parent, service_ids: service_ids }, grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.batch_enable_services(::Google::Api::ServiceUsage::V1beta1::BatchEnableServicesRequest.new(parent: parent, service_ids: service_ids), grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, batch_enable_services_client_stub.call_rpc_count
    end
  end

  def test_list_consumer_quota_metrics
    # Create GRPC objects.
    grpc_response = ::Google::Api::ServiceUsage::V1beta1::ListConsumerQuotaMetricsResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    parent = "hello world"
    page_size = 42
    page_token = "hello world"
    view = :QUOTA_VIEW_UNSPECIFIED

    list_consumer_quota_metrics_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :list_consumer_quota_metrics, name
      assert_kind_of ::Google::Api::ServiceUsage::V1beta1::ListConsumerQuotaMetricsRequest, request
      assert_equal "hello world", request["parent"]
      assert_equal 42, request["page_size"]
      assert_equal "hello world", request["page_token"]
      assert_equal :QUOTA_VIEW_UNSPECIFIED, request["view"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, list_consumer_quota_metrics_client_stub do
      # Create client
      client = ::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.list_consumer_quota_metrics({ parent: parent, page_size: page_size, page_token: page_token, view: view }) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.list_consumer_quota_metrics parent: parent, page_size: page_size, page_token: page_token, view: view do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.list_consumer_quota_metrics ::Google::Api::ServiceUsage::V1beta1::ListConsumerQuotaMetricsRequest.new(parent: parent, page_size: page_size, page_token: page_token, view: view) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.list_consumer_quota_metrics({ parent: parent, page_size: page_size, page_token: page_token, view: view }, grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.list_consumer_quota_metrics(::Google::Api::ServiceUsage::V1beta1::ListConsumerQuotaMetricsRequest.new(parent: parent, page_size: page_size, page_token: page_token, view: view), grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, list_consumer_quota_metrics_client_stub.call_rpc_count
    end
  end

  def test_get_consumer_quota_metric
    # Create GRPC objects.
    grpc_response = ::Google::Api::ServiceUsage::V1beta1::ConsumerQuotaMetric.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    view = :QUOTA_VIEW_UNSPECIFIED

    get_consumer_quota_metric_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :get_consumer_quota_metric, name
      assert_kind_of ::Google::Api::ServiceUsage::V1beta1::GetConsumerQuotaMetricRequest, request
      assert_equal "hello world", request["name"]
      assert_equal :QUOTA_VIEW_UNSPECIFIED, request["view"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, get_consumer_quota_metric_client_stub do
      # Create client
      client = ::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.get_consumer_quota_metric({ name: name, view: view }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.get_consumer_quota_metric name: name, view: view do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.get_consumer_quota_metric ::Google::Api::ServiceUsage::V1beta1::GetConsumerQuotaMetricRequest.new(name: name, view: view) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.get_consumer_quota_metric({ name: name, view: view }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.get_consumer_quota_metric(::Google::Api::ServiceUsage::V1beta1::GetConsumerQuotaMetricRequest.new(name: name, view: view), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, get_consumer_quota_metric_client_stub.call_rpc_count
    end
  end

  def test_get_consumer_quota_limit
    # Create GRPC objects.
    grpc_response = ::Google::Api::ServiceUsage::V1beta1::ConsumerQuotaLimit.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    view = :QUOTA_VIEW_UNSPECIFIED

    get_consumer_quota_limit_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :get_consumer_quota_limit, name
      assert_kind_of ::Google::Api::ServiceUsage::V1beta1::GetConsumerQuotaLimitRequest, request
      assert_equal "hello world", request["name"]
      assert_equal :QUOTA_VIEW_UNSPECIFIED, request["view"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, get_consumer_quota_limit_client_stub do
      # Create client
      client = ::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.get_consumer_quota_limit({ name: name, view: view }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.get_consumer_quota_limit name: name, view: view do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.get_consumer_quota_limit ::Google::Api::ServiceUsage::V1beta1::GetConsumerQuotaLimitRequest.new(name: name, view: view) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.get_consumer_quota_limit({ name: name, view: view }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.get_consumer_quota_limit(::Google::Api::ServiceUsage::V1beta1::GetConsumerQuotaLimitRequest.new(name: name, view: view), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, get_consumer_quota_limit_client_stub.call_rpc_count
    end
  end

  def test_create_admin_override
    # Create GRPC objects.
    grpc_response = ::Google::Longrunning::Operation.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    parent = "hello world"
    override = {}
    force = true
    force_only = [:QUOTA_SAFETY_CHECK_UNSPECIFIED]

    create_admin_override_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :create_admin_override, name
      assert_kind_of ::Google::Api::ServiceUsage::V1beta1::CreateAdminOverrideRequest, request
      assert_equal "hello world", request["parent"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Api::ServiceUsage::V1beta1::QuotaOverride), request["override"]
      assert_equal true, request["force"]
      assert_equal [:QUOTA_SAFETY_CHECK_UNSPECIFIED], request["force_only"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, create_admin_override_client_stub do
      # Create client
      client = ::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.create_admin_override({ parent: parent, override: override, force: force, force_only: force_only }) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.create_admin_override parent: parent, override: override, force: force, force_only: force_only do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.create_admin_override ::Google::Api::ServiceUsage::V1beta1::CreateAdminOverrideRequest.new(parent: parent, override: override, force: force, force_only: force_only) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.create_admin_override({ parent: parent, override: override, force: force, force_only: force_only }, grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.create_admin_override(::Google::Api::ServiceUsage::V1beta1::CreateAdminOverrideRequest.new(parent: parent, override: override, force: force, force_only: force_only), grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, create_admin_override_client_stub.call_rpc_count
    end
  end

  def test_update_admin_override
    # Create GRPC objects.
    grpc_response = ::Google::Longrunning::Operation.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    override = {}
    force = true
    update_mask = {}
    force_only = [:QUOTA_SAFETY_CHECK_UNSPECIFIED]

    update_admin_override_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :update_admin_override, name
      assert_kind_of ::Google::Api::ServiceUsage::V1beta1::UpdateAdminOverrideRequest, request
      assert_equal "hello world", request["name"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Api::ServiceUsage::V1beta1::QuotaOverride), request["override"]
      assert_equal true, request["force"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::FieldMask), request["update_mask"]
      assert_equal [:QUOTA_SAFETY_CHECK_UNSPECIFIED], request["force_only"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, update_admin_override_client_stub do
      # Create client
      client = ::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.update_admin_override({ name: name, override: override, force: force, update_mask: update_mask, force_only: force_only }) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.update_admin_override name: name, override: override, force: force, update_mask: update_mask, force_only: force_only do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.update_admin_override ::Google::Api::ServiceUsage::V1beta1::UpdateAdminOverrideRequest.new(name: name, override: override, force: force, update_mask: update_mask, force_only: force_only) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.update_admin_override({ name: name, override: override, force: force, update_mask: update_mask, force_only: force_only }, grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.update_admin_override(::Google::Api::ServiceUsage::V1beta1::UpdateAdminOverrideRequest.new(name: name, override: override, force: force, update_mask: update_mask, force_only: force_only), grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, update_admin_override_client_stub.call_rpc_count
    end
  end

  def test_delete_admin_override
    # Create GRPC objects.
    grpc_response = ::Google::Longrunning::Operation.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    force = true
    force_only = [:QUOTA_SAFETY_CHECK_UNSPECIFIED]

    delete_admin_override_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :delete_admin_override, name
      assert_kind_of ::Google::Api::ServiceUsage::V1beta1::DeleteAdminOverrideRequest, request
      assert_equal "hello world", request["name"]
      assert_equal true, request["force"]
      assert_equal [:QUOTA_SAFETY_CHECK_UNSPECIFIED], request["force_only"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, delete_admin_override_client_stub do
      # Create client
      client = ::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.delete_admin_override({ name: name, force: force, force_only: force_only }) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.delete_admin_override name: name, force: force, force_only: force_only do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.delete_admin_override ::Google::Api::ServiceUsage::V1beta1::DeleteAdminOverrideRequest.new(name: name, force: force, force_only: force_only) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.delete_admin_override({ name: name, force: force, force_only: force_only }, grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.delete_admin_override(::Google::Api::ServiceUsage::V1beta1::DeleteAdminOverrideRequest.new(name: name, force: force, force_only: force_only), grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, delete_admin_override_client_stub.call_rpc_count
    end
  end

  def test_list_admin_overrides
    # Create GRPC objects.
    grpc_response = ::Google::Api::ServiceUsage::V1beta1::ListAdminOverridesResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    parent = "hello world"
    page_size = 42
    page_token = "hello world"

    list_admin_overrides_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :list_admin_overrides, name
      assert_kind_of ::Google::Api::ServiceUsage::V1beta1::ListAdminOverridesRequest, request
      assert_equal "hello world", request["parent"]
      assert_equal 42, request["page_size"]
      assert_equal "hello world", request["page_token"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, list_admin_overrides_client_stub do
      # Create client
      client = ::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.list_admin_overrides({ parent: parent, page_size: page_size, page_token: page_token }) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.list_admin_overrides parent: parent, page_size: page_size, page_token: page_token do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.list_admin_overrides ::Google::Api::ServiceUsage::V1beta1::ListAdminOverridesRequest.new(parent: parent, page_size: page_size, page_token: page_token) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.list_admin_overrides({ parent: parent, page_size: page_size, page_token: page_token }, grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.list_admin_overrides(::Google::Api::ServiceUsage::V1beta1::ListAdminOverridesRequest.new(parent: parent, page_size: page_size, page_token: page_token), grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, list_admin_overrides_client_stub.call_rpc_count
    end
  end

  def test_import_admin_overrides
    # Create GRPC objects.
    grpc_response = ::Google::Longrunning::Operation.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    parent = "hello world"
    inline_source = {}
    force = true
    force_only = [:QUOTA_SAFETY_CHECK_UNSPECIFIED]

    import_admin_overrides_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :import_admin_overrides, name
      assert_kind_of ::Google::Api::ServiceUsage::V1beta1::ImportAdminOverridesRequest, request
      assert_equal "hello world", request["parent"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Api::ServiceUsage::V1beta1::OverrideInlineSource), request["inline_source"]
      assert_equal :inline_source, request.source
      assert_equal true, request["force"]
      assert_equal [:QUOTA_SAFETY_CHECK_UNSPECIFIED], request["force_only"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, import_admin_overrides_client_stub do
      # Create client
      client = ::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.import_admin_overrides({ parent: parent, inline_source: inline_source, force: force, force_only: force_only }) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.import_admin_overrides parent: parent, inline_source: inline_source, force: force, force_only: force_only do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.import_admin_overrides ::Google::Api::ServiceUsage::V1beta1::ImportAdminOverridesRequest.new(parent: parent, inline_source: inline_source, force: force, force_only: force_only) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.import_admin_overrides({ parent: parent, inline_source: inline_source, force: force, force_only: force_only }, grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.import_admin_overrides(::Google::Api::ServiceUsage::V1beta1::ImportAdminOverridesRequest.new(parent: parent, inline_source: inline_source, force: force, force_only: force_only), grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, import_admin_overrides_client_stub.call_rpc_count
    end
  end

  def test_create_consumer_override
    # Create GRPC objects.
    grpc_response = ::Google::Longrunning::Operation.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    parent = "hello world"
    override = {}
    force = true
    force_only = [:QUOTA_SAFETY_CHECK_UNSPECIFIED]

    create_consumer_override_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :create_consumer_override, name
      assert_kind_of ::Google::Api::ServiceUsage::V1beta1::CreateConsumerOverrideRequest, request
      assert_equal "hello world", request["parent"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Api::ServiceUsage::V1beta1::QuotaOverride), request["override"]
      assert_equal true, request["force"]
      assert_equal [:QUOTA_SAFETY_CHECK_UNSPECIFIED], request["force_only"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, create_consumer_override_client_stub do
      # Create client
      client = ::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.create_consumer_override({ parent: parent, override: override, force: force, force_only: force_only }) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.create_consumer_override parent: parent, override: override, force: force, force_only: force_only do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.create_consumer_override ::Google::Api::ServiceUsage::V1beta1::CreateConsumerOverrideRequest.new(parent: parent, override: override, force: force, force_only: force_only) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.create_consumer_override({ parent: parent, override: override, force: force, force_only: force_only }, grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.create_consumer_override(::Google::Api::ServiceUsage::V1beta1::CreateConsumerOverrideRequest.new(parent: parent, override: override, force: force, force_only: force_only), grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, create_consumer_override_client_stub.call_rpc_count
    end
  end

  def test_update_consumer_override
    # Create GRPC objects.
    grpc_response = ::Google::Longrunning::Operation.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    override = {}
    force = true
    update_mask = {}
    force_only = [:QUOTA_SAFETY_CHECK_UNSPECIFIED]

    update_consumer_override_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :update_consumer_override, name
      assert_kind_of ::Google::Api::ServiceUsage::V1beta1::UpdateConsumerOverrideRequest, request
      assert_equal "hello world", request["name"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Api::ServiceUsage::V1beta1::QuotaOverride), request["override"]
      assert_equal true, request["force"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::FieldMask), request["update_mask"]
      assert_equal [:QUOTA_SAFETY_CHECK_UNSPECIFIED], request["force_only"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, update_consumer_override_client_stub do
      # Create client
      client = ::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.update_consumer_override({ name: name, override: override, force: force, update_mask: update_mask, force_only: force_only }) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.update_consumer_override name: name, override: override, force: force, update_mask: update_mask, force_only: force_only do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.update_consumer_override ::Google::Api::ServiceUsage::V1beta1::UpdateConsumerOverrideRequest.new(name: name, override: override, force: force, update_mask: update_mask, force_only: force_only) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.update_consumer_override({ name: name, override: override, force: force, update_mask: update_mask, force_only: force_only }, grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.update_consumer_override(::Google::Api::ServiceUsage::V1beta1::UpdateConsumerOverrideRequest.new(name: name, override: override, force: force, update_mask: update_mask, force_only: force_only), grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, update_consumer_override_client_stub.call_rpc_count
    end
  end

  def test_delete_consumer_override
    # Create GRPC objects.
    grpc_response = ::Google::Longrunning::Operation.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    force = true
    force_only = [:QUOTA_SAFETY_CHECK_UNSPECIFIED]

    delete_consumer_override_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :delete_consumer_override, name
      assert_kind_of ::Google::Api::ServiceUsage::V1beta1::DeleteConsumerOverrideRequest, request
      assert_equal "hello world", request["name"]
      assert_equal true, request["force"]
      assert_equal [:QUOTA_SAFETY_CHECK_UNSPECIFIED], request["force_only"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, delete_consumer_override_client_stub do
      # Create client
      client = ::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.delete_consumer_override({ name: name, force: force, force_only: force_only }) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.delete_consumer_override name: name, force: force, force_only: force_only do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.delete_consumer_override ::Google::Api::ServiceUsage::V1beta1::DeleteConsumerOverrideRequest.new(name: name, force: force, force_only: force_only) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.delete_consumer_override({ name: name, force: force, force_only: force_only }, grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.delete_consumer_override(::Google::Api::ServiceUsage::V1beta1::DeleteConsumerOverrideRequest.new(name: name, force: force, force_only: force_only), grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, delete_consumer_override_client_stub.call_rpc_count
    end
  end

  def test_list_consumer_overrides
    # Create GRPC objects.
    grpc_response = ::Google::Api::ServiceUsage::V1beta1::ListConsumerOverridesResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    parent = "hello world"
    page_size = 42
    page_token = "hello world"

    list_consumer_overrides_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :list_consumer_overrides, name
      assert_kind_of ::Google::Api::ServiceUsage::V1beta1::ListConsumerOverridesRequest, request
      assert_equal "hello world", request["parent"]
      assert_equal 42, request["page_size"]
      assert_equal "hello world", request["page_token"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, list_consumer_overrides_client_stub do
      # Create client
      client = ::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.list_consumer_overrides({ parent: parent, page_size: page_size, page_token: page_token }) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.list_consumer_overrides parent: parent, page_size: page_size, page_token: page_token do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.list_consumer_overrides ::Google::Api::ServiceUsage::V1beta1::ListConsumerOverridesRequest.new(parent: parent, page_size: page_size, page_token: page_token) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.list_consumer_overrides({ parent: parent, page_size: page_size, page_token: page_token }, grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.list_consumer_overrides(::Google::Api::ServiceUsage::V1beta1::ListConsumerOverridesRequest.new(parent: parent, page_size: page_size, page_token: page_token), grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, list_consumer_overrides_client_stub.call_rpc_count
    end
  end

  def test_import_consumer_overrides
    # Create GRPC objects.
    grpc_response = ::Google::Longrunning::Operation.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    parent = "hello world"
    inline_source = {}
    force = true
    force_only = [:QUOTA_SAFETY_CHECK_UNSPECIFIED]

    import_consumer_overrides_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :import_consumer_overrides, name
      assert_kind_of ::Google::Api::ServiceUsage::V1beta1::ImportConsumerOverridesRequest, request
      assert_equal "hello world", request["parent"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Api::ServiceUsage::V1beta1::OverrideInlineSource), request["inline_source"]
      assert_equal :inline_source, request.source
      assert_equal true, request["force"]
      assert_equal [:QUOTA_SAFETY_CHECK_UNSPECIFIED], request["force_only"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, import_consumer_overrides_client_stub do
      # Create client
      client = ::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.import_consumer_overrides({ parent: parent, inline_source: inline_source, force: force, force_only: force_only }) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.import_consumer_overrides parent: parent, inline_source: inline_source, force: force, force_only: force_only do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.import_consumer_overrides ::Google::Api::ServiceUsage::V1beta1::ImportConsumerOverridesRequest.new(parent: parent, inline_source: inline_source, force: force, force_only: force_only) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.import_consumer_overrides({ parent: parent, inline_source: inline_source, force: force, force_only: force_only }, grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.import_consumer_overrides(::Google::Api::ServiceUsage::V1beta1::ImportConsumerOverridesRequest.new(parent: parent, inline_source: inline_source, force: force, force_only: force_only), grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, import_consumer_overrides_client_stub.call_rpc_count
    end
  end

  def test_generate_service_identity
    # Create GRPC objects.
    grpc_response = ::Google::Longrunning::Operation.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    parent = "hello world"

    generate_service_identity_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :generate_service_identity, name
      assert_kind_of ::Google::Api::ServiceUsage::V1beta1::GenerateServiceIdentityRequest, request
      assert_equal "hello world", request["parent"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, generate_service_identity_client_stub do
      # Create client
      client = ::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.generate_service_identity({ parent: parent }) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.generate_service_identity parent: parent do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.generate_service_identity ::Google::Api::ServiceUsage::V1beta1::GenerateServiceIdentityRequest.new(parent: parent) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.generate_service_identity({ parent: parent }, grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.generate_service_identity(::Google::Api::ServiceUsage::V1beta1::GenerateServiceIdentityRequest.new(parent: parent), grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, generate_service_identity_client_stub.call_rpc_count
    end
  end

  def test_configure
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure

    client = block_config = config = nil
    Gapic::ServiceStub.stub :new, nil do
      client = ::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Client.new do |config|
        config.credentials = grpc_channel
      end
    end

    config = client.configure do |c|
      block_config = c
    end

    assert_same block_config, config
    assert_kind_of ::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Client::Configuration, config
  end

  def test_operations_client
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure

    client = nil
    Gapic::ServiceStub.stub :new, nil do
      client = ::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Client.new do |config|
        config.credentials = grpc_channel
      end
    end

    assert_kind_of ::Google::Api::ServiceUsage::V1beta1::ServiceUsage::Operations, client.operations_client
  end
end
