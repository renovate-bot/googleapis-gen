// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/monitoring/dashboard/v1/xychart.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Monitoring.Dashboard.V1 {

  /// <summary>Holder for reflection information generated from google/monitoring/dashboard/v1/xychart.proto</summary>
  public static partial class XychartReflection {

    #region Descriptor
    /// <summary>File descriptor for google/monitoring/dashboard/v1/xychart.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XychartReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cixnb29nbGUvbW9uaXRvcmluZy9kYXNoYm9hcmQvdjEveHljaGFydC5wcm90",
            "bxIeZ29vZ2xlLm1vbml0b3JpbmcuZGFzaGJvYXJkLnYxGh9nb29nbGUvYXBp",
            "L2ZpZWxkX2JlaGF2aW9yLnByb3RvGixnb29nbGUvbW9uaXRvcmluZy9kYXNo",
            "Ym9hcmQvdjEvbWV0cmljcy5wcm90bxoeZ29vZ2xlL3Byb3RvYnVmL2R1cmF0",
            "aW9uLnByb3RvIv0GCgdYeUNoYXJ0EkcKCWRhdGFfc2V0cxgBIAMoCzIvLmdv",
            "b2dsZS5tb25pdG9yaW5nLmRhc2hib2FyZC52MS5YeUNoYXJ0LkRhdGFTZXRC",
            "A+BBAhI1ChJ0aW1lc2hpZnRfZHVyYXRpb24YBCABKAsyGS5nb29nbGUucHJv",
            "dG9idWYuRHVyYXRpb24SPQoKdGhyZXNob2xkcxgFIAMoCzIpLmdvb2dsZS5t",
            "b25pdG9yaW5nLmRhc2hib2FyZC52MS5UaHJlc2hvbGQSPAoGeF9heGlzGAYg",
            "ASgLMiwuZ29vZ2xlLm1vbml0b3JpbmcuZGFzaGJvYXJkLnYxLlh5Q2hhcnQu",
            "QXhpcxI8CgZ5X2F4aXMYByABKAsyLC5nb29nbGUubW9uaXRvcmluZy5kYXNo",
            "Ym9hcmQudjEuWHlDaGFydC5BeGlzEkMKDWNoYXJ0X29wdGlvbnMYCCABKAsy",
            "LC5nb29nbGUubW9uaXRvcmluZy5kYXNoYm9hcmQudjEuQ2hhcnRPcHRpb25z",
            "Gt8CCgdEYXRhU2V0Ek8KEXRpbWVfc2VyaWVzX3F1ZXJ5GAEgASgLMi8uZ29v",
            "Z2xlLm1vbml0b3JpbmcuZGFzaGJvYXJkLnYxLlRpbWVTZXJpZXNRdWVyeUID",
            "4EECEksKCXBsb3RfdHlwZRgCIAEoDjI4Lmdvb2dsZS5tb25pdG9yaW5nLmRh",
            "c2hib2FyZC52MS5YeUNoYXJ0LkRhdGFTZXQuUGxvdFR5cGUSFwoPbGVnZW5k",
            "X3RlbXBsYXRlGAMgASgJEjwKFG1pbl9hbGlnbm1lbnRfcGVyaW9kGAQgASgL",
            "MhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uQgPgQQEiXwoIUGxvdFR5cGUS",
            "GQoVUExPVF9UWVBFX1VOU1BFQ0lGSUVEEAASCAoETElORRABEhAKDFNUQUNL",
            "RURfQVJFQRACEg8KC1NUQUNLRURfQkFSEAMSCwoHSEVBVE1BUBAEGo8BCgRB",
            "eGlzEg0KBWxhYmVsGAEgASgJEkEKBXNjYWxlGAIgASgOMjIuZ29vZ2xlLm1v",
            "bml0b3JpbmcuZGFzaGJvYXJkLnYxLlh5Q2hhcnQuQXhpcy5TY2FsZSI1CgVT",
            "Y2FsZRIVChFTQ0FMRV9VTlNQRUNJRklFRBAAEgoKBkxJTkVBUhABEgkKBUxP",
            "RzEwEAIijgEKDENoYXJ0T3B0aW9ucxI/CgRtb2RlGAEgASgOMjEuZ29vZ2xl",
            "Lm1vbml0b3JpbmcuZGFzaGJvYXJkLnYxLkNoYXJ0T3B0aW9ucy5Nb2RlIj0K",
            "BE1vZGUSFAoQTU9ERV9VTlNQRUNJRklFRBAAEgkKBUNPTE9SEAESCQoFWF9S",
            "QVkQAhIJCgVTVEFUUxADQvYBCiJjb20uZ29vZ2xlLm1vbml0b3JpbmcuZGFz",
            "aGJvYXJkLnYxQgxYeUNoYXJ0UHJvdG9QAVpHZ29vZ2xlLmdvbGFuZy5vcmcv",
            "Z2VucHJvdG8vZ29vZ2xlYXBpcy9tb25pdG9yaW5nL2Rhc2hib2FyZC92MTtk",
            "YXNoYm9hcmSqAiRHb29nbGUuQ2xvdWQuTW9uaXRvcmluZy5EYXNoYm9hcmQu",
            "VjHKAiRHb29nbGVcQ2xvdWRcTW9uaXRvcmluZ1xEYXNoYm9hcmRcVjHqAihH",
            "b29nbGU6OkNsb3VkOjpNb25pdG9yaW5nOjpEYXNoYm9hcmQ6OlYxYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Cloud.Monitoring.Dashboard.V1.MetricsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Monitoring.Dashboard.V1.XyChart), global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Parser, new[]{ "DataSets", "TimeshiftDuration", "Thresholds", "XAxis", "YAxis", "ChartOptions" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.DataSet), global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.DataSet.Parser, new[]{ "TimeSeriesQuery", "PlotType", "LegendTemplate", "MinAlignmentPeriod" }, null, new[]{ typeof(global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.DataSet.Types.PlotType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.Axis), global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.Axis.Parser, new[]{ "Label", "Scale" }, null, new[]{ typeof(global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.Axis.Types.Scale) }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Monitoring.Dashboard.V1.ChartOptions), global::Google.Cloud.Monitoring.Dashboard.V1.ChartOptions.Parser, new[]{ "Mode" }, null, new[]{ typeof(global::Google.Cloud.Monitoring.Dashboard.V1.ChartOptions.Types.Mode) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A chart that displays data on a 2D (X and Y axes) plane.
  /// </summary>
  public sealed partial class XyChart : pb::IMessage<XyChart>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<XyChart> _parser = new pb::MessageParser<XyChart>(() => new XyChart());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<XyChart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Monitoring.Dashboard.V1.XychartReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XyChart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XyChart(XyChart other) : this() {
      dataSets_ = other.dataSets_.Clone();
      timeshiftDuration_ = other.timeshiftDuration_ != null ? other.timeshiftDuration_.Clone() : null;
      thresholds_ = other.thresholds_.Clone();
      xAxis_ = other.xAxis_ != null ? other.xAxis_.Clone() : null;
      yAxis_ = other.yAxis_ != null ? other.yAxis_.Clone() : null;
      chartOptions_ = other.chartOptions_ != null ? other.chartOptions_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XyChart Clone() {
      return new XyChart(this);
    }

    /// <summary>Field number for the "data_sets" field.</summary>
    public const int DataSetsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.DataSet> _repeated_dataSets_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.DataSet.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.DataSet> dataSets_ = new pbc::RepeatedField<global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.DataSet>();
    /// <summary>
    /// Required. The data displayed in this chart.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.DataSet> DataSets {
      get { return dataSets_; }
    }

    /// <summary>Field number for the "timeshift_duration" field.</summary>
    public const int TimeshiftDurationFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Duration timeshiftDuration_;
    /// <summary>
    /// The duration used to display a comparison chart. A comparison chart
    /// simultaneously shows values from two similar-length time periods
    /// (e.g., week-over-week metrics).
    /// The duration must be positive, and it can only be applied to charts with
    /// data sets of LINE plot type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration TimeshiftDuration {
      get { return timeshiftDuration_; }
      set {
        timeshiftDuration_ = value;
      }
    }

    /// <summary>Field number for the "thresholds" field.</summary>
    public const int ThresholdsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Google.Cloud.Monitoring.Dashboard.V1.Threshold> _repeated_thresholds_codec
        = pb::FieldCodec.ForMessage(42, global::Google.Cloud.Monitoring.Dashboard.V1.Threshold.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Monitoring.Dashboard.V1.Threshold> thresholds_ = new pbc::RepeatedField<global::Google.Cloud.Monitoring.Dashboard.V1.Threshold>();
    /// <summary>
    /// Threshold lines drawn horizontally across the chart.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Monitoring.Dashboard.V1.Threshold> Thresholds {
      get { return thresholds_; }
    }

    /// <summary>Field number for the "x_axis" field.</summary>
    public const int XAxisFieldNumber = 6;
    private global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.Axis xAxis_;
    /// <summary>
    /// The properties applied to the X axis.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.Axis XAxis {
      get { return xAxis_; }
      set {
        xAxis_ = value;
      }
    }

    /// <summary>Field number for the "y_axis" field.</summary>
    public const int YAxisFieldNumber = 7;
    private global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.Axis yAxis_;
    /// <summary>
    /// The properties applied to the Y axis.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.Axis YAxis {
      get { return yAxis_; }
      set {
        yAxis_ = value;
      }
    }

    /// <summary>Field number for the "chart_options" field.</summary>
    public const int ChartOptionsFieldNumber = 8;
    private global::Google.Cloud.Monitoring.Dashboard.V1.ChartOptions chartOptions_;
    /// <summary>
    /// Display options for the chart.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Monitoring.Dashboard.V1.ChartOptions ChartOptions {
      get { return chartOptions_; }
      set {
        chartOptions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as XyChart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(XyChart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dataSets_.Equals(other.dataSets_)) return false;
      if (!object.Equals(TimeshiftDuration, other.TimeshiftDuration)) return false;
      if(!thresholds_.Equals(other.thresholds_)) return false;
      if (!object.Equals(XAxis, other.XAxis)) return false;
      if (!object.Equals(YAxis, other.YAxis)) return false;
      if (!object.Equals(ChartOptions, other.ChartOptions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= dataSets_.GetHashCode();
      if (timeshiftDuration_ != null) hash ^= TimeshiftDuration.GetHashCode();
      hash ^= thresholds_.GetHashCode();
      if (xAxis_ != null) hash ^= XAxis.GetHashCode();
      if (yAxis_ != null) hash ^= YAxis.GetHashCode();
      if (chartOptions_ != null) hash ^= ChartOptions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      dataSets_.WriteTo(output, _repeated_dataSets_codec);
      if (timeshiftDuration_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TimeshiftDuration);
      }
      thresholds_.WriteTo(output, _repeated_thresholds_codec);
      if (xAxis_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(XAxis);
      }
      if (yAxis_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(YAxis);
      }
      if (chartOptions_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ChartOptions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      dataSets_.WriteTo(ref output, _repeated_dataSets_codec);
      if (timeshiftDuration_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TimeshiftDuration);
      }
      thresholds_.WriteTo(ref output, _repeated_thresholds_codec);
      if (xAxis_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(XAxis);
      }
      if (yAxis_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(YAxis);
      }
      if (chartOptions_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ChartOptions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dataSets_.CalculateSize(_repeated_dataSets_codec);
      if (timeshiftDuration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeshiftDuration);
      }
      size += thresholds_.CalculateSize(_repeated_thresholds_codec);
      if (xAxis_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(XAxis);
      }
      if (yAxis_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(YAxis);
      }
      if (chartOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChartOptions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(XyChart other) {
      if (other == null) {
        return;
      }
      dataSets_.Add(other.dataSets_);
      if (other.timeshiftDuration_ != null) {
        if (timeshiftDuration_ == null) {
          TimeshiftDuration = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        TimeshiftDuration.MergeFrom(other.TimeshiftDuration);
      }
      thresholds_.Add(other.thresholds_);
      if (other.xAxis_ != null) {
        if (xAxis_ == null) {
          XAxis = new global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.Axis();
        }
        XAxis.MergeFrom(other.XAxis);
      }
      if (other.yAxis_ != null) {
        if (yAxis_ == null) {
          YAxis = new global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.Axis();
        }
        YAxis.MergeFrom(other.YAxis);
      }
      if (other.chartOptions_ != null) {
        if (chartOptions_ == null) {
          ChartOptions = new global::Google.Cloud.Monitoring.Dashboard.V1.ChartOptions();
        }
        ChartOptions.MergeFrom(other.ChartOptions);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dataSets_.AddEntriesFrom(input, _repeated_dataSets_codec);
            break;
          }
          case 34: {
            if (timeshiftDuration_ == null) {
              TimeshiftDuration = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(TimeshiftDuration);
            break;
          }
          case 42: {
            thresholds_.AddEntriesFrom(input, _repeated_thresholds_codec);
            break;
          }
          case 50: {
            if (xAxis_ == null) {
              XAxis = new global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.Axis();
            }
            input.ReadMessage(XAxis);
            break;
          }
          case 58: {
            if (yAxis_ == null) {
              YAxis = new global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.Axis();
            }
            input.ReadMessage(YAxis);
            break;
          }
          case 66: {
            if (chartOptions_ == null) {
              ChartOptions = new global::Google.Cloud.Monitoring.Dashboard.V1.ChartOptions();
            }
            input.ReadMessage(ChartOptions);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            dataSets_.AddEntriesFrom(ref input, _repeated_dataSets_codec);
            break;
          }
          case 34: {
            if (timeshiftDuration_ == null) {
              TimeshiftDuration = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(TimeshiftDuration);
            break;
          }
          case 42: {
            thresholds_.AddEntriesFrom(ref input, _repeated_thresholds_codec);
            break;
          }
          case 50: {
            if (xAxis_ == null) {
              XAxis = new global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.Axis();
            }
            input.ReadMessage(XAxis);
            break;
          }
          case 58: {
            if (yAxis_ == null) {
              YAxis = new global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.Axis();
            }
            input.ReadMessage(YAxis);
            break;
          }
          case 66: {
            if (chartOptions_ == null) {
              ChartOptions = new global::Google.Cloud.Monitoring.Dashboard.V1.ChartOptions();
            }
            input.ReadMessage(ChartOptions);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the XyChart message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Groups a time series query definition with charting options.
      /// </summary>
      public sealed partial class DataSet : pb::IMessage<DataSet>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<DataSet> _parser = new pb::MessageParser<DataSet>(() => new DataSet());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DataSet> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DataSet() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DataSet(DataSet other) : this() {
          timeSeriesQuery_ = other.timeSeriesQuery_ != null ? other.timeSeriesQuery_.Clone() : null;
          plotType_ = other.plotType_;
          legendTemplate_ = other.legendTemplate_;
          minAlignmentPeriod_ = other.minAlignmentPeriod_ != null ? other.minAlignmentPeriod_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DataSet Clone() {
          return new DataSet(this);
        }

        /// <summary>Field number for the "time_series_query" field.</summary>
        public const int TimeSeriesQueryFieldNumber = 1;
        private global::Google.Cloud.Monitoring.Dashboard.V1.TimeSeriesQuery timeSeriesQuery_;
        /// <summary>
        /// Required. Fields for querying time series data from the
        /// Stackdriver metrics API.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Monitoring.Dashboard.V1.TimeSeriesQuery TimeSeriesQuery {
          get { return timeSeriesQuery_; }
          set {
            timeSeriesQuery_ = value;
          }
        }

        /// <summary>Field number for the "plot_type" field.</summary>
        public const int PlotTypeFieldNumber = 2;
        private global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.DataSet.Types.PlotType plotType_ = global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.DataSet.Types.PlotType.Unspecified;
        /// <summary>
        /// How this data should be plotted on the chart.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.DataSet.Types.PlotType PlotType {
          get { return plotType_; }
          set {
            plotType_ = value;
          }
        }

        /// <summary>Field number for the "legend_template" field.</summary>
        public const int LegendTemplateFieldNumber = 3;
        private string legendTemplate_ = "";
        /// <summary>
        /// A template string for naming `TimeSeries` in the resulting data set.
        /// This should be a string with interpolations of the form `${label_name}`,
        /// which will resolve to the label's value.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LegendTemplate {
          get { return legendTemplate_; }
          set {
            legendTemplate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "min_alignment_period" field.</summary>
        public const int MinAlignmentPeriodFieldNumber = 4;
        private global::Google.Protobuf.WellKnownTypes.Duration minAlignmentPeriod_;
        /// <summary>
        /// Optional. The lower bound on data point frequency for this data set, implemented by
        /// specifying the minimum alignment period to use in a time series query
        /// For example, if the data is published once every 10 minutes, the
        /// `min_alignment_period` should be at least 10 minutes. It would not
        /// make sense to fetch and align data at one minute intervals.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Duration MinAlignmentPeriod {
          get { return minAlignmentPeriod_; }
          set {
            minAlignmentPeriod_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DataSet);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DataSet other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(TimeSeriesQuery, other.TimeSeriesQuery)) return false;
          if (PlotType != other.PlotType) return false;
          if (LegendTemplate != other.LegendTemplate) return false;
          if (!object.Equals(MinAlignmentPeriod, other.MinAlignmentPeriod)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (timeSeriesQuery_ != null) hash ^= TimeSeriesQuery.GetHashCode();
          if (PlotType != global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.DataSet.Types.PlotType.Unspecified) hash ^= PlotType.GetHashCode();
          if (LegendTemplate.Length != 0) hash ^= LegendTemplate.GetHashCode();
          if (minAlignmentPeriod_ != null) hash ^= MinAlignmentPeriod.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (timeSeriesQuery_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(TimeSeriesQuery);
          }
          if (PlotType != global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.DataSet.Types.PlotType.Unspecified) {
            output.WriteRawTag(16);
            output.WriteEnum((int) PlotType);
          }
          if (LegendTemplate.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(LegendTemplate);
          }
          if (minAlignmentPeriod_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(MinAlignmentPeriod);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (timeSeriesQuery_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(TimeSeriesQuery);
          }
          if (PlotType != global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.DataSet.Types.PlotType.Unspecified) {
            output.WriteRawTag(16);
            output.WriteEnum((int) PlotType);
          }
          if (LegendTemplate.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(LegendTemplate);
          }
          if (minAlignmentPeriod_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(MinAlignmentPeriod);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (timeSeriesQuery_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeSeriesQuery);
          }
          if (PlotType != global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.DataSet.Types.PlotType.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PlotType);
          }
          if (LegendTemplate.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(LegendTemplate);
          }
          if (minAlignmentPeriod_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinAlignmentPeriod);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DataSet other) {
          if (other == null) {
            return;
          }
          if (other.timeSeriesQuery_ != null) {
            if (timeSeriesQuery_ == null) {
              TimeSeriesQuery = new global::Google.Cloud.Monitoring.Dashboard.V1.TimeSeriesQuery();
            }
            TimeSeriesQuery.MergeFrom(other.TimeSeriesQuery);
          }
          if (other.PlotType != global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.DataSet.Types.PlotType.Unspecified) {
            PlotType = other.PlotType;
          }
          if (other.LegendTemplate.Length != 0) {
            LegendTemplate = other.LegendTemplate;
          }
          if (other.minAlignmentPeriod_ != null) {
            if (minAlignmentPeriod_ == null) {
              MinAlignmentPeriod = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            MinAlignmentPeriod.MergeFrom(other.MinAlignmentPeriod);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (timeSeriesQuery_ == null) {
                  TimeSeriesQuery = new global::Google.Cloud.Monitoring.Dashboard.V1.TimeSeriesQuery();
                }
                input.ReadMessage(TimeSeriesQuery);
                break;
              }
              case 16: {
                PlotType = (global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.DataSet.Types.PlotType) input.ReadEnum();
                break;
              }
              case 26: {
                LegendTemplate = input.ReadString();
                break;
              }
              case 34: {
                if (minAlignmentPeriod_ == null) {
                  MinAlignmentPeriod = new global::Google.Protobuf.WellKnownTypes.Duration();
                }
                input.ReadMessage(MinAlignmentPeriod);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (timeSeriesQuery_ == null) {
                  TimeSeriesQuery = new global::Google.Cloud.Monitoring.Dashboard.V1.TimeSeriesQuery();
                }
                input.ReadMessage(TimeSeriesQuery);
                break;
              }
              case 16: {
                PlotType = (global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.DataSet.Types.PlotType) input.ReadEnum();
                break;
              }
              case 26: {
                LegendTemplate = input.ReadString();
                break;
              }
              case 34: {
                if (minAlignmentPeriod_ == null) {
                  MinAlignmentPeriod = new global::Google.Protobuf.WellKnownTypes.Duration();
                }
                input.ReadMessage(MinAlignmentPeriod);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the DataSet message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// The types of plotting strategies for data sets.
          /// </summary>
          public enum PlotType {
            /// <summary>
            /// Plot type is unspecified. The view will default to `LINE`.
            /// </summary>
            [pbr::OriginalName("PLOT_TYPE_UNSPECIFIED")] Unspecified = 0,
            /// <summary>
            /// The data is plotted as a set of lines (one line per series).
            /// </summary>
            [pbr::OriginalName("LINE")] Line = 1,
            /// <summary>
            /// The data is plotted as a set of filled areas (one area per series),
            /// with the areas stacked vertically (the base of each area is the top of
            /// its predecessor, and the base of the first area is the X axis). Since
            /// the areas do not overlap, each is filled with a different opaque color.
            /// </summary>
            [pbr::OriginalName("STACKED_AREA")] StackedArea = 2,
            /// <summary>
            /// The data is plotted as a set of rectangular boxes (one box per series),
            /// with the boxes stacked vertically (the base of each box is the top of
            /// its predecessor, and the base of the first box is the X axis). Since
            /// the boxes do not overlap, each is filled with a different opaque color.
            /// </summary>
            [pbr::OriginalName("STACKED_BAR")] StackedBar = 3,
            /// <summary>
            /// The data is plotted as a heatmap. The series being plotted must have a
            /// `DISTRIBUTION` value type. The value of each bucket in the distribution
            /// is displayed as a color. This type is not currently available in the
            /// Stackdriver Monitoring application.
            /// </summary>
            [pbr::OriginalName("HEATMAP")] Heatmap = 4,
          }

        }
        #endregion

      }

      /// <summary>
      /// A chart axis.
      /// </summary>
      public sealed partial class Axis : pb::IMessage<Axis>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Axis> _parser = new pb::MessageParser<Axis>(() => new Axis());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Axis> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Axis() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Axis(Axis other) : this() {
          label_ = other.label_;
          scale_ = other.scale_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Axis Clone() {
          return new Axis(this);
        }

        /// <summary>Field number for the "label" field.</summary>
        public const int LabelFieldNumber = 1;
        private string label_ = "";
        /// <summary>
        /// The label of the axis.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Label {
          get { return label_; }
          set {
            label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "scale" field.</summary>
        public const int ScaleFieldNumber = 2;
        private global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.Axis.Types.Scale scale_ = global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.Axis.Types.Scale.Unspecified;
        /// <summary>
        /// The axis scale. By default, a linear scale is used.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.Axis.Types.Scale Scale {
          get { return scale_; }
          set {
            scale_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Axis);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Axis other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Label != other.Label) return false;
          if (Scale != other.Scale) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Label.Length != 0) hash ^= Label.GetHashCode();
          if (Scale != global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.Axis.Types.Scale.Unspecified) hash ^= Scale.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Label.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Label);
          }
          if (Scale != global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.Axis.Types.Scale.Unspecified) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Scale);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Label.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Label);
          }
          if (Scale != global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.Axis.Types.Scale.Unspecified) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Scale);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Label.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
          }
          if (Scale != global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.Axis.Types.Scale.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Scale);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Axis other) {
          if (other == null) {
            return;
          }
          if (other.Label.Length != 0) {
            Label = other.Label;
          }
          if (other.Scale != global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.Axis.Types.Scale.Unspecified) {
            Scale = other.Scale;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Label = input.ReadString();
                break;
              }
              case 16: {
                Scale = (global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.Axis.Types.Scale) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Label = input.ReadString();
                break;
              }
              case 16: {
                Scale = (global::Google.Cloud.Monitoring.Dashboard.V1.XyChart.Types.Axis.Types.Scale) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Axis message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Types of scales used in axes.
          /// </summary>
          public enum Scale {
            /// <summary>
            /// Scale is unspecified. The view will default to `LINEAR`.
            /// </summary>
            [pbr::OriginalName("SCALE_UNSPECIFIED")] Unspecified = 0,
            /// <summary>
            /// Linear scale.
            /// </summary>
            [pbr::OriginalName("LINEAR")] Linear = 1,
            /// <summary>
            /// Logarithmic scale (base 10).
            /// </summary>
            [pbr::OriginalName("LOG10")] Log10 = 2,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// Options to control visual rendering of a chart.
  /// </summary>
  public sealed partial class ChartOptions : pb::IMessage<ChartOptions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChartOptions> _parser = new pb::MessageParser<ChartOptions>(() => new ChartOptions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChartOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Monitoring.Dashboard.V1.XychartReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChartOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChartOptions(ChartOptions other) : this() {
      mode_ = other.mode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChartOptions Clone() {
      return new ChartOptions(this);
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 1;
    private global::Google.Cloud.Monitoring.Dashboard.V1.ChartOptions.Types.Mode mode_ = global::Google.Cloud.Monitoring.Dashboard.V1.ChartOptions.Types.Mode.Unspecified;
    /// <summary>
    /// The chart mode.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Monitoring.Dashboard.V1.ChartOptions.Types.Mode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChartOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChartOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mode != global::Google.Cloud.Monitoring.Dashboard.V1.ChartOptions.Types.Mode.Unspecified) hash ^= Mode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Mode != global::Google.Cloud.Monitoring.Dashboard.V1.ChartOptions.Types.Mode.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Mode != global::Google.Cloud.Monitoring.Dashboard.V1.ChartOptions.Types.Mode.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mode != global::Google.Cloud.Monitoring.Dashboard.V1.ChartOptions.Types.Mode.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChartOptions other) {
      if (other == null) {
        return;
      }
      if (other.Mode != global::Google.Cloud.Monitoring.Dashboard.V1.ChartOptions.Types.Mode.Unspecified) {
        Mode = other.Mode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Mode = (global::Google.Cloud.Monitoring.Dashboard.V1.ChartOptions.Types.Mode) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Mode = (global::Google.Cloud.Monitoring.Dashboard.V1.ChartOptions.Types.Mode) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ChartOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Chart mode options.
      /// </summary>
      public enum Mode {
        /// <summary>
        /// Mode is unspecified. The view will default to `COLOR`.
        /// </summary>
        [pbr::OriginalName("MODE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// The chart distinguishes data series using different color. Line
        /// colors may get reused when there are many lines in the chart.
        /// </summary>
        [pbr::OriginalName("COLOR")] Color = 1,
        /// <summary>
        /// The chart uses the Stackdriver x-ray mode, in which each
        /// data set is plotted using the same semi-transparent color.
        /// </summary>
        [pbr::OriginalName("X_RAY")] XRay = 2,
        /// <summary>
        /// The chart displays statistics such as average, median, 95th percentile,
        /// and more.
        /// </summary>
        [pbr::OriginalName("STATS")] Stats = 3,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
