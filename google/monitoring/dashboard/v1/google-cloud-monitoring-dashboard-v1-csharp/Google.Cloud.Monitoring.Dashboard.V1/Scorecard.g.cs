// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/monitoring/dashboard/v1/scorecard.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Monitoring.Dashboard.V1 {

  /// <summary>Holder for reflection information generated from google/monitoring/dashboard/v1/scorecard.proto</summary>
  public static partial class ScorecardReflection {

    #region Descriptor
    /// <summary>File descriptor for google/monitoring/dashboard/v1/scorecard.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ScorecardReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci5nb29nbGUvbW9uaXRvcmluZy9kYXNoYm9hcmQvdjEvc2NvcmVjYXJkLnBy",
            "b3RvEh5nb29nbGUubW9uaXRvcmluZy5kYXNoYm9hcmQudjEaH2dvb2dsZS9h",
            "cGkvZmllbGRfYmVoYXZpb3IucHJvdG8aLGdvb2dsZS9tb25pdG9yaW5nL2Rh",
            "c2hib2FyZC92MS9tZXRyaWNzLnByb3RvGh5nb29nbGUvcHJvdG9idWYvZHVy",
            "YXRpb24ucHJvdG8aG2dvb2dsZS9wcm90b2J1Zi9lbXB0eS5wcm90byKbBAoJ",
            "U2NvcmVjYXJkEk8KEXRpbWVfc2VyaWVzX3F1ZXJ5GAEgASgLMi8uZ29vZ2xl",
            "Lm1vbml0b3JpbmcuZGFzaGJvYXJkLnYxLlRpbWVTZXJpZXNRdWVyeUID4EEC",
            "EkkKCmdhdWdlX3ZpZXcYBCABKAsyMy5nb29nbGUubW9uaXRvcmluZy5kYXNo",
            "Ym9hcmQudjEuU2NvcmVjYXJkLkdhdWdlVmlld0gAElQKEHNwYXJrX2NoYXJ0",
            "X3ZpZXcYBSABKAsyOC5nb29nbGUubW9uaXRvcmluZy5kYXNoYm9hcmQudjEu",
            "U2NvcmVjYXJkLlNwYXJrQ2hhcnRWaWV3SAASPQoKdGhyZXNob2xkcxgGIAMo",
            "CzIpLmdvb2dsZS5tb25pdG9yaW5nLmRhc2hib2FyZC52MS5UaHJlc2hvbGQa",
            "NQoJR2F1Z2VWaWV3EhMKC2xvd2VyX2JvdW5kGAEgASgBEhMKC3VwcGVyX2Jv",
            "dW5kGAIgASgBGpgBCg5TcGFya0NoYXJ0VmlldxJNChBzcGFya19jaGFydF90",
            "eXBlGAEgASgOMi4uZ29vZ2xlLm1vbml0b3JpbmcuZGFzaGJvYXJkLnYxLlNw",
            "YXJrQ2hhcnRUeXBlQgPgQQISNwoUbWluX2FsaWdubWVudF9wZXJpb2QYAiAB",
            "KAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb25CCwoJZGF0YV92aWV3QvgB",
            "CiJjb20uZ29vZ2xlLm1vbml0b3JpbmcuZGFzaGJvYXJkLnYxQg5TY29yZWNh",
            "cmRQcm90b1ABWkdnb29nbGUuZ29sYW5nLm9yZy9nZW5wcm90by9nb29nbGVh",
            "cGlzL21vbml0b3JpbmcvZGFzaGJvYXJkL3YxO2Rhc2hib2FyZKoCJEdvb2ds",
            "ZS5DbG91ZC5Nb25pdG9yaW5nLkRhc2hib2FyZC5WMcoCJEdvb2dsZVxDbG91",
            "ZFxNb25pdG9yaW5nXERhc2hib2FyZFxWMeoCKEdvb2dsZTo6Q2xvdWQ6Ok1v",
            "bml0b3Jpbmc6OkRhc2hib2FyZDo6VjFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Cloud.Monitoring.Dashboard.V1.MetricsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Monitoring.Dashboard.V1.Scorecard), global::Google.Cloud.Monitoring.Dashboard.V1.Scorecard.Parser, new[]{ "TimeSeriesQuery", "GaugeView", "SparkChartView", "Thresholds" }, new[]{ "DataView" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Monitoring.Dashboard.V1.Scorecard.Types.GaugeView), global::Google.Cloud.Monitoring.Dashboard.V1.Scorecard.Types.GaugeView.Parser, new[]{ "LowerBound", "UpperBound" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Monitoring.Dashboard.V1.Scorecard.Types.SparkChartView), global::Google.Cloud.Monitoring.Dashboard.V1.Scorecard.Types.SparkChartView.Parser, new[]{ "SparkChartType", "MinAlignmentPeriod" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A widget showing the latest value of a metric, and how this value relates to
  /// one or more thresholds.
  /// </summary>
  public sealed partial class Scorecard : pb::IMessage<Scorecard>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Scorecard> _parser = new pb::MessageParser<Scorecard>(() => new Scorecard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Scorecard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Monitoring.Dashboard.V1.ScorecardReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scorecard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scorecard(Scorecard other) : this() {
      timeSeriesQuery_ = other.timeSeriesQuery_ != null ? other.timeSeriesQuery_.Clone() : null;
      thresholds_ = other.thresholds_.Clone();
      switch (other.DataViewCase) {
        case DataViewOneofCase.GaugeView:
          GaugeView = other.GaugeView.Clone();
          break;
        case DataViewOneofCase.SparkChartView:
          SparkChartView = other.SparkChartView.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scorecard Clone() {
      return new Scorecard(this);
    }

    /// <summary>Field number for the "time_series_query" field.</summary>
    public const int TimeSeriesQueryFieldNumber = 1;
    private global::Google.Cloud.Monitoring.Dashboard.V1.TimeSeriesQuery timeSeriesQuery_;
    /// <summary>
    /// Required. Fields for querying time series data from the
    /// Stackdriver metrics API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Monitoring.Dashboard.V1.TimeSeriesQuery TimeSeriesQuery {
      get { return timeSeriesQuery_; }
      set {
        timeSeriesQuery_ = value;
      }
    }

    /// <summary>Field number for the "gauge_view" field.</summary>
    public const int GaugeViewFieldNumber = 4;
    /// <summary>
    /// Will cause the scorecard to show a gauge chart.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Monitoring.Dashboard.V1.Scorecard.Types.GaugeView GaugeView {
      get { return dataViewCase_ == DataViewOneofCase.GaugeView ? (global::Google.Cloud.Monitoring.Dashboard.V1.Scorecard.Types.GaugeView) dataView_ : null; }
      set {
        dataView_ = value;
        dataViewCase_ = value == null ? DataViewOneofCase.None : DataViewOneofCase.GaugeView;
      }
    }

    /// <summary>Field number for the "spark_chart_view" field.</summary>
    public const int SparkChartViewFieldNumber = 5;
    /// <summary>
    /// Will cause the scorecard to show a spark chart.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Monitoring.Dashboard.V1.Scorecard.Types.SparkChartView SparkChartView {
      get { return dataViewCase_ == DataViewOneofCase.SparkChartView ? (global::Google.Cloud.Monitoring.Dashboard.V1.Scorecard.Types.SparkChartView) dataView_ : null; }
      set {
        dataView_ = value;
        dataViewCase_ = value == null ? DataViewOneofCase.None : DataViewOneofCase.SparkChartView;
      }
    }

    /// <summary>Field number for the "thresholds" field.</summary>
    public const int ThresholdsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Google.Cloud.Monitoring.Dashboard.V1.Threshold> _repeated_thresholds_codec
        = pb::FieldCodec.ForMessage(50, global::Google.Cloud.Monitoring.Dashboard.V1.Threshold.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Monitoring.Dashboard.V1.Threshold> thresholds_ = new pbc::RepeatedField<global::Google.Cloud.Monitoring.Dashboard.V1.Threshold>();
    /// <summary>
    /// The thresholds used to determine the state of the scorecard given the
    /// time series' current value. For an actual value x, the scorecard is in a
    /// danger state if x is less than or equal to a danger threshold that triggers
    /// below, or greater than or equal to a danger threshold that triggers above.
    /// Similarly, if x is above/below a warning threshold that triggers
    /// above/below, then the scorecard is in a warning state - unless x also puts
    /// it in a danger state. (Danger trumps warning.)
    ///
    /// As an example, consider a scorecard with the following four thresholds:
    /// {
    ///   value: 90,
    ///   category: 'DANGER',
    ///   trigger: 'ABOVE',
    /// },
    /// {
    ///   value: 70,
    ///   category: 'WARNING',
    ///   trigger: 'ABOVE',
    /// },
    /// {
    ///   value: 10,
    ///   category: 'DANGER',
    ///   trigger: 'BELOW',
    /// },
    /// {
    ///   value: 20,
    ///   category: 'WARNING',
    ///   trigger: 'BELOW',
    /// }
    ///
    /// Then: values less than or equal to 10 would put the scorecard in a DANGER
    /// state, values greater than 10 but less than or equal to 20 a WARNING state,
    /// values strictly between 20 and 70 an OK state, values greater than or equal
    /// to 70 but less than 90 a WARNING state, and values greater than or equal to
    /// 90 a DANGER state.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Monitoring.Dashboard.V1.Threshold> Thresholds {
      get { return thresholds_; }
    }

    private object dataView_;
    /// <summary>Enum of possible cases for the "data_view" oneof.</summary>
    public enum DataViewOneofCase {
      None = 0,
      GaugeView = 4,
      SparkChartView = 5,
    }
    private DataViewOneofCase dataViewCase_ = DataViewOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataViewOneofCase DataViewCase {
      get { return dataViewCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDataView() {
      dataViewCase_ = DataViewOneofCase.None;
      dataView_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Scorecard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Scorecard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TimeSeriesQuery, other.TimeSeriesQuery)) return false;
      if (!object.Equals(GaugeView, other.GaugeView)) return false;
      if (!object.Equals(SparkChartView, other.SparkChartView)) return false;
      if(!thresholds_.Equals(other.thresholds_)) return false;
      if (DataViewCase != other.DataViewCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timeSeriesQuery_ != null) hash ^= TimeSeriesQuery.GetHashCode();
      if (dataViewCase_ == DataViewOneofCase.GaugeView) hash ^= GaugeView.GetHashCode();
      if (dataViewCase_ == DataViewOneofCase.SparkChartView) hash ^= SparkChartView.GetHashCode();
      hash ^= thresholds_.GetHashCode();
      hash ^= (int) dataViewCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (timeSeriesQuery_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TimeSeriesQuery);
      }
      if (dataViewCase_ == DataViewOneofCase.GaugeView) {
        output.WriteRawTag(34);
        output.WriteMessage(GaugeView);
      }
      if (dataViewCase_ == DataViewOneofCase.SparkChartView) {
        output.WriteRawTag(42);
        output.WriteMessage(SparkChartView);
      }
      thresholds_.WriteTo(output, _repeated_thresholds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (timeSeriesQuery_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TimeSeriesQuery);
      }
      if (dataViewCase_ == DataViewOneofCase.GaugeView) {
        output.WriteRawTag(34);
        output.WriteMessage(GaugeView);
      }
      if (dataViewCase_ == DataViewOneofCase.SparkChartView) {
        output.WriteRawTag(42);
        output.WriteMessage(SparkChartView);
      }
      thresholds_.WriteTo(ref output, _repeated_thresholds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timeSeriesQuery_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeSeriesQuery);
      }
      if (dataViewCase_ == DataViewOneofCase.GaugeView) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GaugeView);
      }
      if (dataViewCase_ == DataViewOneofCase.SparkChartView) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SparkChartView);
      }
      size += thresholds_.CalculateSize(_repeated_thresholds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Scorecard other) {
      if (other == null) {
        return;
      }
      if (other.timeSeriesQuery_ != null) {
        if (timeSeriesQuery_ == null) {
          TimeSeriesQuery = new global::Google.Cloud.Monitoring.Dashboard.V1.TimeSeriesQuery();
        }
        TimeSeriesQuery.MergeFrom(other.TimeSeriesQuery);
      }
      thresholds_.Add(other.thresholds_);
      switch (other.DataViewCase) {
        case DataViewOneofCase.GaugeView:
          if (GaugeView == null) {
            GaugeView = new global::Google.Cloud.Monitoring.Dashboard.V1.Scorecard.Types.GaugeView();
          }
          GaugeView.MergeFrom(other.GaugeView);
          break;
        case DataViewOneofCase.SparkChartView:
          if (SparkChartView == null) {
            SparkChartView = new global::Google.Cloud.Monitoring.Dashboard.V1.Scorecard.Types.SparkChartView();
          }
          SparkChartView.MergeFrom(other.SparkChartView);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timeSeriesQuery_ == null) {
              TimeSeriesQuery = new global::Google.Cloud.Monitoring.Dashboard.V1.TimeSeriesQuery();
            }
            input.ReadMessage(TimeSeriesQuery);
            break;
          }
          case 34: {
            global::Google.Cloud.Monitoring.Dashboard.V1.Scorecard.Types.GaugeView subBuilder = new global::Google.Cloud.Monitoring.Dashboard.V1.Scorecard.Types.GaugeView();
            if (dataViewCase_ == DataViewOneofCase.GaugeView) {
              subBuilder.MergeFrom(GaugeView);
            }
            input.ReadMessage(subBuilder);
            GaugeView = subBuilder;
            break;
          }
          case 42: {
            global::Google.Cloud.Monitoring.Dashboard.V1.Scorecard.Types.SparkChartView subBuilder = new global::Google.Cloud.Monitoring.Dashboard.V1.Scorecard.Types.SparkChartView();
            if (dataViewCase_ == DataViewOneofCase.SparkChartView) {
              subBuilder.MergeFrom(SparkChartView);
            }
            input.ReadMessage(subBuilder);
            SparkChartView = subBuilder;
            break;
          }
          case 50: {
            thresholds_.AddEntriesFrom(input, _repeated_thresholds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (timeSeriesQuery_ == null) {
              TimeSeriesQuery = new global::Google.Cloud.Monitoring.Dashboard.V1.TimeSeriesQuery();
            }
            input.ReadMessage(TimeSeriesQuery);
            break;
          }
          case 34: {
            global::Google.Cloud.Monitoring.Dashboard.V1.Scorecard.Types.GaugeView subBuilder = new global::Google.Cloud.Monitoring.Dashboard.V1.Scorecard.Types.GaugeView();
            if (dataViewCase_ == DataViewOneofCase.GaugeView) {
              subBuilder.MergeFrom(GaugeView);
            }
            input.ReadMessage(subBuilder);
            GaugeView = subBuilder;
            break;
          }
          case 42: {
            global::Google.Cloud.Monitoring.Dashboard.V1.Scorecard.Types.SparkChartView subBuilder = new global::Google.Cloud.Monitoring.Dashboard.V1.Scorecard.Types.SparkChartView();
            if (dataViewCase_ == DataViewOneofCase.SparkChartView) {
              subBuilder.MergeFrom(SparkChartView);
            }
            input.ReadMessage(subBuilder);
            SparkChartView = subBuilder;
            break;
          }
          case 50: {
            thresholds_.AddEntriesFrom(ref input, _repeated_thresholds_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Scorecard message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// A gauge chart shows where the current value sits within a pre-defined
      /// range. The upper and lower bounds should define the possible range of
      /// values for the scorecard's query (inclusive).
      /// </summary>
      public sealed partial class GaugeView : pb::IMessage<GaugeView>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<GaugeView> _parser = new pb::MessageParser<GaugeView>(() => new GaugeView());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GaugeView> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Monitoring.Dashboard.V1.Scorecard.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GaugeView() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GaugeView(GaugeView other) : this() {
          lowerBound_ = other.lowerBound_;
          upperBound_ = other.upperBound_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GaugeView Clone() {
          return new GaugeView(this);
        }

        /// <summary>Field number for the "lower_bound" field.</summary>
        public const int LowerBoundFieldNumber = 1;
        private double lowerBound_;
        /// <summary>
        /// The lower bound for this gauge chart. The value of the chart should
        /// always be greater than or equal to this.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double LowerBound {
          get { return lowerBound_; }
          set {
            lowerBound_ = value;
          }
        }

        /// <summary>Field number for the "upper_bound" field.</summary>
        public const int UpperBoundFieldNumber = 2;
        private double upperBound_;
        /// <summary>
        /// The upper bound for this gauge chart. The value of the chart should
        /// always be less than or equal to this.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double UpperBound {
          get { return upperBound_; }
          set {
            upperBound_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GaugeView);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GaugeView other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LowerBound, other.LowerBound)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UpperBound, other.UpperBound)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (LowerBound != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LowerBound);
          if (UpperBound != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UpperBound);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (LowerBound != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(LowerBound);
          }
          if (UpperBound != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(UpperBound);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (LowerBound != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(LowerBound);
          }
          if (UpperBound != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(UpperBound);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (LowerBound != 0D) {
            size += 1 + 8;
          }
          if (UpperBound != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GaugeView other) {
          if (other == null) {
            return;
          }
          if (other.LowerBound != 0D) {
            LowerBound = other.LowerBound;
          }
          if (other.UpperBound != 0D) {
            UpperBound = other.UpperBound;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                LowerBound = input.ReadDouble();
                break;
              }
              case 17: {
                UpperBound = input.ReadDouble();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                LowerBound = input.ReadDouble();
                break;
              }
              case 17: {
                UpperBound = input.ReadDouble();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// A sparkChart is a small chart suitable for inclusion in a table-cell or
      /// inline in text. This message contains the configuration for a sparkChart
      /// to show up on a Scorecard, showing recent trends of the scorecard's
      /// timeseries.
      /// </summary>
      public sealed partial class SparkChartView : pb::IMessage<SparkChartView>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<SparkChartView> _parser = new pb::MessageParser<SparkChartView>(() => new SparkChartView());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SparkChartView> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Monitoring.Dashboard.V1.Scorecard.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SparkChartView() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SparkChartView(SparkChartView other) : this() {
          sparkChartType_ = other.sparkChartType_;
          minAlignmentPeriod_ = other.minAlignmentPeriod_ != null ? other.minAlignmentPeriod_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SparkChartView Clone() {
          return new SparkChartView(this);
        }

        /// <summary>Field number for the "spark_chart_type" field.</summary>
        public const int SparkChartTypeFieldNumber = 1;
        private global::Google.Cloud.Monitoring.Dashboard.V1.SparkChartType sparkChartType_ = global::Google.Cloud.Monitoring.Dashboard.V1.SparkChartType.Unspecified;
        /// <summary>
        /// Required. The type of sparkchart to show in this chartView.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Monitoring.Dashboard.V1.SparkChartType SparkChartType {
          get { return sparkChartType_; }
          set {
            sparkChartType_ = value;
          }
        }

        /// <summary>Field number for the "min_alignment_period" field.</summary>
        public const int MinAlignmentPeriodFieldNumber = 2;
        private global::Google.Protobuf.WellKnownTypes.Duration minAlignmentPeriod_;
        /// <summary>
        /// The lower bound on data point frequency in the chart implemented by
        /// specifying the minimum alignment period to use in a time series query.
        /// For example, if the data is published once every 10 minutes it would not
        /// make sense to fetch and align data at one minute intervals. This field is
        /// optional and exists only as a hint.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Duration MinAlignmentPeriod {
          get { return minAlignmentPeriod_; }
          set {
            minAlignmentPeriod_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SparkChartView);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SparkChartView other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (SparkChartType != other.SparkChartType) return false;
          if (!object.Equals(MinAlignmentPeriod, other.MinAlignmentPeriod)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (SparkChartType != global::Google.Cloud.Monitoring.Dashboard.V1.SparkChartType.Unspecified) hash ^= SparkChartType.GetHashCode();
          if (minAlignmentPeriod_ != null) hash ^= MinAlignmentPeriod.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (SparkChartType != global::Google.Cloud.Monitoring.Dashboard.V1.SparkChartType.Unspecified) {
            output.WriteRawTag(8);
            output.WriteEnum((int) SparkChartType);
          }
          if (minAlignmentPeriod_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(MinAlignmentPeriod);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (SparkChartType != global::Google.Cloud.Monitoring.Dashboard.V1.SparkChartType.Unspecified) {
            output.WriteRawTag(8);
            output.WriteEnum((int) SparkChartType);
          }
          if (minAlignmentPeriod_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(MinAlignmentPeriod);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (SparkChartType != global::Google.Cloud.Monitoring.Dashboard.V1.SparkChartType.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SparkChartType);
          }
          if (minAlignmentPeriod_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinAlignmentPeriod);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SparkChartView other) {
          if (other == null) {
            return;
          }
          if (other.SparkChartType != global::Google.Cloud.Monitoring.Dashboard.V1.SparkChartType.Unspecified) {
            SparkChartType = other.SparkChartType;
          }
          if (other.minAlignmentPeriod_ != null) {
            if (minAlignmentPeriod_ == null) {
              MinAlignmentPeriod = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            MinAlignmentPeriod.MergeFrom(other.MinAlignmentPeriod);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                SparkChartType = (global::Google.Cloud.Monitoring.Dashboard.V1.SparkChartType) input.ReadEnum();
                break;
              }
              case 18: {
                if (minAlignmentPeriod_ == null) {
                  MinAlignmentPeriod = new global::Google.Protobuf.WellKnownTypes.Duration();
                }
                input.ReadMessage(MinAlignmentPeriod);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                SparkChartType = (global::Google.Cloud.Monitoring.Dashboard.V1.SparkChartType) input.ReadEnum();
                break;
              }
              case 18: {
                if (minAlignmentPeriod_ == null) {
                  MinAlignmentPeriod = new global::Google.Protobuf.WellKnownTypes.Duration();
                }
                input.ReadMessage(MinAlignmentPeriod);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
