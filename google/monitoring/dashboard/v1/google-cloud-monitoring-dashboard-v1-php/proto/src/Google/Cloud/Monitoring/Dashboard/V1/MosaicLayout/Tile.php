<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/monitoring/dashboard/v1/layouts.proto

namespace Google\Cloud\Monitoring\Dashboard\V1\MosaicLayout;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A single tile in the mosaic. The placement and size of the tile are
 * configurable.
 *
 * Generated from protobuf message <code>google.monitoring.dashboard.v1.MosaicLayout.Tile</code>
 */
class Tile extends \Google\Protobuf\Internal\Message
{
    /**
     * The zero-indexed position of the tile in grid blocks relative to the
     * left edge of the grid. Tiles must be contained within the specified
     * number of columns. `x_pos` cannot be negative.
     *
     * Generated from protobuf field <code>int32 x_pos = 1;</code>
     */
    protected $x_pos = 0;
    /**
     * The zero-indexed position of the tile in grid blocks relative to the
     * top edge of the grid. `y_pos` cannot be negative.
     *
     * Generated from protobuf field <code>int32 y_pos = 2;</code>
     */
    protected $y_pos = 0;
    /**
     * The width of the tile, measured in grid blocks. Tiles must have a
     * minimum width of 1.
     *
     * Generated from protobuf field <code>int32 width = 3;</code>
     */
    protected $width = 0;
    /**
     * The height of the tile, measured in grid blocks. Tiles must have a
     * minimum height of 1.
     *
     * Generated from protobuf field <code>int32 height = 4;</code>
     */
    protected $height = 0;
    /**
     * The informational widget contained in the tile. For example an `XyChart`.
     *
     * Generated from protobuf field <code>.google.monitoring.dashboard.v1.Widget widget = 5;</code>
     */
    protected $widget = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $x_pos
     *           The zero-indexed position of the tile in grid blocks relative to the
     *           left edge of the grid. Tiles must be contained within the specified
     *           number of columns. `x_pos` cannot be negative.
     *     @type int $y_pos
     *           The zero-indexed position of the tile in grid blocks relative to the
     *           top edge of the grid. `y_pos` cannot be negative.
     *     @type int $width
     *           The width of the tile, measured in grid blocks. Tiles must have a
     *           minimum width of 1.
     *     @type int $height
     *           The height of the tile, measured in grid blocks. Tiles must have a
     *           minimum height of 1.
     *     @type \Google\Cloud\Monitoring\Dashboard\V1\Widget $widget
     *           The informational widget contained in the tile. For example an `XyChart`.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Monitoring\Dashboard\V1\Layouts::initOnce();
        parent::__construct($data);
    }

    /**
     * The zero-indexed position of the tile in grid blocks relative to the
     * left edge of the grid. Tiles must be contained within the specified
     * number of columns. `x_pos` cannot be negative.
     *
     * Generated from protobuf field <code>int32 x_pos = 1;</code>
     * @return int
     */
    public function getXPos()
    {
        return $this->x_pos;
    }

    /**
     * The zero-indexed position of the tile in grid blocks relative to the
     * left edge of the grid. Tiles must be contained within the specified
     * number of columns. `x_pos` cannot be negative.
     *
     * Generated from protobuf field <code>int32 x_pos = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setXPos($var)
    {
        GPBUtil::checkInt32($var);
        $this->x_pos = $var;

        return $this;
    }

    /**
     * The zero-indexed position of the tile in grid blocks relative to the
     * top edge of the grid. `y_pos` cannot be negative.
     *
     * Generated from protobuf field <code>int32 y_pos = 2;</code>
     * @return int
     */
    public function getYPos()
    {
        return $this->y_pos;
    }

    /**
     * The zero-indexed position of the tile in grid blocks relative to the
     * top edge of the grid. `y_pos` cannot be negative.
     *
     * Generated from protobuf field <code>int32 y_pos = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setYPos($var)
    {
        GPBUtil::checkInt32($var);
        $this->y_pos = $var;

        return $this;
    }

    /**
     * The width of the tile, measured in grid blocks. Tiles must have a
     * minimum width of 1.
     *
     * Generated from protobuf field <code>int32 width = 3;</code>
     * @return int
     */
    public function getWidth()
    {
        return $this->width;
    }

    /**
     * The width of the tile, measured in grid blocks. Tiles must have a
     * minimum width of 1.
     *
     * Generated from protobuf field <code>int32 width = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setWidth($var)
    {
        GPBUtil::checkInt32($var);
        $this->width = $var;

        return $this;
    }

    /**
     * The height of the tile, measured in grid blocks. Tiles must have a
     * minimum height of 1.
     *
     * Generated from protobuf field <code>int32 height = 4;</code>
     * @return int
     */
    public function getHeight()
    {
        return $this->height;
    }

    /**
     * The height of the tile, measured in grid blocks. Tiles must have a
     * minimum height of 1.
     *
     * Generated from protobuf field <code>int32 height = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setHeight($var)
    {
        GPBUtil::checkInt32($var);
        $this->height = $var;

        return $this;
    }

    /**
     * The informational widget contained in the tile. For example an `XyChart`.
     *
     * Generated from protobuf field <code>.google.monitoring.dashboard.v1.Widget widget = 5;</code>
     * @return \Google\Cloud\Monitoring\Dashboard\V1\Widget|null
     */
    public function getWidget()
    {
        return $this->widget;
    }

    public function hasWidget()
    {
        return isset($this->widget);
    }

    public function clearWidget()
    {
        unset($this->widget);
    }

    /**
     * The informational widget contained in the tile. For example an `XyChart`.
     *
     * Generated from protobuf field <code>.google.monitoring.dashboard.v1.Widget widget = 5;</code>
     * @param \Google\Cloud\Monitoring\Dashboard\V1\Widget $var
     * @return $this
     */
    public function setWidget($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Monitoring\Dashboard\V1\Widget::class);
        $this->widget = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Tile::class, \Google\Cloud\Monitoring\Dashboard\V1\MosaicLayout_Tile::class);

