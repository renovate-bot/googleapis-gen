<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/monitoring/dashboard/v1/xychart.proto

namespace Google\Cloud\Monitoring\Dashboard\V1\XyChart;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Groups a time series query definition with charting options.
 *
 * Generated from protobuf message <code>google.monitoring.dashboard.v1.XyChart.DataSet</code>
 */
class DataSet extends \Google\Protobuf\Internal\Message
{
    /**
     * Required. Fields for querying time series data from the
     * Stackdriver metrics API.
     *
     * Generated from protobuf field <code>.google.monitoring.dashboard.v1.TimeSeriesQuery time_series_query = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    protected $time_series_query = null;
    /**
     * How this data should be plotted on the chart.
     *
     * Generated from protobuf field <code>.google.monitoring.dashboard.v1.XyChart.DataSet.PlotType plot_type = 2;</code>
     */
    protected $plot_type = 0;
    /**
     * A template string for naming `TimeSeries` in the resulting data set.
     * This should be a string with interpolations of the form `${label_name}`,
     * which will resolve to the label's value.
     *
     * Generated from protobuf field <code>string legend_template = 3;</code>
     */
    protected $legend_template = '';
    /**
     * Optional. The lower bound on data point frequency for this data set, implemented by
     * specifying the minimum alignment period to use in a time series query
     * For example, if the data is published once every 10 minutes, the
     * `min_alignment_period` should be at least 10 minutes. It would not
     * make sense to fetch and align data at one minute intervals.
     *
     * Generated from protobuf field <code>.google.protobuf.Duration min_alignment_period = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $min_alignment_period = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Cloud\Monitoring\Dashboard\V1\TimeSeriesQuery $time_series_query
     *           Required. Fields for querying time series data from the
     *           Stackdriver metrics API.
     *     @type int $plot_type
     *           How this data should be plotted on the chart.
     *     @type string $legend_template
     *           A template string for naming `TimeSeries` in the resulting data set.
     *           This should be a string with interpolations of the form `${label_name}`,
     *           which will resolve to the label's value.
     *     @type \Google\Protobuf\Duration $min_alignment_period
     *           Optional. The lower bound on data point frequency for this data set, implemented by
     *           specifying the minimum alignment period to use in a time series query
     *           For example, if the data is published once every 10 minutes, the
     *           `min_alignment_period` should be at least 10 minutes. It would not
     *           make sense to fetch and align data at one minute intervals.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Monitoring\Dashboard\V1\Xychart::initOnce();
        parent::__construct($data);
    }

    /**
     * Required. Fields for querying time series data from the
     * Stackdriver metrics API.
     *
     * Generated from protobuf field <code>.google.monitoring.dashboard.v1.TimeSeriesQuery time_series_query = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return \Google\Cloud\Monitoring\Dashboard\V1\TimeSeriesQuery|null
     */
    public function getTimeSeriesQuery()
    {
        return $this->time_series_query;
    }

    public function hasTimeSeriesQuery()
    {
        return isset($this->time_series_query);
    }

    public function clearTimeSeriesQuery()
    {
        unset($this->time_series_query);
    }

    /**
     * Required. Fields for querying time series data from the
     * Stackdriver metrics API.
     *
     * Generated from protobuf field <code>.google.monitoring.dashboard.v1.TimeSeriesQuery time_series_query = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param \Google\Cloud\Monitoring\Dashboard\V1\TimeSeriesQuery $var
     * @return $this
     */
    public function setTimeSeriesQuery($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Monitoring\Dashboard\V1\TimeSeriesQuery::class);
        $this->time_series_query = $var;

        return $this;
    }

    /**
     * How this data should be plotted on the chart.
     *
     * Generated from protobuf field <code>.google.monitoring.dashboard.v1.XyChart.DataSet.PlotType plot_type = 2;</code>
     * @return int
     */
    public function getPlotType()
    {
        return $this->plot_type;
    }

    /**
     * How this data should be plotted on the chart.
     *
     * Generated from protobuf field <code>.google.monitoring.dashboard.v1.XyChart.DataSet.PlotType plot_type = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setPlotType($var)
    {
        GPBUtil::checkEnum($var, \Google\Cloud\Monitoring\Dashboard\V1\XyChart\DataSet\PlotType::class);
        $this->plot_type = $var;

        return $this;
    }

    /**
     * A template string for naming `TimeSeries` in the resulting data set.
     * This should be a string with interpolations of the form `${label_name}`,
     * which will resolve to the label's value.
     *
     * Generated from protobuf field <code>string legend_template = 3;</code>
     * @return string
     */
    public function getLegendTemplate()
    {
        return $this->legend_template;
    }

    /**
     * A template string for naming `TimeSeries` in the resulting data set.
     * This should be a string with interpolations of the form `${label_name}`,
     * which will resolve to the label's value.
     *
     * Generated from protobuf field <code>string legend_template = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setLegendTemplate($var)
    {
        GPBUtil::checkString($var, True);
        $this->legend_template = $var;

        return $this;
    }

    /**
     * Optional. The lower bound on data point frequency for this data set, implemented by
     * specifying the minimum alignment period to use in a time series query
     * For example, if the data is published once every 10 minutes, the
     * `min_alignment_period` should be at least 10 minutes. It would not
     * make sense to fetch and align data at one minute intervals.
     *
     * Generated from protobuf field <code>.google.protobuf.Duration min_alignment_period = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return \Google\Protobuf\Duration|null
     */
    public function getMinAlignmentPeriod()
    {
        return $this->min_alignment_period;
    }

    public function hasMinAlignmentPeriod()
    {
        return isset($this->min_alignment_period);
    }

    public function clearMinAlignmentPeriod()
    {
        unset($this->min_alignment_period);
    }

    /**
     * Optional. The lower bound on data point frequency for this data set, implemented by
     * specifying the minimum alignment period to use in a time series query
     * For example, if the data is published once every 10 minutes, the
     * `min_alignment_period` should be at least 10 minutes. It would not
     * make sense to fetch and align data at one minute intervals.
     *
     * Generated from protobuf field <code>.google.protobuf.Duration min_alignment_period = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param \Google\Protobuf\Duration $var
     * @return $this
     */
    public function setMinAlignmentPeriod($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Duration::class);
        $this->min_alignment_period = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(DataSet::class, \Google\Cloud\Monitoring\Dashboard\V1\XyChart_DataSet::class);

