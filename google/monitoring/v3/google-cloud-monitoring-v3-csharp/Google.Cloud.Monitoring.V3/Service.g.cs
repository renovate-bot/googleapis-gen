// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/monitoring/v3/service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Monitoring.V3 {

  /// <summary>Holder for reflection information generated from google/monitoring/v3/service.proto</summary>
  public static partial class ServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for google/monitoring/v3/service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJnb29nbGUvbW9uaXRvcmluZy92My9zZXJ2aWNlLnByb3RvEhRnb29nbGUu",
            "bW9uaXRvcmluZy52MxofZ29vZ2xlL2FwaS9maWVsZF9iZWhhdmlvci5wcm90",
            "bxoZZ29vZ2xlL2FwaS9yZXNvdXJjZS5wcm90bxoeZ29vZ2xlL3Byb3RvYnVm",
            "L2R1cmF0aW9uLnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnBy",
            "b3RvGiFnb29nbGUvdHlwZS9jYWxlbmRhcl9wZXJpb2QucHJvdG8iyQkKB1Nl",
            "cnZpY2USDAoEbmFtZRgBIAEoCRIUCgxkaXNwbGF5X25hbWUYAiABKAkSNgoG",
            "Y3VzdG9tGAYgASgLMiQuZ29vZ2xlLm1vbml0b3JpbmcudjMuU2VydmljZS5D",
            "dXN0b21IABI9CgphcHBfZW5naW5lGAcgASgLMicuZ29vZ2xlLm1vbml0b3Jp",
            "bmcudjMuU2VydmljZS5BcHBFbmdpbmVIABJHCg9jbG91ZF9lbmRwb2ludHMY",
            "CCABKAsyLC5nb29nbGUubW9uaXRvcmluZy52My5TZXJ2aWNlLkNsb3VkRW5k",
            "cG9pbnRzSAASQwoNY2x1c3Rlcl9pc3RpbxgJIAEoCzIqLmdvb2dsZS5tb25p",
            "dG9yaW5nLnYzLlNlcnZpY2UuQ2x1c3RlcklzdGlvSAASPQoKbWVzaF9pc3Rp",
            "bxgKIAEoCzInLmdvb2dsZS5tb25pdG9yaW5nLnYzLlNlcnZpY2UuTWVzaElz",
            "dGlvSAASVgoXaXN0aW9fY2Fub25pY2FsX3NlcnZpY2UYCyABKAsyMy5nb29n",
            "bGUubW9uaXRvcmluZy52My5TZXJ2aWNlLklzdGlvQ2Fub25pY2FsU2Vydmlj",
            "ZUgAEjoKCXRlbGVtZXRyeRgNIAEoCzInLmdvb2dsZS5tb25pdG9yaW5nLnYz",
            "LlNlcnZpY2UuVGVsZW1ldHJ5EkIKC3VzZXJfbGFiZWxzGA4gAygLMi0uZ29v",
            "Z2xlLm1vbml0b3JpbmcudjMuU2VydmljZS5Vc2VyTGFiZWxzRW50cnkaCAoG",
            "Q3VzdG9tGh4KCUFwcEVuZ2luZRIRCgltb2R1bGVfaWQYASABKAkaIQoOQ2xv",
            "dWRFbmRwb2ludHMSDwoHc2VydmljZRgBIAEoCRpnCgxDbHVzdGVySXN0aW8S",
            "EAoIbG9jYXRpb24YASABKAkSFAoMY2x1c3Rlcl9uYW1lGAIgASgJEhkKEXNl",
            "cnZpY2VfbmFtZXNwYWNlGAMgASgJEhQKDHNlcnZpY2VfbmFtZRgEIAEoCRpO",
            "CglNZXNoSXN0aW8SEAoIbWVzaF91aWQYASABKAkSGQoRc2VydmljZV9uYW1l",
            "c3BhY2UYAyABKAkSFAoMc2VydmljZV9uYW1lGAQgASgJGmkKFUlzdGlvQ2Fu",
            "b25pY2FsU2VydmljZRIQCghtZXNoX3VpZBgBIAEoCRIjChtjYW5vbmljYWxf",
            "c2VydmljZV9uYW1lc3BhY2UYAyABKAkSGQoRY2Fub25pY2FsX3NlcnZpY2UY",
            "BCABKAkaIgoJVGVsZW1ldHJ5EhUKDXJlc291cmNlX25hbWUYASABKAkaMQoP",
            "VXNlckxhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToC",
            "OAE6pwHqQaMBCiFtb25pdG9yaW5nLmdvb2dsZWFwaXMuY29tL1NlcnZpY2US",
            "JXByb2plY3RzL3twcm9qZWN0fS9zZXJ2aWNlcy97c2VydmljZX0SL29yZ2Fu",
            "aXphdGlvbnMve29yZ2FuaXphdGlvbn0vc2VydmljZXMve3NlcnZpY2V9EiNm",
            "b2xkZXJzL3tmb2xkZXJ9L3NlcnZpY2VzL3tzZXJ2aWNlfRIBKkIMCgppZGVu",
            "dGlmaWVyIpYGChVTZXJ2aWNlTGV2ZWxPYmplY3RpdmUSDAoEbmFtZRgBIAEo",
            "CRIUCgxkaXNwbGF5X25hbWUYCyABKAkSTAoXc2VydmljZV9sZXZlbF9pbmRp",
            "Y2F0b3IYAyABKAsyKy5nb29nbGUubW9uaXRvcmluZy52My5TZXJ2aWNlTGV2",
            "ZWxJbmRpY2F0b3ISDAoEZ29hbBgEIAEoARIzCg5yb2xsaW5nX3BlcmlvZBgF",
            "IAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbkgAEjYKD2NhbGVuZGFy",
            "X3BlcmlvZBgGIAEoDjIbLmdvb2dsZS50eXBlLkNhbGVuZGFyUGVyaW9kSAAS",
            "UAoLdXNlcl9sYWJlbHMYDCADKAsyOy5nb29nbGUubW9uaXRvcmluZy52My5T",
            "ZXJ2aWNlTGV2ZWxPYmplY3RpdmUuVXNlckxhYmVsc0VudHJ5GjEKD1VzZXJM",
            "YWJlbHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIjQK",
            "BFZpZXcSFAoQVklFV19VTlNQRUNJRklFRBAAEggKBEZVTEwQAhIMCghFWFBM",
            "SUNJVBABOsoC6kHGAgovbW9uaXRvcmluZy5nb29nbGVhcGlzLmNvbS9TZXJ2",
            "aWNlTGV2ZWxPYmplY3RpdmUSVnByb2plY3RzL3twcm9qZWN0fS9zZXJ2aWNl",
            "cy97c2VydmljZX0vc2VydmljZUxldmVsT2JqZWN0aXZlcy97c2VydmljZV9s",
            "ZXZlbF9vYmplY3RpdmV9EmBvcmdhbml6YXRpb25zL3tvcmdhbml6YXRpb259",
            "L3NlcnZpY2VzL3tzZXJ2aWNlfS9zZXJ2aWNlTGV2ZWxPYmplY3RpdmVzL3tz",
            "ZXJ2aWNlX2xldmVsX29iamVjdGl2ZX0SVGZvbGRlcnMve2ZvbGRlcn0vc2Vy",
            "dmljZXMve3NlcnZpY2V9L3NlcnZpY2VMZXZlbE9iamVjdGl2ZXMve3NlcnZp",
            "Y2VfbGV2ZWxfb2JqZWN0aXZlfRIBKiABQggKBnBlcmlvZCLUAQoVU2Vydmlj",
            "ZUxldmVsSW5kaWNhdG9yEjMKCWJhc2ljX3NsaRgEIAEoCzIeLmdvb2dsZS5t",
            "b25pdG9yaW5nLnYzLkJhc2ljU2xpSAASPgoNcmVxdWVzdF9iYXNlZBgBIAEo",
            "CzIlLmdvb2dsZS5tb25pdG9yaW5nLnYzLlJlcXVlc3RCYXNlZFNsaUgAEj4K",
            "DXdpbmRvd3NfYmFzZWQYAiABKAsyJS5nb29nbGUubW9uaXRvcmluZy52My5X",
            "aW5kb3dzQmFzZWRTbGlIAEIGCgR0eXBlIrYCCghCYXNpY1NsaRIOCgZtZXRo",
            "b2QYByADKAkSEAoIbG9jYXRpb24YCCADKAkSDwoHdmVyc2lvbhgJIAMoCRJL",
            "CgxhdmFpbGFiaWxpdHkYAiABKAsyMy5nb29nbGUubW9uaXRvcmluZy52My5C",
            "YXNpY1NsaS5BdmFpbGFiaWxpdHlDcml0ZXJpYUgAEkEKB2xhdGVuY3kYAyAB",
            "KAsyLi5nb29nbGUubW9uaXRvcmluZy52My5CYXNpY1NsaS5MYXRlbmN5Q3Jp",
            "dGVyaWFIABoWChRBdmFpbGFiaWxpdHlDcml0ZXJpYRo/Cg9MYXRlbmN5Q3Jp",
            "dGVyaWESLAoJdGhyZXNob2xkGAMgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1",
            "cmF0aW9uQg4KDHNsaV9jcml0ZXJpYSIhCgVSYW5nZRILCgNtaW4YASABKAES",
            "CwoDbWF4GAIgASgBIqEBCg9SZXF1ZXN0QmFzZWRTbGkSQQoQZ29vZF90b3Rh",
            "bF9yYXRpbxgBIAEoCzIlLmdvb2dsZS5tb25pdG9yaW5nLnYzLlRpbWVTZXJp",
            "ZXNSYXRpb0gAEkEKEGRpc3RyaWJ1dGlvbl9jdXQYAyABKAsyJS5nb29nbGUu",
            "bW9uaXRvcmluZy52My5EaXN0cmlidXRpb25DdXRIAEIICgZtZXRob2QiaAoP",
            "VGltZVNlcmllc1JhdGlvEhsKE2dvb2Rfc2VydmljZV9maWx0ZXIYBCABKAkS",
            "GgoSYmFkX3NlcnZpY2VfZmlsdGVyGAUgASgJEhwKFHRvdGFsX3NlcnZpY2Vf",
            "ZmlsdGVyGAYgASgJIloKD0Rpc3RyaWJ1dGlvbkN1dBIbChNkaXN0cmlidXRp",
            "b25fZmlsdGVyGAQgASgJEioKBXJhbmdlGAUgASgLMhsuZ29vZ2xlLm1vbml0",
            "b3JpbmcudjMuUmFuZ2UigwUKD1dpbmRvd3NCYXNlZFNsaRIgChZnb29kX2Jh",
            "ZF9tZXRyaWNfZmlsdGVyGAUgASgJSAASYAoaZ29vZF90b3RhbF9yYXRpb190",
            "aHJlc2hvbGQYAiABKAsyOi5nb29nbGUubW9uaXRvcmluZy52My5XaW5kb3dz",
            "QmFzZWRTbGkuUGVyZm9ybWFuY2VUaHJlc2hvbGRIABJRChRtZXRyaWNfbWVh",
            "bl9pbl9yYW5nZRgGIAEoCzIxLmdvb2dsZS5tb25pdG9yaW5nLnYzLldpbmRv",
            "d3NCYXNlZFNsaS5NZXRyaWNSYW5nZUgAElAKE21ldHJpY19zdW1faW5fcmFu",
            "Z2UYByABKAsyMS5nb29nbGUubW9uaXRvcmluZy52My5XaW5kb3dzQmFzZWRT",
            "bGkuTWV0cmljUmFuZ2VIABIwCg13aW5kb3dfcGVyaW9kGAQgASgLMhkuZ29v",
            "Z2xlLnByb3RvYnVmLkR1cmF0aW9uGrABChRQZXJmb3JtYW5jZVRocmVzaG9s",
            "ZBI8CgtwZXJmb3JtYW5jZRgBIAEoCzIlLmdvb2dsZS5tb25pdG9yaW5nLnYz",
            "LlJlcXVlc3RCYXNlZFNsaUgAEj8KFWJhc2ljX3NsaV9wZXJmb3JtYW5jZRgD",
            "IAEoCzIeLmdvb2dsZS5tb25pdG9yaW5nLnYzLkJhc2ljU2xpSAASEQoJdGhy",
            "ZXNob2xkGAIgASgBQgYKBHR5cGUaTgoLTWV0cmljUmFuZ2USEwoLdGltZV9z",
            "ZXJpZXMYASABKAkSKgoFcmFuZ2UYBCABKAsyGy5nb29nbGUubW9uaXRvcmlu",
            "Zy52My5SYW5nZUISChB3aW5kb3dfY3JpdGVyaW9uQs4BChhjb20uZ29vZ2xl",
            "Lm1vbml0b3JpbmcudjNCFlNlcnZpY2VNb25pdG9yaW5nUHJvdG9QAVo+Z29v",
            "Z2xlLmdvbGFuZy5vcmcvZ2VucHJvdG8vZ29vZ2xlYXBpcy9tb25pdG9yaW5n",
            "L3YzO21vbml0b3JpbmeqAhpHb29nbGUuQ2xvdWQuTW9uaXRvcmluZy5WM8oC",
            "Gkdvb2dsZVxDbG91ZFxNb25pdG9yaW5nXFYz6gIdR29vZ2xlOjpDbG91ZDo6",
            "TW9uaXRvcmluZzo6VjNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Api.ResourceReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Type.CalendarPeriodReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Monitoring.V3.Service), global::Google.Cloud.Monitoring.V3.Service.Parser, new[]{ "Name", "DisplayName", "Custom", "AppEngine", "CloudEndpoints", "ClusterIstio", "MeshIstio", "IstioCanonicalService", "Telemetry", "UserLabels" }, new[]{ "Identifier" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Monitoring.V3.Service.Types.Custom), global::Google.Cloud.Monitoring.V3.Service.Types.Custom.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Monitoring.V3.Service.Types.AppEngine), global::Google.Cloud.Monitoring.V3.Service.Types.AppEngine.Parser, new[]{ "ModuleId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Monitoring.V3.Service.Types.CloudEndpoints), global::Google.Cloud.Monitoring.V3.Service.Types.CloudEndpoints.Parser, new[]{ "Service" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Monitoring.V3.Service.Types.ClusterIstio), global::Google.Cloud.Monitoring.V3.Service.Types.ClusterIstio.Parser, new[]{ "Location", "ClusterName", "ServiceNamespace", "ServiceName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Monitoring.V3.Service.Types.MeshIstio), global::Google.Cloud.Monitoring.V3.Service.Types.MeshIstio.Parser, new[]{ "MeshUid", "ServiceNamespace", "ServiceName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Monitoring.V3.Service.Types.IstioCanonicalService), global::Google.Cloud.Monitoring.V3.Service.Types.IstioCanonicalService.Parser, new[]{ "MeshUid", "CanonicalServiceNamespace", "CanonicalService" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Monitoring.V3.Service.Types.Telemetry), global::Google.Cloud.Monitoring.V3.Service.Types.Telemetry.Parser, new[]{ "ResourceName" }, null, null, null, null),
            null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Monitoring.V3.ServiceLevelObjective), global::Google.Cloud.Monitoring.V3.ServiceLevelObjective.Parser, new[]{ "Name", "DisplayName", "ServiceLevelIndicator", "Goal", "RollingPeriod", "CalendarPeriod", "UserLabels" }, new[]{ "Period" }, new[]{ typeof(global::Google.Cloud.Monitoring.V3.ServiceLevelObjective.Types.View) }, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Monitoring.V3.ServiceLevelIndicator), global::Google.Cloud.Monitoring.V3.ServiceLevelIndicator.Parser, new[]{ "BasicSli", "RequestBased", "WindowsBased" }, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Monitoring.V3.BasicSli), global::Google.Cloud.Monitoring.V3.BasicSli.Parser, new[]{ "Method", "Location", "Version", "Availability", "Latency" }, new[]{ "SliCriteria" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Monitoring.V3.BasicSli.Types.AvailabilityCriteria), global::Google.Cloud.Monitoring.V3.BasicSli.Types.AvailabilityCriteria.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Monitoring.V3.BasicSli.Types.LatencyCriteria), global::Google.Cloud.Monitoring.V3.BasicSli.Types.LatencyCriteria.Parser, new[]{ "Threshold" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Monitoring.V3.Range), global::Google.Cloud.Monitoring.V3.Range.Parser, new[]{ "Min", "Max" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Monitoring.V3.RequestBasedSli), global::Google.Cloud.Monitoring.V3.RequestBasedSli.Parser, new[]{ "GoodTotalRatio", "DistributionCut" }, new[]{ "Method" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Monitoring.V3.TimeSeriesRatio), global::Google.Cloud.Monitoring.V3.TimeSeriesRatio.Parser, new[]{ "GoodServiceFilter", "BadServiceFilter", "TotalServiceFilter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Monitoring.V3.DistributionCut), global::Google.Cloud.Monitoring.V3.DistributionCut.Parser, new[]{ "DistributionFilter", "Range" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Monitoring.V3.WindowsBasedSli), global::Google.Cloud.Monitoring.V3.WindowsBasedSli.Parser, new[]{ "GoodBadMetricFilter", "GoodTotalRatioThreshold", "MetricMeanInRange", "MetricSumInRange", "WindowPeriod" }, new[]{ "WindowCriterion" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Monitoring.V3.WindowsBasedSli.Types.PerformanceThreshold), global::Google.Cloud.Monitoring.V3.WindowsBasedSli.Types.PerformanceThreshold.Parser, new[]{ "Performance", "BasicSliPerformance", "Threshold" }, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Monitoring.V3.WindowsBasedSli.Types.MetricRange), global::Google.Cloud.Monitoring.V3.WindowsBasedSli.Types.MetricRange.Parser, new[]{ "TimeSeries", "Range" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A `Service` is a discrete, autonomous, and network-accessible unit, designed
  /// to solve an individual concern
  /// ([Wikipedia](https://en.wikipedia.org/wiki/Service-orientation)). In
  /// Cloud Monitoring, a `Service` acts as the root resource under which
  /// operational aspects of the service are accessible.
  /// </summary>
  public sealed partial class Service : pb::IMessage<Service>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Service> _parser = new pb::MessageParser<Service>(() => new Service());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Service> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Monitoring.V3.ServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Service() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Service(Service other) : this() {
      name_ = other.name_;
      displayName_ = other.displayName_;
      telemetry_ = other.telemetry_ != null ? other.telemetry_.Clone() : null;
      userLabels_ = other.userLabels_.Clone();
      switch (other.IdentifierCase) {
        case IdentifierOneofCase.Custom:
          Custom = other.Custom.Clone();
          break;
        case IdentifierOneofCase.AppEngine:
          AppEngine = other.AppEngine.Clone();
          break;
        case IdentifierOneofCase.CloudEndpoints:
          CloudEndpoints = other.CloudEndpoints.Clone();
          break;
        case IdentifierOneofCase.ClusterIstio:
          ClusterIstio = other.ClusterIstio.Clone();
          break;
        case IdentifierOneofCase.MeshIstio:
          MeshIstio = other.MeshIstio.Clone();
          break;
        case IdentifierOneofCase.IstioCanonicalService:
          IstioCanonicalService = other.IstioCanonicalService.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Service Clone() {
      return new Service(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Resource name for this Service. The format is:
    ///
    ///     projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 2;
    private string displayName_ = "";
    /// <summary>
    /// Name used for UI elements listing this Service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "custom" field.</summary>
    public const int CustomFieldNumber = 6;
    /// <summary>
    /// Custom service type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Monitoring.V3.Service.Types.Custom Custom {
      get { return identifierCase_ == IdentifierOneofCase.Custom ? (global::Google.Cloud.Monitoring.V3.Service.Types.Custom) identifier_ : null; }
      set {
        identifier_ = value;
        identifierCase_ = value == null ? IdentifierOneofCase.None : IdentifierOneofCase.Custom;
      }
    }

    /// <summary>Field number for the "app_engine" field.</summary>
    public const int AppEngineFieldNumber = 7;
    /// <summary>
    /// Type used for App Engine services.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Monitoring.V3.Service.Types.AppEngine AppEngine {
      get { return identifierCase_ == IdentifierOneofCase.AppEngine ? (global::Google.Cloud.Monitoring.V3.Service.Types.AppEngine) identifier_ : null; }
      set {
        identifier_ = value;
        identifierCase_ = value == null ? IdentifierOneofCase.None : IdentifierOneofCase.AppEngine;
      }
    }

    /// <summary>Field number for the "cloud_endpoints" field.</summary>
    public const int CloudEndpointsFieldNumber = 8;
    /// <summary>
    /// Type used for Cloud Endpoints services.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Monitoring.V3.Service.Types.CloudEndpoints CloudEndpoints {
      get { return identifierCase_ == IdentifierOneofCase.CloudEndpoints ? (global::Google.Cloud.Monitoring.V3.Service.Types.CloudEndpoints) identifier_ : null; }
      set {
        identifier_ = value;
        identifierCase_ = value == null ? IdentifierOneofCase.None : IdentifierOneofCase.CloudEndpoints;
      }
    }

    /// <summary>Field number for the "cluster_istio" field.</summary>
    public const int ClusterIstioFieldNumber = 9;
    /// <summary>
    /// Type used for Istio services that live in a Kubernetes cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Monitoring.V3.Service.Types.ClusterIstio ClusterIstio {
      get { return identifierCase_ == IdentifierOneofCase.ClusterIstio ? (global::Google.Cloud.Monitoring.V3.Service.Types.ClusterIstio) identifier_ : null; }
      set {
        identifier_ = value;
        identifierCase_ = value == null ? IdentifierOneofCase.None : IdentifierOneofCase.ClusterIstio;
      }
    }

    /// <summary>Field number for the "mesh_istio" field.</summary>
    public const int MeshIstioFieldNumber = 10;
    /// <summary>
    /// Type used for Istio services scoped to an Istio mesh.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Monitoring.V3.Service.Types.MeshIstio MeshIstio {
      get { return identifierCase_ == IdentifierOneofCase.MeshIstio ? (global::Google.Cloud.Monitoring.V3.Service.Types.MeshIstio) identifier_ : null; }
      set {
        identifier_ = value;
        identifierCase_ = value == null ? IdentifierOneofCase.None : IdentifierOneofCase.MeshIstio;
      }
    }

    /// <summary>Field number for the "istio_canonical_service" field.</summary>
    public const int IstioCanonicalServiceFieldNumber = 11;
    /// <summary>
    /// Type used for canonical services scoped to an Istio mesh.
    /// Metrics for Istio are
    /// [documented here](https://istio.io/latest/docs/reference/config/metrics/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Monitoring.V3.Service.Types.IstioCanonicalService IstioCanonicalService {
      get { return identifierCase_ == IdentifierOneofCase.IstioCanonicalService ? (global::Google.Cloud.Monitoring.V3.Service.Types.IstioCanonicalService) identifier_ : null; }
      set {
        identifier_ = value;
        identifierCase_ = value == null ? IdentifierOneofCase.None : IdentifierOneofCase.IstioCanonicalService;
      }
    }

    /// <summary>Field number for the "telemetry" field.</summary>
    public const int TelemetryFieldNumber = 13;
    private global::Google.Cloud.Monitoring.V3.Service.Types.Telemetry telemetry_;
    /// <summary>
    /// Configuration for how to query telemetry on a Service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Monitoring.V3.Service.Types.Telemetry Telemetry {
      get { return telemetry_; }
      set {
        telemetry_ = value;
      }
    }

    /// <summary>Field number for the "user_labels" field.</summary>
    public const int UserLabelsFieldNumber = 14;
    private static readonly pbc::MapField<string, string>.Codec _map_userLabels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 114);
    private readonly pbc::MapField<string, string> userLabels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Labels which have been used to annotate the service. Label keys must start
    /// with a letter. Label keys and values may contain lowercase letters,
    /// numbers, underscores, and dashes. Label keys and values have a maximum
    /// length of 63 characters, and must be less than 128 bytes in size. Up to 64
    /// label entries may be stored. For labels which do not have a semantic value,
    /// the empty string may be supplied for the label value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> UserLabels {
      get { return userLabels_; }
    }

    private object identifier_;
    /// <summary>Enum of possible cases for the "identifier" oneof.</summary>
    public enum IdentifierOneofCase {
      None = 0,
      Custom = 6,
      AppEngine = 7,
      CloudEndpoints = 8,
      ClusterIstio = 9,
      MeshIstio = 10,
      IstioCanonicalService = 11,
    }
    private IdentifierOneofCase identifierCase_ = IdentifierOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdentifierOneofCase IdentifierCase {
      get { return identifierCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIdentifier() {
      identifierCase_ = IdentifierOneofCase.None;
      identifier_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Service);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Service other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (DisplayName != other.DisplayName) return false;
      if (!object.Equals(Custom, other.Custom)) return false;
      if (!object.Equals(AppEngine, other.AppEngine)) return false;
      if (!object.Equals(CloudEndpoints, other.CloudEndpoints)) return false;
      if (!object.Equals(ClusterIstio, other.ClusterIstio)) return false;
      if (!object.Equals(MeshIstio, other.MeshIstio)) return false;
      if (!object.Equals(IstioCanonicalService, other.IstioCanonicalService)) return false;
      if (!object.Equals(Telemetry, other.Telemetry)) return false;
      if (!UserLabels.Equals(other.UserLabels)) return false;
      if (IdentifierCase != other.IdentifierCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (identifierCase_ == IdentifierOneofCase.Custom) hash ^= Custom.GetHashCode();
      if (identifierCase_ == IdentifierOneofCase.AppEngine) hash ^= AppEngine.GetHashCode();
      if (identifierCase_ == IdentifierOneofCase.CloudEndpoints) hash ^= CloudEndpoints.GetHashCode();
      if (identifierCase_ == IdentifierOneofCase.ClusterIstio) hash ^= ClusterIstio.GetHashCode();
      if (identifierCase_ == IdentifierOneofCase.MeshIstio) hash ^= MeshIstio.GetHashCode();
      if (identifierCase_ == IdentifierOneofCase.IstioCanonicalService) hash ^= IstioCanonicalService.GetHashCode();
      if (telemetry_ != null) hash ^= Telemetry.GetHashCode();
      hash ^= UserLabels.GetHashCode();
      hash ^= (int) identifierCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DisplayName);
      }
      if (identifierCase_ == IdentifierOneofCase.Custom) {
        output.WriteRawTag(50);
        output.WriteMessage(Custom);
      }
      if (identifierCase_ == IdentifierOneofCase.AppEngine) {
        output.WriteRawTag(58);
        output.WriteMessage(AppEngine);
      }
      if (identifierCase_ == IdentifierOneofCase.CloudEndpoints) {
        output.WriteRawTag(66);
        output.WriteMessage(CloudEndpoints);
      }
      if (identifierCase_ == IdentifierOneofCase.ClusterIstio) {
        output.WriteRawTag(74);
        output.WriteMessage(ClusterIstio);
      }
      if (identifierCase_ == IdentifierOneofCase.MeshIstio) {
        output.WriteRawTag(82);
        output.WriteMessage(MeshIstio);
      }
      if (identifierCase_ == IdentifierOneofCase.IstioCanonicalService) {
        output.WriteRawTag(90);
        output.WriteMessage(IstioCanonicalService);
      }
      if (telemetry_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Telemetry);
      }
      userLabels_.WriteTo(output, _map_userLabels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DisplayName);
      }
      if (identifierCase_ == IdentifierOneofCase.Custom) {
        output.WriteRawTag(50);
        output.WriteMessage(Custom);
      }
      if (identifierCase_ == IdentifierOneofCase.AppEngine) {
        output.WriteRawTag(58);
        output.WriteMessage(AppEngine);
      }
      if (identifierCase_ == IdentifierOneofCase.CloudEndpoints) {
        output.WriteRawTag(66);
        output.WriteMessage(CloudEndpoints);
      }
      if (identifierCase_ == IdentifierOneofCase.ClusterIstio) {
        output.WriteRawTag(74);
        output.WriteMessage(ClusterIstio);
      }
      if (identifierCase_ == IdentifierOneofCase.MeshIstio) {
        output.WriteRawTag(82);
        output.WriteMessage(MeshIstio);
      }
      if (identifierCase_ == IdentifierOneofCase.IstioCanonicalService) {
        output.WriteRawTag(90);
        output.WriteMessage(IstioCanonicalService);
      }
      if (telemetry_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Telemetry);
      }
      userLabels_.WriteTo(ref output, _map_userLabels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (identifierCase_ == IdentifierOneofCase.Custom) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Custom);
      }
      if (identifierCase_ == IdentifierOneofCase.AppEngine) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AppEngine);
      }
      if (identifierCase_ == IdentifierOneofCase.CloudEndpoints) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CloudEndpoints);
      }
      if (identifierCase_ == IdentifierOneofCase.ClusterIstio) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClusterIstio);
      }
      if (identifierCase_ == IdentifierOneofCase.MeshIstio) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MeshIstio);
      }
      if (identifierCase_ == IdentifierOneofCase.IstioCanonicalService) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IstioCanonicalService);
      }
      if (telemetry_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Telemetry);
      }
      size += userLabels_.CalculateSize(_map_userLabels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Service other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.telemetry_ != null) {
        if (telemetry_ == null) {
          Telemetry = new global::Google.Cloud.Monitoring.V3.Service.Types.Telemetry();
        }
        Telemetry.MergeFrom(other.Telemetry);
      }
      userLabels_.Add(other.userLabels_);
      switch (other.IdentifierCase) {
        case IdentifierOneofCase.Custom:
          if (Custom == null) {
            Custom = new global::Google.Cloud.Monitoring.V3.Service.Types.Custom();
          }
          Custom.MergeFrom(other.Custom);
          break;
        case IdentifierOneofCase.AppEngine:
          if (AppEngine == null) {
            AppEngine = new global::Google.Cloud.Monitoring.V3.Service.Types.AppEngine();
          }
          AppEngine.MergeFrom(other.AppEngine);
          break;
        case IdentifierOneofCase.CloudEndpoints:
          if (CloudEndpoints == null) {
            CloudEndpoints = new global::Google.Cloud.Monitoring.V3.Service.Types.CloudEndpoints();
          }
          CloudEndpoints.MergeFrom(other.CloudEndpoints);
          break;
        case IdentifierOneofCase.ClusterIstio:
          if (ClusterIstio == null) {
            ClusterIstio = new global::Google.Cloud.Monitoring.V3.Service.Types.ClusterIstio();
          }
          ClusterIstio.MergeFrom(other.ClusterIstio);
          break;
        case IdentifierOneofCase.MeshIstio:
          if (MeshIstio == null) {
            MeshIstio = new global::Google.Cloud.Monitoring.V3.Service.Types.MeshIstio();
          }
          MeshIstio.MergeFrom(other.MeshIstio);
          break;
        case IdentifierOneofCase.IstioCanonicalService:
          if (IstioCanonicalService == null) {
            IstioCanonicalService = new global::Google.Cloud.Monitoring.V3.Service.Types.IstioCanonicalService();
          }
          IstioCanonicalService.MergeFrom(other.IstioCanonicalService);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            DisplayName = input.ReadString();
            break;
          }
          case 50: {
            global::Google.Cloud.Monitoring.V3.Service.Types.Custom subBuilder = new global::Google.Cloud.Monitoring.V3.Service.Types.Custom();
            if (identifierCase_ == IdentifierOneofCase.Custom) {
              subBuilder.MergeFrom(Custom);
            }
            input.ReadMessage(subBuilder);
            Custom = subBuilder;
            break;
          }
          case 58: {
            global::Google.Cloud.Monitoring.V3.Service.Types.AppEngine subBuilder = new global::Google.Cloud.Monitoring.V3.Service.Types.AppEngine();
            if (identifierCase_ == IdentifierOneofCase.AppEngine) {
              subBuilder.MergeFrom(AppEngine);
            }
            input.ReadMessage(subBuilder);
            AppEngine = subBuilder;
            break;
          }
          case 66: {
            global::Google.Cloud.Monitoring.V3.Service.Types.CloudEndpoints subBuilder = new global::Google.Cloud.Monitoring.V3.Service.Types.CloudEndpoints();
            if (identifierCase_ == IdentifierOneofCase.CloudEndpoints) {
              subBuilder.MergeFrom(CloudEndpoints);
            }
            input.ReadMessage(subBuilder);
            CloudEndpoints = subBuilder;
            break;
          }
          case 74: {
            global::Google.Cloud.Monitoring.V3.Service.Types.ClusterIstio subBuilder = new global::Google.Cloud.Monitoring.V3.Service.Types.ClusterIstio();
            if (identifierCase_ == IdentifierOneofCase.ClusterIstio) {
              subBuilder.MergeFrom(ClusterIstio);
            }
            input.ReadMessage(subBuilder);
            ClusterIstio = subBuilder;
            break;
          }
          case 82: {
            global::Google.Cloud.Monitoring.V3.Service.Types.MeshIstio subBuilder = new global::Google.Cloud.Monitoring.V3.Service.Types.MeshIstio();
            if (identifierCase_ == IdentifierOneofCase.MeshIstio) {
              subBuilder.MergeFrom(MeshIstio);
            }
            input.ReadMessage(subBuilder);
            MeshIstio = subBuilder;
            break;
          }
          case 90: {
            global::Google.Cloud.Monitoring.V3.Service.Types.IstioCanonicalService subBuilder = new global::Google.Cloud.Monitoring.V3.Service.Types.IstioCanonicalService();
            if (identifierCase_ == IdentifierOneofCase.IstioCanonicalService) {
              subBuilder.MergeFrom(IstioCanonicalService);
            }
            input.ReadMessage(subBuilder);
            IstioCanonicalService = subBuilder;
            break;
          }
          case 106: {
            if (telemetry_ == null) {
              Telemetry = new global::Google.Cloud.Monitoring.V3.Service.Types.Telemetry();
            }
            input.ReadMessage(Telemetry);
            break;
          }
          case 114: {
            userLabels_.AddEntriesFrom(input, _map_userLabels_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            DisplayName = input.ReadString();
            break;
          }
          case 50: {
            global::Google.Cloud.Monitoring.V3.Service.Types.Custom subBuilder = new global::Google.Cloud.Monitoring.V3.Service.Types.Custom();
            if (identifierCase_ == IdentifierOneofCase.Custom) {
              subBuilder.MergeFrom(Custom);
            }
            input.ReadMessage(subBuilder);
            Custom = subBuilder;
            break;
          }
          case 58: {
            global::Google.Cloud.Monitoring.V3.Service.Types.AppEngine subBuilder = new global::Google.Cloud.Monitoring.V3.Service.Types.AppEngine();
            if (identifierCase_ == IdentifierOneofCase.AppEngine) {
              subBuilder.MergeFrom(AppEngine);
            }
            input.ReadMessage(subBuilder);
            AppEngine = subBuilder;
            break;
          }
          case 66: {
            global::Google.Cloud.Monitoring.V3.Service.Types.CloudEndpoints subBuilder = new global::Google.Cloud.Monitoring.V3.Service.Types.CloudEndpoints();
            if (identifierCase_ == IdentifierOneofCase.CloudEndpoints) {
              subBuilder.MergeFrom(CloudEndpoints);
            }
            input.ReadMessage(subBuilder);
            CloudEndpoints = subBuilder;
            break;
          }
          case 74: {
            global::Google.Cloud.Monitoring.V3.Service.Types.ClusterIstio subBuilder = new global::Google.Cloud.Monitoring.V3.Service.Types.ClusterIstio();
            if (identifierCase_ == IdentifierOneofCase.ClusterIstio) {
              subBuilder.MergeFrom(ClusterIstio);
            }
            input.ReadMessage(subBuilder);
            ClusterIstio = subBuilder;
            break;
          }
          case 82: {
            global::Google.Cloud.Monitoring.V3.Service.Types.MeshIstio subBuilder = new global::Google.Cloud.Monitoring.V3.Service.Types.MeshIstio();
            if (identifierCase_ == IdentifierOneofCase.MeshIstio) {
              subBuilder.MergeFrom(MeshIstio);
            }
            input.ReadMessage(subBuilder);
            MeshIstio = subBuilder;
            break;
          }
          case 90: {
            global::Google.Cloud.Monitoring.V3.Service.Types.IstioCanonicalService subBuilder = new global::Google.Cloud.Monitoring.V3.Service.Types.IstioCanonicalService();
            if (identifierCase_ == IdentifierOneofCase.IstioCanonicalService) {
              subBuilder.MergeFrom(IstioCanonicalService);
            }
            input.ReadMessage(subBuilder);
            IstioCanonicalService = subBuilder;
            break;
          }
          case 106: {
            if (telemetry_ == null) {
              Telemetry = new global::Google.Cloud.Monitoring.V3.Service.Types.Telemetry();
            }
            input.ReadMessage(Telemetry);
            break;
          }
          case 114: {
            userLabels_.AddEntriesFrom(ref input, _map_userLabels_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Service message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Custom view of service telemetry. Currently a place-holder pending final
      /// design.
      /// </summary>
      public sealed partial class Custom : pb::IMessage<Custom>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Custom> _parser = new pb::MessageParser<Custom>(() => new Custom());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Custom> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Monitoring.V3.Service.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Custom() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Custom(Custom other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Custom Clone() {
          return new Custom(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Custom);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Custom other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Custom other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
            }
          }
        }
        #endif

      }

      /// <summary>
      /// App Engine service. Learn more at https://cloud.google.com/appengine.
      /// </summary>
      public sealed partial class AppEngine : pb::IMessage<AppEngine>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AppEngine> _parser = new pb::MessageParser<AppEngine>(() => new AppEngine());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AppEngine> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Monitoring.V3.Service.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppEngine() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppEngine(AppEngine other) : this() {
          moduleId_ = other.moduleId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppEngine Clone() {
          return new AppEngine(this);
        }

        /// <summary>Field number for the "module_id" field.</summary>
        public const int ModuleIdFieldNumber = 1;
        private string moduleId_ = "";
        /// <summary>
        /// The ID of the App Engine module underlying this service. Corresponds to
        /// the `module_id` resource label in the `gae_app` monitored resource:
        /// https://cloud.google.com/monitoring/api/resources#tag_gae_app
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ModuleId {
          get { return moduleId_; }
          set {
            moduleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AppEngine);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AppEngine other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ModuleId != other.ModuleId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ModuleId.Length != 0) hash ^= ModuleId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ModuleId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ModuleId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ModuleId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ModuleId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ModuleId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ModuleId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AppEngine other) {
          if (other == null) {
            return;
          }
          if (other.ModuleId.Length != 0) {
            ModuleId = other.ModuleId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ModuleId = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                ModuleId = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Cloud Endpoints service. Learn more at https://cloud.google.com/endpoints.
      /// </summary>
      public sealed partial class CloudEndpoints : pb::IMessage<CloudEndpoints>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<CloudEndpoints> _parser = new pb::MessageParser<CloudEndpoints>(() => new CloudEndpoints());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CloudEndpoints> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Monitoring.V3.Service.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CloudEndpoints() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CloudEndpoints(CloudEndpoints other) : this() {
          service_ = other.service_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CloudEndpoints Clone() {
          return new CloudEndpoints(this);
        }

        /// <summary>Field number for the "service" field.</summary>
        public const int ServiceFieldNumber = 1;
        private string service_ = "";
        /// <summary>
        /// The name of the Cloud Endpoints service underlying this service.
        /// Corresponds to the `service` resource label in the `api` monitored
        /// resource: https://cloud.google.com/monitoring/api/resources#tag_api
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Service {
          get { return service_; }
          set {
            service_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CloudEndpoints);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CloudEndpoints other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Service != other.Service) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Service.Length != 0) hash ^= Service.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Service.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Service);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Service.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Service);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Service.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Service);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CloudEndpoints other) {
          if (other == null) {
            return;
          }
          if (other.Service.Length != 0) {
            Service = other.Service;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Service = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Service = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Istio service scoped to a single Kubernetes cluster. Learn more at
      /// https://istio.io. Clusters running OSS Istio will have their services
      /// ingested as this type.
      /// </summary>
      public sealed partial class ClusterIstio : pb::IMessage<ClusterIstio>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ClusterIstio> _parser = new pb::MessageParser<ClusterIstio>(() => new ClusterIstio());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClusterIstio> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Monitoring.V3.Service.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClusterIstio() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClusterIstio(ClusterIstio other) : this() {
          location_ = other.location_;
          clusterName_ = other.clusterName_;
          serviceNamespace_ = other.serviceNamespace_;
          serviceName_ = other.serviceName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClusterIstio Clone() {
          return new ClusterIstio(this);
        }

        /// <summary>Field number for the "location" field.</summary>
        public const int LocationFieldNumber = 1;
        private string location_ = "";
        /// <summary>
        /// The location of the Kubernetes cluster in which this Istio service is
        /// defined. Corresponds to the `location` resource label in `k8s_cluster`
        /// resources.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Location {
          get { return location_; }
          set {
            location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "cluster_name" field.</summary>
        public const int ClusterNameFieldNumber = 2;
        private string clusterName_ = "";
        /// <summary>
        /// The name of the Kubernetes cluster in which this Istio service is
        /// defined. Corresponds to the `cluster_name` resource label in
        /// `k8s_cluster` resources.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ClusterName {
          get { return clusterName_; }
          set {
            clusterName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "service_namespace" field.</summary>
        public const int ServiceNamespaceFieldNumber = 3;
        private string serviceNamespace_ = "";
        /// <summary>
        /// The namespace of the Istio service underlying this service. Corresponds
        /// to the `destination_service_namespace` metric label in Istio metrics.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ServiceNamespace {
          get { return serviceNamespace_; }
          set {
            serviceNamespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "service_name" field.</summary>
        public const int ServiceNameFieldNumber = 4;
        private string serviceName_ = "";
        /// <summary>
        /// The name of the Istio service underlying this service. Corresponds to the
        /// `destination_service_name` metric label in Istio metrics.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ServiceName {
          get { return serviceName_; }
          set {
            serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClusterIstio);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClusterIstio other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Location != other.Location) return false;
          if (ClusterName != other.ClusterName) return false;
          if (ServiceNamespace != other.ServiceNamespace) return false;
          if (ServiceName != other.ServiceName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Location.Length != 0) hash ^= Location.GetHashCode();
          if (ClusterName.Length != 0) hash ^= ClusterName.GetHashCode();
          if (ServiceNamespace.Length != 0) hash ^= ServiceNamespace.GetHashCode();
          if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Location.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Location);
          }
          if (ClusterName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ClusterName);
          }
          if (ServiceNamespace.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(ServiceNamespace);
          }
          if (ServiceName.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(ServiceName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Location.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Location);
          }
          if (ClusterName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ClusterName);
          }
          if (ServiceNamespace.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(ServiceNamespace);
          }
          if (ServiceName.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(ServiceName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Location.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
          }
          if (ClusterName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterName);
          }
          if (ServiceNamespace.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceNamespace);
          }
          if (ServiceName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClusterIstio other) {
          if (other == null) {
            return;
          }
          if (other.Location.Length != 0) {
            Location = other.Location;
          }
          if (other.ClusterName.Length != 0) {
            ClusterName = other.ClusterName;
          }
          if (other.ServiceNamespace.Length != 0) {
            ServiceNamespace = other.ServiceNamespace;
          }
          if (other.ServiceName.Length != 0) {
            ServiceName = other.ServiceName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Location = input.ReadString();
                break;
              }
              case 18: {
                ClusterName = input.ReadString();
                break;
              }
              case 26: {
                ServiceNamespace = input.ReadString();
                break;
              }
              case 34: {
                ServiceName = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Location = input.ReadString();
                break;
              }
              case 18: {
                ClusterName = input.ReadString();
                break;
              }
              case 26: {
                ServiceNamespace = input.ReadString();
                break;
              }
              case 34: {
                ServiceName = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Istio service scoped to an Istio mesh. Anthos clusters running ASM &lt; 1.6.8
      /// will have their services ingested as this type.
      /// </summary>
      public sealed partial class MeshIstio : pb::IMessage<MeshIstio>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<MeshIstio> _parser = new pb::MessageParser<MeshIstio>(() => new MeshIstio());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MeshIstio> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Monitoring.V3.Service.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MeshIstio() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MeshIstio(MeshIstio other) : this() {
          meshUid_ = other.meshUid_;
          serviceNamespace_ = other.serviceNamespace_;
          serviceName_ = other.serviceName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MeshIstio Clone() {
          return new MeshIstio(this);
        }

        /// <summary>Field number for the "mesh_uid" field.</summary>
        public const int MeshUidFieldNumber = 1;
        private string meshUid_ = "";
        /// <summary>
        /// Identifier for the mesh in which this Istio service is defined.
        /// Corresponds to the `mesh_uid` metric label in Istio metrics.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MeshUid {
          get { return meshUid_; }
          set {
            meshUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "service_namespace" field.</summary>
        public const int ServiceNamespaceFieldNumber = 3;
        private string serviceNamespace_ = "";
        /// <summary>
        /// The namespace of the Istio service underlying this service. Corresponds
        /// to the `destination_service_namespace` metric label in Istio metrics.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ServiceNamespace {
          get { return serviceNamespace_; }
          set {
            serviceNamespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "service_name" field.</summary>
        public const int ServiceNameFieldNumber = 4;
        private string serviceName_ = "";
        /// <summary>
        /// The name of the Istio service underlying this service. Corresponds to the
        /// `destination_service_name` metric label in Istio metrics.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ServiceName {
          get { return serviceName_; }
          set {
            serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MeshIstio);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MeshIstio other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MeshUid != other.MeshUid) return false;
          if (ServiceNamespace != other.ServiceNamespace) return false;
          if (ServiceName != other.ServiceName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (MeshUid.Length != 0) hash ^= MeshUid.GetHashCode();
          if (ServiceNamespace.Length != 0) hash ^= ServiceNamespace.GetHashCode();
          if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (MeshUid.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(MeshUid);
          }
          if (ServiceNamespace.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(ServiceNamespace);
          }
          if (ServiceName.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(ServiceName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (MeshUid.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(MeshUid);
          }
          if (ServiceNamespace.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(ServiceNamespace);
          }
          if (ServiceName.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(ServiceName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (MeshUid.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MeshUid);
          }
          if (ServiceNamespace.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceNamespace);
          }
          if (ServiceName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MeshIstio other) {
          if (other == null) {
            return;
          }
          if (other.MeshUid.Length != 0) {
            MeshUid = other.MeshUid;
          }
          if (other.ServiceNamespace.Length != 0) {
            ServiceNamespace = other.ServiceNamespace;
          }
          if (other.ServiceName.Length != 0) {
            ServiceName = other.ServiceName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                MeshUid = input.ReadString();
                break;
              }
              case 26: {
                ServiceNamespace = input.ReadString();
                break;
              }
              case 34: {
                ServiceName = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                MeshUid = input.ReadString();
                break;
              }
              case 26: {
                ServiceNamespace = input.ReadString();
                break;
              }
              case 34: {
                ServiceName = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Canonical service scoped to an Istio mesh. Anthos clusters running ASM >=
      /// 1.6.8 will have their services ingested as this type.
      /// </summary>
      public sealed partial class IstioCanonicalService : pb::IMessage<IstioCanonicalService>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<IstioCanonicalService> _parser = new pb::MessageParser<IstioCanonicalService>(() => new IstioCanonicalService());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<IstioCanonicalService> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Monitoring.V3.Service.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IstioCanonicalService() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IstioCanonicalService(IstioCanonicalService other) : this() {
          meshUid_ = other.meshUid_;
          canonicalServiceNamespace_ = other.canonicalServiceNamespace_;
          canonicalService_ = other.canonicalService_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IstioCanonicalService Clone() {
          return new IstioCanonicalService(this);
        }

        /// <summary>Field number for the "mesh_uid" field.</summary>
        public const int MeshUidFieldNumber = 1;
        private string meshUid_ = "";
        /// <summary>
        /// Identifier for the Istio mesh in which this canonical service is defined.
        /// Corresponds to the `mesh_uid` metric label in
        /// [Istio metrics](https://cloud.google.com/monitoring/api/metrics_istio).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MeshUid {
          get { return meshUid_; }
          set {
            meshUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "canonical_service_namespace" field.</summary>
        public const int CanonicalServiceNamespaceFieldNumber = 3;
        private string canonicalServiceNamespace_ = "";
        /// <summary>
        /// The namespace of the canonical service underlying this service.
        /// Corresponds to the `destination_canonical_service_namespace` metric
        /// label in [Istio
        /// metrics](https://cloud.google.com/monitoring/api/metrics_istio).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CanonicalServiceNamespace {
          get { return canonicalServiceNamespace_; }
          set {
            canonicalServiceNamespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "canonical_service" field.</summary>
        public const int CanonicalServiceFieldNumber = 4;
        private string canonicalService_ = "";
        /// <summary>
        /// The name of the canonical service underlying this service.
        /// Corresponds to the `destination_canonical_service_name` metric label in
        /// label in [Istio
        /// metrics](https://cloud.google.com/monitoring/api/metrics_istio).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CanonicalService {
          get { return canonicalService_; }
          set {
            canonicalService_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as IstioCanonicalService);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(IstioCanonicalService other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MeshUid != other.MeshUid) return false;
          if (CanonicalServiceNamespace != other.CanonicalServiceNamespace) return false;
          if (CanonicalService != other.CanonicalService) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (MeshUid.Length != 0) hash ^= MeshUid.GetHashCode();
          if (CanonicalServiceNamespace.Length != 0) hash ^= CanonicalServiceNamespace.GetHashCode();
          if (CanonicalService.Length != 0) hash ^= CanonicalService.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (MeshUid.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(MeshUid);
          }
          if (CanonicalServiceNamespace.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(CanonicalServiceNamespace);
          }
          if (CanonicalService.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(CanonicalService);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (MeshUid.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(MeshUid);
          }
          if (CanonicalServiceNamespace.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(CanonicalServiceNamespace);
          }
          if (CanonicalService.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(CanonicalService);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (MeshUid.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MeshUid);
          }
          if (CanonicalServiceNamespace.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CanonicalServiceNamespace);
          }
          if (CanonicalService.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CanonicalService);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(IstioCanonicalService other) {
          if (other == null) {
            return;
          }
          if (other.MeshUid.Length != 0) {
            MeshUid = other.MeshUid;
          }
          if (other.CanonicalServiceNamespace.Length != 0) {
            CanonicalServiceNamespace = other.CanonicalServiceNamespace;
          }
          if (other.CanonicalService.Length != 0) {
            CanonicalService = other.CanonicalService;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                MeshUid = input.ReadString();
                break;
              }
              case 26: {
                CanonicalServiceNamespace = input.ReadString();
                break;
              }
              case 34: {
                CanonicalService = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                MeshUid = input.ReadString();
                break;
              }
              case 26: {
                CanonicalServiceNamespace = input.ReadString();
                break;
              }
              case 34: {
                CanonicalService = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Configuration for how to query telemetry on a Service.
      /// </summary>
      public sealed partial class Telemetry : pb::IMessage<Telemetry>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Telemetry> _parser = new pb::MessageParser<Telemetry>(() => new Telemetry());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Telemetry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Monitoring.V3.Service.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Telemetry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Telemetry(Telemetry other) : this() {
          resourceName_ = other.resourceName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Telemetry Clone() {
          return new Telemetry(this);
        }

        /// <summary>Field number for the "resource_name" field.</summary>
        public const int ResourceNameFieldNumber = 1;
        private string resourceName_ = "";
        /// <summary>
        /// The full name of the resource that defines this service. Formatted as
        /// described in https://cloud.google.com/apis/design/resource_names.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ResourceName {
          get { return resourceName_; }
          set {
            resourceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Telemetry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Telemetry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ResourceName != other.ResourceName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ResourceName.Length != 0) hash ^= ResourceName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ResourceName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ResourceName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ResourceName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ResourceName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ResourceName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Telemetry other) {
          if (other == null) {
            return;
          }
          if (other.ResourceName.Length != 0) {
            ResourceName = other.ResourceName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ResourceName = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                ResourceName = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// A Service-Level Objective (SLO) describes a level of desired good service. It
  /// consists of a service-level indicator (SLI), a performance goal, and a period
  /// over which the objective is to be evaluated against that goal. The SLO can
  /// use SLIs defined in a number of different manners. Typical SLOs might include
  /// "99% of requests in each rolling week have latency below 200 milliseconds" or
  /// "99.5% of requests in each calendar month return successfully."
  /// </summary>
  public sealed partial class ServiceLevelObjective : pb::IMessage<ServiceLevelObjective>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ServiceLevelObjective> _parser = new pb::MessageParser<ServiceLevelObjective>(() => new ServiceLevelObjective());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServiceLevelObjective> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Monitoring.V3.ServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceLevelObjective() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceLevelObjective(ServiceLevelObjective other) : this() {
      name_ = other.name_;
      displayName_ = other.displayName_;
      serviceLevelIndicator_ = other.serviceLevelIndicator_ != null ? other.serviceLevelIndicator_.Clone() : null;
      goal_ = other.goal_;
      userLabels_ = other.userLabels_.Clone();
      switch (other.PeriodCase) {
        case PeriodOneofCase.RollingPeriod:
          RollingPeriod = other.RollingPeriod.Clone();
          break;
        case PeriodOneofCase.CalendarPeriod:
          CalendarPeriod = other.CalendarPeriod;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceLevelObjective Clone() {
      return new ServiceLevelObjective(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Resource name for this `ServiceLevelObjective`. The format is:
    ///
    ///     projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 11;
    private string displayName_ = "";
    /// <summary>
    /// Name used for UI elements listing this SLO.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "service_level_indicator" field.</summary>
    public const int ServiceLevelIndicatorFieldNumber = 3;
    private global::Google.Cloud.Monitoring.V3.ServiceLevelIndicator serviceLevelIndicator_;
    /// <summary>
    /// The definition of good service, used to measure and calculate the quality
    /// of the `Service`'s performance with respect to a single aspect of service
    /// quality.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Monitoring.V3.ServiceLevelIndicator ServiceLevelIndicator {
      get { return serviceLevelIndicator_; }
      set {
        serviceLevelIndicator_ = value;
      }
    }

    /// <summary>Field number for the "goal" field.</summary>
    public const int GoalFieldNumber = 4;
    private double goal_;
    /// <summary>
    /// The fraction of service that must be good in order for this objective to be
    /// met. `0 &lt; goal &lt;= 0.999`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Goal {
      get { return goal_; }
      set {
        goal_ = value;
      }
    }

    /// <summary>Field number for the "rolling_period" field.</summary>
    public const int RollingPeriodFieldNumber = 5;
    /// <summary>
    /// A rolling time period, semantically "in the past `&lt;rolling_period>`".
    /// Must be an integer multiple of 1 day no larger than 30 days.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration RollingPeriod {
      get { return periodCase_ == PeriodOneofCase.RollingPeriod ? (global::Google.Protobuf.WellKnownTypes.Duration) period_ : null; }
      set {
        period_ = value;
        periodCase_ = value == null ? PeriodOneofCase.None : PeriodOneofCase.RollingPeriod;
      }
    }

    /// <summary>Field number for the "calendar_period" field.</summary>
    public const int CalendarPeriodFieldNumber = 6;
    /// <summary>
    /// A calendar period, semantically "since the start of the current
    /// `&lt;calendar_period>`". At this time, only `DAY`, `WEEK`, `FORTNIGHT`, and
    /// `MONTH` are supported.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.CalendarPeriod CalendarPeriod {
      get { return periodCase_ == PeriodOneofCase.CalendarPeriod ? (global::Google.Type.CalendarPeriod) period_ : global::Google.Type.CalendarPeriod.Unspecified; }
      set {
        period_ = value;
        periodCase_ = PeriodOneofCase.CalendarPeriod;
      }
    }

    /// <summary>Field number for the "user_labels" field.</summary>
    public const int UserLabelsFieldNumber = 12;
    private static readonly pbc::MapField<string, string>.Codec _map_userLabels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 98);
    private readonly pbc::MapField<string, string> userLabels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Labels which have been used to annotate the service-level objective. Label
    /// keys must start with a letter. Label keys and values may contain lowercase
    /// letters, numbers, underscores, and dashes. Label keys and values have a
    /// maximum length of 63 characters, and must be less than 128 bytes in size.
    /// Up to 64 label entries may be stored. For labels which do not have a
    /// semantic value, the empty string may be supplied for the label value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> UserLabels {
      get { return userLabels_; }
    }

    private object period_;
    /// <summary>Enum of possible cases for the "period" oneof.</summary>
    public enum PeriodOneofCase {
      None = 0,
      RollingPeriod = 5,
      CalendarPeriod = 6,
    }
    private PeriodOneofCase periodCase_ = PeriodOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeriodOneofCase PeriodCase {
      get { return periodCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPeriod() {
      periodCase_ = PeriodOneofCase.None;
      period_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServiceLevelObjective);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServiceLevelObjective other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (DisplayName != other.DisplayName) return false;
      if (!object.Equals(ServiceLevelIndicator, other.ServiceLevelIndicator)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Goal, other.Goal)) return false;
      if (!object.Equals(RollingPeriod, other.RollingPeriod)) return false;
      if (CalendarPeriod != other.CalendarPeriod) return false;
      if (!UserLabels.Equals(other.UserLabels)) return false;
      if (PeriodCase != other.PeriodCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (serviceLevelIndicator_ != null) hash ^= ServiceLevelIndicator.GetHashCode();
      if (Goal != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Goal);
      if (periodCase_ == PeriodOneofCase.RollingPeriod) hash ^= RollingPeriod.GetHashCode();
      if (periodCase_ == PeriodOneofCase.CalendarPeriod) hash ^= CalendarPeriod.GetHashCode();
      hash ^= UserLabels.GetHashCode();
      hash ^= (int) periodCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (serviceLevelIndicator_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ServiceLevelIndicator);
      }
      if (Goal != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Goal);
      }
      if (periodCase_ == PeriodOneofCase.RollingPeriod) {
        output.WriteRawTag(42);
        output.WriteMessage(RollingPeriod);
      }
      if (periodCase_ == PeriodOneofCase.CalendarPeriod) {
        output.WriteRawTag(48);
        output.WriteEnum((int) CalendarPeriod);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(DisplayName);
      }
      userLabels_.WriteTo(output, _map_userLabels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (serviceLevelIndicator_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ServiceLevelIndicator);
      }
      if (Goal != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Goal);
      }
      if (periodCase_ == PeriodOneofCase.RollingPeriod) {
        output.WriteRawTag(42);
        output.WriteMessage(RollingPeriod);
      }
      if (periodCase_ == PeriodOneofCase.CalendarPeriod) {
        output.WriteRawTag(48);
        output.WriteEnum((int) CalendarPeriod);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(DisplayName);
      }
      userLabels_.WriteTo(ref output, _map_userLabels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (serviceLevelIndicator_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServiceLevelIndicator);
      }
      if (Goal != 0D) {
        size += 1 + 8;
      }
      if (periodCase_ == PeriodOneofCase.RollingPeriod) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RollingPeriod);
      }
      if (periodCase_ == PeriodOneofCase.CalendarPeriod) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CalendarPeriod);
      }
      size += userLabels_.CalculateSize(_map_userLabels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServiceLevelObjective other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.serviceLevelIndicator_ != null) {
        if (serviceLevelIndicator_ == null) {
          ServiceLevelIndicator = new global::Google.Cloud.Monitoring.V3.ServiceLevelIndicator();
        }
        ServiceLevelIndicator.MergeFrom(other.ServiceLevelIndicator);
      }
      if (other.Goal != 0D) {
        Goal = other.Goal;
      }
      userLabels_.Add(other.userLabels_);
      switch (other.PeriodCase) {
        case PeriodOneofCase.RollingPeriod:
          if (RollingPeriod == null) {
            RollingPeriod = new global::Google.Protobuf.WellKnownTypes.Duration();
          }
          RollingPeriod.MergeFrom(other.RollingPeriod);
          break;
        case PeriodOneofCase.CalendarPeriod:
          CalendarPeriod = other.CalendarPeriod;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (serviceLevelIndicator_ == null) {
              ServiceLevelIndicator = new global::Google.Cloud.Monitoring.V3.ServiceLevelIndicator();
            }
            input.ReadMessage(ServiceLevelIndicator);
            break;
          }
          case 33: {
            Goal = input.ReadDouble();
            break;
          }
          case 42: {
            global::Google.Protobuf.WellKnownTypes.Duration subBuilder = new global::Google.Protobuf.WellKnownTypes.Duration();
            if (periodCase_ == PeriodOneofCase.RollingPeriod) {
              subBuilder.MergeFrom(RollingPeriod);
            }
            input.ReadMessage(subBuilder);
            RollingPeriod = subBuilder;
            break;
          }
          case 48: {
            period_ = input.ReadEnum();
            periodCase_ = PeriodOneofCase.CalendarPeriod;
            break;
          }
          case 90: {
            DisplayName = input.ReadString();
            break;
          }
          case 98: {
            userLabels_.AddEntriesFrom(input, _map_userLabels_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (serviceLevelIndicator_ == null) {
              ServiceLevelIndicator = new global::Google.Cloud.Monitoring.V3.ServiceLevelIndicator();
            }
            input.ReadMessage(ServiceLevelIndicator);
            break;
          }
          case 33: {
            Goal = input.ReadDouble();
            break;
          }
          case 42: {
            global::Google.Protobuf.WellKnownTypes.Duration subBuilder = new global::Google.Protobuf.WellKnownTypes.Duration();
            if (periodCase_ == PeriodOneofCase.RollingPeriod) {
              subBuilder.MergeFrom(RollingPeriod);
            }
            input.ReadMessage(subBuilder);
            RollingPeriod = subBuilder;
            break;
          }
          case 48: {
            period_ = input.ReadEnum();
            periodCase_ = PeriodOneofCase.CalendarPeriod;
            break;
          }
          case 90: {
            DisplayName = input.ReadString();
            break;
          }
          case 98: {
            userLabels_.AddEntriesFrom(ref input, _map_userLabels_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ServiceLevelObjective message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// `ServiceLevelObjective.View` determines what form of
      /// `ServiceLevelObjective` is returned from `GetServiceLevelObjective`,
      /// `ListServiceLevelObjectives`, and `ListServiceLevelObjectiveVersions` RPCs.
      /// </summary>
      public enum View {
        /// <summary>
        /// Same as FULL.
        /// </summary>
        [pbr::OriginalName("VIEW_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Return the embedded `ServiceLevelIndicator` in the form in which it was
        /// defined. If it was defined using a `BasicSli`, return that `BasicSli`.
        /// </summary>
        [pbr::OriginalName("FULL")] Full = 2,
        /// <summary>
        /// For `ServiceLevelIndicator`s using `BasicSli` articulation, instead
        /// return the `ServiceLevelIndicator` with its mode of computation fully
        /// spelled out as a `RequestBasedSli`. For `ServiceLevelIndicator`s using
        /// `RequestBasedSli` or `WindowsBasedSli`, return the
        /// `ServiceLevelIndicator` as it was provided.
        /// </summary>
        [pbr::OriginalName("EXPLICIT")] Explicit = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// A Service-Level Indicator (SLI) describes the "performance" of a service. For
  /// some services, the SLI is well-defined. In such cases, the SLI can be
  /// described easily by referencing the well-known SLI and providing the needed
  /// parameters. Alternatively, a "custom" SLI can be defined with a query to the
  /// underlying metric store. An SLI is defined to be `good_service /
  /// total_service` over any queried time interval. The value of performance
  /// always falls into the range `0 &lt;= performance &lt;= 1`. A custom SLI describes
  /// how to compute this ratio, whether this is by dividing values from a pair of
  /// time series, cutting a `Distribution` into good and bad counts, or counting
  /// time windows in which the service complies with a criterion. For separation
  /// of concerns, a single Service-Level Indicator measures performance for only
  /// one aspect of service quality, such as fraction of successful queries or
  /// fast-enough queries.
  /// </summary>
  public sealed partial class ServiceLevelIndicator : pb::IMessage<ServiceLevelIndicator>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ServiceLevelIndicator> _parser = new pb::MessageParser<ServiceLevelIndicator>(() => new ServiceLevelIndicator());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServiceLevelIndicator> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Monitoring.V3.ServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceLevelIndicator() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceLevelIndicator(ServiceLevelIndicator other) : this() {
      switch (other.TypeCase) {
        case TypeOneofCase.BasicSli:
          BasicSli = other.BasicSli.Clone();
          break;
        case TypeOneofCase.RequestBased:
          RequestBased = other.RequestBased.Clone();
          break;
        case TypeOneofCase.WindowsBased:
          WindowsBased = other.WindowsBased.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceLevelIndicator Clone() {
      return new ServiceLevelIndicator(this);
    }

    /// <summary>Field number for the "basic_sli" field.</summary>
    public const int BasicSliFieldNumber = 4;
    /// <summary>
    /// Basic SLI on a well-known service type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Monitoring.V3.BasicSli BasicSli {
      get { return typeCase_ == TypeOneofCase.BasicSli ? (global::Google.Cloud.Monitoring.V3.BasicSli) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.BasicSli;
      }
    }

    /// <summary>Field number for the "request_based" field.</summary>
    public const int RequestBasedFieldNumber = 1;
    /// <summary>
    /// Request-based SLIs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Monitoring.V3.RequestBasedSli RequestBased {
      get { return typeCase_ == TypeOneofCase.RequestBased ? (global::Google.Cloud.Monitoring.V3.RequestBasedSli) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.RequestBased;
      }
    }

    /// <summary>Field number for the "windows_based" field.</summary>
    public const int WindowsBasedFieldNumber = 2;
    /// <summary>
    /// Windows-based SLIs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Monitoring.V3.WindowsBasedSli WindowsBased {
      get { return typeCase_ == TypeOneofCase.WindowsBased ? (global::Google.Cloud.Monitoring.V3.WindowsBasedSli) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.WindowsBased;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      BasicSli = 4,
      RequestBased = 1,
      WindowsBased = 2,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServiceLevelIndicator);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServiceLevelIndicator other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BasicSli, other.BasicSli)) return false;
      if (!object.Equals(RequestBased, other.RequestBased)) return false;
      if (!object.Equals(WindowsBased, other.WindowsBased)) return false;
      if (TypeCase != other.TypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.BasicSli) hash ^= BasicSli.GetHashCode();
      if (typeCase_ == TypeOneofCase.RequestBased) hash ^= RequestBased.GetHashCode();
      if (typeCase_ == TypeOneofCase.WindowsBased) hash ^= WindowsBased.GetHashCode();
      hash ^= (int) typeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (typeCase_ == TypeOneofCase.RequestBased) {
        output.WriteRawTag(10);
        output.WriteMessage(RequestBased);
      }
      if (typeCase_ == TypeOneofCase.WindowsBased) {
        output.WriteRawTag(18);
        output.WriteMessage(WindowsBased);
      }
      if (typeCase_ == TypeOneofCase.BasicSli) {
        output.WriteRawTag(34);
        output.WriteMessage(BasicSli);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (typeCase_ == TypeOneofCase.RequestBased) {
        output.WriteRawTag(10);
        output.WriteMessage(RequestBased);
      }
      if (typeCase_ == TypeOneofCase.WindowsBased) {
        output.WriteRawTag(18);
        output.WriteMessage(WindowsBased);
      }
      if (typeCase_ == TypeOneofCase.BasicSli) {
        output.WriteRawTag(34);
        output.WriteMessage(BasicSli);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.BasicSli) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BasicSli);
      }
      if (typeCase_ == TypeOneofCase.RequestBased) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestBased);
      }
      if (typeCase_ == TypeOneofCase.WindowsBased) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WindowsBased);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServiceLevelIndicator other) {
      if (other == null) {
        return;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.BasicSli:
          if (BasicSli == null) {
            BasicSli = new global::Google.Cloud.Monitoring.V3.BasicSli();
          }
          BasicSli.MergeFrom(other.BasicSli);
          break;
        case TypeOneofCase.RequestBased:
          if (RequestBased == null) {
            RequestBased = new global::Google.Cloud.Monitoring.V3.RequestBasedSli();
          }
          RequestBased.MergeFrom(other.RequestBased);
          break;
        case TypeOneofCase.WindowsBased:
          if (WindowsBased == null) {
            WindowsBased = new global::Google.Cloud.Monitoring.V3.WindowsBasedSli();
          }
          WindowsBased.MergeFrom(other.WindowsBased);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Google.Cloud.Monitoring.V3.RequestBasedSli subBuilder = new global::Google.Cloud.Monitoring.V3.RequestBasedSli();
            if (typeCase_ == TypeOneofCase.RequestBased) {
              subBuilder.MergeFrom(RequestBased);
            }
            input.ReadMessage(subBuilder);
            RequestBased = subBuilder;
            break;
          }
          case 18: {
            global::Google.Cloud.Monitoring.V3.WindowsBasedSli subBuilder = new global::Google.Cloud.Monitoring.V3.WindowsBasedSli();
            if (typeCase_ == TypeOneofCase.WindowsBased) {
              subBuilder.MergeFrom(WindowsBased);
            }
            input.ReadMessage(subBuilder);
            WindowsBased = subBuilder;
            break;
          }
          case 34: {
            global::Google.Cloud.Monitoring.V3.BasicSli subBuilder = new global::Google.Cloud.Monitoring.V3.BasicSli();
            if (typeCase_ == TypeOneofCase.BasicSli) {
              subBuilder.MergeFrom(BasicSli);
            }
            input.ReadMessage(subBuilder);
            BasicSli = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Google.Cloud.Monitoring.V3.RequestBasedSli subBuilder = new global::Google.Cloud.Monitoring.V3.RequestBasedSli();
            if (typeCase_ == TypeOneofCase.RequestBased) {
              subBuilder.MergeFrom(RequestBased);
            }
            input.ReadMessage(subBuilder);
            RequestBased = subBuilder;
            break;
          }
          case 18: {
            global::Google.Cloud.Monitoring.V3.WindowsBasedSli subBuilder = new global::Google.Cloud.Monitoring.V3.WindowsBasedSli();
            if (typeCase_ == TypeOneofCase.WindowsBased) {
              subBuilder.MergeFrom(WindowsBased);
            }
            input.ReadMessage(subBuilder);
            WindowsBased = subBuilder;
            break;
          }
          case 34: {
            global::Google.Cloud.Monitoring.V3.BasicSli subBuilder = new global::Google.Cloud.Monitoring.V3.BasicSli();
            if (typeCase_ == TypeOneofCase.BasicSli) {
              subBuilder.MergeFrom(BasicSli);
            }
            input.ReadMessage(subBuilder);
            BasicSli = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// An SLI measuring performance on a well-known service type. Performance will
  /// be computed on the basis of pre-defined metrics. The type of the
  /// `service_resource` determines the metrics to use and the
  /// `service_resource.labels` and `metric_labels` are used to construct a
  /// monitoring filter to filter that metric down to just the data relevant to
  /// this service.
  /// </summary>
  public sealed partial class BasicSli : pb::IMessage<BasicSli>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BasicSli> _parser = new pb::MessageParser<BasicSli>(() => new BasicSli());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BasicSli> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Monitoring.V3.ServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicSli() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicSli(BasicSli other) : this() {
      method_ = other.method_.Clone();
      location_ = other.location_.Clone();
      version_ = other.version_.Clone();
      switch (other.SliCriteriaCase) {
        case SliCriteriaOneofCase.Availability:
          Availability = other.Availability.Clone();
          break;
        case SliCriteriaOneofCase.Latency:
          Latency = other.Latency.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicSli Clone() {
      return new BasicSli(this);
    }

    /// <summary>Field number for the "method" field.</summary>
    public const int MethodFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_method_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> method_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// OPTIONAL: The set of RPCs to which this SLI is relevant. Telemetry from
    /// other methods will not be used to calculate performance for this SLI. If
    /// omitted, this SLI applies to all the Service's methods. For service types
    /// that don't support breaking down by method, setting this field will result
    /// in an error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Method {
      get { return method_; }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_location_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> location_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// OPTIONAL: The set of locations to which this SLI is relevant. Telemetry
    /// from other locations will not be used to calculate performance for this
    /// SLI. If omitted, this SLI applies to all locations in which the Service has
    /// activity. For service types that don't support breaking down by location,
    /// setting this field will result in an error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Location {
      get { return location_; }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_version_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> version_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// OPTIONAL: The set of API versions to which this SLI is relevant. Telemetry
    /// from other API versions will not be used to calculate performance for this
    /// SLI. If omitted, this SLI applies to all API versions. For service types
    /// that don't support breaking down by version, setting this field will result
    /// in an error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Version {
      get { return version_; }
    }

    /// <summary>Field number for the "availability" field.</summary>
    public const int AvailabilityFieldNumber = 2;
    /// <summary>
    /// Good service is defined to be the count of requests made to this service
    /// that return successfully.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Monitoring.V3.BasicSli.Types.AvailabilityCriteria Availability {
      get { return sliCriteriaCase_ == SliCriteriaOneofCase.Availability ? (global::Google.Cloud.Monitoring.V3.BasicSli.Types.AvailabilityCriteria) sliCriteria_ : null; }
      set {
        sliCriteria_ = value;
        sliCriteriaCase_ = value == null ? SliCriteriaOneofCase.None : SliCriteriaOneofCase.Availability;
      }
    }

    /// <summary>Field number for the "latency" field.</summary>
    public const int LatencyFieldNumber = 3;
    /// <summary>
    /// Good service is defined to be the count of requests made to this service
    /// that are fast enough with respect to `latency.threshold`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Monitoring.V3.BasicSli.Types.LatencyCriteria Latency {
      get { return sliCriteriaCase_ == SliCriteriaOneofCase.Latency ? (global::Google.Cloud.Monitoring.V3.BasicSli.Types.LatencyCriteria) sliCriteria_ : null; }
      set {
        sliCriteria_ = value;
        sliCriteriaCase_ = value == null ? SliCriteriaOneofCase.None : SliCriteriaOneofCase.Latency;
      }
    }

    private object sliCriteria_;
    /// <summary>Enum of possible cases for the "sli_criteria" oneof.</summary>
    public enum SliCriteriaOneofCase {
      None = 0,
      Availability = 2,
      Latency = 3,
    }
    private SliCriteriaOneofCase sliCriteriaCase_ = SliCriteriaOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SliCriteriaOneofCase SliCriteriaCase {
      get { return sliCriteriaCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSliCriteria() {
      sliCriteriaCase_ = SliCriteriaOneofCase.None;
      sliCriteria_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BasicSli);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BasicSli other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!method_.Equals(other.method_)) return false;
      if(!location_.Equals(other.location_)) return false;
      if(!version_.Equals(other.version_)) return false;
      if (!object.Equals(Availability, other.Availability)) return false;
      if (!object.Equals(Latency, other.Latency)) return false;
      if (SliCriteriaCase != other.SliCriteriaCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= method_.GetHashCode();
      hash ^= location_.GetHashCode();
      hash ^= version_.GetHashCode();
      if (sliCriteriaCase_ == SliCriteriaOneofCase.Availability) hash ^= Availability.GetHashCode();
      if (sliCriteriaCase_ == SliCriteriaOneofCase.Latency) hash ^= Latency.GetHashCode();
      hash ^= (int) sliCriteriaCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (sliCriteriaCase_ == SliCriteriaOneofCase.Availability) {
        output.WriteRawTag(18);
        output.WriteMessage(Availability);
      }
      if (sliCriteriaCase_ == SliCriteriaOneofCase.Latency) {
        output.WriteRawTag(26);
        output.WriteMessage(Latency);
      }
      method_.WriteTo(output, _repeated_method_codec);
      location_.WriteTo(output, _repeated_location_codec);
      version_.WriteTo(output, _repeated_version_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (sliCriteriaCase_ == SliCriteriaOneofCase.Availability) {
        output.WriteRawTag(18);
        output.WriteMessage(Availability);
      }
      if (sliCriteriaCase_ == SliCriteriaOneofCase.Latency) {
        output.WriteRawTag(26);
        output.WriteMessage(Latency);
      }
      method_.WriteTo(ref output, _repeated_method_codec);
      location_.WriteTo(ref output, _repeated_location_codec);
      version_.WriteTo(ref output, _repeated_version_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += method_.CalculateSize(_repeated_method_codec);
      size += location_.CalculateSize(_repeated_location_codec);
      size += version_.CalculateSize(_repeated_version_codec);
      if (sliCriteriaCase_ == SliCriteriaOneofCase.Availability) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Availability);
      }
      if (sliCriteriaCase_ == SliCriteriaOneofCase.Latency) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Latency);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BasicSli other) {
      if (other == null) {
        return;
      }
      method_.Add(other.method_);
      location_.Add(other.location_);
      version_.Add(other.version_);
      switch (other.SliCriteriaCase) {
        case SliCriteriaOneofCase.Availability:
          if (Availability == null) {
            Availability = new global::Google.Cloud.Monitoring.V3.BasicSli.Types.AvailabilityCriteria();
          }
          Availability.MergeFrom(other.Availability);
          break;
        case SliCriteriaOneofCase.Latency:
          if (Latency == null) {
            Latency = new global::Google.Cloud.Monitoring.V3.BasicSli.Types.LatencyCriteria();
          }
          Latency.MergeFrom(other.Latency);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            global::Google.Cloud.Monitoring.V3.BasicSli.Types.AvailabilityCriteria subBuilder = new global::Google.Cloud.Monitoring.V3.BasicSli.Types.AvailabilityCriteria();
            if (sliCriteriaCase_ == SliCriteriaOneofCase.Availability) {
              subBuilder.MergeFrom(Availability);
            }
            input.ReadMessage(subBuilder);
            Availability = subBuilder;
            break;
          }
          case 26: {
            global::Google.Cloud.Monitoring.V3.BasicSli.Types.LatencyCriteria subBuilder = new global::Google.Cloud.Monitoring.V3.BasicSli.Types.LatencyCriteria();
            if (sliCriteriaCase_ == SliCriteriaOneofCase.Latency) {
              subBuilder.MergeFrom(Latency);
            }
            input.ReadMessage(subBuilder);
            Latency = subBuilder;
            break;
          }
          case 58: {
            method_.AddEntriesFrom(input, _repeated_method_codec);
            break;
          }
          case 66: {
            location_.AddEntriesFrom(input, _repeated_location_codec);
            break;
          }
          case 74: {
            version_.AddEntriesFrom(input, _repeated_version_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            global::Google.Cloud.Monitoring.V3.BasicSli.Types.AvailabilityCriteria subBuilder = new global::Google.Cloud.Monitoring.V3.BasicSli.Types.AvailabilityCriteria();
            if (sliCriteriaCase_ == SliCriteriaOneofCase.Availability) {
              subBuilder.MergeFrom(Availability);
            }
            input.ReadMessage(subBuilder);
            Availability = subBuilder;
            break;
          }
          case 26: {
            global::Google.Cloud.Monitoring.V3.BasicSli.Types.LatencyCriteria subBuilder = new global::Google.Cloud.Monitoring.V3.BasicSli.Types.LatencyCriteria();
            if (sliCriteriaCase_ == SliCriteriaOneofCase.Latency) {
              subBuilder.MergeFrom(Latency);
            }
            input.ReadMessage(subBuilder);
            Latency = subBuilder;
            break;
          }
          case 58: {
            method_.AddEntriesFrom(ref input, _repeated_method_codec);
            break;
          }
          case 66: {
            location_.AddEntriesFrom(ref input, _repeated_location_codec);
            break;
          }
          case 74: {
            version_.AddEntriesFrom(ref input, _repeated_version_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the BasicSli message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Future parameters for the availability SLI.
      /// </summary>
      public sealed partial class AvailabilityCriteria : pb::IMessage<AvailabilityCriteria>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AvailabilityCriteria> _parser = new pb::MessageParser<AvailabilityCriteria>(() => new AvailabilityCriteria());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AvailabilityCriteria> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Monitoring.V3.BasicSli.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AvailabilityCriteria() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AvailabilityCriteria(AvailabilityCriteria other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AvailabilityCriteria Clone() {
          return new AvailabilityCriteria(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AvailabilityCriteria);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AvailabilityCriteria other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AvailabilityCriteria other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Parameters for a latency threshold SLI.
      /// </summary>
      public sealed partial class LatencyCriteria : pb::IMessage<LatencyCriteria>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<LatencyCriteria> _parser = new pb::MessageParser<LatencyCriteria>(() => new LatencyCriteria());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LatencyCriteria> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Monitoring.V3.BasicSli.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LatencyCriteria() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LatencyCriteria(LatencyCriteria other) : this() {
          threshold_ = other.threshold_ != null ? other.threshold_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LatencyCriteria Clone() {
          return new LatencyCriteria(this);
        }

        /// <summary>Field number for the "threshold" field.</summary>
        public const int ThresholdFieldNumber = 3;
        private global::Google.Protobuf.WellKnownTypes.Duration threshold_;
        /// <summary>
        /// Good service is defined to be the count of requests made to this service
        /// that return in no more than `threshold`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Duration Threshold {
          get { return threshold_; }
          set {
            threshold_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LatencyCriteria);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LatencyCriteria other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Threshold, other.Threshold)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (threshold_ != null) hash ^= Threshold.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (threshold_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Threshold);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (threshold_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Threshold);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (threshold_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Threshold);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LatencyCriteria other) {
          if (other == null) {
            return;
          }
          if (other.threshold_ != null) {
            if (threshold_ == null) {
              Threshold = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            Threshold.MergeFrom(other.Threshold);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 26: {
                if (threshold_ == null) {
                  Threshold = new global::Google.Protobuf.WellKnownTypes.Duration();
                }
                input.ReadMessage(Threshold);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 26: {
                if (threshold_ == null) {
                  Threshold = new global::Google.Protobuf.WellKnownTypes.Duration();
                }
                input.ReadMessage(Threshold);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// Range of numerical values within `min` and `max`.
  /// </summary>
  public sealed partial class Range : pb::IMessage<Range>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Range> _parser = new pb::MessageParser<Range>(() => new Range());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Range> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Monitoring.V3.ServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Range() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Range(Range other) : this() {
      min_ = other.min_;
      max_ = other.max_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Range Clone() {
      return new Range(this);
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 1;
    private double min_;
    /// <summary>
    /// Range minimum.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Min {
      get { return min_; }
      set {
        min_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 2;
    private double max_;
    /// <summary>
    /// Range maximum.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Range);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Range other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Min, other.Min)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Max, other.Max)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Min != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Min);
      if (Max != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Max);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Min != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Min);
      }
      if (Max != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Max);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Min != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Min);
      }
      if (Max != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Max);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Min != 0D) {
        size += 1 + 8;
      }
      if (Max != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Range other) {
      if (other == null) {
        return;
      }
      if (other.Min != 0D) {
        Min = other.Min;
      }
      if (other.Max != 0D) {
        Max = other.Max;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Min = input.ReadDouble();
            break;
          }
          case 17: {
            Max = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Min = input.ReadDouble();
            break;
          }
          case 17: {
            Max = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Service Level Indicators for which atomic units of service are counted
  /// directly.
  /// </summary>
  public sealed partial class RequestBasedSli : pb::IMessage<RequestBasedSli>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RequestBasedSli> _parser = new pb::MessageParser<RequestBasedSli>(() => new RequestBasedSli());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestBasedSli> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Monitoring.V3.ServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestBasedSli() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestBasedSli(RequestBasedSli other) : this() {
      switch (other.MethodCase) {
        case MethodOneofCase.GoodTotalRatio:
          GoodTotalRatio = other.GoodTotalRatio.Clone();
          break;
        case MethodOneofCase.DistributionCut:
          DistributionCut = other.DistributionCut.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestBasedSli Clone() {
      return new RequestBasedSli(this);
    }

    /// <summary>Field number for the "good_total_ratio" field.</summary>
    public const int GoodTotalRatioFieldNumber = 1;
    /// <summary>
    /// `good_total_ratio` is used when the ratio of `good_service` to
    /// `total_service` is computed from two `TimeSeries`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Monitoring.V3.TimeSeriesRatio GoodTotalRatio {
      get { return methodCase_ == MethodOneofCase.GoodTotalRatio ? (global::Google.Cloud.Monitoring.V3.TimeSeriesRatio) method_ : null; }
      set {
        method_ = value;
        methodCase_ = value == null ? MethodOneofCase.None : MethodOneofCase.GoodTotalRatio;
      }
    }

    /// <summary>Field number for the "distribution_cut" field.</summary>
    public const int DistributionCutFieldNumber = 3;
    /// <summary>
    /// `distribution_cut` is used when `good_service` is a count of values
    /// aggregated in a `Distribution` that fall into a good range. The
    /// `total_service` is the total count of all values aggregated in the
    /// `Distribution`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Monitoring.V3.DistributionCut DistributionCut {
      get { return methodCase_ == MethodOneofCase.DistributionCut ? (global::Google.Cloud.Monitoring.V3.DistributionCut) method_ : null; }
      set {
        method_ = value;
        methodCase_ = value == null ? MethodOneofCase.None : MethodOneofCase.DistributionCut;
      }
    }

    private object method_;
    /// <summary>Enum of possible cases for the "method" oneof.</summary>
    public enum MethodOneofCase {
      None = 0,
      GoodTotalRatio = 1,
      DistributionCut = 3,
    }
    private MethodOneofCase methodCase_ = MethodOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MethodOneofCase MethodCase {
      get { return methodCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMethod() {
      methodCase_ = MethodOneofCase.None;
      method_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestBasedSli);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestBasedSli other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GoodTotalRatio, other.GoodTotalRatio)) return false;
      if (!object.Equals(DistributionCut, other.DistributionCut)) return false;
      if (MethodCase != other.MethodCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (methodCase_ == MethodOneofCase.GoodTotalRatio) hash ^= GoodTotalRatio.GetHashCode();
      if (methodCase_ == MethodOneofCase.DistributionCut) hash ^= DistributionCut.GetHashCode();
      hash ^= (int) methodCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (methodCase_ == MethodOneofCase.GoodTotalRatio) {
        output.WriteRawTag(10);
        output.WriteMessage(GoodTotalRatio);
      }
      if (methodCase_ == MethodOneofCase.DistributionCut) {
        output.WriteRawTag(26);
        output.WriteMessage(DistributionCut);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (methodCase_ == MethodOneofCase.GoodTotalRatio) {
        output.WriteRawTag(10);
        output.WriteMessage(GoodTotalRatio);
      }
      if (methodCase_ == MethodOneofCase.DistributionCut) {
        output.WriteRawTag(26);
        output.WriteMessage(DistributionCut);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (methodCase_ == MethodOneofCase.GoodTotalRatio) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GoodTotalRatio);
      }
      if (methodCase_ == MethodOneofCase.DistributionCut) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DistributionCut);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestBasedSli other) {
      if (other == null) {
        return;
      }
      switch (other.MethodCase) {
        case MethodOneofCase.GoodTotalRatio:
          if (GoodTotalRatio == null) {
            GoodTotalRatio = new global::Google.Cloud.Monitoring.V3.TimeSeriesRatio();
          }
          GoodTotalRatio.MergeFrom(other.GoodTotalRatio);
          break;
        case MethodOneofCase.DistributionCut:
          if (DistributionCut == null) {
            DistributionCut = new global::Google.Cloud.Monitoring.V3.DistributionCut();
          }
          DistributionCut.MergeFrom(other.DistributionCut);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Google.Cloud.Monitoring.V3.TimeSeriesRatio subBuilder = new global::Google.Cloud.Monitoring.V3.TimeSeriesRatio();
            if (methodCase_ == MethodOneofCase.GoodTotalRatio) {
              subBuilder.MergeFrom(GoodTotalRatio);
            }
            input.ReadMessage(subBuilder);
            GoodTotalRatio = subBuilder;
            break;
          }
          case 26: {
            global::Google.Cloud.Monitoring.V3.DistributionCut subBuilder = new global::Google.Cloud.Monitoring.V3.DistributionCut();
            if (methodCase_ == MethodOneofCase.DistributionCut) {
              subBuilder.MergeFrom(DistributionCut);
            }
            input.ReadMessage(subBuilder);
            DistributionCut = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Google.Cloud.Monitoring.V3.TimeSeriesRatio subBuilder = new global::Google.Cloud.Monitoring.V3.TimeSeriesRatio();
            if (methodCase_ == MethodOneofCase.GoodTotalRatio) {
              subBuilder.MergeFrom(GoodTotalRatio);
            }
            input.ReadMessage(subBuilder);
            GoodTotalRatio = subBuilder;
            break;
          }
          case 26: {
            global::Google.Cloud.Monitoring.V3.DistributionCut subBuilder = new global::Google.Cloud.Monitoring.V3.DistributionCut();
            if (methodCase_ == MethodOneofCase.DistributionCut) {
              subBuilder.MergeFrom(DistributionCut);
            }
            input.ReadMessage(subBuilder);
            DistributionCut = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A `TimeSeriesRatio` specifies two `TimeSeries` to use for computing the
  /// `good_service / total_service` ratio. The specified `TimeSeries` must have
  /// `ValueType = DOUBLE` or `ValueType = INT64` and must have `MetricKind =
  /// DELTA` or `MetricKind = CUMULATIVE`. The `TimeSeriesRatio` must specify
  /// exactly two of good, bad, and total, and the relationship `good_service +
  /// bad_service = total_service` will be assumed.
  /// </summary>
  public sealed partial class TimeSeriesRatio : pb::IMessage<TimeSeriesRatio>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TimeSeriesRatio> _parser = new pb::MessageParser<TimeSeriesRatio>(() => new TimeSeriesRatio());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeSeriesRatio> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Monitoring.V3.ServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSeriesRatio() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSeriesRatio(TimeSeriesRatio other) : this() {
      goodServiceFilter_ = other.goodServiceFilter_;
      badServiceFilter_ = other.badServiceFilter_;
      totalServiceFilter_ = other.totalServiceFilter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSeriesRatio Clone() {
      return new TimeSeriesRatio(this);
    }

    /// <summary>Field number for the "good_service_filter" field.</summary>
    public const int GoodServiceFilterFieldNumber = 4;
    private string goodServiceFilter_ = "";
    /// <summary>
    /// A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
    /// specifying a `TimeSeries` quantifying good service provided. Must have
    /// `ValueType = DOUBLE` or `ValueType = INT64` and must have `MetricKind =
    /// DELTA` or `MetricKind = CUMULATIVE`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GoodServiceFilter {
      get { return goodServiceFilter_; }
      set {
        goodServiceFilter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bad_service_filter" field.</summary>
    public const int BadServiceFilterFieldNumber = 5;
    private string badServiceFilter_ = "";
    /// <summary>
    /// A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
    /// specifying a `TimeSeries` quantifying bad service, either demanded service
    /// that was not provided or demanded service that was of inadequate quality.
    /// Must have `ValueType = DOUBLE` or `ValueType = INT64` and must have
    /// `MetricKind = DELTA` or `MetricKind = CUMULATIVE`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BadServiceFilter {
      get { return badServiceFilter_; }
      set {
        badServiceFilter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "total_service_filter" field.</summary>
    public const int TotalServiceFilterFieldNumber = 6;
    private string totalServiceFilter_ = "";
    /// <summary>
    /// A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
    /// specifying a `TimeSeries` quantifying total demanded service. Must have
    /// `ValueType = DOUBLE` or `ValueType = INT64` and must have `MetricKind =
    /// DELTA` or `MetricKind = CUMULATIVE`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TotalServiceFilter {
      get { return totalServiceFilter_; }
      set {
        totalServiceFilter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeSeriesRatio);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeSeriesRatio other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GoodServiceFilter != other.GoodServiceFilter) return false;
      if (BadServiceFilter != other.BadServiceFilter) return false;
      if (TotalServiceFilter != other.TotalServiceFilter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GoodServiceFilter.Length != 0) hash ^= GoodServiceFilter.GetHashCode();
      if (BadServiceFilter.Length != 0) hash ^= BadServiceFilter.GetHashCode();
      if (TotalServiceFilter.Length != 0) hash ^= TotalServiceFilter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GoodServiceFilter.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(GoodServiceFilter);
      }
      if (BadServiceFilter.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BadServiceFilter);
      }
      if (TotalServiceFilter.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TotalServiceFilter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GoodServiceFilter.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(GoodServiceFilter);
      }
      if (BadServiceFilter.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BadServiceFilter);
      }
      if (TotalServiceFilter.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TotalServiceFilter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GoodServiceFilter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GoodServiceFilter);
      }
      if (BadServiceFilter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BadServiceFilter);
      }
      if (TotalServiceFilter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TotalServiceFilter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeSeriesRatio other) {
      if (other == null) {
        return;
      }
      if (other.GoodServiceFilter.Length != 0) {
        GoodServiceFilter = other.GoodServiceFilter;
      }
      if (other.BadServiceFilter.Length != 0) {
        BadServiceFilter = other.BadServiceFilter;
      }
      if (other.TotalServiceFilter.Length != 0) {
        TotalServiceFilter = other.TotalServiceFilter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 34: {
            GoodServiceFilter = input.ReadString();
            break;
          }
          case 42: {
            BadServiceFilter = input.ReadString();
            break;
          }
          case 50: {
            TotalServiceFilter = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 34: {
            GoodServiceFilter = input.ReadString();
            break;
          }
          case 42: {
            BadServiceFilter = input.ReadString();
            break;
          }
          case 50: {
            TotalServiceFilter = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A `DistributionCut` defines a `TimeSeries` and thresholds used for measuring
  /// good service and total service. The `TimeSeries` must have `ValueType =
  /// DISTRIBUTION` and `MetricKind = DELTA` or `MetricKind = CUMULATIVE`. The
  /// computed `good_service` will be the estimated count of values in the
  /// `Distribution` that fall within the specified `min` and `max`.
  /// </summary>
  public sealed partial class DistributionCut : pb::IMessage<DistributionCut>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DistributionCut> _parser = new pb::MessageParser<DistributionCut>(() => new DistributionCut());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DistributionCut> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Monitoring.V3.ServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributionCut() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributionCut(DistributionCut other) : this() {
      distributionFilter_ = other.distributionFilter_;
      range_ = other.range_ != null ? other.range_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributionCut Clone() {
      return new DistributionCut(this);
    }

    /// <summary>Field number for the "distribution_filter" field.</summary>
    public const int DistributionFilterFieldNumber = 4;
    private string distributionFilter_ = "";
    /// <summary>
    /// A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
    /// specifying a `TimeSeries` aggregating values. Must have `ValueType =
    /// DISTRIBUTION` and `MetricKind = DELTA` or `MetricKind = CUMULATIVE`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DistributionFilter {
      get { return distributionFilter_; }
      set {
        distributionFilter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 5;
    private global::Google.Cloud.Monitoring.V3.Range range_;
    /// <summary>
    /// Range of values considered "good." For a one-sided range, set one bound to
    /// an infinite value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Monitoring.V3.Range Range {
      get { return range_; }
      set {
        range_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DistributionCut);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DistributionCut other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DistributionFilter != other.DistributionFilter) return false;
      if (!object.Equals(Range, other.Range)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DistributionFilter.Length != 0) hash ^= DistributionFilter.GetHashCode();
      if (range_ != null) hash ^= Range.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DistributionFilter.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DistributionFilter);
      }
      if (range_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Range);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DistributionFilter.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DistributionFilter);
      }
      if (range_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Range);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DistributionFilter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DistributionFilter);
      }
      if (range_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Range);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DistributionCut other) {
      if (other == null) {
        return;
      }
      if (other.DistributionFilter.Length != 0) {
        DistributionFilter = other.DistributionFilter;
      }
      if (other.range_ != null) {
        if (range_ == null) {
          Range = new global::Google.Cloud.Monitoring.V3.Range();
        }
        Range.MergeFrom(other.Range);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 34: {
            DistributionFilter = input.ReadString();
            break;
          }
          case 42: {
            if (range_ == null) {
              Range = new global::Google.Cloud.Monitoring.V3.Range();
            }
            input.ReadMessage(Range);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 34: {
            DistributionFilter = input.ReadString();
            break;
          }
          case 42: {
            if (range_ == null) {
              Range = new global::Google.Cloud.Monitoring.V3.Range();
            }
            input.ReadMessage(Range);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A `WindowsBasedSli` defines `good_service` as the count of time windows for
  /// which the provided service was of good quality. Criteria for determining
  /// if service was good are embedded in the `window_criterion`.
  /// </summary>
  public sealed partial class WindowsBasedSli : pb::IMessage<WindowsBasedSli>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WindowsBasedSli> _parser = new pb::MessageParser<WindowsBasedSli>(() => new WindowsBasedSli());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WindowsBasedSli> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Monitoring.V3.ServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowsBasedSli() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowsBasedSli(WindowsBasedSli other) : this() {
      windowPeriod_ = other.windowPeriod_ != null ? other.windowPeriod_.Clone() : null;
      switch (other.WindowCriterionCase) {
        case WindowCriterionOneofCase.GoodBadMetricFilter:
          GoodBadMetricFilter = other.GoodBadMetricFilter;
          break;
        case WindowCriterionOneofCase.GoodTotalRatioThreshold:
          GoodTotalRatioThreshold = other.GoodTotalRatioThreshold.Clone();
          break;
        case WindowCriterionOneofCase.MetricMeanInRange:
          MetricMeanInRange = other.MetricMeanInRange.Clone();
          break;
        case WindowCriterionOneofCase.MetricSumInRange:
          MetricSumInRange = other.MetricSumInRange.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowsBasedSli Clone() {
      return new WindowsBasedSli(this);
    }

    /// <summary>Field number for the "good_bad_metric_filter" field.</summary>
    public const int GoodBadMetricFilterFieldNumber = 5;
    /// <summary>
    /// A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
    /// specifying a `TimeSeries` with `ValueType = BOOL`. The window is good if
    /// any `true` values appear in the window.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GoodBadMetricFilter {
      get { return windowCriterionCase_ == WindowCriterionOneofCase.GoodBadMetricFilter ? (string) windowCriterion_ : ""; }
      set {
        windowCriterion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        windowCriterionCase_ = WindowCriterionOneofCase.GoodBadMetricFilter;
      }
    }

    /// <summary>Field number for the "good_total_ratio_threshold" field.</summary>
    public const int GoodTotalRatioThresholdFieldNumber = 2;
    /// <summary>
    /// A window is good if its `performance` is high enough.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Monitoring.V3.WindowsBasedSli.Types.PerformanceThreshold GoodTotalRatioThreshold {
      get { return windowCriterionCase_ == WindowCriterionOneofCase.GoodTotalRatioThreshold ? (global::Google.Cloud.Monitoring.V3.WindowsBasedSli.Types.PerformanceThreshold) windowCriterion_ : null; }
      set {
        windowCriterion_ = value;
        windowCriterionCase_ = value == null ? WindowCriterionOneofCase.None : WindowCriterionOneofCase.GoodTotalRatioThreshold;
      }
    }

    /// <summary>Field number for the "metric_mean_in_range" field.</summary>
    public const int MetricMeanInRangeFieldNumber = 6;
    /// <summary>
    /// A window is good if the metric's value is in a good range, averaged
    /// across returned streams.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Monitoring.V3.WindowsBasedSli.Types.MetricRange MetricMeanInRange {
      get { return windowCriterionCase_ == WindowCriterionOneofCase.MetricMeanInRange ? (global::Google.Cloud.Monitoring.V3.WindowsBasedSli.Types.MetricRange) windowCriterion_ : null; }
      set {
        windowCriterion_ = value;
        windowCriterionCase_ = value == null ? WindowCriterionOneofCase.None : WindowCriterionOneofCase.MetricMeanInRange;
      }
    }

    /// <summary>Field number for the "metric_sum_in_range" field.</summary>
    public const int MetricSumInRangeFieldNumber = 7;
    /// <summary>
    /// A window is good if the metric's value is in a good range, summed across
    /// returned streams.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Monitoring.V3.WindowsBasedSli.Types.MetricRange MetricSumInRange {
      get { return windowCriterionCase_ == WindowCriterionOneofCase.MetricSumInRange ? (global::Google.Cloud.Monitoring.V3.WindowsBasedSli.Types.MetricRange) windowCriterion_ : null; }
      set {
        windowCriterion_ = value;
        windowCriterionCase_ = value == null ? WindowCriterionOneofCase.None : WindowCriterionOneofCase.MetricSumInRange;
      }
    }

    /// <summary>Field number for the "window_period" field.</summary>
    public const int WindowPeriodFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Duration windowPeriod_;
    /// <summary>
    /// Duration over which window quality is evaluated. Must be an integer
    /// fraction of a day and at least `60s`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration WindowPeriod {
      get { return windowPeriod_; }
      set {
        windowPeriod_ = value;
      }
    }

    private object windowCriterion_;
    /// <summary>Enum of possible cases for the "window_criterion" oneof.</summary>
    public enum WindowCriterionOneofCase {
      None = 0,
      GoodBadMetricFilter = 5,
      GoodTotalRatioThreshold = 2,
      MetricMeanInRange = 6,
      MetricSumInRange = 7,
    }
    private WindowCriterionOneofCase windowCriterionCase_ = WindowCriterionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowCriterionOneofCase WindowCriterionCase {
      get { return windowCriterionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWindowCriterion() {
      windowCriterionCase_ = WindowCriterionOneofCase.None;
      windowCriterion_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WindowsBasedSli);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WindowsBasedSli other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GoodBadMetricFilter != other.GoodBadMetricFilter) return false;
      if (!object.Equals(GoodTotalRatioThreshold, other.GoodTotalRatioThreshold)) return false;
      if (!object.Equals(MetricMeanInRange, other.MetricMeanInRange)) return false;
      if (!object.Equals(MetricSumInRange, other.MetricSumInRange)) return false;
      if (!object.Equals(WindowPeriod, other.WindowPeriod)) return false;
      if (WindowCriterionCase != other.WindowCriterionCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (windowCriterionCase_ == WindowCriterionOneofCase.GoodBadMetricFilter) hash ^= GoodBadMetricFilter.GetHashCode();
      if (windowCriterionCase_ == WindowCriterionOneofCase.GoodTotalRatioThreshold) hash ^= GoodTotalRatioThreshold.GetHashCode();
      if (windowCriterionCase_ == WindowCriterionOneofCase.MetricMeanInRange) hash ^= MetricMeanInRange.GetHashCode();
      if (windowCriterionCase_ == WindowCriterionOneofCase.MetricSumInRange) hash ^= MetricSumInRange.GetHashCode();
      if (windowPeriod_ != null) hash ^= WindowPeriod.GetHashCode();
      hash ^= (int) windowCriterionCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (windowCriterionCase_ == WindowCriterionOneofCase.GoodTotalRatioThreshold) {
        output.WriteRawTag(18);
        output.WriteMessage(GoodTotalRatioThreshold);
      }
      if (windowPeriod_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WindowPeriod);
      }
      if (windowCriterionCase_ == WindowCriterionOneofCase.GoodBadMetricFilter) {
        output.WriteRawTag(42);
        output.WriteString(GoodBadMetricFilter);
      }
      if (windowCriterionCase_ == WindowCriterionOneofCase.MetricMeanInRange) {
        output.WriteRawTag(50);
        output.WriteMessage(MetricMeanInRange);
      }
      if (windowCriterionCase_ == WindowCriterionOneofCase.MetricSumInRange) {
        output.WriteRawTag(58);
        output.WriteMessage(MetricSumInRange);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (windowCriterionCase_ == WindowCriterionOneofCase.GoodTotalRatioThreshold) {
        output.WriteRawTag(18);
        output.WriteMessage(GoodTotalRatioThreshold);
      }
      if (windowPeriod_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WindowPeriod);
      }
      if (windowCriterionCase_ == WindowCriterionOneofCase.GoodBadMetricFilter) {
        output.WriteRawTag(42);
        output.WriteString(GoodBadMetricFilter);
      }
      if (windowCriterionCase_ == WindowCriterionOneofCase.MetricMeanInRange) {
        output.WriteRawTag(50);
        output.WriteMessage(MetricMeanInRange);
      }
      if (windowCriterionCase_ == WindowCriterionOneofCase.MetricSumInRange) {
        output.WriteRawTag(58);
        output.WriteMessage(MetricSumInRange);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (windowCriterionCase_ == WindowCriterionOneofCase.GoodBadMetricFilter) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GoodBadMetricFilter);
      }
      if (windowCriterionCase_ == WindowCriterionOneofCase.GoodTotalRatioThreshold) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GoodTotalRatioThreshold);
      }
      if (windowCriterionCase_ == WindowCriterionOneofCase.MetricMeanInRange) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MetricMeanInRange);
      }
      if (windowCriterionCase_ == WindowCriterionOneofCase.MetricSumInRange) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MetricSumInRange);
      }
      if (windowPeriod_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WindowPeriod);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WindowsBasedSli other) {
      if (other == null) {
        return;
      }
      if (other.windowPeriod_ != null) {
        if (windowPeriod_ == null) {
          WindowPeriod = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        WindowPeriod.MergeFrom(other.WindowPeriod);
      }
      switch (other.WindowCriterionCase) {
        case WindowCriterionOneofCase.GoodBadMetricFilter:
          GoodBadMetricFilter = other.GoodBadMetricFilter;
          break;
        case WindowCriterionOneofCase.GoodTotalRatioThreshold:
          if (GoodTotalRatioThreshold == null) {
            GoodTotalRatioThreshold = new global::Google.Cloud.Monitoring.V3.WindowsBasedSli.Types.PerformanceThreshold();
          }
          GoodTotalRatioThreshold.MergeFrom(other.GoodTotalRatioThreshold);
          break;
        case WindowCriterionOneofCase.MetricMeanInRange:
          if (MetricMeanInRange == null) {
            MetricMeanInRange = new global::Google.Cloud.Monitoring.V3.WindowsBasedSli.Types.MetricRange();
          }
          MetricMeanInRange.MergeFrom(other.MetricMeanInRange);
          break;
        case WindowCriterionOneofCase.MetricSumInRange:
          if (MetricSumInRange == null) {
            MetricSumInRange = new global::Google.Cloud.Monitoring.V3.WindowsBasedSli.Types.MetricRange();
          }
          MetricSumInRange.MergeFrom(other.MetricSumInRange);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            global::Google.Cloud.Monitoring.V3.WindowsBasedSli.Types.PerformanceThreshold subBuilder = new global::Google.Cloud.Monitoring.V3.WindowsBasedSli.Types.PerformanceThreshold();
            if (windowCriterionCase_ == WindowCriterionOneofCase.GoodTotalRatioThreshold) {
              subBuilder.MergeFrom(GoodTotalRatioThreshold);
            }
            input.ReadMessage(subBuilder);
            GoodTotalRatioThreshold = subBuilder;
            break;
          }
          case 34: {
            if (windowPeriod_ == null) {
              WindowPeriod = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(WindowPeriod);
            break;
          }
          case 42: {
            GoodBadMetricFilter = input.ReadString();
            break;
          }
          case 50: {
            global::Google.Cloud.Monitoring.V3.WindowsBasedSli.Types.MetricRange subBuilder = new global::Google.Cloud.Monitoring.V3.WindowsBasedSli.Types.MetricRange();
            if (windowCriterionCase_ == WindowCriterionOneofCase.MetricMeanInRange) {
              subBuilder.MergeFrom(MetricMeanInRange);
            }
            input.ReadMessage(subBuilder);
            MetricMeanInRange = subBuilder;
            break;
          }
          case 58: {
            global::Google.Cloud.Monitoring.V3.WindowsBasedSli.Types.MetricRange subBuilder = new global::Google.Cloud.Monitoring.V3.WindowsBasedSli.Types.MetricRange();
            if (windowCriterionCase_ == WindowCriterionOneofCase.MetricSumInRange) {
              subBuilder.MergeFrom(MetricSumInRange);
            }
            input.ReadMessage(subBuilder);
            MetricSumInRange = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            global::Google.Cloud.Monitoring.V3.WindowsBasedSli.Types.PerformanceThreshold subBuilder = new global::Google.Cloud.Monitoring.V3.WindowsBasedSli.Types.PerformanceThreshold();
            if (windowCriterionCase_ == WindowCriterionOneofCase.GoodTotalRatioThreshold) {
              subBuilder.MergeFrom(GoodTotalRatioThreshold);
            }
            input.ReadMessage(subBuilder);
            GoodTotalRatioThreshold = subBuilder;
            break;
          }
          case 34: {
            if (windowPeriod_ == null) {
              WindowPeriod = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(WindowPeriod);
            break;
          }
          case 42: {
            GoodBadMetricFilter = input.ReadString();
            break;
          }
          case 50: {
            global::Google.Cloud.Monitoring.V3.WindowsBasedSli.Types.MetricRange subBuilder = new global::Google.Cloud.Monitoring.V3.WindowsBasedSli.Types.MetricRange();
            if (windowCriterionCase_ == WindowCriterionOneofCase.MetricMeanInRange) {
              subBuilder.MergeFrom(MetricMeanInRange);
            }
            input.ReadMessage(subBuilder);
            MetricMeanInRange = subBuilder;
            break;
          }
          case 58: {
            global::Google.Cloud.Monitoring.V3.WindowsBasedSli.Types.MetricRange subBuilder = new global::Google.Cloud.Monitoring.V3.WindowsBasedSli.Types.MetricRange();
            if (windowCriterionCase_ == WindowCriterionOneofCase.MetricSumInRange) {
              subBuilder.MergeFrom(MetricSumInRange);
            }
            input.ReadMessage(subBuilder);
            MetricSumInRange = subBuilder;
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the WindowsBasedSli message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// A `PerformanceThreshold` is used when each window is good when that window
      /// has a sufficiently high `performance`.
      /// </summary>
      public sealed partial class PerformanceThreshold : pb::IMessage<PerformanceThreshold>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PerformanceThreshold> _parser = new pb::MessageParser<PerformanceThreshold>(() => new PerformanceThreshold());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PerformanceThreshold> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Monitoring.V3.WindowsBasedSli.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PerformanceThreshold() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PerformanceThreshold(PerformanceThreshold other) : this() {
          threshold_ = other.threshold_;
          switch (other.TypeCase) {
            case TypeOneofCase.Performance:
              Performance = other.Performance.Clone();
              break;
            case TypeOneofCase.BasicSliPerformance:
              BasicSliPerformance = other.BasicSliPerformance.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PerformanceThreshold Clone() {
          return new PerformanceThreshold(this);
        }

        /// <summary>Field number for the "performance" field.</summary>
        public const int PerformanceFieldNumber = 1;
        /// <summary>
        /// `RequestBasedSli` to evaluate to judge window quality.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Monitoring.V3.RequestBasedSli Performance {
          get { return typeCase_ == TypeOneofCase.Performance ? (global::Google.Cloud.Monitoring.V3.RequestBasedSli) type_ : null; }
          set {
            type_ = value;
            typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Performance;
          }
        }

        /// <summary>Field number for the "basic_sli_performance" field.</summary>
        public const int BasicSliPerformanceFieldNumber = 3;
        /// <summary>
        /// `BasicSli` to evaluate to judge window quality.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Monitoring.V3.BasicSli BasicSliPerformance {
          get { return typeCase_ == TypeOneofCase.BasicSliPerformance ? (global::Google.Cloud.Monitoring.V3.BasicSli) type_ : null; }
          set {
            type_ = value;
            typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.BasicSliPerformance;
          }
        }

        /// <summary>Field number for the "threshold" field.</summary>
        public const int ThresholdFieldNumber = 2;
        private double threshold_;
        /// <summary>
        /// If window `performance >= threshold`, the window is counted as good.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Threshold {
          get { return threshold_; }
          set {
            threshold_ = value;
          }
        }

        private object type_;
        /// <summary>Enum of possible cases for the "type" oneof.</summary>
        public enum TypeOneofCase {
          None = 0,
          Performance = 1,
          BasicSliPerformance = 3,
        }
        private TypeOneofCase typeCase_ = TypeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TypeOneofCase TypeCase {
          get { return typeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearType() {
          typeCase_ = TypeOneofCase.None;
          type_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PerformanceThreshold);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PerformanceThreshold other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Performance, other.Performance)) return false;
          if (!object.Equals(BasicSliPerformance, other.BasicSliPerformance)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Threshold, other.Threshold)) return false;
          if (TypeCase != other.TypeCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (typeCase_ == TypeOneofCase.Performance) hash ^= Performance.GetHashCode();
          if (typeCase_ == TypeOneofCase.BasicSliPerformance) hash ^= BasicSliPerformance.GetHashCode();
          if (Threshold != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Threshold);
          hash ^= (int) typeCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (typeCase_ == TypeOneofCase.Performance) {
            output.WriteRawTag(10);
            output.WriteMessage(Performance);
          }
          if (Threshold != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Threshold);
          }
          if (typeCase_ == TypeOneofCase.BasicSliPerformance) {
            output.WriteRawTag(26);
            output.WriteMessage(BasicSliPerformance);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (typeCase_ == TypeOneofCase.Performance) {
            output.WriteRawTag(10);
            output.WriteMessage(Performance);
          }
          if (Threshold != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Threshold);
          }
          if (typeCase_ == TypeOneofCase.BasicSliPerformance) {
            output.WriteRawTag(26);
            output.WriteMessage(BasicSliPerformance);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (typeCase_ == TypeOneofCase.Performance) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Performance);
          }
          if (typeCase_ == TypeOneofCase.BasicSliPerformance) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(BasicSliPerformance);
          }
          if (Threshold != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PerformanceThreshold other) {
          if (other == null) {
            return;
          }
          if (other.Threshold != 0D) {
            Threshold = other.Threshold;
          }
          switch (other.TypeCase) {
            case TypeOneofCase.Performance:
              if (Performance == null) {
                Performance = new global::Google.Cloud.Monitoring.V3.RequestBasedSli();
              }
              Performance.MergeFrom(other.Performance);
              break;
            case TypeOneofCase.BasicSliPerformance:
              if (BasicSliPerformance == null) {
                BasicSliPerformance = new global::Google.Cloud.Monitoring.V3.BasicSli();
              }
              BasicSliPerformance.MergeFrom(other.BasicSliPerformance);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::Google.Cloud.Monitoring.V3.RequestBasedSli subBuilder = new global::Google.Cloud.Monitoring.V3.RequestBasedSli();
                if (typeCase_ == TypeOneofCase.Performance) {
                  subBuilder.MergeFrom(Performance);
                }
                input.ReadMessage(subBuilder);
                Performance = subBuilder;
                break;
              }
              case 17: {
                Threshold = input.ReadDouble();
                break;
              }
              case 26: {
                global::Google.Cloud.Monitoring.V3.BasicSli subBuilder = new global::Google.Cloud.Monitoring.V3.BasicSli();
                if (typeCase_ == TypeOneofCase.BasicSliPerformance) {
                  subBuilder.MergeFrom(BasicSliPerformance);
                }
                input.ReadMessage(subBuilder);
                BasicSliPerformance = subBuilder;
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                global::Google.Cloud.Monitoring.V3.RequestBasedSli subBuilder = new global::Google.Cloud.Monitoring.V3.RequestBasedSli();
                if (typeCase_ == TypeOneofCase.Performance) {
                  subBuilder.MergeFrom(Performance);
                }
                input.ReadMessage(subBuilder);
                Performance = subBuilder;
                break;
              }
              case 17: {
                Threshold = input.ReadDouble();
                break;
              }
              case 26: {
                global::Google.Cloud.Monitoring.V3.BasicSli subBuilder = new global::Google.Cloud.Monitoring.V3.BasicSli();
                if (typeCase_ == TypeOneofCase.BasicSliPerformance) {
                  subBuilder.MergeFrom(BasicSliPerformance);
                }
                input.ReadMessage(subBuilder);
                BasicSliPerformance = subBuilder;
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// A `MetricRange` is used when each window is good when the value x of a
      /// single `TimeSeries` satisfies `range.min &lt;= x &lt;= range.max`. The provided
      /// `TimeSeries` must have `ValueType = INT64` or `ValueType = DOUBLE` and
      /// `MetricKind = GAUGE`.
      /// </summary>
      public sealed partial class MetricRange : pb::IMessage<MetricRange>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<MetricRange> _parser = new pb::MessageParser<MetricRange>(() => new MetricRange());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MetricRange> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Monitoring.V3.WindowsBasedSli.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MetricRange() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MetricRange(MetricRange other) : this() {
          timeSeries_ = other.timeSeries_;
          range_ = other.range_ != null ? other.range_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MetricRange Clone() {
          return new MetricRange(this);
        }

        /// <summary>Field number for the "time_series" field.</summary>
        public const int TimeSeriesFieldNumber = 1;
        private string timeSeries_ = "";
        /// <summary>
        /// A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
        /// specifying the `TimeSeries` to use for evaluating window quality.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TimeSeries {
          get { return timeSeries_; }
          set {
            timeSeries_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "range" field.</summary>
        public const int RangeFieldNumber = 4;
        private global::Google.Cloud.Monitoring.V3.Range range_;
        /// <summary>
        /// Range of values considered "good." For a one-sided range, set one bound
        /// to an infinite value.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Monitoring.V3.Range Range {
          get { return range_; }
          set {
            range_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MetricRange);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MetricRange other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TimeSeries != other.TimeSeries) return false;
          if (!object.Equals(Range, other.Range)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (TimeSeries.Length != 0) hash ^= TimeSeries.GetHashCode();
          if (range_ != null) hash ^= Range.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (TimeSeries.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(TimeSeries);
          }
          if (range_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Range);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (TimeSeries.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(TimeSeries);
          }
          if (range_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Range);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (TimeSeries.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TimeSeries);
          }
          if (range_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Range);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MetricRange other) {
          if (other == null) {
            return;
          }
          if (other.TimeSeries.Length != 0) {
            TimeSeries = other.TimeSeries;
          }
          if (other.range_ != null) {
            if (range_ == null) {
              Range = new global::Google.Cloud.Monitoring.V3.Range();
            }
            Range.MergeFrom(other.Range);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                TimeSeries = input.ReadString();
                break;
              }
              case 34: {
                if (range_ == null) {
                  Range = new global::Google.Cloud.Monitoring.V3.Range();
                }
                input.ReadMessage(Range);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                TimeSeries = input.ReadString();
                break;
              }
              case 34: {
                if (range_ == null) {
                  Range = new global::Google.Cloud.Monitoring.V3.Range();
                }
                input.ReadMessage(Range);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
