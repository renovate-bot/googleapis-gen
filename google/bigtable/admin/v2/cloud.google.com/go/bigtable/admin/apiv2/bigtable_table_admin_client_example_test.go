// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package admin_test

import (
	"context"

	admin "cloud.google.com/go/bigtable/admin/apiv2"
	"google.golang.org/api/iterator"
	adminpb "google.golang.org/genproto/googleapis/bigtable/admin/v2"
	iampb "google.golang.org/genproto/googleapis/iam/v1"
)

func ExampleNewBigtableTableAdminClient() {
	ctx := context.Background()
	c, err := admin.NewBigtableTableAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Use client.
	_ = c
}

func ExampleBigtableTableAdminClient_CreateTable() {
	ctx := context.Background()
	c, err := admin.NewBigtableTableAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &adminpb.CreateTableRequest{
		// TODO: Fill request struct fields.
		// See https://pkg.go.dev/google.golang.org/genproto/googleapis/bigtable/admin/v2#CreateTableRequest.
	}
	resp, err := c.CreateTable(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleBigtableTableAdminClient_CreateTableFromSnapshot() {
	ctx := context.Background()
	c, err := admin.NewBigtableTableAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &adminpb.CreateTableFromSnapshotRequest{
		// TODO: Fill request struct fields.
		// See https://pkg.go.dev/google.golang.org/genproto/googleapis/bigtable/admin/v2#CreateTableFromSnapshotRequest.
	}
	op, err := c.CreateTableFromSnapshot(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	resp, err := op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleBigtableTableAdminClient_ListTables() {
	ctx := context.Background()
	c, err := admin.NewBigtableTableAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &adminpb.ListTablesRequest{
		// TODO: Fill request struct fields.
		// See https://pkg.go.dev/google.golang.org/genproto/googleapis/bigtable/admin/v2#ListTablesRequest.
	}
	it := c.ListTables(ctx, req)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			// TODO: Handle error.
		}
		// TODO: Use resp.
		_ = resp
	}
}

func ExampleBigtableTableAdminClient_GetTable() {
	ctx := context.Background()
	c, err := admin.NewBigtableTableAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &adminpb.GetTableRequest{
		// TODO: Fill request struct fields.
		// See https://pkg.go.dev/google.golang.org/genproto/googleapis/bigtable/admin/v2#GetTableRequest.
	}
	resp, err := c.GetTable(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleBigtableTableAdminClient_DeleteTable() {
	ctx := context.Background()
	c, err := admin.NewBigtableTableAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &adminpb.DeleteTableRequest{
		// TODO: Fill request struct fields.
		// See https://pkg.go.dev/google.golang.org/genproto/googleapis/bigtable/admin/v2#DeleteTableRequest.
	}
	err = c.DeleteTable(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
}

func ExampleBigtableTableAdminClient_ModifyColumnFamilies() {
	ctx := context.Background()
	c, err := admin.NewBigtableTableAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &adminpb.ModifyColumnFamiliesRequest{
		// TODO: Fill request struct fields.
		// See https://pkg.go.dev/google.golang.org/genproto/googleapis/bigtable/admin/v2#ModifyColumnFamiliesRequest.
	}
	resp, err := c.ModifyColumnFamilies(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleBigtableTableAdminClient_DropRowRange() {
	ctx := context.Background()
	c, err := admin.NewBigtableTableAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &adminpb.DropRowRangeRequest{
		// TODO: Fill request struct fields.
		// See https://pkg.go.dev/google.golang.org/genproto/googleapis/bigtable/admin/v2#DropRowRangeRequest.
	}
	err = c.DropRowRange(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
}

func ExampleBigtableTableAdminClient_GenerateConsistencyToken() {
	ctx := context.Background()
	c, err := admin.NewBigtableTableAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &adminpb.GenerateConsistencyTokenRequest{
		// TODO: Fill request struct fields.
		// See https://pkg.go.dev/google.golang.org/genproto/googleapis/bigtable/admin/v2#GenerateConsistencyTokenRequest.
	}
	resp, err := c.GenerateConsistencyToken(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleBigtableTableAdminClient_CheckConsistency() {
	ctx := context.Background()
	c, err := admin.NewBigtableTableAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &adminpb.CheckConsistencyRequest{
		// TODO: Fill request struct fields.
		// See https://pkg.go.dev/google.golang.org/genproto/googleapis/bigtable/admin/v2#CheckConsistencyRequest.
	}
	resp, err := c.CheckConsistency(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleBigtableTableAdminClient_SnapshotTable() {
	ctx := context.Background()
	c, err := admin.NewBigtableTableAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &adminpb.SnapshotTableRequest{
		// TODO: Fill request struct fields.
		// See https://pkg.go.dev/google.golang.org/genproto/googleapis/bigtable/admin/v2#SnapshotTableRequest.
	}
	op, err := c.SnapshotTable(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	resp, err := op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleBigtableTableAdminClient_GetSnapshot() {
	ctx := context.Background()
	c, err := admin.NewBigtableTableAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &adminpb.GetSnapshotRequest{
		// TODO: Fill request struct fields.
		// See https://pkg.go.dev/google.golang.org/genproto/googleapis/bigtable/admin/v2#GetSnapshotRequest.
	}
	resp, err := c.GetSnapshot(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleBigtableTableAdminClient_ListSnapshots() {
	ctx := context.Background()
	c, err := admin.NewBigtableTableAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &adminpb.ListSnapshotsRequest{
		// TODO: Fill request struct fields.
		// See https://pkg.go.dev/google.golang.org/genproto/googleapis/bigtable/admin/v2#ListSnapshotsRequest.
	}
	it := c.ListSnapshots(ctx, req)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			// TODO: Handle error.
		}
		// TODO: Use resp.
		_ = resp
	}
}

func ExampleBigtableTableAdminClient_DeleteSnapshot() {
	ctx := context.Background()
	c, err := admin.NewBigtableTableAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &adminpb.DeleteSnapshotRequest{
		// TODO: Fill request struct fields.
		// See https://pkg.go.dev/google.golang.org/genproto/googleapis/bigtable/admin/v2#DeleteSnapshotRequest.
	}
	err = c.DeleteSnapshot(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
}

func ExampleBigtableTableAdminClient_CreateBackup() {
	ctx := context.Background()
	c, err := admin.NewBigtableTableAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &adminpb.CreateBackupRequest{
		// TODO: Fill request struct fields.
		// See https://pkg.go.dev/google.golang.org/genproto/googleapis/bigtable/admin/v2#CreateBackupRequest.
	}
	op, err := c.CreateBackup(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	resp, err := op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleBigtableTableAdminClient_GetBackup() {
	ctx := context.Background()
	c, err := admin.NewBigtableTableAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &adminpb.GetBackupRequest{
		// TODO: Fill request struct fields.
		// See https://pkg.go.dev/google.golang.org/genproto/googleapis/bigtable/admin/v2#GetBackupRequest.
	}
	resp, err := c.GetBackup(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleBigtableTableAdminClient_UpdateBackup() {
	ctx := context.Background()
	c, err := admin.NewBigtableTableAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &adminpb.UpdateBackupRequest{
		// TODO: Fill request struct fields.
		// See https://pkg.go.dev/google.golang.org/genproto/googleapis/bigtable/admin/v2#UpdateBackupRequest.
	}
	resp, err := c.UpdateBackup(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleBigtableTableAdminClient_DeleteBackup() {
	ctx := context.Background()
	c, err := admin.NewBigtableTableAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &adminpb.DeleteBackupRequest{
		// TODO: Fill request struct fields.
		// See https://pkg.go.dev/google.golang.org/genproto/googleapis/bigtable/admin/v2#DeleteBackupRequest.
	}
	err = c.DeleteBackup(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
}

func ExampleBigtableTableAdminClient_ListBackups() {
	ctx := context.Background()
	c, err := admin.NewBigtableTableAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &adminpb.ListBackupsRequest{
		// TODO: Fill request struct fields.
		// See https://pkg.go.dev/google.golang.org/genproto/googleapis/bigtable/admin/v2#ListBackupsRequest.
	}
	it := c.ListBackups(ctx, req)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			// TODO: Handle error.
		}
		// TODO: Use resp.
		_ = resp
	}
}

func ExampleBigtableTableAdminClient_RestoreTable() {
	ctx := context.Background()
	c, err := admin.NewBigtableTableAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &adminpb.RestoreTableRequest{
		// TODO: Fill request struct fields.
		// See https://pkg.go.dev/google.golang.org/genproto/googleapis/bigtable/admin/v2#RestoreTableRequest.
	}
	op, err := c.RestoreTable(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	resp, err := op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleBigtableTableAdminClient_GetIamPolicy() {
	ctx := context.Background()
	c, err := admin.NewBigtableTableAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &iampb.GetIamPolicyRequest{
		// TODO: Fill request struct fields.
		// See https://pkg.go.dev/google.golang.org/genproto/googleapis/iam/v1#GetIamPolicyRequest.
	}
	resp, err := c.GetIamPolicy(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleBigtableTableAdminClient_SetIamPolicy() {
	ctx := context.Background()
	c, err := admin.NewBigtableTableAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &iampb.SetIamPolicyRequest{
		// TODO: Fill request struct fields.
		// See https://pkg.go.dev/google.golang.org/genproto/googleapis/iam/v1#SetIamPolicyRequest.
	}
	resp, err := c.SetIamPolicy(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleBigtableTableAdminClient_TestIamPermissions() {
	ctx := context.Background()
	c, err := admin.NewBigtableTableAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &iampb.TestIamPermissionsRequest{
		// TODO: Fill request struct fields.
		// See https://pkg.go.dev/google.golang.org/genproto/googleapis/iam/v1#TestIamPermissionsRequest.
	}
	resp, err := c.TestIamPermissions(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}
