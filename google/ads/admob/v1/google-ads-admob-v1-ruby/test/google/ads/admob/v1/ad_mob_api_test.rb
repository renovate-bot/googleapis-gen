# frozen_string_literal: true

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "helper"

require "gapic/grpc/service_stub"

require "google/ads/admob/v1/admob_api_pb"
require "google/ads/admob/v1/admob_api_services_pb"
require "google/ads/admob/v1/ad_mob_api"

class ::Google::Ads::Admob::V1::AdMobApi::ClientTest < Minitest::Test
  class ClientStub
    attr_accessor :call_rpc_count, :requests

    def initialize response, operation, &block
      @response = response
      @operation = operation
      @block = block
      @call_rpc_count = 0
      @requests = []
    end

    def call_rpc *args, **kwargs
      @call_rpc_count += 1

      @requests << @block&.call(*args, **kwargs)

      yield @response, @operation if block_given?

      @response
    end
  end

  def test_get_publisher_account
    # Create GRPC objects.
    grpc_response = ::Google::Ads::Admob::V1::PublisherAccount.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"

    get_publisher_account_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :get_publisher_account, name
      assert_kind_of ::Google::Ads::Admob::V1::GetPublisherAccountRequest, request
      assert_equal "hello world", request["name"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, get_publisher_account_client_stub do
      # Create client
      client = ::Google::Ads::Admob::V1::AdMobApi::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.get_publisher_account({ name: name }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.get_publisher_account name: name do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.get_publisher_account ::Google::Ads::Admob::V1::GetPublisherAccountRequest.new(name: name) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.get_publisher_account({ name: name }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.get_publisher_account(::Google::Ads::Admob::V1::GetPublisherAccountRequest.new(name: name), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, get_publisher_account_client_stub.call_rpc_count
    end
  end

  def test_list_publisher_accounts
    # Create GRPC objects.
    grpc_response = ::Google::Ads::Admob::V1::ListPublisherAccountsResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    page_size = 42
    page_token = "hello world"

    list_publisher_accounts_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :list_publisher_accounts, name
      assert_kind_of ::Google::Ads::Admob::V1::ListPublisherAccountsRequest, request
      assert_equal 42, request["page_size"]
      assert_equal "hello world", request["page_token"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, list_publisher_accounts_client_stub do
      # Create client
      client = ::Google::Ads::Admob::V1::AdMobApi::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.list_publisher_accounts({ page_size: page_size, page_token: page_token }) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.list_publisher_accounts page_size: page_size, page_token: page_token do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.list_publisher_accounts ::Google::Ads::Admob::V1::ListPublisherAccountsRequest.new(page_size: page_size, page_token: page_token) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.list_publisher_accounts({ page_size: page_size, page_token: page_token }, grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.list_publisher_accounts(::Google::Ads::Admob::V1::ListPublisherAccountsRequest.new(page_size: page_size, page_token: page_token), grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, list_publisher_accounts_client_stub.call_rpc_count
    end
  end

  def test_generate_network_report
    # Create GRPC objects.
    grpc_response = ::Google::Ads::Admob::V1::GenerateNetworkReportResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a server streaming method.
    parent = "hello world"
    report_spec = {}

    generate_network_report_client_stub = ClientStub.new [grpc_response].to_enum, grpc_operation do |name, request, options:|
      assert_equal :generate_network_report, name
      assert_kind_of ::Google::Ads::Admob::V1::GenerateNetworkReportRequest, request
      assert_equal "hello world", request["parent"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Ads::Admob::V1::NetworkReportSpec), request["report_spec"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, generate_network_report_client_stub do
      # Create client
      client = ::Google::Ads::Admob::V1::AdMobApi::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.generate_network_report({ parent: parent, report_spec: report_spec }) do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Ads::Admob::V1::GenerateNetworkReportResponse, r
        end
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.generate_network_report parent: parent, report_spec: report_spec do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Ads::Admob::V1::GenerateNetworkReportResponse, r
        end
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.generate_network_report ::Google::Ads::Admob::V1::GenerateNetworkReportRequest.new(parent: parent, report_spec: report_spec) do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Ads::Admob::V1::GenerateNetworkReportResponse, r
        end
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.generate_network_report({ parent: parent, report_spec: report_spec }, grpc_options) do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Ads::Admob::V1::GenerateNetworkReportResponse, r
        end
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.generate_network_report(::Google::Ads::Admob::V1::GenerateNetworkReportRequest.new(parent: parent, report_spec: report_spec), grpc_options) do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Ads::Admob::V1::GenerateNetworkReportResponse, r
        end
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, generate_network_report_client_stub.call_rpc_count
    end
  end

  def test_generate_mediation_report
    # Create GRPC objects.
    grpc_response = ::Google::Ads::Admob::V1::GenerateMediationReportResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a server streaming method.
    parent = "hello world"
    report_spec = {}

    generate_mediation_report_client_stub = ClientStub.new [grpc_response].to_enum, grpc_operation do |name, request, options:|
      assert_equal :generate_mediation_report, name
      assert_kind_of ::Google::Ads::Admob::V1::GenerateMediationReportRequest, request
      assert_equal "hello world", request["parent"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Ads::Admob::V1::MediationReportSpec), request["report_spec"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, generate_mediation_report_client_stub do
      # Create client
      client = ::Google::Ads::Admob::V1::AdMobApi::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.generate_mediation_report({ parent: parent, report_spec: report_spec }) do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Ads::Admob::V1::GenerateMediationReportResponse, r
        end
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.generate_mediation_report parent: parent, report_spec: report_spec do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Ads::Admob::V1::GenerateMediationReportResponse, r
        end
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.generate_mediation_report ::Google::Ads::Admob::V1::GenerateMediationReportRequest.new(parent: parent, report_spec: report_spec) do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Ads::Admob::V1::GenerateMediationReportResponse, r
        end
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.generate_mediation_report({ parent: parent, report_spec: report_spec }, grpc_options) do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Ads::Admob::V1::GenerateMediationReportResponse, r
        end
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.generate_mediation_report(::Google::Ads::Admob::V1::GenerateMediationReportRequest.new(parent: parent, report_spec: report_spec), grpc_options) do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Ads::Admob::V1::GenerateMediationReportResponse, r
        end
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, generate_mediation_report_client_stub.call_rpc_count
    end
  end

  def test_configure
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure

    client = block_config = config = nil
    Gapic::ServiceStub.stub :new, nil do
      client = ::Google::Ads::Admob::V1::AdMobApi::Client.new do |config|
        config.credentials = grpc_channel
      end
    end

    config = client.configure do |c|
      block_config = c
    end

    assert_same block_config, config
    assert_kind_of ::Google::Ads::Admob::V1::AdMobApi::Client::Configuration, config
  end
end
