# frozen_string_literal: true

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "helper"

require "gapic/grpc/service_stub"

require "google/example/library/v1/library_pb"
require "google/example/library/v1/library_services_pb"
require "google/example/library/v1/library_service"

class ::Google::Example::Library::V1::LibraryService::ClientTest < Minitest::Test
  class ClientStub
    attr_accessor :call_rpc_count, :requests

    def initialize response, operation, &block
      @response = response
      @operation = operation
      @block = block
      @call_rpc_count = 0
      @requests = []
    end

    def call_rpc *args, **kwargs
      @call_rpc_count += 1

      @requests << @block&.call(*args, **kwargs)

      yield @response, @operation if block_given?

      @response
    end
  end

  def test_create_shelf
    # Create GRPC objects.
    grpc_response = ::Google::Example::Library::V1::Shelf.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    shelf = {}

    create_shelf_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :create_shelf, name
      assert_kind_of ::Google::Example::Library::V1::CreateShelfRequest, request
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Example::Library::V1::Shelf), request["shelf"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, create_shelf_client_stub do
      # Create client
      client = ::Google::Example::Library::V1::LibraryService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.create_shelf({ shelf: shelf }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.create_shelf shelf: shelf do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.create_shelf ::Google::Example::Library::V1::CreateShelfRequest.new(shelf: shelf) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.create_shelf({ shelf: shelf }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.create_shelf(::Google::Example::Library::V1::CreateShelfRequest.new(shelf: shelf), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, create_shelf_client_stub.call_rpc_count
    end
  end

  def test_get_shelf
    # Create GRPC objects.
    grpc_response = ::Google::Example::Library::V1::Shelf.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"

    get_shelf_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :get_shelf, name
      assert_kind_of ::Google::Example::Library::V1::GetShelfRequest, request
      assert_equal "hello world", request["name"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, get_shelf_client_stub do
      # Create client
      client = ::Google::Example::Library::V1::LibraryService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.get_shelf({ name: name }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.get_shelf name: name do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.get_shelf ::Google::Example::Library::V1::GetShelfRequest.new(name: name) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.get_shelf({ name: name }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.get_shelf(::Google::Example::Library::V1::GetShelfRequest.new(name: name), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, get_shelf_client_stub.call_rpc_count
    end
  end

  def test_list_shelves
    # Create GRPC objects.
    grpc_response = ::Google::Example::Library::V1::ListShelvesResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    page_size = 42
    page_token = "hello world"

    list_shelves_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :list_shelves, name
      assert_kind_of ::Google::Example::Library::V1::ListShelvesRequest, request
      assert_equal 42, request["page_size"]
      assert_equal "hello world", request["page_token"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, list_shelves_client_stub do
      # Create client
      client = ::Google::Example::Library::V1::LibraryService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.list_shelves({ page_size: page_size, page_token: page_token }) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.list_shelves page_size: page_size, page_token: page_token do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.list_shelves ::Google::Example::Library::V1::ListShelvesRequest.new(page_size: page_size, page_token: page_token) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.list_shelves({ page_size: page_size, page_token: page_token }, grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.list_shelves(::Google::Example::Library::V1::ListShelvesRequest.new(page_size: page_size, page_token: page_token), grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, list_shelves_client_stub.call_rpc_count
    end
  end

  def test_delete_shelf
    # Create GRPC objects.
    grpc_response = ::Google::Protobuf::Empty.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"

    delete_shelf_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :delete_shelf, name
      assert_kind_of ::Google::Example::Library::V1::DeleteShelfRequest, request
      assert_equal "hello world", request["name"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, delete_shelf_client_stub do
      # Create client
      client = ::Google::Example::Library::V1::LibraryService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.delete_shelf({ name: name }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.delete_shelf name: name do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.delete_shelf ::Google::Example::Library::V1::DeleteShelfRequest.new(name: name) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.delete_shelf({ name: name }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.delete_shelf(::Google::Example::Library::V1::DeleteShelfRequest.new(name: name), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, delete_shelf_client_stub.call_rpc_count
    end
  end

  def test_merge_shelves
    # Create GRPC objects.
    grpc_response = ::Google::Example::Library::V1::Shelf.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    other_shelf = "hello world"

    merge_shelves_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :merge_shelves, name
      assert_kind_of ::Google::Example::Library::V1::MergeShelvesRequest, request
      assert_equal "hello world", request["name"]
      assert_equal "hello world", request["other_shelf"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, merge_shelves_client_stub do
      # Create client
      client = ::Google::Example::Library::V1::LibraryService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.merge_shelves({ name: name, other_shelf: other_shelf }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.merge_shelves name: name, other_shelf: other_shelf do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.merge_shelves ::Google::Example::Library::V1::MergeShelvesRequest.new(name: name, other_shelf: other_shelf) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.merge_shelves({ name: name, other_shelf: other_shelf }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.merge_shelves(::Google::Example::Library::V1::MergeShelvesRequest.new(name: name, other_shelf: other_shelf), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, merge_shelves_client_stub.call_rpc_count
    end
  end

  def test_create_book
    # Create GRPC objects.
    grpc_response = ::Google::Example::Library::V1::Book.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    parent = "hello world"
    book = {}

    create_book_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :create_book, name
      assert_kind_of ::Google::Example::Library::V1::CreateBookRequest, request
      assert_equal "hello world", request["parent"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Example::Library::V1::Book), request["book"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, create_book_client_stub do
      # Create client
      client = ::Google::Example::Library::V1::LibraryService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.create_book({ parent: parent, book: book }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.create_book parent: parent, book: book do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.create_book ::Google::Example::Library::V1::CreateBookRequest.new(parent: parent, book: book) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.create_book({ parent: parent, book: book }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.create_book(::Google::Example::Library::V1::CreateBookRequest.new(parent: parent, book: book), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, create_book_client_stub.call_rpc_count
    end
  end

  def test_get_book
    # Create GRPC objects.
    grpc_response = ::Google::Example::Library::V1::Book.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"

    get_book_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :get_book, name
      assert_kind_of ::Google::Example::Library::V1::GetBookRequest, request
      assert_equal "hello world", request["name"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, get_book_client_stub do
      # Create client
      client = ::Google::Example::Library::V1::LibraryService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.get_book({ name: name }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.get_book name: name do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.get_book ::Google::Example::Library::V1::GetBookRequest.new(name: name) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.get_book({ name: name }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.get_book(::Google::Example::Library::V1::GetBookRequest.new(name: name), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, get_book_client_stub.call_rpc_count
    end
  end

  def test_list_books
    # Create GRPC objects.
    grpc_response = ::Google::Example::Library::V1::ListBooksResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    parent = "hello world"
    page_size = 42
    page_token = "hello world"

    list_books_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :list_books, name
      assert_kind_of ::Google::Example::Library::V1::ListBooksRequest, request
      assert_equal "hello world", request["parent"]
      assert_equal 42, request["page_size"]
      assert_equal "hello world", request["page_token"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, list_books_client_stub do
      # Create client
      client = ::Google::Example::Library::V1::LibraryService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.list_books({ parent: parent, page_size: page_size, page_token: page_token }) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.list_books parent: parent, page_size: page_size, page_token: page_token do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.list_books ::Google::Example::Library::V1::ListBooksRequest.new(parent: parent, page_size: page_size, page_token: page_token) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.list_books({ parent: parent, page_size: page_size, page_token: page_token }, grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.list_books(::Google::Example::Library::V1::ListBooksRequest.new(parent: parent, page_size: page_size, page_token: page_token), grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, list_books_client_stub.call_rpc_count
    end
  end

  def test_delete_book
    # Create GRPC objects.
    grpc_response = ::Google::Protobuf::Empty.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"

    delete_book_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :delete_book, name
      assert_kind_of ::Google::Example::Library::V1::DeleteBookRequest, request
      assert_equal "hello world", request["name"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, delete_book_client_stub do
      # Create client
      client = ::Google::Example::Library::V1::LibraryService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.delete_book({ name: name }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.delete_book name: name do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.delete_book ::Google::Example::Library::V1::DeleteBookRequest.new(name: name) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.delete_book({ name: name }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.delete_book(::Google::Example::Library::V1::DeleteBookRequest.new(name: name), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, delete_book_client_stub.call_rpc_count
    end
  end

  def test_update_book
    # Create GRPC objects.
    grpc_response = ::Google::Example::Library::V1::Book.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    book = {}
    update_mask = {}

    update_book_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :update_book, name
      assert_kind_of ::Google::Example::Library::V1::UpdateBookRequest, request
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Example::Library::V1::Book), request["book"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::FieldMask), request["update_mask"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, update_book_client_stub do
      # Create client
      client = ::Google::Example::Library::V1::LibraryService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.update_book({ book: book, update_mask: update_mask }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.update_book book: book, update_mask: update_mask do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.update_book ::Google::Example::Library::V1::UpdateBookRequest.new(book: book, update_mask: update_mask) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.update_book({ book: book, update_mask: update_mask }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.update_book(::Google::Example::Library::V1::UpdateBookRequest.new(book: book, update_mask: update_mask), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, update_book_client_stub.call_rpc_count
    end
  end

  def test_move_book
    # Create GRPC objects.
    grpc_response = ::Google::Example::Library::V1::Book.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    other_shelf_name = "hello world"

    move_book_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :move_book, name
      assert_kind_of ::Google::Example::Library::V1::MoveBookRequest, request
      assert_equal "hello world", request["name"]
      assert_equal "hello world", request["other_shelf_name"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, move_book_client_stub do
      # Create client
      client = ::Google::Example::Library::V1::LibraryService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.move_book({ name: name, other_shelf_name: other_shelf_name }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.move_book name: name, other_shelf_name: other_shelf_name do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.move_book ::Google::Example::Library::V1::MoveBookRequest.new(name: name, other_shelf_name: other_shelf_name) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.move_book({ name: name, other_shelf_name: other_shelf_name }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.move_book(::Google::Example::Library::V1::MoveBookRequest.new(name: name, other_shelf_name: other_shelf_name), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, move_book_client_stub.call_rpc_count
    end
  end

  def test_configure
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure

    client = block_config = config = nil
    Gapic::ServiceStub.stub :new, nil do
      client = ::Google::Example::Library::V1::LibraryService::Client.new do |config|
        config.credentials = grpc_channel
      end
    end

    config = client.configure do |c|
      block_config = c
    end

    assert_same block_config, config
    assert_kind_of ::Google::Example::Library::V1::LibraryService::Client::Configuration, config
  end
end
