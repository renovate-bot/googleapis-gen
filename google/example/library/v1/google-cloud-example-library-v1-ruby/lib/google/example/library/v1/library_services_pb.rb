# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: google/example/library/v1/library.proto for package 'google.example.library.v1'
# Original file comments:
# Copyright 2019 Google LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#

require 'grpc'
require 'google/example/library/v1/library_pb'

module Google
  module Example
    module Library
      module V1
        module LibraryService
          # This API represents a simple digital library. It lets you manage Shelf
          # resources and Book resources in the library. It defines the following
          # resource model:
          #
          # - The API has a collection of [Shelf][google.example.library.v1.Shelf]
          #   resources, named `shelves/*`
          #
          # - Each Shelf has a collection of [Book][google.example.library.v1.Book]
          #   resources, named `shelves/*/books/*`
          class Service

            include ::GRPC::GenericService

            self.marshal_class_method = :encode
            self.unmarshal_class_method = :decode
            self.service_name = 'google.example.library.v1.LibraryService'

            # Creates a shelf, and returns the new Shelf.
            rpc :CreateShelf, ::Google::Example::Library::V1::CreateShelfRequest, ::Google::Example::Library::V1::Shelf
            # Gets a shelf. Returns NOT_FOUND if the shelf does not exist.
            rpc :GetShelf, ::Google::Example::Library::V1::GetShelfRequest, ::Google::Example::Library::V1::Shelf
            # Lists shelves. The order is unspecified but deterministic. Newly created
            # shelves will not necessarily be added to the end of this list.
            rpc :ListShelves, ::Google::Example::Library::V1::ListShelvesRequest, ::Google::Example::Library::V1::ListShelvesResponse
            # Deletes a shelf. Returns NOT_FOUND if the shelf does not exist.
            rpc :DeleteShelf, ::Google::Example::Library::V1::DeleteShelfRequest, ::Google::Protobuf::Empty
            # Merges two shelves by adding all books from the shelf named
            # `other_shelf_name` to shelf `name`, and deletes
            # `other_shelf_name`. Returns the updated shelf.
            # The book ids of the moved books may not be the same as the original books.
            #
            # Returns NOT_FOUND if either shelf does not exist.
            # This call is a no-op if the specified shelves are the same.
            rpc :MergeShelves, ::Google::Example::Library::V1::MergeShelvesRequest, ::Google::Example::Library::V1::Shelf
            # Creates a book, and returns the new Book.
            rpc :CreateBook, ::Google::Example::Library::V1::CreateBookRequest, ::Google::Example::Library::V1::Book
            # Gets a book. Returns NOT_FOUND if the book does not exist.
            rpc :GetBook, ::Google::Example::Library::V1::GetBookRequest, ::Google::Example::Library::V1::Book
            # Lists books in a shelf. The order is unspecified but deterministic. Newly
            # created books will not necessarily be added to the end of this list.
            # Returns NOT_FOUND if the shelf does not exist.
            rpc :ListBooks, ::Google::Example::Library::V1::ListBooksRequest, ::Google::Example::Library::V1::ListBooksResponse
            # Deletes a book. Returns NOT_FOUND if the book does not exist.
            rpc :DeleteBook, ::Google::Example::Library::V1::DeleteBookRequest, ::Google::Protobuf::Empty
            # Updates a book. Returns INVALID_ARGUMENT if the name of the book
            # is non-empty and does not equal the existing name.
            rpc :UpdateBook, ::Google::Example::Library::V1::UpdateBookRequest, ::Google::Example::Library::V1::Book
            # Moves a book to another shelf, and returns the new book. The book
            # id of the new book may not be the same as the original book.
            rpc :MoveBook, ::Google::Example::Library::V1::MoveBookRequest, ::Google::Example::Library::V1::Book
          end

          Stub = Service.rpc_stub_class
        end
      end
    end
  end
end
