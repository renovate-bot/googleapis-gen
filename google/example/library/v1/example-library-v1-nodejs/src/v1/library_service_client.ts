// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, GaxCall} from 'google-gax';

import { Transform } from 'stream';
import { RequestType } from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/library_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './library_service_client_config.json';

const version = require('../../../package.json').version;

/**
 *  This API represents a simple digital library. It lets you manage Shelf
 *  resources and Book resources in the library. It defines the following
 *  resource model:
 *
 *  - The API has a collection of {@link google.example.library.v1.Shelf|Shelf}
 *    resources, named `shelves/*`
 *
 *  - Each Shelf has a collection of {@link google.example.library.v1.Book|Book}
 *    resources, named `shelves/* /books/*`
 * @class
 * @memberof v1
 */
export class LibraryServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  libraryServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of LibraryServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP fallback mode.
   *     In fallback mode, a special browser-compatible transport implementation is used
   *     instead of gRPC transport. In browser context (if the `window` object is defined)
   *     the fallback mode is enabled automatically; set `options.fallback` to `false`
   *     if you need to override this behavior.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof LibraryServiceClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      bookPathTemplate: new this._gaxModule.PathTemplate(
        'shelves/{shelf}/books/{book}'
      ),
      shelfPathTemplate: new this._gaxModule.PathTemplate(
        'shelves/{shelf_id}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listShelves:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'shelves'),
      listBooks:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'books')
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.example.library.v1.LibraryService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = gax.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.libraryServiceStub) {
      return this.libraryServiceStub;
    }

    // Put together the "service stub" for
    // google.example.library.v1.LibraryService.
    this.libraryServiceStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.example.library.v1.LibraryService') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.example.library.v1.LibraryService,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const libraryServiceStubMethods =
        ['createShelf', 'getShelf', 'listShelves', 'deleteShelf', 'mergeShelves', 'createBook', 'getBook', 'listBooks', 'deleteBook', 'updateBook', 'moveBook'];
    for (const methodName of libraryServiceStubMethods) {
      const callPromise = this.libraryServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.libraryServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'library-example.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'library-example.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  createShelf(
      request?: protos.google.example.library.v1.ICreateShelfRequest,
      options?: CallOptions):
      Promise<[
        protos.google.example.library.v1.IShelf,
        protos.google.example.library.v1.ICreateShelfRequest|undefined, {}|undefined
      ]>;
  createShelf(
      request: protos.google.example.library.v1.ICreateShelfRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.example.library.v1.IShelf,
          protos.google.example.library.v1.ICreateShelfRequest|null|undefined,
          {}|null|undefined>): void;
  createShelf(
      request: protos.google.example.library.v1.ICreateShelfRequest,
      callback: Callback<
          protos.google.example.library.v1.IShelf,
          protos.google.example.library.v1.ICreateShelfRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates a shelf, and returns the new Shelf.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.example.library.v1.Shelf} request.shelf
 *   The shelf to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Shelf]{@link google.example.library.v1.Shelf}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.createShelf(request);
 */
  createShelf(
      request?: protos.google.example.library.v1.ICreateShelfRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.example.library.v1.IShelf,
          protos.google.example.library.v1.ICreateShelfRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.example.library.v1.IShelf,
          protos.google.example.library.v1.ICreateShelfRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.example.library.v1.IShelf,
        protos.google.example.library.v1.ICreateShelfRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.createShelf(request, options, callback);
  }
  getShelf(
      request?: protos.google.example.library.v1.IGetShelfRequest,
      options?: CallOptions):
      Promise<[
        protos.google.example.library.v1.IShelf,
        protos.google.example.library.v1.IGetShelfRequest|undefined, {}|undefined
      ]>;
  getShelf(
      request: protos.google.example.library.v1.IGetShelfRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.example.library.v1.IShelf,
          protos.google.example.library.v1.IGetShelfRequest|null|undefined,
          {}|null|undefined>): void;
  getShelf(
      request: protos.google.example.library.v1.IGetShelfRequest,
      callback: Callback<
          protos.google.example.library.v1.IShelf,
          protos.google.example.library.v1.IGetShelfRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Gets a shelf. Returns NOT_FOUND if the shelf does not exist.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the shelf to retrieve.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Shelf]{@link google.example.library.v1.Shelf}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getShelf(request);
 */
  getShelf(
      request?: protos.google.example.library.v1.IGetShelfRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.example.library.v1.IShelf,
          protos.google.example.library.v1.IGetShelfRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.example.library.v1.IShelf,
          protos.google.example.library.v1.IGetShelfRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.example.library.v1.IShelf,
        protos.google.example.library.v1.IGetShelfRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getShelf(request, options, callback);
  }
  deleteShelf(
      request?: protos.google.example.library.v1.IDeleteShelfRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.example.library.v1.IDeleteShelfRequest|undefined, {}|undefined
      ]>;
  deleteShelf(
      request: protos.google.example.library.v1.IDeleteShelfRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.example.library.v1.IDeleteShelfRequest|null|undefined,
          {}|null|undefined>): void;
  deleteShelf(
      request: protos.google.example.library.v1.IDeleteShelfRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.example.library.v1.IDeleteShelfRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Deletes a shelf. Returns NOT_FOUND if the shelf does not exist.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the shelf to delete.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.deleteShelf(request);
 */
  deleteShelf(
      request?: protos.google.example.library.v1.IDeleteShelfRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.example.library.v1.IDeleteShelfRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.example.library.v1.IDeleteShelfRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.example.library.v1.IDeleteShelfRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteShelf(request, options, callback);
  }
  mergeShelves(
      request?: protos.google.example.library.v1.IMergeShelvesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.example.library.v1.IShelf,
        protos.google.example.library.v1.IMergeShelvesRequest|undefined, {}|undefined
      ]>;
  mergeShelves(
      request: protos.google.example.library.v1.IMergeShelvesRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.example.library.v1.IShelf,
          protos.google.example.library.v1.IMergeShelvesRequest|null|undefined,
          {}|null|undefined>): void;
  mergeShelves(
      request: protos.google.example.library.v1.IMergeShelvesRequest,
      callback: Callback<
          protos.google.example.library.v1.IShelf,
          protos.google.example.library.v1.IMergeShelvesRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Merges two shelves by adding all books from the shelf named
 * `other_shelf_name` to shelf `name`, and deletes
 * `other_shelf_name`. Returns the updated shelf.
 * The book ids of the moved books may not be the same as the original books.
 *
 * Returns NOT_FOUND if either shelf does not exist.
 * This call is a no-op if the specified shelves are the same.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the shelf we're adding books to.
 * @param {string} request.otherShelf
 *   The name of the shelf we're removing books from and deleting.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Shelf]{@link google.example.library.v1.Shelf}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.mergeShelves(request);
 */
  mergeShelves(
      request?: protos.google.example.library.v1.IMergeShelvesRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.example.library.v1.IShelf,
          protos.google.example.library.v1.IMergeShelvesRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.example.library.v1.IShelf,
          protos.google.example.library.v1.IMergeShelvesRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.example.library.v1.IShelf,
        protos.google.example.library.v1.IMergeShelvesRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.mergeShelves(request, options, callback);
  }
  createBook(
      request?: protos.google.example.library.v1.ICreateBookRequest,
      options?: CallOptions):
      Promise<[
        protos.google.example.library.v1.IBook,
        protos.google.example.library.v1.ICreateBookRequest|undefined, {}|undefined
      ]>;
  createBook(
      request: protos.google.example.library.v1.ICreateBookRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.example.library.v1.IBook,
          protos.google.example.library.v1.ICreateBookRequest|null|undefined,
          {}|null|undefined>): void;
  createBook(
      request: protos.google.example.library.v1.ICreateBookRequest,
      callback: Callback<
          protos.google.example.library.v1.IBook,
          protos.google.example.library.v1.ICreateBookRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates a book, and returns the new Book.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The name of the shelf in which the book is created.
 * @param {google.example.library.v1.Book} request.book
 *   The book to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Book]{@link google.example.library.v1.Book}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.createBook(request);
 */
  createBook(
      request?: protos.google.example.library.v1.ICreateBookRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.example.library.v1.IBook,
          protos.google.example.library.v1.ICreateBookRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.example.library.v1.IBook,
          protos.google.example.library.v1.ICreateBookRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.example.library.v1.IBook,
        protos.google.example.library.v1.ICreateBookRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createBook(request, options, callback);
  }
  getBook(
      request?: protos.google.example.library.v1.IGetBookRequest,
      options?: CallOptions):
      Promise<[
        protos.google.example.library.v1.IBook,
        protos.google.example.library.v1.IGetBookRequest|undefined, {}|undefined
      ]>;
  getBook(
      request: protos.google.example.library.v1.IGetBookRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.example.library.v1.IBook,
          protos.google.example.library.v1.IGetBookRequest|null|undefined,
          {}|null|undefined>): void;
  getBook(
      request: protos.google.example.library.v1.IGetBookRequest,
      callback: Callback<
          protos.google.example.library.v1.IBook,
          protos.google.example.library.v1.IGetBookRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Gets a book. Returns NOT_FOUND if the book does not exist.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the book to retrieve.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Book]{@link google.example.library.v1.Book}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getBook(request);
 */
  getBook(
      request?: protos.google.example.library.v1.IGetBookRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.example.library.v1.IBook,
          protos.google.example.library.v1.IGetBookRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.example.library.v1.IBook,
          protos.google.example.library.v1.IGetBookRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.example.library.v1.IBook,
        protos.google.example.library.v1.IGetBookRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getBook(request, options, callback);
  }
  deleteBook(
      request?: protos.google.example.library.v1.IDeleteBookRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.example.library.v1.IDeleteBookRequest|undefined, {}|undefined
      ]>;
  deleteBook(
      request: protos.google.example.library.v1.IDeleteBookRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.example.library.v1.IDeleteBookRequest|null|undefined,
          {}|null|undefined>): void;
  deleteBook(
      request: protos.google.example.library.v1.IDeleteBookRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.example.library.v1.IDeleteBookRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Deletes a book. Returns NOT_FOUND if the book does not exist.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the book to delete.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.deleteBook(request);
 */
  deleteBook(
      request?: protos.google.example.library.v1.IDeleteBookRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.example.library.v1.IDeleteBookRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.example.library.v1.IDeleteBookRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.example.library.v1.IDeleteBookRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteBook(request, options, callback);
  }
  updateBook(
      request?: protos.google.example.library.v1.IUpdateBookRequest,
      options?: CallOptions):
      Promise<[
        protos.google.example.library.v1.IBook,
        protos.google.example.library.v1.IUpdateBookRequest|undefined, {}|undefined
      ]>;
  updateBook(
      request: protos.google.example.library.v1.IUpdateBookRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.example.library.v1.IBook,
          protos.google.example.library.v1.IUpdateBookRequest|null|undefined,
          {}|null|undefined>): void;
  updateBook(
      request: protos.google.example.library.v1.IUpdateBookRequest,
      callback: Callback<
          protos.google.example.library.v1.IBook,
          protos.google.example.library.v1.IUpdateBookRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates a book. Returns INVALID_ARGUMENT if the name of the book
 * is non-empty and does not equal the existing name.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.example.library.v1.Book} request.book
 *   The name of the book to update.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. Mask of fields to update.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Book]{@link google.example.library.v1.Book}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.updateBook(request);
 */
  updateBook(
      request?: protos.google.example.library.v1.IUpdateBookRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.example.library.v1.IBook,
          protos.google.example.library.v1.IUpdateBookRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.example.library.v1.IBook,
          protos.google.example.library.v1.IUpdateBookRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.example.library.v1.IBook,
        protos.google.example.library.v1.IUpdateBookRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'book.name': request.book!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateBook(request, options, callback);
  }
  moveBook(
      request?: protos.google.example.library.v1.IMoveBookRequest,
      options?: CallOptions):
      Promise<[
        protos.google.example.library.v1.IBook,
        protos.google.example.library.v1.IMoveBookRequest|undefined, {}|undefined
      ]>;
  moveBook(
      request: protos.google.example.library.v1.IMoveBookRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.example.library.v1.IBook,
          protos.google.example.library.v1.IMoveBookRequest|null|undefined,
          {}|null|undefined>): void;
  moveBook(
      request: protos.google.example.library.v1.IMoveBookRequest,
      callback: Callback<
          protos.google.example.library.v1.IBook,
          protos.google.example.library.v1.IMoveBookRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Moves a book to another shelf, and returns the new book. The book
 * id of the new book may not be the same as the original book.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the book to move.
 * @param {string} request.otherShelfName
 *   The name of the destination shelf.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Book]{@link google.example.library.v1.Book}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.moveBook(request);
 */
  moveBook(
      request?: protos.google.example.library.v1.IMoveBookRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.example.library.v1.IBook,
          protos.google.example.library.v1.IMoveBookRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.example.library.v1.IBook,
          protos.google.example.library.v1.IMoveBookRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.example.library.v1.IBook,
        protos.google.example.library.v1.IMoveBookRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.moveBook(request, options, callback);
  }

  listShelves(
      request?: protos.google.example.library.v1.IListShelvesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.example.library.v1.IShelf[],
        protos.google.example.library.v1.IListShelvesRequest|null,
        protos.google.example.library.v1.IListShelvesResponse
      ]>;
  listShelves(
      request: protos.google.example.library.v1.IListShelvesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.example.library.v1.IListShelvesRequest,
          protos.google.example.library.v1.IListShelvesResponse|null|undefined,
          protos.google.example.library.v1.IShelf>): void;
  listShelves(
      request: protos.google.example.library.v1.IListShelvesRequest,
      callback: PaginationCallback<
          protos.google.example.library.v1.IListShelvesRequest,
          protos.google.example.library.v1.IListShelvesResponse|null|undefined,
          protos.google.example.library.v1.IShelf>): void;
/**
 * Lists shelves. The order is unspecified but deterministic. Newly created
 * shelves will not necessarily be added to the end of this list.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer shelves than requested.
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   A token identifying a page of results the server should return.
 *   Typically, this is the value of
 *   {@link google.example.library.v1.ListShelvesResponse.next_page_token|ListShelvesResponse.next_page_token}
 *   returned from the previous call to `ListShelves` method.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Shelf]{@link google.example.library.v1.Shelf}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listShelvesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listShelves(
      request?: protos.google.example.library.v1.IListShelvesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.example.library.v1.IListShelvesRequest,
          protos.google.example.library.v1.IListShelvesResponse|null|undefined,
          protos.google.example.library.v1.IShelf>,
      callback?: PaginationCallback<
          protos.google.example.library.v1.IListShelvesRequest,
          protos.google.example.library.v1.IListShelvesResponse|null|undefined,
          protos.google.example.library.v1.IShelf>):
      Promise<[
        protos.google.example.library.v1.IShelf[],
        protos.google.example.library.v1.IListShelvesRequest|null,
        protos.google.example.library.v1.IListShelvesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.listShelves(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer shelves than requested.
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   A token identifying a page of results the server should return.
 *   Typically, this is the value of
 *   {@link google.example.library.v1.ListShelvesResponse.next_page_token|ListShelvesResponse.next_page_token}
 *   returned from the previous call to `ListShelves` method.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Shelf]{@link google.example.library.v1.Shelf} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listShelvesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listShelvesStream(
      request?: protos.google.example.library.v1.IListShelvesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    const defaultCallSettings = this._defaults['listShelves'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listShelves.createStream(
      this.innerApiCalls.listShelves as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listShelves`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer shelves than requested.
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   A token identifying a page of results the server should return.
 *   Typically, this is the value of
 *   {@link google.example.library.v1.ListShelvesResponse.next_page_token|ListShelvesResponse.next_page_token}
 *   returned from the previous call to `ListShelves` method.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Shelf]{@link google.example.library.v1.Shelf}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listShelvesAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listShelvesAsync(
      request?: protos.google.example.library.v1.IListShelvesRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.example.library.v1.IShelf>{
    request = request || {};
    options = options || {};
    options = options || {};
    const defaultCallSettings = this._defaults['listShelves'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listShelves.asyncIterate(
      this.innerApiCalls['listShelves'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.example.library.v1.IShelf>;
  }
  listBooks(
      request?: protos.google.example.library.v1.IListBooksRequest,
      options?: CallOptions):
      Promise<[
        protos.google.example.library.v1.IBook[],
        protos.google.example.library.v1.IListBooksRequest|null,
        protos.google.example.library.v1.IListBooksResponse
      ]>;
  listBooks(
      request: protos.google.example.library.v1.IListBooksRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.example.library.v1.IListBooksRequest,
          protos.google.example.library.v1.IListBooksResponse|null|undefined,
          protos.google.example.library.v1.IBook>): void;
  listBooks(
      request: protos.google.example.library.v1.IListBooksRequest,
      callback: PaginationCallback<
          protos.google.example.library.v1.IListBooksRequest,
          protos.google.example.library.v1.IListBooksResponse|null|undefined,
          protos.google.example.library.v1.IBook>): void;
/**
 * Lists books in a shelf. The order is unspecified but deterministic. Newly
 * created books will not necessarily be added to the end of this list.
 * Returns NOT_FOUND if the shelf does not exist.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The name of the shelf whose books we'd like to list.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer books than requested.
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   A token identifying a page of results the server should return.
 *   Typically, this is the value of
 *   {@link google.example.library.v1.ListBooksResponse.next_page_token|ListBooksResponse.next_page_token}.
 *   returned from the previous call to `ListBooks` method.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Book]{@link google.example.library.v1.Book}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listBooksAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listBooks(
      request?: protos.google.example.library.v1.IListBooksRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.example.library.v1.IListBooksRequest,
          protos.google.example.library.v1.IListBooksResponse|null|undefined,
          protos.google.example.library.v1.IBook>,
      callback?: PaginationCallback<
          protos.google.example.library.v1.IListBooksRequest,
          protos.google.example.library.v1.IListBooksResponse|null|undefined,
          protos.google.example.library.v1.IBook>):
      Promise<[
        protos.google.example.library.v1.IBook[],
        protos.google.example.library.v1.IListBooksRequest|null,
        protos.google.example.library.v1.IListBooksResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listBooks(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The name of the shelf whose books we'd like to list.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer books than requested.
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   A token identifying a page of results the server should return.
 *   Typically, this is the value of
 *   {@link google.example.library.v1.ListBooksResponse.next_page_token|ListBooksResponse.next_page_token}.
 *   returned from the previous call to `ListBooks` method.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Book]{@link google.example.library.v1.Book} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listBooksAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listBooksStream(
      request?: protos.google.example.library.v1.IListBooksRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const defaultCallSettings = this._defaults['listBooks'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBooks.createStream(
      this.innerApiCalls.listBooks as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listBooks`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The name of the shelf whose books we'd like to list.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer books than requested.
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   A token identifying a page of results the server should return.
 *   Typically, this is the value of
 *   {@link google.example.library.v1.ListBooksResponse.next_page_token|ListBooksResponse.next_page_token}.
 *   returned from the previous call to `ListBooks` method.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Book]{@link google.example.library.v1.Book}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listBooksAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listBooksAsync(
      request?: protos.google.example.library.v1.IListBooksRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.example.library.v1.IBook>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    options = options || {};
    const defaultCallSettings = this._defaults['listBooks'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBooks.asyncIterate(
      this.innerApiCalls['listBooks'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.example.library.v1.IBook>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified book resource name string.
   *
   * @param {string} shelf
   * @param {string} book
   * @returns {string} Resource name string.
   */
  bookPath(shelf:string,book:string) {
    return this.pathTemplates.bookPathTemplate.render({
      shelf: shelf,
      book: book,
    });
  }

  /**
   * Parse the shelf from Book resource.
   *
   * @param {string} bookName
   *   A fully-qualified path representing Book resource.
   * @returns {string} A string representing the shelf.
   */
  matchShelfFromBookName(bookName: string) {
    return this.pathTemplates.bookPathTemplate.match(bookName).shelf;
  }

  /**
   * Parse the book from Book resource.
   *
   * @param {string} bookName
   *   A fully-qualified path representing Book resource.
   * @returns {string} A string representing the book.
   */
  matchBookFromBookName(bookName: string) {
    return this.pathTemplates.bookPathTemplate.match(bookName).book;
  }

  /**
   * Return a fully-qualified shelf resource name string.
   *
   * @param {string} shelf_id
   * @returns {string} Resource name string.
   */
  shelfPath(shelfId:string) {
    return this.pathTemplates.shelfPathTemplate.render({
      shelf_id: shelfId,
    });
  }

  /**
   * Parse the shelf_id from Shelf resource.
   *
   * @param {string} shelfName
   *   A fully-qualified path representing Shelf resource.
   * @returns {string} A string representing the shelf_id.
   */
  matchShelfIdFromShelfName(shelfName: string) {
    return this.pathTemplates.shelfPathTemplate.match(shelfName).shelf_id;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.libraryServiceStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
