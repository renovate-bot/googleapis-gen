// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as libraryserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1.LibraryServiceClient', () => {
    it('has servicePath', () => {
        const servicePath = libraryserviceModule.v1.LibraryServiceClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = libraryserviceModule.v1.LibraryServiceClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = libraryserviceModule.v1.LibraryServiceClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new libraryserviceModule.v1.LibraryServiceClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new libraryserviceModule.v1.LibraryServiceClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        assert.strictEqual(client.libraryServiceStub, undefined);
        await client.initialize();
        assert(client.libraryServiceStub);
    });

    it('has close method', () => {
        const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('createShelf', () => {
        it('invokes createShelf without error', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.CreateShelfRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.example.library.v1.Shelf());
            client.innerApiCalls.createShelf = stubSimpleCall(expectedResponse);
            const [response] = await client.createShelf(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createShelf as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createShelf without error using callback', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.CreateShelfRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.example.library.v1.Shelf());
            client.innerApiCalls.createShelf = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createShelf(
                    request,
                    (err?: Error|null, result?: protos.google.example.library.v1.IShelf|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createShelf as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createShelf with error', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.CreateShelfRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.createShelf = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createShelf(request), expectedError);
            assert((client.innerApiCalls.createShelf as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getShelf', () => {
        it('invokes getShelf without error', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.GetShelfRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.example.library.v1.Shelf());
            client.innerApiCalls.getShelf = stubSimpleCall(expectedResponse);
            const [response] = await client.getShelf(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getShelf as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getShelf without error using callback', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.GetShelfRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.example.library.v1.Shelf());
            client.innerApiCalls.getShelf = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getShelf(
                    request,
                    (err?: Error|null, result?: protos.google.example.library.v1.IShelf|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getShelf as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getShelf with error', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.GetShelfRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getShelf = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getShelf(request), expectedError);
            assert((client.innerApiCalls.getShelf as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteShelf', () => {
        it('invokes deleteShelf without error', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.DeleteShelfRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteShelf = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteShelf(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteShelf as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteShelf without error using callback', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.DeleteShelfRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteShelf = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteShelf(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteShelf as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteShelf with error', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.DeleteShelfRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteShelf = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteShelf(request), expectedError);
            assert((client.innerApiCalls.deleteShelf as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('mergeShelves', () => {
        it('invokes mergeShelves without error', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.MergeShelvesRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.example.library.v1.Shelf());
            client.innerApiCalls.mergeShelves = stubSimpleCall(expectedResponse);
            const [response] = await client.mergeShelves(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.mergeShelves as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes mergeShelves without error using callback', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.MergeShelvesRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.example.library.v1.Shelf());
            client.innerApiCalls.mergeShelves = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.mergeShelves(
                    request,
                    (err?: Error|null, result?: protos.google.example.library.v1.IShelf|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.mergeShelves as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes mergeShelves with error', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.MergeShelvesRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.mergeShelves = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.mergeShelves(request), expectedError);
            assert((client.innerApiCalls.mergeShelves as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createBook', () => {
        it('invokes createBook without error', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.CreateBookRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.example.library.v1.Book());
            client.innerApiCalls.createBook = stubSimpleCall(expectedResponse);
            const [response] = await client.createBook(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createBook as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createBook without error using callback', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.CreateBookRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.example.library.v1.Book());
            client.innerApiCalls.createBook = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createBook(
                    request,
                    (err?: Error|null, result?: protos.google.example.library.v1.IBook|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createBook as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createBook with error', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.CreateBookRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createBook = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createBook(request), expectedError);
            assert((client.innerApiCalls.createBook as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getBook', () => {
        it('invokes getBook without error', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.GetBookRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.example.library.v1.Book());
            client.innerApiCalls.getBook = stubSimpleCall(expectedResponse);
            const [response] = await client.getBook(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getBook as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getBook without error using callback', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.GetBookRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.example.library.v1.Book());
            client.innerApiCalls.getBook = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getBook(
                    request,
                    (err?: Error|null, result?: protos.google.example.library.v1.IBook|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getBook as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getBook with error', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.GetBookRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getBook = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getBook(request), expectedError);
            assert((client.innerApiCalls.getBook as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteBook', () => {
        it('invokes deleteBook without error', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.DeleteBookRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteBook = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteBook(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteBook as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteBook without error using callback', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.DeleteBookRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteBook = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteBook(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteBook as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteBook with error', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.DeleteBookRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteBook = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteBook(request), expectedError);
            assert((client.innerApiCalls.deleteBook as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateBook', () => {
        it('invokes updateBook without error', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.UpdateBookRequest());
            request.book = {};
            request.book.name = '';
            const expectedHeaderRequestParams = "book.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.example.library.v1.Book());
            client.innerApiCalls.updateBook = stubSimpleCall(expectedResponse);
            const [response] = await client.updateBook(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateBook as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateBook without error using callback', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.UpdateBookRequest());
            request.book = {};
            request.book.name = '';
            const expectedHeaderRequestParams = "book.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.example.library.v1.Book());
            client.innerApiCalls.updateBook = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateBook(
                    request,
                    (err?: Error|null, result?: protos.google.example.library.v1.IBook|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateBook as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateBook with error', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.UpdateBookRequest());
            request.book = {};
            request.book.name = '';
            const expectedHeaderRequestParams = "book.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateBook = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateBook(request), expectedError);
            assert((client.innerApiCalls.updateBook as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('moveBook', () => {
        it('invokes moveBook without error', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.MoveBookRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.example.library.v1.Book());
            client.innerApiCalls.moveBook = stubSimpleCall(expectedResponse);
            const [response] = await client.moveBook(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.moveBook as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes moveBook without error using callback', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.MoveBookRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.example.library.v1.Book());
            client.innerApiCalls.moveBook = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.moveBook(
                    request,
                    (err?: Error|null, result?: protos.google.example.library.v1.IBook|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.moveBook as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes moveBook with error', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.MoveBookRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.moveBook = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.moveBook(request), expectedError);
            assert((client.innerApiCalls.moveBook as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('listShelves', () => {
        it('invokes listShelves without error', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.ListShelvesRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = [
              generateSampleMessage(new protos.google.example.library.v1.Shelf()),
              generateSampleMessage(new protos.google.example.library.v1.Shelf()),
              generateSampleMessage(new protos.google.example.library.v1.Shelf()),
            ];
            client.innerApiCalls.listShelves = stubSimpleCall(expectedResponse);
            const [response] = await client.listShelves(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listShelves as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listShelves without error using callback', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.ListShelvesRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = [
              generateSampleMessage(new protos.google.example.library.v1.Shelf()),
              generateSampleMessage(new protos.google.example.library.v1.Shelf()),
              generateSampleMessage(new protos.google.example.library.v1.Shelf()),
            ];
            client.innerApiCalls.listShelves = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listShelves(
                    request,
                    (err?: Error|null, result?: protos.google.example.library.v1.IShelf[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listShelves as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listShelves with error', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.ListShelvesRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.listShelves = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listShelves(request), expectedError);
            assert((client.innerApiCalls.listShelves as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listShelvesStream without error', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.ListShelvesRequest());
            const expectedResponse = [
              generateSampleMessage(new protos.google.example.library.v1.Shelf()),
              generateSampleMessage(new protos.google.example.library.v1.Shelf()),
              generateSampleMessage(new protos.google.example.library.v1.Shelf()),
            ];
            client.descriptors.page.listShelves.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listShelvesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.example.library.v1.Shelf[] = [];
                stream.on('data', (response: protos.google.example.library.v1.Shelf) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listShelves.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listShelves, request));
        });

        it('invokes listShelvesStream with error', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.ListShelvesRequest());
            const expectedError = new Error('expected');
            client.descriptors.page.listShelves.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listShelvesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.example.library.v1.Shelf[] = [];
                stream.on('data', (response: protos.google.example.library.v1.Shelf) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listShelves.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listShelves, request));
        });

        it('uses async iteration with listShelves without error', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.ListShelvesRequest());
            const expectedResponse = [
              generateSampleMessage(new protos.google.example.library.v1.Shelf()),
              generateSampleMessage(new protos.google.example.library.v1.Shelf()),
              generateSampleMessage(new protos.google.example.library.v1.Shelf()),
            ];
            client.descriptors.page.listShelves.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.example.library.v1.IShelf[] = [];
            const iterable = client.listShelvesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listShelves.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });

        it('uses async iteration with listShelves with error', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.ListShelvesRequest());const expectedError = new Error('expected');
            client.descriptors.page.listShelves.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listShelvesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.example.library.v1.IShelf[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listShelves.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
    });

    describe('listBooks', () => {
        it('invokes listBooks without error', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.ListBooksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.example.library.v1.Book()),
              generateSampleMessage(new protos.google.example.library.v1.Book()),
              generateSampleMessage(new protos.google.example.library.v1.Book()),
            ];
            client.innerApiCalls.listBooks = stubSimpleCall(expectedResponse);
            const [response] = await client.listBooks(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listBooks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listBooks without error using callback', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.ListBooksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.example.library.v1.Book()),
              generateSampleMessage(new protos.google.example.library.v1.Book()),
              generateSampleMessage(new protos.google.example.library.v1.Book()),
            ];
            client.innerApiCalls.listBooks = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listBooks(
                    request,
                    (err?: Error|null, result?: protos.google.example.library.v1.IBook[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listBooks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listBooks with error', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.ListBooksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listBooks = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listBooks(request), expectedError);
            assert((client.innerApiCalls.listBooks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listBooksStream without error', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.ListBooksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.example.library.v1.Book()),
              generateSampleMessage(new protos.google.example.library.v1.Book()),
              generateSampleMessage(new protos.google.example.library.v1.Book()),
            ];
            client.descriptors.page.listBooks.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listBooksStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.example.library.v1.Book[] = [];
                stream.on('data', (response: protos.google.example.library.v1.Book) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listBooks.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listBooks, request));
            assert.strictEqual(
                (client.descriptors.page.listBooks.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listBooksStream with error', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.ListBooksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listBooks.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listBooksStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.example.library.v1.Book[] = [];
                stream.on('data', (response: protos.google.example.library.v1.Book) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listBooks.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listBooks, request));
            assert.strictEqual(
                (client.descriptors.page.listBooks.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listBooks without error', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.ListBooksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.example.library.v1.Book()),
              generateSampleMessage(new protos.google.example.library.v1.Book()),
              generateSampleMessage(new protos.google.example.library.v1.Book()),
            ];
            client.descriptors.page.listBooks.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.example.library.v1.IBook[] = [];
            const iterable = client.listBooksAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listBooks.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listBooks.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listBooks with error', async () => {
            const client = new libraryserviceModule.v1.LibraryServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.example.library.v1.ListBooksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listBooks.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listBooksAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.example.library.v1.IBook[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listBooks.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listBooks.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('Path templates', () => {

        describe('book', () => {
            const fakePath = "/rendered/path/book";
            const expectedParameters = {
                shelf: "shelfValue",
                book: "bookValue",
            };
            const client = new libraryserviceModule.v1.LibraryServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.bookPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.bookPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('bookPath', () => {
                const result = client.bookPath("shelfValue", "bookValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.bookPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchShelfFromBookName', () => {
                const result = client.matchShelfFromBookName(fakePath);
                assert.strictEqual(result, "shelfValue");
                assert((client.pathTemplates.bookPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBookFromBookName', () => {
                const result = client.matchBookFromBookName(fakePath);
                assert.strictEqual(result, "bookValue");
                assert((client.pathTemplates.bookPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('shelf', () => {
            const fakePath = "/rendered/path/shelf";
            const expectedParameters = {
                shelf_id: "shelfIdValue",
            };
            const client = new libraryserviceModule.v1.LibraryServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.shelfPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.shelfPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('shelfPath', () => {
                const result = client.shelfPath("shelfIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.shelfPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchShelfIdFromShelfName', () => {
                const result = client.matchShelfIdFromShelfName(fakePath);
                assert.strictEqual(result, "shelfIdValue");
                assert((client.pathTemplates.shelfPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
