# frozen_string_literal: true

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "helper"

require "gapic/grpc/service_stub"

require "google/home/graph/v1/homegraph_pb"
require "google/home/graph/v1/homegraph_services_pb"
require "google/home/graph/v1/home_graph_api_service"

class ::Google::Home::Graph::V1::HomeGraphApiService::ClientTest < Minitest::Test
  class ClientStub
    attr_accessor :call_rpc_count, :requests

    def initialize response, operation, &block
      @response = response
      @operation = operation
      @block = block
      @call_rpc_count = 0
      @requests = []
    end

    def call_rpc *args, **kwargs
      @call_rpc_count += 1

      @requests << @block&.call(*args, **kwargs)

      yield @response, @operation if block_given?

      @response
    end
  end

  def test_request_sync_devices
    # Create GRPC objects.
    grpc_response = ::Google::Home::Graph::V1::RequestSyncDevicesResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    agent_user_id = "hello world"
    async = true

    request_sync_devices_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :request_sync_devices, name
      assert_kind_of ::Google::Home::Graph::V1::RequestSyncDevicesRequest, request
      assert_equal "hello world", request["agent_user_id"]
      assert_equal true, request["async"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, request_sync_devices_client_stub do
      # Create client
      client = ::Google::Home::Graph::V1::HomeGraphApiService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.request_sync_devices({ agent_user_id: agent_user_id, async: async }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.request_sync_devices agent_user_id: agent_user_id, async: async do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.request_sync_devices ::Google::Home::Graph::V1::RequestSyncDevicesRequest.new(agent_user_id: agent_user_id, async: async) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.request_sync_devices({ agent_user_id: agent_user_id, async: async }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.request_sync_devices(::Google::Home::Graph::V1::RequestSyncDevicesRequest.new(agent_user_id: agent_user_id, async: async), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, request_sync_devices_client_stub.call_rpc_count
    end
  end

  def test_report_state_and_notification
    # Create GRPC objects.
    grpc_response = ::Google::Home::Graph::V1::ReportStateAndNotificationResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    request_id = "hello world"
    event_id = "hello world"
    agent_user_id = "hello world"
    follow_up_token = "hello world"
    payload = {}

    report_state_and_notification_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :report_state_and_notification, name
      assert_kind_of ::Google::Home::Graph::V1::ReportStateAndNotificationRequest, request
      assert_equal "hello world", request["request_id"]
      assert_equal "hello world", request["event_id"]
      assert_equal "hello world", request["agent_user_id"]
      assert_equal "hello world", request["follow_up_token"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Home::Graph::V1::StateAndNotificationPayload), request["payload"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, report_state_and_notification_client_stub do
      # Create client
      client = ::Google::Home::Graph::V1::HomeGraphApiService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.report_state_and_notification({ request_id: request_id, event_id: event_id, agent_user_id: agent_user_id, follow_up_token: follow_up_token, payload: payload }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.report_state_and_notification request_id: request_id, event_id: event_id, agent_user_id: agent_user_id, follow_up_token: follow_up_token, payload: payload do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.report_state_and_notification ::Google::Home::Graph::V1::ReportStateAndNotificationRequest.new(request_id: request_id, event_id: event_id, agent_user_id: agent_user_id, follow_up_token: follow_up_token, payload: payload) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.report_state_and_notification({ request_id: request_id, event_id: event_id, agent_user_id: agent_user_id, follow_up_token: follow_up_token, payload: payload }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.report_state_and_notification(::Google::Home::Graph::V1::ReportStateAndNotificationRequest.new(request_id: request_id, event_id: event_id, agent_user_id: agent_user_id, follow_up_token: follow_up_token, payload: payload), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, report_state_and_notification_client_stub.call_rpc_count
    end
  end

  def test_delete_agent_user
    # Create GRPC objects.
    grpc_response = ::Google::Protobuf::Empty.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    request_id = "hello world"
    agent_user_id = "hello world"

    delete_agent_user_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :delete_agent_user, name
      assert_kind_of ::Google::Home::Graph::V1::DeleteAgentUserRequest, request
      assert_equal "hello world", request["request_id"]
      assert_equal "hello world", request["agent_user_id"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, delete_agent_user_client_stub do
      # Create client
      client = ::Google::Home::Graph::V1::HomeGraphApiService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.delete_agent_user({ request_id: request_id, agent_user_id: agent_user_id }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.delete_agent_user request_id: request_id, agent_user_id: agent_user_id do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.delete_agent_user ::Google::Home::Graph::V1::DeleteAgentUserRequest.new(request_id: request_id, agent_user_id: agent_user_id) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.delete_agent_user({ request_id: request_id, agent_user_id: agent_user_id }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.delete_agent_user(::Google::Home::Graph::V1::DeleteAgentUserRequest.new(request_id: request_id, agent_user_id: agent_user_id), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, delete_agent_user_client_stub.call_rpc_count
    end
  end

  def test_query
    # Create GRPC objects.
    grpc_response = ::Google::Home::Graph::V1::QueryResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    request_id = "hello world"
    agent_user_id = "hello world"
    inputs = [{}]

    query_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :query, name
      assert_kind_of ::Google::Home::Graph::V1::QueryRequest, request
      assert_equal "hello world", request["request_id"]
      assert_equal "hello world", request["agent_user_id"]
      assert_kind_of ::Google::Home::Graph::V1::QueryRequestInput, request["inputs"].first
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, query_client_stub do
      # Create client
      client = ::Google::Home::Graph::V1::HomeGraphApiService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.query({ request_id: request_id, agent_user_id: agent_user_id, inputs: inputs }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.query request_id: request_id, agent_user_id: agent_user_id, inputs: inputs do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.query ::Google::Home::Graph::V1::QueryRequest.new(request_id: request_id, agent_user_id: agent_user_id, inputs: inputs) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.query({ request_id: request_id, agent_user_id: agent_user_id, inputs: inputs }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.query(::Google::Home::Graph::V1::QueryRequest.new(request_id: request_id, agent_user_id: agent_user_id, inputs: inputs), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, query_client_stub.call_rpc_count
    end
  end

  def test_sync
    # Create GRPC objects.
    grpc_response = ::Google::Home::Graph::V1::SyncResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    request_id = "hello world"
    agent_user_id = "hello world"

    sync_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :sync, name
      assert_kind_of ::Google::Home::Graph::V1::SyncRequest, request
      assert_equal "hello world", request["request_id"]
      assert_equal "hello world", request["agent_user_id"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, sync_client_stub do
      # Create client
      client = ::Google::Home::Graph::V1::HomeGraphApiService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.sync({ request_id: request_id, agent_user_id: agent_user_id }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.sync request_id: request_id, agent_user_id: agent_user_id do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.sync ::Google::Home::Graph::V1::SyncRequest.new(request_id: request_id, agent_user_id: agent_user_id) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.sync({ request_id: request_id, agent_user_id: agent_user_id }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.sync(::Google::Home::Graph::V1::SyncRequest.new(request_id: request_id, agent_user_id: agent_user_id), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, sync_client_stub.call_rpc_count
    end
  end

  def test_configure
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure

    client = block_config = config = nil
    Gapic::ServiceStub.stub :new, nil do
      client = ::Google::Home::Graph::V1::HomeGraphApiService::Client.new do |config|
        config.credentials = grpc_channel
      end
    end

    config = client.configure do |c|
      block_config = c
    end

    assert_same block_config, config
    assert_kind_of ::Google::Home::Graph::V1::HomeGraphApiService::Client::Configuration, config
  end
end
