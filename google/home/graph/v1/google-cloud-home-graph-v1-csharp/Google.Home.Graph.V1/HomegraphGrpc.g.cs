// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/home/graph/v1/homegraph.proto
// </auto-generated>
// Original file comments:
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Home.Graph.V1 {
  /// <summary>
  /// Google Home Graph API service. The Home Graph service provides support for
  /// accessing first-party and third-party devices stored in Google's Home Graph.
  /// The Home Graph database provides contextual data about the relationships
  /// between devices and the home.
  ///
  /// For more details, see the [Home Graph developer
  /// guide](https://developers.google.com/assistant/smarthome/concepts/homegraph).
  /// </summary>
  public static partial class HomeGraphApiService
  {
    static readonly string __ServiceName = "google.home.graph.v1.HomeGraphApiService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Home.Graph.V1.RequestSyncDevicesRequest> __Marshaller_google_home_graph_v1_RequestSyncDevicesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Home.Graph.V1.RequestSyncDevicesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Home.Graph.V1.RequestSyncDevicesResponse> __Marshaller_google_home_graph_v1_RequestSyncDevicesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Home.Graph.V1.RequestSyncDevicesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Home.Graph.V1.ReportStateAndNotificationRequest> __Marshaller_google_home_graph_v1_ReportStateAndNotificationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Home.Graph.V1.ReportStateAndNotificationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Home.Graph.V1.ReportStateAndNotificationResponse> __Marshaller_google_home_graph_v1_ReportStateAndNotificationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Home.Graph.V1.ReportStateAndNotificationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Home.Graph.V1.DeleteAgentUserRequest> __Marshaller_google_home_graph_v1_DeleteAgentUserRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Home.Graph.V1.DeleteAgentUserRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Home.Graph.V1.QueryRequest> __Marshaller_google_home_graph_v1_QueryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Home.Graph.V1.QueryRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Home.Graph.V1.QueryResponse> __Marshaller_google_home_graph_v1_QueryResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Home.Graph.V1.QueryResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Home.Graph.V1.SyncRequest> __Marshaller_google_home_graph_v1_SyncRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Home.Graph.V1.SyncRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Home.Graph.V1.SyncResponse> __Marshaller_google_home_graph_v1_SyncResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Home.Graph.V1.SyncResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Home.Graph.V1.RequestSyncDevicesRequest, global::Google.Home.Graph.V1.RequestSyncDevicesResponse> __Method_RequestSyncDevices = new grpc::Method<global::Google.Home.Graph.V1.RequestSyncDevicesRequest, global::Google.Home.Graph.V1.RequestSyncDevicesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RequestSyncDevices",
        __Marshaller_google_home_graph_v1_RequestSyncDevicesRequest,
        __Marshaller_google_home_graph_v1_RequestSyncDevicesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Home.Graph.V1.ReportStateAndNotificationRequest, global::Google.Home.Graph.V1.ReportStateAndNotificationResponse> __Method_ReportStateAndNotification = new grpc::Method<global::Google.Home.Graph.V1.ReportStateAndNotificationRequest, global::Google.Home.Graph.V1.ReportStateAndNotificationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReportStateAndNotification",
        __Marshaller_google_home_graph_v1_ReportStateAndNotificationRequest,
        __Marshaller_google_home_graph_v1_ReportStateAndNotificationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Home.Graph.V1.DeleteAgentUserRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteAgentUser = new grpc::Method<global::Google.Home.Graph.V1.DeleteAgentUserRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAgentUser",
        __Marshaller_google_home_graph_v1_DeleteAgentUserRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Home.Graph.V1.QueryRequest, global::Google.Home.Graph.V1.QueryResponse> __Method_Query = new grpc::Method<global::Google.Home.Graph.V1.QueryRequest, global::Google.Home.Graph.V1.QueryResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Query",
        __Marshaller_google_home_graph_v1_QueryRequest,
        __Marshaller_google_home_graph_v1_QueryResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Home.Graph.V1.SyncRequest, global::Google.Home.Graph.V1.SyncResponse> __Method_Sync = new grpc::Method<global::Google.Home.Graph.V1.SyncRequest, global::Google.Home.Graph.V1.SyncResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Sync",
        __Marshaller_google_home_graph_v1_SyncRequest,
        __Marshaller_google_home_graph_v1_SyncResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Home.Graph.V1.HomegraphReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of HomeGraphApiService</summary>
    [grpc::BindServiceMethod(typeof(HomeGraphApiService), "BindService")]
    public abstract partial class HomeGraphApiServiceBase
    {
      /// <summary>
      /// Requests Google to send an `action.devices.SYNC`
      /// [intent](https://developers.google.com/assistant/smarthome/reference/intent/sync)
      /// to your smart home Action to update device metadata for the given user.
      ///
      /// The third-party user's identity is passed via the `agent_user_id`
      /// (see
      /// [RequestSyncDevicesRequest][google.home.graph.v1.RequestSyncDevicesRequest]).
      /// This request must be authorized using service account credentials from your
      /// Actions console project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Home.Graph.V1.RequestSyncDevicesResponse> RequestSyncDevices(global::Google.Home.Graph.V1.RequestSyncDevicesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Reports device state and optionally sends device notifications.
      /// Called by your smart home Action when the state of a third-party device
      /// changes or you need to send a notification about the device.
      /// See [Implement Report
      /// State](https://developers.google.com/assistant/smarthome/develop/report-state)
      /// for more information.
      ///
      /// This method updates the device state according to its declared
      /// [traits](https://developers.google.com/assistant/smarthome/concepts/devices-traits).
      /// Publishing a new state value outside of these traits will result in an
      /// `INVALID_ARGUMENT` error response.
      ///
      /// The third-party user's identity is passed in via the `agent_user_id`
      /// (see
      /// [ReportStateAndNotificationRequest][google.home.graph.v1.ReportStateAndNotificationRequest]).
      /// This request must be authorized using service account credentials from your
      /// Actions console project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Home.Graph.V1.ReportStateAndNotificationResponse> ReportStateAndNotification(global::Google.Home.Graph.V1.ReportStateAndNotificationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Unlinks the given third-party user from your smart home Action.
      /// All data related to this user will be deleted.
      ///
      /// For more details on how users link their accounts, see
      /// [fulfillment and
      /// authentication](https://developers.google.com/assistant/smarthome/concepts/fulfillment-authentication).
      ///
      /// The third-party user's identity is passed in via the `agent_user_id`
      /// (see
      /// [DeleteAgentUserRequest][google.home.graph.v1.DeleteAgentUserRequest]).
      /// This request must be authorized using service account credentials from your
      /// Actions console project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteAgentUser(global::Google.Home.Graph.V1.DeleteAgentUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the current states in Home Graph for the given set of the third-party
      /// user's devices.
      ///
      /// The third-party user's identity is passed in via the `agent_user_id`
      /// (see [QueryRequest][google.home.graph.v1.QueryRequest]).
      /// This request must be authorized using service account credentials from your
      /// Actions console project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Home.Graph.V1.QueryResponse> Query(global::Google.Home.Graph.V1.QueryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets all the devices associated with the given third-party user.
      ///
      /// The third-party user's identity is passed in via the `agent_user_id`
      /// (see [SyncRequest][google.home.graph.v1.SyncRequest]).
      /// This request must be authorized using service account credentials from your
      /// Actions console project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Home.Graph.V1.SyncResponse> Sync(global::Google.Home.Graph.V1.SyncRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for HomeGraphApiService</summary>
    public partial class HomeGraphApiServiceClient : grpc::ClientBase<HomeGraphApiServiceClient>
    {
      /// <summary>Creates a new client for HomeGraphApiService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public HomeGraphApiServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for HomeGraphApiService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public HomeGraphApiServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected HomeGraphApiServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected HomeGraphApiServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Requests Google to send an `action.devices.SYNC`
      /// [intent](https://developers.google.com/assistant/smarthome/reference/intent/sync)
      /// to your smart home Action to update device metadata for the given user.
      ///
      /// The third-party user's identity is passed via the `agent_user_id`
      /// (see
      /// [RequestSyncDevicesRequest][google.home.graph.v1.RequestSyncDevicesRequest]).
      /// This request must be authorized using service account credentials from your
      /// Actions console project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Home.Graph.V1.RequestSyncDevicesResponse RequestSyncDevices(global::Google.Home.Graph.V1.RequestSyncDevicesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RequestSyncDevices(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Requests Google to send an `action.devices.SYNC`
      /// [intent](https://developers.google.com/assistant/smarthome/reference/intent/sync)
      /// to your smart home Action to update device metadata for the given user.
      ///
      /// The third-party user's identity is passed via the `agent_user_id`
      /// (see
      /// [RequestSyncDevicesRequest][google.home.graph.v1.RequestSyncDevicesRequest]).
      /// This request must be authorized using service account credentials from your
      /// Actions console project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Home.Graph.V1.RequestSyncDevicesResponse RequestSyncDevices(global::Google.Home.Graph.V1.RequestSyncDevicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RequestSyncDevices, null, options, request);
      }
      /// <summary>
      /// Requests Google to send an `action.devices.SYNC`
      /// [intent](https://developers.google.com/assistant/smarthome/reference/intent/sync)
      /// to your smart home Action to update device metadata for the given user.
      ///
      /// The third-party user's identity is passed via the `agent_user_id`
      /// (see
      /// [RequestSyncDevicesRequest][google.home.graph.v1.RequestSyncDevicesRequest]).
      /// This request must be authorized using service account credentials from your
      /// Actions console project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Home.Graph.V1.RequestSyncDevicesResponse> RequestSyncDevicesAsync(global::Google.Home.Graph.V1.RequestSyncDevicesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RequestSyncDevicesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Requests Google to send an `action.devices.SYNC`
      /// [intent](https://developers.google.com/assistant/smarthome/reference/intent/sync)
      /// to your smart home Action to update device metadata for the given user.
      ///
      /// The third-party user's identity is passed via the `agent_user_id`
      /// (see
      /// [RequestSyncDevicesRequest][google.home.graph.v1.RequestSyncDevicesRequest]).
      /// This request must be authorized using service account credentials from your
      /// Actions console project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Home.Graph.V1.RequestSyncDevicesResponse> RequestSyncDevicesAsync(global::Google.Home.Graph.V1.RequestSyncDevicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RequestSyncDevices, null, options, request);
      }
      /// <summary>
      /// Reports device state and optionally sends device notifications.
      /// Called by your smart home Action when the state of a third-party device
      /// changes or you need to send a notification about the device.
      /// See [Implement Report
      /// State](https://developers.google.com/assistant/smarthome/develop/report-state)
      /// for more information.
      ///
      /// This method updates the device state according to its declared
      /// [traits](https://developers.google.com/assistant/smarthome/concepts/devices-traits).
      /// Publishing a new state value outside of these traits will result in an
      /// `INVALID_ARGUMENT` error response.
      ///
      /// The third-party user's identity is passed in via the `agent_user_id`
      /// (see
      /// [ReportStateAndNotificationRequest][google.home.graph.v1.ReportStateAndNotificationRequest]).
      /// This request must be authorized using service account credentials from your
      /// Actions console project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Home.Graph.V1.ReportStateAndNotificationResponse ReportStateAndNotification(global::Google.Home.Graph.V1.ReportStateAndNotificationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReportStateAndNotification(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Reports device state and optionally sends device notifications.
      /// Called by your smart home Action when the state of a third-party device
      /// changes or you need to send a notification about the device.
      /// See [Implement Report
      /// State](https://developers.google.com/assistant/smarthome/develop/report-state)
      /// for more information.
      ///
      /// This method updates the device state according to its declared
      /// [traits](https://developers.google.com/assistant/smarthome/concepts/devices-traits).
      /// Publishing a new state value outside of these traits will result in an
      /// `INVALID_ARGUMENT` error response.
      ///
      /// The third-party user's identity is passed in via the `agent_user_id`
      /// (see
      /// [ReportStateAndNotificationRequest][google.home.graph.v1.ReportStateAndNotificationRequest]).
      /// This request must be authorized using service account credentials from your
      /// Actions console project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Home.Graph.V1.ReportStateAndNotificationResponse ReportStateAndNotification(global::Google.Home.Graph.V1.ReportStateAndNotificationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReportStateAndNotification, null, options, request);
      }
      /// <summary>
      /// Reports device state and optionally sends device notifications.
      /// Called by your smart home Action when the state of a third-party device
      /// changes or you need to send a notification about the device.
      /// See [Implement Report
      /// State](https://developers.google.com/assistant/smarthome/develop/report-state)
      /// for more information.
      ///
      /// This method updates the device state according to its declared
      /// [traits](https://developers.google.com/assistant/smarthome/concepts/devices-traits).
      /// Publishing a new state value outside of these traits will result in an
      /// `INVALID_ARGUMENT` error response.
      ///
      /// The third-party user's identity is passed in via the `agent_user_id`
      /// (see
      /// [ReportStateAndNotificationRequest][google.home.graph.v1.ReportStateAndNotificationRequest]).
      /// This request must be authorized using service account credentials from your
      /// Actions console project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Home.Graph.V1.ReportStateAndNotificationResponse> ReportStateAndNotificationAsync(global::Google.Home.Graph.V1.ReportStateAndNotificationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReportStateAndNotificationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Reports device state and optionally sends device notifications.
      /// Called by your smart home Action when the state of a third-party device
      /// changes or you need to send a notification about the device.
      /// See [Implement Report
      /// State](https://developers.google.com/assistant/smarthome/develop/report-state)
      /// for more information.
      ///
      /// This method updates the device state according to its declared
      /// [traits](https://developers.google.com/assistant/smarthome/concepts/devices-traits).
      /// Publishing a new state value outside of these traits will result in an
      /// `INVALID_ARGUMENT` error response.
      ///
      /// The third-party user's identity is passed in via the `agent_user_id`
      /// (see
      /// [ReportStateAndNotificationRequest][google.home.graph.v1.ReportStateAndNotificationRequest]).
      /// This request must be authorized using service account credentials from your
      /// Actions console project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Home.Graph.V1.ReportStateAndNotificationResponse> ReportStateAndNotificationAsync(global::Google.Home.Graph.V1.ReportStateAndNotificationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReportStateAndNotification, null, options, request);
      }
      /// <summary>
      /// Unlinks the given third-party user from your smart home Action.
      /// All data related to this user will be deleted.
      ///
      /// For more details on how users link their accounts, see
      /// [fulfillment and
      /// authentication](https://developers.google.com/assistant/smarthome/concepts/fulfillment-authentication).
      ///
      /// The third-party user's identity is passed in via the `agent_user_id`
      /// (see
      /// [DeleteAgentUserRequest][google.home.graph.v1.DeleteAgentUserRequest]).
      /// This request must be authorized using service account credentials from your
      /// Actions console project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteAgentUser(global::Google.Home.Graph.V1.DeleteAgentUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAgentUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Unlinks the given third-party user from your smart home Action.
      /// All data related to this user will be deleted.
      ///
      /// For more details on how users link their accounts, see
      /// [fulfillment and
      /// authentication](https://developers.google.com/assistant/smarthome/concepts/fulfillment-authentication).
      ///
      /// The third-party user's identity is passed in via the `agent_user_id`
      /// (see
      /// [DeleteAgentUserRequest][google.home.graph.v1.DeleteAgentUserRequest]).
      /// This request must be authorized using service account credentials from your
      /// Actions console project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteAgentUser(global::Google.Home.Graph.V1.DeleteAgentUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAgentUser, null, options, request);
      }
      /// <summary>
      /// Unlinks the given third-party user from your smart home Action.
      /// All data related to this user will be deleted.
      ///
      /// For more details on how users link their accounts, see
      /// [fulfillment and
      /// authentication](https://developers.google.com/assistant/smarthome/concepts/fulfillment-authentication).
      ///
      /// The third-party user's identity is passed in via the `agent_user_id`
      /// (see
      /// [DeleteAgentUserRequest][google.home.graph.v1.DeleteAgentUserRequest]).
      /// This request must be authorized using service account credentials from your
      /// Actions console project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteAgentUserAsync(global::Google.Home.Graph.V1.DeleteAgentUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAgentUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Unlinks the given third-party user from your smart home Action.
      /// All data related to this user will be deleted.
      ///
      /// For more details on how users link their accounts, see
      /// [fulfillment and
      /// authentication](https://developers.google.com/assistant/smarthome/concepts/fulfillment-authentication).
      ///
      /// The third-party user's identity is passed in via the `agent_user_id`
      /// (see
      /// [DeleteAgentUserRequest][google.home.graph.v1.DeleteAgentUserRequest]).
      /// This request must be authorized using service account credentials from your
      /// Actions console project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteAgentUserAsync(global::Google.Home.Graph.V1.DeleteAgentUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAgentUser, null, options, request);
      }
      /// <summary>
      /// Gets the current states in Home Graph for the given set of the third-party
      /// user's devices.
      ///
      /// The third-party user's identity is passed in via the `agent_user_id`
      /// (see [QueryRequest][google.home.graph.v1.QueryRequest]).
      /// This request must be authorized using service account credentials from your
      /// Actions console project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Home.Graph.V1.QueryResponse Query(global::Google.Home.Graph.V1.QueryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Query(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the current states in Home Graph for the given set of the third-party
      /// user's devices.
      ///
      /// The third-party user's identity is passed in via the `agent_user_id`
      /// (see [QueryRequest][google.home.graph.v1.QueryRequest]).
      /// This request must be authorized using service account credentials from your
      /// Actions console project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Home.Graph.V1.QueryResponse Query(global::Google.Home.Graph.V1.QueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Query, null, options, request);
      }
      /// <summary>
      /// Gets the current states in Home Graph for the given set of the third-party
      /// user's devices.
      ///
      /// The third-party user's identity is passed in via the `agent_user_id`
      /// (see [QueryRequest][google.home.graph.v1.QueryRequest]).
      /// This request must be authorized using service account credentials from your
      /// Actions console project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Home.Graph.V1.QueryResponse> QueryAsync(global::Google.Home.Graph.V1.QueryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the current states in Home Graph for the given set of the third-party
      /// user's devices.
      ///
      /// The third-party user's identity is passed in via the `agent_user_id`
      /// (see [QueryRequest][google.home.graph.v1.QueryRequest]).
      /// This request must be authorized using service account credentials from your
      /// Actions console project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Home.Graph.V1.QueryResponse> QueryAsync(global::Google.Home.Graph.V1.QueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Query, null, options, request);
      }
      /// <summary>
      /// Gets all the devices associated with the given third-party user.
      ///
      /// The third-party user's identity is passed in via the `agent_user_id`
      /// (see [SyncRequest][google.home.graph.v1.SyncRequest]).
      /// This request must be authorized using service account credentials from your
      /// Actions console project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Home.Graph.V1.SyncResponse Sync(global::Google.Home.Graph.V1.SyncRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Sync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets all the devices associated with the given third-party user.
      ///
      /// The third-party user's identity is passed in via the `agent_user_id`
      /// (see [SyncRequest][google.home.graph.v1.SyncRequest]).
      /// This request must be authorized using service account credentials from your
      /// Actions console project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Home.Graph.V1.SyncResponse Sync(global::Google.Home.Graph.V1.SyncRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Sync, null, options, request);
      }
      /// <summary>
      /// Gets all the devices associated with the given third-party user.
      ///
      /// The third-party user's identity is passed in via the `agent_user_id`
      /// (see [SyncRequest][google.home.graph.v1.SyncRequest]).
      /// This request must be authorized using service account credentials from your
      /// Actions console project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Home.Graph.V1.SyncResponse> SyncAsync(global::Google.Home.Graph.V1.SyncRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SyncAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets all the devices associated with the given third-party user.
      ///
      /// The third-party user's identity is passed in via the `agent_user_id`
      /// (see [SyncRequest][google.home.graph.v1.SyncRequest]).
      /// This request must be authorized using service account credentials from your
      /// Actions console project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Home.Graph.V1.SyncResponse> SyncAsync(global::Google.Home.Graph.V1.SyncRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Sync, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override HomeGraphApiServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new HomeGraphApiServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(HomeGraphApiServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_RequestSyncDevices, serviceImpl.RequestSyncDevices)
          .AddMethod(__Method_ReportStateAndNotification, serviceImpl.ReportStateAndNotification)
          .AddMethod(__Method_DeleteAgentUser, serviceImpl.DeleteAgentUser)
          .AddMethod(__Method_Query, serviceImpl.Query)
          .AddMethod(__Method_Sync, serviceImpl.Sync).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, HomeGraphApiServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_RequestSyncDevices, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Home.Graph.V1.RequestSyncDevicesRequest, global::Google.Home.Graph.V1.RequestSyncDevicesResponse>(serviceImpl.RequestSyncDevices));
      serviceBinder.AddMethod(__Method_ReportStateAndNotification, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Home.Graph.V1.ReportStateAndNotificationRequest, global::Google.Home.Graph.V1.ReportStateAndNotificationResponse>(serviceImpl.ReportStateAndNotification));
      serviceBinder.AddMethod(__Method_DeleteAgentUser, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Home.Graph.V1.DeleteAgentUserRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteAgentUser));
      serviceBinder.AddMethod(__Method_Query, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Home.Graph.V1.QueryRequest, global::Google.Home.Graph.V1.QueryResponse>(serviceImpl.Query));
      serviceBinder.AddMethod(__Method_Sync, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Home.Graph.V1.SyncRequest, global::Google.Home.Graph.V1.SyncResponse>(serviceImpl.Sync));
    }

  }
}
#endregion
