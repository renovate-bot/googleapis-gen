// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as homegraphapiserviceModule from '../src';

import {protobuf} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

describe('v1.HomeGraphApiServiceClient', () => {
    it('has servicePath', () => {
        const servicePath = homegraphapiserviceModule.v1.HomeGraphApiServiceClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = homegraphapiserviceModule.v1.HomeGraphApiServiceClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = homegraphapiserviceModule.v1.HomeGraphApiServiceClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new homegraphapiserviceModule.v1.HomeGraphApiServiceClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new homegraphapiserviceModule.v1.HomeGraphApiServiceClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new homegraphapiserviceModule.v1.HomeGraphApiServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        assert.strictEqual(client.homeGraphApiServiceStub, undefined);
        await client.initialize();
        assert(client.homeGraphApiServiceStub);
    });

    it('has close method', () => {
        const client = new homegraphapiserviceModule.v1.HomeGraphApiServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new homegraphapiserviceModule.v1.HomeGraphApiServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new homegraphapiserviceModule.v1.HomeGraphApiServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('requestSyncDevices', () => {
        it('invokes requestSyncDevices without error', async () => {
            const client = new homegraphapiserviceModule.v1.HomeGraphApiServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.graph.v1.RequestSyncDevicesRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.home.graph.v1.RequestSyncDevicesResponse());
            client.innerApiCalls.requestSyncDevices = stubSimpleCall(expectedResponse);
            const [response] = await client.requestSyncDevices(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.requestSyncDevices as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes requestSyncDevices without error using callback', async () => {
            const client = new homegraphapiserviceModule.v1.HomeGraphApiServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.graph.v1.RequestSyncDevicesRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.home.graph.v1.RequestSyncDevicesResponse());
            client.innerApiCalls.requestSyncDevices = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.requestSyncDevices(
                    request,
                    (err?: Error|null, result?: protos.google.home.graph.v1.IRequestSyncDevicesResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.requestSyncDevices as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes requestSyncDevices with error', async () => {
            const client = new homegraphapiserviceModule.v1.HomeGraphApiServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.graph.v1.RequestSyncDevicesRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.requestSyncDevices = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.requestSyncDevices(request), expectedError);
            assert((client.innerApiCalls.requestSyncDevices as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('reportStateAndNotification', () => {
        it('invokes reportStateAndNotification without error', async () => {
            const client = new homegraphapiserviceModule.v1.HomeGraphApiServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.graph.v1.ReportStateAndNotificationRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.home.graph.v1.ReportStateAndNotificationResponse());
            client.innerApiCalls.reportStateAndNotification = stubSimpleCall(expectedResponse);
            const [response] = await client.reportStateAndNotification(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.reportStateAndNotification as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes reportStateAndNotification without error using callback', async () => {
            const client = new homegraphapiserviceModule.v1.HomeGraphApiServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.graph.v1.ReportStateAndNotificationRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.home.graph.v1.ReportStateAndNotificationResponse());
            client.innerApiCalls.reportStateAndNotification = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.reportStateAndNotification(
                    request,
                    (err?: Error|null, result?: protos.google.home.graph.v1.IReportStateAndNotificationResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.reportStateAndNotification as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes reportStateAndNotification with error', async () => {
            const client = new homegraphapiserviceModule.v1.HomeGraphApiServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.graph.v1.ReportStateAndNotificationRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.reportStateAndNotification = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.reportStateAndNotification(request), expectedError);
            assert((client.innerApiCalls.reportStateAndNotification as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteAgentUser', () => {
        it('invokes deleteAgentUser without error', async () => {
            const client = new homegraphapiserviceModule.v1.HomeGraphApiServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.graph.v1.DeleteAgentUserRequest());
            request.agentUserId = '';
            const expectedHeaderRequestParams = "agent_user_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteAgentUser = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteAgentUser(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteAgentUser as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteAgentUser without error using callback', async () => {
            const client = new homegraphapiserviceModule.v1.HomeGraphApiServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.graph.v1.DeleteAgentUserRequest());
            request.agentUserId = '';
            const expectedHeaderRequestParams = "agent_user_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteAgentUser = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteAgentUser(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteAgentUser as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteAgentUser with error', async () => {
            const client = new homegraphapiserviceModule.v1.HomeGraphApiServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.graph.v1.DeleteAgentUserRequest());
            request.agentUserId = '';
            const expectedHeaderRequestParams = "agent_user_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteAgentUser = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteAgentUser(request), expectedError);
            assert((client.innerApiCalls.deleteAgentUser as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('query', () => {
        it('invokes query without error', async () => {
            const client = new homegraphapiserviceModule.v1.HomeGraphApiServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.graph.v1.QueryRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.home.graph.v1.QueryResponse());
            client.innerApiCalls.query = stubSimpleCall(expectedResponse);
            const [response] = await client.query(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.query as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes query without error using callback', async () => {
            const client = new homegraphapiserviceModule.v1.HomeGraphApiServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.graph.v1.QueryRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.home.graph.v1.QueryResponse());
            client.innerApiCalls.query = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.query(
                    request,
                    (err?: Error|null, result?: protos.google.home.graph.v1.IQueryResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.query as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes query with error', async () => {
            const client = new homegraphapiserviceModule.v1.HomeGraphApiServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.graph.v1.QueryRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.query = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.query(request), expectedError);
            assert((client.innerApiCalls.query as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('sync', () => {
        it('invokes sync without error', async () => {
            const client = new homegraphapiserviceModule.v1.HomeGraphApiServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.graph.v1.SyncRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.home.graph.v1.SyncResponse());
            client.innerApiCalls.sync = stubSimpleCall(expectedResponse);
            const [response] = await client.sync(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.sync as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes sync without error using callback', async () => {
            const client = new homegraphapiserviceModule.v1.HomeGraphApiServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.graph.v1.SyncRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.home.graph.v1.SyncResponse());
            client.innerApiCalls.sync = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.sync(
                    request,
                    (err?: Error|null, result?: protos.google.home.graph.v1.ISyncResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.sync as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes sync with error', async () => {
            const client = new homegraphapiserviceModule.v1.HomeGraphApiServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.graph.v1.SyncRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.sync = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.sync(request), expectedError);
            assert((client.innerApiCalls.sync as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('Path templates', () => {

        describe('agentUserPath', () => {
            const fakePath = "/rendered/path/agentUserPath";
            const expectedParameters = {
                agent_user_path: "agentUserPathValue",
            };
            const client = new homegraphapiserviceModule.v1.HomeGraphApiServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.agentUserPathPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.agentUserPathPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('agentUserPathPath', () => {
                const result = client.agentUserPathPath("agentUserPathValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.agentUserPathPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchAgentUserPathFromAgentUserPathName', () => {
                const result = client.matchAgentUserPathFromAgentUserPathName(fakePath);
                assert.strictEqual(result, "agentUserPathValue");
                assert((client.pathTemplates.agentUserPathPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
