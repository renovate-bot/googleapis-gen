# frozen_string_literal: true

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/cloud/errors"
require "google/home/enterprise/sdm/v1/smart_device_management_service_pb"

module Google
  module Home
    module Enterprise
      module Sdm
        module V1
          module SmartDeviceManagementService
            ##
            # Client for the SmartDeviceManagementService service.
            #
            # A service that allows API consumers to provision and manage Google
            # Home structures and devices for enterprise use cases.
            #
            class Client
              # @private
              attr_reader :smart_device_management_service_stub

              ##
              # Configure the SmartDeviceManagementService Client class.
              #
              # See {::Google::Home::Enterprise::Sdm::V1::SmartDeviceManagementService::Client::Configuration}
              # for a description of the configuration fields.
              #
              # @example
              #
              #   # Modify the configuration for all SmartDeviceManagementService clients
              #   ::Google::Home::Enterprise::Sdm::V1::SmartDeviceManagementService::Client.configure do |config|
              #     config.timeout = 10.0
              #   end
              #
              # @yield [config] Configure the Client client.
              # @yieldparam config [Client::Configuration]
              #
              # @return [Client::Configuration]
              #
              def self.configure
                @configure ||= begin
                  namespace = ["Google", "Home", "Enterprise", "Sdm", "V1"]
                  parent_config = while namespace.any?
                                    parent_name = namespace.join "::"
                                    parent_const = const_get parent_name
                                    break parent_const.configure if parent_const.respond_to? :configure
                                    namespace.pop
                                  end
                  default_config = Client::Configuration.new parent_config

                  default_config.rpcs.get_device.timeout = 60.0
                  default_config.rpcs.get_device.retry_policy = {
                    initial_delay: 1.0, max_delay: 10.0, multiplier: 1.3, retry_codes: [14]
                  }

                  default_config.rpcs.list_devices.timeout = 60.0
                  default_config.rpcs.list_devices.retry_policy = {
                    initial_delay: 1.0, max_delay: 10.0, multiplier: 1.3, retry_codes: [14]
                  }

                  default_config.rpcs.execute_device_command.timeout = 60.0

                  default_config.rpcs.get_structure.timeout = 60.0
                  default_config.rpcs.get_structure.retry_policy = {
                    initial_delay: 1.0, max_delay: 10.0, multiplier: 1.3, retry_codes: [14]
                  }

                  default_config.rpcs.list_structures.timeout = 60.0
                  default_config.rpcs.list_structures.retry_policy = {
                    initial_delay: 1.0, max_delay: 10.0, multiplier: 1.3, retry_codes: [14]
                  }

                  default_config.rpcs.get_room.timeout = 60.0
                  default_config.rpcs.get_room.retry_policy = {
                    initial_delay: 1.0, max_delay: 10.0, multiplier: 1.3, retry_codes: [14]
                  }

                  default_config.rpcs.list_rooms.timeout = 60.0
                  default_config.rpcs.list_rooms.retry_policy = {
                    initial_delay: 1.0, max_delay: 10.0, multiplier: 1.3, retry_codes: [14]
                  }

                  default_config
                end
                yield @configure if block_given?
                @configure
              end

              ##
              # Configure the SmartDeviceManagementService Client instance.
              #
              # The configuration is set to the derived mode, meaning that values can be changed,
              # but structural changes (adding new fields, etc.) are not allowed. Structural changes
              # should be made on {Client.configure}.
              #
              # See {::Google::Home::Enterprise::Sdm::V1::SmartDeviceManagementService::Client::Configuration}
              # for a description of the configuration fields.
              #
              # @yield [config] Configure the Client client.
              # @yieldparam config [Client::Configuration]
              #
              # @return [Client::Configuration]
              #
              def configure
                yield @config if block_given?
                @config
              end

              ##
              # Create a new SmartDeviceManagementService client object.
              #
              # @example
              #
              #   # Create a client using the default configuration
              #   client = ::Google::Home::Enterprise::Sdm::V1::SmartDeviceManagementService::Client.new
              #
              #   # Create a client using a custom configuration
              #   client = ::Google::Home::Enterprise::Sdm::V1::SmartDeviceManagementService::Client.new do |config|
              #     config.timeout = 10.0
              #   end
              #
              # @yield [config] Configure the SmartDeviceManagementService client.
              # @yieldparam config [Client::Configuration]
              #
              def initialize
                # These require statements are intentionally placed here to initialize
                # the gRPC module only when it's required.
                # See https://github.com/googleapis/toolkit/issues/446
                require "gapic/grpc"
                require "google/home/enterprise/sdm/v1/smart_device_management_service_services_pb"

                # Create the configuration object
                @config = Configuration.new Client.configure

                # Yield the configuration if needed
                yield @config if block_given?

                # Create credentials
                credentials = @config.credentials
                # Use self-signed JWT if the endpoint is unchanged from default,
                # but only if the default endpoint does not have a region prefix.
                enable_self_signed_jwt = @config.endpoint == Client.configure.endpoint &&
                                         !@config.endpoint.split(".").first.include?("-")
                credentials ||= Credentials.default scope: @config.scope,
                                                    enable_self_signed_jwt: enable_self_signed_jwt
                if credentials.is_a?(::String) || credentials.is_a?(::Hash)
                  credentials = Credentials.new credentials, scope: @config.scope
                end
                @quota_project_id = @config.quota_project
                @quota_project_id ||= credentials.quota_project_id if credentials.respond_to? :quota_project_id

                @smart_device_management_service_stub = ::Gapic::ServiceStub.new(
                  ::Google::Home::Enterprise::Sdm::V1::SmartDeviceManagementService::Stub,
                  credentials:  credentials,
                  endpoint:     @config.endpoint,
                  channel_args: @config.channel_args,
                  interceptors: @config.interceptors
                )
              end

              # Service calls

              ##
              # Gets a device managed by the enterprise.
              #
              # @overload get_device(request, options = nil)
              #   Pass arguments to `get_device` via a request object, either of type
              #   {::Google::Home::Enterprise::Sdm::V1::GetDeviceRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Home::Enterprise::Sdm::V1::GetDeviceRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload get_device(name: nil)
              #   Pass arguments to `get_device` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param name [::String]
              #     The name of the device requested. For example:
              #     "enterprises/XYZ/devices/123"
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Google::Home::Enterprise::Sdm::V1::Device]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Google::Home::Enterprise::Sdm::V1::Device]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              def get_device request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Home::Enterprise::Sdm::V1::GetDeviceRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.get_device.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Sdm::V1::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.name
                  header_params["name"] = request.name
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.get_device.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.get_device.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @smart_device_management_service_stub.call_rpc :get_device, request, options: options do |response, operation|
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Lists devices managed by the enterprise.
              #
              # @overload list_devices(request, options = nil)
              #   Pass arguments to `list_devices` via a request object, either of type
              #   {::Google::Home::Enterprise::Sdm::V1::ListDevicesRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Home::Enterprise::Sdm::V1::ListDevicesRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload list_devices(parent: nil, page_size: nil, page_token: nil, filter: nil)
              #   Pass arguments to `list_devices` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param parent [::String]
              #     The parent enterprise to list devices under. E.g. "enterprises/XYZ".
              #   @param page_size [::Integer]
              #     Optional requested page size. Server may return fewer devices than
              #     requested. If unspecified, server will pick an appropriate default.
              #   @param page_token [::String]
              #     Optional token of the page to retrieve.
              #   @param filter [::String]
              #     Optional filter to list devices.
              #
              #     Filters can match the exact parent (could be a structure or a room):
              #     'parent=enterprises/XYZ/structures/jkl'
              #     or filter by device custom name (substring match):
              #     'customName=wing'
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Gapic::PagedEnumerable<::Google::Home::Enterprise::Sdm::V1::Device>]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Gapic::PagedEnumerable<::Google::Home::Enterprise::Sdm::V1::Device>]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              def list_devices request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Home::Enterprise::Sdm::V1::ListDevicesRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.list_devices.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Sdm::V1::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.parent
                  header_params["parent"] = request.parent
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.list_devices.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.list_devices.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @smart_device_management_service_stub.call_rpc :list_devices, request, options: options do |response, operation|
                  response = ::Gapic::PagedEnumerable.new @smart_device_management_service_stub, :list_devices, request, response, operation, options
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Executes a command to device managed by the enterprise.
              #
              # @overload execute_device_command(request, options = nil)
              #   Pass arguments to `execute_device_command` via a request object, either of type
              #   {::Google::Home::Enterprise::Sdm::V1::ExecuteDeviceCommandRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Home::Enterprise::Sdm::V1::ExecuteDeviceCommandRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload execute_device_command(name: nil, command: nil, params: nil)
              #   Pass arguments to `execute_device_command` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param name [::String]
              #     The name of the device requested. For example:
              #     "enterprises/XYZ/devices/123"
              #   @param command [::String]
              #     The command name to execute, represented by the fully qualified protobuf
              #     message name.
              #   @param params [::Google::Protobuf::Struct, ::Hash]
              #     The command message to execute, represented as a Struct.
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Google::Home::Enterprise::Sdm::V1::ExecuteDeviceCommandResponse]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Google::Home::Enterprise::Sdm::V1::ExecuteDeviceCommandResponse]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              def execute_device_command request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Home::Enterprise::Sdm::V1::ExecuteDeviceCommandRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.execute_device_command.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Sdm::V1::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.name
                  header_params["name"] = request.name
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.execute_device_command.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.execute_device_command.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @smart_device_management_service_stub.call_rpc :execute_device_command, request, options: options do |response, operation|
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Gets a structure managed by the enterprise.
              #
              # @overload get_structure(request, options = nil)
              #   Pass arguments to `get_structure` via a request object, either of type
              #   {::Google::Home::Enterprise::Sdm::V1::GetStructureRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Home::Enterprise::Sdm::V1::GetStructureRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload get_structure(name: nil)
              #   Pass arguments to `get_structure` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param name [::String]
              #     The name of the structure requested. For example:
              #     "enterprises/XYZ/structures/ABC".
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Google::Home::Enterprise::Sdm::V1::Structure]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Google::Home::Enterprise::Sdm::V1::Structure]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              def get_structure request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Home::Enterprise::Sdm::V1::GetStructureRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.get_structure.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Sdm::V1::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.name
                  header_params["name"] = request.name
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.get_structure.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.get_structure.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @smart_device_management_service_stub.call_rpc :get_structure, request, options: options do |response, operation|
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Lists structures managed by the enterprise.
              #
              # @overload list_structures(request, options = nil)
              #   Pass arguments to `list_structures` via a request object, either of type
              #   {::Google::Home::Enterprise::Sdm::V1::ListStructuresRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Home::Enterprise::Sdm::V1::ListStructuresRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload list_structures(parent: nil, page_size: nil, page_token: nil, filter: nil)
              #   Pass arguments to `list_structures` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param parent [::String]
              #     The parent enterprise to list structures under. E.g. "enterprises/XYZ".
              #   @param page_size [::Integer]
              #     Requested page size. Server may return fewer structures than requested.
              #     If unspecified, server will pick an appropriate default.
              #   @param page_token [::String]
              #     The token of the page to retrieve.
              #   @param filter [::String]
              #     Optional filter to list structures.
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Gapic::PagedEnumerable<::Google::Home::Enterprise::Sdm::V1::Structure>]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Gapic::PagedEnumerable<::Google::Home::Enterprise::Sdm::V1::Structure>]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              def list_structures request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Home::Enterprise::Sdm::V1::ListStructuresRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.list_structures.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Sdm::V1::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.parent
                  header_params["parent"] = request.parent
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.list_structures.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.list_structures.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @smart_device_management_service_stub.call_rpc :list_structures, request, options: options do |response, operation|
                  response = ::Gapic::PagedEnumerable.new @smart_device_management_service_stub, :list_structures, request, response, operation, options
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Gets a room managed by the enterprise.
              #
              # @overload get_room(request, options = nil)
              #   Pass arguments to `get_room` via a request object, either of type
              #   {::Google::Home::Enterprise::Sdm::V1::GetRoomRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Home::Enterprise::Sdm::V1::GetRoomRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload get_room(name: nil)
              #   Pass arguments to `get_room` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param name [::String]
              #     The name of the room requested. For example:
              #     "enterprises/XYZ/structures/ABC/rooms/123".
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Google::Home::Enterprise::Sdm::V1::Room]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Google::Home::Enterprise::Sdm::V1::Room]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              def get_room request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Home::Enterprise::Sdm::V1::GetRoomRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.get_room.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Sdm::V1::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.name
                  header_params["name"] = request.name
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.get_room.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.get_room.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @smart_device_management_service_stub.call_rpc :get_room, request, options: options do |response, operation|
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Lists rooms managed by the enterprise.
              #
              # @overload list_rooms(request, options = nil)
              #   Pass arguments to `list_rooms` via a request object, either of type
              #   {::Google::Home::Enterprise::Sdm::V1::ListRoomsRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Home::Enterprise::Sdm::V1::ListRoomsRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload list_rooms(parent: nil, page_size: nil, page_token: nil)
              #   Pass arguments to `list_rooms` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param parent [::String]
              #     The parent resource name of the rooms requested. For example:
              #     "enterprises/XYZ/structures/ABC".
              #   @param page_size [::Integer]
              #     Requested page size. Server may return fewer rooms than requested.
              #     If unspecified, server will pick an appropriate default.
              #   @param page_token [::String]
              #     The token of the page to retrieve.
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Gapic::PagedEnumerable<::Google::Home::Enterprise::Sdm::V1::Room>]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Gapic::PagedEnumerable<::Google::Home::Enterprise::Sdm::V1::Room>]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              def list_rooms request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Home::Enterprise::Sdm::V1::ListRoomsRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.list_rooms.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Sdm::V1::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.parent
                  header_params["parent"] = request.parent
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.list_rooms.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.list_rooms.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @smart_device_management_service_stub.call_rpc :list_rooms, request, options: options do |response, operation|
                  response = ::Gapic::PagedEnumerable.new @smart_device_management_service_stub, :list_rooms, request, response, operation, options
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Configuration class for the SmartDeviceManagementService API.
              #
              # This class represents the configuration for SmartDeviceManagementService,
              # providing control over timeouts, retry behavior, logging, transport
              # parameters, and other low-level controls. Certain parameters can also be
              # applied individually to specific RPCs. See
              # {::Google::Home::Enterprise::Sdm::V1::SmartDeviceManagementService::Client::Configuration::Rpcs}
              # for a list of RPCs that can be configured independently.
              #
              # Configuration can be applied globally to all clients, or to a single client
              # on construction.
              #
              # @example
              #
              #   # Modify the global config, setting the timeout for
              #   # get_device to 20 seconds,
              #   # and all remaining timeouts to 10 seconds.
              #   ::Google::Home::Enterprise::Sdm::V1::SmartDeviceManagementService::Client.configure do |config|
              #     config.timeout = 10.0
              #     config.rpcs.get_device.timeout = 20.0
              #   end
              #
              #   # Apply the above configuration only to a new client.
              #   client = ::Google::Home::Enterprise::Sdm::V1::SmartDeviceManagementService::Client.new do |config|
              #     config.timeout = 10.0
              #     config.rpcs.get_device.timeout = 20.0
              #   end
              #
              # @!attribute [rw] endpoint
              #   The hostname or hostname:port of the service endpoint.
              #   Defaults to `"smartdevicemanagement.googleapis.com"`.
              #   @return [::String]
              # @!attribute [rw] credentials
              #   Credentials to send with calls. You may provide any of the following types:
              #    *  (`String`) The path to a service account key file in JSON format
              #    *  (`Hash`) A service account key as a Hash
              #    *  (`Google::Auth::Credentials`) A googleauth credentials object
              #       (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
              #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
              #       (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
              #    *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
              #    *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
              #    *  (`nil`) indicating no credentials
              #   @return [::Object]
              # @!attribute [rw] scope
              #   The OAuth scopes
              #   @return [::Array<::String>]
              # @!attribute [rw] lib_name
              #   The library name as recorded in instrumentation and logging
              #   @return [::String]
              # @!attribute [rw] lib_version
              #   The library version as recorded in instrumentation and logging
              #   @return [::String]
              # @!attribute [rw] channel_args
              #   Extra parameters passed to the gRPC channel. Note: this is ignored if a
              #   `GRPC::Core::Channel` object is provided as the credential.
              #   @return [::Hash]
              # @!attribute [rw] interceptors
              #   An array of interceptors that are run before calls are executed.
              #   @return [::Array<::GRPC::ClientInterceptor>]
              # @!attribute [rw] timeout
              #   The call timeout in seconds.
              #   @return [::Numeric]
              # @!attribute [rw] metadata
              #   Additional gRPC headers to be sent with the call.
              #   @return [::Hash{::Symbol=>::String}]
              # @!attribute [rw] retry_policy
              #   The retry policy. The value is a hash with the following keys:
              #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
              #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
              #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
              #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
              #       trigger a retry.
              #   @return [::Hash]
              # @!attribute [rw] quota_project
              #   A separate project against which to charge quota.
              #   @return [::String]
              #
              class Configuration
                extend ::Gapic::Config

                config_attr :endpoint,      "smartdevicemanagement.googleapis.com", ::String
                config_attr :credentials,   nil do |value|
                  allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
                  allowed += [::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials] if defined? ::GRPC
                  allowed.any? { |klass| klass === value }
                end
                config_attr :scope,         nil, ::String, ::Array, nil
                config_attr :lib_name,      nil, ::String, nil
                config_attr :lib_version,   nil, ::String, nil
                config_attr(:channel_args,  { "grpc.service_config_disable_resolution" => 1 }, ::Hash, nil)
                config_attr :interceptors,  nil, ::Array, nil
                config_attr :timeout,       nil, ::Numeric, nil
                config_attr :metadata,      nil, ::Hash, nil
                config_attr :retry_policy,  nil, ::Hash, ::Proc, nil
                config_attr :quota_project, nil, ::String, nil

                # @private
                def initialize parent_config = nil
                  @parent_config = parent_config unless parent_config.nil?

                  yield self if block_given?
                end

                ##
                # Configurations for individual RPCs
                # @return [Rpcs]
                #
                def rpcs
                  @rpcs ||= begin
                    parent_rpcs = nil
                    parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config.respond_to?(:rpcs)
                    Rpcs.new parent_rpcs
                  end
                end

                ##
                # Configuration RPC class for the SmartDeviceManagementService API.
                #
                # Includes fields providing the configuration for each RPC in this service.
                # Each configuration object is of type `Gapic::Config::Method` and includes
                # the following configuration fields:
                #
                #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
                #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
                #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
                #     include the following keys:
                #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
                #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
                #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
                #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
                #         trigger a retry.
                #
                class Rpcs
                  ##
                  # RPC-specific configuration for `get_device`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :get_device
                  ##
                  # RPC-specific configuration for `list_devices`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :list_devices
                  ##
                  # RPC-specific configuration for `execute_device_command`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :execute_device_command
                  ##
                  # RPC-specific configuration for `get_structure`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :get_structure
                  ##
                  # RPC-specific configuration for `list_structures`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :list_structures
                  ##
                  # RPC-specific configuration for `get_room`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :get_room
                  ##
                  # RPC-specific configuration for `list_rooms`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :list_rooms

                  # @private
                  def initialize parent_rpcs = nil
                    get_device_config = parent_rpcs.get_device if parent_rpcs.respond_to? :get_device
                    @get_device = ::Gapic::Config::Method.new get_device_config
                    list_devices_config = parent_rpcs.list_devices if parent_rpcs.respond_to? :list_devices
                    @list_devices = ::Gapic::Config::Method.new list_devices_config
                    execute_device_command_config = parent_rpcs.execute_device_command if parent_rpcs.respond_to? :execute_device_command
                    @execute_device_command = ::Gapic::Config::Method.new execute_device_command_config
                    get_structure_config = parent_rpcs.get_structure if parent_rpcs.respond_to? :get_structure
                    @get_structure = ::Gapic::Config::Method.new get_structure_config
                    list_structures_config = parent_rpcs.list_structures if parent_rpcs.respond_to? :list_structures
                    @list_structures = ::Gapic::Config::Method.new list_structures_config
                    get_room_config = parent_rpcs.get_room if parent_rpcs.respond_to? :get_room
                    @get_room = ::Gapic::Config::Method.new get_room_config
                    list_rooms_config = parent_rpcs.list_rooms if parent_rpcs.respond_to? :list_rooms
                    @list_rooms = ::Gapic::Config::Method.new list_rooms_config

                    yield self if block_given?
                  end
                end
              end
            end
          end
        end
      end
    end
  end
end
