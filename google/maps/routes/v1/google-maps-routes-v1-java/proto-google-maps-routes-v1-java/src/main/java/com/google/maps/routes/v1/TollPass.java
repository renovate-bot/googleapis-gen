// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/maps/routes/v1/toll_passes.proto

package com.google.maps.routes.v1;

/**
 * <pre>
 * List of toll passes around the world that we support.
 * </pre>
 *
 * Protobuf enum {@code google.maps.routes.v1.TollPass}
 */
public enum TollPass
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Not used. If this value is used, then the request fails.
   * </pre>
   *
   * <code>TOLL_PASS_UNSPECIFIED = 0;</code>
   */
  TOLL_PASS_UNSPECIFIED(0),
  /**
   * <pre>
   * Australia-wide toll pass.
   * See additional details at https://www.linkt.com.au/.
   * </pre>
   *
   * <code>AU_LINKT = 2;</code>
   */
  AU_LINKT(2),
  /**
   * <pre>
   * Argentina toll pass. See additional details at https://telepase.com.ar
   * </pre>
   *
   * <code>AR_TELEPASE = 3;</code>
   */
  AR_TELEPASE(3),
  /**
   * <pre>
   * Brazil toll pass. See additional details at https://conectcar.com.
   * </pre>
   *
   * <code>BR_CONECTCAR = 7;</code>
   */
  BR_CONECTCAR(7),
  /**
   * <pre>
   * Brazil toll pass. See additional details at https://movemais.com.
   * </pre>
   *
   * <code>BR_MOVE_MAIS = 8;</code>
   */
  BR_MOVE_MAIS(8),
  /**
   * <pre>
   * Brazil toll pass. See additional details at https://www.semparar.com.br.
   * </pre>
   *
   * <code>BR_SEM_PARAR = 9;</code>
   */
  BR_SEM_PARAR(9),
  /**
   * <pre>
   * Brazil toll pass. See additional details at https://taggy.com.br.
   * </pre>
   *
   * <code>BR_TAGGY = 10;</code>
   */
  BR_TAGGY(10),
  /**
   * <pre>
   * Brazil toll pass. See additional details at
   * https://veloe.com.br/site/onde-usar.
   * </pre>
   *
   * <code>BR_VELOE = 11;</code>
   */
  BR_VELOE(11),
  /**
   * <pre>
   * Indonesia.
   * E-card provided by multiple banks used to pay for tolls. All e-cards
   * via banks are charged the same so only one enum value is needed. E.g.
   * Bank Mandiri https://www.bankmandiri.co.id/e-money
   * BCA https://www.bca.co.id/flazz
   * BNI https://www.bni.co.id/id-id/ebanking/tapcash
   * </pre>
   *
   * <code>ID_E_TOLL = 16;</code>
   */
  ID_E_TOLL(16),
  /**
   * <pre>
   * Mexico toll pass.
   * </pre>
   *
   * <code>MX_TAG_IAVE = 12;</code>
   */
  MX_TAG_IAVE(12),
  /**
   * <pre>
   * Mexico toll pass company. One of many operating in Mexico City. See
   * additional details at https://www.televia.com.mx.
   * </pre>
   *
   * <code>MX_TAG_TELEVIA = 13;</code>
   */
  MX_TAG_TELEVIA(13),
  /**
   * <pre>
   * Mexico toll pass. See additional details at
   * https://www.viapass.com.mx/viapass/web_home.aspx.
   * </pre>
   *
   * <code>MX_VIAPASS = 14;</code>
   */
  MX_VIAPASS(14),
  /**
   * <pre>
   * State pass of California, United States. Passes vary between Standard,
   * Flex, and Clean Air. Flex and Clean Air have settings for carpool. See
   * additional details at https://www.bayareafastrak.org/en/home/index.shtml.
   * </pre>
   *
   * <code>US_CA_FASTRAK = 4;</code>
   */
  US_CA_FASTRAK(4),
  /**
   * <pre>
   * State pass of Illinois, United States. See additional details at
   * https://www.illinoistollway.com/about-ipass.
   * </pre>
   *
   * <code>US_IL_IPASS = 5;</code>
   */
  US_IL_IPASS(5),
  /**
   * <pre>
   * State pass of Massachusetts, United States. See additional details at
   * https://www.mass.gov/ezdrivema.
   * </pre>
   *
   * <code>US_MA_EZPASSMA = 6;</code>
   */
  US_MA_EZPASSMA(6),
  /**
   * <pre>
   * State pass of New York, United States. See additional details at
   * https://www.e-zpassny.com.
   * </pre>
   *
   * <code>US_NY_EZPASSNY = 15;</code>
   */
  US_NY_EZPASSNY(15),
  /**
   * <pre>
   * State pass of the Washington state, United States.
   * </pre>
   *
   * <code>US_WA_GOOD_TO_GO = 1;</code>
   */
  US_WA_GOOD_TO_GO(1),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Not used. If this value is used, then the request fails.
   * </pre>
   *
   * <code>TOLL_PASS_UNSPECIFIED = 0;</code>
   */
  public static final int TOLL_PASS_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * Australia-wide toll pass.
   * See additional details at https://www.linkt.com.au/.
   * </pre>
   *
   * <code>AU_LINKT = 2;</code>
   */
  public static final int AU_LINKT_VALUE = 2;
  /**
   * <pre>
   * Argentina toll pass. See additional details at https://telepase.com.ar
   * </pre>
   *
   * <code>AR_TELEPASE = 3;</code>
   */
  public static final int AR_TELEPASE_VALUE = 3;
  /**
   * <pre>
   * Brazil toll pass. See additional details at https://conectcar.com.
   * </pre>
   *
   * <code>BR_CONECTCAR = 7;</code>
   */
  public static final int BR_CONECTCAR_VALUE = 7;
  /**
   * <pre>
   * Brazil toll pass. See additional details at https://movemais.com.
   * </pre>
   *
   * <code>BR_MOVE_MAIS = 8;</code>
   */
  public static final int BR_MOVE_MAIS_VALUE = 8;
  /**
   * <pre>
   * Brazil toll pass. See additional details at https://www.semparar.com.br.
   * </pre>
   *
   * <code>BR_SEM_PARAR = 9;</code>
   */
  public static final int BR_SEM_PARAR_VALUE = 9;
  /**
   * <pre>
   * Brazil toll pass. See additional details at https://taggy.com.br.
   * </pre>
   *
   * <code>BR_TAGGY = 10;</code>
   */
  public static final int BR_TAGGY_VALUE = 10;
  /**
   * <pre>
   * Brazil toll pass. See additional details at
   * https://veloe.com.br/site/onde-usar.
   * </pre>
   *
   * <code>BR_VELOE = 11;</code>
   */
  public static final int BR_VELOE_VALUE = 11;
  /**
   * <pre>
   * Indonesia.
   * E-card provided by multiple banks used to pay for tolls. All e-cards
   * via banks are charged the same so only one enum value is needed. E.g.
   * Bank Mandiri https://www.bankmandiri.co.id/e-money
   * BCA https://www.bca.co.id/flazz
   * BNI https://www.bni.co.id/id-id/ebanking/tapcash
   * </pre>
   *
   * <code>ID_E_TOLL = 16;</code>
   */
  public static final int ID_E_TOLL_VALUE = 16;
  /**
   * <pre>
   * Mexico toll pass.
   * </pre>
   *
   * <code>MX_TAG_IAVE = 12;</code>
   */
  public static final int MX_TAG_IAVE_VALUE = 12;
  /**
   * <pre>
   * Mexico toll pass company. One of many operating in Mexico City. See
   * additional details at https://www.televia.com.mx.
   * </pre>
   *
   * <code>MX_TAG_TELEVIA = 13;</code>
   */
  public static final int MX_TAG_TELEVIA_VALUE = 13;
  /**
   * <pre>
   * Mexico toll pass. See additional details at
   * https://www.viapass.com.mx/viapass/web_home.aspx.
   * </pre>
   *
   * <code>MX_VIAPASS = 14;</code>
   */
  public static final int MX_VIAPASS_VALUE = 14;
  /**
   * <pre>
   * State pass of California, United States. Passes vary between Standard,
   * Flex, and Clean Air. Flex and Clean Air have settings for carpool. See
   * additional details at https://www.bayareafastrak.org/en/home/index.shtml.
   * </pre>
   *
   * <code>US_CA_FASTRAK = 4;</code>
   */
  public static final int US_CA_FASTRAK_VALUE = 4;
  /**
   * <pre>
   * State pass of Illinois, United States. See additional details at
   * https://www.illinoistollway.com/about-ipass.
   * </pre>
   *
   * <code>US_IL_IPASS = 5;</code>
   */
  public static final int US_IL_IPASS_VALUE = 5;
  /**
   * <pre>
   * State pass of Massachusetts, United States. See additional details at
   * https://www.mass.gov/ezdrivema.
   * </pre>
   *
   * <code>US_MA_EZPASSMA = 6;</code>
   */
  public static final int US_MA_EZPASSMA_VALUE = 6;
  /**
   * <pre>
   * State pass of New York, United States. See additional details at
   * https://www.e-zpassny.com.
   * </pre>
   *
   * <code>US_NY_EZPASSNY = 15;</code>
   */
  public static final int US_NY_EZPASSNY_VALUE = 15;
  /**
   * <pre>
   * State pass of the Washington state, United States.
   * </pre>
   *
   * <code>US_WA_GOOD_TO_GO = 1;</code>
   */
  public static final int US_WA_GOOD_TO_GO_VALUE = 1;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static TollPass valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static TollPass forNumber(int value) {
    switch (value) {
      case 0: return TOLL_PASS_UNSPECIFIED;
      case 2: return AU_LINKT;
      case 3: return AR_TELEPASE;
      case 7: return BR_CONECTCAR;
      case 8: return BR_MOVE_MAIS;
      case 9: return BR_SEM_PARAR;
      case 10: return BR_TAGGY;
      case 11: return BR_VELOE;
      case 16: return ID_E_TOLL;
      case 12: return MX_TAG_IAVE;
      case 13: return MX_TAG_TELEVIA;
      case 14: return MX_VIAPASS;
      case 4: return US_CA_FASTRAK;
      case 5: return US_IL_IPASS;
      case 6: return US_MA_EZPASSMA;
      case 15: return US_NY_EZPASSNY;
      case 1: return US_WA_GOOD_TO_GO;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<TollPass>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      TollPass> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<TollPass>() {
          public TollPass findValueByNumber(int number) {
            return TollPass.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.google.maps.routes.v1.TollPassesProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final TollPass[] VALUES = values();

  public static TollPass valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private TollPass(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.maps.routes.v1.TollPass)
}

