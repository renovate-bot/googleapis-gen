// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, GaxCall} from 'google-gax';

import { Transform } from 'stream';
import { RequestType } from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/vehicle_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './vehicle_service_client_config.json';

const version = require('../../../package.json').version;

/**
 *  Vehicle management service.
 * @class
 * @memberof v1
 */
export class VehicleServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  vehicleServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of VehicleServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP fallback mode.
   *     In fallback mode, a special browser-compatible transport implementation is used
   *     instead of gRPC transport. In browser context (if the `window` object is defined)
   *     the fallback mode is enabled automatically; set `options.fallback` to `false`
   *     if you need to override this behavior.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof VehicleServiceClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      tripPathTemplate: new this._gaxModule.PathTemplate(
        'providers/{provider}/trips/{trip}'
      ),
      vehiclePathTemplate: new this._gaxModule.PathTemplate(
        'providers/{provider}/vehicles/{vehicle}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listVehicles:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'vehicles')
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'maps.fleetengine.v1.VehicleService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = gax.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.vehicleServiceStub) {
      return this.vehicleServiceStub;
    }

    // Put together the "service stub" for
    // maps.fleetengine.v1.VehicleService.
    this.vehicleServiceStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('maps.fleetengine.v1.VehicleService') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).maps.fleetengine.v1.VehicleService,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const vehicleServiceStubMethods =
        ['createVehicle', 'getVehicle', 'updateVehicle', 'updateVehicleLocation', 'updateVehicleAttributes', 'listVehicles', 'searchVehicles', 'searchFuzzedVehicles'];
    for (const methodName of vehicleServiceStubMethods) {
      const callPromise = this.vehicleServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.vehicleServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'fleetengine.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'fleetengine.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  createVehicle(
      request?: protos.maps.fleetengine.v1.ICreateVehicleRequest,
      options?: CallOptions):
      Promise<[
        protos.maps.fleetengine.v1.IVehicle,
        protos.maps.fleetengine.v1.ICreateVehicleRequest|undefined, {}|undefined
      ]>;
  createVehicle(
      request: protos.maps.fleetengine.v1.ICreateVehicleRequest,
      options: CallOptions,
      callback: Callback<
          protos.maps.fleetengine.v1.IVehicle,
          protos.maps.fleetengine.v1.ICreateVehicleRequest|null|undefined,
          {}|null|undefined>): void;
  createVehicle(
      request: protos.maps.fleetengine.v1.ICreateVehicleRequest,
      callback: Callback<
          protos.maps.fleetengine.v1.IVehicle,
          protos.maps.fleetengine.v1.ICreateVehicleRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * CreateVehicle instantiates a new vehicle associated with a rideshare
 * provider in the Fleet Engine. Vehicles must have a unique vehicle ID.
 *
 * The following Vehicle fields are required when creating a Vehicle:
 *
 * * vehicleState
 * * supportedTripTypes
 * * maximumCapacity
 * * vehicleType
 *
 * The following Vehicle fields are ignored when creating a Vehicle:
 *
 * * name
 * * currentTrips
 * * availableCapacity
 * * current_route_segment
 * * current_route_segment_version
 * * waypoint
 * * waypoints_version
 * * remaining_distance_meters
 * * eta_to_next_waypoint
 * * navigation_status
 *
 * All other fields are optional and used if provided.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.v1.RequestHeader} request.header
 *   The standard Fleet Engine request header.
 * @param {string} request.parent
 *   Required. Must be in the format "providers/{provider}".
 *   The provider must be the Project ID (for example, sample-cloud-project)
 *   of the Google Cloud Project of which the service account making
 *   this call is a member.
 * @param {string} request.vehicleId
 *   Required. Unique Vehicle ID; must be unique per provider.  The actual
 *   format and value is opaque to the Fleet Engine and is determined
 *   by the provider.
 * @param {maps.fleetengine.v1.Vehicle} request.vehicle
 *   Required. The Vehicle entity to create. When creating a Vehicle, the following
 *   fields are required:
 *
 *   * vehicle_state
 *   * supported_trip_types
 *   * maximum_capacity
 *   * vehicle_type
 *
 *   When creating a Vehicle, the following fields are ignored:
 *
 *   * name
 *   * current_trips
 *   * available_capacity
 *   * current_route_segment
 *   * current_route_segment_version
 *   * waypoints
 *   * waypoints_version
 *   * remaining_distance_meters
 *   * eta_to_next_waypoint
 *   * navigation_status
 *
 *   All other fields will be used if provided.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Vehicle]{@link maps.fleetengine.v1.Vehicle}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.createVehicle(request);
 */
  createVehicle(
      request?: protos.maps.fleetengine.v1.ICreateVehicleRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.maps.fleetengine.v1.IVehicle,
          protos.maps.fleetengine.v1.ICreateVehicleRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.maps.fleetengine.v1.IVehicle,
          protos.maps.fleetengine.v1.ICreateVehicleRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.maps.fleetengine.v1.IVehicle,
        protos.maps.fleetengine.v1.ICreateVehicleRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createVehicle(request, options, callback);
  }
  getVehicle(
      request?: protos.maps.fleetengine.v1.IGetVehicleRequest,
      options?: CallOptions):
      Promise<[
        protos.maps.fleetengine.v1.IVehicle,
        protos.maps.fleetengine.v1.IGetVehicleRequest|undefined, {}|undefined
      ]>;
  getVehicle(
      request: protos.maps.fleetengine.v1.IGetVehicleRequest,
      options: CallOptions,
      callback: Callback<
          protos.maps.fleetengine.v1.IVehicle,
          protos.maps.fleetengine.v1.IGetVehicleRequest|null|undefined,
          {}|null|undefined>): void;
  getVehicle(
      request: protos.maps.fleetengine.v1.IGetVehicleRequest,
      callback: Callback<
          protos.maps.fleetengine.v1.IVehicle,
          protos.maps.fleetengine.v1.IGetVehicleRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * GetVehicle returns a vehicle from the Fleet Engine.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.v1.RequestHeader} request.header
 *   The standard Fleet Engine request header.
 * @param {string} request.name
 *   Required. Must be in the format
 *   "providers/{provider}/vehicles/{vehicle}".
 *   The provider must be the Project ID (for example, sample-cloud-project)
 *   of the Google Cloud Project of which the service account making
 *   this call is a member.
 * @param {google.protobuf.Timestamp} request.currentRouteSegmentVersion
 *   Indicates the minimum timestamp (exclusive) for which
 *   vehicle.current_route_segment is retrieved.
 *   If route is unchanged since this timestamp, the current_route_segment
 *   field is not set in the response. If a minimum is unspecified, the
 *   current_route_segment is always retrieved.
 * @param {google.protobuf.Timestamp} request.waypointsVersion
 *   Indicates the minimum timestamp (exclusive) for which vehicle.waypoints
 *   data is retrieved. If data is unchanged since this timestamp, the
 *   vehicle.waypoints data is not set in the response. If this field is
 *   unspecified, vehicle.waypoints is always retrieved.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Vehicle]{@link maps.fleetengine.v1.Vehicle}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getVehicle(request);
 */
  getVehicle(
      request?: protos.maps.fleetengine.v1.IGetVehicleRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.maps.fleetengine.v1.IVehicle,
          protos.maps.fleetengine.v1.IGetVehicleRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.maps.fleetengine.v1.IVehicle,
          protos.maps.fleetengine.v1.IGetVehicleRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.maps.fleetengine.v1.IVehicle,
        protos.maps.fleetengine.v1.IGetVehicleRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getVehicle(request, options, callback);
  }
  updateVehicle(
      request?: protos.maps.fleetengine.v1.IUpdateVehicleRequest,
      options?: CallOptions):
      Promise<[
        protos.maps.fleetengine.v1.IVehicle,
        protos.maps.fleetengine.v1.IUpdateVehicleRequest|undefined, {}|undefined
      ]>;
  updateVehicle(
      request: protos.maps.fleetengine.v1.IUpdateVehicleRequest,
      options: CallOptions,
      callback: Callback<
          protos.maps.fleetengine.v1.IVehicle,
          protos.maps.fleetengine.v1.IUpdateVehicleRequest|null|undefined,
          {}|null|undefined>): void;
  updateVehicle(
      request: protos.maps.fleetengine.v1.IUpdateVehicleRequest,
      callback: Callback<
          protos.maps.fleetengine.v1.IVehicle,
          protos.maps.fleetengine.v1.IUpdateVehicleRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * UpdateVehicle writes updated vehicle data to the Fleet Engine.
 *
 * When updating a Vehicle, the following fields cannot be updated since they
 * are managed by the Fleet Engine:
 *
 * * currentTrips
 * * availableCapacity
 * * current_route_segment_version
 * * waypoints_version
 *
 * The vehicle name also cannot be updated.
 *
 * The waypoints field can be updated, but must contain all the waypoints
 * currently on the vehicle, and no other waypoints.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.v1.RequestHeader} request.header
 *   The standard Fleet Engine request header.
 * @param {string} request.name
 *   Required. Must be in the format
 *   "providers/{provider}/vehicles/{vehicle}".
 *   The {provider} must be the Project ID (for example, sample-cloud-project)
 *   of the Google Cloud Project of which the service account making
 *   this call is a member.
 *
 *   Note that if the name is also specified in the name field of the
 *   vehicle and name is set in the update_mask, both names must be the
 *   same.  Otherwise it is an Error.
 * @param {maps.fleetengine.v1.Vehicle} request.vehicle
 *   Required. The Vehicle entity update to apply.  When updating a Vehicle,
 *   the following fields may not be updated as they are managed by the
 *   Fleet Engine.
 *     current_trips
 *     available_capacity
 *     current_route_segment_version
 *     waypoints_version
 *   Furthermore, the name of the vehicle cannot be updated.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. A field mask indicating which fields of the Vehicle to update.
 *   The update_mask must contain at least one field.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Vehicle]{@link maps.fleetengine.v1.Vehicle}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.updateVehicle(request);
 */
  updateVehicle(
      request?: protos.maps.fleetengine.v1.IUpdateVehicleRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.maps.fleetengine.v1.IVehicle,
          protos.maps.fleetengine.v1.IUpdateVehicleRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.maps.fleetengine.v1.IVehicle,
          protos.maps.fleetengine.v1.IUpdateVehicleRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.maps.fleetengine.v1.IVehicle,
        protos.maps.fleetengine.v1.IUpdateVehicleRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateVehicle(request, options, callback);
  }
  updateVehicleLocation(
      request?: protos.maps.fleetengine.v1.IUpdateVehicleLocationRequest,
      options?: CallOptions):
      Promise<[
        protos.maps.fleetengine.v1.IVehicleLocation,
        protos.maps.fleetengine.v1.IUpdateVehicleLocationRequest|undefined, {}|undefined
      ]>;
  updateVehicleLocation(
      request: protos.maps.fleetengine.v1.IUpdateVehicleLocationRequest,
      options: CallOptions,
      callback: Callback<
          protos.maps.fleetengine.v1.IVehicleLocation,
          protos.maps.fleetengine.v1.IUpdateVehicleLocationRequest|null|undefined,
          {}|null|undefined>): void;
  updateVehicleLocation(
      request: protos.maps.fleetengine.v1.IUpdateVehicleLocationRequest,
      callback: Callback<
          protos.maps.fleetengine.v1.IVehicleLocation,
          protos.maps.fleetengine.v1.IUpdateVehicleLocationRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * UpdateVehicleLocation updates the location of the vehicle.
 * This method is deprecated. Use UpdateVehicle method instead.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.v1.RequestHeader} request.header
 *   The standard Fleet Engine request header.
 * @param {string} request.name
 *   Required. Must be in the format
 *   "providers/{provider}/vehicles/{vehicle}.
 *   The {provider} must be the Project ID (for example, sample-cloud-project)
 *   of the Google Cloud Project of which the service account making
 *   this call is a member.
 * @param {maps.fleetengine.v1.VehicleLocation} request.currentLocation
 *   Required. The location to update to.  The last_location and update_time
 *   subfields are required.
 * @param {maps.fleetengine.v1.VehicleState} request.currentState
 *   Set current vehicle state to either ONLINE or OFFLINE;
 *   if set to UNKNOWN_VEHICLE_STATE, vehicle state will not be altered.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [VehicleLocation]{@link maps.fleetengine.v1.VehicleLocation}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.updateVehicleLocation(request);
 * @deprecated UpdateVehicleLocation is deprecated and may be removed in a future version.
 */
  updateVehicleLocation(
      request?: protos.maps.fleetengine.v1.IUpdateVehicleLocationRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.maps.fleetengine.v1.IVehicleLocation,
          protos.maps.fleetengine.v1.IUpdateVehicleLocationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.maps.fleetengine.v1.IVehicleLocation,
          protos.maps.fleetengine.v1.IUpdateVehicleLocationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.maps.fleetengine.v1.IVehicleLocation,
        protos.maps.fleetengine.v1.IUpdateVehicleLocationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    this.warn('DEP$VehicleService-$UpdateVehicleLocation','UpdateVehicleLocation is deprecated and may be removed in a future version.', 'DeprecationWarning');
    return this.innerApiCalls.updateVehicleLocation(request, options, callback);
  }
  updateVehicleAttributes(
      request?: protos.maps.fleetengine.v1.IUpdateVehicleAttributesRequest,
      options?: CallOptions):
      Promise<[
        protos.maps.fleetengine.v1.IUpdateVehicleAttributesResponse,
        protos.maps.fleetengine.v1.IUpdateVehicleAttributesRequest|undefined, {}|undefined
      ]>;
  updateVehicleAttributes(
      request: protos.maps.fleetengine.v1.IUpdateVehicleAttributesRequest,
      options: CallOptions,
      callback: Callback<
          protos.maps.fleetengine.v1.IUpdateVehicleAttributesResponse,
          protos.maps.fleetengine.v1.IUpdateVehicleAttributesRequest|null|undefined,
          {}|null|undefined>): void;
  updateVehicleAttributes(
      request: protos.maps.fleetengine.v1.IUpdateVehicleAttributesRequest,
      callback: Callback<
          protos.maps.fleetengine.v1.IUpdateVehicleAttributesResponse,
          protos.maps.fleetengine.v1.IUpdateVehicleAttributesRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * UpdateVehicleAttributes partially updates a vehicle's attributes.
 * Only the attributes mentioned in the request will be updated, other
 * attributes will NOT be altered. Note: this is different in UpdateVehicle,
 * where the whole `attributes` field will be replaced by the one in
 * UpdateVehicleRequest, attributes not in the request would be removed.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.v1.RequestHeader} request.header
 *   The standard Fleet Engine request header.
 * @param {string} request.name
 *   Required. Must be in the format
 *   "providers/{provider}/vehicles/{vehicle}.
 *   The provider must be the Project ID (for example, sample-cloud-project)
 *   of the Google Cloud Project of which the service account making
 *   this call is a member.
 * @param {number[]} request.attributes
 *   Required. The attributes to update;
 *   unmentioned attributes will not be altered or removed.
 *   At most 20 attributes; the combined "key:value" string length cannot
 *   exceed 256.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [UpdateVehicleAttributesResponse]{@link maps.fleetengine.v1.UpdateVehicleAttributesResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.updateVehicleAttributes(request);
 */
  updateVehicleAttributes(
      request?: protos.maps.fleetengine.v1.IUpdateVehicleAttributesRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.maps.fleetengine.v1.IUpdateVehicleAttributesResponse,
          protos.maps.fleetengine.v1.IUpdateVehicleAttributesRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.maps.fleetengine.v1.IUpdateVehicleAttributesResponse,
          protos.maps.fleetengine.v1.IUpdateVehicleAttributesRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.maps.fleetengine.v1.IUpdateVehicleAttributesResponse,
        protos.maps.fleetengine.v1.IUpdateVehicleAttributesRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateVehicleAttributes(request, options, callback);
  }
  searchVehicles(
      request?: protos.maps.fleetengine.v1.ISearchVehiclesRequest,
      options?: CallOptions):
      Promise<[
        protos.maps.fleetengine.v1.ISearchVehiclesResponse,
        protos.maps.fleetengine.v1.ISearchVehiclesRequest|undefined, {}|undefined
      ]>;
  searchVehicles(
      request: protos.maps.fleetengine.v1.ISearchVehiclesRequest,
      options: CallOptions,
      callback: Callback<
          protos.maps.fleetengine.v1.ISearchVehiclesResponse,
          protos.maps.fleetengine.v1.ISearchVehiclesRequest|null|undefined,
          {}|null|undefined>): void;
  searchVehicles(
      request: protos.maps.fleetengine.v1.ISearchVehiclesRequest,
      callback: Callback<
          protos.maps.fleetengine.v1.ISearchVehiclesResponse,
          protos.maps.fleetengine.v1.ISearchVehiclesRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * SearchVehicles returns a list of vehicles that match the request options.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.v1.RequestHeader} request.header
 *   The standard Fleet Engine request header.
 * @param {string} request.parent
 *   Required. Must be in the format "providers/{provider}".
 *   The provider must be the Project ID (for example, sample-cloud-project)
 *   of the Google Cloud Project of which the service account making
 *   this call is a member.
 * @param {maps.fleetengine.v1.TerminalLocation} request.pickupPoint
 *   Required. The pickup point to search near.
 * @param {maps.fleetengine.v1.TerminalLocation} request.dropoffPoint
 *   The customer's intended dropoff location. The field is required if
 *   trip_types contains TripType.SHARED.
 * @param {number} request.pickupRadiusMeters
 *   Required. Defines the vehicle search radius around the pickup point. Only
 *   vehicles within the search radius will be returned. Value must be between
 *   400 and 10000 meters.
 * @param {number} request.count
 *   Required. Specifies the maximum number of available vehicles to return. By
 *   default, the Fleet Engine limits the number to  50.
 * @param {number} request.minimumCapacity
 *   Required. Specifies the minimum number of passengers allowed in the
 *   vehicle. Must number must be greater than or equal to one. The driver is
 *   not considered in the capacity search. This number indicates the number of
 *   passengers being considered for a trip.
 * @param {number[]} request.tripTypes
 *   Required. Restricts the search to only those vehicles that support at least
 *   one of the specified trip types.
 * @param {google.protobuf.Duration} request.maximumStaleness
 *   Restricts the search to only those vehicles that have updated their
 *   locations within the specified duration back from now. If this field is not
 *   set, the server uses five minutes as the default value.
 * @param {number[]} request.vehicleTypes
 *   Required. Restricts the search to those vehicles with the specified types.
 *   At least one vehicle type must be specified.
 * @param {number[]} request.requiredAttributes
 *   Callers can form complex logical operations using the
 *   requiredAttributes and requiredOneOfAttributes fields.
 *
 *   requiredAttributes is a list; requiredOneOfAttributes uses a message which
 *   allows a list of lists. In combination, the two fields allow the
 *   composition of this expression:
 *
 *   ```
 *   (required_attribute[0] AND required_attribute[1] AND ...)
 *   AND
 *   (required_one_of_attribute{@link 0|0} OR required_one_of_attribute{@link 1|0} OR ...)
 *   AND
 *   (required_one_of_attribute{@link 0|1} OR required_one_of_attribute{@link 1|1} OR ...)
 *   ```
 *
 *   Restricts the search to only those vehicles with the specified attributes.
 *   This field is a conjunction/AND operation. Your app can specify up to 100
 *   attributes; however, the combined key:value string length cannot exceed
 *   1024 characters.
 * @param {number[]} request.requiredOneOfAttributes
 *   Restricts the search to only those vehicles with at least one of
 *   the specified attributes applied to each VehicleAttributeList. Within each
 *   list, a vehicle must match at least one of the attributes. This field is an
 *   inclusive disjunction/OR operation in each VehicleAttributeList and a
 *   conjunction/AND operation across the collection of VehicleAttributeList.
 * @param {number[]} request.requiredOneOfAttributeSets
 *   Restricts the search to only those vehicles with at least one set of the
 *   specified attributes in the VehicleAttributeList. Within each list, a
 *   vehicle must match all of the attributes. This field is a conjunction/AND
 *   operation in each VehicleAttributeList and inclusive disjunction/OR
 *   operation across the collection of VehicleAttributeList.
 * @param {maps.fleetengine.v1.SearchVehiclesRequest.VehicleMatchOrder} request.orderBy
 *   Required. Specifies ordering criterion for results.
 * @param {boolean} request.includeBackToBack
 *   Indicates if a vehicle with an active trip is eligible for
 *   another match. If `false`, a vehicle is excluded from search results.
 *   If `true`, search results include vehicles with `TripStatus` of
 *   `ENROUTE_TO_DROPOFF`. The services only use this field if
 *   the `SearchVehicles` request has `TripType` set to EXCLUSIVE.
 *   Default value is `false`.
 * @param {string} request.tripId
 *   Indicates the ID of the trip the searchVehicleRequest is
 *   associated with.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [SearchVehiclesResponse]{@link maps.fleetengine.v1.SearchVehiclesResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.searchVehicles(request);
 */
  searchVehicles(
      request?: protos.maps.fleetengine.v1.ISearchVehiclesRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.maps.fleetengine.v1.ISearchVehiclesResponse,
          protos.maps.fleetengine.v1.ISearchVehiclesRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.maps.fleetengine.v1.ISearchVehiclesResponse,
          protos.maps.fleetengine.v1.ISearchVehiclesRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.maps.fleetengine.v1.ISearchVehiclesResponse,
        protos.maps.fleetengine.v1.ISearchVehiclesRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.searchVehicles(request, options, callback);
  }
  searchFuzzedVehicles(
      request?: protos.maps.fleetengine.v1.ISearchVehiclesRequest,
      options?: CallOptions):
      Promise<[
        protos.maps.fleetengine.v1.ISearchVehiclesResponse,
        protos.maps.fleetengine.v1.ISearchVehiclesRequest|undefined, {}|undefined
      ]>;
  searchFuzzedVehicles(
      request: protos.maps.fleetengine.v1.ISearchVehiclesRequest,
      options: CallOptions,
      callback: Callback<
          protos.maps.fleetengine.v1.ISearchVehiclesResponse,
          protos.maps.fleetengine.v1.ISearchVehiclesRequest|null|undefined,
          {}|null|undefined>): void;
  searchFuzzedVehicles(
      request: protos.maps.fleetengine.v1.ISearchVehiclesRequest,
      callback: Callback<
          protos.maps.fleetengine.v1.ISearchVehiclesResponse,
          protos.maps.fleetengine.v1.ISearchVehiclesRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * SearchFuzzedVehicles returns a list of vehicles that match the request
 * options with their locations fuzzed.
 * Request does not support 'order_by' field.
 * Vehicle matches in response will be in order of distance from pickup point.
 * Vehicle matches in response will only have 'vehicle' and 'trip_type' field
 * set.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.v1.RequestHeader} request.header
 *   The standard Fleet Engine request header.
 * @param {string} request.parent
 *   Required. Must be in the format "providers/{provider}".
 *   The provider must be the Project ID (for example, sample-cloud-project)
 *   of the Google Cloud Project of which the service account making
 *   this call is a member.
 * @param {maps.fleetengine.v1.TerminalLocation} request.pickupPoint
 *   Required. The pickup point to search near.
 * @param {maps.fleetengine.v1.TerminalLocation} request.dropoffPoint
 *   The customer's intended dropoff location. The field is required if
 *   trip_types contains TripType.SHARED.
 * @param {number} request.pickupRadiusMeters
 *   Required. Defines the vehicle search radius around the pickup point. Only
 *   vehicles within the search radius will be returned. Value must be between
 *   400 and 10000 meters.
 * @param {number} request.count
 *   Required. Specifies the maximum number of available vehicles to return. By
 *   default, the Fleet Engine limits the number to  50.
 * @param {number} request.minimumCapacity
 *   Required. Specifies the minimum number of passengers allowed in the
 *   vehicle. Must number must be greater than or equal to one. The driver is
 *   not considered in the capacity search. This number indicates the number of
 *   passengers being considered for a trip.
 * @param {number[]} request.tripTypes
 *   Required. Restricts the search to only those vehicles that support at least
 *   one of the specified trip types.
 * @param {google.protobuf.Duration} request.maximumStaleness
 *   Restricts the search to only those vehicles that have updated their
 *   locations within the specified duration back from now. If this field is not
 *   set, the server uses five minutes as the default value.
 * @param {number[]} request.vehicleTypes
 *   Required. Restricts the search to those vehicles with the specified types.
 *   At least one vehicle type must be specified.
 * @param {number[]} request.requiredAttributes
 *   Callers can form complex logical operations using the
 *   requiredAttributes and requiredOneOfAttributes fields.
 *
 *   requiredAttributes is a list; requiredOneOfAttributes uses a message which
 *   allows a list of lists. In combination, the two fields allow the
 *   composition of this expression:
 *
 *   ```
 *   (required_attribute[0] AND required_attribute[1] AND ...)
 *   AND
 *   (required_one_of_attribute{@link 0|0} OR required_one_of_attribute{@link 1|0} OR ...)
 *   AND
 *   (required_one_of_attribute{@link 0|1} OR required_one_of_attribute{@link 1|1} OR ...)
 *   ```
 *
 *   Restricts the search to only those vehicles with the specified attributes.
 *   This field is a conjunction/AND operation. Your app can specify up to 100
 *   attributes; however, the combined key:value string length cannot exceed
 *   1024 characters.
 * @param {number[]} request.requiredOneOfAttributes
 *   Restricts the search to only those vehicles with at least one of
 *   the specified attributes applied to each VehicleAttributeList. Within each
 *   list, a vehicle must match at least one of the attributes. This field is an
 *   inclusive disjunction/OR operation in each VehicleAttributeList and a
 *   conjunction/AND operation across the collection of VehicleAttributeList.
 * @param {number[]} request.requiredOneOfAttributeSets
 *   Restricts the search to only those vehicles with at least one set of the
 *   specified attributes in the VehicleAttributeList. Within each list, a
 *   vehicle must match all of the attributes. This field is a conjunction/AND
 *   operation in each VehicleAttributeList and inclusive disjunction/OR
 *   operation across the collection of VehicleAttributeList.
 * @param {maps.fleetengine.v1.SearchVehiclesRequest.VehicleMatchOrder} request.orderBy
 *   Required. Specifies ordering criterion for results.
 * @param {boolean} request.includeBackToBack
 *   Indicates if a vehicle with an active trip is eligible for
 *   another match. If `false`, a vehicle is excluded from search results.
 *   If `true`, search results include vehicles with `TripStatus` of
 *   `ENROUTE_TO_DROPOFF`. The services only use this field if
 *   the `SearchVehicles` request has `TripType` set to EXCLUSIVE.
 *   Default value is `false`.
 * @param {string} request.tripId
 *   Indicates the ID of the trip the searchVehicleRequest is
 *   associated with.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [SearchVehiclesResponse]{@link maps.fleetengine.v1.SearchVehiclesResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.searchFuzzedVehicles(request);
 */
  searchFuzzedVehicles(
      request?: protos.maps.fleetengine.v1.ISearchVehiclesRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.maps.fleetengine.v1.ISearchVehiclesResponse,
          protos.maps.fleetengine.v1.ISearchVehiclesRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.maps.fleetengine.v1.ISearchVehiclesResponse,
          protos.maps.fleetengine.v1.ISearchVehiclesRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.maps.fleetengine.v1.ISearchVehiclesResponse,
        protos.maps.fleetengine.v1.ISearchVehiclesRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.searchFuzzedVehicles(request, options, callback);
  }

  listVehicles(
      request?: protos.maps.fleetengine.v1.IListVehiclesRequest,
      options?: CallOptions):
      Promise<[
        protos.maps.fleetengine.v1.IVehicle[],
        protos.maps.fleetengine.v1.IListVehiclesRequest|null,
        protos.maps.fleetengine.v1.IListVehiclesResponse
      ]>;
  listVehicles(
      request: protos.maps.fleetengine.v1.IListVehiclesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.maps.fleetengine.v1.IListVehiclesRequest,
          protos.maps.fleetengine.v1.IListVehiclesResponse|null|undefined,
          protos.maps.fleetengine.v1.IVehicle>): void;
  listVehicles(
      request: protos.maps.fleetengine.v1.IListVehiclesRequest,
      callback: PaginationCallback<
          protos.maps.fleetengine.v1.IListVehiclesRequest,
          protos.maps.fleetengine.v1.IListVehiclesResponse|null|undefined,
          protos.maps.fleetengine.v1.IVehicle>): void;
/**
 * ListVehicles returns a paginated list of vehicles associated with
 * a provider that match the request options.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.v1.RequestHeader} request.header
 *   The standard Fleet Engine request header.
 * @param {string} request.parent
 *   Required. Must be in the format "providers/{provider}".
 *   The provider must be the Project ID (for example, sample-cloud-project)
 *   of the Google Cloud Project of which the service account making
 *   this call is a member.
 * @param {number} request.pageSize
 *   The maximum number of vehicles to return.
 *   Default value: 100.
 * @param {string} request.pageToken
 *   The next_page_token value returned from a previous response, if any.
 * @param {google.protobuf.Int32Value} request.minimumCapacity
 *   Specifies the required minimum capacity of the vehicle.
 *   The driver is not considered in the capacity search.
 *   This is just the number of passengers being considered for a trip.
 *   If set, must be greater or equal to 0.
 * @param {number[]} request.tripTypes
 *   Restrict the search to only those vehicles that support at least
 *   one of the specified trip types.
 * @param {google.protobuf.Duration} request.maximumStaleness
 *   Restrict the search to only those vehicles that have updated
 *   their locations within the specified duration back from now.
 *   If present, must be a valid positive duration.
 * @param {number[]} request.vehicleTypeCategories
 *   Required. Restrict the search to those vehicles with the specified type categories.
 * @param {string[]} request.requiredAttributes
 *   Callers can form complex logical operations using the
 *   requiredAttributes and requiredOneOfAttributes fields.
 *
 *   requiredAttributes is a list; requiredOneOfAttributes uses a message which
 *   allows a list of lists. In combination, the two fields allow the
 *   composition of this expression:
 *
 *   ```
 *   (required_attribute[0] AND required_attribute[1] AND ...)
 *   AND
 *   (required_one_of_attribute{@link 0|0} OR required_one_of_attribute{@link 1|0} OR ...)
 *   AND
 *   (required_one_of_attribute{@link 0|1} OR required_one_of_attribute{@link 1|1} OR ...)
 *   ```
 *
 *   Restrict the search to only those vehicles
 *   with the specified attributes. This field is a conjunction/AND operation.
 *   Your app can specify up to 100 attributes; however, the combined
 *   key:value string length cannot exceed 1024 characters.
 * @param {string[]} request.requiredOneOfAttributes
 *   Restrict the search to only those vehicles with at least one
 *   of the specified attributes applied to each VehicleAttributeList.
 *   Within each list, a vehicle must match at least one of the attributes.
 *   This field is an inclusive disjunction/OR operation in each
 *   VehicleAttributeList and a conjunction/AND operation across the collection
 *   of VehicleAttributeList.
 *   Format: key1:value1|key2:value2|key3:value3...
 * @param {string[]} request.requiredOneOfAttributeSets
 *   Restrict the search to only those vehicles with at least one set of the
 *   specified attributes in the VehicleAttributeList. Within each list, a
 *   vehicle must match all of the attributes. This field is a conjunction/AND
 *   operation in each VehicleAttributeList and inclusive disjunction/OR
 *   operation across the collection of VehicleAttributeList.
 *   Format: key1:value1|key2:value2|key3:value3...
 * @param {maps.fleetengine.v1.VehicleState} request.vehicleState
 *   Restrict the search to only those vehicles that have this vehicle state.
 * @param {boolean} request.onTripOnly
 *   Only return the vehicles with current trip(s).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Vehicle]{@link maps.fleetengine.v1.Vehicle}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listVehiclesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listVehicles(
      request?: protos.maps.fleetengine.v1.IListVehiclesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.maps.fleetengine.v1.IListVehiclesRequest,
          protos.maps.fleetengine.v1.IListVehiclesResponse|null|undefined,
          protos.maps.fleetengine.v1.IVehicle>,
      callback?: PaginationCallback<
          protos.maps.fleetengine.v1.IListVehiclesRequest,
          protos.maps.fleetengine.v1.IListVehiclesResponse|null|undefined,
          protos.maps.fleetengine.v1.IVehicle>):
      Promise<[
        protos.maps.fleetengine.v1.IVehicle[],
        protos.maps.fleetengine.v1.IListVehiclesRequest|null,
        protos.maps.fleetengine.v1.IListVehiclesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listVehicles(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.v1.RequestHeader} request.header
 *   The standard Fleet Engine request header.
 * @param {string} request.parent
 *   Required. Must be in the format "providers/{provider}".
 *   The provider must be the Project ID (for example, sample-cloud-project)
 *   of the Google Cloud Project of which the service account making
 *   this call is a member.
 * @param {number} request.pageSize
 *   The maximum number of vehicles to return.
 *   Default value: 100.
 * @param {string} request.pageToken
 *   The next_page_token value returned from a previous response, if any.
 * @param {google.protobuf.Int32Value} request.minimumCapacity
 *   Specifies the required minimum capacity of the vehicle.
 *   The driver is not considered in the capacity search.
 *   This is just the number of passengers being considered for a trip.
 *   If set, must be greater or equal to 0.
 * @param {number[]} request.tripTypes
 *   Restrict the search to only those vehicles that support at least
 *   one of the specified trip types.
 * @param {google.protobuf.Duration} request.maximumStaleness
 *   Restrict the search to only those vehicles that have updated
 *   their locations within the specified duration back from now.
 *   If present, must be a valid positive duration.
 * @param {number[]} request.vehicleTypeCategories
 *   Required. Restrict the search to those vehicles with the specified type categories.
 * @param {string[]} request.requiredAttributes
 *   Callers can form complex logical operations using the
 *   requiredAttributes and requiredOneOfAttributes fields.
 *
 *   requiredAttributes is a list; requiredOneOfAttributes uses a message which
 *   allows a list of lists. In combination, the two fields allow the
 *   composition of this expression:
 *
 *   ```
 *   (required_attribute[0] AND required_attribute[1] AND ...)
 *   AND
 *   (required_one_of_attribute{@link 0|0} OR required_one_of_attribute{@link 1|0} OR ...)
 *   AND
 *   (required_one_of_attribute{@link 0|1} OR required_one_of_attribute{@link 1|1} OR ...)
 *   ```
 *
 *   Restrict the search to only those vehicles
 *   with the specified attributes. This field is a conjunction/AND operation.
 *   Your app can specify up to 100 attributes; however, the combined
 *   key:value string length cannot exceed 1024 characters.
 * @param {string[]} request.requiredOneOfAttributes
 *   Restrict the search to only those vehicles with at least one
 *   of the specified attributes applied to each VehicleAttributeList.
 *   Within each list, a vehicle must match at least one of the attributes.
 *   This field is an inclusive disjunction/OR operation in each
 *   VehicleAttributeList and a conjunction/AND operation across the collection
 *   of VehicleAttributeList.
 *   Format: key1:value1|key2:value2|key3:value3...
 * @param {string[]} request.requiredOneOfAttributeSets
 *   Restrict the search to only those vehicles with at least one set of the
 *   specified attributes in the VehicleAttributeList. Within each list, a
 *   vehicle must match all of the attributes. This field is a conjunction/AND
 *   operation in each VehicleAttributeList and inclusive disjunction/OR
 *   operation across the collection of VehicleAttributeList.
 *   Format: key1:value1|key2:value2|key3:value3...
 * @param {maps.fleetengine.v1.VehicleState} request.vehicleState
 *   Restrict the search to only those vehicles that have this vehicle state.
 * @param {boolean} request.onTripOnly
 *   Only return the vehicles with current trip(s).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Vehicle]{@link maps.fleetengine.v1.Vehicle} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listVehiclesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listVehiclesStream(
      request?: protos.maps.fleetengine.v1.IListVehiclesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listVehicles.createStream(
      this.innerApiCalls.listVehicles as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listVehicles`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.v1.RequestHeader} request.header
 *   The standard Fleet Engine request header.
 * @param {string} request.parent
 *   Required. Must be in the format "providers/{provider}".
 *   The provider must be the Project ID (for example, sample-cloud-project)
 *   of the Google Cloud Project of which the service account making
 *   this call is a member.
 * @param {number} request.pageSize
 *   The maximum number of vehicles to return.
 *   Default value: 100.
 * @param {string} request.pageToken
 *   The next_page_token value returned from a previous response, if any.
 * @param {google.protobuf.Int32Value} request.minimumCapacity
 *   Specifies the required minimum capacity of the vehicle.
 *   The driver is not considered in the capacity search.
 *   This is just the number of passengers being considered for a trip.
 *   If set, must be greater or equal to 0.
 * @param {number[]} request.tripTypes
 *   Restrict the search to only those vehicles that support at least
 *   one of the specified trip types.
 * @param {google.protobuf.Duration} request.maximumStaleness
 *   Restrict the search to only those vehicles that have updated
 *   their locations within the specified duration back from now.
 *   If present, must be a valid positive duration.
 * @param {number[]} request.vehicleTypeCategories
 *   Required. Restrict the search to those vehicles with the specified type categories.
 * @param {string[]} request.requiredAttributes
 *   Callers can form complex logical operations using the
 *   requiredAttributes and requiredOneOfAttributes fields.
 *
 *   requiredAttributes is a list; requiredOneOfAttributes uses a message which
 *   allows a list of lists. In combination, the two fields allow the
 *   composition of this expression:
 *
 *   ```
 *   (required_attribute[0] AND required_attribute[1] AND ...)
 *   AND
 *   (required_one_of_attribute{@link 0|0} OR required_one_of_attribute{@link 1|0} OR ...)
 *   AND
 *   (required_one_of_attribute{@link 0|1} OR required_one_of_attribute{@link 1|1} OR ...)
 *   ```
 *
 *   Restrict the search to only those vehicles
 *   with the specified attributes. This field is a conjunction/AND operation.
 *   Your app can specify up to 100 attributes; however, the combined
 *   key:value string length cannot exceed 1024 characters.
 * @param {string[]} request.requiredOneOfAttributes
 *   Restrict the search to only those vehicles with at least one
 *   of the specified attributes applied to each VehicleAttributeList.
 *   Within each list, a vehicle must match at least one of the attributes.
 *   This field is an inclusive disjunction/OR operation in each
 *   VehicleAttributeList and a conjunction/AND operation across the collection
 *   of VehicleAttributeList.
 *   Format: key1:value1|key2:value2|key3:value3...
 * @param {string[]} request.requiredOneOfAttributeSets
 *   Restrict the search to only those vehicles with at least one set of the
 *   specified attributes in the VehicleAttributeList. Within each list, a
 *   vehicle must match all of the attributes. This field is a conjunction/AND
 *   operation in each VehicleAttributeList and inclusive disjunction/OR
 *   operation across the collection of VehicleAttributeList.
 *   Format: key1:value1|key2:value2|key3:value3...
 * @param {maps.fleetengine.v1.VehicleState} request.vehicleState
 *   Restrict the search to only those vehicles that have this vehicle state.
 * @param {boolean} request.onTripOnly
 *   Only return the vehicles with current trip(s).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Vehicle]{@link maps.fleetengine.v1.Vehicle}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listVehiclesAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listVehiclesAsync(
      request?: protos.maps.fleetengine.v1.IListVehiclesRequest,
      options?: CallOptions):
    AsyncIterable<protos.maps.fleetengine.v1.IVehicle>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listVehicles.asyncIterate(
      this.innerApiCalls['listVehicles'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.maps.fleetengine.v1.IVehicle>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified trip resource name string.
   *
   * @param {string} provider
   * @param {string} trip
   * @returns {string} Resource name string.
   */
  tripPath(provider:string,trip:string) {
    return this.pathTemplates.tripPathTemplate.render({
      provider: provider,
      trip: trip,
    });
  }

  /**
   * Parse the provider from Trip resource.
   *
   * @param {string} tripName
   *   A fully-qualified path representing Trip resource.
   * @returns {string} A string representing the provider.
   */
  matchProviderFromTripName(tripName: string) {
    return this.pathTemplates.tripPathTemplate.match(tripName).provider;
  }

  /**
   * Parse the trip from Trip resource.
   *
   * @param {string} tripName
   *   A fully-qualified path representing Trip resource.
   * @returns {string} A string representing the trip.
   */
  matchTripFromTripName(tripName: string) {
    return this.pathTemplates.tripPathTemplate.match(tripName).trip;
  }

  /**
   * Return a fully-qualified vehicle resource name string.
   *
   * @param {string} provider
   * @param {string} vehicle
   * @returns {string} Resource name string.
   */
  vehiclePath(provider:string,vehicle:string) {
    return this.pathTemplates.vehiclePathTemplate.render({
      provider: provider,
      vehicle: vehicle,
    });
  }

  /**
   * Parse the provider from Vehicle resource.
   *
   * @param {string} vehicleName
   *   A fully-qualified path representing Vehicle resource.
   * @returns {string} A string representing the provider.
   */
  matchProviderFromVehicleName(vehicleName: string) {
    return this.pathTemplates.vehiclePathTemplate.match(vehicleName).provider;
  }

  /**
   * Parse the vehicle from Vehicle resource.
   *
   * @param {string} vehicleName
   *   A fully-qualified path representing Vehicle resource.
   * @returns {string} A string representing the vehicle.
   */
  matchVehicleFromVehicleName(vehicleName: string) {
    return this.pathTemplates.vehiclePathTemplate.match(vehicleName).vehicle;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.vehicleServiceStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
