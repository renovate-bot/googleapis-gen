// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/maps/roads/v1op/roads.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Maps.Roads.V1Op {

  /// <summary>Holder for reflection information generated from google/maps/roads/v1op/roads.proto</summary>
  public static partial class RoadsReflection {

    #region Descriptor
    /// <summary>File descriptor for google/maps/roads/v1op/roads.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RoadsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJnb29nbGUvbWFwcy9yb2Fkcy92MW9wL3JvYWRzLnByb3RvEhZnb29nbGUu",
            "bWFwcy5yb2Fkcy52MW9wGhxnb29nbGUvYXBpL2Fubm90YXRpb25zLnByb3Rv",
            "Ghdnb29nbGUvYXBpL2NsaWVudC5wcm90bxoeZ29vZ2xlL3Byb3RvYnVmL3dy",
            "YXBwZXJzLnByb3RvGhhnb29nbGUvdHlwZS9sYXRsbmcucHJvdG8iggEKElNu",
            "YXBUb1JvYWRzUmVxdWVzdBIMCgRwYXRoGAEgASgJEhMKC2ludGVycG9sYXRl",
            "GAIgASgIEhAKCGFzc2V0X2lkGAMgASgJEjcKC3RyYXZlbF9tb2RlGAQgASgO",
            "MiIuZ29vZ2xlLm1hcHMucm9hZHMudjFvcC5UcmF2ZWxNb2RlIn0KDFNuYXBw",
            "ZWRQb2ludBIlCghsb2NhdGlvbhgBIAEoCzITLmdvb2dsZS50eXBlLkxhdExu",
            "ZxI0Cg5vcmlnaW5hbF9pbmRleBgCIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5V",
            "SW50MzJWYWx1ZRIQCghwbGFjZV9pZBgDIAEoCSJsChNTbmFwVG9Sb2Fkc1Jl",
            "c3BvbnNlEjwKDnNuYXBwZWRfcG9pbnRzGAEgAygLMiQuZ29vZ2xlLm1hcHMu",
            "cm9hZHMudjFvcC5TbmFwcGVkUG9pbnQSFwoPd2FybmluZ19tZXNzYWdlGAIg",
            "ASgJImIKF0xpc3ROZWFyZXN0Um9hZHNSZXF1ZXN0Eg4KBnBvaW50cxgBIAEo",
            "CRI3Cgt0cmF2ZWxfbW9kZRgCIAEoDjIiLmdvb2dsZS5tYXBzLnJvYWRzLnYx",
            "b3AuVHJhdmVsTW9kZSJYChhMaXN0TmVhcmVzdFJvYWRzUmVzcG9uc2USPAoO",
            "c25hcHBlZF9wb2ludHMYASADKAsyJC5nb29nbGUubWFwcy5yb2Fkcy52MW9w",
            "LlNuYXBwZWRQb2ludCpQCgpUcmF2ZWxNb2RlEhsKF1RSQVZFTF9NT0RFX1VO",
            "U1BFQ0lGSUVEEAASCwoHRFJJVklORxABEgsKB0NZQ0xJTkcQAhILCgdXQUxL",
            "SU5HEAMymwIKDFJvYWRzU2VydmljZRJvCgtTbmFwVG9Sb2FkcxIqLmdvb2ds",
            "ZS5tYXBzLnJvYWRzLnYxb3AuU25hcFRvUm9hZHNSZXF1ZXN0GisuZ29vZ2xl",
            "Lm1hcHMucm9hZHMudjFvcC5TbmFwVG9Sb2Fkc1Jlc3BvbnNlIgfaQQRwYXRo",
            "EoABChBMaXN0TmVhcmVzdFJvYWRzEi8uZ29vZ2xlLm1hcHMucm9hZHMudjFv",
            "cC5MaXN0TmVhcmVzdFJvYWRzUmVxdWVzdBowLmdvb2dsZS5tYXBzLnJvYWRz",
            "LnYxb3AuTGlzdE5lYXJlc3RSb2Fkc1Jlc3BvbnNlIgnaQQZwb2ludHMaF8pB",
            "FHJvYWRzLmdvb2dsZWFwaXMuY29tQmcKGmNvbS5nb29nbGUubWFwcy5yb2Fk",
            "cy52MW9wQgpSb2Fkc1Byb3RvUAFaO2dvb2dsZS5nb2xhbmcub3JnL2dlbnBy",
            "b3RvL2dvb2dsZWFwaXMvbWFwcy9yb2Fkcy92MW9wO3JvYWRzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Api.ClientReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Google.Type.LatlngReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Google.Maps.Roads.V1Op.TravelMode), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Maps.Roads.V1Op.SnapToRoadsRequest), global::Google.Maps.Roads.V1Op.SnapToRoadsRequest.Parser, new[]{ "Path", "Interpolate", "AssetId", "TravelMode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Maps.Roads.V1Op.SnappedPoint), global::Google.Maps.Roads.V1Op.SnappedPoint.Parser, new[]{ "Location", "OriginalIndex", "PlaceId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Maps.Roads.V1Op.SnapToRoadsResponse), global::Google.Maps.Roads.V1Op.SnapToRoadsResponse.Parser, new[]{ "SnappedPoints", "WarningMessage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Maps.Roads.V1Op.ListNearestRoadsRequest), global::Google.Maps.Roads.V1Op.ListNearestRoadsRequest.Parser, new[]{ "Points", "TravelMode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Maps.Roads.V1Op.ListNearestRoadsResponse), global::Google.Maps.Roads.V1Op.ListNearestRoadsResponse.Parser, new[]{ "SnappedPoints" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// An enum representing the mode of travel used for snapping.
  /// </summary>
  public enum TravelMode {
    [pbr::OriginalName("TRAVEL_MODE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("DRIVING")] Driving = 1,
    [pbr::OriginalName("CYCLING")] Cycling = 2,
    [pbr::OriginalName("WALKING")] Walking = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  /// A request to the SnapToRoads method, requesting that a sequence of points be
  /// snapped to road segments.
  /// </summary>
  public sealed partial class SnapToRoadsRequest : pb::IMessage<SnapToRoadsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SnapToRoadsRequest> _parser = new pb::MessageParser<SnapToRoadsRequest>(() => new SnapToRoadsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SnapToRoadsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Maps.Roads.V1Op.RoadsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapToRoadsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapToRoadsRequest(SnapToRoadsRequest other) : this() {
      path_ = other.path_;
      interpolate_ = other.interpolate_;
      assetId_ = other.assetId_;
      travelMode_ = other.travelMode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapToRoadsRequest Clone() {
      return new SnapToRoadsRequest(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private string path_ = "";
    /// <summary>
    /// The path to be snapped as a series of lat, lng points. Specified as
    /// a string of the format: lat,lng|lat,lng|...
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "interpolate" field.</summary>
    public const int InterpolateFieldNumber = 2;
    private bool interpolate_;
    /// <summary>
    /// Whether to interpolate the points to return full road geometry.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Interpolate {
      get { return interpolate_; }
      set {
        interpolate_ = value;
      }
    }

    /// <summary>Field number for the "asset_id" field.</summary>
    public const int AssetIdFieldNumber = 3;
    private string assetId_ = "";
    /// <summary>
    /// The asset ID of the asset to which this path relates. This is used for
    /// abuse detection purposes for clients with asset-based SKUs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssetId {
      get { return assetId_; }
      set {
        assetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "travel_mode" field.</summary>
    public const int TravelModeFieldNumber = 4;
    private global::Google.Maps.Roads.V1Op.TravelMode travelMode_ = global::Google.Maps.Roads.V1Op.TravelMode.Unspecified;
    /// <summary>
    /// The type of travel being tracked. This will constrain the paths we snap to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Maps.Roads.V1Op.TravelMode TravelMode {
      get { return travelMode_; }
      set {
        travelMode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SnapToRoadsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SnapToRoadsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Path != other.Path) return false;
      if (Interpolate != other.Interpolate) return false;
      if (AssetId != other.AssetId) return false;
      if (TravelMode != other.TravelMode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (Interpolate != false) hash ^= Interpolate.GetHashCode();
      if (AssetId.Length != 0) hash ^= AssetId.GetHashCode();
      if (TravelMode != global::Google.Maps.Roads.V1Op.TravelMode.Unspecified) hash ^= TravelMode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Path.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Path);
      }
      if (Interpolate != false) {
        output.WriteRawTag(16);
        output.WriteBool(Interpolate);
      }
      if (AssetId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AssetId);
      }
      if (TravelMode != global::Google.Maps.Roads.V1Op.TravelMode.Unspecified) {
        output.WriteRawTag(32);
        output.WriteEnum((int) TravelMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Path.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Path);
      }
      if (Interpolate != false) {
        output.WriteRawTag(16);
        output.WriteBool(Interpolate);
      }
      if (AssetId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AssetId);
      }
      if (TravelMode != global::Google.Maps.Roads.V1Op.TravelMode.Unspecified) {
        output.WriteRawTag(32);
        output.WriteEnum((int) TravelMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (Interpolate != false) {
        size += 1 + 1;
      }
      if (AssetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetId);
      }
      if (TravelMode != global::Google.Maps.Roads.V1Op.TravelMode.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TravelMode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SnapToRoadsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.Interpolate != false) {
        Interpolate = other.Interpolate;
      }
      if (other.AssetId.Length != 0) {
        AssetId = other.AssetId;
      }
      if (other.TravelMode != global::Google.Maps.Roads.V1Op.TravelMode.Unspecified) {
        TravelMode = other.TravelMode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Path = input.ReadString();
            break;
          }
          case 16: {
            Interpolate = input.ReadBool();
            break;
          }
          case 26: {
            AssetId = input.ReadString();
            break;
          }
          case 32: {
            TravelMode = (global::Google.Maps.Roads.V1Op.TravelMode) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Path = input.ReadString();
            break;
          }
          case 16: {
            Interpolate = input.ReadBool();
            break;
          }
          case 26: {
            AssetId = input.ReadString();
            break;
          }
          case 32: {
            TravelMode = (global::Google.Maps.Roads.V1Op.TravelMode) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A snapped point object, representing the result of snapping.
  /// </summary>
  public sealed partial class SnappedPoint : pb::IMessage<SnappedPoint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SnappedPoint> _parser = new pb::MessageParser<SnappedPoint>(() => new SnappedPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SnappedPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Maps.Roads.V1Op.RoadsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnappedPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnappedPoint(SnappedPoint other) : this() {
      location_ = other.location_ != null ? other.location_.Clone() : null;
      OriginalIndex = other.OriginalIndex;
      placeId_ = other.placeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnappedPoint Clone() {
      return new SnappedPoint(this);
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 1;
    private global::Google.Type.LatLng location_;
    /// <summary>
    /// The lat,lng of the snapped location.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.LatLng Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "original_index" field.</summary>
    public const int OriginalIndexFieldNumber = 2;
    private static readonly pb::FieldCodec<uint?> _single_originalIndex_codec = pb::FieldCodec.ForStructWrapper<uint>(18);
    private uint? originalIndex_;
    /// <summary>
    /// The index into the original path of the equivalent pre-snapped point.
    /// This allows for identification of points which have been interpolated if
    /// this index is missing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? OriginalIndex {
      get { return originalIndex_; }
      set {
        originalIndex_ = value;
      }
    }


    /// <summary>Field number for the "place_id" field.</summary>
    public const int PlaceIdFieldNumber = 3;
    private string placeId_ = "";
    /// <summary>
    /// The place ID for this snapped location (road segment). These are the same
    /// as are currently used by the Places API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlaceId {
      get { return placeId_; }
      set {
        placeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SnappedPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SnappedPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Location, other.Location)) return false;
      if (OriginalIndex != other.OriginalIndex) return false;
      if (PlaceId != other.PlaceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (location_ != null) hash ^= Location.GetHashCode();
      if (originalIndex_ != null) hash ^= OriginalIndex.GetHashCode();
      if (PlaceId.Length != 0) hash ^= PlaceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (location_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Location);
      }
      if (originalIndex_ != null) {
        _single_originalIndex_codec.WriteTagAndValue(output, OriginalIndex);
      }
      if (PlaceId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PlaceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (location_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Location);
      }
      if (originalIndex_ != null) {
        _single_originalIndex_codec.WriteTagAndValue(ref output, OriginalIndex);
      }
      if (PlaceId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PlaceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (originalIndex_ != null) {
        size += _single_originalIndex_codec.CalculateSizeWithTag(OriginalIndex);
      }
      if (PlaceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlaceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SnappedPoint other) {
      if (other == null) {
        return;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          Location = new global::Google.Type.LatLng();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.originalIndex_ != null) {
        if (originalIndex_ == null || other.OriginalIndex != 0) {
          OriginalIndex = other.OriginalIndex;
        }
      }
      if (other.PlaceId.Length != 0) {
        PlaceId = other.PlaceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (location_ == null) {
              Location = new global::Google.Type.LatLng();
            }
            input.ReadMessage(Location);
            break;
          }
          case 18: {
            uint? value = _single_originalIndex_codec.Read(input);
            if (originalIndex_ == null || value != 0) {
              OriginalIndex = value;
            }
            break;
          }
          case 26: {
            PlaceId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (location_ == null) {
              Location = new global::Google.Type.LatLng();
            }
            input.ReadMessage(Location);
            break;
          }
          case 18: {
            uint? value = _single_originalIndex_codec.Read(ref input);
            if (originalIndex_ == null || value != 0) {
              OriginalIndex = value;
            }
            break;
          }
          case 26: {
            PlaceId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The response from the SnapToRoads method, returning a sequence of snapped
  /// points.
  /// </summary>
  public sealed partial class SnapToRoadsResponse : pb::IMessage<SnapToRoadsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SnapToRoadsResponse> _parser = new pb::MessageParser<SnapToRoadsResponse>(() => new SnapToRoadsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SnapToRoadsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Maps.Roads.V1Op.RoadsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapToRoadsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapToRoadsResponse(SnapToRoadsResponse other) : this() {
      snappedPoints_ = other.snappedPoints_.Clone();
      warningMessage_ = other.warningMessage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapToRoadsResponse Clone() {
      return new SnapToRoadsResponse(this);
    }

    /// <summary>Field number for the "snapped_points" field.</summary>
    public const int SnappedPointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Maps.Roads.V1Op.SnappedPoint> _repeated_snappedPoints_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Maps.Roads.V1Op.SnappedPoint.Parser);
    private readonly pbc::RepeatedField<global::Google.Maps.Roads.V1Op.SnappedPoint> snappedPoints_ = new pbc::RepeatedField<global::Google.Maps.Roads.V1Op.SnappedPoint>();
    /// <summary>
    /// A list of snapped points.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Maps.Roads.V1Op.SnappedPoint> SnappedPoints {
      get { return snappedPoints_; }
    }

    /// <summary>Field number for the "warning_message" field.</summary>
    public const int WarningMessageFieldNumber = 2;
    private string warningMessage_ = "";
    /// <summary>
    /// User-visible warning message, if any, which can be shown alongside a valid
    /// result.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WarningMessage {
      get { return warningMessage_; }
      set {
        warningMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SnapToRoadsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SnapToRoadsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!snappedPoints_.Equals(other.snappedPoints_)) return false;
      if (WarningMessage != other.WarningMessage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= snappedPoints_.GetHashCode();
      if (WarningMessage.Length != 0) hash ^= WarningMessage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      snappedPoints_.WriteTo(output, _repeated_snappedPoints_codec);
      if (WarningMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(WarningMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      snappedPoints_.WriteTo(ref output, _repeated_snappedPoints_codec);
      if (WarningMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(WarningMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += snappedPoints_.CalculateSize(_repeated_snappedPoints_codec);
      if (WarningMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WarningMessage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SnapToRoadsResponse other) {
      if (other == null) {
        return;
      }
      snappedPoints_.Add(other.snappedPoints_);
      if (other.WarningMessage.Length != 0) {
        WarningMessage = other.WarningMessage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            snappedPoints_.AddEntriesFrom(input, _repeated_snappedPoints_codec);
            break;
          }
          case 18: {
            WarningMessage = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            snappedPoints_.AddEntriesFrom(ref input, _repeated_snappedPoints_codec);
            break;
          }
          case 18: {
            WarningMessage = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A request to the ListNearestRoads method, requesting that a sequence of
  /// points be snapped individually to the road segment that each is closest to.
  /// </summary>
  public sealed partial class ListNearestRoadsRequest : pb::IMessage<ListNearestRoadsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListNearestRoadsRequest> _parser = new pb::MessageParser<ListNearestRoadsRequest>(() => new ListNearestRoadsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListNearestRoadsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Maps.Roads.V1Op.RoadsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNearestRoadsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNearestRoadsRequest(ListNearestRoadsRequest other) : this() {
      points_ = other.points_;
      travelMode_ = other.travelMode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNearestRoadsRequest Clone() {
      return new ListNearestRoadsRequest(this);
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 1;
    private string points_ = "";
    /// <summary>
    /// The points to be snapped as a series of lat, lng points. Specified as
    /// a string of the format: lat,lng|lat,lng|...
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Points {
      get { return points_; }
      set {
        points_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "travel_mode" field.</summary>
    public const int TravelModeFieldNumber = 2;
    private global::Google.Maps.Roads.V1Op.TravelMode travelMode_ = global::Google.Maps.Roads.V1Op.TravelMode.Unspecified;
    /// <summary>
    /// The type of travel being tracked. This will constrain the roads we snap to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Maps.Roads.V1Op.TravelMode TravelMode {
      get { return travelMode_; }
      set {
        travelMode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListNearestRoadsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListNearestRoadsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Points != other.Points) return false;
      if (TravelMode != other.TravelMode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Points.Length != 0) hash ^= Points.GetHashCode();
      if (TravelMode != global::Google.Maps.Roads.V1Op.TravelMode.Unspecified) hash ^= TravelMode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Points.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Points);
      }
      if (TravelMode != global::Google.Maps.Roads.V1Op.TravelMode.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) TravelMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Points.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Points);
      }
      if (TravelMode != global::Google.Maps.Roads.V1Op.TravelMode.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) TravelMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Points.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Points);
      }
      if (TravelMode != global::Google.Maps.Roads.V1Op.TravelMode.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TravelMode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListNearestRoadsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Points.Length != 0) {
        Points = other.Points;
      }
      if (other.TravelMode != global::Google.Maps.Roads.V1Op.TravelMode.Unspecified) {
        TravelMode = other.TravelMode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Points = input.ReadString();
            break;
          }
          case 16: {
            TravelMode = (global::Google.Maps.Roads.V1Op.TravelMode) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Points = input.ReadString();
            break;
          }
          case 16: {
            TravelMode = (global::Google.Maps.Roads.V1Op.TravelMode) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The response from the ListNearestRoads method, returning a list of snapped
  /// points.
  /// </summary>
  public sealed partial class ListNearestRoadsResponse : pb::IMessage<ListNearestRoadsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListNearestRoadsResponse> _parser = new pb::MessageParser<ListNearestRoadsResponse>(() => new ListNearestRoadsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListNearestRoadsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Maps.Roads.V1Op.RoadsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNearestRoadsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNearestRoadsResponse(ListNearestRoadsResponse other) : this() {
      snappedPoints_ = other.snappedPoints_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNearestRoadsResponse Clone() {
      return new ListNearestRoadsResponse(this);
    }

    /// <summary>Field number for the "snapped_points" field.</summary>
    public const int SnappedPointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Maps.Roads.V1Op.SnappedPoint> _repeated_snappedPoints_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Maps.Roads.V1Op.SnappedPoint.Parser);
    private readonly pbc::RepeatedField<global::Google.Maps.Roads.V1Op.SnappedPoint> snappedPoints_ = new pbc::RepeatedField<global::Google.Maps.Roads.V1Op.SnappedPoint>();
    /// <summary>
    /// A list of snapped points.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Maps.Roads.V1Op.SnappedPoint> SnappedPoints {
      get { return snappedPoints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListNearestRoadsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListNearestRoadsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!snappedPoints_.Equals(other.snappedPoints_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= snappedPoints_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      snappedPoints_.WriteTo(output, _repeated_snappedPoints_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      snappedPoints_.WriteTo(ref output, _repeated_snappedPoints_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += snappedPoints_.CalculateSize(_repeated_snappedPoints_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListNearestRoadsResponse other) {
      if (other == null) {
        return;
      }
      snappedPoints_.Add(other.snappedPoints_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            snappedPoints_.AddEntriesFrom(input, _repeated_snappedPoints_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            snappedPoints_.AddEntriesFrom(ref input, _repeated_snappedPoints_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
