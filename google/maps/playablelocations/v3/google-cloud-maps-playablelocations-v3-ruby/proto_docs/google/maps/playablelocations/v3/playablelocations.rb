# frozen_string_literal: true

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!


module Google
  module Maps
    module Playablelocations
      module V3
        # Life of a query:
        #
        # - When a game starts in a new location, your game server issues a
        # {::Google::Maps::Playablelocations::V3::PlayableLocations::Client#sample_playable_locations SamplePlayableLocations}
        # request. The request specifies the S2 cell, and contains one or more
        # "criteria" for filtering:
        #
        # - Criterion 0: i locations for long-lived bases, or level 0 monsters, or...
        # - Criterion 1: j locations for short-lived bases, or level 1 monsters, ...
        # - Criterion 2: k locations for random objects.
        # - etc (up to 5 criterion may be specified).
        #
        # `PlayableLocationList` will then contain mutually
        # exclusive lists of `PlayableLocation` objects that satisfy each of
        # the criteria. Think of it as a collection of real-world locations that you
        # can then associate with your game state.
        #
        # Note: These points are impermanent in nature. E.g, parks can close, and
        # places can be removed.
        #
        # The response specifies how long you can expect the playable locations to
        # last. Once they expire, you should query the `samplePlayableLocations` API
        # again to get a fresh view of the real world.
        # @!attribute [rw] area_filter
        #   @return [::Google::Maps::Playablelocations::V3::Sample::AreaFilter]
        #     Required. Specifies the area to search within for playable locations.
        # @!attribute [rw] criteria
        #   @return [::Array<::Google::Maps::Playablelocations::V3::Sample::Criterion>]
        #     Required. Specifies one or more (up to 5) criteria for filtering the
        #     returned playable locations.
        class SamplePlayableLocationsRequest
          include ::Google::Protobuf::MessageExts
          extend ::Google::Protobuf::MessageExts::ClassMethods
        end

        # Response for the
        # {::Google::Maps::Playablelocations::V3::PlayableLocations::Client#sample_playable_locations SamplePlayableLocations}
        # method.
        # @!attribute [rw] locations_per_game_object_type
        #   @return [::Google::Protobuf::Map{::Integer => ::Google::Maps::Playablelocations::V3::Sample::PlayableLocationList}]
        #     Each PlayableLocation object corresponds to a game_object_type specified
        #     in the request.
        # @!attribute [rw] ttl
        #   @return [::Google::Protobuf::Duration]
        #     Required. Specifies the "time-to-live" for the set of playable locations.
        #     You can use this value to determine how long to cache the set of playable
        #     locations. After this length of time, your back-end game server should
        #     issue a new
        #     {::Google::Maps::Playablelocations::V3::PlayableLocations::Client#sample_playable_locations SamplePlayableLocations}
        #     request to get a fresh set of playable locations (because for example, they
        #     might have been removed, a park might have closed for the day, a
        #     business might have closed permanently).
        class SamplePlayableLocationsResponse
          include ::Google::Protobuf::MessageExts
          extend ::Google::Protobuf::MessageExts::ClassMethods

          # @!attribute [rw] key
          #   @return [::Integer]
          # @!attribute [rw] value
          #   @return [::Google::Maps::Playablelocations::V3::Sample::PlayableLocationList]
          class LocationsPerGameObjectTypeEntry
            include ::Google::Protobuf::MessageExts
            extend ::Google::Protobuf::MessageExts::ClassMethods
          end
        end

        # A request for logging your player's bad location reports.
        # @!attribute [rw] player_reports
        #   @return [::Array<::Google::Maps::Playablelocations::V3::PlayerReport>]
        #     Required. Player reports. The maximum number of player reports that you can
        #     log at once is 50.
        # @!attribute [rw] request_id
        #   @return [::String]
        #     Required. A string that uniquely identifies the log player reports request.
        #     This allows you to detect duplicate requests. We recommend that you use
        #     UUIDs for this value. The value must not exceed 50 characters.
        #
        #     You should reuse the `request_id` only when retrying a request in the case
        #     of a failure. In that case, the request must be identical to the one that
        #     failed.
        # @!attribute [rw] client_info
        #   @return [::Google::Maps::Unity::ClientInfo]
        #     Required. Information about the client device (for example, device model
        #     and operating system).
        class LogPlayerReportsRequest
          include ::Google::Protobuf::MessageExts
          extend ::Google::Protobuf::MessageExts::ClassMethods
        end

        # A response for the
        # {::Google::Maps::Playablelocations::V3::PlayableLocations::Client#log_player_reports LogPlayerReports}
        # method.
        #
        # This method returns no data upon success.
        class LogPlayerReportsResponse
          include ::Google::Protobuf::MessageExts
          extend ::Google::Protobuf::MessageExts::ClassMethods
        end

        # A request for logging impressions.
        # @!attribute [rw] impressions
        #   @return [::Array<::Google::Maps::Playablelocations::V3::Impression>]
        #     Required. Impression event details. The maximum number of impression
        #     reports that you can log at once is 50.
        # @!attribute [rw] request_id
        #   @return [::String]
        #     Required. A string that uniquely identifies the log impressions request.
        #     This allows you to detect duplicate requests. We recommend that you use
        #     UUIDs for this value. The value must not exceed 50 characters.
        #
        #     You should reuse the `request_id` only when retrying a request in case of
        #     failure. In this case, the request must be identical to the one that
        #     failed.
        # @!attribute [rw] client_info
        #   @return [::Google::Maps::Unity::ClientInfo]
        #     Required. Information about the client device. For example, device model
        #     and operating system.
        class LogImpressionsRequest
          include ::Google::Protobuf::MessageExts
          extend ::Google::Protobuf::MessageExts::ClassMethods
        end

        # A response for the
        # {::Google::Maps::Playablelocations::V3::PlayableLocations::Client#log_impressions LogImpressions}
        # method. This method returns no data upon success.
        class LogImpressionsResponse
          include ::Google::Protobuf::MessageExts
          extend ::Google::Protobuf::MessageExts::ClassMethods
        end
      end
    end
  end
end
