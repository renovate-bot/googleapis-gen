# frozen_string_literal: true

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "helper"

require "gapic/grpc/service_stub"

require "google/maps/playablelocations/v3/playablelocations_pb"
require "google/maps/playablelocations/v3/playablelocations_services_pb"
require "google/maps/playablelocations/v3/playable_locations"

class ::Google::Maps::Playablelocations::V3::PlayableLocations::ClientTest < Minitest::Test
  class ClientStub
    attr_accessor :call_rpc_count, :requests

    def initialize response, operation, &block
      @response = response
      @operation = operation
      @block = block
      @call_rpc_count = 0
      @requests = []
    end

    def call_rpc *args, **kwargs
      @call_rpc_count += 1

      @requests << @block&.call(*args, **kwargs)

      yield @response, @operation if block_given?

      @response
    end
  end

  def test_sample_playable_locations
    # Create GRPC objects.
    grpc_response = ::Google::Maps::Playablelocations::V3::SamplePlayableLocationsResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    area_filter = {}
    criteria = [{}]

    sample_playable_locations_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :sample_playable_locations, name
      assert_kind_of ::Google::Maps::Playablelocations::V3::SamplePlayableLocationsRequest, request
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Maps::Playablelocations::V3::Sample::AreaFilter), request["area_filter"]
      assert_kind_of ::Google::Maps::Playablelocations::V3::Sample::Criterion, request["criteria"].first
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, sample_playable_locations_client_stub do
      # Create client
      client = ::Google::Maps::Playablelocations::V3::PlayableLocations::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.sample_playable_locations({ area_filter: area_filter, criteria: criteria }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.sample_playable_locations area_filter: area_filter, criteria: criteria do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.sample_playable_locations ::Google::Maps::Playablelocations::V3::SamplePlayableLocationsRequest.new(area_filter: area_filter, criteria: criteria) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.sample_playable_locations({ area_filter: area_filter, criteria: criteria }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.sample_playable_locations(::Google::Maps::Playablelocations::V3::SamplePlayableLocationsRequest.new(area_filter: area_filter, criteria: criteria), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, sample_playable_locations_client_stub.call_rpc_count
    end
  end

  def test_log_player_reports
    # Create GRPC objects.
    grpc_response = ::Google::Maps::Playablelocations::V3::LogPlayerReportsResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    player_reports = [{}]
    request_id = "hello world"
    client_info = {}

    log_player_reports_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :log_player_reports, name
      assert_kind_of ::Google::Maps::Playablelocations::V3::LogPlayerReportsRequest, request
      assert_kind_of ::Google::Maps::Playablelocations::V3::PlayerReport, request["player_reports"].first
      assert_equal "hello world", request["request_id"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Maps::Unity::ClientInfo), request["client_info"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, log_player_reports_client_stub do
      # Create client
      client = ::Google::Maps::Playablelocations::V3::PlayableLocations::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.log_player_reports({ player_reports: player_reports, request_id: request_id, client_info: client_info }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.log_player_reports player_reports: player_reports, request_id: request_id, client_info: client_info do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.log_player_reports ::Google::Maps::Playablelocations::V3::LogPlayerReportsRequest.new(player_reports: player_reports, request_id: request_id, client_info: client_info) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.log_player_reports({ player_reports: player_reports, request_id: request_id, client_info: client_info }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.log_player_reports(::Google::Maps::Playablelocations::V3::LogPlayerReportsRequest.new(player_reports: player_reports, request_id: request_id, client_info: client_info), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, log_player_reports_client_stub.call_rpc_count
    end
  end

  def test_log_impressions
    # Create GRPC objects.
    grpc_response = ::Google::Maps::Playablelocations::V3::LogImpressionsResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    impressions = [{}]
    request_id = "hello world"
    client_info = {}

    log_impressions_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :log_impressions, name
      assert_kind_of ::Google::Maps::Playablelocations::V3::LogImpressionsRequest, request
      assert_kind_of ::Google::Maps::Playablelocations::V3::Impression, request["impressions"].first
      assert_equal "hello world", request["request_id"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Maps::Unity::ClientInfo), request["client_info"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, log_impressions_client_stub do
      # Create client
      client = ::Google::Maps::Playablelocations::V3::PlayableLocations::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.log_impressions({ impressions: impressions, request_id: request_id, client_info: client_info }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.log_impressions impressions: impressions, request_id: request_id, client_info: client_info do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.log_impressions ::Google::Maps::Playablelocations::V3::LogImpressionsRequest.new(impressions: impressions, request_id: request_id, client_info: client_info) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.log_impressions({ impressions: impressions, request_id: request_id, client_info: client_info }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.log_impressions(::Google::Maps::Playablelocations::V3::LogImpressionsRequest.new(impressions: impressions, request_id: request_id, client_info: client_info), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, log_impressions_client_stub.call_rpc_count
    end
  end

  def test_configure
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure

    client = block_config = config = nil
    Gapic::ServiceStub.stub :new, nil do
      client = ::Google::Maps::Playablelocations::V3::PlayableLocations::Client.new do |config|
        config.credentials = grpc_channel
      end
    end

    config = client.configure do |c|
      block_config = c
    end

    assert_same block_config, config
    assert_kind_of ::Google::Maps::Playablelocations::V3::PlayableLocations::Client::Configuration, config
  end
end
