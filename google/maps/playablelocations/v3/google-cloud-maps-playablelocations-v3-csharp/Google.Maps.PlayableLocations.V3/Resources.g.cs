// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/maps/playablelocations/v3/resources.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Maps.PlayableLocations.V3 {

  /// <summary>Holder for reflection information generated from google/maps/playablelocations/v3/resources.proto</summary>
  public static partial class ResourcesReflection {

    #region Descriptor
    /// <summary>File descriptor for google/maps/playablelocations/v3/resources.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ResourcesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjBnb29nbGUvbWFwcy9wbGF5YWJsZWxvY2F0aW9ucy92My9yZXNvdXJjZXMu",
            "cHJvdG8SIGdvb2dsZS5tYXBzLnBsYXlhYmxlbG9jYXRpb25zLnYzGh9nb29n",
            "bGUvYXBpL2ZpZWxkX2JlaGF2aW9yLnByb3RvGiBnb29nbGUvcHJvdG9idWYv",
            "ZmllbGRfbWFzay5wcm90bxoYZ29vZ2xlL3R5cGUvbGF0bG5nLnByb3RvIukC",
            "CgxQbGF5ZXJSZXBvcnQSGgoNbG9jYXRpb25fbmFtZRgBIAEoCUID4EECElYK",
            "B3JlYXNvbnMYAiADKA4yQC5nb29nbGUubWFwcy5wbGF5YWJsZWxvY2F0aW9u",
            "cy52My5QbGF5ZXJSZXBvcnQuQmFkTG9jYXRpb25SZWFzb25CA+BBAhIbCg5y",
            "ZWFzb25fZGV0YWlscxgDIAEoCUID4EECEhUKDWxhbmd1YWdlX2NvZGUYBCAB",
            "KAkisAEKEUJhZExvY2F0aW9uUmVhc29uEiMKH0JBRF9MT0NBVElPTl9SRUFT",
            "T05fVU5TUEVDSUZJRUQQABIJCgVPVEhFUhABEh0KGU5PVF9QRURFU1RSSUFO",
            "X0FDQ0VTU0lCTEUQAhIWChJOT1RfT1BFTl9UT19QVUJMSUMQBBIWChJQRVJN",
            "QU5FTlRMWV9DTE9TRUQQBRIcChhURU1QT1JBUklMWV9JTkFDQ0VTU0lCTEUQ",
            "BiLvAQoKSW1wcmVzc2lvbhIaCg1sb2NhdGlvbl9uYW1lGAEgASgJQgPgQQIS",
            "WQoPaW1wcmVzc2lvbl90eXBlGAIgASgOMjsuZ29vZ2xlLm1hcHMucGxheWFi",
            "bGVsb2NhdGlvbnMudjMuSW1wcmVzc2lvbi5JbXByZXNzaW9uVHlwZUID4EEC",
            "EhgKEGdhbWVfb2JqZWN0X3R5cGUYBCABKAUiUAoOSW1wcmVzc2lvblR5cGUS",
            "HwobSU1QUkVTU0lPTl9UWVBFX1VOU1BFQ0lGSUVEEAASDQoJUFJFU0VOVEVE",
            "EAESDgoKSU5URVJBQ1RFRBACQtgBCiRjb20uZ29vZ2xlLm1hcHMucGxheWFi",
            "bGVsb2NhdGlvbnMudjNCDlJlc291cmNlc1Byb3RvUAFaUWdvb2dsZS5nb2xh",
            "bmcub3JnL2dlbnByb3RvL2dvb2dsZWFwaXMvbWFwcy9wbGF5YWJsZWxvY2F0",
            "aW9ucy92MztwbGF5YWJsZWxvY2F0aW9uc6ICBEdNUEyqAiBHb29nbGUuTWFw",
            "cy5QbGF5YWJsZUxvY2F0aW9ucy5WM8oCIEdvb2dsZVxNYXBzXFBsYXlhYmxl",
            "TG9jYXRpb25zXFYzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.FieldMaskReflection.Descriptor, global::Google.Type.LatlngReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Maps.PlayableLocations.V3.PlayerReport), global::Google.Maps.PlayableLocations.V3.PlayerReport.Parser, new[]{ "LocationName", "Reasons", "ReasonDetails", "LanguageCode" }, null, new[]{ typeof(global::Google.Maps.PlayableLocations.V3.PlayerReport.Types.BadLocationReason) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Maps.PlayableLocations.V3.Impression), global::Google.Maps.PlayableLocations.V3.Impression.Parser, new[]{ "LocationName", "ImpressionType", "GameObjectType" }, null, new[]{ typeof(global::Google.Maps.PlayableLocations.V3.Impression.Types.ImpressionType) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A report submitted by a player about a playable location that is considered
  /// inappropriate for use in the game.
  /// </summary>
  public sealed partial class PlayerReport : pb::IMessage<PlayerReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerReport> _parser = new pb::MessageParser<PlayerReport>(() => new PlayerReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Maps.PlayableLocations.V3.ResourcesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerReport(PlayerReport other) : this() {
      locationName_ = other.locationName_;
      reasons_ = other.reasons_.Clone();
      reasonDetails_ = other.reasonDetails_;
      languageCode_ = other.languageCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerReport Clone() {
      return new PlayerReport(this);
    }

    /// <summary>Field number for the "location_name" field.</summary>
    public const int LocationNameFieldNumber = 1;
    private string locationName_ = "";
    /// <summary>
    /// Required. The name of the playable location.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LocationName {
      get { return locationName_; }
      set {
        locationName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reasons" field.</summary>
    public const int ReasonsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Maps.PlayableLocations.V3.PlayerReport.Types.BadLocationReason> _repeated_reasons_codec
        = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::Google.Maps.PlayableLocations.V3.PlayerReport.Types.BadLocationReason) x);
    private readonly pbc::RepeatedField<global::Google.Maps.PlayableLocations.V3.PlayerReport.Types.BadLocationReason> reasons_ = new pbc::RepeatedField<global::Google.Maps.PlayableLocations.V3.PlayerReport.Types.BadLocationReason>();
    /// <summary>
    /// Required. One or more reasons why this playable location is considered bad.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Maps.PlayableLocations.V3.PlayerReport.Types.BadLocationReason> Reasons {
      get { return reasons_; }
    }

    /// <summary>Field number for the "reason_details" field.</summary>
    public const int ReasonDetailsFieldNumber = 3;
    private string reasonDetails_ = "";
    /// <summary>
    /// Required. A free-form description detailing why the playable location is
    /// considered bad.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReasonDetails {
      get { return reasonDetails_; }
      set {
        reasonDetails_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "language_code" field.</summary>
    public const int LanguageCodeFieldNumber = 4;
    private string languageCode_ = "";
    /// <summary>
    /// Language code (in BCP-47 format) indicating the language of the freeform
    /// description provided in `reason_details`. Examples are "en", "en-US" or
    /// "ja-Latn". For more information, see
    /// http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LanguageCode {
      get { return languageCode_; }
      set {
        languageCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LocationName != other.LocationName) return false;
      if(!reasons_.Equals(other.reasons_)) return false;
      if (ReasonDetails != other.ReasonDetails) return false;
      if (LanguageCode != other.LanguageCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LocationName.Length != 0) hash ^= LocationName.GetHashCode();
      hash ^= reasons_.GetHashCode();
      if (ReasonDetails.Length != 0) hash ^= ReasonDetails.GetHashCode();
      if (LanguageCode.Length != 0) hash ^= LanguageCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LocationName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LocationName);
      }
      reasons_.WriteTo(output, _repeated_reasons_codec);
      if (ReasonDetails.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ReasonDetails);
      }
      if (LanguageCode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LanguageCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LocationName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LocationName);
      }
      reasons_.WriteTo(ref output, _repeated_reasons_codec);
      if (ReasonDetails.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ReasonDetails);
      }
      if (LanguageCode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LanguageCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LocationName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocationName);
      }
      size += reasons_.CalculateSize(_repeated_reasons_codec);
      if (ReasonDetails.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReasonDetails);
      }
      if (LanguageCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LanguageCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerReport other) {
      if (other == null) {
        return;
      }
      if (other.LocationName.Length != 0) {
        LocationName = other.LocationName;
      }
      reasons_.Add(other.reasons_);
      if (other.ReasonDetails.Length != 0) {
        ReasonDetails = other.ReasonDetails;
      }
      if (other.LanguageCode.Length != 0) {
        LanguageCode = other.LanguageCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LocationName = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            reasons_.AddEntriesFrom(input, _repeated_reasons_codec);
            break;
          }
          case 26: {
            ReasonDetails = input.ReadString();
            break;
          }
          case 34: {
            LanguageCode = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            LocationName = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            reasons_.AddEntriesFrom(ref input, _repeated_reasons_codec);
            break;
          }
          case 26: {
            ReasonDetails = input.ReadString();
            break;
          }
          case 34: {
            LanguageCode = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the PlayerReport message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The reason why the playable location is considered bad.
      /// </summary>
      public enum BadLocationReason {
        /// <summary>
        /// Unspecified reason. Do not use.
        /// </summary>
        [pbr::OriginalName("BAD_LOCATION_REASON_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// The reason isn't one of the reasons in this enumeration.
        /// </summary>
        [pbr::OriginalName("OTHER")] Other = 1,
        /// <summary>
        /// The playable location isn't accessible to pedestrians. For example, if
        /// it's in the middle of a highway.
        /// </summary>
        [pbr::OriginalName("NOT_PEDESTRIAN_ACCESSIBLE")] NotPedestrianAccessible = 2,
        /// <summary>
        /// The playable location isn't open to the public. For example, a private
        /// office building.
        /// </summary>
        [pbr::OriginalName("NOT_OPEN_TO_PUBLIC")] NotOpenToPublic = 4,
        /// <summary>
        /// The playable location is permanently closed. For example, when a business
        /// has been shut down.
        /// </summary>
        [pbr::OriginalName("PERMANENTLY_CLOSED")] PermanentlyClosed = 5,
        /// <summary>
        /// The playable location is temporarily inaccessible. For example, when a
        /// business has closed for renovations.
        /// </summary>
        [pbr::OriginalName("TEMPORARILY_INACCESSIBLE")] TemporarilyInaccessible = 6,
      }

    }
    #endregion

  }

  /// <summary>
  /// Encapsulates impression event details.
  /// </summary>
  public sealed partial class Impression : pb::IMessage<Impression>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Impression> _parser = new pb::MessageParser<Impression>(() => new Impression());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Impression> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Maps.PlayableLocations.V3.ResourcesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Impression() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Impression(Impression other) : this() {
      locationName_ = other.locationName_;
      impressionType_ = other.impressionType_;
      gameObjectType_ = other.gameObjectType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Impression Clone() {
      return new Impression(this);
    }

    /// <summary>Field number for the "location_name" field.</summary>
    public const int LocationNameFieldNumber = 1;
    private string locationName_ = "";
    /// <summary>
    /// Required. The name of the playable location.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LocationName {
      get { return locationName_; }
      set {
        locationName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "impression_type" field.</summary>
    public const int ImpressionTypeFieldNumber = 2;
    private global::Google.Maps.PlayableLocations.V3.Impression.Types.ImpressionType impressionType_ = global::Google.Maps.PlayableLocations.V3.Impression.Types.ImpressionType.Unspecified;
    /// <summary>
    /// Required. The type of impression event.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Maps.PlayableLocations.V3.Impression.Types.ImpressionType ImpressionType {
      get { return impressionType_; }
      set {
        impressionType_ = value;
      }
    }

    /// <summary>Field number for the "game_object_type" field.</summary>
    public const int GameObjectTypeFieldNumber = 4;
    private int gameObjectType_;
    /// <summary>
    /// An arbitrary, developer-defined type identifier for each type of game
    /// object used in your game.
    ///
    /// Since players interact with differ types of game objects in different ways,
    /// this field allows you to segregate impression data by type for analysis.
    ///
    /// You should assign a unique `game_object_type` ID to represent a distinct
    /// type of game object in your game.
    ///
    /// For example, 1=monster location, 2=powerup location.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameObjectType {
      get { return gameObjectType_; }
      set {
        gameObjectType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Impression);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Impression other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LocationName != other.LocationName) return false;
      if (ImpressionType != other.ImpressionType) return false;
      if (GameObjectType != other.GameObjectType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LocationName.Length != 0) hash ^= LocationName.GetHashCode();
      if (ImpressionType != global::Google.Maps.PlayableLocations.V3.Impression.Types.ImpressionType.Unspecified) hash ^= ImpressionType.GetHashCode();
      if (GameObjectType != 0) hash ^= GameObjectType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LocationName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LocationName);
      }
      if (ImpressionType != global::Google.Maps.PlayableLocations.V3.Impression.Types.ImpressionType.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ImpressionType);
      }
      if (GameObjectType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GameObjectType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LocationName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LocationName);
      }
      if (ImpressionType != global::Google.Maps.PlayableLocations.V3.Impression.Types.ImpressionType.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ImpressionType);
      }
      if (GameObjectType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GameObjectType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LocationName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocationName);
      }
      if (ImpressionType != global::Google.Maps.PlayableLocations.V3.Impression.Types.ImpressionType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ImpressionType);
      }
      if (GameObjectType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameObjectType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Impression other) {
      if (other == null) {
        return;
      }
      if (other.LocationName.Length != 0) {
        LocationName = other.LocationName;
      }
      if (other.ImpressionType != global::Google.Maps.PlayableLocations.V3.Impression.Types.ImpressionType.Unspecified) {
        ImpressionType = other.ImpressionType;
      }
      if (other.GameObjectType != 0) {
        GameObjectType = other.GameObjectType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LocationName = input.ReadString();
            break;
          }
          case 16: {
            ImpressionType = (global::Google.Maps.PlayableLocations.V3.Impression.Types.ImpressionType) input.ReadEnum();
            break;
          }
          case 32: {
            GameObjectType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            LocationName = input.ReadString();
            break;
          }
          case 16: {
            ImpressionType = (global::Google.Maps.PlayableLocations.V3.Impression.Types.ImpressionType) input.ReadEnum();
            break;
          }
          case 32: {
            GameObjectType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Impression message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The type of impression event.
      /// </summary>
      public enum ImpressionType {
        /// <summary>
        /// Unspecified type. Do not use.
        /// </summary>
        [pbr::OriginalName("IMPRESSION_TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// The playable location was presented to a player.
        /// </summary>
        [pbr::OriginalName("PRESENTED")] Presented = 1,
        /// <summary>
        /// A player interacted with the playable location.
        /// </summary>
        [pbr::OriginalName("INTERACTED")] Interacted = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
