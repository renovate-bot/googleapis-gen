// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/identity/accesscontextmanager/v1/access_context_manager.proto
// </auto-generated>
// Original file comments:
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Identity.AccessContextManager.V1 {
  /// <summary>
  /// API for setting [Access Levels]
  /// [google.identity.accesscontextmanager.v1.AccessLevel] and [Service
  /// Perimeters] [google.identity.accesscontextmanager.v1.ServicePerimeter]
  /// for Google Cloud Projects. Each organization has one [AccessPolicy]
  /// [google.identity.accesscontextmanager.v1.AccessPolicy] containing the
  /// [Access Levels] [google.identity.accesscontextmanager.v1.AccessLevel]
  /// and [Service Perimeters]
  /// [google.identity.accesscontextmanager.v1.ServicePerimeter]. This
  /// [AccessPolicy] [google.identity.accesscontextmanager.v1.AccessPolicy] is
  /// applicable to all resources in the organization.
  /// AccessPolicies
  /// </summary>
  public static partial class AccessContextManager
  {
    static readonly string __ServiceName = "google.identity.accesscontextmanager.v1.AccessContextManager";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Google.Identity.AccessContextManager.V1.ListAccessPoliciesRequest> __Marshaller_google_identity_accesscontextmanager_v1_ListAccessPoliciesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Identity.AccessContextManager.V1.ListAccessPoliciesRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Identity.AccessContextManager.V1.ListAccessPoliciesResponse> __Marshaller_google_identity_accesscontextmanager_v1_ListAccessPoliciesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Identity.AccessContextManager.V1.ListAccessPoliciesResponse.Parser));
    static readonly grpc::Marshaller<global::Google.Identity.AccessContextManager.V1.GetAccessPolicyRequest> __Marshaller_google_identity_accesscontextmanager_v1_GetAccessPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Identity.AccessContextManager.V1.GetAccessPolicyRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Identity.AccessContextManager.V1.AccessPolicy> __Marshaller_google_identity_accesscontextmanager_v1_AccessPolicy = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Identity.AccessContextManager.V1.AccessPolicy.Parser));
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    static readonly grpc::Marshaller<global::Google.Identity.AccessContextManager.V1.UpdateAccessPolicyRequest> __Marshaller_google_identity_accesscontextmanager_v1_UpdateAccessPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Identity.AccessContextManager.V1.UpdateAccessPolicyRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Identity.AccessContextManager.V1.DeleteAccessPolicyRequest> __Marshaller_google_identity_accesscontextmanager_v1_DeleteAccessPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Identity.AccessContextManager.V1.DeleteAccessPolicyRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Identity.AccessContextManager.V1.ListAccessLevelsRequest> __Marshaller_google_identity_accesscontextmanager_v1_ListAccessLevelsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Identity.AccessContextManager.V1.ListAccessLevelsRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Identity.AccessContextManager.V1.ListAccessLevelsResponse> __Marshaller_google_identity_accesscontextmanager_v1_ListAccessLevelsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Identity.AccessContextManager.V1.ListAccessLevelsResponse.Parser));
    static readonly grpc::Marshaller<global::Google.Identity.AccessContextManager.V1.GetAccessLevelRequest> __Marshaller_google_identity_accesscontextmanager_v1_GetAccessLevelRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Identity.AccessContextManager.V1.GetAccessLevelRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Identity.AccessContextManager.V1.AccessLevel> __Marshaller_google_identity_accesscontextmanager_v1_AccessLevel = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Identity.AccessContextManager.V1.AccessLevel.Parser));
    static readonly grpc::Marshaller<global::Google.Identity.AccessContextManager.V1.CreateAccessLevelRequest> __Marshaller_google_identity_accesscontextmanager_v1_CreateAccessLevelRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Identity.AccessContextManager.V1.CreateAccessLevelRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Identity.AccessContextManager.V1.UpdateAccessLevelRequest> __Marshaller_google_identity_accesscontextmanager_v1_UpdateAccessLevelRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Identity.AccessContextManager.V1.UpdateAccessLevelRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Identity.AccessContextManager.V1.DeleteAccessLevelRequest> __Marshaller_google_identity_accesscontextmanager_v1_DeleteAccessLevelRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Identity.AccessContextManager.V1.DeleteAccessLevelRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Identity.AccessContextManager.V1.ReplaceAccessLevelsRequest> __Marshaller_google_identity_accesscontextmanager_v1_ReplaceAccessLevelsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Identity.AccessContextManager.V1.ReplaceAccessLevelsRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Identity.AccessContextManager.V1.ListServicePerimetersRequest> __Marshaller_google_identity_accesscontextmanager_v1_ListServicePerimetersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Identity.AccessContextManager.V1.ListServicePerimetersRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Identity.AccessContextManager.V1.ListServicePerimetersResponse> __Marshaller_google_identity_accesscontextmanager_v1_ListServicePerimetersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Identity.AccessContextManager.V1.ListServicePerimetersResponse.Parser));
    static readonly grpc::Marshaller<global::Google.Identity.AccessContextManager.V1.GetServicePerimeterRequest> __Marshaller_google_identity_accesscontextmanager_v1_GetServicePerimeterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Identity.AccessContextManager.V1.GetServicePerimeterRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Identity.AccessContextManager.V1.ServicePerimeter> __Marshaller_google_identity_accesscontextmanager_v1_ServicePerimeter = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Identity.AccessContextManager.V1.ServicePerimeter.Parser));
    static readonly grpc::Marshaller<global::Google.Identity.AccessContextManager.V1.CreateServicePerimeterRequest> __Marshaller_google_identity_accesscontextmanager_v1_CreateServicePerimeterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Identity.AccessContextManager.V1.CreateServicePerimeterRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Identity.AccessContextManager.V1.UpdateServicePerimeterRequest> __Marshaller_google_identity_accesscontextmanager_v1_UpdateServicePerimeterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Identity.AccessContextManager.V1.UpdateServicePerimeterRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Identity.AccessContextManager.V1.DeleteServicePerimeterRequest> __Marshaller_google_identity_accesscontextmanager_v1_DeleteServicePerimeterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Identity.AccessContextManager.V1.DeleteServicePerimeterRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Identity.AccessContextManager.V1.ReplaceServicePerimetersRequest> __Marshaller_google_identity_accesscontextmanager_v1_ReplaceServicePerimetersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Identity.AccessContextManager.V1.ReplaceServicePerimetersRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Identity.AccessContextManager.V1.CommitServicePerimetersRequest> __Marshaller_google_identity_accesscontextmanager_v1_CommitServicePerimetersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Identity.AccessContextManager.V1.CommitServicePerimetersRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Identity.AccessContextManager.V1.ListGcpUserAccessBindingsRequest> __Marshaller_google_identity_accesscontextmanager_v1_ListGcpUserAccessBindingsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Identity.AccessContextManager.V1.ListGcpUserAccessBindingsRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Identity.AccessContextManager.V1.ListGcpUserAccessBindingsResponse> __Marshaller_google_identity_accesscontextmanager_v1_ListGcpUserAccessBindingsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Identity.AccessContextManager.V1.ListGcpUserAccessBindingsResponse.Parser));
    static readonly grpc::Marshaller<global::Google.Identity.AccessContextManager.V1.GetGcpUserAccessBindingRequest> __Marshaller_google_identity_accesscontextmanager_v1_GetGcpUserAccessBindingRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Identity.AccessContextManager.V1.GetGcpUserAccessBindingRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Identity.AccessContextManager.V1.GcpUserAccessBinding> __Marshaller_google_identity_accesscontextmanager_v1_GcpUserAccessBinding = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Identity.AccessContextManager.V1.GcpUserAccessBinding.Parser));
    static readonly grpc::Marshaller<global::Google.Identity.AccessContextManager.V1.CreateGcpUserAccessBindingRequest> __Marshaller_google_identity_accesscontextmanager_v1_CreateGcpUserAccessBindingRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Identity.AccessContextManager.V1.CreateGcpUserAccessBindingRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Identity.AccessContextManager.V1.UpdateGcpUserAccessBindingRequest> __Marshaller_google_identity_accesscontextmanager_v1_UpdateGcpUserAccessBindingRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Identity.AccessContextManager.V1.UpdateGcpUserAccessBindingRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Identity.AccessContextManager.V1.DeleteGcpUserAccessBindingRequest> __Marshaller_google_identity_accesscontextmanager_v1_DeleteGcpUserAccessBindingRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Identity.AccessContextManager.V1.DeleteGcpUserAccessBindingRequest.Parser));

    static readonly grpc::Method<global::Google.Identity.AccessContextManager.V1.ListAccessPoliciesRequest, global::Google.Identity.AccessContextManager.V1.ListAccessPoliciesResponse> __Method_ListAccessPolicies = new grpc::Method<global::Google.Identity.AccessContextManager.V1.ListAccessPoliciesRequest, global::Google.Identity.AccessContextManager.V1.ListAccessPoliciesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAccessPolicies",
        __Marshaller_google_identity_accesscontextmanager_v1_ListAccessPoliciesRequest,
        __Marshaller_google_identity_accesscontextmanager_v1_ListAccessPoliciesResponse);

    static readonly grpc::Method<global::Google.Identity.AccessContextManager.V1.GetAccessPolicyRequest, global::Google.Identity.AccessContextManager.V1.AccessPolicy> __Method_GetAccessPolicy = new grpc::Method<global::Google.Identity.AccessContextManager.V1.GetAccessPolicyRequest, global::Google.Identity.AccessContextManager.V1.AccessPolicy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccessPolicy",
        __Marshaller_google_identity_accesscontextmanager_v1_GetAccessPolicyRequest,
        __Marshaller_google_identity_accesscontextmanager_v1_AccessPolicy);

    static readonly grpc::Method<global::Google.Identity.AccessContextManager.V1.AccessPolicy, global::Google.LongRunning.Operation> __Method_CreateAccessPolicy = new grpc::Method<global::Google.Identity.AccessContextManager.V1.AccessPolicy, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAccessPolicy",
        __Marshaller_google_identity_accesscontextmanager_v1_AccessPolicy,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Identity.AccessContextManager.V1.UpdateAccessPolicyRequest, global::Google.LongRunning.Operation> __Method_UpdateAccessPolicy = new grpc::Method<global::Google.Identity.AccessContextManager.V1.UpdateAccessPolicyRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAccessPolicy",
        __Marshaller_google_identity_accesscontextmanager_v1_UpdateAccessPolicyRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Identity.AccessContextManager.V1.DeleteAccessPolicyRequest, global::Google.LongRunning.Operation> __Method_DeleteAccessPolicy = new grpc::Method<global::Google.Identity.AccessContextManager.V1.DeleteAccessPolicyRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAccessPolicy",
        __Marshaller_google_identity_accesscontextmanager_v1_DeleteAccessPolicyRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Identity.AccessContextManager.V1.ListAccessLevelsRequest, global::Google.Identity.AccessContextManager.V1.ListAccessLevelsResponse> __Method_ListAccessLevels = new grpc::Method<global::Google.Identity.AccessContextManager.V1.ListAccessLevelsRequest, global::Google.Identity.AccessContextManager.V1.ListAccessLevelsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAccessLevels",
        __Marshaller_google_identity_accesscontextmanager_v1_ListAccessLevelsRequest,
        __Marshaller_google_identity_accesscontextmanager_v1_ListAccessLevelsResponse);

    static readonly grpc::Method<global::Google.Identity.AccessContextManager.V1.GetAccessLevelRequest, global::Google.Identity.AccessContextManager.V1.AccessLevel> __Method_GetAccessLevel = new grpc::Method<global::Google.Identity.AccessContextManager.V1.GetAccessLevelRequest, global::Google.Identity.AccessContextManager.V1.AccessLevel>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccessLevel",
        __Marshaller_google_identity_accesscontextmanager_v1_GetAccessLevelRequest,
        __Marshaller_google_identity_accesscontextmanager_v1_AccessLevel);

    static readonly grpc::Method<global::Google.Identity.AccessContextManager.V1.CreateAccessLevelRequest, global::Google.LongRunning.Operation> __Method_CreateAccessLevel = new grpc::Method<global::Google.Identity.AccessContextManager.V1.CreateAccessLevelRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAccessLevel",
        __Marshaller_google_identity_accesscontextmanager_v1_CreateAccessLevelRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Identity.AccessContextManager.V1.UpdateAccessLevelRequest, global::Google.LongRunning.Operation> __Method_UpdateAccessLevel = new grpc::Method<global::Google.Identity.AccessContextManager.V1.UpdateAccessLevelRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAccessLevel",
        __Marshaller_google_identity_accesscontextmanager_v1_UpdateAccessLevelRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Identity.AccessContextManager.V1.DeleteAccessLevelRequest, global::Google.LongRunning.Operation> __Method_DeleteAccessLevel = new grpc::Method<global::Google.Identity.AccessContextManager.V1.DeleteAccessLevelRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAccessLevel",
        __Marshaller_google_identity_accesscontextmanager_v1_DeleteAccessLevelRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Identity.AccessContextManager.V1.ReplaceAccessLevelsRequest, global::Google.LongRunning.Operation> __Method_ReplaceAccessLevels = new grpc::Method<global::Google.Identity.AccessContextManager.V1.ReplaceAccessLevelsRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReplaceAccessLevels",
        __Marshaller_google_identity_accesscontextmanager_v1_ReplaceAccessLevelsRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Identity.AccessContextManager.V1.ListServicePerimetersRequest, global::Google.Identity.AccessContextManager.V1.ListServicePerimetersResponse> __Method_ListServicePerimeters = new grpc::Method<global::Google.Identity.AccessContextManager.V1.ListServicePerimetersRequest, global::Google.Identity.AccessContextManager.V1.ListServicePerimetersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListServicePerimeters",
        __Marshaller_google_identity_accesscontextmanager_v1_ListServicePerimetersRequest,
        __Marshaller_google_identity_accesscontextmanager_v1_ListServicePerimetersResponse);

    static readonly grpc::Method<global::Google.Identity.AccessContextManager.V1.GetServicePerimeterRequest, global::Google.Identity.AccessContextManager.V1.ServicePerimeter> __Method_GetServicePerimeter = new grpc::Method<global::Google.Identity.AccessContextManager.V1.GetServicePerimeterRequest, global::Google.Identity.AccessContextManager.V1.ServicePerimeter>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetServicePerimeter",
        __Marshaller_google_identity_accesscontextmanager_v1_GetServicePerimeterRequest,
        __Marshaller_google_identity_accesscontextmanager_v1_ServicePerimeter);

    static readonly grpc::Method<global::Google.Identity.AccessContextManager.V1.CreateServicePerimeterRequest, global::Google.LongRunning.Operation> __Method_CreateServicePerimeter = new grpc::Method<global::Google.Identity.AccessContextManager.V1.CreateServicePerimeterRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateServicePerimeter",
        __Marshaller_google_identity_accesscontextmanager_v1_CreateServicePerimeterRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Identity.AccessContextManager.V1.UpdateServicePerimeterRequest, global::Google.LongRunning.Operation> __Method_UpdateServicePerimeter = new grpc::Method<global::Google.Identity.AccessContextManager.V1.UpdateServicePerimeterRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateServicePerimeter",
        __Marshaller_google_identity_accesscontextmanager_v1_UpdateServicePerimeterRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Identity.AccessContextManager.V1.DeleteServicePerimeterRequest, global::Google.LongRunning.Operation> __Method_DeleteServicePerimeter = new grpc::Method<global::Google.Identity.AccessContextManager.V1.DeleteServicePerimeterRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteServicePerimeter",
        __Marshaller_google_identity_accesscontextmanager_v1_DeleteServicePerimeterRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Identity.AccessContextManager.V1.ReplaceServicePerimetersRequest, global::Google.LongRunning.Operation> __Method_ReplaceServicePerimeters = new grpc::Method<global::Google.Identity.AccessContextManager.V1.ReplaceServicePerimetersRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReplaceServicePerimeters",
        __Marshaller_google_identity_accesscontextmanager_v1_ReplaceServicePerimetersRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Identity.AccessContextManager.V1.CommitServicePerimetersRequest, global::Google.LongRunning.Operation> __Method_CommitServicePerimeters = new grpc::Method<global::Google.Identity.AccessContextManager.V1.CommitServicePerimetersRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CommitServicePerimeters",
        __Marshaller_google_identity_accesscontextmanager_v1_CommitServicePerimetersRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Identity.AccessContextManager.V1.ListGcpUserAccessBindingsRequest, global::Google.Identity.AccessContextManager.V1.ListGcpUserAccessBindingsResponse> __Method_ListGcpUserAccessBindings = new grpc::Method<global::Google.Identity.AccessContextManager.V1.ListGcpUserAccessBindingsRequest, global::Google.Identity.AccessContextManager.V1.ListGcpUserAccessBindingsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListGcpUserAccessBindings",
        __Marshaller_google_identity_accesscontextmanager_v1_ListGcpUserAccessBindingsRequest,
        __Marshaller_google_identity_accesscontextmanager_v1_ListGcpUserAccessBindingsResponse);

    static readonly grpc::Method<global::Google.Identity.AccessContextManager.V1.GetGcpUserAccessBindingRequest, global::Google.Identity.AccessContextManager.V1.GcpUserAccessBinding> __Method_GetGcpUserAccessBinding = new grpc::Method<global::Google.Identity.AccessContextManager.V1.GetGcpUserAccessBindingRequest, global::Google.Identity.AccessContextManager.V1.GcpUserAccessBinding>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGcpUserAccessBinding",
        __Marshaller_google_identity_accesscontextmanager_v1_GetGcpUserAccessBindingRequest,
        __Marshaller_google_identity_accesscontextmanager_v1_GcpUserAccessBinding);

    static readonly grpc::Method<global::Google.Identity.AccessContextManager.V1.CreateGcpUserAccessBindingRequest, global::Google.LongRunning.Operation> __Method_CreateGcpUserAccessBinding = new grpc::Method<global::Google.Identity.AccessContextManager.V1.CreateGcpUserAccessBindingRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateGcpUserAccessBinding",
        __Marshaller_google_identity_accesscontextmanager_v1_CreateGcpUserAccessBindingRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Identity.AccessContextManager.V1.UpdateGcpUserAccessBindingRequest, global::Google.LongRunning.Operation> __Method_UpdateGcpUserAccessBinding = new grpc::Method<global::Google.Identity.AccessContextManager.V1.UpdateGcpUserAccessBindingRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateGcpUserAccessBinding",
        __Marshaller_google_identity_accesscontextmanager_v1_UpdateGcpUserAccessBindingRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Identity.AccessContextManager.V1.DeleteGcpUserAccessBindingRequest, global::Google.LongRunning.Operation> __Method_DeleteGcpUserAccessBinding = new grpc::Method<global::Google.Identity.AccessContextManager.V1.DeleteGcpUserAccessBindingRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteGcpUserAccessBinding",
        __Marshaller_google_identity_accesscontextmanager_v1_DeleteGcpUserAccessBindingRequest,
        __Marshaller_google_longrunning_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Identity.AccessContextManager.V1.AccessContextManagerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of AccessContextManager</summary>
    [grpc::BindServiceMethod(typeof(AccessContextManager), "BindService")]
    public abstract partial class AccessContextManagerBase
    {
      /// <summary>
      /// List all [AccessPolicies]
      /// [google.identity.accesscontextmanager.v1.AccessPolicy] under a
      /// container.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Identity.AccessContextManager.V1.ListAccessPoliciesResponse> ListAccessPolicies(global::Google.Identity.AccessContextManager.V1.ListAccessPoliciesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get an [AccessPolicy]
      /// [google.identity.accesscontextmanager.v1.AccessPolicy] by name.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Identity.AccessContextManager.V1.AccessPolicy> GetAccessPolicy(global::Google.Identity.AccessContextManager.V1.GetAccessPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create an `AccessPolicy`. Fails if this organization already has a
      /// `AccessPolicy`. The longrunning Operation will have a successful status
      /// once the `AccessPolicy` has propagated to long-lasting storage.
      /// Syntactic and basic semantic errors will be returned in `metadata` as a
      /// BadRequest proto.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateAccessPolicy(global::Google.Identity.AccessContextManager.V1.AccessPolicy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update an [AccessPolicy]
      /// [google.identity.accesscontextmanager.v1.AccessPolicy]. The
      /// longrunning Operation from this RPC will have a successful status once the
      /// changes to the [AccessPolicy]
      /// [google.identity.accesscontextmanager.v1.AccessPolicy] have propagated
      /// to long-lasting storage. Syntactic and basic semantic errors will be
      /// returned in `metadata` as a BadRequest proto.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateAccessPolicy(global::Google.Identity.AccessContextManager.V1.UpdateAccessPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete an [AccessPolicy]
      /// [google.identity.accesscontextmanager.v1.AccessPolicy] by resource
      /// name. The longrunning Operation will have a successful status once the
      /// [AccessPolicy] [google.identity.accesscontextmanager.v1.AccessPolicy]
      /// has been removed from long-lasting storage.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteAccessPolicy(global::Google.Identity.AccessContextManager.V1.DeleteAccessPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] for an access
      /// policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Identity.AccessContextManager.V1.ListAccessLevelsResponse> ListAccessLevels(global::Google.Identity.AccessContextManager.V1.ListAccessLevelsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get an [Access Level]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] by resource
      /// name.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Identity.AccessContextManager.V1.AccessLevel> GetAccessLevel(global::Google.Identity.AccessContextManager.V1.GetAccessLevelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create an [Access Level]
      /// [google.identity.accesscontextmanager.v1.AccessLevel]. The longrunning
      /// operation from this RPC will have a successful status once the [Access
      /// Level] [google.identity.accesscontextmanager.v1.AccessLevel] has
      /// propagated to long-lasting storage. [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] containing
      /// errors will result in an error response for the first error encountered.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateAccessLevel(global::Google.Identity.AccessContextManager.V1.CreateAccessLevelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update an [Access Level]
      /// [google.identity.accesscontextmanager.v1.AccessLevel]. The longrunning
      /// operation from this RPC will have a successful status once the changes to
      /// the [Access Level]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] have propagated
      /// to long-lasting storage. [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] containing
      /// errors will result in an error response for the first error encountered.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateAccessLevel(global::Google.Identity.AccessContextManager.V1.UpdateAccessLevelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete an [Access Level]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] by resource
      /// name. The longrunning operation from this RPC will have a successful status
      /// once the [Access Level]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] has been removed
      /// from long-lasting storage.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteAccessLevel(global::Google.Identity.AccessContextManager.V1.DeleteAccessLevelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Replace all existing [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] in an [Access
      /// Policy] [google.identity.accesscontextmanager.v1.AccessPolicy] with
      /// the [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] provided. This
      /// is done atomically. The longrunning operation from this RPC will have a
      /// successful status once all replacements have propagated to long-lasting
      /// storage. Replacements containing errors will result in an error response
      /// for the first error encountered.  Replacement will be cancelled on error,
      /// existing [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] will not be
      /// affected. Operation.response field will contain
      /// ReplaceAccessLevelsResponse. Removing [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] contained in existing
      /// [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] will result in
      /// error.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> ReplaceAccessLevels(global::Google.Identity.AccessContextManager.V1.ReplaceAccessLevelsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] for an
      /// access policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Identity.AccessContextManager.V1.ListServicePerimetersResponse> ListServicePerimeters(global::Google.Identity.AccessContextManager.V1.ListServicePerimetersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] by resource
      /// name.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Identity.AccessContextManager.V1.ServicePerimeter> GetServicePerimeter(global::Google.Identity.AccessContextManager.V1.GetServicePerimeterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter]. The
      /// longrunning operation from this RPC will have a successful status once the
      /// [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] has
      /// propagated to long-lasting storage. [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] containing
      /// errors will result in an error response for the first error encountered.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateServicePerimeter(global::Google.Identity.AccessContextManager.V1.CreateServicePerimeterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update a [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter]. The
      /// longrunning operation from this RPC will have a successful status once the
      /// changes to the [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] have
      /// propagated to long-lasting storage. [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] containing
      /// errors will result in an error response for the first error encountered.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateServicePerimeter(global::Google.Identity.AccessContextManager.V1.UpdateServicePerimeterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] by resource
      /// name. The longrunning operation from this RPC will have a successful status
      /// once the [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] has been
      /// removed from long-lasting storage.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteServicePerimeter(global::Google.Identity.AccessContextManager.V1.DeleteServicePerimeterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Replace all existing [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] in an
      /// [Access Policy] [google.identity.accesscontextmanager.v1.AccessPolicy]
      /// with the [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] provided.
      /// This is done atomically. The longrunning operation from this
      /// RPC will have a successful status once all replacements have propagated to
      /// long-lasting storage. Replacements containing errors will result in an
      /// error response for the first error encountered. Replacement will be
      /// cancelled on error, existing [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] will not be
      /// affected. Operation.response field will contain
      /// ReplaceServicePerimetersResponse.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> ReplaceServicePerimeters(global::Google.Identity.AccessContextManager.V1.ReplaceServicePerimetersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Commit the dry-run spec for all the [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] in an
      /// [Access Policy][google.identity.accesscontextmanager.v1.AccessPolicy].
      /// A commit operation on a Service Perimeter involves copying its `spec` field
      /// to that Service Perimeter's `status` field. Only [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] with
      /// `use_explicit_dry_run_spec` field set to true are affected by a commit
      /// operation. The longrunning operation from this RPC will have a successful
      /// status once the dry-run specs for all the [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] have been
      /// committed. If a commit fails, it will cause the longrunning operation to
      /// return an error response and the entire commit operation will be cancelled.
      /// When successful, Operation.response field will contain
      /// CommitServicePerimetersResponse. The `dry_run` and the `spec` fields will
      /// be cleared after a successful commit operation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CommitServicePerimeters(global::Google.Identity.AccessContextManager.V1.CommitServicePerimetersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all [GcpUserAccessBindings]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding] for a
      /// Google Cloud organization.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Identity.AccessContextManager.V1.ListGcpUserAccessBindingsResponse> ListGcpUserAccessBindings(global::Google.Identity.AccessContextManager.V1.ListGcpUserAccessBindingsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the [GcpUserAccessBinding]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding] with
      /// the given name.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Identity.AccessContextManager.V1.GcpUserAccessBinding> GetGcpUserAccessBinding(global::Google.Identity.AccessContextManager.V1.GetGcpUserAccessBindingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a [GcpUserAccessBinding]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding]. If the
      /// client specifies a [name]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding.name],
      /// the server will ignore it. Fails if a resource already exists with the same
      /// [group_key]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding.group_key].
      /// Completion of this long-running operation does not necessarily signify that
      /// the new binding is deployed onto all affected users, which may take more
      /// time.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateGcpUserAccessBinding(global::Google.Identity.AccessContextManager.V1.CreateGcpUserAccessBindingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a [GcpUserAccessBinding]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding].
      /// Completion of this long-running operation does not necessarily signify that
      /// the changed binding is deployed onto all affected users, which may take
      /// more time.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateGcpUserAccessBinding(global::Google.Identity.AccessContextManager.V1.UpdateGcpUserAccessBindingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a [GcpUserAccessBinding]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding].
      /// Completion of this long-running operation does not necessarily signify that
      /// the binding deletion is deployed onto all affected users, which may take
      /// more time.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteGcpUserAccessBinding(global::Google.Identity.AccessContextManager.V1.DeleteGcpUserAccessBindingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for AccessContextManager</summary>
    public partial class AccessContextManagerClient : grpc::ClientBase<AccessContextManagerClient>
    {
      /// <summary>Creates a new client for AccessContextManager</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AccessContextManagerClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AccessContextManager that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AccessContextManagerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AccessContextManagerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AccessContextManagerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// List all [AccessPolicies]
      /// [google.identity.accesscontextmanager.v1.AccessPolicy] under a
      /// container.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Identity.AccessContextManager.V1.ListAccessPoliciesResponse ListAccessPolicies(global::Google.Identity.AccessContextManager.V1.ListAccessPoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAccessPolicies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all [AccessPolicies]
      /// [google.identity.accesscontextmanager.v1.AccessPolicy] under a
      /// container.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Identity.AccessContextManager.V1.ListAccessPoliciesResponse ListAccessPolicies(global::Google.Identity.AccessContextManager.V1.ListAccessPoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAccessPolicies, null, options, request);
      }
      /// <summary>
      /// List all [AccessPolicies]
      /// [google.identity.accesscontextmanager.v1.AccessPolicy] under a
      /// container.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Identity.AccessContextManager.V1.ListAccessPoliciesResponse> ListAccessPoliciesAsync(global::Google.Identity.AccessContextManager.V1.ListAccessPoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAccessPoliciesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all [AccessPolicies]
      /// [google.identity.accesscontextmanager.v1.AccessPolicy] under a
      /// container.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Identity.AccessContextManager.V1.ListAccessPoliciesResponse> ListAccessPoliciesAsync(global::Google.Identity.AccessContextManager.V1.ListAccessPoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAccessPolicies, null, options, request);
      }
      /// <summary>
      /// Get an [AccessPolicy]
      /// [google.identity.accesscontextmanager.v1.AccessPolicy] by name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Identity.AccessContextManager.V1.AccessPolicy GetAccessPolicy(global::Google.Identity.AccessContextManager.V1.GetAccessPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccessPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an [AccessPolicy]
      /// [google.identity.accesscontextmanager.v1.AccessPolicy] by name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Identity.AccessContextManager.V1.AccessPolicy GetAccessPolicy(global::Google.Identity.AccessContextManager.V1.GetAccessPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccessPolicy, null, options, request);
      }
      /// <summary>
      /// Get an [AccessPolicy]
      /// [google.identity.accesscontextmanager.v1.AccessPolicy] by name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Identity.AccessContextManager.V1.AccessPolicy> GetAccessPolicyAsync(global::Google.Identity.AccessContextManager.V1.GetAccessPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccessPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an [AccessPolicy]
      /// [google.identity.accesscontextmanager.v1.AccessPolicy] by name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Identity.AccessContextManager.V1.AccessPolicy> GetAccessPolicyAsync(global::Google.Identity.AccessContextManager.V1.GetAccessPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccessPolicy, null, options, request);
      }
      /// <summary>
      /// Create an `AccessPolicy`. Fails if this organization already has a
      /// `AccessPolicy`. The longrunning Operation will have a successful status
      /// once the `AccessPolicy` has propagated to long-lasting storage.
      /// Syntactic and basic semantic errors will be returned in `metadata` as a
      /// BadRequest proto.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation CreateAccessPolicy(global::Google.Identity.AccessContextManager.V1.AccessPolicy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAccessPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create an `AccessPolicy`. Fails if this organization already has a
      /// `AccessPolicy`. The longrunning Operation will have a successful status
      /// once the `AccessPolicy` has propagated to long-lasting storage.
      /// Syntactic and basic semantic errors will be returned in `metadata` as a
      /// BadRequest proto.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation CreateAccessPolicy(global::Google.Identity.AccessContextManager.V1.AccessPolicy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAccessPolicy, null, options, request);
      }
      /// <summary>
      /// Create an `AccessPolicy`. Fails if this organization already has a
      /// `AccessPolicy`. The longrunning Operation will have a successful status
      /// once the `AccessPolicy` has propagated to long-lasting storage.
      /// Syntactic and basic semantic errors will be returned in `metadata` as a
      /// BadRequest proto.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateAccessPolicyAsync(global::Google.Identity.AccessContextManager.V1.AccessPolicy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAccessPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create an `AccessPolicy`. Fails if this organization already has a
      /// `AccessPolicy`. The longrunning Operation will have a successful status
      /// once the `AccessPolicy` has propagated to long-lasting storage.
      /// Syntactic and basic semantic errors will be returned in `metadata` as a
      /// BadRequest proto.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateAccessPolicyAsync(global::Google.Identity.AccessContextManager.V1.AccessPolicy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAccessPolicy, null, options, request);
      }
      /// <summary>
      /// Update an [AccessPolicy]
      /// [google.identity.accesscontextmanager.v1.AccessPolicy]. The
      /// longrunning Operation from this RPC will have a successful status once the
      /// changes to the [AccessPolicy]
      /// [google.identity.accesscontextmanager.v1.AccessPolicy] have propagated
      /// to long-lasting storage. Syntactic and basic semantic errors will be
      /// returned in `metadata` as a BadRequest proto.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation UpdateAccessPolicy(global::Google.Identity.AccessContextManager.V1.UpdateAccessPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAccessPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an [AccessPolicy]
      /// [google.identity.accesscontextmanager.v1.AccessPolicy]. The
      /// longrunning Operation from this RPC will have a successful status once the
      /// changes to the [AccessPolicy]
      /// [google.identity.accesscontextmanager.v1.AccessPolicy] have propagated
      /// to long-lasting storage. Syntactic and basic semantic errors will be
      /// returned in `metadata` as a BadRequest proto.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation UpdateAccessPolicy(global::Google.Identity.AccessContextManager.V1.UpdateAccessPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAccessPolicy, null, options, request);
      }
      /// <summary>
      /// Update an [AccessPolicy]
      /// [google.identity.accesscontextmanager.v1.AccessPolicy]. The
      /// longrunning Operation from this RPC will have a successful status once the
      /// changes to the [AccessPolicy]
      /// [google.identity.accesscontextmanager.v1.AccessPolicy] have propagated
      /// to long-lasting storage. Syntactic and basic semantic errors will be
      /// returned in `metadata` as a BadRequest proto.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateAccessPolicyAsync(global::Google.Identity.AccessContextManager.V1.UpdateAccessPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAccessPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an [AccessPolicy]
      /// [google.identity.accesscontextmanager.v1.AccessPolicy]. The
      /// longrunning Operation from this RPC will have a successful status once the
      /// changes to the [AccessPolicy]
      /// [google.identity.accesscontextmanager.v1.AccessPolicy] have propagated
      /// to long-lasting storage. Syntactic and basic semantic errors will be
      /// returned in `metadata` as a BadRequest proto.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateAccessPolicyAsync(global::Google.Identity.AccessContextManager.V1.UpdateAccessPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAccessPolicy, null, options, request);
      }
      /// <summary>
      /// Delete an [AccessPolicy]
      /// [google.identity.accesscontextmanager.v1.AccessPolicy] by resource
      /// name. The longrunning Operation will have a successful status once the
      /// [AccessPolicy] [google.identity.accesscontextmanager.v1.AccessPolicy]
      /// has been removed from long-lasting storage.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation DeleteAccessPolicy(global::Google.Identity.AccessContextManager.V1.DeleteAccessPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAccessPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an [AccessPolicy]
      /// [google.identity.accesscontextmanager.v1.AccessPolicy] by resource
      /// name. The longrunning Operation will have a successful status once the
      /// [AccessPolicy] [google.identity.accesscontextmanager.v1.AccessPolicy]
      /// has been removed from long-lasting storage.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation DeleteAccessPolicy(global::Google.Identity.AccessContextManager.V1.DeleteAccessPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAccessPolicy, null, options, request);
      }
      /// <summary>
      /// Delete an [AccessPolicy]
      /// [google.identity.accesscontextmanager.v1.AccessPolicy] by resource
      /// name. The longrunning Operation will have a successful status once the
      /// [AccessPolicy] [google.identity.accesscontextmanager.v1.AccessPolicy]
      /// has been removed from long-lasting storage.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteAccessPolicyAsync(global::Google.Identity.AccessContextManager.V1.DeleteAccessPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAccessPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an [AccessPolicy]
      /// [google.identity.accesscontextmanager.v1.AccessPolicy] by resource
      /// name. The longrunning Operation will have a successful status once the
      /// [AccessPolicy] [google.identity.accesscontextmanager.v1.AccessPolicy]
      /// has been removed from long-lasting storage.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteAccessPolicyAsync(global::Google.Identity.AccessContextManager.V1.DeleteAccessPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAccessPolicy, null, options, request);
      }
      /// <summary>
      /// List all [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] for an access
      /// policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Identity.AccessContextManager.V1.ListAccessLevelsResponse ListAccessLevels(global::Google.Identity.AccessContextManager.V1.ListAccessLevelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAccessLevels(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] for an access
      /// policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Identity.AccessContextManager.V1.ListAccessLevelsResponse ListAccessLevels(global::Google.Identity.AccessContextManager.V1.ListAccessLevelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAccessLevels, null, options, request);
      }
      /// <summary>
      /// List all [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] for an access
      /// policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Identity.AccessContextManager.V1.ListAccessLevelsResponse> ListAccessLevelsAsync(global::Google.Identity.AccessContextManager.V1.ListAccessLevelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAccessLevelsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] for an access
      /// policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Identity.AccessContextManager.V1.ListAccessLevelsResponse> ListAccessLevelsAsync(global::Google.Identity.AccessContextManager.V1.ListAccessLevelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAccessLevels, null, options, request);
      }
      /// <summary>
      /// Get an [Access Level]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] by resource
      /// name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Identity.AccessContextManager.V1.AccessLevel GetAccessLevel(global::Google.Identity.AccessContextManager.V1.GetAccessLevelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccessLevel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an [Access Level]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] by resource
      /// name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Identity.AccessContextManager.V1.AccessLevel GetAccessLevel(global::Google.Identity.AccessContextManager.V1.GetAccessLevelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccessLevel, null, options, request);
      }
      /// <summary>
      /// Get an [Access Level]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] by resource
      /// name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Identity.AccessContextManager.V1.AccessLevel> GetAccessLevelAsync(global::Google.Identity.AccessContextManager.V1.GetAccessLevelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccessLevelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an [Access Level]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] by resource
      /// name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Identity.AccessContextManager.V1.AccessLevel> GetAccessLevelAsync(global::Google.Identity.AccessContextManager.V1.GetAccessLevelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccessLevel, null, options, request);
      }
      /// <summary>
      /// Create an [Access Level]
      /// [google.identity.accesscontextmanager.v1.AccessLevel]. The longrunning
      /// operation from this RPC will have a successful status once the [Access
      /// Level] [google.identity.accesscontextmanager.v1.AccessLevel] has
      /// propagated to long-lasting storage. [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] containing
      /// errors will result in an error response for the first error encountered.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation CreateAccessLevel(global::Google.Identity.AccessContextManager.V1.CreateAccessLevelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAccessLevel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create an [Access Level]
      /// [google.identity.accesscontextmanager.v1.AccessLevel]. The longrunning
      /// operation from this RPC will have a successful status once the [Access
      /// Level] [google.identity.accesscontextmanager.v1.AccessLevel] has
      /// propagated to long-lasting storage. [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] containing
      /// errors will result in an error response for the first error encountered.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation CreateAccessLevel(global::Google.Identity.AccessContextManager.V1.CreateAccessLevelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAccessLevel, null, options, request);
      }
      /// <summary>
      /// Create an [Access Level]
      /// [google.identity.accesscontextmanager.v1.AccessLevel]. The longrunning
      /// operation from this RPC will have a successful status once the [Access
      /// Level] [google.identity.accesscontextmanager.v1.AccessLevel] has
      /// propagated to long-lasting storage. [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] containing
      /// errors will result in an error response for the first error encountered.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateAccessLevelAsync(global::Google.Identity.AccessContextManager.V1.CreateAccessLevelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAccessLevelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create an [Access Level]
      /// [google.identity.accesscontextmanager.v1.AccessLevel]. The longrunning
      /// operation from this RPC will have a successful status once the [Access
      /// Level] [google.identity.accesscontextmanager.v1.AccessLevel] has
      /// propagated to long-lasting storage. [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] containing
      /// errors will result in an error response for the first error encountered.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateAccessLevelAsync(global::Google.Identity.AccessContextManager.V1.CreateAccessLevelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAccessLevel, null, options, request);
      }
      /// <summary>
      /// Update an [Access Level]
      /// [google.identity.accesscontextmanager.v1.AccessLevel]. The longrunning
      /// operation from this RPC will have a successful status once the changes to
      /// the [Access Level]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] have propagated
      /// to long-lasting storage. [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] containing
      /// errors will result in an error response for the first error encountered.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation UpdateAccessLevel(global::Google.Identity.AccessContextManager.V1.UpdateAccessLevelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAccessLevel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an [Access Level]
      /// [google.identity.accesscontextmanager.v1.AccessLevel]. The longrunning
      /// operation from this RPC will have a successful status once the changes to
      /// the [Access Level]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] have propagated
      /// to long-lasting storage. [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] containing
      /// errors will result in an error response for the first error encountered.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation UpdateAccessLevel(global::Google.Identity.AccessContextManager.V1.UpdateAccessLevelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAccessLevel, null, options, request);
      }
      /// <summary>
      /// Update an [Access Level]
      /// [google.identity.accesscontextmanager.v1.AccessLevel]. The longrunning
      /// operation from this RPC will have a successful status once the changes to
      /// the [Access Level]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] have propagated
      /// to long-lasting storage. [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] containing
      /// errors will result in an error response for the first error encountered.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateAccessLevelAsync(global::Google.Identity.AccessContextManager.V1.UpdateAccessLevelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAccessLevelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an [Access Level]
      /// [google.identity.accesscontextmanager.v1.AccessLevel]. The longrunning
      /// operation from this RPC will have a successful status once the changes to
      /// the [Access Level]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] have propagated
      /// to long-lasting storage. [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] containing
      /// errors will result in an error response for the first error encountered.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateAccessLevelAsync(global::Google.Identity.AccessContextManager.V1.UpdateAccessLevelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAccessLevel, null, options, request);
      }
      /// <summary>
      /// Delete an [Access Level]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] by resource
      /// name. The longrunning operation from this RPC will have a successful status
      /// once the [Access Level]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] has been removed
      /// from long-lasting storage.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation DeleteAccessLevel(global::Google.Identity.AccessContextManager.V1.DeleteAccessLevelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAccessLevel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an [Access Level]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] by resource
      /// name. The longrunning operation from this RPC will have a successful status
      /// once the [Access Level]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] has been removed
      /// from long-lasting storage.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation DeleteAccessLevel(global::Google.Identity.AccessContextManager.V1.DeleteAccessLevelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAccessLevel, null, options, request);
      }
      /// <summary>
      /// Delete an [Access Level]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] by resource
      /// name. The longrunning operation from this RPC will have a successful status
      /// once the [Access Level]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] has been removed
      /// from long-lasting storage.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteAccessLevelAsync(global::Google.Identity.AccessContextManager.V1.DeleteAccessLevelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAccessLevelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an [Access Level]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] by resource
      /// name. The longrunning operation from this RPC will have a successful status
      /// once the [Access Level]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] has been removed
      /// from long-lasting storage.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteAccessLevelAsync(global::Google.Identity.AccessContextManager.V1.DeleteAccessLevelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAccessLevel, null, options, request);
      }
      /// <summary>
      /// Replace all existing [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] in an [Access
      /// Policy] [google.identity.accesscontextmanager.v1.AccessPolicy] with
      /// the [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] provided. This
      /// is done atomically. The longrunning operation from this RPC will have a
      /// successful status once all replacements have propagated to long-lasting
      /// storage. Replacements containing errors will result in an error response
      /// for the first error encountered.  Replacement will be cancelled on error,
      /// existing [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] will not be
      /// affected. Operation.response field will contain
      /// ReplaceAccessLevelsResponse. Removing [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] contained in existing
      /// [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] will result in
      /// error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation ReplaceAccessLevels(global::Google.Identity.AccessContextManager.V1.ReplaceAccessLevelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReplaceAccessLevels(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Replace all existing [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] in an [Access
      /// Policy] [google.identity.accesscontextmanager.v1.AccessPolicy] with
      /// the [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] provided. This
      /// is done atomically. The longrunning operation from this RPC will have a
      /// successful status once all replacements have propagated to long-lasting
      /// storage. Replacements containing errors will result in an error response
      /// for the first error encountered.  Replacement will be cancelled on error,
      /// existing [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] will not be
      /// affected. Operation.response field will contain
      /// ReplaceAccessLevelsResponse. Removing [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] contained in existing
      /// [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] will result in
      /// error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation ReplaceAccessLevels(global::Google.Identity.AccessContextManager.V1.ReplaceAccessLevelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReplaceAccessLevels, null, options, request);
      }
      /// <summary>
      /// Replace all existing [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] in an [Access
      /// Policy] [google.identity.accesscontextmanager.v1.AccessPolicy] with
      /// the [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] provided. This
      /// is done atomically. The longrunning operation from this RPC will have a
      /// successful status once all replacements have propagated to long-lasting
      /// storage. Replacements containing errors will result in an error response
      /// for the first error encountered.  Replacement will be cancelled on error,
      /// existing [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] will not be
      /// affected. Operation.response field will contain
      /// ReplaceAccessLevelsResponse. Removing [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] contained in existing
      /// [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] will result in
      /// error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ReplaceAccessLevelsAsync(global::Google.Identity.AccessContextManager.V1.ReplaceAccessLevelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReplaceAccessLevelsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Replace all existing [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] in an [Access
      /// Policy] [google.identity.accesscontextmanager.v1.AccessPolicy] with
      /// the [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] provided. This
      /// is done atomically. The longrunning operation from this RPC will have a
      /// successful status once all replacements have propagated to long-lasting
      /// storage. Replacements containing errors will result in an error response
      /// for the first error encountered.  Replacement will be cancelled on error,
      /// existing [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] will not be
      /// affected. Operation.response field will contain
      /// ReplaceAccessLevelsResponse. Removing [Access Levels]
      /// [google.identity.accesscontextmanager.v1.AccessLevel] contained in existing
      /// [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] will result in
      /// error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ReplaceAccessLevelsAsync(global::Google.Identity.AccessContextManager.V1.ReplaceAccessLevelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReplaceAccessLevels, null, options, request);
      }
      /// <summary>
      /// List all [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] for an
      /// access policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Identity.AccessContextManager.V1.ListServicePerimetersResponse ListServicePerimeters(global::Google.Identity.AccessContextManager.V1.ListServicePerimetersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListServicePerimeters(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] for an
      /// access policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Identity.AccessContextManager.V1.ListServicePerimetersResponse ListServicePerimeters(global::Google.Identity.AccessContextManager.V1.ListServicePerimetersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListServicePerimeters, null, options, request);
      }
      /// <summary>
      /// List all [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] for an
      /// access policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Identity.AccessContextManager.V1.ListServicePerimetersResponse> ListServicePerimetersAsync(global::Google.Identity.AccessContextManager.V1.ListServicePerimetersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListServicePerimetersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] for an
      /// access policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Identity.AccessContextManager.V1.ListServicePerimetersResponse> ListServicePerimetersAsync(global::Google.Identity.AccessContextManager.V1.ListServicePerimetersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListServicePerimeters, null, options, request);
      }
      /// <summary>
      /// Get a [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] by resource
      /// name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Identity.AccessContextManager.V1.ServicePerimeter GetServicePerimeter(global::Google.Identity.AccessContextManager.V1.GetServicePerimeterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServicePerimeter(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] by resource
      /// name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Identity.AccessContextManager.V1.ServicePerimeter GetServicePerimeter(global::Google.Identity.AccessContextManager.V1.GetServicePerimeterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServicePerimeter, null, options, request);
      }
      /// <summary>
      /// Get a [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] by resource
      /// name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Identity.AccessContextManager.V1.ServicePerimeter> GetServicePerimeterAsync(global::Google.Identity.AccessContextManager.V1.GetServicePerimeterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServicePerimeterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] by resource
      /// name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Identity.AccessContextManager.V1.ServicePerimeter> GetServicePerimeterAsync(global::Google.Identity.AccessContextManager.V1.GetServicePerimeterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServicePerimeter, null, options, request);
      }
      /// <summary>
      /// Create a [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter]. The
      /// longrunning operation from this RPC will have a successful status once the
      /// [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] has
      /// propagated to long-lasting storage. [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] containing
      /// errors will result in an error response for the first error encountered.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation CreateServicePerimeter(global::Google.Identity.AccessContextManager.V1.CreateServicePerimeterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateServicePerimeter(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter]. The
      /// longrunning operation from this RPC will have a successful status once the
      /// [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] has
      /// propagated to long-lasting storage. [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] containing
      /// errors will result in an error response for the first error encountered.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation CreateServicePerimeter(global::Google.Identity.AccessContextManager.V1.CreateServicePerimeterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateServicePerimeter, null, options, request);
      }
      /// <summary>
      /// Create a [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter]. The
      /// longrunning operation from this RPC will have a successful status once the
      /// [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] has
      /// propagated to long-lasting storage. [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] containing
      /// errors will result in an error response for the first error encountered.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateServicePerimeterAsync(global::Google.Identity.AccessContextManager.V1.CreateServicePerimeterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateServicePerimeterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter]. The
      /// longrunning operation from this RPC will have a successful status once the
      /// [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] has
      /// propagated to long-lasting storage. [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] containing
      /// errors will result in an error response for the first error encountered.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateServicePerimeterAsync(global::Google.Identity.AccessContextManager.V1.CreateServicePerimeterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateServicePerimeter, null, options, request);
      }
      /// <summary>
      /// Update a [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter]. The
      /// longrunning operation from this RPC will have a successful status once the
      /// changes to the [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] have
      /// propagated to long-lasting storage. [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] containing
      /// errors will result in an error response for the first error encountered.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation UpdateServicePerimeter(global::Google.Identity.AccessContextManager.V1.UpdateServicePerimeterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateServicePerimeter(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter]. The
      /// longrunning operation from this RPC will have a successful status once the
      /// changes to the [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] have
      /// propagated to long-lasting storage. [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] containing
      /// errors will result in an error response for the first error encountered.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation UpdateServicePerimeter(global::Google.Identity.AccessContextManager.V1.UpdateServicePerimeterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateServicePerimeter, null, options, request);
      }
      /// <summary>
      /// Update a [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter]. The
      /// longrunning operation from this RPC will have a successful status once the
      /// changes to the [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] have
      /// propagated to long-lasting storage. [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] containing
      /// errors will result in an error response for the first error encountered.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateServicePerimeterAsync(global::Google.Identity.AccessContextManager.V1.UpdateServicePerimeterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateServicePerimeterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter]. The
      /// longrunning operation from this RPC will have a successful status once the
      /// changes to the [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] have
      /// propagated to long-lasting storage. [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] containing
      /// errors will result in an error response for the first error encountered.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateServicePerimeterAsync(global::Google.Identity.AccessContextManager.V1.UpdateServicePerimeterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateServicePerimeter, null, options, request);
      }
      /// <summary>
      /// Delete a [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] by resource
      /// name. The longrunning operation from this RPC will have a successful status
      /// once the [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] has been
      /// removed from long-lasting storage.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation DeleteServicePerimeter(global::Google.Identity.AccessContextManager.V1.DeleteServicePerimeterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteServicePerimeter(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] by resource
      /// name. The longrunning operation from this RPC will have a successful status
      /// once the [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] has been
      /// removed from long-lasting storage.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation DeleteServicePerimeter(global::Google.Identity.AccessContextManager.V1.DeleteServicePerimeterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteServicePerimeter, null, options, request);
      }
      /// <summary>
      /// Delete a [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] by resource
      /// name. The longrunning operation from this RPC will have a successful status
      /// once the [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] has been
      /// removed from long-lasting storage.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteServicePerimeterAsync(global::Google.Identity.AccessContextManager.V1.DeleteServicePerimeterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteServicePerimeterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] by resource
      /// name. The longrunning operation from this RPC will have a successful status
      /// once the [Service Perimeter]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] has been
      /// removed from long-lasting storage.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteServicePerimeterAsync(global::Google.Identity.AccessContextManager.V1.DeleteServicePerimeterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteServicePerimeter, null, options, request);
      }
      /// <summary>
      /// Replace all existing [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] in an
      /// [Access Policy] [google.identity.accesscontextmanager.v1.AccessPolicy]
      /// with the [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] provided.
      /// This is done atomically. The longrunning operation from this
      /// RPC will have a successful status once all replacements have propagated to
      /// long-lasting storage. Replacements containing errors will result in an
      /// error response for the first error encountered. Replacement will be
      /// cancelled on error, existing [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] will not be
      /// affected. Operation.response field will contain
      /// ReplaceServicePerimetersResponse.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation ReplaceServicePerimeters(global::Google.Identity.AccessContextManager.V1.ReplaceServicePerimetersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReplaceServicePerimeters(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Replace all existing [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] in an
      /// [Access Policy] [google.identity.accesscontextmanager.v1.AccessPolicy]
      /// with the [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] provided.
      /// This is done atomically. The longrunning operation from this
      /// RPC will have a successful status once all replacements have propagated to
      /// long-lasting storage. Replacements containing errors will result in an
      /// error response for the first error encountered. Replacement will be
      /// cancelled on error, existing [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] will not be
      /// affected. Operation.response field will contain
      /// ReplaceServicePerimetersResponse.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation ReplaceServicePerimeters(global::Google.Identity.AccessContextManager.V1.ReplaceServicePerimetersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReplaceServicePerimeters, null, options, request);
      }
      /// <summary>
      /// Replace all existing [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] in an
      /// [Access Policy] [google.identity.accesscontextmanager.v1.AccessPolicy]
      /// with the [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] provided.
      /// This is done atomically. The longrunning operation from this
      /// RPC will have a successful status once all replacements have propagated to
      /// long-lasting storage. Replacements containing errors will result in an
      /// error response for the first error encountered. Replacement will be
      /// cancelled on error, existing [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] will not be
      /// affected. Operation.response field will contain
      /// ReplaceServicePerimetersResponse.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ReplaceServicePerimetersAsync(global::Google.Identity.AccessContextManager.V1.ReplaceServicePerimetersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReplaceServicePerimetersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Replace all existing [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] in an
      /// [Access Policy] [google.identity.accesscontextmanager.v1.AccessPolicy]
      /// with the [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] provided.
      /// This is done atomically. The longrunning operation from this
      /// RPC will have a successful status once all replacements have propagated to
      /// long-lasting storage. Replacements containing errors will result in an
      /// error response for the first error encountered. Replacement will be
      /// cancelled on error, existing [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] will not be
      /// affected. Operation.response field will contain
      /// ReplaceServicePerimetersResponse.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ReplaceServicePerimetersAsync(global::Google.Identity.AccessContextManager.V1.ReplaceServicePerimetersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReplaceServicePerimeters, null, options, request);
      }
      /// <summary>
      /// Commit the dry-run spec for all the [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] in an
      /// [Access Policy][google.identity.accesscontextmanager.v1.AccessPolicy].
      /// A commit operation on a Service Perimeter involves copying its `spec` field
      /// to that Service Perimeter's `status` field. Only [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] with
      /// `use_explicit_dry_run_spec` field set to true are affected by a commit
      /// operation. The longrunning operation from this RPC will have a successful
      /// status once the dry-run specs for all the [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] have been
      /// committed. If a commit fails, it will cause the longrunning operation to
      /// return an error response and the entire commit operation will be cancelled.
      /// When successful, Operation.response field will contain
      /// CommitServicePerimetersResponse. The `dry_run` and the `spec` fields will
      /// be cleared after a successful commit operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation CommitServicePerimeters(global::Google.Identity.AccessContextManager.V1.CommitServicePerimetersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CommitServicePerimeters(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Commit the dry-run spec for all the [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] in an
      /// [Access Policy][google.identity.accesscontextmanager.v1.AccessPolicy].
      /// A commit operation on a Service Perimeter involves copying its `spec` field
      /// to that Service Perimeter's `status` field. Only [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] with
      /// `use_explicit_dry_run_spec` field set to true are affected by a commit
      /// operation. The longrunning operation from this RPC will have a successful
      /// status once the dry-run specs for all the [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] have been
      /// committed. If a commit fails, it will cause the longrunning operation to
      /// return an error response and the entire commit operation will be cancelled.
      /// When successful, Operation.response field will contain
      /// CommitServicePerimetersResponse. The `dry_run` and the `spec` fields will
      /// be cleared after a successful commit operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation CommitServicePerimeters(global::Google.Identity.AccessContextManager.V1.CommitServicePerimetersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CommitServicePerimeters, null, options, request);
      }
      /// <summary>
      /// Commit the dry-run spec for all the [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] in an
      /// [Access Policy][google.identity.accesscontextmanager.v1.AccessPolicy].
      /// A commit operation on a Service Perimeter involves copying its `spec` field
      /// to that Service Perimeter's `status` field. Only [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] with
      /// `use_explicit_dry_run_spec` field set to true are affected by a commit
      /// operation. The longrunning operation from this RPC will have a successful
      /// status once the dry-run specs for all the [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] have been
      /// committed. If a commit fails, it will cause the longrunning operation to
      /// return an error response and the entire commit operation will be cancelled.
      /// When successful, Operation.response field will contain
      /// CommitServicePerimetersResponse. The `dry_run` and the `spec` fields will
      /// be cleared after a successful commit operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CommitServicePerimetersAsync(global::Google.Identity.AccessContextManager.V1.CommitServicePerimetersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CommitServicePerimetersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Commit the dry-run spec for all the [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] in an
      /// [Access Policy][google.identity.accesscontextmanager.v1.AccessPolicy].
      /// A commit operation on a Service Perimeter involves copying its `spec` field
      /// to that Service Perimeter's `status` field. Only [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] with
      /// `use_explicit_dry_run_spec` field set to true are affected by a commit
      /// operation. The longrunning operation from this RPC will have a successful
      /// status once the dry-run specs for all the [Service Perimeters]
      /// [google.identity.accesscontextmanager.v1.ServicePerimeter] have been
      /// committed. If a commit fails, it will cause the longrunning operation to
      /// return an error response and the entire commit operation will be cancelled.
      /// When successful, Operation.response field will contain
      /// CommitServicePerimetersResponse. The `dry_run` and the `spec` fields will
      /// be cleared after a successful commit operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CommitServicePerimetersAsync(global::Google.Identity.AccessContextManager.V1.CommitServicePerimetersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CommitServicePerimeters, null, options, request);
      }
      /// <summary>
      /// Lists all [GcpUserAccessBindings]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding] for a
      /// Google Cloud organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Identity.AccessContextManager.V1.ListGcpUserAccessBindingsResponse ListGcpUserAccessBindings(global::Google.Identity.AccessContextManager.V1.ListGcpUserAccessBindingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListGcpUserAccessBindings(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all [GcpUserAccessBindings]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding] for a
      /// Google Cloud organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Identity.AccessContextManager.V1.ListGcpUserAccessBindingsResponse ListGcpUserAccessBindings(global::Google.Identity.AccessContextManager.V1.ListGcpUserAccessBindingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListGcpUserAccessBindings, null, options, request);
      }
      /// <summary>
      /// Lists all [GcpUserAccessBindings]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding] for a
      /// Google Cloud organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Identity.AccessContextManager.V1.ListGcpUserAccessBindingsResponse> ListGcpUserAccessBindingsAsync(global::Google.Identity.AccessContextManager.V1.ListGcpUserAccessBindingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListGcpUserAccessBindingsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all [GcpUserAccessBindings]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding] for a
      /// Google Cloud organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Identity.AccessContextManager.V1.ListGcpUserAccessBindingsResponse> ListGcpUserAccessBindingsAsync(global::Google.Identity.AccessContextManager.V1.ListGcpUserAccessBindingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListGcpUserAccessBindings, null, options, request);
      }
      /// <summary>
      /// Gets the [GcpUserAccessBinding]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding] with
      /// the given name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Identity.AccessContextManager.V1.GcpUserAccessBinding GetGcpUserAccessBinding(global::Google.Identity.AccessContextManager.V1.GetGcpUserAccessBindingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGcpUserAccessBinding(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the [GcpUserAccessBinding]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding] with
      /// the given name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Identity.AccessContextManager.V1.GcpUserAccessBinding GetGcpUserAccessBinding(global::Google.Identity.AccessContextManager.V1.GetGcpUserAccessBindingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetGcpUserAccessBinding, null, options, request);
      }
      /// <summary>
      /// Gets the [GcpUserAccessBinding]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding] with
      /// the given name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Identity.AccessContextManager.V1.GcpUserAccessBinding> GetGcpUserAccessBindingAsync(global::Google.Identity.AccessContextManager.V1.GetGcpUserAccessBindingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGcpUserAccessBindingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the [GcpUserAccessBinding]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding] with
      /// the given name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Identity.AccessContextManager.V1.GcpUserAccessBinding> GetGcpUserAccessBindingAsync(global::Google.Identity.AccessContextManager.V1.GetGcpUserAccessBindingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetGcpUserAccessBinding, null, options, request);
      }
      /// <summary>
      /// Creates a [GcpUserAccessBinding]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding]. If the
      /// client specifies a [name]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding.name],
      /// the server will ignore it. Fails if a resource already exists with the same
      /// [group_key]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding.group_key].
      /// Completion of this long-running operation does not necessarily signify that
      /// the new binding is deployed onto all affected users, which may take more
      /// time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation CreateGcpUserAccessBinding(global::Google.Identity.AccessContextManager.V1.CreateGcpUserAccessBindingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateGcpUserAccessBinding(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a [GcpUserAccessBinding]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding]. If the
      /// client specifies a [name]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding.name],
      /// the server will ignore it. Fails if a resource already exists with the same
      /// [group_key]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding.group_key].
      /// Completion of this long-running operation does not necessarily signify that
      /// the new binding is deployed onto all affected users, which may take more
      /// time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation CreateGcpUserAccessBinding(global::Google.Identity.AccessContextManager.V1.CreateGcpUserAccessBindingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateGcpUserAccessBinding, null, options, request);
      }
      /// <summary>
      /// Creates a [GcpUserAccessBinding]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding]. If the
      /// client specifies a [name]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding.name],
      /// the server will ignore it. Fails if a resource already exists with the same
      /// [group_key]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding.group_key].
      /// Completion of this long-running operation does not necessarily signify that
      /// the new binding is deployed onto all affected users, which may take more
      /// time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateGcpUserAccessBindingAsync(global::Google.Identity.AccessContextManager.V1.CreateGcpUserAccessBindingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateGcpUserAccessBindingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a [GcpUserAccessBinding]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding]. If the
      /// client specifies a [name]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding.name],
      /// the server will ignore it. Fails if a resource already exists with the same
      /// [group_key]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding.group_key].
      /// Completion of this long-running operation does not necessarily signify that
      /// the new binding is deployed onto all affected users, which may take more
      /// time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateGcpUserAccessBindingAsync(global::Google.Identity.AccessContextManager.V1.CreateGcpUserAccessBindingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateGcpUserAccessBinding, null, options, request);
      }
      /// <summary>
      /// Updates a [GcpUserAccessBinding]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding].
      /// Completion of this long-running operation does not necessarily signify that
      /// the changed binding is deployed onto all affected users, which may take
      /// more time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation UpdateGcpUserAccessBinding(global::Google.Identity.AccessContextManager.V1.UpdateGcpUserAccessBindingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGcpUserAccessBinding(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a [GcpUserAccessBinding]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding].
      /// Completion of this long-running operation does not necessarily signify that
      /// the changed binding is deployed onto all affected users, which may take
      /// more time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation UpdateGcpUserAccessBinding(global::Google.Identity.AccessContextManager.V1.UpdateGcpUserAccessBindingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateGcpUserAccessBinding, null, options, request);
      }
      /// <summary>
      /// Updates a [GcpUserAccessBinding]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding].
      /// Completion of this long-running operation does not necessarily signify that
      /// the changed binding is deployed onto all affected users, which may take
      /// more time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateGcpUserAccessBindingAsync(global::Google.Identity.AccessContextManager.V1.UpdateGcpUserAccessBindingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGcpUserAccessBindingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a [GcpUserAccessBinding]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding].
      /// Completion of this long-running operation does not necessarily signify that
      /// the changed binding is deployed onto all affected users, which may take
      /// more time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateGcpUserAccessBindingAsync(global::Google.Identity.AccessContextManager.V1.UpdateGcpUserAccessBindingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateGcpUserAccessBinding, null, options, request);
      }
      /// <summary>
      /// Deletes a [GcpUserAccessBinding]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding].
      /// Completion of this long-running operation does not necessarily signify that
      /// the binding deletion is deployed onto all affected users, which may take
      /// more time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation DeleteGcpUserAccessBinding(global::Google.Identity.AccessContextManager.V1.DeleteGcpUserAccessBindingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGcpUserAccessBinding(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a [GcpUserAccessBinding]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding].
      /// Completion of this long-running operation does not necessarily signify that
      /// the binding deletion is deployed onto all affected users, which may take
      /// more time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation DeleteGcpUserAccessBinding(global::Google.Identity.AccessContextManager.V1.DeleteGcpUserAccessBindingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteGcpUserAccessBinding, null, options, request);
      }
      /// <summary>
      /// Deletes a [GcpUserAccessBinding]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding].
      /// Completion of this long-running operation does not necessarily signify that
      /// the binding deletion is deployed onto all affected users, which may take
      /// more time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteGcpUserAccessBindingAsync(global::Google.Identity.AccessContextManager.V1.DeleteGcpUserAccessBindingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGcpUserAccessBindingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a [GcpUserAccessBinding]
      /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding].
      /// Completion of this long-running operation does not necessarily signify that
      /// the binding deletion is deployed onto all affected users, which may take
      /// more time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteGcpUserAccessBindingAsync(global::Google.Identity.AccessContextManager.V1.DeleteGcpUserAccessBindingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteGcpUserAccessBinding, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override AccessContextManagerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AccessContextManagerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(AccessContextManagerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListAccessPolicies, serviceImpl.ListAccessPolicies)
          .AddMethod(__Method_GetAccessPolicy, serviceImpl.GetAccessPolicy)
          .AddMethod(__Method_CreateAccessPolicy, serviceImpl.CreateAccessPolicy)
          .AddMethod(__Method_UpdateAccessPolicy, serviceImpl.UpdateAccessPolicy)
          .AddMethod(__Method_DeleteAccessPolicy, serviceImpl.DeleteAccessPolicy)
          .AddMethod(__Method_ListAccessLevels, serviceImpl.ListAccessLevels)
          .AddMethod(__Method_GetAccessLevel, serviceImpl.GetAccessLevel)
          .AddMethod(__Method_CreateAccessLevel, serviceImpl.CreateAccessLevel)
          .AddMethod(__Method_UpdateAccessLevel, serviceImpl.UpdateAccessLevel)
          .AddMethod(__Method_DeleteAccessLevel, serviceImpl.DeleteAccessLevel)
          .AddMethod(__Method_ReplaceAccessLevels, serviceImpl.ReplaceAccessLevels)
          .AddMethod(__Method_ListServicePerimeters, serviceImpl.ListServicePerimeters)
          .AddMethod(__Method_GetServicePerimeter, serviceImpl.GetServicePerimeter)
          .AddMethod(__Method_CreateServicePerimeter, serviceImpl.CreateServicePerimeter)
          .AddMethod(__Method_UpdateServicePerimeter, serviceImpl.UpdateServicePerimeter)
          .AddMethod(__Method_DeleteServicePerimeter, serviceImpl.DeleteServicePerimeter)
          .AddMethod(__Method_ReplaceServicePerimeters, serviceImpl.ReplaceServicePerimeters)
          .AddMethod(__Method_CommitServicePerimeters, serviceImpl.CommitServicePerimeters)
          .AddMethod(__Method_ListGcpUserAccessBindings, serviceImpl.ListGcpUserAccessBindings)
          .AddMethod(__Method_GetGcpUserAccessBinding, serviceImpl.GetGcpUserAccessBinding)
          .AddMethod(__Method_CreateGcpUserAccessBinding, serviceImpl.CreateGcpUserAccessBinding)
          .AddMethod(__Method_UpdateGcpUserAccessBinding, serviceImpl.UpdateGcpUserAccessBinding)
          .AddMethod(__Method_DeleteGcpUserAccessBinding, serviceImpl.DeleteGcpUserAccessBinding).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AccessContextManagerBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListAccessPolicies, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Identity.AccessContextManager.V1.ListAccessPoliciesRequest, global::Google.Identity.AccessContextManager.V1.ListAccessPoliciesResponse>(serviceImpl.ListAccessPolicies));
      serviceBinder.AddMethod(__Method_GetAccessPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Identity.AccessContextManager.V1.GetAccessPolicyRequest, global::Google.Identity.AccessContextManager.V1.AccessPolicy>(serviceImpl.GetAccessPolicy));
      serviceBinder.AddMethod(__Method_CreateAccessPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Identity.AccessContextManager.V1.AccessPolicy, global::Google.LongRunning.Operation>(serviceImpl.CreateAccessPolicy));
      serviceBinder.AddMethod(__Method_UpdateAccessPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Identity.AccessContextManager.V1.UpdateAccessPolicyRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateAccessPolicy));
      serviceBinder.AddMethod(__Method_DeleteAccessPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Identity.AccessContextManager.V1.DeleteAccessPolicyRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteAccessPolicy));
      serviceBinder.AddMethod(__Method_ListAccessLevels, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Identity.AccessContextManager.V1.ListAccessLevelsRequest, global::Google.Identity.AccessContextManager.V1.ListAccessLevelsResponse>(serviceImpl.ListAccessLevels));
      serviceBinder.AddMethod(__Method_GetAccessLevel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Identity.AccessContextManager.V1.GetAccessLevelRequest, global::Google.Identity.AccessContextManager.V1.AccessLevel>(serviceImpl.GetAccessLevel));
      serviceBinder.AddMethod(__Method_CreateAccessLevel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Identity.AccessContextManager.V1.CreateAccessLevelRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateAccessLevel));
      serviceBinder.AddMethod(__Method_UpdateAccessLevel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Identity.AccessContextManager.V1.UpdateAccessLevelRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateAccessLevel));
      serviceBinder.AddMethod(__Method_DeleteAccessLevel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Identity.AccessContextManager.V1.DeleteAccessLevelRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteAccessLevel));
      serviceBinder.AddMethod(__Method_ReplaceAccessLevels, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Identity.AccessContextManager.V1.ReplaceAccessLevelsRequest, global::Google.LongRunning.Operation>(serviceImpl.ReplaceAccessLevels));
      serviceBinder.AddMethod(__Method_ListServicePerimeters, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Identity.AccessContextManager.V1.ListServicePerimetersRequest, global::Google.Identity.AccessContextManager.V1.ListServicePerimetersResponse>(serviceImpl.ListServicePerimeters));
      serviceBinder.AddMethod(__Method_GetServicePerimeter, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Identity.AccessContextManager.V1.GetServicePerimeterRequest, global::Google.Identity.AccessContextManager.V1.ServicePerimeter>(serviceImpl.GetServicePerimeter));
      serviceBinder.AddMethod(__Method_CreateServicePerimeter, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Identity.AccessContextManager.V1.CreateServicePerimeterRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateServicePerimeter));
      serviceBinder.AddMethod(__Method_UpdateServicePerimeter, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Identity.AccessContextManager.V1.UpdateServicePerimeterRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateServicePerimeter));
      serviceBinder.AddMethod(__Method_DeleteServicePerimeter, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Identity.AccessContextManager.V1.DeleteServicePerimeterRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteServicePerimeter));
      serviceBinder.AddMethod(__Method_ReplaceServicePerimeters, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Identity.AccessContextManager.V1.ReplaceServicePerimetersRequest, global::Google.LongRunning.Operation>(serviceImpl.ReplaceServicePerimeters));
      serviceBinder.AddMethod(__Method_CommitServicePerimeters, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Identity.AccessContextManager.V1.CommitServicePerimetersRequest, global::Google.LongRunning.Operation>(serviceImpl.CommitServicePerimeters));
      serviceBinder.AddMethod(__Method_ListGcpUserAccessBindings, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Identity.AccessContextManager.V1.ListGcpUserAccessBindingsRequest, global::Google.Identity.AccessContextManager.V1.ListGcpUserAccessBindingsResponse>(serviceImpl.ListGcpUserAccessBindings));
      serviceBinder.AddMethod(__Method_GetGcpUserAccessBinding, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Identity.AccessContextManager.V1.GetGcpUserAccessBindingRequest, global::Google.Identity.AccessContextManager.V1.GcpUserAccessBinding>(serviceImpl.GetGcpUserAccessBinding));
      serviceBinder.AddMethod(__Method_CreateGcpUserAccessBinding, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Identity.AccessContextManager.V1.CreateGcpUserAccessBindingRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateGcpUserAccessBinding));
      serviceBinder.AddMethod(__Method_UpdateGcpUserAccessBinding, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Identity.AccessContextManager.V1.UpdateGcpUserAccessBindingRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateGcpUserAccessBinding));
      serviceBinder.AddMethod(__Method_DeleteGcpUserAccessBinding, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Identity.AccessContextManager.V1.DeleteGcpUserAccessBindingRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteGcpUserAccessBinding));
    }

  }
}
#endregion
