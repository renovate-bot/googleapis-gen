# frozen_string_literal: true

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "helper"

require "gapic/grpc/service_stub"

require "google/storage/v1/storage_pb"
require "google/storage/v1/storage_services_pb"
require "google/storage/v1/storage"

class ::Google::Storage::V1::Storage::ClientTest < Minitest::Test
  class ClientStub
    attr_accessor :call_rpc_count, :requests

    def initialize response, operation, &block
      @response = response
      @operation = operation
      @block = block
      @call_rpc_count = 0
      @requests = []
    end

    def call_rpc *args, **kwargs
      @call_rpc_count += 1

      @requests << @block&.call(*args, **kwargs)

      yield @response, @operation if block_given?

      @response
    end
  end

  def test_delete_bucket_access_control
    # Create GRPC objects.
    grpc_response = ::Google::Protobuf::Empty.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    entity = "hello world"
    common_request_params = {}

    delete_bucket_access_control_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :delete_bucket_access_control, name
      assert_kind_of ::Google::Storage::V1::DeleteBucketAccessControlRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal "hello world", request["entity"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, delete_bucket_access_control_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.delete_bucket_access_control({ bucket: bucket, entity: entity, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.delete_bucket_access_control bucket: bucket, entity: entity, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.delete_bucket_access_control ::Google::Storage::V1::DeleteBucketAccessControlRequest.new(bucket: bucket, entity: entity, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.delete_bucket_access_control({ bucket: bucket, entity: entity, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.delete_bucket_access_control(::Google::Storage::V1::DeleteBucketAccessControlRequest.new(bucket: bucket, entity: entity, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, delete_bucket_access_control_client_stub.call_rpc_count
    end
  end

  def test_get_bucket_access_control
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::BucketAccessControl.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    entity = "hello world"
    common_request_params = {}

    get_bucket_access_control_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :get_bucket_access_control, name
      assert_kind_of ::Google::Storage::V1::GetBucketAccessControlRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal "hello world", request["entity"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, get_bucket_access_control_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.get_bucket_access_control({ bucket: bucket, entity: entity, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.get_bucket_access_control bucket: bucket, entity: entity, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.get_bucket_access_control ::Google::Storage::V1::GetBucketAccessControlRequest.new(bucket: bucket, entity: entity, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.get_bucket_access_control({ bucket: bucket, entity: entity, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.get_bucket_access_control(::Google::Storage::V1::GetBucketAccessControlRequest.new(bucket: bucket, entity: entity, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, get_bucket_access_control_client_stub.call_rpc_count
    end
  end

  def test_insert_bucket_access_control
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::BucketAccessControl.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    bucket_access_control = {}
    common_request_params = {}

    insert_bucket_access_control_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :insert_bucket_access_control, name
      assert_kind_of ::Google::Storage::V1::InsertBucketAccessControlRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::BucketAccessControl), request["bucket_access_control"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, insert_bucket_access_control_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.insert_bucket_access_control({ bucket: bucket, bucket_access_control: bucket_access_control, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.insert_bucket_access_control bucket: bucket, bucket_access_control: bucket_access_control, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.insert_bucket_access_control ::Google::Storage::V1::InsertBucketAccessControlRequest.new(bucket: bucket, bucket_access_control: bucket_access_control, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.insert_bucket_access_control({ bucket: bucket, bucket_access_control: bucket_access_control, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.insert_bucket_access_control(::Google::Storage::V1::InsertBucketAccessControlRequest.new(bucket: bucket, bucket_access_control: bucket_access_control, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, insert_bucket_access_control_client_stub.call_rpc_count
    end
  end

  def test_list_bucket_access_controls
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::ListBucketAccessControlsResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    common_request_params = {}

    list_bucket_access_controls_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :list_bucket_access_controls, name
      assert_kind_of ::Google::Storage::V1::ListBucketAccessControlsRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, list_bucket_access_controls_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.list_bucket_access_controls({ bucket: bucket, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.list_bucket_access_controls bucket: bucket, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.list_bucket_access_controls ::Google::Storage::V1::ListBucketAccessControlsRequest.new(bucket: bucket, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.list_bucket_access_controls({ bucket: bucket, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.list_bucket_access_controls(::Google::Storage::V1::ListBucketAccessControlsRequest.new(bucket: bucket, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, list_bucket_access_controls_client_stub.call_rpc_count
    end
  end

  def test_update_bucket_access_control
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::BucketAccessControl.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    entity = "hello world"
    bucket_access_control = {}
    common_request_params = {}

    update_bucket_access_control_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :update_bucket_access_control, name
      assert_kind_of ::Google::Storage::V1::UpdateBucketAccessControlRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal "hello world", request["entity"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::BucketAccessControl), request["bucket_access_control"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, update_bucket_access_control_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.update_bucket_access_control({ bucket: bucket, entity: entity, bucket_access_control: bucket_access_control, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.update_bucket_access_control bucket: bucket, entity: entity, bucket_access_control: bucket_access_control, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.update_bucket_access_control ::Google::Storage::V1::UpdateBucketAccessControlRequest.new(bucket: bucket, entity: entity, bucket_access_control: bucket_access_control, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.update_bucket_access_control({ bucket: bucket, entity: entity, bucket_access_control: bucket_access_control, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.update_bucket_access_control(::Google::Storage::V1::UpdateBucketAccessControlRequest.new(bucket: bucket, entity: entity, bucket_access_control: bucket_access_control, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, update_bucket_access_control_client_stub.call_rpc_count
    end
  end

  def test_patch_bucket_access_control
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::BucketAccessControl.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    entity = "hello world"
    bucket_access_control = {}
    update_mask = {}
    common_request_params = {}

    patch_bucket_access_control_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :patch_bucket_access_control, name
      assert_kind_of ::Google::Storage::V1::PatchBucketAccessControlRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal "hello world", request["entity"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::BucketAccessControl), request["bucket_access_control"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::FieldMask), request["update_mask"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, patch_bucket_access_control_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.patch_bucket_access_control({ bucket: bucket, entity: entity, bucket_access_control: bucket_access_control, update_mask: update_mask, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.patch_bucket_access_control bucket: bucket, entity: entity, bucket_access_control: bucket_access_control, update_mask: update_mask, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.patch_bucket_access_control ::Google::Storage::V1::PatchBucketAccessControlRequest.new(bucket: bucket, entity: entity, bucket_access_control: bucket_access_control, update_mask: update_mask, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.patch_bucket_access_control({ bucket: bucket, entity: entity, bucket_access_control: bucket_access_control, update_mask: update_mask, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.patch_bucket_access_control(::Google::Storage::V1::PatchBucketAccessControlRequest.new(bucket: bucket, entity: entity, bucket_access_control: bucket_access_control, update_mask: update_mask, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, patch_bucket_access_control_client_stub.call_rpc_count
    end
  end

  def test_delete_bucket
    # Create GRPC objects.
    grpc_response = ::Google::Protobuf::Empty.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    if_metageneration_match = {}
    if_metageneration_not_match = {}
    common_request_params = {}

    delete_bucket_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :delete_bucket, name
      assert_kind_of ::Google::Storage::V1::DeleteBucketRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_metageneration_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_metageneration_not_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, delete_bucket_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.delete_bucket({ bucket: bucket, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.delete_bucket bucket: bucket, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.delete_bucket ::Google::Storage::V1::DeleteBucketRequest.new(bucket: bucket, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.delete_bucket({ bucket: bucket, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.delete_bucket(::Google::Storage::V1::DeleteBucketRequest.new(bucket: bucket, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, delete_bucket_client_stub.call_rpc_count
    end
  end

  def test_get_bucket
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::Bucket.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    if_metageneration_match = {}
    if_metageneration_not_match = {}
    projection = :PROJECTION_UNSPECIFIED
    common_request_params = {}

    get_bucket_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :get_bucket, name
      assert_kind_of ::Google::Storage::V1::GetBucketRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_metageneration_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_metageneration_not_match"]
      assert_equal :PROJECTION_UNSPECIFIED, request["projection"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, get_bucket_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.get_bucket({ bucket: bucket, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, projection: projection, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.get_bucket bucket: bucket, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, projection: projection, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.get_bucket ::Google::Storage::V1::GetBucketRequest.new(bucket: bucket, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, projection: projection, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.get_bucket({ bucket: bucket, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, projection: projection, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.get_bucket(::Google::Storage::V1::GetBucketRequest.new(bucket: bucket, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, projection: projection, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, get_bucket_client_stub.call_rpc_count
    end
  end

  def test_insert_bucket
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::Bucket.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    predefined_acl = :PREDEFINED_BUCKET_ACL_UNSPECIFIED
    predefined_default_object_acl = :PREDEFINED_OBJECT_ACL_UNSPECIFIED
    project = "hello world"
    projection = :PROJECTION_UNSPECIFIED
    bucket = {}
    common_request_params = {}

    insert_bucket_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :insert_bucket, name
      assert_kind_of ::Google::Storage::V1::InsertBucketRequest, request
      assert_equal :PREDEFINED_BUCKET_ACL_UNSPECIFIED, request["predefined_acl"]
      assert_equal :PREDEFINED_OBJECT_ACL_UNSPECIFIED, request["predefined_default_object_acl"]
      assert_equal "hello world", request["project"]
      assert_equal :PROJECTION_UNSPECIFIED, request["projection"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::Bucket), request["bucket"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, insert_bucket_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.insert_bucket({ predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, project: project, projection: projection, bucket: bucket, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.insert_bucket predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, project: project, projection: projection, bucket: bucket, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.insert_bucket ::Google::Storage::V1::InsertBucketRequest.new(predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, project: project, projection: projection, bucket: bucket, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.insert_bucket({ predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, project: project, projection: projection, bucket: bucket, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.insert_bucket(::Google::Storage::V1::InsertBucketRequest.new(predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, project: project, projection: projection, bucket: bucket, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, insert_bucket_client_stub.call_rpc_count
    end
  end

  def test_list_channels
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::ListChannelsResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    common_request_params = {}

    list_channels_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :list_channels, name
      assert_kind_of ::Google::Storage::V1::ListChannelsRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, list_channels_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.list_channels({ bucket: bucket, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.list_channels bucket: bucket, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.list_channels ::Google::Storage::V1::ListChannelsRequest.new(bucket: bucket, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.list_channels({ bucket: bucket, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.list_channels(::Google::Storage::V1::ListChannelsRequest.new(bucket: bucket, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, list_channels_client_stub.call_rpc_count
    end
  end

  def test_list_buckets
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::ListBucketsResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    max_results = 42
    page_token = "hello world"
    prefix = "hello world"
    project = "hello world"
    projection = :PROJECTION_UNSPECIFIED
    common_request_params = {}

    list_buckets_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :list_buckets, name
      assert_kind_of ::Google::Storage::V1::ListBucketsRequest, request
      assert_equal 42, request["max_results"]
      assert_equal "hello world", request["page_token"]
      assert_equal "hello world", request["prefix"]
      assert_equal "hello world", request["project"]
      assert_equal :PROJECTION_UNSPECIFIED, request["projection"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, list_buckets_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.list_buckets({ max_results: max_results, page_token: page_token, prefix: prefix, project: project, projection: projection, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.list_buckets max_results: max_results, page_token: page_token, prefix: prefix, project: project, projection: projection, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.list_buckets ::Google::Storage::V1::ListBucketsRequest.new(max_results: max_results, page_token: page_token, prefix: prefix, project: project, projection: projection, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.list_buckets({ max_results: max_results, page_token: page_token, prefix: prefix, project: project, projection: projection, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.list_buckets(::Google::Storage::V1::ListBucketsRequest.new(max_results: max_results, page_token: page_token, prefix: prefix, project: project, projection: projection, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, list_buckets_client_stub.call_rpc_count
    end
  end

  def test_lock_bucket_retention_policy
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::Bucket.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    if_metageneration_match = 42
    common_request_params = {}

    lock_bucket_retention_policy_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :lock_bucket_retention_policy, name
      assert_kind_of ::Google::Storage::V1::LockRetentionPolicyRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal 42, request["if_metageneration_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, lock_bucket_retention_policy_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.lock_bucket_retention_policy({ bucket: bucket, if_metageneration_match: if_metageneration_match, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.lock_bucket_retention_policy bucket: bucket, if_metageneration_match: if_metageneration_match, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.lock_bucket_retention_policy ::Google::Storage::V1::LockRetentionPolicyRequest.new(bucket: bucket, if_metageneration_match: if_metageneration_match, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.lock_bucket_retention_policy({ bucket: bucket, if_metageneration_match: if_metageneration_match, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.lock_bucket_retention_policy(::Google::Storage::V1::LockRetentionPolicyRequest.new(bucket: bucket, if_metageneration_match: if_metageneration_match, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, lock_bucket_retention_policy_client_stub.call_rpc_count
    end
  end

  def test_get_bucket_iam_policy
    # Create GRPC objects.
    grpc_response = ::Google::Iam::V1::Policy.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    iam_request = {}
    common_request_params = {}

    get_bucket_iam_policy_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :get_bucket_iam_policy, name
      assert_kind_of ::Google::Storage::V1::GetIamPolicyRequest, request
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Iam::V1::GetIamPolicyRequest), request["iam_request"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, get_bucket_iam_policy_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.get_bucket_iam_policy({ iam_request: iam_request, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.get_bucket_iam_policy iam_request: iam_request, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.get_bucket_iam_policy ::Google::Storage::V1::GetIamPolicyRequest.new(iam_request: iam_request, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.get_bucket_iam_policy({ iam_request: iam_request, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.get_bucket_iam_policy(::Google::Storage::V1::GetIamPolicyRequest.new(iam_request: iam_request, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, get_bucket_iam_policy_client_stub.call_rpc_count
    end
  end

  def test_set_bucket_iam_policy
    # Create GRPC objects.
    grpc_response = ::Google::Iam::V1::Policy.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    iam_request = {}
    common_request_params = {}

    set_bucket_iam_policy_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :set_bucket_iam_policy, name
      assert_kind_of ::Google::Storage::V1::SetIamPolicyRequest, request
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Iam::V1::SetIamPolicyRequest), request["iam_request"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, set_bucket_iam_policy_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.set_bucket_iam_policy({ iam_request: iam_request, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.set_bucket_iam_policy iam_request: iam_request, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.set_bucket_iam_policy ::Google::Storage::V1::SetIamPolicyRequest.new(iam_request: iam_request, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.set_bucket_iam_policy({ iam_request: iam_request, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.set_bucket_iam_policy(::Google::Storage::V1::SetIamPolicyRequest.new(iam_request: iam_request, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, set_bucket_iam_policy_client_stub.call_rpc_count
    end
  end

  def test_test_bucket_iam_permissions
    # Create GRPC objects.
    grpc_response = ::Google::Iam::V1::TestIamPermissionsResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    iam_request = {}
    common_request_params = {}

    test_bucket_iam_permissions_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :test_bucket_iam_permissions, name
      assert_kind_of ::Google::Storage::V1::TestIamPermissionsRequest, request
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Iam::V1::TestIamPermissionsRequest), request["iam_request"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, test_bucket_iam_permissions_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.test_bucket_iam_permissions({ iam_request: iam_request, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.test_bucket_iam_permissions iam_request: iam_request, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.test_bucket_iam_permissions ::Google::Storage::V1::TestIamPermissionsRequest.new(iam_request: iam_request, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.test_bucket_iam_permissions({ iam_request: iam_request, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.test_bucket_iam_permissions(::Google::Storage::V1::TestIamPermissionsRequest.new(iam_request: iam_request, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, test_bucket_iam_permissions_client_stub.call_rpc_count
    end
  end

  def test_patch_bucket
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::Bucket.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    if_metageneration_match = {}
    if_metageneration_not_match = {}
    predefined_acl = :PREDEFINED_BUCKET_ACL_UNSPECIFIED
    predefined_default_object_acl = :PREDEFINED_OBJECT_ACL_UNSPECIFIED
    projection = :PROJECTION_UNSPECIFIED
    metadata = {}
    update_mask = {}
    common_request_params = {}

    patch_bucket_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :patch_bucket, name
      assert_kind_of ::Google::Storage::V1::PatchBucketRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_metageneration_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_metageneration_not_match"]
      assert_equal :PREDEFINED_BUCKET_ACL_UNSPECIFIED, request["predefined_acl"]
      assert_equal :PREDEFINED_OBJECT_ACL_UNSPECIFIED, request["predefined_default_object_acl"]
      assert_equal :PROJECTION_UNSPECIFIED, request["projection"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::Bucket), request["metadata"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::FieldMask), request["update_mask"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, patch_bucket_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.patch_bucket({ bucket: bucket, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, projection: projection, metadata: metadata, update_mask: update_mask, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.patch_bucket bucket: bucket, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, projection: projection, metadata: metadata, update_mask: update_mask, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.patch_bucket ::Google::Storage::V1::PatchBucketRequest.new(bucket: bucket, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, projection: projection, metadata: metadata, update_mask: update_mask, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.patch_bucket({ bucket: bucket, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, projection: projection, metadata: metadata, update_mask: update_mask, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.patch_bucket(::Google::Storage::V1::PatchBucketRequest.new(bucket: bucket, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, projection: projection, metadata: metadata, update_mask: update_mask, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, patch_bucket_client_stub.call_rpc_count
    end
  end

  def test_update_bucket
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::Bucket.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    if_metageneration_match = {}
    if_metageneration_not_match = {}
    predefined_acl = :PREDEFINED_BUCKET_ACL_UNSPECIFIED
    predefined_default_object_acl = :PREDEFINED_OBJECT_ACL_UNSPECIFIED
    projection = :PROJECTION_UNSPECIFIED
    metadata = {}
    common_request_params = {}

    update_bucket_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :update_bucket, name
      assert_kind_of ::Google::Storage::V1::UpdateBucketRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_metageneration_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_metageneration_not_match"]
      assert_equal :PREDEFINED_BUCKET_ACL_UNSPECIFIED, request["predefined_acl"]
      assert_equal :PREDEFINED_OBJECT_ACL_UNSPECIFIED, request["predefined_default_object_acl"]
      assert_equal :PROJECTION_UNSPECIFIED, request["projection"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::Bucket), request["metadata"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, update_bucket_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.update_bucket({ bucket: bucket, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, projection: projection, metadata: metadata, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.update_bucket bucket: bucket, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, projection: projection, metadata: metadata, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.update_bucket ::Google::Storage::V1::UpdateBucketRequest.new(bucket: bucket, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, projection: projection, metadata: metadata, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.update_bucket({ bucket: bucket, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, projection: projection, metadata: metadata, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.update_bucket(::Google::Storage::V1::UpdateBucketRequest.new(bucket: bucket, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, projection: projection, metadata: metadata, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, update_bucket_client_stub.call_rpc_count
    end
  end

  def test_stop_channel
    # Create GRPC objects.
    grpc_response = ::Google::Protobuf::Empty.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    channel = {}
    common_request_params = {}

    stop_channel_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :stop_channel, name
      assert_kind_of ::Google::Storage::V1::StopChannelRequest, request
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::Channel), request["channel"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, stop_channel_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.stop_channel({ channel: channel, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.stop_channel channel: channel, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.stop_channel ::Google::Storage::V1::StopChannelRequest.new(channel: channel, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.stop_channel({ channel: channel, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.stop_channel(::Google::Storage::V1::StopChannelRequest.new(channel: channel, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, stop_channel_client_stub.call_rpc_count
    end
  end

  def test_delete_default_object_access_control
    # Create GRPC objects.
    grpc_response = ::Google::Protobuf::Empty.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    entity = "hello world"
    common_request_params = {}

    delete_default_object_access_control_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :delete_default_object_access_control, name
      assert_kind_of ::Google::Storage::V1::DeleteDefaultObjectAccessControlRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal "hello world", request["entity"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, delete_default_object_access_control_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.delete_default_object_access_control({ bucket: bucket, entity: entity, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.delete_default_object_access_control bucket: bucket, entity: entity, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.delete_default_object_access_control ::Google::Storage::V1::DeleteDefaultObjectAccessControlRequest.new(bucket: bucket, entity: entity, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.delete_default_object_access_control({ bucket: bucket, entity: entity, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.delete_default_object_access_control(::Google::Storage::V1::DeleteDefaultObjectAccessControlRequest.new(bucket: bucket, entity: entity, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, delete_default_object_access_control_client_stub.call_rpc_count
    end
  end

  def test_get_default_object_access_control
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::ObjectAccessControl.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    entity = "hello world"
    common_request_params = {}

    get_default_object_access_control_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :get_default_object_access_control, name
      assert_kind_of ::Google::Storage::V1::GetDefaultObjectAccessControlRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal "hello world", request["entity"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, get_default_object_access_control_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.get_default_object_access_control({ bucket: bucket, entity: entity, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.get_default_object_access_control bucket: bucket, entity: entity, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.get_default_object_access_control ::Google::Storage::V1::GetDefaultObjectAccessControlRequest.new(bucket: bucket, entity: entity, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.get_default_object_access_control({ bucket: bucket, entity: entity, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.get_default_object_access_control(::Google::Storage::V1::GetDefaultObjectAccessControlRequest.new(bucket: bucket, entity: entity, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, get_default_object_access_control_client_stub.call_rpc_count
    end
  end

  def test_insert_default_object_access_control
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::ObjectAccessControl.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    object_access_control = {}
    common_request_params = {}

    insert_default_object_access_control_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :insert_default_object_access_control, name
      assert_kind_of ::Google::Storage::V1::InsertDefaultObjectAccessControlRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::ObjectAccessControl), request["object_access_control"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, insert_default_object_access_control_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.insert_default_object_access_control({ bucket: bucket, object_access_control: object_access_control, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.insert_default_object_access_control bucket: bucket, object_access_control: object_access_control, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.insert_default_object_access_control ::Google::Storage::V1::InsertDefaultObjectAccessControlRequest.new(bucket: bucket, object_access_control: object_access_control, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.insert_default_object_access_control({ bucket: bucket, object_access_control: object_access_control, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.insert_default_object_access_control(::Google::Storage::V1::InsertDefaultObjectAccessControlRequest.new(bucket: bucket, object_access_control: object_access_control, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, insert_default_object_access_control_client_stub.call_rpc_count
    end
  end

  def test_list_default_object_access_controls
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::ListObjectAccessControlsResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    if_metageneration_match = {}
    if_metageneration_not_match = {}
    common_request_params = {}

    list_default_object_access_controls_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :list_default_object_access_controls, name
      assert_kind_of ::Google::Storage::V1::ListDefaultObjectAccessControlsRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_metageneration_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_metageneration_not_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, list_default_object_access_controls_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.list_default_object_access_controls({ bucket: bucket, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.list_default_object_access_controls bucket: bucket, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.list_default_object_access_controls ::Google::Storage::V1::ListDefaultObjectAccessControlsRequest.new(bucket: bucket, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.list_default_object_access_controls({ bucket: bucket, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.list_default_object_access_controls(::Google::Storage::V1::ListDefaultObjectAccessControlsRequest.new(bucket: bucket, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, list_default_object_access_controls_client_stub.call_rpc_count
    end
  end

  def test_patch_default_object_access_control
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::ObjectAccessControl.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    entity = "hello world"
    object_access_control = {}
    update_mask = {}
    common_request_params = {}

    patch_default_object_access_control_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :patch_default_object_access_control, name
      assert_kind_of ::Google::Storage::V1::PatchDefaultObjectAccessControlRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal "hello world", request["entity"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::ObjectAccessControl), request["object_access_control"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::FieldMask), request["update_mask"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, patch_default_object_access_control_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.patch_default_object_access_control({ bucket: bucket, entity: entity, object_access_control: object_access_control, update_mask: update_mask, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.patch_default_object_access_control bucket: bucket, entity: entity, object_access_control: object_access_control, update_mask: update_mask, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.patch_default_object_access_control ::Google::Storage::V1::PatchDefaultObjectAccessControlRequest.new(bucket: bucket, entity: entity, object_access_control: object_access_control, update_mask: update_mask, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.patch_default_object_access_control({ bucket: bucket, entity: entity, object_access_control: object_access_control, update_mask: update_mask, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.patch_default_object_access_control(::Google::Storage::V1::PatchDefaultObjectAccessControlRequest.new(bucket: bucket, entity: entity, object_access_control: object_access_control, update_mask: update_mask, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, patch_default_object_access_control_client_stub.call_rpc_count
    end
  end

  def test_update_default_object_access_control
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::ObjectAccessControl.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    entity = "hello world"
    object_access_control = {}
    common_request_params = {}

    update_default_object_access_control_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :update_default_object_access_control, name
      assert_kind_of ::Google::Storage::V1::UpdateDefaultObjectAccessControlRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal "hello world", request["entity"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::ObjectAccessControl), request["object_access_control"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, update_default_object_access_control_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.update_default_object_access_control({ bucket: bucket, entity: entity, object_access_control: object_access_control, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.update_default_object_access_control bucket: bucket, entity: entity, object_access_control: object_access_control, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.update_default_object_access_control ::Google::Storage::V1::UpdateDefaultObjectAccessControlRequest.new(bucket: bucket, entity: entity, object_access_control: object_access_control, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.update_default_object_access_control({ bucket: bucket, entity: entity, object_access_control: object_access_control, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.update_default_object_access_control(::Google::Storage::V1::UpdateDefaultObjectAccessControlRequest.new(bucket: bucket, entity: entity, object_access_control: object_access_control, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, update_default_object_access_control_client_stub.call_rpc_count
    end
  end

  def test_delete_notification
    # Create GRPC objects.
    grpc_response = ::Google::Protobuf::Empty.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    notification = "hello world"
    common_request_params = {}

    delete_notification_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :delete_notification, name
      assert_kind_of ::Google::Storage::V1::DeleteNotificationRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal "hello world", request["notification"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, delete_notification_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.delete_notification({ bucket: bucket, notification: notification, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.delete_notification bucket: bucket, notification: notification, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.delete_notification ::Google::Storage::V1::DeleteNotificationRequest.new(bucket: bucket, notification: notification, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.delete_notification({ bucket: bucket, notification: notification, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.delete_notification(::Google::Storage::V1::DeleteNotificationRequest.new(bucket: bucket, notification: notification, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, delete_notification_client_stub.call_rpc_count
    end
  end

  def test_get_notification
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::Notification.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    notification = "hello world"
    common_request_params = {}

    get_notification_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :get_notification, name
      assert_kind_of ::Google::Storage::V1::GetNotificationRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal "hello world", request["notification"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, get_notification_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.get_notification({ bucket: bucket, notification: notification, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.get_notification bucket: bucket, notification: notification, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.get_notification ::Google::Storage::V1::GetNotificationRequest.new(bucket: bucket, notification: notification, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.get_notification({ bucket: bucket, notification: notification, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.get_notification(::Google::Storage::V1::GetNotificationRequest.new(bucket: bucket, notification: notification, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, get_notification_client_stub.call_rpc_count
    end
  end

  def test_insert_notification
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::Notification.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    notification = {}
    common_request_params = {}

    insert_notification_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :insert_notification, name
      assert_kind_of ::Google::Storage::V1::InsertNotificationRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::Notification), request["notification"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, insert_notification_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.insert_notification({ bucket: bucket, notification: notification, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.insert_notification bucket: bucket, notification: notification, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.insert_notification ::Google::Storage::V1::InsertNotificationRequest.new(bucket: bucket, notification: notification, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.insert_notification({ bucket: bucket, notification: notification, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.insert_notification(::Google::Storage::V1::InsertNotificationRequest.new(bucket: bucket, notification: notification, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, insert_notification_client_stub.call_rpc_count
    end
  end

  def test_list_notifications
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::ListNotificationsResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    common_request_params = {}

    list_notifications_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :list_notifications, name
      assert_kind_of ::Google::Storage::V1::ListNotificationsRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, list_notifications_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.list_notifications({ bucket: bucket, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.list_notifications bucket: bucket, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.list_notifications ::Google::Storage::V1::ListNotificationsRequest.new(bucket: bucket, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.list_notifications({ bucket: bucket, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.list_notifications(::Google::Storage::V1::ListNotificationsRequest.new(bucket: bucket, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, list_notifications_client_stub.call_rpc_count
    end
  end

  def test_delete_object_access_control
    # Create GRPC objects.
    grpc_response = ::Google::Protobuf::Empty.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    entity = "hello world"
    object = "hello world"
    generation = 42
    common_request_params = {}

    delete_object_access_control_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :delete_object_access_control, name
      assert_kind_of ::Google::Storage::V1::DeleteObjectAccessControlRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal "hello world", request["entity"]
      assert_equal "hello world", request["object"]
      assert_equal 42, request["generation"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, delete_object_access_control_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.delete_object_access_control({ bucket: bucket, entity: entity, object: object, generation: generation, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.delete_object_access_control bucket: bucket, entity: entity, object: object, generation: generation, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.delete_object_access_control ::Google::Storage::V1::DeleteObjectAccessControlRequest.new(bucket: bucket, entity: entity, object: object, generation: generation, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.delete_object_access_control({ bucket: bucket, entity: entity, object: object, generation: generation, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.delete_object_access_control(::Google::Storage::V1::DeleteObjectAccessControlRequest.new(bucket: bucket, entity: entity, object: object, generation: generation, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, delete_object_access_control_client_stub.call_rpc_count
    end
  end

  def test_get_object_access_control
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::ObjectAccessControl.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    entity = "hello world"
    object = "hello world"
    generation = 42
    common_request_params = {}

    get_object_access_control_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :get_object_access_control, name
      assert_kind_of ::Google::Storage::V1::GetObjectAccessControlRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal "hello world", request["entity"]
      assert_equal "hello world", request["object"]
      assert_equal 42, request["generation"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, get_object_access_control_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.get_object_access_control({ bucket: bucket, entity: entity, object: object, generation: generation, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.get_object_access_control bucket: bucket, entity: entity, object: object, generation: generation, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.get_object_access_control ::Google::Storage::V1::GetObjectAccessControlRequest.new(bucket: bucket, entity: entity, object: object, generation: generation, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.get_object_access_control({ bucket: bucket, entity: entity, object: object, generation: generation, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.get_object_access_control(::Google::Storage::V1::GetObjectAccessControlRequest.new(bucket: bucket, entity: entity, object: object, generation: generation, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, get_object_access_control_client_stub.call_rpc_count
    end
  end

  def test_insert_object_access_control
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::ObjectAccessControl.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    object = "hello world"
    generation = 42
    object_access_control = {}
    common_request_params = {}

    insert_object_access_control_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :insert_object_access_control, name
      assert_kind_of ::Google::Storage::V1::InsertObjectAccessControlRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal "hello world", request["object"]
      assert_equal 42, request["generation"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::ObjectAccessControl), request["object_access_control"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, insert_object_access_control_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.insert_object_access_control({ bucket: bucket, object: object, generation: generation, object_access_control: object_access_control, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.insert_object_access_control bucket: bucket, object: object, generation: generation, object_access_control: object_access_control, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.insert_object_access_control ::Google::Storage::V1::InsertObjectAccessControlRequest.new(bucket: bucket, object: object, generation: generation, object_access_control: object_access_control, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.insert_object_access_control({ bucket: bucket, object: object, generation: generation, object_access_control: object_access_control, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.insert_object_access_control(::Google::Storage::V1::InsertObjectAccessControlRequest.new(bucket: bucket, object: object, generation: generation, object_access_control: object_access_control, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, insert_object_access_control_client_stub.call_rpc_count
    end
  end

  def test_list_object_access_controls
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::ListObjectAccessControlsResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    object = "hello world"
    generation = 42
    common_request_params = {}

    list_object_access_controls_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :list_object_access_controls, name
      assert_kind_of ::Google::Storage::V1::ListObjectAccessControlsRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal "hello world", request["object"]
      assert_equal 42, request["generation"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, list_object_access_controls_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.list_object_access_controls({ bucket: bucket, object: object, generation: generation, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.list_object_access_controls bucket: bucket, object: object, generation: generation, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.list_object_access_controls ::Google::Storage::V1::ListObjectAccessControlsRequest.new(bucket: bucket, object: object, generation: generation, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.list_object_access_controls({ bucket: bucket, object: object, generation: generation, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.list_object_access_controls(::Google::Storage::V1::ListObjectAccessControlsRequest.new(bucket: bucket, object: object, generation: generation, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, list_object_access_controls_client_stub.call_rpc_count
    end
  end

  def test_patch_object_access_control
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::ObjectAccessControl.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    entity = "hello world"
    object = "hello world"
    generation = 42
    object_access_control = {}
    common_request_params = {}
    update_mask = {}

    patch_object_access_control_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :patch_object_access_control, name
      assert_kind_of ::Google::Storage::V1::PatchObjectAccessControlRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal "hello world", request["entity"]
      assert_equal "hello world", request["object"]
      assert_equal 42, request["generation"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::ObjectAccessControl), request["object_access_control"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::FieldMask), request["update_mask"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, patch_object_access_control_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.patch_object_access_control({ bucket: bucket, entity: entity, object: object, generation: generation, object_access_control: object_access_control, common_request_params: common_request_params, update_mask: update_mask }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.patch_object_access_control bucket: bucket, entity: entity, object: object, generation: generation, object_access_control: object_access_control, common_request_params: common_request_params, update_mask: update_mask do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.patch_object_access_control ::Google::Storage::V1::PatchObjectAccessControlRequest.new(bucket: bucket, entity: entity, object: object, generation: generation, object_access_control: object_access_control, common_request_params: common_request_params, update_mask: update_mask) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.patch_object_access_control({ bucket: bucket, entity: entity, object: object, generation: generation, object_access_control: object_access_control, common_request_params: common_request_params, update_mask: update_mask }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.patch_object_access_control(::Google::Storage::V1::PatchObjectAccessControlRequest.new(bucket: bucket, entity: entity, object: object, generation: generation, object_access_control: object_access_control, common_request_params: common_request_params, update_mask: update_mask), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, patch_object_access_control_client_stub.call_rpc_count
    end
  end

  def test_update_object_access_control
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::ObjectAccessControl.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    entity = "hello world"
    object = "hello world"
    generation = 42
    object_access_control = {}
    common_request_params = {}
    update_mask = {}

    update_object_access_control_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :update_object_access_control, name
      assert_kind_of ::Google::Storage::V1::UpdateObjectAccessControlRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal "hello world", request["entity"]
      assert_equal "hello world", request["object"]
      assert_equal 42, request["generation"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::ObjectAccessControl), request["object_access_control"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::FieldMask), request["update_mask"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, update_object_access_control_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.update_object_access_control({ bucket: bucket, entity: entity, object: object, generation: generation, object_access_control: object_access_control, common_request_params: common_request_params, update_mask: update_mask }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.update_object_access_control bucket: bucket, entity: entity, object: object, generation: generation, object_access_control: object_access_control, common_request_params: common_request_params, update_mask: update_mask do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.update_object_access_control ::Google::Storage::V1::UpdateObjectAccessControlRequest.new(bucket: bucket, entity: entity, object: object, generation: generation, object_access_control: object_access_control, common_request_params: common_request_params, update_mask: update_mask) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.update_object_access_control({ bucket: bucket, entity: entity, object: object, generation: generation, object_access_control: object_access_control, common_request_params: common_request_params, update_mask: update_mask }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.update_object_access_control(::Google::Storage::V1::UpdateObjectAccessControlRequest.new(bucket: bucket, entity: entity, object: object, generation: generation, object_access_control: object_access_control, common_request_params: common_request_params, update_mask: update_mask), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, update_object_access_control_client_stub.call_rpc_count
    end
  end

  def test_compose_object
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::Object.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    destination_bucket = "hello world"
    destination_object = "hello world"
    destination_predefined_acl = :PREDEFINED_OBJECT_ACL_UNSPECIFIED
    destination = {}
    source_objects = [{}]
    if_generation_match = {}
    if_metageneration_match = {}
    kms_key_name = "hello world"
    common_object_request_params = {}
    common_request_params = {}

    compose_object_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :compose_object, name
      assert_kind_of ::Google::Storage::V1::ComposeObjectRequest, request
      assert_equal "hello world", request["destination_bucket"]
      assert_equal "hello world", request["destination_object"]
      assert_equal :PREDEFINED_OBJECT_ACL_UNSPECIFIED, request["destination_predefined_acl"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::Object), request["destination"]
      assert_kind_of ::Google::Storage::V1::ComposeObjectRequest::SourceObjects, request["source_objects"].first
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_generation_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_metageneration_match"]
      assert_equal "hello world", request["kms_key_name"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonObjectRequestParams), request["common_object_request_params"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, compose_object_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.compose_object({ destination_bucket: destination_bucket, destination_object: destination_object, destination_predefined_acl: destination_predefined_acl, destination: destination, source_objects: source_objects, if_generation_match: if_generation_match, if_metageneration_match: if_metageneration_match, kms_key_name: kms_key_name, common_object_request_params: common_object_request_params, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.compose_object destination_bucket: destination_bucket, destination_object: destination_object, destination_predefined_acl: destination_predefined_acl, destination: destination, source_objects: source_objects, if_generation_match: if_generation_match, if_metageneration_match: if_metageneration_match, kms_key_name: kms_key_name, common_object_request_params: common_object_request_params, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.compose_object ::Google::Storage::V1::ComposeObjectRequest.new(destination_bucket: destination_bucket, destination_object: destination_object, destination_predefined_acl: destination_predefined_acl, destination: destination, source_objects: source_objects, if_generation_match: if_generation_match, if_metageneration_match: if_metageneration_match, kms_key_name: kms_key_name, common_object_request_params: common_object_request_params, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.compose_object({ destination_bucket: destination_bucket, destination_object: destination_object, destination_predefined_acl: destination_predefined_acl, destination: destination, source_objects: source_objects, if_generation_match: if_generation_match, if_metageneration_match: if_metageneration_match, kms_key_name: kms_key_name, common_object_request_params: common_object_request_params, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.compose_object(::Google::Storage::V1::ComposeObjectRequest.new(destination_bucket: destination_bucket, destination_object: destination_object, destination_predefined_acl: destination_predefined_acl, destination: destination, source_objects: source_objects, if_generation_match: if_generation_match, if_metageneration_match: if_metageneration_match, kms_key_name: kms_key_name, common_object_request_params: common_object_request_params, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, compose_object_client_stub.call_rpc_count
    end
  end

  def test_copy_object
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::Object.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    destination_bucket = "hello world"
    destination_object = "hello world"
    destination_predefined_acl = :PREDEFINED_OBJECT_ACL_UNSPECIFIED
    if_generation_match = {}
    if_generation_not_match = {}
    if_metageneration_match = {}
    if_metageneration_not_match = {}
    if_source_generation_match = {}
    if_source_generation_not_match = {}
    if_source_metageneration_match = {}
    if_source_metageneration_not_match = {}
    projection = :PROJECTION_UNSPECIFIED
    source_bucket = "hello world"
    source_object = "hello world"
    source_generation = 42
    destination = {}
    destination_kms_key_name = "hello world"
    common_object_request_params = {}
    common_request_params = {}

    copy_object_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :copy_object, name
      assert_kind_of ::Google::Storage::V1::CopyObjectRequest, request
      assert_equal "hello world", request["destination_bucket"]
      assert_equal "hello world", request["destination_object"]
      assert_equal :PREDEFINED_OBJECT_ACL_UNSPECIFIED, request["destination_predefined_acl"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_generation_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_generation_not_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_metageneration_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_metageneration_not_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_source_generation_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_source_generation_not_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_source_metageneration_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_source_metageneration_not_match"]
      assert_equal :PROJECTION_UNSPECIFIED, request["projection"]
      assert_equal "hello world", request["source_bucket"]
      assert_equal "hello world", request["source_object"]
      assert_equal 42, request["source_generation"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::Object), request["destination"]
      assert_equal "hello world", request["destination_kms_key_name"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonObjectRequestParams), request["common_object_request_params"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, copy_object_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.copy_object({ destination_bucket: destination_bucket, destination_object: destination_object, destination_predefined_acl: destination_predefined_acl, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, if_source_generation_match: if_source_generation_match, if_source_generation_not_match: if_source_generation_not_match, if_source_metageneration_match: if_source_metageneration_match, if_source_metageneration_not_match: if_source_metageneration_not_match, projection: projection, source_bucket: source_bucket, source_object: source_object, source_generation: source_generation, destination: destination, destination_kms_key_name: destination_kms_key_name, common_object_request_params: common_object_request_params, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.copy_object destination_bucket: destination_bucket, destination_object: destination_object, destination_predefined_acl: destination_predefined_acl, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, if_source_generation_match: if_source_generation_match, if_source_generation_not_match: if_source_generation_not_match, if_source_metageneration_match: if_source_metageneration_match, if_source_metageneration_not_match: if_source_metageneration_not_match, projection: projection, source_bucket: source_bucket, source_object: source_object, source_generation: source_generation, destination: destination, destination_kms_key_name: destination_kms_key_name, common_object_request_params: common_object_request_params, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.copy_object ::Google::Storage::V1::CopyObjectRequest.new(destination_bucket: destination_bucket, destination_object: destination_object, destination_predefined_acl: destination_predefined_acl, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, if_source_generation_match: if_source_generation_match, if_source_generation_not_match: if_source_generation_not_match, if_source_metageneration_match: if_source_metageneration_match, if_source_metageneration_not_match: if_source_metageneration_not_match, projection: projection, source_bucket: source_bucket, source_object: source_object, source_generation: source_generation, destination: destination, destination_kms_key_name: destination_kms_key_name, common_object_request_params: common_object_request_params, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.copy_object({ destination_bucket: destination_bucket, destination_object: destination_object, destination_predefined_acl: destination_predefined_acl, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, if_source_generation_match: if_source_generation_match, if_source_generation_not_match: if_source_generation_not_match, if_source_metageneration_match: if_source_metageneration_match, if_source_metageneration_not_match: if_source_metageneration_not_match, projection: projection, source_bucket: source_bucket, source_object: source_object, source_generation: source_generation, destination: destination, destination_kms_key_name: destination_kms_key_name, common_object_request_params: common_object_request_params, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.copy_object(::Google::Storage::V1::CopyObjectRequest.new(destination_bucket: destination_bucket, destination_object: destination_object, destination_predefined_acl: destination_predefined_acl, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, if_source_generation_match: if_source_generation_match, if_source_generation_not_match: if_source_generation_not_match, if_source_metageneration_match: if_source_metageneration_match, if_source_metageneration_not_match: if_source_metageneration_not_match, projection: projection, source_bucket: source_bucket, source_object: source_object, source_generation: source_generation, destination: destination, destination_kms_key_name: destination_kms_key_name, common_object_request_params: common_object_request_params, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, copy_object_client_stub.call_rpc_count
    end
  end

  def test_delete_object
    # Create GRPC objects.
    grpc_response = ::Google::Protobuf::Empty.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    object = "hello world"
    upload_id = "hello world"
    generation = 42
    if_generation_match = {}
    if_generation_not_match = {}
    if_metageneration_match = {}
    if_metageneration_not_match = {}
    common_object_request_params = {}
    common_request_params = {}

    delete_object_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :delete_object, name
      assert_kind_of ::Google::Storage::V1::DeleteObjectRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal "hello world", request["object"]
      assert_equal "hello world", request["upload_id"]
      assert_equal 42, request["generation"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_generation_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_generation_not_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_metageneration_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_metageneration_not_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonObjectRequestParams), request["common_object_request_params"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, delete_object_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.delete_object({ bucket: bucket, object: object, upload_id: upload_id, generation: generation, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, common_object_request_params: common_object_request_params, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.delete_object bucket: bucket, object: object, upload_id: upload_id, generation: generation, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, common_object_request_params: common_object_request_params, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.delete_object ::Google::Storage::V1::DeleteObjectRequest.new(bucket: bucket, object: object, upload_id: upload_id, generation: generation, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, common_object_request_params: common_object_request_params, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.delete_object({ bucket: bucket, object: object, upload_id: upload_id, generation: generation, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, common_object_request_params: common_object_request_params, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.delete_object(::Google::Storage::V1::DeleteObjectRequest.new(bucket: bucket, object: object, upload_id: upload_id, generation: generation, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, common_object_request_params: common_object_request_params, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, delete_object_client_stub.call_rpc_count
    end
  end

  def test_get_object
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::Object.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    object = "hello world"
    generation = 42
    if_generation_match = {}
    if_generation_not_match = {}
    if_metageneration_match = {}
    if_metageneration_not_match = {}
    projection = :PROJECTION_UNSPECIFIED
    common_object_request_params = {}
    common_request_params = {}

    get_object_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :get_object, name
      assert_kind_of ::Google::Storage::V1::GetObjectRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal "hello world", request["object"]
      assert_equal 42, request["generation"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_generation_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_generation_not_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_metageneration_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_metageneration_not_match"]
      assert_equal :PROJECTION_UNSPECIFIED, request["projection"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonObjectRequestParams), request["common_object_request_params"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, get_object_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.get_object({ bucket: bucket, object: object, generation: generation, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, projection: projection, common_object_request_params: common_object_request_params, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.get_object bucket: bucket, object: object, generation: generation, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, projection: projection, common_object_request_params: common_object_request_params, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.get_object ::Google::Storage::V1::GetObjectRequest.new(bucket: bucket, object: object, generation: generation, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, projection: projection, common_object_request_params: common_object_request_params, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.get_object({ bucket: bucket, object: object, generation: generation, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, projection: projection, common_object_request_params: common_object_request_params, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.get_object(::Google::Storage::V1::GetObjectRequest.new(bucket: bucket, object: object, generation: generation, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, projection: projection, common_object_request_params: common_object_request_params, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, get_object_client_stub.call_rpc_count
    end
  end

  def test_get_object_media
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::GetObjectMediaResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a server streaming method.
    bucket = "hello world"
    object = "hello world"
    generation = 42
    read_offset = 42
    read_limit = 42
    if_generation_match = {}
    if_generation_not_match = {}
    if_metageneration_match = {}
    if_metageneration_not_match = {}
    common_object_request_params = {}
    common_request_params = {}

    get_object_media_client_stub = ClientStub.new [grpc_response].to_enum, grpc_operation do |name, request, options:|
      assert_equal :get_object_media, name
      assert_kind_of ::Google::Storage::V1::GetObjectMediaRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal "hello world", request["object"]
      assert_equal 42, request["generation"]
      assert_equal 42, request["read_offset"]
      assert_equal 42, request["read_limit"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_generation_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_generation_not_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_metageneration_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_metageneration_not_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonObjectRequestParams), request["common_object_request_params"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, get_object_media_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.get_object_media({ bucket: bucket, object: object, generation: generation, read_offset: read_offset, read_limit: read_limit, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, common_object_request_params: common_object_request_params, common_request_params: common_request_params }) do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Storage::V1::GetObjectMediaResponse, r
        end
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.get_object_media bucket: bucket, object: object, generation: generation, read_offset: read_offset, read_limit: read_limit, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, common_object_request_params: common_object_request_params, common_request_params: common_request_params do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Storage::V1::GetObjectMediaResponse, r
        end
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.get_object_media ::Google::Storage::V1::GetObjectMediaRequest.new(bucket: bucket, object: object, generation: generation, read_offset: read_offset, read_limit: read_limit, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, common_object_request_params: common_object_request_params, common_request_params: common_request_params) do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Storage::V1::GetObjectMediaResponse, r
        end
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.get_object_media({ bucket: bucket, object: object, generation: generation, read_offset: read_offset, read_limit: read_limit, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, common_object_request_params: common_object_request_params, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Storage::V1::GetObjectMediaResponse, r
        end
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.get_object_media(::Google::Storage::V1::GetObjectMediaRequest.new(bucket: bucket, object: object, generation: generation, read_offset: read_offset, read_limit: read_limit, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, common_object_request_params: common_object_request_params, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Storage::V1::GetObjectMediaResponse, r
        end
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, get_object_media_client_stub.call_rpc_count
    end
  end

  def test_insert_object
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::Object.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a client streaming method.
    upload_id = "hello world"
    write_offset = 42
    checksummed_data = {}
    object_checksums = {}
    finish_write = true
    common_object_request_params = {}
    common_request_params = {}

    insert_object_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :insert_object, name
      assert_kind_of Enumerable, request
      refute_nil options
      request
    end

    Gapic::ServiceStub.stub :new, insert_object_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use enumerable object with hash and protobuf object.
      request_hash = { upload_id: upload_id, write_offset: write_offset, checksummed_data: checksummed_data, object_checksums: object_checksums, finish_write: finish_write, common_object_request_params: common_object_request_params, common_request_params: common_request_params }
      request_proto = ::Google::Storage::V1::InsertObjectRequest.new upload_id: upload_id, write_offset: write_offset, checksummed_data: checksummed_data, object_checksums: object_checksums, finish_write: finish_write, common_object_request_params: common_object_request_params, common_request_params: common_request_params
      enum_input = [request_hash, request_proto].to_enum
      client.insert_object enum_input do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use stream input object (from gapic-common).
      request_hash = { upload_id: upload_id, write_offset: write_offset, checksummed_data: checksummed_data, object_checksums: object_checksums, finish_write: finish_write, common_object_request_params: common_object_request_params, common_request_params: common_request_params }
      request_proto = ::Google::Storage::V1::InsertObjectRequest.new upload_id: upload_id, write_offset: write_offset, checksummed_data: checksummed_data, object_checksums: object_checksums, finish_write: finish_write, common_object_request_params: common_object_request_params, common_request_params: common_request_params
      stream_input = Gapic::StreamInput.new
      client.insert_object stream_input do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end
      stream_input << request_hash
      stream_input << request_proto
      stream_input.close

      # Use enumerable object with hash and protobuf object with options.
      request_hash = { upload_id: upload_id, write_offset: write_offset, checksummed_data: checksummed_data, object_checksums: object_checksums, finish_write: finish_write, common_object_request_params: common_object_request_params, common_request_params: common_request_params }
      request_proto = ::Google::Storage::V1::InsertObjectRequest.new upload_id: upload_id, write_offset: write_offset, checksummed_data: checksummed_data, object_checksums: object_checksums, finish_write: finish_write, common_object_request_params: common_object_request_params, common_request_params: common_request_params
      enum_input = [request_hash, request_proto].to_enum
      client.insert_object enum_input, grpc_options do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use stream input object (from gapic-common) with options.
      request_hash = { upload_id: upload_id, write_offset: write_offset, checksummed_data: checksummed_data, object_checksums: object_checksums, finish_write: finish_write, common_object_request_params: common_object_request_params, common_request_params: common_request_params }
      request_proto = ::Google::Storage::V1::InsertObjectRequest.new upload_id: upload_id, write_offset: write_offset, checksummed_data: checksummed_data, object_checksums: object_checksums, finish_write: finish_write, common_object_request_params: common_object_request_params, common_request_params: common_request_params
      stream_input = Gapic::StreamInput.new
      client.insert_object stream_input, grpc_options do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end
      stream_input << request_hash
      stream_input << request_proto
      stream_input.close

      # Verify method calls
      assert_equal 4, insert_object_client_stub.call_rpc_count
      insert_object_client_stub.requests.each do |request|
        request.to_a.each do |r|
          assert_kind_of ::Google::Storage::V1::InsertObjectRequest, r
          assert_equal "hello world", r["upload_id"]
          assert_equal :upload_id, r.first_message
          assert_equal 42, r["write_offset"]
          assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::ChecksummedData), r["checksummed_data"]
          assert_equal :checksummed_data, r.data
          assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::ObjectChecksums), r["object_checksums"]
          assert_equal true, r["finish_write"]
          assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonObjectRequestParams), r["common_object_request_params"]
          assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), r["common_request_params"]
        end
      end
    end
  end

  def test_list_objects
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::ListObjectsResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    delimiter = "hello world"
    include_trailing_delimiter = true
    max_results = 42
    page_token = "hello world"
    prefix = "hello world"
    projection = :PROJECTION_UNSPECIFIED
    versions = true
    common_request_params = {}

    list_objects_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :list_objects, name
      assert_kind_of ::Google::Storage::V1::ListObjectsRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal "hello world", request["delimiter"]
      assert_equal true, request["include_trailing_delimiter"]
      assert_equal 42, request["max_results"]
      assert_equal "hello world", request["page_token"]
      assert_equal "hello world", request["prefix"]
      assert_equal :PROJECTION_UNSPECIFIED, request["projection"]
      assert_equal true, request["versions"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, list_objects_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.list_objects({ bucket: bucket, delimiter: delimiter, include_trailing_delimiter: include_trailing_delimiter, max_results: max_results, page_token: page_token, prefix: prefix, projection: projection, versions: versions, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.list_objects bucket: bucket, delimiter: delimiter, include_trailing_delimiter: include_trailing_delimiter, max_results: max_results, page_token: page_token, prefix: prefix, projection: projection, versions: versions, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.list_objects ::Google::Storage::V1::ListObjectsRequest.new(bucket: bucket, delimiter: delimiter, include_trailing_delimiter: include_trailing_delimiter, max_results: max_results, page_token: page_token, prefix: prefix, projection: projection, versions: versions, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.list_objects({ bucket: bucket, delimiter: delimiter, include_trailing_delimiter: include_trailing_delimiter, max_results: max_results, page_token: page_token, prefix: prefix, projection: projection, versions: versions, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.list_objects(::Google::Storage::V1::ListObjectsRequest.new(bucket: bucket, delimiter: delimiter, include_trailing_delimiter: include_trailing_delimiter, max_results: max_results, page_token: page_token, prefix: prefix, projection: projection, versions: versions, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, list_objects_client_stub.call_rpc_count
    end
  end

  def test_rewrite_object
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::RewriteResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    destination_bucket = "hello world"
    destination_object = "hello world"
    destination_kms_key_name = "hello world"
    destination_predefined_acl = :PREDEFINED_OBJECT_ACL_UNSPECIFIED
    if_generation_match = {}
    if_generation_not_match = {}
    if_metageneration_match = {}
    if_metageneration_not_match = {}
    if_source_generation_match = {}
    if_source_generation_not_match = {}
    if_source_metageneration_match = {}
    if_source_metageneration_not_match = {}
    max_bytes_rewritten_per_call = 42
    projection = :PROJECTION_UNSPECIFIED
    rewrite_token = "hello world"
    source_bucket = "hello world"
    source_object = "hello world"
    source_generation = 42
    object = {}
    copy_source_encryption_algorithm = "hello world"
    copy_source_encryption_key = "hello world"
    copy_source_encryption_key_sha256 = "hello world"
    common_object_request_params = {}
    common_request_params = {}

    rewrite_object_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :rewrite_object, name
      assert_kind_of ::Google::Storage::V1::RewriteObjectRequest, request
      assert_equal "hello world", request["destination_bucket"]
      assert_equal "hello world", request["destination_object"]
      assert_equal "hello world", request["destination_kms_key_name"]
      assert_equal :PREDEFINED_OBJECT_ACL_UNSPECIFIED, request["destination_predefined_acl"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_generation_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_generation_not_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_metageneration_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_metageneration_not_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_source_generation_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_source_generation_not_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_source_metageneration_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_source_metageneration_not_match"]
      assert_equal 42, request["max_bytes_rewritten_per_call"]
      assert_equal :PROJECTION_UNSPECIFIED, request["projection"]
      assert_equal "hello world", request["rewrite_token"]
      assert_equal "hello world", request["source_bucket"]
      assert_equal "hello world", request["source_object"]
      assert_equal 42, request["source_generation"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::Object), request["object"]
      assert_equal "hello world", request["copy_source_encryption_algorithm"]
      assert_equal "hello world", request["copy_source_encryption_key"]
      assert_equal "hello world", request["copy_source_encryption_key_sha256"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonObjectRequestParams), request["common_object_request_params"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, rewrite_object_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.rewrite_object({ destination_bucket: destination_bucket, destination_object: destination_object, destination_kms_key_name: destination_kms_key_name, destination_predefined_acl: destination_predefined_acl, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, if_source_generation_match: if_source_generation_match, if_source_generation_not_match: if_source_generation_not_match, if_source_metageneration_match: if_source_metageneration_match, if_source_metageneration_not_match: if_source_metageneration_not_match, max_bytes_rewritten_per_call: max_bytes_rewritten_per_call, projection: projection, rewrite_token: rewrite_token, source_bucket: source_bucket, source_object: source_object, source_generation: source_generation, object: object, copy_source_encryption_algorithm: copy_source_encryption_algorithm, copy_source_encryption_key: copy_source_encryption_key, copy_source_encryption_key_sha256: copy_source_encryption_key_sha256, common_object_request_params: common_object_request_params, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.rewrite_object destination_bucket: destination_bucket, destination_object: destination_object, destination_kms_key_name: destination_kms_key_name, destination_predefined_acl: destination_predefined_acl, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, if_source_generation_match: if_source_generation_match, if_source_generation_not_match: if_source_generation_not_match, if_source_metageneration_match: if_source_metageneration_match, if_source_metageneration_not_match: if_source_metageneration_not_match, max_bytes_rewritten_per_call: max_bytes_rewritten_per_call, projection: projection, rewrite_token: rewrite_token, source_bucket: source_bucket, source_object: source_object, source_generation: source_generation, object: object, copy_source_encryption_algorithm: copy_source_encryption_algorithm, copy_source_encryption_key: copy_source_encryption_key, copy_source_encryption_key_sha256: copy_source_encryption_key_sha256, common_object_request_params: common_object_request_params, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.rewrite_object ::Google::Storage::V1::RewriteObjectRequest.new(destination_bucket: destination_bucket, destination_object: destination_object, destination_kms_key_name: destination_kms_key_name, destination_predefined_acl: destination_predefined_acl, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, if_source_generation_match: if_source_generation_match, if_source_generation_not_match: if_source_generation_not_match, if_source_metageneration_match: if_source_metageneration_match, if_source_metageneration_not_match: if_source_metageneration_not_match, max_bytes_rewritten_per_call: max_bytes_rewritten_per_call, projection: projection, rewrite_token: rewrite_token, source_bucket: source_bucket, source_object: source_object, source_generation: source_generation, object: object, copy_source_encryption_algorithm: copy_source_encryption_algorithm, copy_source_encryption_key: copy_source_encryption_key, copy_source_encryption_key_sha256: copy_source_encryption_key_sha256, common_object_request_params: common_object_request_params, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.rewrite_object({ destination_bucket: destination_bucket, destination_object: destination_object, destination_kms_key_name: destination_kms_key_name, destination_predefined_acl: destination_predefined_acl, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, if_source_generation_match: if_source_generation_match, if_source_generation_not_match: if_source_generation_not_match, if_source_metageneration_match: if_source_metageneration_match, if_source_metageneration_not_match: if_source_metageneration_not_match, max_bytes_rewritten_per_call: max_bytes_rewritten_per_call, projection: projection, rewrite_token: rewrite_token, source_bucket: source_bucket, source_object: source_object, source_generation: source_generation, object: object, copy_source_encryption_algorithm: copy_source_encryption_algorithm, copy_source_encryption_key: copy_source_encryption_key, copy_source_encryption_key_sha256: copy_source_encryption_key_sha256, common_object_request_params: common_object_request_params, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.rewrite_object(::Google::Storage::V1::RewriteObjectRequest.new(destination_bucket: destination_bucket, destination_object: destination_object, destination_kms_key_name: destination_kms_key_name, destination_predefined_acl: destination_predefined_acl, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, if_source_generation_match: if_source_generation_match, if_source_generation_not_match: if_source_generation_not_match, if_source_metageneration_match: if_source_metageneration_match, if_source_metageneration_not_match: if_source_metageneration_not_match, max_bytes_rewritten_per_call: max_bytes_rewritten_per_call, projection: projection, rewrite_token: rewrite_token, source_bucket: source_bucket, source_object: source_object, source_generation: source_generation, object: object, copy_source_encryption_algorithm: copy_source_encryption_algorithm, copy_source_encryption_key: copy_source_encryption_key, copy_source_encryption_key_sha256: copy_source_encryption_key_sha256, common_object_request_params: common_object_request_params, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, rewrite_object_client_stub.call_rpc_count
    end
  end

  def test_start_resumable_write
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::StartResumableWriteResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    insert_object_spec = {}
    common_object_request_params = {}
    common_request_params = {}

    start_resumable_write_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :start_resumable_write, name
      assert_kind_of ::Google::Storage::V1::StartResumableWriteRequest, request
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::InsertObjectSpec), request["insert_object_spec"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonObjectRequestParams), request["common_object_request_params"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, start_resumable_write_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.start_resumable_write({ insert_object_spec: insert_object_spec, common_object_request_params: common_object_request_params, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.start_resumable_write insert_object_spec: insert_object_spec, common_object_request_params: common_object_request_params, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.start_resumable_write ::Google::Storage::V1::StartResumableWriteRequest.new(insert_object_spec: insert_object_spec, common_object_request_params: common_object_request_params, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.start_resumable_write({ insert_object_spec: insert_object_spec, common_object_request_params: common_object_request_params, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.start_resumable_write(::Google::Storage::V1::StartResumableWriteRequest.new(insert_object_spec: insert_object_spec, common_object_request_params: common_object_request_params, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, start_resumable_write_client_stub.call_rpc_count
    end
  end

  def test_query_write_status
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::QueryWriteStatusResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    upload_id = "hello world"
    common_object_request_params = {}
    common_request_params = {}

    query_write_status_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :query_write_status, name
      assert_kind_of ::Google::Storage::V1::QueryWriteStatusRequest, request
      assert_equal "hello world", request["upload_id"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonObjectRequestParams), request["common_object_request_params"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, query_write_status_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.query_write_status({ upload_id: upload_id, common_object_request_params: common_object_request_params, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.query_write_status upload_id: upload_id, common_object_request_params: common_object_request_params, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.query_write_status ::Google::Storage::V1::QueryWriteStatusRequest.new(upload_id: upload_id, common_object_request_params: common_object_request_params, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.query_write_status({ upload_id: upload_id, common_object_request_params: common_object_request_params, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.query_write_status(::Google::Storage::V1::QueryWriteStatusRequest.new(upload_id: upload_id, common_object_request_params: common_object_request_params, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, query_write_status_client_stub.call_rpc_count
    end
  end

  def test_patch_object
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::Object.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    object = "hello world"
    generation = 42
    if_generation_match = {}
    if_generation_not_match = {}
    if_metageneration_match = {}
    if_metageneration_not_match = {}
    predefined_acl = :PREDEFINED_OBJECT_ACL_UNSPECIFIED
    projection = :PROJECTION_UNSPECIFIED
    metadata = {}
    update_mask = {}
    common_object_request_params = {}
    common_request_params = {}

    patch_object_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :patch_object, name
      assert_kind_of ::Google::Storage::V1::PatchObjectRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal "hello world", request["object"]
      assert_equal 42, request["generation"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_generation_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_generation_not_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_metageneration_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_metageneration_not_match"]
      assert_equal :PREDEFINED_OBJECT_ACL_UNSPECIFIED, request["predefined_acl"]
      assert_equal :PROJECTION_UNSPECIFIED, request["projection"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::Object), request["metadata"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::FieldMask), request["update_mask"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonObjectRequestParams), request["common_object_request_params"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, patch_object_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.patch_object({ bucket: bucket, object: object, generation: generation, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, projection: projection, metadata: metadata, update_mask: update_mask, common_object_request_params: common_object_request_params, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.patch_object bucket: bucket, object: object, generation: generation, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, projection: projection, metadata: metadata, update_mask: update_mask, common_object_request_params: common_object_request_params, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.patch_object ::Google::Storage::V1::PatchObjectRequest.new(bucket: bucket, object: object, generation: generation, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, projection: projection, metadata: metadata, update_mask: update_mask, common_object_request_params: common_object_request_params, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.patch_object({ bucket: bucket, object: object, generation: generation, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, projection: projection, metadata: metadata, update_mask: update_mask, common_object_request_params: common_object_request_params, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.patch_object(::Google::Storage::V1::PatchObjectRequest.new(bucket: bucket, object: object, generation: generation, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, projection: projection, metadata: metadata, update_mask: update_mask, common_object_request_params: common_object_request_params, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, patch_object_client_stub.call_rpc_count
    end
  end

  def test_update_object
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::Object.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    object = "hello world"
    generation = 42
    if_generation_match = {}
    if_generation_not_match = {}
    if_metageneration_match = {}
    if_metageneration_not_match = {}
    predefined_acl = :PREDEFINED_OBJECT_ACL_UNSPECIFIED
    projection = :PROJECTION_UNSPECIFIED
    metadata = {}
    common_object_request_params = {}
    common_request_params = {}

    update_object_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :update_object, name
      assert_kind_of ::Google::Storage::V1::UpdateObjectRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal "hello world", request["object"]
      assert_equal 42, request["generation"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_generation_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_generation_not_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_metageneration_match"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Int64Value), request["if_metageneration_not_match"]
      assert_equal :PREDEFINED_OBJECT_ACL_UNSPECIFIED, request["predefined_acl"]
      assert_equal :PROJECTION_UNSPECIFIED, request["projection"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::Object), request["metadata"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonObjectRequestParams), request["common_object_request_params"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, update_object_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.update_object({ bucket: bucket, object: object, generation: generation, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, projection: projection, metadata: metadata, common_object_request_params: common_object_request_params, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.update_object bucket: bucket, object: object, generation: generation, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, projection: projection, metadata: metadata, common_object_request_params: common_object_request_params, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.update_object ::Google::Storage::V1::UpdateObjectRequest.new(bucket: bucket, object: object, generation: generation, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, projection: projection, metadata: metadata, common_object_request_params: common_object_request_params, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.update_object({ bucket: bucket, object: object, generation: generation, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, projection: projection, metadata: metadata, common_object_request_params: common_object_request_params, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.update_object(::Google::Storage::V1::UpdateObjectRequest.new(bucket: bucket, object: object, generation: generation, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, projection: projection, metadata: metadata, common_object_request_params: common_object_request_params, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, update_object_client_stub.call_rpc_count
    end
  end

  def test_get_object_iam_policy
    # Create GRPC objects.
    grpc_response = ::Google::Iam::V1::Policy.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    iam_request = {}
    common_request_params = {}

    get_object_iam_policy_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :get_object_iam_policy, name
      assert_kind_of ::Google::Storage::V1::GetIamPolicyRequest, request
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Iam::V1::GetIamPolicyRequest), request["iam_request"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, get_object_iam_policy_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.get_object_iam_policy({ iam_request: iam_request, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.get_object_iam_policy iam_request: iam_request, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.get_object_iam_policy ::Google::Storage::V1::GetIamPolicyRequest.new(iam_request: iam_request, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.get_object_iam_policy({ iam_request: iam_request, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.get_object_iam_policy(::Google::Storage::V1::GetIamPolicyRequest.new(iam_request: iam_request, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, get_object_iam_policy_client_stub.call_rpc_count
    end
  end

  def test_set_object_iam_policy
    # Create GRPC objects.
    grpc_response = ::Google::Iam::V1::Policy.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    iam_request = {}
    common_request_params = {}

    set_object_iam_policy_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :set_object_iam_policy, name
      assert_kind_of ::Google::Storage::V1::SetIamPolicyRequest, request
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Iam::V1::SetIamPolicyRequest), request["iam_request"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, set_object_iam_policy_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.set_object_iam_policy({ iam_request: iam_request, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.set_object_iam_policy iam_request: iam_request, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.set_object_iam_policy ::Google::Storage::V1::SetIamPolicyRequest.new(iam_request: iam_request, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.set_object_iam_policy({ iam_request: iam_request, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.set_object_iam_policy(::Google::Storage::V1::SetIamPolicyRequest.new(iam_request: iam_request, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, set_object_iam_policy_client_stub.call_rpc_count
    end
  end

  def test_test_object_iam_permissions
    # Create GRPC objects.
    grpc_response = ::Google::Iam::V1::TestIamPermissionsResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    iam_request = {}
    common_request_params = {}

    test_object_iam_permissions_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :test_object_iam_permissions, name
      assert_kind_of ::Google::Storage::V1::TestIamPermissionsRequest, request
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Iam::V1::TestIamPermissionsRequest), request["iam_request"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, test_object_iam_permissions_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.test_object_iam_permissions({ iam_request: iam_request, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.test_object_iam_permissions iam_request: iam_request, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.test_object_iam_permissions ::Google::Storage::V1::TestIamPermissionsRequest.new(iam_request: iam_request, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.test_object_iam_permissions({ iam_request: iam_request, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.test_object_iam_permissions(::Google::Storage::V1::TestIamPermissionsRequest.new(iam_request: iam_request, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, test_object_iam_permissions_client_stub.call_rpc_count
    end
  end

  def test_watch_all_objects
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::Channel.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    bucket = "hello world"
    versions = true
    delimiter = "hello world"
    max_results = 42
    prefix = "hello world"
    include_trailing_delimiter = true
    page_token = "hello world"
    projection = :PROJECTION_UNSPECIFIED
    channel = {}
    common_request_params = {}

    watch_all_objects_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :watch_all_objects, name
      assert_kind_of ::Google::Storage::V1::WatchAllObjectsRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal true, request["versions"]
      assert_equal "hello world", request["delimiter"]
      assert_equal 42, request["max_results"]
      assert_equal "hello world", request["prefix"]
      assert_equal true, request["include_trailing_delimiter"]
      assert_equal "hello world", request["page_token"]
      assert_equal :PROJECTION_UNSPECIFIED, request["projection"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::Channel), request["channel"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, watch_all_objects_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.watch_all_objects({ bucket: bucket, versions: versions, delimiter: delimiter, max_results: max_results, prefix: prefix, include_trailing_delimiter: include_trailing_delimiter, page_token: page_token, projection: projection, channel: channel, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.watch_all_objects bucket: bucket, versions: versions, delimiter: delimiter, max_results: max_results, prefix: prefix, include_trailing_delimiter: include_trailing_delimiter, page_token: page_token, projection: projection, channel: channel, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.watch_all_objects ::Google::Storage::V1::WatchAllObjectsRequest.new(bucket: bucket, versions: versions, delimiter: delimiter, max_results: max_results, prefix: prefix, include_trailing_delimiter: include_trailing_delimiter, page_token: page_token, projection: projection, channel: channel, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.watch_all_objects({ bucket: bucket, versions: versions, delimiter: delimiter, max_results: max_results, prefix: prefix, include_trailing_delimiter: include_trailing_delimiter, page_token: page_token, projection: projection, channel: channel, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.watch_all_objects(::Google::Storage::V1::WatchAllObjectsRequest.new(bucket: bucket, versions: versions, delimiter: delimiter, max_results: max_results, prefix: prefix, include_trailing_delimiter: include_trailing_delimiter, page_token: page_token, projection: projection, channel: channel, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, watch_all_objects_client_stub.call_rpc_count
    end
  end

  def test_get_service_account
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::ServiceAccount.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    project_id = "hello world"
    common_request_params = {}

    get_service_account_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :get_service_account, name
      assert_kind_of ::Google::Storage::V1::GetProjectServiceAccountRequest, request
      assert_equal "hello world", request["project_id"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, get_service_account_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.get_service_account({ project_id: project_id, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.get_service_account project_id: project_id, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.get_service_account ::Google::Storage::V1::GetProjectServiceAccountRequest.new(project_id: project_id, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.get_service_account({ project_id: project_id, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.get_service_account(::Google::Storage::V1::GetProjectServiceAccountRequest.new(project_id: project_id, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, get_service_account_client_stub.call_rpc_count
    end
  end

  def test_create_hmac_key
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::CreateHmacKeyResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    project_id = "hello world"
    service_account_email = "hello world"
    common_request_params = {}

    create_hmac_key_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :create_hmac_key, name
      assert_kind_of ::Google::Storage::V1::CreateHmacKeyRequest, request
      assert_equal "hello world", request["project_id"]
      assert_equal "hello world", request["service_account_email"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, create_hmac_key_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.create_hmac_key({ project_id: project_id, service_account_email: service_account_email, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.create_hmac_key project_id: project_id, service_account_email: service_account_email, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.create_hmac_key ::Google::Storage::V1::CreateHmacKeyRequest.new(project_id: project_id, service_account_email: service_account_email, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.create_hmac_key({ project_id: project_id, service_account_email: service_account_email, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.create_hmac_key(::Google::Storage::V1::CreateHmacKeyRequest.new(project_id: project_id, service_account_email: service_account_email, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, create_hmac_key_client_stub.call_rpc_count
    end
  end

  def test_delete_hmac_key
    # Create GRPC objects.
    grpc_response = ::Google::Protobuf::Empty.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    access_id = "hello world"
    project_id = "hello world"
    common_request_params = {}

    delete_hmac_key_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :delete_hmac_key, name
      assert_kind_of ::Google::Storage::V1::DeleteHmacKeyRequest, request
      assert_equal "hello world", request["access_id"]
      assert_equal "hello world", request["project_id"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, delete_hmac_key_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.delete_hmac_key({ access_id: access_id, project_id: project_id, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.delete_hmac_key access_id: access_id, project_id: project_id, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.delete_hmac_key ::Google::Storage::V1::DeleteHmacKeyRequest.new(access_id: access_id, project_id: project_id, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.delete_hmac_key({ access_id: access_id, project_id: project_id, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.delete_hmac_key(::Google::Storage::V1::DeleteHmacKeyRequest.new(access_id: access_id, project_id: project_id, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, delete_hmac_key_client_stub.call_rpc_count
    end
  end

  def test_get_hmac_key
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::HmacKeyMetadata.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    access_id = "hello world"
    project_id = "hello world"
    common_request_params = {}

    get_hmac_key_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :get_hmac_key, name
      assert_kind_of ::Google::Storage::V1::GetHmacKeyRequest, request
      assert_equal "hello world", request["access_id"]
      assert_equal "hello world", request["project_id"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, get_hmac_key_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.get_hmac_key({ access_id: access_id, project_id: project_id, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.get_hmac_key access_id: access_id, project_id: project_id, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.get_hmac_key ::Google::Storage::V1::GetHmacKeyRequest.new(access_id: access_id, project_id: project_id, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.get_hmac_key({ access_id: access_id, project_id: project_id, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.get_hmac_key(::Google::Storage::V1::GetHmacKeyRequest.new(access_id: access_id, project_id: project_id, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, get_hmac_key_client_stub.call_rpc_count
    end
  end

  def test_list_hmac_keys
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::ListHmacKeysResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    project_id = "hello world"
    service_account_email = "hello world"
    show_deleted_keys = true
    max_results = 42
    page_token = "hello world"
    common_request_params = {}

    list_hmac_keys_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :list_hmac_keys, name
      assert_kind_of ::Google::Storage::V1::ListHmacKeysRequest, request
      assert_equal "hello world", request["project_id"]
      assert_equal "hello world", request["service_account_email"]
      assert_equal true, request["show_deleted_keys"]
      assert_equal 42, request["max_results"]
      assert_equal "hello world", request["page_token"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, list_hmac_keys_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.list_hmac_keys({ project_id: project_id, service_account_email: service_account_email, show_deleted_keys: show_deleted_keys, max_results: max_results, page_token: page_token, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.list_hmac_keys project_id: project_id, service_account_email: service_account_email, show_deleted_keys: show_deleted_keys, max_results: max_results, page_token: page_token, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.list_hmac_keys ::Google::Storage::V1::ListHmacKeysRequest.new(project_id: project_id, service_account_email: service_account_email, show_deleted_keys: show_deleted_keys, max_results: max_results, page_token: page_token, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.list_hmac_keys({ project_id: project_id, service_account_email: service_account_email, show_deleted_keys: show_deleted_keys, max_results: max_results, page_token: page_token, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.list_hmac_keys(::Google::Storage::V1::ListHmacKeysRequest.new(project_id: project_id, service_account_email: service_account_email, show_deleted_keys: show_deleted_keys, max_results: max_results, page_token: page_token, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, list_hmac_keys_client_stub.call_rpc_count
    end
  end

  def test_update_hmac_key
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V1::HmacKeyMetadata.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    access_id = "hello world"
    project_id = "hello world"
    metadata = {}
    common_request_params = {}

    update_hmac_key_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :update_hmac_key, name
      assert_kind_of ::Google::Storage::V1::UpdateHmacKeyRequest, request
      assert_equal "hello world", request["access_id"]
      assert_equal "hello world", request["project_id"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::HmacKeyMetadata), request["metadata"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V1::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, update_hmac_key_client_stub do
      # Create client
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.update_hmac_key({ access_id: access_id, project_id: project_id, metadata: metadata, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.update_hmac_key access_id: access_id, project_id: project_id, metadata: metadata, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.update_hmac_key ::Google::Storage::V1::UpdateHmacKeyRequest.new(access_id: access_id, project_id: project_id, metadata: metadata, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.update_hmac_key({ access_id: access_id, project_id: project_id, metadata: metadata, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.update_hmac_key(::Google::Storage::V1::UpdateHmacKeyRequest.new(access_id: access_id, project_id: project_id, metadata: metadata, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, update_hmac_key_client_stub.call_rpc_count
    end
  end

  def test_configure
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure

    client = block_config = config = nil
    Gapic::ServiceStub.stub :new, nil do
      client = ::Google::Storage::V1::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end
    end

    config = client.configure do |c|
      block_config = c
    end

    assert_same block_config, config
    assert_kind_of ::Google::Storage::V1::Storage::Client::Configuration, config
  end
end
