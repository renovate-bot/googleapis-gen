# frozen_string_literal: true

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/cloud/errors"
require "google/storage/v1/storage_pb"

module Google
  module Storage
    module V1
      module Storage
        ##
        # Client for the Storage service.
        #
        # Manages Google Cloud Storage resources.
        #
        class Client
          # @private
          attr_reader :storage_stub

          ##
          # Configure the Storage Client class.
          #
          # See {::Google::Storage::V1::Storage::Client::Configuration}
          # for a description of the configuration fields.
          #
          # @example
          #
          #   # Modify the configuration for all Storage clients
          #   ::Google::Storage::V1::Storage::Client.configure do |config|
          #     config.timeout = 10.0
          #   end
          #
          # @yield [config] Configure the Client client.
          # @yieldparam config [Client::Configuration]
          #
          # @return [Client::Configuration]
          #
          def self.configure
            @configure ||= begin
              namespace = ["Google", "Storage", "V1"]
              parent_config = while namespace.any?
                                parent_name = namespace.join "::"
                                parent_const = const_get parent_name
                                break parent_const.configure if parent_const.respond_to? :configure
                                namespace.pop
                              end
              default_config = Client::Configuration.new parent_config

              default_config
            end
            yield @configure if block_given?
            @configure
          end

          ##
          # Configure the Storage Client instance.
          #
          # The configuration is set to the derived mode, meaning that values can be changed,
          # but structural changes (adding new fields, etc.) are not allowed. Structural changes
          # should be made on {Client.configure}.
          #
          # See {::Google::Storage::V1::Storage::Client::Configuration}
          # for a description of the configuration fields.
          #
          # @yield [config] Configure the Client client.
          # @yieldparam config [Client::Configuration]
          #
          # @return [Client::Configuration]
          #
          def configure
            yield @config if block_given?
            @config
          end

          ##
          # Create a new Storage client object.
          #
          # @example
          #
          #   # Create a client using the default configuration
          #   client = ::Google::Storage::V1::Storage::Client.new
          #
          #   # Create a client using a custom configuration
          #   client = ::Google::Storage::V1::Storage::Client.new do |config|
          #     config.timeout = 10.0
          #   end
          #
          # @yield [config] Configure the Storage client.
          # @yieldparam config [Client::Configuration]
          #
          def initialize
            # These require statements are intentionally placed here to initialize
            # the gRPC module only when it's required.
            # See https://github.com/googleapis/toolkit/issues/446
            require "gapic/grpc"
            require "google/storage/v1/storage_services_pb"

            # Create the configuration object
            @config = Configuration.new Client.configure

            # Yield the configuration if needed
            yield @config if block_given?

            # Create credentials
            credentials = @config.credentials
            # Use self-signed JWT if the endpoint is unchanged from default,
            # but only if the default endpoint does not have a region prefix.
            enable_self_signed_jwt = @config.endpoint == Client.configure.endpoint &&
                                     !@config.endpoint.split(".").first.include?("-")
            credentials ||= Credentials.default scope: @config.scope,
                                                enable_self_signed_jwt: enable_self_signed_jwt
            if credentials.is_a?(::String) || credentials.is_a?(::Hash)
              credentials = Credentials.new credentials, scope: @config.scope
            end
            @quota_project_id = @config.quota_project
            @quota_project_id ||= credentials.quota_project_id if credentials.respond_to? :quota_project_id

            @storage_stub = ::Gapic::ServiceStub.new(
              ::Google::Storage::V1::Storage::Stub,
              credentials:  credentials,
              endpoint:     @config.endpoint,
              channel_args: @config.channel_args,
              interceptors: @config.interceptors
            )
          end

          # Service calls

          ##
          # Permanently deletes the ACL entry for the specified entity on the specified
          # bucket.
          #
          # @overload delete_bucket_access_control(request, options = nil)
          #   Pass arguments to `delete_bucket_access_control` via a request object, either of type
          #   {::Google::Storage::V1::DeleteBucketAccessControlRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::DeleteBucketAccessControlRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload delete_bucket_access_control(bucket: nil, entity: nil, common_request_params: nil)
          #   Pass arguments to `delete_bucket_access_control` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. Name of a bucket.
          #   @param entity [::String]
          #     Required. The entity holding the permission. Can be one of:
          #     * `user-`*userId*
          #     * `user-`*emailAddress*
          #     * `group-`*groupId*
          #     * `group-`*emailAddress*
          #     * `allUsers`
          #     * `allAuthenticatedUsers`
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Protobuf::Empty]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Protobuf::Empty]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::DeleteBucketAccessControlRequest.new
          #
          #   # Call the delete_bucket_access_control method.
          #   result = client.delete_bucket_access_control request
          #
          #   # The returned object is of type Google::Protobuf::Empty.
          #   p result
          #
          def delete_bucket_access_control request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::DeleteBucketAccessControlRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.delete_bucket_access_control.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.delete_bucket_access_control.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.delete_bucket_access_control.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :delete_bucket_access_control, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Returns the ACL entry for the specified entity on the specified bucket.
          #
          # @overload get_bucket_access_control(request, options = nil)
          #   Pass arguments to `get_bucket_access_control` via a request object, either of type
          #   {::Google::Storage::V1::GetBucketAccessControlRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::GetBucketAccessControlRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload get_bucket_access_control(bucket: nil, entity: nil, common_request_params: nil)
          #   Pass arguments to `get_bucket_access_control` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. Name of a bucket.
          #   @param entity [::String]
          #     Required. The entity holding the permission. Can be one of:
          #     * `user-`*userId*
          #     * `user-`*emailAddress*
          #     * `group-`*groupId*
          #     * `group-`*emailAddress*
          #     * `allUsers`
          #     * `allAuthenticatedUsers`
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::BucketAccessControl]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::BucketAccessControl]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::GetBucketAccessControlRequest.new
          #
          #   # Call the get_bucket_access_control method.
          #   result = client.get_bucket_access_control request
          #
          #   # The returned object is of type Google::Storage::V1::BucketAccessControl.
          #   p result
          #
          def get_bucket_access_control request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::GetBucketAccessControlRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.get_bucket_access_control.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.get_bucket_access_control.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.get_bucket_access_control.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :get_bucket_access_control, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Creates a new ACL entry on the specified bucket.
          #
          # @overload insert_bucket_access_control(request, options = nil)
          #   Pass arguments to `insert_bucket_access_control` via a request object, either of type
          #   {::Google::Storage::V1::InsertBucketAccessControlRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::InsertBucketAccessControlRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload insert_bucket_access_control(bucket: nil, bucket_access_control: nil, common_request_params: nil)
          #   Pass arguments to `insert_bucket_access_control` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. Name of a bucket.
          #   @param bucket_access_control [::Google::Storage::V1::BucketAccessControl, ::Hash]
          #     Properties of the new bucket access control being inserted.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::BucketAccessControl]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::BucketAccessControl]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::InsertBucketAccessControlRequest.new
          #
          #   # Call the insert_bucket_access_control method.
          #   result = client.insert_bucket_access_control request
          #
          #   # The returned object is of type Google::Storage::V1::BucketAccessControl.
          #   p result
          #
          def insert_bucket_access_control request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::InsertBucketAccessControlRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.insert_bucket_access_control.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.insert_bucket_access_control.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.insert_bucket_access_control.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :insert_bucket_access_control, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Retrieves ACL entries on the specified bucket.
          #
          # @overload list_bucket_access_controls(request, options = nil)
          #   Pass arguments to `list_bucket_access_controls` via a request object, either of type
          #   {::Google::Storage::V1::ListBucketAccessControlsRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::ListBucketAccessControlsRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload list_bucket_access_controls(bucket: nil, common_request_params: nil)
          #   Pass arguments to `list_bucket_access_controls` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. Name of a bucket.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::ListBucketAccessControlsResponse]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::ListBucketAccessControlsResponse]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::ListBucketAccessControlsRequest.new
          #
          #   # Call the list_bucket_access_controls method.
          #   result = client.list_bucket_access_controls request
          #
          #   # The returned object is of type Google::Storage::V1::ListBucketAccessControlsResponse.
          #   p result
          #
          def list_bucket_access_controls request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::ListBucketAccessControlsRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.list_bucket_access_controls.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.list_bucket_access_controls.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.list_bucket_access_controls.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :list_bucket_access_controls, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Updates an ACL entry on the specified bucket. Equivalent to
          # PatchBucketAccessControl, but all unspecified fields will be
          # reset to their default values.
          #
          # @overload update_bucket_access_control(request, options = nil)
          #   Pass arguments to `update_bucket_access_control` via a request object, either of type
          #   {::Google::Storage::V1::UpdateBucketAccessControlRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::UpdateBucketAccessControlRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload update_bucket_access_control(bucket: nil, entity: nil, bucket_access_control: nil, common_request_params: nil)
          #   Pass arguments to `update_bucket_access_control` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. Name of a bucket.
          #   @param entity [::String]
          #     Required. The entity holding the permission. Can be one of:
          #     * `user-`*userId*
          #     * `user-`*emailAddress*
          #     * `group-`*groupId*
          #     * `group-`*emailAddress*
          #     * `allUsers`
          #     * `allAuthenticatedUsers`
          #   @param bucket_access_control [::Google::Storage::V1::BucketAccessControl, ::Hash]
          #     The BucketAccessControl for updating.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::BucketAccessControl]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::BucketAccessControl]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::UpdateBucketAccessControlRequest.new
          #
          #   # Call the update_bucket_access_control method.
          #   result = client.update_bucket_access_control request
          #
          #   # The returned object is of type Google::Storage::V1::BucketAccessControl.
          #   p result
          #
          def update_bucket_access_control request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::UpdateBucketAccessControlRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.update_bucket_access_control.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.update_bucket_access_control.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.update_bucket_access_control.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :update_bucket_access_control, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Updates an ACL entry on the specified bucket.
          #
          # @overload patch_bucket_access_control(request, options = nil)
          #   Pass arguments to `patch_bucket_access_control` via a request object, either of type
          #   {::Google::Storage::V1::PatchBucketAccessControlRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::PatchBucketAccessControlRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload patch_bucket_access_control(bucket: nil, entity: nil, bucket_access_control: nil, update_mask: nil, common_request_params: nil)
          #   Pass arguments to `patch_bucket_access_control` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. Name of a bucket.
          #   @param entity [::String]
          #     Required. The entity holding the permission. Can be one of:
          #     * `user-`*userId*
          #     * `user-`*emailAddress*
          #     * `group-`*groupId*
          #     * `group-`*emailAddress*
          #     * `allUsers`
          #     * `allAuthenticatedUsers`
          #   @param bucket_access_control [::Google::Storage::V1::BucketAccessControl, ::Hash]
          #     The BucketAccessControl for updating.
          #   @param update_mask [::Google::Protobuf::FieldMask, ::Hash]
          #     List of fields to be updated.
          #
          #     To specify ALL fields, equivalent to the JSON API's "update" function,
          #     specify a single field with the value `*`.
          #
          #
          #     Not specifying any fields is an error.
          #     Not specifying a field while setting that field to a non-default value is
          #     an error.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::BucketAccessControl]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::BucketAccessControl]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::PatchBucketAccessControlRequest.new
          #
          #   # Call the patch_bucket_access_control method.
          #   result = client.patch_bucket_access_control request
          #
          #   # The returned object is of type Google::Storage::V1::BucketAccessControl.
          #   p result
          #
          def patch_bucket_access_control request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::PatchBucketAccessControlRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.patch_bucket_access_control.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.patch_bucket_access_control.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.patch_bucket_access_control.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :patch_bucket_access_control, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Permanently deletes an empty bucket.
          #
          # @overload delete_bucket(request, options = nil)
          #   Pass arguments to `delete_bucket` via a request object, either of type
          #   {::Google::Storage::V1::DeleteBucketRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::DeleteBucketRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload delete_bucket(bucket: nil, if_metageneration_match: nil, if_metageneration_not_match: nil, common_request_params: nil)
          #   Pass arguments to `delete_bucket` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. Name of a bucket.
          #   @param if_metageneration_match [::Google::Protobuf::Int64Value, ::Hash]
          #     If set, only deletes the bucket if its metageneration matches this value.
          #   @param if_metageneration_not_match [::Google::Protobuf::Int64Value, ::Hash]
          #     If set, only deletes the bucket if its metageneration does not match this
          #     value.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Protobuf::Empty]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Protobuf::Empty]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::DeleteBucketRequest.new
          #
          #   # Call the delete_bucket method.
          #   result = client.delete_bucket request
          #
          #   # The returned object is of type Google::Protobuf::Empty.
          #   p result
          #
          def delete_bucket request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::DeleteBucketRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.delete_bucket.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.delete_bucket.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.delete_bucket.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :delete_bucket, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Returns metadata for the specified bucket.
          #
          # @overload get_bucket(request, options = nil)
          #   Pass arguments to `get_bucket` via a request object, either of type
          #   {::Google::Storage::V1::GetBucketRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::GetBucketRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload get_bucket(bucket: nil, if_metageneration_match: nil, if_metageneration_not_match: nil, projection: nil, common_request_params: nil)
          #   Pass arguments to `get_bucket` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. Name of a bucket.
          #   @param if_metageneration_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the return of the bucket metadata conditional on whether the bucket's
          #     current metageneration matches the given value.
          #   @param if_metageneration_not_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the return of the bucket metadata conditional on whether the bucket's
          #     current metageneration does not match the given value.
          #   @param projection [::Google::Storage::V1::CommonEnums::Projection]
          #     Set of properties to return. Defaults to `NO_ACL`.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::Bucket]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::Bucket]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::GetBucketRequest.new
          #
          #   # Call the get_bucket method.
          #   result = client.get_bucket request
          #
          #   # The returned object is of type Google::Storage::V1::Bucket.
          #   p result
          #
          def get_bucket request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::GetBucketRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.get_bucket.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.get_bucket.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.get_bucket.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :get_bucket, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Creates a new bucket.
          #
          # @overload insert_bucket(request, options = nil)
          #   Pass arguments to `insert_bucket` via a request object, either of type
          #   {::Google::Storage::V1::InsertBucketRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::InsertBucketRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload insert_bucket(predefined_acl: nil, predefined_default_object_acl: nil, project: nil, projection: nil, bucket: nil, common_request_params: nil)
          #   Pass arguments to `insert_bucket` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param predefined_acl [::Google::Storage::V1::CommonEnums::PredefinedBucketAcl]
          #     Apply a predefined set of access controls to this bucket.
          #   @param predefined_default_object_acl [::Google::Storage::V1::CommonEnums::PredefinedObjectAcl]
          #     Apply a predefined set of default object access controls to this bucket.
          #   @param project [::String]
          #     Required. A valid API project identifier.
          #   @param projection [::Google::Storage::V1::CommonEnums::Projection]
          #     Set of properties to return. Defaults to `NO_ACL`, unless the
          #     bucket resource specifies `acl` or `defaultObjectAcl`
          #     properties, when it defaults to `FULL`.
          #   @param bucket [::Google::Storage::V1::Bucket, ::Hash]
          #     Properties of the new bucket being inserted, including its name.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::Bucket]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::Bucket]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::InsertBucketRequest.new
          #
          #   # Call the insert_bucket method.
          #   result = client.insert_bucket request
          #
          #   # The returned object is of type Google::Storage::V1::Bucket.
          #   p result
          #
          def insert_bucket request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::InsertBucketRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.insert_bucket.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.insert_bucket.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.insert_bucket.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :insert_bucket, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # List active object change notification channels for this bucket.
          #
          # @overload list_channels(request, options = nil)
          #   Pass arguments to `list_channels` via a request object, either of type
          #   {::Google::Storage::V1::ListChannelsRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::ListChannelsRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload list_channels(bucket: nil, common_request_params: nil)
          #   Pass arguments to `list_channels` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. Name of a bucket.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::ListChannelsResponse]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::ListChannelsResponse]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::ListChannelsRequest.new
          #
          #   # Call the list_channels method.
          #   result = client.list_channels request
          #
          #   # The returned object is of type Google::Storage::V1::ListChannelsResponse.
          #   p result
          #
          def list_channels request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::ListChannelsRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.list_channels.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.list_channels.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.list_channels.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :list_channels, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Retrieves a list of buckets for a given project.
          #
          # @overload list_buckets(request, options = nil)
          #   Pass arguments to `list_buckets` via a request object, either of type
          #   {::Google::Storage::V1::ListBucketsRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::ListBucketsRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload list_buckets(max_results: nil, page_token: nil, prefix: nil, project: nil, projection: nil, common_request_params: nil)
          #   Pass arguments to `list_buckets` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param max_results [::Integer]
          #     Maximum number of buckets to return in a single response. The service will
          #     use this parameter or 1,000 items, whichever is smaller.
          #   @param page_token [::String]
          #     A previously-returned page token representing part of the larger set of
          #     results to view.
          #   @param prefix [::String]
          #     Filter results to buckets whose names begin with this prefix.
          #   @param project [::String]
          #     Required. A valid API project identifier.
          #   @param projection [::Google::Storage::V1::CommonEnums::Projection]
          #     Set of properties to return. Defaults to `NO_ACL`.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::ListBucketsResponse]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::ListBucketsResponse]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::ListBucketsRequest.new
          #
          #   # Call the list_buckets method.
          #   result = client.list_buckets request
          #
          #   # The returned object is of type Google::Storage::V1::ListBucketsResponse.
          #   p result
          #
          def list_buckets request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::ListBucketsRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.list_buckets.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.list_buckets.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.list_buckets.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :list_buckets, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Locks retention policy on a bucket.
          #
          # @overload lock_bucket_retention_policy(request, options = nil)
          #   Pass arguments to `lock_bucket_retention_policy` via a request object, either of type
          #   {::Google::Storage::V1::LockRetentionPolicyRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::LockRetentionPolicyRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload lock_bucket_retention_policy(bucket: nil, if_metageneration_match: nil, common_request_params: nil)
          #   Pass arguments to `lock_bucket_retention_policy` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. Name of a bucket.
          #   @param if_metageneration_match [::Integer]
          #     Makes the operation conditional on whether bucket's current metageneration
          #     matches the given value. Must be positive.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::Bucket]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::Bucket]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::LockRetentionPolicyRequest.new
          #
          #   # Call the lock_bucket_retention_policy method.
          #   result = client.lock_bucket_retention_policy request
          #
          #   # The returned object is of type Google::Storage::V1::Bucket.
          #   p result
          #
          def lock_bucket_retention_policy request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::LockRetentionPolicyRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.lock_bucket_retention_policy.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.lock_bucket_retention_policy.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.lock_bucket_retention_policy.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :lock_bucket_retention_policy, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Gets the IAM policy for the specified bucket.
          #
          # @overload get_bucket_iam_policy(request, options = nil)
          #   Pass arguments to `get_bucket_iam_policy` via a request object, either of type
          #   {::Google::Storage::V1::GetIamPolicyRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::GetIamPolicyRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload get_bucket_iam_policy(iam_request: nil, common_request_params: nil)
          #   Pass arguments to `get_bucket_iam_policy` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param iam_request [::Google::Iam::V1::GetIamPolicyRequest, ::Hash]
          #     The request sent to IAM.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Iam::V1::Policy]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Iam::V1::Policy]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::GetIamPolicyRequest.new
          #
          #   # Call the get_bucket_iam_policy method.
          #   result = client.get_bucket_iam_policy request
          #
          #   # The returned object is of type Google::Iam::V1::Policy.
          #   p result
          #
          def get_bucket_iam_policy request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::GetIamPolicyRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.get_bucket_iam_policy.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.get_bucket_iam_policy.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.get_bucket_iam_policy.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :get_bucket_iam_policy, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Updates an IAM policy for the specified bucket.
          #
          # @overload set_bucket_iam_policy(request, options = nil)
          #   Pass arguments to `set_bucket_iam_policy` via a request object, either of type
          #   {::Google::Storage::V1::SetIamPolicyRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::SetIamPolicyRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload set_bucket_iam_policy(iam_request: nil, common_request_params: nil)
          #   Pass arguments to `set_bucket_iam_policy` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param iam_request [::Google::Iam::V1::SetIamPolicyRequest, ::Hash]
          #     The request sent to IAM.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Iam::V1::Policy]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Iam::V1::Policy]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::SetIamPolicyRequest.new
          #
          #   # Call the set_bucket_iam_policy method.
          #   result = client.set_bucket_iam_policy request
          #
          #   # The returned object is of type Google::Iam::V1::Policy.
          #   p result
          #
          def set_bucket_iam_policy request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::SetIamPolicyRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.set_bucket_iam_policy.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.set_bucket_iam_policy.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.set_bucket_iam_policy.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :set_bucket_iam_policy, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Tests a set of permissions on the given bucket to see which, if
          # any, are held by the caller.
          #
          # @overload test_bucket_iam_permissions(request, options = nil)
          #   Pass arguments to `test_bucket_iam_permissions` via a request object, either of type
          #   {::Google::Storage::V1::TestIamPermissionsRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::TestIamPermissionsRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload test_bucket_iam_permissions(iam_request: nil, common_request_params: nil)
          #   Pass arguments to `test_bucket_iam_permissions` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param iam_request [::Google::Iam::V1::TestIamPermissionsRequest, ::Hash]
          #     The request sent to IAM.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Iam::V1::TestIamPermissionsResponse]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Iam::V1::TestIamPermissionsResponse]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::TestIamPermissionsRequest.new
          #
          #   # Call the test_bucket_iam_permissions method.
          #   result = client.test_bucket_iam_permissions request
          #
          #   # The returned object is of type Google::Iam::V1::TestIamPermissionsResponse.
          #   p result
          #
          def test_bucket_iam_permissions request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::TestIamPermissionsRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.test_bucket_iam_permissions.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.test_bucket_iam_permissions.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.test_bucket_iam_permissions.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :test_bucket_iam_permissions, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Updates a bucket. Changes to the bucket will be readable immediately after
          # writing, but configuration changes may take time to propagate.
          #
          # @overload patch_bucket(request, options = nil)
          #   Pass arguments to `patch_bucket` via a request object, either of type
          #   {::Google::Storage::V1::PatchBucketRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::PatchBucketRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload patch_bucket(bucket: nil, if_metageneration_match: nil, if_metageneration_not_match: nil, predefined_acl: nil, predefined_default_object_acl: nil, projection: nil, metadata: nil, update_mask: nil, common_request_params: nil)
          #   Pass arguments to `patch_bucket` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. Name of a bucket.
          #   @param if_metageneration_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the return of the bucket metadata conditional on whether the bucket's
          #     current metageneration matches the given value.
          #   @param if_metageneration_not_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the return of the bucket metadata conditional on whether the bucket's
          #     current metageneration does not match the given value.
          #   @param predefined_acl [::Google::Storage::V1::CommonEnums::PredefinedBucketAcl]
          #     Apply a predefined set of access controls to this bucket.
          #   @param predefined_default_object_acl [::Google::Storage::V1::CommonEnums::PredefinedObjectAcl]
          #     Apply a predefined set of default object access controls to this bucket.
          #   @param projection [::Google::Storage::V1::CommonEnums::Projection]
          #     Set of properties to return. Defaults to `FULL`.
          #   @param metadata [::Google::Storage::V1::Bucket, ::Hash]
          #     The Bucket metadata for updating.
          #   @param update_mask [::Google::Protobuf::FieldMask, ::Hash]
          #     List of fields to be updated.
          #
          #     To specify ALL fields, equivalent to the JSON API's "update" function,
          #     specify a single field with the value `*`. Note: not recommended. If a new
          #     field is introduced at a later time, an older client updating with the `*`
          #     may accidentally reset the new field's value.
          #
          #     Not specifying any fields is an error.
          #     Not specifying a field while setting that field to a non-default value is
          #     an error.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::Bucket]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::Bucket]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::PatchBucketRequest.new
          #
          #   # Call the patch_bucket method.
          #   result = client.patch_bucket request
          #
          #   # The returned object is of type Google::Storage::V1::Bucket.
          #   p result
          #
          def patch_bucket request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::PatchBucketRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.patch_bucket.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.patch_bucket.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.patch_bucket.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :patch_bucket, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Updates a bucket. Equivalent to PatchBucket, but always replaces all
          # mutatable fields of the bucket with new values, reverting all
          # unspecified fields to their default values.
          # Like PatchBucket, Changes to the bucket will be readable immediately after
          # writing, but configuration changes may take time to propagate.
          #
          # @overload update_bucket(request, options = nil)
          #   Pass arguments to `update_bucket` via a request object, either of type
          #   {::Google::Storage::V1::UpdateBucketRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::UpdateBucketRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload update_bucket(bucket: nil, if_metageneration_match: nil, if_metageneration_not_match: nil, predefined_acl: nil, predefined_default_object_acl: nil, projection: nil, metadata: nil, common_request_params: nil)
          #   Pass arguments to `update_bucket` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. Name of a bucket.
          #   @param if_metageneration_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the return of the bucket metadata conditional on whether the bucket's
          #     current metageneration matches the given value.
          #   @param if_metageneration_not_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the return of the bucket metadata conditional on whether the bucket's
          #     current metageneration does not match the given value.
          #   @param predefined_acl [::Google::Storage::V1::CommonEnums::PredefinedBucketAcl]
          #     Apply a predefined set of access controls to this bucket.
          #   @param predefined_default_object_acl [::Google::Storage::V1::CommonEnums::PredefinedObjectAcl]
          #     Apply a predefined set of default object access controls to this bucket.
          #   @param projection [::Google::Storage::V1::CommonEnums::Projection]
          #     Set of properties to return. Defaults to `FULL`.
          #   @param metadata [::Google::Storage::V1::Bucket, ::Hash]
          #     The Bucket metadata for updating.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::Bucket]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::Bucket]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::UpdateBucketRequest.new
          #
          #   # Call the update_bucket method.
          #   result = client.update_bucket request
          #
          #   # The returned object is of type Google::Storage::V1::Bucket.
          #   p result
          #
          def update_bucket request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::UpdateBucketRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.update_bucket.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.update_bucket.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.update_bucket.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :update_bucket, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Halts "Object Change Notification" push messagages.
          # See https://cloud.google.com/storage/docs/object-change-notification
          # Note: this is not related to the newer "Notifications" resource, which
          # are stopped using DeleteNotification.
          #
          # @overload stop_channel(request, options = nil)
          #   Pass arguments to `stop_channel` via a request object, either of type
          #   {::Google::Storage::V1::StopChannelRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::StopChannelRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload stop_channel(channel: nil, common_request_params: nil)
          #   Pass arguments to `stop_channel` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param channel [::Google::Storage::V1::Channel, ::Hash]
          #     The channel to be stopped.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Protobuf::Empty]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Protobuf::Empty]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::StopChannelRequest.new
          #
          #   # Call the stop_channel method.
          #   result = client.stop_channel request
          #
          #   # The returned object is of type Google::Protobuf::Empty.
          #   p result
          #
          def stop_channel request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::StopChannelRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.stop_channel.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.stop_channel.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.stop_channel.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :stop_channel, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Permanently deletes the default object ACL entry for the specified entity
          # on the specified bucket.
          #
          # @overload delete_default_object_access_control(request, options = nil)
          #   Pass arguments to `delete_default_object_access_control` via a request object, either of type
          #   {::Google::Storage::V1::DeleteDefaultObjectAccessControlRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::DeleteDefaultObjectAccessControlRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload delete_default_object_access_control(bucket: nil, entity: nil, common_request_params: nil)
          #   Pass arguments to `delete_default_object_access_control` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. Name of a bucket.
          #   @param entity [::String]
          #     Required. The entity holding the permission. Can be one of:
          #     * `user-`*userId*
          #     * `user-`*emailAddress*
          #     * `group-`*groupId*
          #     * `group-`*emailAddress*
          #     * `allUsers`
          #     * `allAuthenticatedUsers`
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Protobuf::Empty]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Protobuf::Empty]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::DeleteDefaultObjectAccessControlRequest.new
          #
          #   # Call the delete_default_object_access_control method.
          #   result = client.delete_default_object_access_control request
          #
          #   # The returned object is of type Google::Protobuf::Empty.
          #   p result
          #
          def delete_default_object_access_control request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::DeleteDefaultObjectAccessControlRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.delete_default_object_access_control.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.delete_default_object_access_control.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.delete_default_object_access_control.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :delete_default_object_access_control, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Returns the default object ACL entry for the specified entity on the
          # specified bucket.
          #
          # @overload get_default_object_access_control(request, options = nil)
          #   Pass arguments to `get_default_object_access_control` via a request object, either of type
          #   {::Google::Storage::V1::GetDefaultObjectAccessControlRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::GetDefaultObjectAccessControlRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload get_default_object_access_control(bucket: nil, entity: nil, common_request_params: nil)
          #   Pass arguments to `get_default_object_access_control` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. Name of a bucket.
          #   @param entity [::String]
          #     Required. The entity holding the permission. Can be one of:
          #     * `user-`*userId*
          #     * `user-`*emailAddress*
          #     * `group-`*groupId*
          #     * `group-`*emailAddress*
          #     * `allUsers`
          #     * `allAuthenticatedUsers`
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::ObjectAccessControl]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::ObjectAccessControl]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::GetDefaultObjectAccessControlRequest.new
          #
          #   # Call the get_default_object_access_control method.
          #   result = client.get_default_object_access_control request
          #
          #   # The returned object is of type Google::Storage::V1::ObjectAccessControl.
          #   p result
          #
          def get_default_object_access_control request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::GetDefaultObjectAccessControlRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.get_default_object_access_control.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.get_default_object_access_control.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.get_default_object_access_control.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :get_default_object_access_control, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Creates a new default object ACL entry on the specified bucket.
          #
          # @overload insert_default_object_access_control(request, options = nil)
          #   Pass arguments to `insert_default_object_access_control` via a request object, either of type
          #   {::Google::Storage::V1::InsertDefaultObjectAccessControlRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::InsertDefaultObjectAccessControlRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload insert_default_object_access_control(bucket: nil, object_access_control: nil, common_request_params: nil)
          #   Pass arguments to `insert_default_object_access_control` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. Name of a bucket.
          #   @param object_access_control [::Google::Storage::V1::ObjectAccessControl, ::Hash]
          #     Properties of the object access control being inserted.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::ObjectAccessControl]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::ObjectAccessControl]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::InsertDefaultObjectAccessControlRequest.new
          #
          #   # Call the insert_default_object_access_control method.
          #   result = client.insert_default_object_access_control request
          #
          #   # The returned object is of type Google::Storage::V1::ObjectAccessControl.
          #   p result
          #
          def insert_default_object_access_control request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::InsertDefaultObjectAccessControlRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.insert_default_object_access_control.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.insert_default_object_access_control.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.insert_default_object_access_control.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :insert_default_object_access_control, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Retrieves default object ACL entries on the specified bucket.
          #
          # @overload list_default_object_access_controls(request, options = nil)
          #   Pass arguments to `list_default_object_access_controls` via a request object, either of type
          #   {::Google::Storage::V1::ListDefaultObjectAccessControlsRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::ListDefaultObjectAccessControlsRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload list_default_object_access_controls(bucket: nil, if_metageneration_match: nil, if_metageneration_not_match: nil, common_request_params: nil)
          #   Pass arguments to `list_default_object_access_controls` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. Name of a bucket.
          #   @param if_metageneration_match [::Google::Protobuf::Int64Value, ::Hash]
          #     If present, only return default ACL listing if the bucket's current
          #     metageneration matches this value.
          #   @param if_metageneration_not_match [::Google::Protobuf::Int64Value, ::Hash]
          #     If present, only return default ACL listing if the bucket's current
          #     metageneration does not match the given value.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::ListObjectAccessControlsResponse]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::ListObjectAccessControlsResponse]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::ListDefaultObjectAccessControlsRequest.new
          #
          #   # Call the list_default_object_access_controls method.
          #   result = client.list_default_object_access_controls request
          #
          #   # The returned object is of type Google::Storage::V1::ListObjectAccessControlsResponse.
          #   p result
          #
          def list_default_object_access_controls request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::ListDefaultObjectAccessControlsRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.list_default_object_access_controls.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.list_default_object_access_controls.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.list_default_object_access_controls.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :list_default_object_access_controls, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Updates a default object ACL entry on the specified bucket.
          #
          # @overload patch_default_object_access_control(request, options = nil)
          #   Pass arguments to `patch_default_object_access_control` via a request object, either of type
          #   {::Google::Storage::V1::PatchDefaultObjectAccessControlRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::PatchDefaultObjectAccessControlRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload patch_default_object_access_control(bucket: nil, entity: nil, object_access_control: nil, update_mask: nil, common_request_params: nil)
          #   Pass arguments to `patch_default_object_access_control` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. Name of a bucket.
          #   @param entity [::String]
          #     Required. The entity holding the permission. Can be one of:
          #     * `user-`*userId*
          #     * `user-`*emailAddress*
          #     * `group-`*groupId*
          #     * `group-`*emailAddress*
          #     * `allUsers`
          #     * `allAuthenticatedUsers`
          #   @param object_access_control [::Google::Storage::V1::ObjectAccessControl, ::Hash]
          #     The ObjectAccessControl for updating.
          #   @param update_mask [::Google::Protobuf::FieldMask, ::Hash]
          #     List of fields to be updated.
          #
          #     To specify ALL fields, equivalent to the JSON API's "update" function,
          #     specify a single field with the value `*`. Note: not recommended. If a new
          #     field is introduced at a later time, an older client updating with the `*`
          #     may accidentally reset the new field's value.
          #
          #     Not specifying any fields is an error.
          #     Not specifying a field while setting that field to a non-default value is
          #     an error.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::ObjectAccessControl]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::ObjectAccessControl]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::PatchDefaultObjectAccessControlRequest.new
          #
          #   # Call the patch_default_object_access_control method.
          #   result = client.patch_default_object_access_control request
          #
          #   # The returned object is of type Google::Storage::V1::ObjectAccessControl.
          #   p result
          #
          def patch_default_object_access_control request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::PatchDefaultObjectAccessControlRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.patch_default_object_access_control.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.patch_default_object_access_control.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.patch_default_object_access_control.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :patch_default_object_access_control, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Updates a default object ACL entry on the specified bucket. Equivalent to
          # PatchDefaultObjectAccessControl, but modifies all unspecified fields to
          # their default values.
          #
          # @overload update_default_object_access_control(request, options = nil)
          #   Pass arguments to `update_default_object_access_control` via a request object, either of type
          #   {::Google::Storage::V1::UpdateDefaultObjectAccessControlRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::UpdateDefaultObjectAccessControlRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload update_default_object_access_control(bucket: nil, entity: nil, object_access_control: nil, common_request_params: nil)
          #   Pass arguments to `update_default_object_access_control` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. Name of a bucket.
          #   @param entity [::String]
          #     Required. The entity holding the permission. Can be one of:
          #     * `user-`*userId*
          #     * `user-`*emailAddress*
          #     * `group-`*groupId*
          #     * `group-`*emailAddress*
          #     * `allUsers`
          #     * `allAuthenticatedUsers`
          #   @param object_access_control [::Google::Storage::V1::ObjectAccessControl, ::Hash]
          #     The ObjectAccessControl for updating.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::ObjectAccessControl]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::ObjectAccessControl]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::UpdateDefaultObjectAccessControlRequest.new
          #
          #   # Call the update_default_object_access_control method.
          #   result = client.update_default_object_access_control request
          #
          #   # The returned object is of type Google::Storage::V1::ObjectAccessControl.
          #   p result
          #
          def update_default_object_access_control request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::UpdateDefaultObjectAccessControlRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.update_default_object_access_control.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.update_default_object_access_control.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.update_default_object_access_control.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :update_default_object_access_control, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Permanently deletes a notification subscription.
          # Note: Older, "Object Change Notification" push subscriptions should be
          # deleted using StopChannel instead.
          #
          # @overload delete_notification(request, options = nil)
          #   Pass arguments to `delete_notification` via a request object, either of type
          #   {::Google::Storage::V1::DeleteNotificationRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::DeleteNotificationRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload delete_notification(bucket: nil, notification: nil, common_request_params: nil)
          #   Pass arguments to `delete_notification` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. The parent bucket of the notification.
          #   @param notification [::String]
          #     Required. ID of the notification to delete.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Protobuf::Empty]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Protobuf::Empty]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::DeleteNotificationRequest.new
          #
          #   # Call the delete_notification method.
          #   result = client.delete_notification request
          #
          #   # The returned object is of type Google::Protobuf::Empty.
          #   p result
          #
          def delete_notification request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::DeleteNotificationRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.delete_notification.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.delete_notification.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.delete_notification.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :delete_notification, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # View a notification configuration.
          #
          # @overload get_notification(request, options = nil)
          #   Pass arguments to `get_notification` via a request object, either of type
          #   {::Google::Storage::V1::GetNotificationRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::GetNotificationRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload get_notification(bucket: nil, notification: nil, common_request_params: nil)
          #   Pass arguments to `get_notification` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. The parent bucket of the notification.
          #   @param notification [::String]
          #     Required. Notification ID.
          #     Required.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::Notification]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::Notification]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::GetNotificationRequest.new
          #
          #   # Call the get_notification method.
          #   result = client.get_notification request
          #
          #   # The returned object is of type Google::Storage::V1::Notification.
          #   p result
          #
          def get_notification request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::GetNotificationRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.get_notification.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.get_notification.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.get_notification.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :get_notification, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Creates a notification subscription for a given bucket.
          # These notifications, when triggered, publish messages to the specified
          # Cloud Pub/Sub topics.
          # See https://cloud.google.com/storage/docs/pubsub-notifications.
          #
          # @overload insert_notification(request, options = nil)
          #   Pass arguments to `insert_notification` via a request object, either of type
          #   {::Google::Storage::V1::InsertNotificationRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::InsertNotificationRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload insert_notification(bucket: nil, notification: nil, common_request_params: nil)
          #   Pass arguments to `insert_notification` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. The parent bucket of the notification.
          #   @param notification [::Google::Storage::V1::Notification, ::Hash]
          #     Properties of the notification to be inserted.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::Notification]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::Notification]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::InsertNotificationRequest.new
          #
          #   # Call the insert_notification method.
          #   result = client.insert_notification request
          #
          #   # The returned object is of type Google::Storage::V1::Notification.
          #   p result
          #
          def insert_notification request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::InsertNotificationRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.insert_notification.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.insert_notification.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.insert_notification.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :insert_notification, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Retrieves a list of notification subscriptions for a given bucket.
          #
          # @overload list_notifications(request, options = nil)
          #   Pass arguments to `list_notifications` via a request object, either of type
          #   {::Google::Storage::V1::ListNotificationsRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::ListNotificationsRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload list_notifications(bucket: nil, common_request_params: nil)
          #   Pass arguments to `list_notifications` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. Name of a Google Cloud Storage bucket.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::ListNotificationsResponse]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::ListNotificationsResponse]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::ListNotificationsRequest.new
          #
          #   # Call the list_notifications method.
          #   result = client.list_notifications request
          #
          #   # The returned object is of type Google::Storage::V1::ListNotificationsResponse.
          #   p result
          #
          def list_notifications request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::ListNotificationsRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.list_notifications.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.list_notifications.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.list_notifications.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :list_notifications, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Permanently deletes the ACL entry for the specified entity on the specified
          # object.
          #
          # @overload delete_object_access_control(request, options = nil)
          #   Pass arguments to `delete_object_access_control` via a request object, either of type
          #   {::Google::Storage::V1::DeleteObjectAccessControlRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::DeleteObjectAccessControlRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload delete_object_access_control(bucket: nil, entity: nil, object: nil, generation: nil, common_request_params: nil)
          #   Pass arguments to `delete_object_access_control` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. Name of a bucket.
          #   @param entity [::String]
          #     Required. The entity holding the permission. Can be one of:
          #     * `user-`*userId*
          #     * `user-`*emailAddress*
          #     * `group-`*groupId*
          #     * `group-`*emailAddress*
          #     * `allUsers`
          #     * `allAuthenticatedUsers`
          #   @param object [::String]
          #     Required. Name of the object.
          #   @param generation [::Integer]
          #     If present, selects a specific revision of this object (as opposed to the
          #     latest version, the default).
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Protobuf::Empty]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Protobuf::Empty]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::DeleteObjectAccessControlRequest.new
          #
          #   # Call the delete_object_access_control method.
          #   result = client.delete_object_access_control request
          #
          #   # The returned object is of type Google::Protobuf::Empty.
          #   p result
          #
          def delete_object_access_control request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::DeleteObjectAccessControlRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.delete_object_access_control.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.delete_object_access_control.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.delete_object_access_control.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :delete_object_access_control, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Returns the ACL entry for the specified entity on the specified object.
          #
          # @overload get_object_access_control(request, options = nil)
          #   Pass arguments to `get_object_access_control` via a request object, either of type
          #   {::Google::Storage::V1::GetObjectAccessControlRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::GetObjectAccessControlRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload get_object_access_control(bucket: nil, entity: nil, object: nil, generation: nil, common_request_params: nil)
          #   Pass arguments to `get_object_access_control` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. Name of a bucket.
          #   @param entity [::String]
          #     Required. The entity holding the permission. Can be one of:
          #     * `user-`*userId*
          #     * `user-`*emailAddress*
          #     * `group-`*groupId*
          #     * `group-`*emailAddress*
          #     * `allUsers`
          #     * `allAuthenticatedUsers`
          #   @param object [::String]
          #     Required. Name of the object.
          #   @param generation [::Integer]
          #     If present, selects a specific revision of this object (as opposed to the
          #     latest version, the default).
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::ObjectAccessControl]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::ObjectAccessControl]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::GetObjectAccessControlRequest.new
          #
          #   # Call the get_object_access_control method.
          #   result = client.get_object_access_control request
          #
          #   # The returned object is of type Google::Storage::V1::ObjectAccessControl.
          #   p result
          #
          def get_object_access_control request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::GetObjectAccessControlRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.get_object_access_control.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.get_object_access_control.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.get_object_access_control.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :get_object_access_control, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Creates a new ACL entry on the specified object.
          #
          # @overload insert_object_access_control(request, options = nil)
          #   Pass arguments to `insert_object_access_control` via a request object, either of type
          #   {::Google::Storage::V1::InsertObjectAccessControlRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::InsertObjectAccessControlRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload insert_object_access_control(bucket: nil, object: nil, generation: nil, object_access_control: nil, common_request_params: nil)
          #   Pass arguments to `insert_object_access_control` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. Name of a bucket.
          #   @param object [::String]
          #     Required. Name of the object.
          #   @param generation [::Integer]
          #     If present, selects a specific revision of this object (as opposed to the
          #     latest version, the default).
          #   @param object_access_control [::Google::Storage::V1::ObjectAccessControl, ::Hash]
          #     Properties of the object access control to be inserted.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::ObjectAccessControl]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::ObjectAccessControl]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::InsertObjectAccessControlRequest.new
          #
          #   # Call the insert_object_access_control method.
          #   result = client.insert_object_access_control request
          #
          #   # The returned object is of type Google::Storage::V1::ObjectAccessControl.
          #   p result
          #
          def insert_object_access_control request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::InsertObjectAccessControlRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.insert_object_access_control.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.insert_object_access_control.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.insert_object_access_control.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :insert_object_access_control, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Retrieves ACL entries on the specified object.
          #
          # @overload list_object_access_controls(request, options = nil)
          #   Pass arguments to `list_object_access_controls` via a request object, either of type
          #   {::Google::Storage::V1::ListObjectAccessControlsRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::ListObjectAccessControlsRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload list_object_access_controls(bucket: nil, object: nil, generation: nil, common_request_params: nil)
          #   Pass arguments to `list_object_access_controls` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. Name of a bucket.
          #   @param object [::String]
          #     Required. Name of the object.
          #   @param generation [::Integer]
          #     If present, selects a specific revision of this object (as opposed to the
          #     latest version, the default).
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::ListObjectAccessControlsResponse]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::ListObjectAccessControlsResponse]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::ListObjectAccessControlsRequest.new
          #
          #   # Call the list_object_access_controls method.
          #   result = client.list_object_access_controls request
          #
          #   # The returned object is of type Google::Storage::V1::ListObjectAccessControlsResponse.
          #   p result
          #
          def list_object_access_controls request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::ListObjectAccessControlsRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.list_object_access_controls.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.list_object_access_controls.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.list_object_access_controls.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :list_object_access_controls, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Patches an ACL entry on the specified object.  Patch is similar to update,
          # but only applies or appends the specified fields in the
          # object_access_control object.  Other fields are unaffected.
          #
          # @overload patch_object_access_control(request, options = nil)
          #   Pass arguments to `patch_object_access_control` via a request object, either of type
          #   {::Google::Storage::V1::PatchObjectAccessControlRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::PatchObjectAccessControlRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload patch_object_access_control(bucket: nil, entity: nil, object: nil, generation: nil, object_access_control: nil, common_request_params: nil, update_mask: nil)
          #   Pass arguments to `patch_object_access_control` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. Name of a bucket.
          #   @param entity [::String]
          #     Required. The entity holding the permission. Can be one of:
          #     * `user-`*userId*
          #     * `user-`*emailAddress*
          #     * `group-`*groupId*
          #     * `group-`*emailAddress*
          #     * `allUsers`
          #     * `allAuthenticatedUsers`
          #   @param object [::String]
          #     Required. Name of the object.
          #     Required.
          #   @param generation [::Integer]
          #     If present, selects a specific revision of this object (as opposed to the
          #     latest version, the default).
          #   @param object_access_control [::Google::Storage::V1::ObjectAccessControl, ::Hash]
          #     The ObjectAccessControl for updating.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #   @param update_mask [::Google::Protobuf::FieldMask, ::Hash]
          #     List of fields to be updated.
          #
          #     To specify ALL fields, equivalent to the JSON API's "update" function,
          #     specify a single field with the value `*`. Note: not recommended. If a new
          #     field is introduced at a later time, an older client updating with the `*`
          #     may accidentally reset the new field's value.
          #
          #     Not specifying any fields is an error.
          #     Not specifying a field while setting that field to a non-default value is
          #     an error.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::ObjectAccessControl]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::ObjectAccessControl]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::PatchObjectAccessControlRequest.new
          #
          #   # Call the patch_object_access_control method.
          #   result = client.patch_object_access_control request
          #
          #   # The returned object is of type Google::Storage::V1::ObjectAccessControl.
          #   p result
          #
          def patch_object_access_control request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::PatchObjectAccessControlRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.patch_object_access_control.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.patch_object_access_control.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.patch_object_access_control.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :patch_object_access_control, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Updates an ACL entry on the specified object.
          #
          # @overload update_object_access_control(request, options = nil)
          #   Pass arguments to `update_object_access_control` via a request object, either of type
          #   {::Google::Storage::V1::UpdateObjectAccessControlRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::UpdateObjectAccessControlRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload update_object_access_control(bucket: nil, entity: nil, object: nil, generation: nil, object_access_control: nil, common_request_params: nil, update_mask: nil)
          #   Pass arguments to `update_object_access_control` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. Name of a bucket.
          #   @param entity [::String]
          #     Required. The entity holding the permission. Can be one of:
          #     * `user-`*userId*
          #     * `user-`*emailAddress*
          #     * `group-`*groupId*
          #     * `group-`*emailAddress*
          #     * `allUsers`
          #     * `allAuthenticatedUsers`
          #   @param object [::String]
          #     Required. Name of the object.
          #     Required.
          #   @param generation [::Integer]
          #     If present, selects a specific revision of this object (as opposed to the
          #     latest version, the default).
          #   @param object_access_control [::Google::Storage::V1::ObjectAccessControl, ::Hash]
          #     The ObjectAccessControl for updating.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #   @param update_mask [::Google::Protobuf::FieldMask, ::Hash]
          #     List of fields to be updated.
          #
          #     To specify ALL fields, equivalent to the JSON API's "update" function,
          #     specify a single field with the value `*`. Note: not recommended. If a new
          #     field is introduced at a later time, an older client updating with the `*`
          #     may accidentally reset the new field's value.
          #
          #     Not specifying any fields is an error.
          #     Not specifying a field while setting that field to a non-default value is
          #     an error.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::ObjectAccessControl]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::ObjectAccessControl]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::UpdateObjectAccessControlRequest.new
          #
          #   # Call the update_object_access_control method.
          #   result = client.update_object_access_control request
          #
          #   # The returned object is of type Google::Storage::V1::ObjectAccessControl.
          #   p result
          #
          def update_object_access_control request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::UpdateObjectAccessControlRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.update_object_access_control.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.update_object_access_control.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.update_object_access_control.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :update_object_access_control, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Concatenates a list of existing objects into a new object in the same
          # bucket.
          #
          # @overload compose_object(request, options = nil)
          #   Pass arguments to `compose_object` via a request object, either of type
          #   {::Google::Storage::V1::ComposeObjectRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::ComposeObjectRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload compose_object(destination_bucket: nil, destination_object: nil, destination_predefined_acl: nil, destination: nil, source_objects: nil, if_generation_match: nil, if_metageneration_match: nil, kms_key_name: nil, common_object_request_params: nil, common_request_params: nil)
          #   Pass arguments to `compose_object` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param destination_bucket [::String]
          #     Required. Name of the bucket containing the source objects. The destination object is
          #     stored in this bucket.
          #   @param destination_object [::String]
          #     Required. Name of the new object.
          #   @param destination_predefined_acl [::Google::Storage::V1::CommonEnums::PredefinedObjectAcl]
          #     Apply a predefined set of access controls to the destination object.
          #   @param destination [::Google::Storage::V1::Object, ::Hash]
          #     Properties of the resulting object.
          #   @param source_objects [::Array<::Google::Storage::V1::ComposeObjectRequest::SourceObjects, ::Hash>]
          #     The list of source objects that will be concatenated into a single object.
          #   @param if_generation_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the object's current generation
          #     matches the given value. Setting to 0 makes the operation succeed only if
          #     there are no live versions of the object.
          #   @param if_metageneration_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the object's current
          #     metageneration matches the given value.
          #   @param kms_key_name [::String]
          #     Resource name of the Cloud KMS key, of the form
          #     `projects/my-project/locations/my-location/keyRings/my-kr/cryptoKeys/my-key`,
          #     that will be used to encrypt the object. Overrides the object
          #     metadata's `kms_key_name` value, if any.
          #   @param common_object_request_params [::Google::Storage::V1::CommonObjectRequestParams, ::Hash]
          #     A set of parameters common to Storage API requests concerning an object.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::Object]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::Object]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::ComposeObjectRequest.new
          #
          #   # Call the compose_object method.
          #   result = client.compose_object request
          #
          #   # The returned object is of type Google::Storage::V1::Object.
          #   p result
          #
          def compose_object request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::ComposeObjectRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.compose_object.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.compose_object.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.compose_object.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :compose_object, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Copies a source object to a destination object. Optionally overrides
          # metadata.
          #
          # @overload copy_object(request, options = nil)
          #   Pass arguments to `copy_object` via a request object, either of type
          #   {::Google::Storage::V1::CopyObjectRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::CopyObjectRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload copy_object(destination_bucket: nil, destination_object: nil, destination_predefined_acl: nil, if_generation_match: nil, if_generation_not_match: nil, if_metageneration_match: nil, if_metageneration_not_match: nil, if_source_generation_match: nil, if_source_generation_not_match: nil, if_source_metageneration_match: nil, if_source_metageneration_not_match: nil, projection: nil, source_bucket: nil, source_object: nil, source_generation: nil, destination: nil, destination_kms_key_name: nil, common_object_request_params: nil, common_request_params: nil)
          #   Pass arguments to `copy_object` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param destination_bucket [::String]
          #     Required. Name of the bucket in which to store the new object. Overrides the provided
          #     object
          #     metadata's `bucket` value, if any.
          #   @param destination_object [::String]
          #     Required. Name of the new object.
          #     Required when the object metadata is not otherwise provided. Overrides the
          #     object metadata's `name` value, if any.
          #   @param destination_predefined_acl [::Google::Storage::V1::CommonEnums::PredefinedObjectAcl]
          #     Apply a predefined set of access controls to the destination object.
          #   @param if_generation_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the destination object's current
          #     generation matches the given value. Setting to 0 makes the operation
          #     succeed only if there are no live versions of the object.
          #   @param if_generation_not_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the destination object's current
          #     generation does not match the given value. If no live object exists, the
          #     precondition fails. Setting to 0 makes the operation succeed only if there
          #     is a live version of the object.
          #   @param if_metageneration_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the destination object's current
          #     metageneration matches the given value.
          #   @param if_metageneration_not_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the destination object's current
          #     metageneration does not match the given value.
          #   @param if_source_generation_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the source object's current
          #     generation matches the given value.
          #   @param if_source_generation_not_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the source object's current
          #     generation does not match the given value.
          #   @param if_source_metageneration_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the source object's current
          #     metageneration matches the given value.
          #   @param if_source_metageneration_not_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the source object's current
          #     metageneration does not match the given value.
          #   @param projection [::Google::Storage::V1::CommonEnums::Projection]
          #     Set of properties to return. Defaults to `NO_ACL`, unless the
          #     object resource specifies the `acl` property, when it defaults
          #     to `full`.
          #   @param source_bucket [::String]
          #     Required. Name of the bucket in which to find the source object.
          #   @param source_object [::String]
          #     Required. Name of the source object.
          #   @param source_generation [::Integer]
          #     If present, selects a specific revision of the source object (as opposed to
          #     the latest version, the default).
          #   @param destination [::Google::Storage::V1::Object, ::Hash]
          #     Properties of the resulting object. If not set, duplicate properties of
          #     source object.
          #   @param destination_kms_key_name [::String]
          #     Resource name of the Cloud KMS key, of the form
          #     `projects/my-project/locations/my-location/keyRings/my-kr/cryptoKeys/my-key`,
          #     that will be used to encrypt the object. Overrides the object
          #     metadata's `kms_key_name` value, if any.
          #   @param common_object_request_params [::Google::Storage::V1::CommonObjectRequestParams, ::Hash]
          #     A set of parameters common to Storage API requests concerning an object.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::Object]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::Object]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::CopyObjectRequest.new
          #
          #   # Call the copy_object method.
          #   result = client.copy_object request
          #
          #   # The returned object is of type Google::Storage::V1::Object.
          #   p result
          #
          def copy_object request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::CopyObjectRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.copy_object.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.copy_object.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.copy_object.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :copy_object, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Deletes an object and its metadata. Deletions are permanent if versioning
          # is not enabled for the bucket, or if the `generation` parameter
          # is used.
          #
          # @overload delete_object(request, options = nil)
          #   Pass arguments to `delete_object` via a request object, either of type
          #   {::Google::Storage::V1::DeleteObjectRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::DeleteObjectRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload delete_object(bucket: nil, object: nil, upload_id: nil, generation: nil, if_generation_match: nil, if_generation_not_match: nil, if_metageneration_match: nil, if_metageneration_not_match: nil, common_object_request_params: nil, common_request_params: nil)
          #   Pass arguments to `delete_object` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. Name of the bucket in which the object resides.
          #   @param object [::String]
          #     Required. The name of the object to delete (when not using a resumable write).
          #   @param upload_id [::String]
          #     The resumable upload_id of the object to delete (when using a
          #     resumable write). This should be copied from the `upload_id` field of
          #     `StartResumableWriteResponse`.
          #   @param generation [::Integer]
          #     If present, permanently deletes a specific revision of this object (as
          #     opposed to the latest version, the default).
          #   @param if_generation_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the object's current generation
          #     matches the given value. Setting to 0 makes the operation succeed only if
          #     there are no live versions of the object.
          #   @param if_generation_not_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the object's current generation
          #     does not match the given value. If no live object exists, the precondition
          #     fails. Setting to 0 makes the operation succeed only if there is a live
          #     version of the object.
          #   @param if_metageneration_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the object's current
          #     metageneration matches the given value.
          #   @param if_metageneration_not_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the object's current
          #     metageneration does not match the given value.
          #   @param common_object_request_params [::Google::Storage::V1::CommonObjectRequestParams, ::Hash]
          #     A set of parameters common to Storage API requests concerning an object.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Protobuf::Empty]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Protobuf::Empty]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::DeleteObjectRequest.new
          #
          #   # Call the delete_object method.
          #   result = client.delete_object request
          #
          #   # The returned object is of type Google::Protobuf::Empty.
          #   p result
          #
          def delete_object request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::DeleteObjectRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.delete_object.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.delete_object.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.delete_object.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :delete_object, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Retrieves an object's metadata.
          #
          # @overload get_object(request, options = nil)
          #   Pass arguments to `get_object` via a request object, either of type
          #   {::Google::Storage::V1::GetObjectRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::GetObjectRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload get_object(bucket: nil, object: nil, generation: nil, if_generation_match: nil, if_generation_not_match: nil, if_metageneration_match: nil, if_metageneration_not_match: nil, projection: nil, common_object_request_params: nil, common_request_params: nil)
          #   Pass arguments to `get_object` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. Name of the bucket in which the object resides.
          #   @param object [::String]
          #     Required. Name of the object.
          #   @param generation [::Integer]
          #     If present, selects a specific revision of this object (as opposed to the
          #     latest version, the default).
          #   @param if_generation_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the object's current generation
          #     matches the given value. Setting to 0 makes the operation succeed only if
          #     there are no live versions of the object.
          #   @param if_generation_not_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the object's current generation
          #     does not match the given value. If no live object exists, the precondition
          #     fails. Setting to 0 makes the operation succeed only if there is a live
          #     version of the object.
          #   @param if_metageneration_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the object's current
          #     metageneration matches the given value.
          #   @param if_metageneration_not_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the object's current
          #     metageneration does not match the given value.
          #   @param projection [::Google::Storage::V1::CommonEnums::Projection]
          #     Set of properties to return. Defaults to `NO_ACL`.
          #   @param common_object_request_params [::Google::Storage::V1::CommonObjectRequestParams, ::Hash]
          #     A set of parameters common to Storage API requests concerning an object.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::Object]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::Object]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::GetObjectRequest.new
          #
          #   # Call the get_object method.
          #   result = client.get_object request
          #
          #   # The returned object is of type Google::Storage::V1::Object.
          #   p result
          #
          def get_object request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::GetObjectRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.get_object.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.get_object.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.get_object.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :get_object, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Reads an object's data.
          #
          # @overload get_object_media(request, options = nil)
          #   Pass arguments to `get_object_media` via a request object, either of type
          #   {::Google::Storage::V1::GetObjectMediaRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::GetObjectMediaRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload get_object_media(bucket: nil, object: nil, generation: nil, read_offset: nil, read_limit: nil, if_generation_match: nil, if_generation_not_match: nil, if_metageneration_match: nil, if_metageneration_not_match: nil, common_object_request_params: nil, common_request_params: nil)
          #   Pass arguments to `get_object_media` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     The name of the bucket containing the object to read.
          #   @param object [::String]
          #     The name of the object to read.
          #   @param generation [::Integer]
          #     If present, selects a specific revision of this object (as opposed
          #     to the latest version, the default).
          #   @param read_offset [::Integer]
          #     The offset for the first byte to return in the read, relative to the start
          #     of the object.
          #
          #     A negative `read_offset` value will be interpreted as the number of bytes
          #     back from the end of the object to be returned. For example, if an object's
          #     length is 15 bytes, a GetObjectMediaRequest with `read_offset` = -5 and
          #     `read_limit` = 3 would return bytes 10 through 12 of the object.
          #   @param read_limit [::Integer]
          #     The maximum number of `data` bytes the server is allowed to return in the
          #     sum of all `Object` messages. A `read_limit` of zero indicates that there
          #     is no limit, and a negative `read_limit` will cause an error.
          #
          #     If the stream returns fewer bytes than allowed by the `read_limit` and no
          #     error occurred, the stream includes all data from the `read_offset` to the
          #     end of the resource.
          #   @param if_generation_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the object's current generation
          #     matches the given value. Setting to 0 makes the operation succeed only if
          #     there are no live versions of the object.
          #   @param if_generation_not_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the object's current generation
          #     does not match the given value. If no live object exists, the precondition
          #     fails. Setting to 0 makes the operation succeed only if there is a live
          #     version of the object.
          #   @param if_metageneration_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the object's current
          #     metageneration matches the given value.
          #   @param if_metageneration_not_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the object's current
          #     metageneration does not match the given value.
          #   @param common_object_request_params [::Google::Storage::V1::CommonObjectRequestParams, ::Hash]
          #     A set of parameters common to Storage API requests concerning an object.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Enumerable<::Google::Storage::V1::GetObjectMediaResponse>]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Enumerable<::Google::Storage::V1::GetObjectMediaResponse>]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::GetObjectMediaRequest.new
          #
          #   # Call the get_object_media method.
          #   result = client.get_object_media request
          #
          #   # The returned object is a streamed enumerable yielding elements of
          #   # type ::Google::Storage::V1::GetObjectMediaResponse.
          #   result.each do |response|
          #     p response
          #   end
          #
          def get_object_media request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::GetObjectMediaRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.get_object_media.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.get_object_media.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.get_object_media.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :get_object_media, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Stores a new object and metadata.
          #
          # An object can be written either in a single message stream or in a
          # resumable sequence of message streams. To write using a single stream,
          # the client should include in the first message of the stream an
          # `InsertObjectSpec` describing the destination bucket, object, and any
          # preconditions. Additionally, the final message must set 'finish_write' to
          # true, or else it is an error.
          #
          # For a resumable write, the client should instead call
          # `StartResumableWrite()` and provide that method an `InsertObjectSpec.`
          # They should then attach the returned `upload_id` to the first message of
          # each following call to `Insert`. If there is an error or the connection is
          # broken during the resumable `Insert()`, the client should check the status
          # of the `Insert()` by calling `QueryWriteStatus()` and continue writing from
          # the returned `committed_size`. This may be less than the amount of data the
          # client previously sent.
          #
          # The service will not view the object as complete until the client has
          # sent an `Insert` with `finish_write` set to `true`. Sending any
          # requests on a stream after sending a request with `finish_write` set to
          # `true` will cause an error. The client **should** check the
          # `Object` it receives to determine how much data the service was
          # able to commit and whether the service views the object as complete.
          #
          # @param request [::Gapic::StreamInput, ::Enumerable<::Google::Storage::V1::InsertObjectRequest, ::Hash>]
          #   An enumerable of {::Google::Storage::V1::InsertObjectRequest} instances.
          # @param options [::Gapic::CallOptions, ::Hash]
          #   Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::Object]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::Object]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a stream of requests, as an Enumerator.
          #   # For each request, pass in keyword arguments to set fields.
          #   request = [
          #     Google::Storage::V1::InsertObjectRequest.new,
          #     Google::Storage::V1::InsertObjectRequest.new
          #   ].to_enum
          #
          #   # Call the insert_object method.
          #   result = client.insert_object request
          #
          #   # The returned object is of type Google::Storage::V1::Object.
          #   p result
          #
          def insert_object request, options = nil
            unless request.is_a? ::Enumerable
              raise ::ArgumentError, "request must be an Enumerable" unless request.respond_to? :to_enum
              request = request.to_enum
            end

            request = request.lazy.map do |req|
              ::Gapic::Protobuf.coerce req, to: ::Google::Storage::V1::InsertObjectRequest
            end

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.insert_object.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.insert_object.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.insert_object.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :insert_object, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Retrieves a list of objects matching the criteria.
          #
          # @overload list_objects(request, options = nil)
          #   Pass arguments to `list_objects` via a request object, either of type
          #   {::Google::Storage::V1::ListObjectsRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::ListObjectsRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload list_objects(bucket: nil, delimiter: nil, include_trailing_delimiter: nil, max_results: nil, page_token: nil, prefix: nil, projection: nil, versions: nil, common_request_params: nil)
          #   Pass arguments to `list_objects` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. Name of the bucket in which to look for objects.
          #   @param delimiter [::String]
          #     Returns results in a directory-like mode. `items` will contain
          #     only objects whose names, aside from the `prefix`, do not
          #     contain `delimiter`. Objects whose names, aside from the
          #     `prefix`, contain `delimiter` will have their name,
          #     truncated after the `delimiter`, returned in
          #     `prefixes`. Duplicate `prefixes` are omitted.
          #   @param include_trailing_delimiter [::Boolean]
          #     If true, objects that end in exactly one instance of `delimiter`
          #     will have their metadata included in `items` in addition to
          #     `prefixes`.
          #   @param max_results [::Integer]
          #     Maximum number of `items` plus `prefixes` to return
          #     in a single page of responses. As duplicate `prefixes` are
          #     omitted, fewer total results may be returned than requested. The service
          #     will use this parameter or 1,000 items, whichever is smaller.
          #   @param page_token [::String]
          #     A previously-returned page token representing part of the larger set of
          #     results to view.
          #   @param prefix [::String]
          #     Filter results to objects whose names begin with this prefix.
          #   @param projection [::Google::Storage::V1::CommonEnums::Projection]
          #     Set of properties to return. Defaults to `NO_ACL`.
          #   @param versions [::Boolean]
          #     If `true`, lists all versions of an object as distinct results.
          #     The default is `false`. For more information, see
          #     [Object
          #     Versioning](https://cloud.google.com/storage/docs/object-versioning).
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::ListObjectsResponse]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::ListObjectsResponse]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::ListObjectsRequest.new
          #
          #   # Call the list_objects method.
          #   result = client.list_objects request
          #
          #   # The returned object is of type Google::Storage::V1::ListObjectsResponse.
          #   p result
          #
          def list_objects request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::ListObjectsRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.list_objects.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.list_objects.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.list_objects.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :list_objects, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Rewrites a source object to a destination object. Optionally overrides
          # metadata.
          #
          # @overload rewrite_object(request, options = nil)
          #   Pass arguments to `rewrite_object` via a request object, either of type
          #   {::Google::Storage::V1::RewriteObjectRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::RewriteObjectRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload rewrite_object(destination_bucket: nil, destination_object: nil, destination_kms_key_name: nil, destination_predefined_acl: nil, if_generation_match: nil, if_generation_not_match: nil, if_metageneration_match: nil, if_metageneration_not_match: nil, if_source_generation_match: nil, if_source_generation_not_match: nil, if_source_metageneration_match: nil, if_source_metageneration_not_match: nil, max_bytes_rewritten_per_call: nil, projection: nil, rewrite_token: nil, source_bucket: nil, source_object: nil, source_generation: nil, object: nil, copy_source_encryption_algorithm: nil, copy_source_encryption_key: nil, copy_source_encryption_key_sha256: nil, common_object_request_params: nil, common_request_params: nil)
          #   Pass arguments to `rewrite_object` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param destination_bucket [::String]
          #     Required. Name of the bucket in which to store the new object. Overrides the provided
          #     object metadata's `bucket` value, if any.
          #   @param destination_object [::String]
          #     Required. Name of the new object.
          #     Required when the object metadata is not otherwise provided. Overrides the
          #     object metadata's `name` value, if any.
          #   @param destination_kms_key_name [::String]
          #     Resource name of the Cloud KMS key, of the form
          #     `projects/my-project/locations/my-location/keyRings/my-kr/cryptoKeys/my-key`,
          #     that will be used to encrypt the object. Overrides the object
          #     metadata's `kms_key_name` value, if any.
          #   @param destination_predefined_acl [::Google::Storage::V1::CommonEnums::PredefinedObjectAcl]
          #     Apply a predefined set of access controls to the destination object.
          #   @param if_generation_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the object's current generation
          #     matches the given value. Setting to 0 makes the operation succeed only if
          #     there are no live versions of the object.
          #   @param if_generation_not_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the object's current generation
          #     does not match the given value. If no live object exists, the precondition
          #     fails. Setting to 0 makes the operation succeed only if there is a live
          #     version of the object.
          #   @param if_metageneration_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the destination object's current
          #     metageneration matches the given value.
          #   @param if_metageneration_not_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the destination object's current
          #     metageneration does not match the given value.
          #   @param if_source_generation_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the source object's current
          #     generation matches the given value.
          #   @param if_source_generation_not_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the source object's current
          #     generation does not match the given value.
          #   @param if_source_metageneration_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the source object's current
          #     metageneration matches the given value.
          #   @param if_source_metageneration_not_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the source object's current
          #     metageneration does not match the given value.
          #   @param max_bytes_rewritten_per_call [::Integer]
          #     The maximum number of bytes that will be rewritten per rewrite request.
          #     Most callers
          #     shouldn't need to specify this parameter - it is primarily in place to
          #     support testing. If specified the value must be an integral multiple of
          #     1 MiB (1048576). Also, this only applies to requests where the source and
          #     destination span locations and/or storage classes. Finally, this value must
          #     not change across rewrite calls else you'll get an error that the
          #     `rewriteToken` is invalid.
          #   @param projection [::Google::Storage::V1::CommonEnums::Projection]
          #     Set of properties to return. Defaults to `NO_ACL`, unless the
          #     object resource specifies the `acl` property, when it defaults
          #     to `full`.
          #   @param rewrite_token [::String]
          #     Include this field (from the previous rewrite response) on each rewrite
          #     request after the first one, until the rewrite response 'done' flag is
          #     true. Calls that provide a rewriteToken can omit all other request fields,
          #     but if included those fields must match the values provided in the first
          #     rewrite request.
          #   @param source_bucket [::String]
          #     Required. Name of the bucket in which to find the source object.
          #   @param source_object [::String]
          #     Required. Name of the source object.
          #   @param source_generation [::Integer]
          #     If present, selects a specific revision of the source object (as opposed to
          #     the latest version, the default).
          #   @param object [::Google::Storage::V1::Object, ::Hash]
          #     Properties of the destination, post-rewrite object.
          #   @param copy_source_encryption_algorithm [::String]
          #     The algorithm used to encrypt the source object, if any.
          #   @param copy_source_encryption_key [::String]
          #     The encryption key used to encrypt the source object, if any.
          #   @param copy_source_encryption_key_sha256 [::String]
          #     The SHA-256 hash of the key used to encrypt the source object, if any.
          #   @param common_object_request_params [::Google::Storage::V1::CommonObjectRequestParams, ::Hash]
          #     A set of parameters common to Storage API requests concerning an object.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::RewriteResponse]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::RewriteResponse]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::RewriteObjectRequest.new
          #
          #   # Call the rewrite_object method.
          #   result = client.rewrite_object request
          #
          #   # The returned object is of type Google::Storage::V1::RewriteResponse.
          #   p result
          #
          def rewrite_object request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::RewriteObjectRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.rewrite_object.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.rewrite_object.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.rewrite_object.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :rewrite_object, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Starts a resumable write. How long the write operation remains valid, and
          # what happens when the write operation becomes invalid, are
          # service-dependent.
          #
          # @overload start_resumable_write(request, options = nil)
          #   Pass arguments to `start_resumable_write` via a request object, either of type
          #   {::Google::Storage::V1::StartResumableWriteRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::StartResumableWriteRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload start_resumable_write(insert_object_spec: nil, common_object_request_params: nil, common_request_params: nil)
          #   Pass arguments to `start_resumable_write` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param insert_object_spec [::Google::Storage::V1::InsertObjectSpec, ::Hash]
          #     The destination bucket, object, and metadata, as well as any preconditions.
          #   @param common_object_request_params [::Google::Storage::V1::CommonObjectRequestParams, ::Hash]
          #     A set of parameters common to Storage API requests concerning an object.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::StartResumableWriteResponse]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::StartResumableWriteResponse]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::StartResumableWriteRequest.new
          #
          #   # Call the start_resumable_write method.
          #   result = client.start_resumable_write request
          #
          #   # The returned object is of type Google::Storage::V1::StartResumableWriteResponse.
          #   p result
          #
          def start_resumable_write request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::StartResumableWriteRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.start_resumable_write.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.start_resumable_write.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.start_resumable_write.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :start_resumable_write, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Determines the `committed_size` for an object that is being written, which
          # can then be used as the `write_offset` for the next `Write()` call.
          #
          # If the object does not exist (i.e., the object has been deleted, or the
          # first `Write()` has not yet reached the service), this method returns the
          # error `NOT_FOUND`.
          #
          # The client **may** call `QueryWriteStatus()` at any time to determine how
          # much data has been processed for this object. This is useful if the
          # client is buffering data and needs to know which data can be safely
          # evicted. For any sequence of `QueryWriteStatus()` calls for a given
          # object name, the sequence of returned `committed_size` values will be
          # non-decreasing.
          #
          # @overload query_write_status(request, options = nil)
          #   Pass arguments to `query_write_status` via a request object, either of type
          #   {::Google::Storage::V1::QueryWriteStatusRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::QueryWriteStatusRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload query_write_status(upload_id: nil, common_object_request_params: nil, common_request_params: nil)
          #   Pass arguments to `query_write_status` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param upload_id [::String]
          #     Required. The name of the resume token for the object whose write status is being
          #     requested.
          #   @param common_object_request_params [::Google::Storage::V1::CommonObjectRequestParams, ::Hash]
          #     A set of parameters common to Storage API requests concerning an object.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::QueryWriteStatusResponse]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::QueryWriteStatusResponse]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::QueryWriteStatusRequest.new
          #
          #   # Call the query_write_status method.
          #   result = client.query_write_status request
          #
          #   # The returned object is of type Google::Storage::V1::QueryWriteStatusResponse.
          #   p result
          #
          def query_write_status request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::QueryWriteStatusRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.query_write_status.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.query_write_status.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.query_write_status.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :query_write_status, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Updates an object's metadata.
          #
          # @overload patch_object(request, options = nil)
          #   Pass arguments to `patch_object` via a request object, either of type
          #   {::Google::Storage::V1::PatchObjectRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::PatchObjectRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload patch_object(bucket: nil, object: nil, generation: nil, if_generation_match: nil, if_generation_not_match: nil, if_metageneration_match: nil, if_metageneration_not_match: nil, predefined_acl: nil, projection: nil, metadata: nil, update_mask: nil, common_object_request_params: nil, common_request_params: nil)
          #   Pass arguments to `patch_object` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. Name of the bucket in which the object resides.
          #   @param object [::String]
          #     Required. Name of the object.
          #   @param generation [::Integer]
          #     If present, selects a specific revision of this object (as opposed to the
          #     latest version, the default).
          #   @param if_generation_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the object's current generation
          #     matches the given value. Setting to 0 makes the operation succeed only if
          #     there are no live versions of the object.
          #   @param if_generation_not_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the object's current generation
          #     does not match the given value. If no live object exists, the precondition
          #     fails. Setting to 0 makes the operation succeed only if there is a live
          #     version of the object.
          #   @param if_metageneration_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the object's current
          #     metageneration matches the given value.
          #   @param if_metageneration_not_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the object's current
          #     metageneration does not match the given value.
          #   @param predefined_acl [::Google::Storage::V1::CommonEnums::PredefinedObjectAcl]
          #     Apply a predefined set of access controls to this object.
          #   @param projection [::Google::Storage::V1::CommonEnums::Projection]
          #     Set of properties to return. Defaults to `FULL`.
          #   @param metadata [::Google::Storage::V1::Object, ::Hash]
          #     The Object metadata for updating.
          #   @param update_mask [::Google::Protobuf::FieldMask, ::Hash]
          #     List of fields to be updated.
          #
          #     To specify ALL fields, equivalent to the JSON API's "update" function,
          #     specify a single field with the value `*`. Note: not recommended. If a new
          #     field is introduced at a later time, an older client updating with the `*`
          #     may accidentally reset the new field's value.
          #
          #     Not specifying any fields is an error.
          #     Not specifying a field while setting that field to a non-default value is
          #     an error.
          #   @param common_object_request_params [::Google::Storage::V1::CommonObjectRequestParams, ::Hash]
          #     A set of parameters common to Storage API requests concerning an object.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::Object]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::Object]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::PatchObjectRequest.new
          #
          #   # Call the patch_object method.
          #   result = client.patch_object request
          #
          #   # The returned object is of type Google::Storage::V1::Object.
          #   p result
          #
          def patch_object request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::PatchObjectRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.patch_object.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.patch_object.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.patch_object.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :patch_object, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Updates an object's metadata. Equivalent to PatchObject, but always
          # replaces all mutatable fields of the bucket with new values, reverting all
          # unspecified fields to their default values.
          #
          # @overload update_object(request, options = nil)
          #   Pass arguments to `update_object` via a request object, either of type
          #   {::Google::Storage::V1::UpdateObjectRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::UpdateObjectRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload update_object(bucket: nil, object: nil, generation: nil, if_generation_match: nil, if_generation_not_match: nil, if_metageneration_match: nil, if_metageneration_not_match: nil, predefined_acl: nil, projection: nil, metadata: nil, common_object_request_params: nil, common_request_params: nil)
          #   Pass arguments to `update_object` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Required. Name of the bucket in which the object resides.
          #   @param object [::String]
          #     Required. Name of the object.
          #   @param generation [::Integer]
          #     If present, selects a specific revision of this object (as opposed to the
          #     latest version, the default).
          #   @param if_generation_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the object's current generation
          #     matches the given value. Setting to 0 makes the operation succeed only if
          #     there are no live versions of the object.
          #   @param if_generation_not_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the object's current generation
          #     does not match the given value. If no live object exists, the precondition
          #     fails. Setting to 0 makes the operation succeed only if there is a live
          #     version of the object.
          #   @param if_metageneration_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the object's current
          #     metageneration matches the given value.
          #   @param if_metageneration_not_match [::Google::Protobuf::Int64Value, ::Hash]
          #     Makes the operation conditional on whether the object's current
          #     metageneration does not match the given value.
          #   @param predefined_acl [::Google::Storage::V1::CommonEnums::PredefinedObjectAcl]
          #     Apply a predefined set of access controls to this object.
          #   @param projection [::Google::Storage::V1::CommonEnums::Projection]
          #     Set of properties to return. Defaults to `FULL`.
          #   @param metadata [::Google::Storage::V1::Object, ::Hash]
          #     The Object metadata for updating.
          #   @param common_object_request_params [::Google::Storage::V1::CommonObjectRequestParams, ::Hash]
          #     A set of parameters common to Storage API requests concerning an object.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::Object]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::Object]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::UpdateObjectRequest.new
          #
          #   # Call the update_object method.
          #   result = client.update_object request
          #
          #   # The returned object is of type Google::Storage::V1::Object.
          #   p result
          #
          def update_object request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::UpdateObjectRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.update_object.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.update_object.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.update_object.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :update_object, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Gets the IAM policy for the specified object.
          #
          # @overload get_object_iam_policy(request, options = nil)
          #   Pass arguments to `get_object_iam_policy` via a request object, either of type
          #   {::Google::Storage::V1::GetIamPolicyRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::GetIamPolicyRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload get_object_iam_policy(iam_request: nil, common_request_params: nil)
          #   Pass arguments to `get_object_iam_policy` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param iam_request [::Google::Iam::V1::GetIamPolicyRequest, ::Hash]
          #     The request sent to IAM.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Iam::V1::Policy]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Iam::V1::Policy]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::GetIamPolicyRequest.new
          #
          #   # Call the get_object_iam_policy method.
          #   result = client.get_object_iam_policy request
          #
          #   # The returned object is of type Google::Iam::V1::Policy.
          #   p result
          #
          def get_object_iam_policy request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::GetIamPolicyRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.get_object_iam_policy.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.get_object_iam_policy.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.get_object_iam_policy.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :get_object_iam_policy, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Updates an IAM policy for the specified object.
          #
          # @overload set_object_iam_policy(request, options = nil)
          #   Pass arguments to `set_object_iam_policy` via a request object, either of type
          #   {::Google::Storage::V1::SetIamPolicyRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::SetIamPolicyRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload set_object_iam_policy(iam_request: nil, common_request_params: nil)
          #   Pass arguments to `set_object_iam_policy` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param iam_request [::Google::Iam::V1::SetIamPolicyRequest, ::Hash]
          #     The request sent to IAM.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Iam::V1::Policy]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Iam::V1::Policy]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::SetIamPolicyRequest.new
          #
          #   # Call the set_object_iam_policy method.
          #   result = client.set_object_iam_policy request
          #
          #   # The returned object is of type Google::Iam::V1::Policy.
          #   p result
          #
          def set_object_iam_policy request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::SetIamPolicyRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.set_object_iam_policy.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.set_object_iam_policy.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.set_object_iam_policy.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :set_object_iam_policy, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Tests a set of permissions on the given object to see which, if
          # any, are held by the caller.
          #
          # @overload test_object_iam_permissions(request, options = nil)
          #   Pass arguments to `test_object_iam_permissions` via a request object, either of type
          #   {::Google::Storage::V1::TestIamPermissionsRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::TestIamPermissionsRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload test_object_iam_permissions(iam_request: nil, common_request_params: nil)
          #   Pass arguments to `test_object_iam_permissions` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param iam_request [::Google::Iam::V1::TestIamPermissionsRequest, ::Hash]
          #     The request sent to IAM.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Iam::V1::TestIamPermissionsResponse]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Iam::V1::TestIamPermissionsResponse]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::TestIamPermissionsRequest.new
          #
          #   # Call the test_object_iam_permissions method.
          #   result = client.test_object_iam_permissions request
          #
          #   # The returned object is of type Google::Iam::V1::TestIamPermissionsResponse.
          #   p result
          #
          def test_object_iam_permissions request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::TestIamPermissionsRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.test_object_iam_permissions.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.test_object_iam_permissions.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.test_object_iam_permissions.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :test_object_iam_permissions, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Watch for changes on all objects in a bucket.
          #
          # @overload watch_all_objects(request, options = nil)
          #   Pass arguments to `watch_all_objects` via a request object, either of type
          #   {::Google::Storage::V1::WatchAllObjectsRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::WatchAllObjectsRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload watch_all_objects(bucket: nil, versions: nil, delimiter: nil, max_results: nil, prefix: nil, include_trailing_delimiter: nil, page_token: nil, projection: nil, channel: nil, common_request_params: nil)
          #   Pass arguments to `watch_all_objects` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     Name of the bucket in which to look for objects.
          #   @param versions [::Boolean]
          #     If `true`, lists all versions of an object as distinct results.
          #     The default is `false`. For more information, see
          #     [Object
          #     Versioning](https://cloud.google.com/storage/docs/object-versioning).
          #   @param delimiter [::String]
          #     Returns results in a directory-like mode. `items` will contain
          #     only objects whose names, aside from the `prefix`, do not
          #     contain `delimiter`. Objects whose names, aside from the
          #     `prefix`, contain `delimiter` will have their name,
          #     truncated after the `delimiter`, returned in
          #     `prefixes`. Duplicate `prefixes` are omitted.
          #   @param max_results [::Integer]
          #     Maximum number of `items` plus `prefixes` to return
          #     in a single page of responses. As duplicate `prefixes` are
          #     omitted, fewer total results may be returned than requested. The service
          #     will use this parameter or 1,000 items, whichever is smaller.
          #   @param prefix [::String]
          #     Filter results to objects whose names begin with this prefix.
          #   @param include_trailing_delimiter [::Boolean]
          #     If true, objects that end in exactly one instance of `delimiter`
          #     will have their metadata included in `items` in addition to
          #     `prefixes`.
          #   @param page_token [::String]
          #     A previously-returned page token representing part of the larger set of
          #     results to view.
          #   @param projection [::Google::Storage::V1::CommonEnums::Projection]
          #     Set of properties to return. Defaults to `NO_ACL`.
          #   @param channel [::Google::Storage::V1::Channel, ::Hash]
          #     Properties of the channel to be inserted.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::Channel]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::Channel]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::WatchAllObjectsRequest.new
          #
          #   # Call the watch_all_objects method.
          #   result = client.watch_all_objects request
          #
          #   # The returned object is of type Google::Storage::V1::Channel.
          #   p result
          #
          def watch_all_objects request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::WatchAllObjectsRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.watch_all_objects.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.watch_all_objects.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.watch_all_objects.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :watch_all_objects, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Retrieves the name of a project's Google Cloud Storage service account.
          #
          # @overload get_service_account(request, options = nil)
          #   Pass arguments to `get_service_account` via a request object, either of type
          #   {::Google::Storage::V1::GetProjectServiceAccountRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::GetProjectServiceAccountRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload get_service_account(project_id: nil, common_request_params: nil)
          #   Pass arguments to `get_service_account` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param project_id [::String]
          #     Required. Project ID.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::ServiceAccount]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::ServiceAccount]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::GetProjectServiceAccountRequest.new
          #
          #   # Call the get_service_account method.
          #   result = client.get_service_account request
          #
          #   # The returned object is of type Google::Storage::V1::ServiceAccount.
          #   p result
          #
          def get_service_account request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::GetProjectServiceAccountRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.get_service_account.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.get_service_account.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.get_service_account.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :get_service_account, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Creates a new HMAC key for the given service account.
          #
          # @overload create_hmac_key(request, options = nil)
          #   Pass arguments to `create_hmac_key` via a request object, either of type
          #   {::Google::Storage::V1::CreateHmacKeyRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::CreateHmacKeyRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload create_hmac_key(project_id: nil, service_account_email: nil, common_request_params: nil)
          #   Pass arguments to `create_hmac_key` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param project_id [::String]
          #     Required. The project that the HMAC-owning service account lives in.
          #   @param service_account_email [::String]
          #     Required. The service account to create the HMAC for.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::CreateHmacKeyResponse]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::CreateHmacKeyResponse]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::CreateHmacKeyRequest.new
          #
          #   # Call the create_hmac_key method.
          #   result = client.create_hmac_key request
          #
          #   # The returned object is of type Google::Storage::V1::CreateHmacKeyResponse.
          #   p result
          #
          def create_hmac_key request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::CreateHmacKeyRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.create_hmac_key.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.create_hmac_key.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.create_hmac_key.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :create_hmac_key, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Deletes a given HMAC key.  Key must be in an INACTIVE state.
          #
          # @overload delete_hmac_key(request, options = nil)
          #   Pass arguments to `delete_hmac_key` via a request object, either of type
          #   {::Google::Storage::V1::DeleteHmacKeyRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::DeleteHmacKeyRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload delete_hmac_key(access_id: nil, project_id: nil, common_request_params: nil)
          #   Pass arguments to `delete_hmac_key` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param access_id [::String]
          #     Required. The identifying key for the HMAC to delete.
          #   @param project_id [::String]
          #     Required. The project id the HMAC key lies in.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Protobuf::Empty]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Protobuf::Empty]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::DeleteHmacKeyRequest.new
          #
          #   # Call the delete_hmac_key method.
          #   result = client.delete_hmac_key request
          #
          #   # The returned object is of type Google::Protobuf::Empty.
          #   p result
          #
          def delete_hmac_key request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::DeleteHmacKeyRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.delete_hmac_key.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.delete_hmac_key.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.delete_hmac_key.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :delete_hmac_key, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Gets an existing HMAC key metadata for the given id.
          #
          # @overload get_hmac_key(request, options = nil)
          #   Pass arguments to `get_hmac_key` via a request object, either of type
          #   {::Google::Storage::V1::GetHmacKeyRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::GetHmacKeyRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload get_hmac_key(access_id: nil, project_id: nil, common_request_params: nil)
          #   Pass arguments to `get_hmac_key` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param access_id [::String]
          #     Required. The identifying key for the HMAC to delete.
          #   @param project_id [::String]
          #     Required. The project id the HMAC key lies in.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::HmacKeyMetadata]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::HmacKeyMetadata]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::GetHmacKeyRequest.new
          #
          #   # Call the get_hmac_key method.
          #   result = client.get_hmac_key request
          #
          #   # The returned object is of type Google::Storage::V1::HmacKeyMetadata.
          #   p result
          #
          def get_hmac_key request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::GetHmacKeyRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.get_hmac_key.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.get_hmac_key.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.get_hmac_key.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :get_hmac_key, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Lists HMAC keys under a given project with the additional filters provided.
          #
          # @overload list_hmac_keys(request, options = nil)
          #   Pass arguments to `list_hmac_keys` via a request object, either of type
          #   {::Google::Storage::V1::ListHmacKeysRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::ListHmacKeysRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload list_hmac_keys(project_id: nil, service_account_email: nil, show_deleted_keys: nil, max_results: nil, page_token: nil, common_request_params: nil)
          #   Pass arguments to `list_hmac_keys` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param project_id [::String]
          #     Required. The project id to list HMAC keys for.
          #   @param service_account_email [::String]
          #     An optional filter to only return HMAC keys for one service account.
          #   @param show_deleted_keys [::Boolean]
          #     An optional bool to return deleted keys that have not been wiped out yet.
          #   @param max_results [::Integer]
          #     The maximum number of keys to return.
          #   @param page_token [::String]
          #     A previously returned token from ListHmacKeysResponse to get the next page.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::ListHmacKeysResponse]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::ListHmacKeysResponse]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::ListHmacKeysRequest.new
          #
          #   # Call the list_hmac_keys method.
          #   result = client.list_hmac_keys request
          #
          #   # The returned object is of type Google::Storage::V1::ListHmacKeysResponse.
          #   p result
          #
          def list_hmac_keys request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::ListHmacKeysRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.list_hmac_keys.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.list_hmac_keys.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.list_hmac_keys.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :list_hmac_keys, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Updates a given HMAC key state between ACTIVE and INACTIVE.
          #
          # @overload update_hmac_key(request, options = nil)
          #   Pass arguments to `update_hmac_key` via a request object, either of type
          #   {::Google::Storage::V1::UpdateHmacKeyRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V1::UpdateHmacKeyRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload update_hmac_key(access_id: nil, project_id: nil, metadata: nil, common_request_params: nil)
          #   Pass arguments to `update_hmac_key` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param access_id [::String]
          #     Required. The id of the HMAC key.
          #   @param project_id [::String]
          #     Required. The project id the HMAC's service account lies in.
          #   @param metadata [::Google::Storage::V1::HmacKeyMetadata, ::Hash]
          #     Required. The service account owner of the HMAC key.
          #   @param common_request_params [::Google::Storage::V1::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V1::HmacKeyMetadata]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V1::HmacKeyMetadata]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V1::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V1::UpdateHmacKeyRequest.new
          #
          #   # Call the update_hmac_key method.
          #   result = client.update_hmac_key request
          #
          #   # The returned object is of type Google::Storage::V1::HmacKeyMetadata.
          #   p result
          #
          def update_hmac_key request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V1::UpdateHmacKeyRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.update_hmac_key.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V1::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.update_hmac_key.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.update_hmac_key.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :update_hmac_key, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Configuration class for the Storage API.
          #
          # This class represents the configuration for Storage,
          # providing control over timeouts, retry behavior, logging, transport
          # parameters, and other low-level controls. Certain parameters can also be
          # applied individually to specific RPCs. See
          # {::Google::Storage::V1::Storage::Client::Configuration::Rpcs}
          # for a list of RPCs that can be configured independently.
          #
          # Configuration can be applied globally to all clients, or to a single client
          # on construction.
          #
          # @example
          #
          #   # Modify the global config, setting the timeout for
          #   # delete_bucket_access_control to 20 seconds,
          #   # and all remaining timeouts to 10 seconds.
          #   ::Google::Storage::V1::Storage::Client.configure do |config|
          #     config.timeout = 10.0
          #     config.rpcs.delete_bucket_access_control.timeout = 20.0
          #   end
          #
          #   # Apply the above configuration only to a new client.
          #   client = ::Google::Storage::V1::Storage::Client.new do |config|
          #     config.timeout = 10.0
          #     config.rpcs.delete_bucket_access_control.timeout = 20.0
          #   end
          #
          # @!attribute [rw] endpoint
          #   The hostname or hostname:port of the service endpoint.
          #   Defaults to `"storage.googleapis.com"`.
          #   @return [::String]
          # @!attribute [rw] credentials
          #   Credentials to send with calls. You may provide any of the following types:
          #    *  (`String`) The path to a service account key file in JSON format
          #    *  (`Hash`) A service account key as a Hash
          #    *  (`Google::Auth::Credentials`) A googleauth credentials object
          #       (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
          #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
          #       (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
          #    *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
          #    *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
          #    *  (`nil`) indicating no credentials
          #   @return [::Object]
          # @!attribute [rw] scope
          #   The OAuth scopes
          #   @return [::Array<::String>]
          # @!attribute [rw] lib_name
          #   The library name as recorded in instrumentation and logging
          #   @return [::String]
          # @!attribute [rw] lib_version
          #   The library version as recorded in instrumentation and logging
          #   @return [::String]
          # @!attribute [rw] channel_args
          #   Extra parameters passed to the gRPC channel. Note: this is ignored if a
          #   `GRPC::Core::Channel` object is provided as the credential.
          #   @return [::Hash]
          # @!attribute [rw] interceptors
          #   An array of interceptors that are run before calls are executed.
          #   @return [::Array<::GRPC::ClientInterceptor>]
          # @!attribute [rw] timeout
          #   The call timeout in seconds.
          #   @return [::Numeric]
          # @!attribute [rw] metadata
          #   Additional gRPC headers to be sent with the call.
          #   @return [::Hash{::Symbol=>::String}]
          # @!attribute [rw] retry_policy
          #   The retry policy. The value is a hash with the following keys:
          #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
          #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
          #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
          #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
          #       trigger a retry.
          #   @return [::Hash]
          # @!attribute [rw] quota_project
          #   A separate project against which to charge quota.
          #   @return [::String]
          #
          class Configuration
            extend ::Gapic::Config

            config_attr :endpoint,      "storage.googleapis.com", ::String
            config_attr :credentials,   nil do |value|
              allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
              allowed += [::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials] if defined? ::GRPC
              allowed.any? { |klass| klass === value }
            end
            config_attr :scope,         nil, ::String, ::Array, nil
            config_attr :lib_name,      nil, ::String, nil
            config_attr :lib_version,   nil, ::String, nil
            config_attr(:channel_args,  { "grpc.service_config_disable_resolution" => 1 }, ::Hash, nil)
            config_attr :interceptors,  nil, ::Array, nil
            config_attr :timeout,       nil, ::Numeric, nil
            config_attr :metadata,      nil, ::Hash, nil
            config_attr :retry_policy,  nil, ::Hash, ::Proc, nil
            config_attr :quota_project, nil, ::String, nil

            # @private
            def initialize parent_config = nil
              @parent_config = parent_config unless parent_config.nil?

              yield self if block_given?
            end

            ##
            # Configurations for individual RPCs
            # @return [Rpcs]
            #
            def rpcs
              @rpcs ||= begin
                parent_rpcs = nil
                parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config.respond_to?(:rpcs)
                Rpcs.new parent_rpcs
              end
            end

            ##
            # Configuration RPC class for the Storage API.
            #
            # Includes fields providing the configuration for each RPC in this service.
            # Each configuration object is of type `Gapic::Config::Method` and includes
            # the following configuration fields:
            #
            #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
            #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
            #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
            #     include the following keys:
            #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
            #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
            #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
            #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
            #         trigger a retry.
            #
            class Rpcs
              ##
              # RPC-specific configuration for `delete_bucket_access_control`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :delete_bucket_access_control
              ##
              # RPC-specific configuration for `get_bucket_access_control`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :get_bucket_access_control
              ##
              # RPC-specific configuration for `insert_bucket_access_control`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :insert_bucket_access_control
              ##
              # RPC-specific configuration for `list_bucket_access_controls`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :list_bucket_access_controls
              ##
              # RPC-specific configuration for `update_bucket_access_control`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :update_bucket_access_control
              ##
              # RPC-specific configuration for `patch_bucket_access_control`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :patch_bucket_access_control
              ##
              # RPC-specific configuration for `delete_bucket`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :delete_bucket
              ##
              # RPC-specific configuration for `get_bucket`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :get_bucket
              ##
              # RPC-specific configuration for `insert_bucket`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :insert_bucket
              ##
              # RPC-specific configuration for `list_channels`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :list_channels
              ##
              # RPC-specific configuration for `list_buckets`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :list_buckets
              ##
              # RPC-specific configuration for `lock_bucket_retention_policy`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :lock_bucket_retention_policy
              ##
              # RPC-specific configuration for `get_bucket_iam_policy`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :get_bucket_iam_policy
              ##
              # RPC-specific configuration for `set_bucket_iam_policy`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :set_bucket_iam_policy
              ##
              # RPC-specific configuration for `test_bucket_iam_permissions`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :test_bucket_iam_permissions
              ##
              # RPC-specific configuration for `patch_bucket`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :patch_bucket
              ##
              # RPC-specific configuration for `update_bucket`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :update_bucket
              ##
              # RPC-specific configuration for `stop_channel`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :stop_channel
              ##
              # RPC-specific configuration for `delete_default_object_access_control`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :delete_default_object_access_control
              ##
              # RPC-specific configuration for `get_default_object_access_control`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :get_default_object_access_control
              ##
              # RPC-specific configuration for `insert_default_object_access_control`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :insert_default_object_access_control
              ##
              # RPC-specific configuration for `list_default_object_access_controls`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :list_default_object_access_controls
              ##
              # RPC-specific configuration for `patch_default_object_access_control`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :patch_default_object_access_control
              ##
              # RPC-specific configuration for `update_default_object_access_control`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :update_default_object_access_control
              ##
              # RPC-specific configuration for `delete_notification`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :delete_notification
              ##
              # RPC-specific configuration for `get_notification`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :get_notification
              ##
              # RPC-specific configuration for `insert_notification`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :insert_notification
              ##
              # RPC-specific configuration for `list_notifications`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :list_notifications
              ##
              # RPC-specific configuration for `delete_object_access_control`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :delete_object_access_control
              ##
              # RPC-specific configuration for `get_object_access_control`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :get_object_access_control
              ##
              # RPC-specific configuration for `insert_object_access_control`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :insert_object_access_control
              ##
              # RPC-specific configuration for `list_object_access_controls`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :list_object_access_controls
              ##
              # RPC-specific configuration for `patch_object_access_control`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :patch_object_access_control
              ##
              # RPC-specific configuration for `update_object_access_control`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :update_object_access_control
              ##
              # RPC-specific configuration for `compose_object`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :compose_object
              ##
              # RPC-specific configuration for `copy_object`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :copy_object
              ##
              # RPC-specific configuration for `delete_object`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :delete_object
              ##
              # RPC-specific configuration for `get_object`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :get_object
              ##
              # RPC-specific configuration for `get_object_media`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :get_object_media
              ##
              # RPC-specific configuration for `insert_object`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :insert_object
              ##
              # RPC-specific configuration for `list_objects`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :list_objects
              ##
              # RPC-specific configuration for `rewrite_object`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :rewrite_object
              ##
              # RPC-specific configuration for `start_resumable_write`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :start_resumable_write
              ##
              # RPC-specific configuration for `query_write_status`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :query_write_status
              ##
              # RPC-specific configuration for `patch_object`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :patch_object
              ##
              # RPC-specific configuration for `update_object`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :update_object
              ##
              # RPC-specific configuration for `get_object_iam_policy`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :get_object_iam_policy
              ##
              # RPC-specific configuration for `set_object_iam_policy`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :set_object_iam_policy
              ##
              # RPC-specific configuration for `test_object_iam_permissions`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :test_object_iam_permissions
              ##
              # RPC-specific configuration for `watch_all_objects`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :watch_all_objects
              ##
              # RPC-specific configuration for `get_service_account`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :get_service_account
              ##
              # RPC-specific configuration for `create_hmac_key`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :create_hmac_key
              ##
              # RPC-specific configuration for `delete_hmac_key`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :delete_hmac_key
              ##
              # RPC-specific configuration for `get_hmac_key`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :get_hmac_key
              ##
              # RPC-specific configuration for `list_hmac_keys`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :list_hmac_keys
              ##
              # RPC-specific configuration for `update_hmac_key`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :update_hmac_key

              # @private
              def initialize parent_rpcs = nil
                delete_bucket_access_control_config = parent_rpcs.delete_bucket_access_control if parent_rpcs.respond_to? :delete_bucket_access_control
                @delete_bucket_access_control = ::Gapic::Config::Method.new delete_bucket_access_control_config
                get_bucket_access_control_config = parent_rpcs.get_bucket_access_control if parent_rpcs.respond_to? :get_bucket_access_control
                @get_bucket_access_control = ::Gapic::Config::Method.new get_bucket_access_control_config
                insert_bucket_access_control_config = parent_rpcs.insert_bucket_access_control if parent_rpcs.respond_to? :insert_bucket_access_control
                @insert_bucket_access_control = ::Gapic::Config::Method.new insert_bucket_access_control_config
                list_bucket_access_controls_config = parent_rpcs.list_bucket_access_controls if parent_rpcs.respond_to? :list_bucket_access_controls
                @list_bucket_access_controls = ::Gapic::Config::Method.new list_bucket_access_controls_config
                update_bucket_access_control_config = parent_rpcs.update_bucket_access_control if parent_rpcs.respond_to? :update_bucket_access_control
                @update_bucket_access_control = ::Gapic::Config::Method.new update_bucket_access_control_config
                patch_bucket_access_control_config = parent_rpcs.patch_bucket_access_control if parent_rpcs.respond_to? :patch_bucket_access_control
                @patch_bucket_access_control = ::Gapic::Config::Method.new patch_bucket_access_control_config
                delete_bucket_config = parent_rpcs.delete_bucket if parent_rpcs.respond_to? :delete_bucket
                @delete_bucket = ::Gapic::Config::Method.new delete_bucket_config
                get_bucket_config = parent_rpcs.get_bucket if parent_rpcs.respond_to? :get_bucket
                @get_bucket = ::Gapic::Config::Method.new get_bucket_config
                insert_bucket_config = parent_rpcs.insert_bucket if parent_rpcs.respond_to? :insert_bucket
                @insert_bucket = ::Gapic::Config::Method.new insert_bucket_config
                list_channels_config = parent_rpcs.list_channels if parent_rpcs.respond_to? :list_channels
                @list_channels = ::Gapic::Config::Method.new list_channels_config
                list_buckets_config = parent_rpcs.list_buckets if parent_rpcs.respond_to? :list_buckets
                @list_buckets = ::Gapic::Config::Method.new list_buckets_config
                lock_bucket_retention_policy_config = parent_rpcs.lock_bucket_retention_policy if parent_rpcs.respond_to? :lock_bucket_retention_policy
                @lock_bucket_retention_policy = ::Gapic::Config::Method.new lock_bucket_retention_policy_config
                get_bucket_iam_policy_config = parent_rpcs.get_bucket_iam_policy if parent_rpcs.respond_to? :get_bucket_iam_policy
                @get_bucket_iam_policy = ::Gapic::Config::Method.new get_bucket_iam_policy_config
                set_bucket_iam_policy_config = parent_rpcs.set_bucket_iam_policy if parent_rpcs.respond_to? :set_bucket_iam_policy
                @set_bucket_iam_policy = ::Gapic::Config::Method.new set_bucket_iam_policy_config
                test_bucket_iam_permissions_config = parent_rpcs.test_bucket_iam_permissions if parent_rpcs.respond_to? :test_bucket_iam_permissions
                @test_bucket_iam_permissions = ::Gapic::Config::Method.new test_bucket_iam_permissions_config
                patch_bucket_config = parent_rpcs.patch_bucket if parent_rpcs.respond_to? :patch_bucket
                @patch_bucket = ::Gapic::Config::Method.new patch_bucket_config
                update_bucket_config = parent_rpcs.update_bucket if parent_rpcs.respond_to? :update_bucket
                @update_bucket = ::Gapic::Config::Method.new update_bucket_config
                stop_channel_config = parent_rpcs.stop_channel if parent_rpcs.respond_to? :stop_channel
                @stop_channel = ::Gapic::Config::Method.new stop_channel_config
                delete_default_object_access_control_config = parent_rpcs.delete_default_object_access_control if parent_rpcs.respond_to? :delete_default_object_access_control
                @delete_default_object_access_control = ::Gapic::Config::Method.new delete_default_object_access_control_config
                get_default_object_access_control_config = parent_rpcs.get_default_object_access_control if parent_rpcs.respond_to? :get_default_object_access_control
                @get_default_object_access_control = ::Gapic::Config::Method.new get_default_object_access_control_config
                insert_default_object_access_control_config = parent_rpcs.insert_default_object_access_control if parent_rpcs.respond_to? :insert_default_object_access_control
                @insert_default_object_access_control = ::Gapic::Config::Method.new insert_default_object_access_control_config
                list_default_object_access_controls_config = parent_rpcs.list_default_object_access_controls if parent_rpcs.respond_to? :list_default_object_access_controls
                @list_default_object_access_controls = ::Gapic::Config::Method.new list_default_object_access_controls_config
                patch_default_object_access_control_config = parent_rpcs.patch_default_object_access_control if parent_rpcs.respond_to? :patch_default_object_access_control
                @patch_default_object_access_control = ::Gapic::Config::Method.new patch_default_object_access_control_config
                update_default_object_access_control_config = parent_rpcs.update_default_object_access_control if parent_rpcs.respond_to? :update_default_object_access_control
                @update_default_object_access_control = ::Gapic::Config::Method.new update_default_object_access_control_config
                delete_notification_config = parent_rpcs.delete_notification if parent_rpcs.respond_to? :delete_notification
                @delete_notification = ::Gapic::Config::Method.new delete_notification_config
                get_notification_config = parent_rpcs.get_notification if parent_rpcs.respond_to? :get_notification
                @get_notification = ::Gapic::Config::Method.new get_notification_config
                insert_notification_config = parent_rpcs.insert_notification if parent_rpcs.respond_to? :insert_notification
                @insert_notification = ::Gapic::Config::Method.new insert_notification_config
                list_notifications_config = parent_rpcs.list_notifications if parent_rpcs.respond_to? :list_notifications
                @list_notifications = ::Gapic::Config::Method.new list_notifications_config
                delete_object_access_control_config = parent_rpcs.delete_object_access_control if parent_rpcs.respond_to? :delete_object_access_control
                @delete_object_access_control = ::Gapic::Config::Method.new delete_object_access_control_config
                get_object_access_control_config = parent_rpcs.get_object_access_control if parent_rpcs.respond_to? :get_object_access_control
                @get_object_access_control = ::Gapic::Config::Method.new get_object_access_control_config
                insert_object_access_control_config = parent_rpcs.insert_object_access_control if parent_rpcs.respond_to? :insert_object_access_control
                @insert_object_access_control = ::Gapic::Config::Method.new insert_object_access_control_config
                list_object_access_controls_config = parent_rpcs.list_object_access_controls if parent_rpcs.respond_to? :list_object_access_controls
                @list_object_access_controls = ::Gapic::Config::Method.new list_object_access_controls_config
                patch_object_access_control_config = parent_rpcs.patch_object_access_control if parent_rpcs.respond_to? :patch_object_access_control
                @patch_object_access_control = ::Gapic::Config::Method.new patch_object_access_control_config
                update_object_access_control_config = parent_rpcs.update_object_access_control if parent_rpcs.respond_to? :update_object_access_control
                @update_object_access_control = ::Gapic::Config::Method.new update_object_access_control_config
                compose_object_config = parent_rpcs.compose_object if parent_rpcs.respond_to? :compose_object
                @compose_object = ::Gapic::Config::Method.new compose_object_config
                copy_object_config = parent_rpcs.copy_object if parent_rpcs.respond_to? :copy_object
                @copy_object = ::Gapic::Config::Method.new copy_object_config
                delete_object_config = parent_rpcs.delete_object if parent_rpcs.respond_to? :delete_object
                @delete_object = ::Gapic::Config::Method.new delete_object_config
                get_object_config = parent_rpcs.get_object if parent_rpcs.respond_to? :get_object
                @get_object = ::Gapic::Config::Method.new get_object_config
                get_object_media_config = parent_rpcs.get_object_media if parent_rpcs.respond_to? :get_object_media
                @get_object_media = ::Gapic::Config::Method.new get_object_media_config
                insert_object_config = parent_rpcs.insert_object if parent_rpcs.respond_to? :insert_object
                @insert_object = ::Gapic::Config::Method.new insert_object_config
                list_objects_config = parent_rpcs.list_objects if parent_rpcs.respond_to? :list_objects
                @list_objects = ::Gapic::Config::Method.new list_objects_config
                rewrite_object_config = parent_rpcs.rewrite_object if parent_rpcs.respond_to? :rewrite_object
                @rewrite_object = ::Gapic::Config::Method.new rewrite_object_config
                start_resumable_write_config = parent_rpcs.start_resumable_write if parent_rpcs.respond_to? :start_resumable_write
                @start_resumable_write = ::Gapic::Config::Method.new start_resumable_write_config
                query_write_status_config = parent_rpcs.query_write_status if parent_rpcs.respond_to? :query_write_status
                @query_write_status = ::Gapic::Config::Method.new query_write_status_config
                patch_object_config = parent_rpcs.patch_object if parent_rpcs.respond_to? :patch_object
                @patch_object = ::Gapic::Config::Method.new patch_object_config
                update_object_config = parent_rpcs.update_object if parent_rpcs.respond_to? :update_object
                @update_object = ::Gapic::Config::Method.new update_object_config
                get_object_iam_policy_config = parent_rpcs.get_object_iam_policy if parent_rpcs.respond_to? :get_object_iam_policy
                @get_object_iam_policy = ::Gapic::Config::Method.new get_object_iam_policy_config
                set_object_iam_policy_config = parent_rpcs.set_object_iam_policy if parent_rpcs.respond_to? :set_object_iam_policy
                @set_object_iam_policy = ::Gapic::Config::Method.new set_object_iam_policy_config
                test_object_iam_permissions_config = parent_rpcs.test_object_iam_permissions if parent_rpcs.respond_to? :test_object_iam_permissions
                @test_object_iam_permissions = ::Gapic::Config::Method.new test_object_iam_permissions_config
                watch_all_objects_config = parent_rpcs.watch_all_objects if parent_rpcs.respond_to? :watch_all_objects
                @watch_all_objects = ::Gapic::Config::Method.new watch_all_objects_config
                get_service_account_config = parent_rpcs.get_service_account if parent_rpcs.respond_to? :get_service_account
                @get_service_account = ::Gapic::Config::Method.new get_service_account_config
                create_hmac_key_config = parent_rpcs.create_hmac_key if parent_rpcs.respond_to? :create_hmac_key
                @create_hmac_key = ::Gapic::Config::Method.new create_hmac_key_config
                delete_hmac_key_config = parent_rpcs.delete_hmac_key if parent_rpcs.respond_to? :delete_hmac_key
                @delete_hmac_key = ::Gapic::Config::Method.new delete_hmac_key_config
                get_hmac_key_config = parent_rpcs.get_hmac_key if parent_rpcs.respond_to? :get_hmac_key
                @get_hmac_key = ::Gapic::Config::Method.new get_hmac_key_config
                list_hmac_keys_config = parent_rpcs.list_hmac_keys if parent_rpcs.respond_to? :list_hmac_keys
                @list_hmac_keys = ::Gapic::Config::Method.new list_hmac_keys_config
                update_hmac_key_config = parent_rpcs.update_hmac_key if parent_rpcs.respond_to? :update_hmac_key
                @update_hmac_key = ::Gapic::Config::Method.new update_hmac_key_config

                yield self if block_given?
              end
            end
          end
        end
      end
    end
  end
end
