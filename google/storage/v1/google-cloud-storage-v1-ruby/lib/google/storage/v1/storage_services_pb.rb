# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: google/storage/v1/storage.proto for package 'google.storage.v1'
# Original file comments:
# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

require 'grpc'
require 'google/storage/v1/storage_pb'

module Google
  module Storage
    module V1
      module Storage
        # Manages Google Cloud Storage resources.
        class Service

          include ::GRPC::GenericService

          self.marshal_class_method = :encode
          self.unmarshal_class_method = :decode
          self.service_name = 'google.storage.v1.Storage'

          # Permanently deletes the ACL entry for the specified entity on the specified
          # bucket.
          rpc :DeleteBucketAccessControl, ::Google::Storage::V1::DeleteBucketAccessControlRequest, ::Google::Protobuf::Empty
          # Returns the ACL entry for the specified entity on the specified bucket.
          rpc :GetBucketAccessControl, ::Google::Storage::V1::GetBucketAccessControlRequest, ::Google::Storage::V1::BucketAccessControl
          # Creates a new ACL entry on the specified bucket.
          rpc :InsertBucketAccessControl, ::Google::Storage::V1::InsertBucketAccessControlRequest, ::Google::Storage::V1::BucketAccessControl
          # Retrieves ACL entries on the specified bucket.
          rpc :ListBucketAccessControls, ::Google::Storage::V1::ListBucketAccessControlsRequest, ::Google::Storage::V1::ListBucketAccessControlsResponse
          # Updates an ACL entry on the specified bucket. Equivalent to
          # PatchBucketAccessControl, but all unspecified fields will be
          # reset to their default values.
          rpc :UpdateBucketAccessControl, ::Google::Storage::V1::UpdateBucketAccessControlRequest, ::Google::Storage::V1::BucketAccessControl
          # Updates an ACL entry on the specified bucket.
          rpc :PatchBucketAccessControl, ::Google::Storage::V1::PatchBucketAccessControlRequest, ::Google::Storage::V1::BucketAccessControl
          # Permanently deletes an empty bucket.
          rpc :DeleteBucket, ::Google::Storage::V1::DeleteBucketRequest, ::Google::Protobuf::Empty
          # Returns metadata for the specified bucket.
          rpc :GetBucket, ::Google::Storage::V1::GetBucketRequest, ::Google::Storage::V1::Bucket
          # Creates a new bucket.
          rpc :InsertBucket, ::Google::Storage::V1::InsertBucketRequest, ::Google::Storage::V1::Bucket
          # List active object change notification channels for this bucket.
          rpc :ListChannels, ::Google::Storage::V1::ListChannelsRequest, ::Google::Storage::V1::ListChannelsResponse
          # Retrieves a list of buckets for a given project.
          rpc :ListBuckets, ::Google::Storage::V1::ListBucketsRequest, ::Google::Storage::V1::ListBucketsResponse
          # Locks retention policy on a bucket.
          rpc :LockBucketRetentionPolicy, ::Google::Storage::V1::LockRetentionPolicyRequest, ::Google::Storage::V1::Bucket
          # Gets the IAM policy for the specified bucket.
          rpc :GetBucketIamPolicy, ::Google::Storage::V1::GetIamPolicyRequest, ::Google::Iam::V1::Policy
          # Updates an IAM policy for the specified bucket.
          rpc :SetBucketIamPolicy, ::Google::Storage::V1::SetIamPolicyRequest, ::Google::Iam::V1::Policy
          # Tests a set of permissions on the given bucket to see which, if
          # any, are held by the caller.
          rpc :TestBucketIamPermissions, ::Google::Storage::V1::TestIamPermissionsRequest, ::Google::Iam::V1::TestIamPermissionsResponse
          # Updates a bucket. Changes to the bucket will be readable immediately after
          # writing, but configuration changes may take time to propagate.
          rpc :PatchBucket, ::Google::Storage::V1::PatchBucketRequest, ::Google::Storage::V1::Bucket
          # Updates a bucket. Equivalent to PatchBucket, but always replaces all
          # mutatable fields of the bucket with new values, reverting all
          # unspecified fields to their default values.
          # Like PatchBucket, Changes to the bucket will be readable immediately after
          # writing, but configuration changes may take time to propagate.
          rpc :UpdateBucket, ::Google::Storage::V1::UpdateBucketRequest, ::Google::Storage::V1::Bucket
          # Halts "Object Change Notification" push messagages.
          # See https://cloud.google.com/storage/docs/object-change-notification
          # Note: this is not related to the newer "Notifications" resource, which
          # are stopped using DeleteNotification.
          rpc :StopChannel, ::Google::Storage::V1::StopChannelRequest, ::Google::Protobuf::Empty
          # Permanently deletes the default object ACL entry for the specified entity
          # on the specified bucket.
          rpc :DeleteDefaultObjectAccessControl, ::Google::Storage::V1::DeleteDefaultObjectAccessControlRequest, ::Google::Protobuf::Empty
          # Returns the default object ACL entry for the specified entity on the
          # specified bucket.
          rpc :GetDefaultObjectAccessControl, ::Google::Storage::V1::GetDefaultObjectAccessControlRequest, ::Google::Storage::V1::ObjectAccessControl
          # Creates a new default object ACL entry on the specified bucket.
          rpc :InsertDefaultObjectAccessControl, ::Google::Storage::V1::InsertDefaultObjectAccessControlRequest, ::Google::Storage::V1::ObjectAccessControl
          # Retrieves default object ACL entries on the specified bucket.
          rpc :ListDefaultObjectAccessControls, ::Google::Storage::V1::ListDefaultObjectAccessControlsRequest, ::Google::Storage::V1::ListObjectAccessControlsResponse
          # Updates a default object ACL entry on the specified bucket.
          rpc :PatchDefaultObjectAccessControl, ::Google::Storage::V1::PatchDefaultObjectAccessControlRequest, ::Google::Storage::V1::ObjectAccessControl
          # Updates a default object ACL entry on the specified bucket. Equivalent to
          # PatchDefaultObjectAccessControl, but modifies all unspecified fields to
          # their default values.
          rpc :UpdateDefaultObjectAccessControl, ::Google::Storage::V1::UpdateDefaultObjectAccessControlRequest, ::Google::Storage::V1::ObjectAccessControl
          # Permanently deletes a notification subscription.
          # Note: Older, "Object Change Notification" push subscriptions should be
          # deleted using StopChannel instead.
          rpc :DeleteNotification, ::Google::Storage::V1::DeleteNotificationRequest, ::Google::Protobuf::Empty
          # View a notification configuration.
          rpc :GetNotification, ::Google::Storage::V1::GetNotificationRequest, ::Google::Storage::V1::Notification
          # Creates a notification subscription for a given bucket.
          # These notifications, when triggered, publish messages to the specified
          # Cloud Pub/Sub topics.
          # See https://cloud.google.com/storage/docs/pubsub-notifications.
          rpc :InsertNotification, ::Google::Storage::V1::InsertNotificationRequest, ::Google::Storage::V1::Notification
          # Retrieves a list of notification subscriptions for a given bucket.
          rpc :ListNotifications, ::Google::Storage::V1::ListNotificationsRequest, ::Google::Storage::V1::ListNotificationsResponse
          # Permanently deletes the ACL entry for the specified entity on the specified
          # object.
          rpc :DeleteObjectAccessControl, ::Google::Storage::V1::DeleteObjectAccessControlRequest, ::Google::Protobuf::Empty
          # Returns the ACL entry for the specified entity on the specified object.
          rpc :GetObjectAccessControl, ::Google::Storage::V1::GetObjectAccessControlRequest, ::Google::Storage::V1::ObjectAccessControl
          # Creates a new ACL entry on the specified object.
          rpc :InsertObjectAccessControl, ::Google::Storage::V1::InsertObjectAccessControlRequest, ::Google::Storage::V1::ObjectAccessControl
          # Retrieves ACL entries on the specified object.
          rpc :ListObjectAccessControls, ::Google::Storage::V1::ListObjectAccessControlsRequest, ::Google::Storage::V1::ListObjectAccessControlsResponse
          # Patches an ACL entry on the specified object.  Patch is similar to update,
          # but only applies or appends the specified fields in the
          # object_access_control object.  Other fields are unaffected.
          rpc :PatchObjectAccessControl, ::Google::Storage::V1::PatchObjectAccessControlRequest, ::Google::Storage::V1::ObjectAccessControl
          # Updates an ACL entry on the specified object.
          rpc :UpdateObjectAccessControl, ::Google::Storage::V1::UpdateObjectAccessControlRequest, ::Google::Storage::V1::ObjectAccessControl
          # Concatenates a list of existing objects into a new object in the same
          # bucket.
          rpc :ComposeObject, ::Google::Storage::V1::ComposeObjectRequest, ::Google::Storage::V1::Object
          # Copies a source object to a destination object. Optionally overrides
          # metadata.
          rpc :CopyObject, ::Google::Storage::V1::CopyObjectRequest, ::Google::Storage::V1::Object
          # Deletes an object and its metadata. Deletions are permanent if versioning
          # is not enabled for the bucket, or if the `generation` parameter
          # is used.
          rpc :DeleteObject, ::Google::Storage::V1::DeleteObjectRequest, ::Google::Protobuf::Empty
          # Retrieves an object's metadata.
          rpc :GetObject, ::Google::Storage::V1::GetObjectRequest, ::Google::Storage::V1::Object
          # Reads an object's data.
          rpc :GetObjectMedia, ::Google::Storage::V1::GetObjectMediaRequest, stream(::Google::Storage::V1::GetObjectMediaResponse)
          # Stores a new object and metadata.
          #
          # An object can be written either in a single message stream or in a
          # resumable sequence of message streams. To write using a single stream,
          # the client should include in the first message of the stream an
          # `InsertObjectSpec` describing the destination bucket, object, and any
          # preconditions. Additionally, the final message must set 'finish_write' to
          # true, or else it is an error.
          #
          # For a resumable write, the client should instead call
          # `StartResumableWrite()` and provide that method an `InsertObjectSpec.`
          # They should then attach the returned `upload_id` to the first message of
          # each following call to `Insert`. If there is an error or the connection is
          # broken during the resumable `Insert()`, the client should check the status
          # of the `Insert()` by calling `QueryWriteStatus()` and continue writing from
          # the returned `committed_size`. This may be less than the amount of data the
          # client previously sent.
          #
          # The service will not view the object as complete until the client has
          # sent an `Insert` with `finish_write` set to `true`. Sending any
          # requests on a stream after sending a request with `finish_write` set to
          # `true` will cause an error. The client **should** check the
          # `Object` it receives to determine how much data the service was
          # able to commit and whether the service views the object as complete.
          rpc :InsertObject, stream(::Google::Storage::V1::InsertObjectRequest), ::Google::Storage::V1::Object
          # Retrieves a list of objects matching the criteria.
          rpc :ListObjects, ::Google::Storage::V1::ListObjectsRequest, ::Google::Storage::V1::ListObjectsResponse
          # Rewrites a source object to a destination object. Optionally overrides
          # metadata.
          rpc :RewriteObject, ::Google::Storage::V1::RewriteObjectRequest, ::Google::Storage::V1::RewriteResponse
          # Starts a resumable write. How long the write operation remains valid, and
          # what happens when the write operation becomes invalid, are
          # service-dependent.
          rpc :StartResumableWrite, ::Google::Storage::V1::StartResumableWriteRequest, ::Google::Storage::V1::StartResumableWriteResponse
          # Determines the `committed_size` for an object that is being written, which
          # can then be used as the `write_offset` for the next `Write()` call.
          #
          # If the object does not exist (i.e., the object has been deleted, or the
          # first `Write()` has not yet reached the service), this method returns the
          # error `NOT_FOUND`.
          #
          # The client **may** call `QueryWriteStatus()` at any time to determine how
          # much data has been processed for this object. This is useful if the
          # client is buffering data and needs to know which data can be safely
          # evicted. For any sequence of `QueryWriteStatus()` calls for a given
          # object name, the sequence of returned `committed_size` values will be
          # non-decreasing.
          rpc :QueryWriteStatus, ::Google::Storage::V1::QueryWriteStatusRequest, ::Google::Storage::V1::QueryWriteStatusResponse
          # Updates an object's metadata.
          rpc :PatchObject, ::Google::Storage::V1::PatchObjectRequest, ::Google::Storage::V1::Object
          # Updates an object's metadata. Equivalent to PatchObject, but always
          # replaces all mutatable fields of the bucket with new values, reverting all
          # unspecified fields to their default values.
          rpc :UpdateObject, ::Google::Storage::V1::UpdateObjectRequest, ::Google::Storage::V1::Object
          # Gets the IAM policy for the specified object.
          rpc :GetObjectIamPolicy, ::Google::Storage::V1::GetIamPolicyRequest, ::Google::Iam::V1::Policy
          # Updates an IAM policy for the specified object.
          rpc :SetObjectIamPolicy, ::Google::Storage::V1::SetIamPolicyRequest, ::Google::Iam::V1::Policy
          # Tests a set of permissions on the given object to see which, if
          # any, are held by the caller.
          rpc :TestObjectIamPermissions, ::Google::Storage::V1::TestIamPermissionsRequest, ::Google::Iam::V1::TestIamPermissionsResponse
          # Watch for changes on all objects in a bucket.
          rpc :WatchAllObjects, ::Google::Storage::V1::WatchAllObjectsRequest, ::Google::Storage::V1::Channel
          # Retrieves the name of a project's Google Cloud Storage service account.
          rpc :GetServiceAccount, ::Google::Storage::V1::GetProjectServiceAccountRequest, ::Google::Storage::V1::ServiceAccount
          # Creates a new HMAC key for the given service account.
          rpc :CreateHmacKey, ::Google::Storage::V1::CreateHmacKeyRequest, ::Google::Storage::V1::CreateHmacKeyResponse
          # Deletes a given HMAC key.  Key must be in an INACTIVE state.
          rpc :DeleteHmacKey, ::Google::Storage::V1::DeleteHmacKeyRequest, ::Google::Protobuf::Empty
          # Gets an existing HMAC key metadata for the given id.
          rpc :GetHmacKey, ::Google::Storage::V1::GetHmacKeyRequest, ::Google::Storage::V1::HmacKeyMetadata
          # Lists HMAC keys under a given project with the additional filters provided.
          rpc :ListHmacKeys, ::Google::Storage::V1::ListHmacKeysRequest, ::Google::Storage::V1::ListHmacKeysResponse
          # Updates a given HMAC key state between ACTIVE and INACTIVE.
          rpc :UpdateHmacKey, ::Google::Storage::V1::UpdateHmacKeyRequest, ::Google::Storage::V1::HmacKeyMetadata
        end

        Stub = Service.rpc_stub_class
      end
    end
  end
end
