// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as storageModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubServerStreamingCall<ResponseType>(response?: ResponseType, error?: Error) {
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // write something to the stream to trigger transformStub and send the response back to the client
    setImmediate(() => { mockStream.write({}); });
    setImmediate(() => { mockStream.end(); });
    return sinon.stub().returns(mockStream);
}

function stubClientStreamingCall<ResponseType>(response?: ResponseType, error?: Error) {
    if (error) {
        return sinon.stub().callsArgWith(2, error);
    }
    const transformStub = sinon.stub();
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    return sinon.stub().returns(mockStream).callsArgWith(2, null, response);
}

describe('v1.StorageClient', () => {
    it('has servicePath', () => {
        const servicePath = storageModule.v1.StorageClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = storageModule.v1.StorageClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = storageModule.v1.StorageClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new storageModule.v1.StorageClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new storageModule.v1.StorageClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        assert.strictEqual(client.storageStub, undefined);
        await client.initialize();
        assert(client.storageStub);
    });

    it('has close method', () => {
        const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('deleteBucketAccessControl', () => {
        it('invokes deleteBucketAccessControl without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.DeleteBucketAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteBucketAccessControl = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteBucketAccessControl(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteBucketAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteBucketAccessControl without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.DeleteBucketAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteBucketAccessControl = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteBucketAccessControl(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteBucketAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteBucketAccessControl with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.DeleteBucketAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteBucketAccessControl = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteBucketAccessControl(request), expectedError);
            assert((client.innerApiCalls.deleteBucketAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getBucketAccessControl', () => {
        it('invokes getBucketAccessControl without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetBucketAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.BucketAccessControl());
            client.innerApiCalls.getBucketAccessControl = stubSimpleCall(expectedResponse);
            const [response] = await client.getBucketAccessControl(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getBucketAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getBucketAccessControl without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetBucketAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.BucketAccessControl());
            client.innerApiCalls.getBucketAccessControl = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getBucketAccessControl(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IBucketAccessControl|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getBucketAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getBucketAccessControl with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetBucketAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.getBucketAccessControl = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getBucketAccessControl(request), expectedError);
            assert((client.innerApiCalls.getBucketAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('insertBucketAccessControl', () => {
        it('invokes insertBucketAccessControl without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.InsertBucketAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.BucketAccessControl());
            client.innerApiCalls.insertBucketAccessControl = stubSimpleCall(expectedResponse);
            const [response] = await client.insertBucketAccessControl(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.insertBucketAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes insertBucketAccessControl without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.InsertBucketAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.BucketAccessControl());
            client.innerApiCalls.insertBucketAccessControl = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.insertBucketAccessControl(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IBucketAccessControl|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.insertBucketAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes insertBucketAccessControl with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.InsertBucketAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.insertBucketAccessControl = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.insertBucketAccessControl(request), expectedError);
            assert((client.innerApiCalls.insertBucketAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('listBucketAccessControls', () => {
        it('invokes listBucketAccessControls without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.ListBucketAccessControlsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ListBucketAccessControlsResponse());
            client.innerApiCalls.listBucketAccessControls = stubSimpleCall(expectedResponse);
            const [response] = await client.listBucketAccessControls(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listBucketAccessControls as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listBucketAccessControls without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.ListBucketAccessControlsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ListBucketAccessControlsResponse());
            client.innerApiCalls.listBucketAccessControls = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listBucketAccessControls(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IListBucketAccessControlsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listBucketAccessControls as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listBucketAccessControls with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.ListBucketAccessControlsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.listBucketAccessControls = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listBucketAccessControls(request), expectedError);
            assert((client.innerApiCalls.listBucketAccessControls as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateBucketAccessControl', () => {
        it('invokes updateBucketAccessControl without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.UpdateBucketAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.BucketAccessControl());
            client.innerApiCalls.updateBucketAccessControl = stubSimpleCall(expectedResponse);
            const [response] = await client.updateBucketAccessControl(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateBucketAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateBucketAccessControl without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.UpdateBucketAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.BucketAccessControl());
            client.innerApiCalls.updateBucketAccessControl = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateBucketAccessControl(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IBucketAccessControl|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateBucketAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateBucketAccessControl with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.UpdateBucketAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateBucketAccessControl = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateBucketAccessControl(request), expectedError);
            assert((client.innerApiCalls.updateBucketAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('patchBucketAccessControl', () => {
        it('invokes patchBucketAccessControl without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.PatchBucketAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.BucketAccessControl());
            client.innerApiCalls.patchBucketAccessControl = stubSimpleCall(expectedResponse);
            const [response] = await client.patchBucketAccessControl(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.patchBucketAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes patchBucketAccessControl without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.PatchBucketAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.BucketAccessControl());
            client.innerApiCalls.patchBucketAccessControl = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.patchBucketAccessControl(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IBucketAccessControl|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.patchBucketAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes patchBucketAccessControl with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.PatchBucketAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.patchBucketAccessControl = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.patchBucketAccessControl(request), expectedError);
            assert((client.innerApiCalls.patchBucketAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteBucket', () => {
        it('invokes deleteBucket without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.DeleteBucketRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteBucket = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteBucket(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteBucket as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteBucket without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.DeleteBucketRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteBucket = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteBucket(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteBucket as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteBucket with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.DeleteBucketRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteBucket = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteBucket(request), expectedError);
            assert((client.innerApiCalls.deleteBucket as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getBucket', () => {
        it('invokes getBucket without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetBucketRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.Bucket());
            client.innerApiCalls.getBucket = stubSimpleCall(expectedResponse);
            const [response] = await client.getBucket(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getBucket as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getBucket without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetBucketRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.Bucket());
            client.innerApiCalls.getBucket = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getBucket(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IBucket|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getBucket as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getBucket with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetBucketRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.getBucket = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getBucket(request), expectedError);
            assert((client.innerApiCalls.getBucket as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('insertBucket', () => {
        it('invokes insertBucket without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.InsertBucketRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.Bucket());
            client.innerApiCalls.insertBucket = stubSimpleCall(expectedResponse);
            const [response] = await client.insertBucket(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.insertBucket as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes insertBucket without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.InsertBucketRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.Bucket());
            client.innerApiCalls.insertBucket = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.insertBucket(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IBucket|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.insertBucket as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes insertBucket with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.InsertBucketRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.insertBucket = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.insertBucket(request), expectedError);
            assert((client.innerApiCalls.insertBucket as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('listChannels', () => {
        it('invokes listChannels without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.ListChannelsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ListChannelsResponse());
            client.innerApiCalls.listChannels = stubSimpleCall(expectedResponse);
            const [response] = await client.listChannels(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listChannels as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listChannels without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.ListChannelsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ListChannelsResponse());
            client.innerApiCalls.listChannels = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listChannels(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IListChannelsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listChannels as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listChannels with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.ListChannelsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.listChannels = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listChannels(request), expectedError);
            assert((client.innerApiCalls.listChannels as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('listBuckets', () => {
        it('invokes listBuckets without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.ListBucketsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ListBucketsResponse());
            client.innerApiCalls.listBuckets = stubSimpleCall(expectedResponse);
            const [response] = await client.listBuckets(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listBuckets as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listBuckets without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.ListBucketsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ListBucketsResponse());
            client.innerApiCalls.listBuckets = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listBuckets(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IListBucketsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listBuckets as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listBuckets with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.ListBucketsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.listBuckets = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listBuckets(request), expectedError);
            assert((client.innerApiCalls.listBuckets as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('lockBucketRetentionPolicy', () => {
        it('invokes lockBucketRetentionPolicy without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.LockRetentionPolicyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.Bucket());
            client.innerApiCalls.lockBucketRetentionPolicy = stubSimpleCall(expectedResponse);
            const [response] = await client.lockBucketRetentionPolicy(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.lockBucketRetentionPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes lockBucketRetentionPolicy without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.LockRetentionPolicyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.Bucket());
            client.innerApiCalls.lockBucketRetentionPolicy = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.lockBucketRetentionPolicy(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IBucket|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.lockBucketRetentionPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes lockBucketRetentionPolicy with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.LockRetentionPolicyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.lockBucketRetentionPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.lockBucketRetentionPolicy(request), expectedError);
            assert((client.innerApiCalls.lockBucketRetentionPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getBucketIamPolicy', () => {
        it('invokes getBucketIamPolicy without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetIamPolicyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.getBucketIamPolicy = stubSimpleCall(expectedResponse);
            const [response] = await client.getBucketIamPolicy(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getBucketIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getBucketIamPolicy without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetIamPolicyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.getBucketIamPolicy = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getBucketIamPolicy(
                    request,
                    (err?: Error|null, result?: protos.google.iam.v1.IPolicy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getBucketIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getBucketIamPolicy with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetIamPolicyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.getBucketIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getBucketIamPolicy(request), expectedError);
            assert((client.innerApiCalls.getBucketIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('setBucketIamPolicy', () => {
        it('invokes setBucketIamPolicy without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.SetIamPolicyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.setBucketIamPolicy = stubSimpleCall(expectedResponse);
            const [response] = await client.setBucketIamPolicy(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setBucketIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes setBucketIamPolicy without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.SetIamPolicyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.setBucketIamPolicy = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setBucketIamPolicy(
                    request,
                    (err?: Error|null, result?: protos.google.iam.v1.IPolicy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setBucketIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes setBucketIamPolicy with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.SetIamPolicyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.setBucketIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setBucketIamPolicy(request), expectedError);
            assert((client.innerApiCalls.setBucketIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('testBucketIamPermissions', () => {
        it('invokes testBucketIamPermissions without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.TestIamPermissionsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsResponse());
            client.innerApiCalls.testBucketIamPermissions = stubSimpleCall(expectedResponse);
            const [response] = await client.testBucketIamPermissions(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.testBucketIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes testBucketIamPermissions without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.TestIamPermissionsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsResponse());
            client.innerApiCalls.testBucketIamPermissions = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.testBucketIamPermissions(
                    request,
                    (err?: Error|null, result?: protos.google.iam.v1.ITestIamPermissionsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.testBucketIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes testBucketIamPermissions with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.TestIamPermissionsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.testBucketIamPermissions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.testBucketIamPermissions(request), expectedError);
            assert((client.innerApiCalls.testBucketIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('patchBucket', () => {
        it('invokes patchBucket without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.PatchBucketRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.Bucket());
            client.innerApiCalls.patchBucket = stubSimpleCall(expectedResponse);
            const [response] = await client.patchBucket(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.patchBucket as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes patchBucket without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.PatchBucketRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.Bucket());
            client.innerApiCalls.patchBucket = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.patchBucket(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IBucket|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.patchBucket as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes patchBucket with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.PatchBucketRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.patchBucket = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.patchBucket(request), expectedError);
            assert((client.innerApiCalls.patchBucket as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateBucket', () => {
        it('invokes updateBucket without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.UpdateBucketRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.Bucket());
            client.innerApiCalls.updateBucket = stubSimpleCall(expectedResponse);
            const [response] = await client.updateBucket(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateBucket as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateBucket without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.UpdateBucketRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.Bucket());
            client.innerApiCalls.updateBucket = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateBucket(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IBucket|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateBucket as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateBucket with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.UpdateBucketRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateBucket = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateBucket(request), expectedError);
            assert((client.innerApiCalls.updateBucket as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('stopChannel', () => {
        it('invokes stopChannel without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.StopChannelRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.stopChannel = stubSimpleCall(expectedResponse);
            const [response] = await client.stopChannel(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.stopChannel as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes stopChannel without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.StopChannelRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.stopChannel = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.stopChannel(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.stopChannel as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes stopChannel with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.StopChannelRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.stopChannel = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.stopChannel(request), expectedError);
            assert((client.innerApiCalls.stopChannel as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteDefaultObjectAccessControl', () => {
        it('invokes deleteDefaultObjectAccessControl without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.DeleteDefaultObjectAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteDefaultObjectAccessControl = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteDefaultObjectAccessControl(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteDefaultObjectAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteDefaultObjectAccessControl without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.DeleteDefaultObjectAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteDefaultObjectAccessControl = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteDefaultObjectAccessControl(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteDefaultObjectAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteDefaultObjectAccessControl with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.DeleteDefaultObjectAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteDefaultObjectAccessControl = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteDefaultObjectAccessControl(request), expectedError);
            assert((client.innerApiCalls.deleteDefaultObjectAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getDefaultObjectAccessControl', () => {
        it('invokes getDefaultObjectAccessControl without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetDefaultObjectAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ObjectAccessControl());
            client.innerApiCalls.getDefaultObjectAccessControl = stubSimpleCall(expectedResponse);
            const [response] = await client.getDefaultObjectAccessControl(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getDefaultObjectAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getDefaultObjectAccessControl without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetDefaultObjectAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ObjectAccessControl());
            client.innerApiCalls.getDefaultObjectAccessControl = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getDefaultObjectAccessControl(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IObjectAccessControl|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getDefaultObjectAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getDefaultObjectAccessControl with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetDefaultObjectAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.getDefaultObjectAccessControl = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getDefaultObjectAccessControl(request), expectedError);
            assert((client.innerApiCalls.getDefaultObjectAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('insertDefaultObjectAccessControl', () => {
        it('invokes insertDefaultObjectAccessControl without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.InsertDefaultObjectAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ObjectAccessControl());
            client.innerApiCalls.insertDefaultObjectAccessControl = stubSimpleCall(expectedResponse);
            const [response] = await client.insertDefaultObjectAccessControl(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.insertDefaultObjectAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes insertDefaultObjectAccessControl without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.InsertDefaultObjectAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ObjectAccessControl());
            client.innerApiCalls.insertDefaultObjectAccessControl = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.insertDefaultObjectAccessControl(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IObjectAccessControl|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.insertDefaultObjectAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes insertDefaultObjectAccessControl with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.InsertDefaultObjectAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.insertDefaultObjectAccessControl = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.insertDefaultObjectAccessControl(request), expectedError);
            assert((client.innerApiCalls.insertDefaultObjectAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('listDefaultObjectAccessControls', () => {
        it('invokes listDefaultObjectAccessControls without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.ListDefaultObjectAccessControlsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ListObjectAccessControlsResponse());
            client.innerApiCalls.listDefaultObjectAccessControls = stubSimpleCall(expectedResponse);
            const [response] = await client.listDefaultObjectAccessControls(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listDefaultObjectAccessControls as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listDefaultObjectAccessControls without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.ListDefaultObjectAccessControlsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ListObjectAccessControlsResponse());
            client.innerApiCalls.listDefaultObjectAccessControls = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listDefaultObjectAccessControls(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IListObjectAccessControlsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listDefaultObjectAccessControls as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listDefaultObjectAccessControls with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.ListDefaultObjectAccessControlsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.listDefaultObjectAccessControls = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listDefaultObjectAccessControls(request), expectedError);
            assert((client.innerApiCalls.listDefaultObjectAccessControls as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('patchDefaultObjectAccessControl', () => {
        it('invokes patchDefaultObjectAccessControl without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.PatchDefaultObjectAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ObjectAccessControl());
            client.innerApiCalls.patchDefaultObjectAccessControl = stubSimpleCall(expectedResponse);
            const [response] = await client.patchDefaultObjectAccessControl(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.patchDefaultObjectAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes patchDefaultObjectAccessControl without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.PatchDefaultObjectAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ObjectAccessControl());
            client.innerApiCalls.patchDefaultObjectAccessControl = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.patchDefaultObjectAccessControl(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IObjectAccessControl|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.patchDefaultObjectAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes patchDefaultObjectAccessControl with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.PatchDefaultObjectAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.patchDefaultObjectAccessControl = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.patchDefaultObjectAccessControl(request), expectedError);
            assert((client.innerApiCalls.patchDefaultObjectAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateDefaultObjectAccessControl', () => {
        it('invokes updateDefaultObjectAccessControl without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.UpdateDefaultObjectAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ObjectAccessControl());
            client.innerApiCalls.updateDefaultObjectAccessControl = stubSimpleCall(expectedResponse);
            const [response] = await client.updateDefaultObjectAccessControl(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateDefaultObjectAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateDefaultObjectAccessControl without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.UpdateDefaultObjectAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ObjectAccessControl());
            client.innerApiCalls.updateDefaultObjectAccessControl = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateDefaultObjectAccessControl(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IObjectAccessControl|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateDefaultObjectAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateDefaultObjectAccessControl with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.UpdateDefaultObjectAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateDefaultObjectAccessControl = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateDefaultObjectAccessControl(request), expectedError);
            assert((client.innerApiCalls.updateDefaultObjectAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteNotification', () => {
        it('invokes deleteNotification without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.DeleteNotificationRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteNotification = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteNotification(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteNotification as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteNotification without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.DeleteNotificationRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteNotification = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteNotification(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteNotification as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteNotification with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.DeleteNotificationRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteNotification = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteNotification(request), expectedError);
            assert((client.innerApiCalls.deleteNotification as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getNotification', () => {
        it('invokes getNotification without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetNotificationRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.Notification());
            client.innerApiCalls.getNotification = stubSimpleCall(expectedResponse);
            const [response] = await client.getNotification(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getNotification as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getNotification without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetNotificationRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.Notification());
            client.innerApiCalls.getNotification = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getNotification(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.INotification|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getNotification as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getNotification with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetNotificationRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.getNotification = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getNotification(request), expectedError);
            assert((client.innerApiCalls.getNotification as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('insertNotification', () => {
        it('invokes insertNotification without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.InsertNotificationRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.Notification());
            client.innerApiCalls.insertNotification = stubSimpleCall(expectedResponse);
            const [response] = await client.insertNotification(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.insertNotification as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes insertNotification without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.InsertNotificationRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.Notification());
            client.innerApiCalls.insertNotification = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.insertNotification(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.INotification|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.insertNotification as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes insertNotification with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.InsertNotificationRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.insertNotification = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.insertNotification(request), expectedError);
            assert((client.innerApiCalls.insertNotification as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('listNotifications', () => {
        it('invokes listNotifications without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.ListNotificationsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ListNotificationsResponse());
            client.innerApiCalls.listNotifications = stubSimpleCall(expectedResponse);
            const [response] = await client.listNotifications(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listNotifications as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listNotifications without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.ListNotificationsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ListNotificationsResponse());
            client.innerApiCalls.listNotifications = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listNotifications(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IListNotificationsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listNotifications as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listNotifications with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.ListNotificationsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.listNotifications = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listNotifications(request), expectedError);
            assert((client.innerApiCalls.listNotifications as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteObjectAccessControl', () => {
        it('invokes deleteObjectAccessControl without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.DeleteObjectAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteObjectAccessControl = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteObjectAccessControl(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteObjectAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteObjectAccessControl without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.DeleteObjectAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteObjectAccessControl = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteObjectAccessControl(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteObjectAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteObjectAccessControl with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.DeleteObjectAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteObjectAccessControl = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteObjectAccessControl(request), expectedError);
            assert((client.innerApiCalls.deleteObjectAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getObjectAccessControl', () => {
        it('invokes getObjectAccessControl without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetObjectAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ObjectAccessControl());
            client.innerApiCalls.getObjectAccessControl = stubSimpleCall(expectedResponse);
            const [response] = await client.getObjectAccessControl(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getObjectAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getObjectAccessControl without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetObjectAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ObjectAccessControl());
            client.innerApiCalls.getObjectAccessControl = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getObjectAccessControl(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IObjectAccessControl|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getObjectAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getObjectAccessControl with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetObjectAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.getObjectAccessControl = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getObjectAccessControl(request), expectedError);
            assert((client.innerApiCalls.getObjectAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('insertObjectAccessControl', () => {
        it('invokes insertObjectAccessControl without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.InsertObjectAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ObjectAccessControl());
            client.innerApiCalls.insertObjectAccessControl = stubSimpleCall(expectedResponse);
            const [response] = await client.insertObjectAccessControl(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.insertObjectAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes insertObjectAccessControl without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.InsertObjectAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ObjectAccessControl());
            client.innerApiCalls.insertObjectAccessControl = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.insertObjectAccessControl(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IObjectAccessControl|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.insertObjectAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes insertObjectAccessControl with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.InsertObjectAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.insertObjectAccessControl = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.insertObjectAccessControl(request), expectedError);
            assert((client.innerApiCalls.insertObjectAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('listObjectAccessControls', () => {
        it('invokes listObjectAccessControls without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.ListObjectAccessControlsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ListObjectAccessControlsResponse());
            client.innerApiCalls.listObjectAccessControls = stubSimpleCall(expectedResponse);
            const [response] = await client.listObjectAccessControls(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listObjectAccessControls as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listObjectAccessControls without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.ListObjectAccessControlsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ListObjectAccessControlsResponse());
            client.innerApiCalls.listObjectAccessControls = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listObjectAccessControls(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IListObjectAccessControlsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listObjectAccessControls as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listObjectAccessControls with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.ListObjectAccessControlsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.listObjectAccessControls = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listObjectAccessControls(request), expectedError);
            assert((client.innerApiCalls.listObjectAccessControls as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('patchObjectAccessControl', () => {
        it('invokes patchObjectAccessControl without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.PatchObjectAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ObjectAccessControl());
            client.innerApiCalls.patchObjectAccessControl = stubSimpleCall(expectedResponse);
            const [response] = await client.patchObjectAccessControl(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.patchObjectAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes patchObjectAccessControl without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.PatchObjectAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ObjectAccessControl());
            client.innerApiCalls.patchObjectAccessControl = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.patchObjectAccessControl(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IObjectAccessControl|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.patchObjectAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes patchObjectAccessControl with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.PatchObjectAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.patchObjectAccessControl = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.patchObjectAccessControl(request), expectedError);
            assert((client.innerApiCalls.patchObjectAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateObjectAccessControl', () => {
        it('invokes updateObjectAccessControl without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.UpdateObjectAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ObjectAccessControl());
            client.innerApiCalls.updateObjectAccessControl = stubSimpleCall(expectedResponse);
            const [response] = await client.updateObjectAccessControl(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateObjectAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateObjectAccessControl without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.UpdateObjectAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ObjectAccessControl());
            client.innerApiCalls.updateObjectAccessControl = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateObjectAccessControl(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IObjectAccessControl|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateObjectAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateObjectAccessControl with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.UpdateObjectAccessControlRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateObjectAccessControl = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateObjectAccessControl(request), expectedError);
            assert((client.innerApiCalls.updateObjectAccessControl as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('composeObject', () => {
        it('invokes composeObject without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.ComposeObjectRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.Object());
            client.innerApiCalls.composeObject = stubSimpleCall(expectedResponse);
            const [response] = await client.composeObject(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.composeObject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes composeObject without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.ComposeObjectRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.Object());
            client.innerApiCalls.composeObject = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.composeObject(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IObject|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.composeObject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes composeObject with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.ComposeObjectRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.composeObject = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.composeObject(request), expectedError);
            assert((client.innerApiCalls.composeObject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('copyObject', () => {
        it('invokes copyObject without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.CopyObjectRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.Object());
            client.innerApiCalls.copyObject = stubSimpleCall(expectedResponse);
            const [response] = await client.copyObject(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.copyObject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes copyObject without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.CopyObjectRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.Object());
            client.innerApiCalls.copyObject = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.copyObject(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IObject|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.copyObject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes copyObject with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.CopyObjectRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.copyObject = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.copyObject(request), expectedError);
            assert((client.innerApiCalls.copyObject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteObject', () => {
        it('invokes deleteObject without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.DeleteObjectRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteObject = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteObject(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteObject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteObject without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.DeleteObjectRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteObject = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteObject(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteObject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteObject with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.DeleteObjectRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteObject = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteObject(request), expectedError);
            assert((client.innerApiCalls.deleteObject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getObject', () => {
        it('invokes getObject without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetObjectRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.Object());
            client.innerApiCalls.getObject = stubSimpleCall(expectedResponse);
            const [response] = await client.getObject(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getObject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getObject without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetObjectRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.Object());
            client.innerApiCalls.getObject = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getObject(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IObject|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getObject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getObject with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetObjectRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.getObject = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getObject(request), expectedError);
            assert((client.innerApiCalls.getObject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('listObjects', () => {
        it('invokes listObjects without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.ListObjectsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ListObjectsResponse());
            client.innerApiCalls.listObjects = stubSimpleCall(expectedResponse);
            const [response] = await client.listObjects(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listObjects as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listObjects without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.ListObjectsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ListObjectsResponse());
            client.innerApiCalls.listObjects = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listObjects(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IListObjectsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listObjects as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listObjects with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.ListObjectsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.listObjects = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listObjects(request), expectedError);
            assert((client.innerApiCalls.listObjects as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('rewriteObject', () => {
        it('invokes rewriteObject without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.RewriteObjectRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.RewriteResponse());
            client.innerApiCalls.rewriteObject = stubSimpleCall(expectedResponse);
            const [response] = await client.rewriteObject(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.rewriteObject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes rewriteObject without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.RewriteObjectRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.RewriteResponse());
            client.innerApiCalls.rewriteObject = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.rewriteObject(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IRewriteResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.rewriteObject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes rewriteObject with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.RewriteObjectRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.rewriteObject = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.rewriteObject(request), expectedError);
            assert((client.innerApiCalls.rewriteObject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('startResumableWrite', () => {
        it('invokes startResumableWrite without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.StartResumableWriteRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.StartResumableWriteResponse());
            client.innerApiCalls.startResumableWrite = stubSimpleCall(expectedResponse);
            const [response] = await client.startResumableWrite(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.startResumableWrite as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes startResumableWrite without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.StartResumableWriteRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.StartResumableWriteResponse());
            client.innerApiCalls.startResumableWrite = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.startResumableWrite(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IStartResumableWriteResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.startResumableWrite as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes startResumableWrite with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.StartResumableWriteRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.startResumableWrite = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.startResumableWrite(request), expectedError);
            assert((client.innerApiCalls.startResumableWrite as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('queryWriteStatus', () => {
        it('invokes queryWriteStatus without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.QueryWriteStatusRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.QueryWriteStatusResponse());
            client.innerApiCalls.queryWriteStatus = stubSimpleCall(expectedResponse);
            const [response] = await client.queryWriteStatus(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.queryWriteStatus as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes queryWriteStatus without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.QueryWriteStatusRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.QueryWriteStatusResponse());
            client.innerApiCalls.queryWriteStatus = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.queryWriteStatus(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IQueryWriteStatusResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.queryWriteStatus as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes queryWriteStatus with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.QueryWriteStatusRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.queryWriteStatus = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.queryWriteStatus(request), expectedError);
            assert((client.innerApiCalls.queryWriteStatus as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('patchObject', () => {
        it('invokes patchObject without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.PatchObjectRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.Object());
            client.innerApiCalls.patchObject = stubSimpleCall(expectedResponse);
            const [response] = await client.patchObject(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.patchObject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes patchObject without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.PatchObjectRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.Object());
            client.innerApiCalls.patchObject = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.patchObject(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IObject|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.patchObject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes patchObject with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.PatchObjectRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.patchObject = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.patchObject(request), expectedError);
            assert((client.innerApiCalls.patchObject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateObject', () => {
        it('invokes updateObject without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.UpdateObjectRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.Object());
            client.innerApiCalls.updateObject = stubSimpleCall(expectedResponse);
            const [response] = await client.updateObject(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateObject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateObject without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.UpdateObjectRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.Object());
            client.innerApiCalls.updateObject = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateObject(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IObject|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateObject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateObject with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.UpdateObjectRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateObject = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateObject(request), expectedError);
            assert((client.innerApiCalls.updateObject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getObjectIamPolicy', () => {
        it('invokes getObjectIamPolicy without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetIamPolicyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.getObjectIamPolicy = stubSimpleCall(expectedResponse);
            const [response] = await client.getObjectIamPolicy(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getObjectIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getObjectIamPolicy without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetIamPolicyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.getObjectIamPolicy = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getObjectIamPolicy(
                    request,
                    (err?: Error|null, result?: protos.google.iam.v1.IPolicy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getObjectIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getObjectIamPolicy with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetIamPolicyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.getObjectIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getObjectIamPolicy(request), expectedError);
            assert((client.innerApiCalls.getObjectIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('setObjectIamPolicy', () => {
        it('invokes setObjectIamPolicy without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.SetIamPolicyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.setObjectIamPolicy = stubSimpleCall(expectedResponse);
            const [response] = await client.setObjectIamPolicy(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setObjectIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes setObjectIamPolicy without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.SetIamPolicyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.setObjectIamPolicy = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setObjectIamPolicy(
                    request,
                    (err?: Error|null, result?: protos.google.iam.v1.IPolicy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setObjectIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes setObjectIamPolicy with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.SetIamPolicyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.setObjectIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setObjectIamPolicy(request), expectedError);
            assert((client.innerApiCalls.setObjectIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('testObjectIamPermissions', () => {
        it('invokes testObjectIamPermissions without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.TestIamPermissionsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsResponse());
            client.innerApiCalls.testObjectIamPermissions = stubSimpleCall(expectedResponse);
            const [response] = await client.testObjectIamPermissions(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.testObjectIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes testObjectIamPermissions without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.TestIamPermissionsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsResponse());
            client.innerApiCalls.testObjectIamPermissions = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.testObjectIamPermissions(
                    request,
                    (err?: Error|null, result?: protos.google.iam.v1.ITestIamPermissionsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.testObjectIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes testObjectIamPermissions with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.TestIamPermissionsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.testObjectIamPermissions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.testObjectIamPermissions(request), expectedError);
            assert((client.innerApiCalls.testObjectIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('watchAllObjects', () => {
        it('invokes watchAllObjects without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.WatchAllObjectsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.Channel());
            client.innerApiCalls.watchAllObjects = stubSimpleCall(expectedResponse);
            const [response] = await client.watchAllObjects(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.watchAllObjects as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes watchAllObjects without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.WatchAllObjectsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.Channel());
            client.innerApiCalls.watchAllObjects = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.watchAllObjects(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IChannel|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.watchAllObjects as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes watchAllObjects with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.WatchAllObjectsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.watchAllObjects = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.watchAllObjects(request), expectedError);
            assert((client.innerApiCalls.watchAllObjects as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getServiceAccount', () => {
        it('invokes getServiceAccount without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetProjectServiceAccountRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ServiceAccount());
            client.innerApiCalls.getServiceAccount = stubSimpleCall(expectedResponse);
            const [response] = await client.getServiceAccount(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getServiceAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getServiceAccount without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetProjectServiceAccountRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ServiceAccount());
            client.innerApiCalls.getServiceAccount = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getServiceAccount(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IServiceAccount|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getServiceAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getServiceAccount with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetProjectServiceAccountRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.getServiceAccount = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getServiceAccount(request), expectedError);
            assert((client.innerApiCalls.getServiceAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createHmacKey', () => {
        it('invokes createHmacKey without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.CreateHmacKeyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.CreateHmacKeyResponse());
            client.innerApiCalls.createHmacKey = stubSimpleCall(expectedResponse);
            const [response] = await client.createHmacKey(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createHmacKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createHmacKey without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.CreateHmacKeyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.CreateHmacKeyResponse());
            client.innerApiCalls.createHmacKey = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createHmacKey(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.ICreateHmacKeyResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createHmacKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createHmacKey with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.CreateHmacKeyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.createHmacKey = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createHmacKey(request), expectedError);
            assert((client.innerApiCalls.createHmacKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteHmacKey', () => {
        it('invokes deleteHmacKey without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.DeleteHmacKeyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteHmacKey = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteHmacKey(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteHmacKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteHmacKey without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.DeleteHmacKeyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteHmacKey = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteHmacKey(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteHmacKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteHmacKey with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.DeleteHmacKeyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteHmacKey = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteHmacKey(request), expectedError);
            assert((client.innerApiCalls.deleteHmacKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getHmacKey', () => {
        it('invokes getHmacKey without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetHmacKeyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.HmacKeyMetadata());
            client.innerApiCalls.getHmacKey = stubSimpleCall(expectedResponse);
            const [response] = await client.getHmacKey(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getHmacKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getHmacKey without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetHmacKeyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.HmacKeyMetadata());
            client.innerApiCalls.getHmacKey = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getHmacKey(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IHmacKeyMetadata|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getHmacKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getHmacKey with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetHmacKeyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.getHmacKey = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getHmacKey(request), expectedError);
            assert((client.innerApiCalls.getHmacKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('listHmacKeys', () => {
        it('invokes listHmacKeys without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.ListHmacKeysRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ListHmacKeysResponse());
            client.innerApiCalls.listHmacKeys = stubSimpleCall(expectedResponse);
            const [response] = await client.listHmacKeys(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listHmacKeys as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listHmacKeys without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.ListHmacKeysRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.ListHmacKeysResponse());
            client.innerApiCalls.listHmacKeys = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listHmacKeys(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IListHmacKeysResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listHmacKeys as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listHmacKeys with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.ListHmacKeysRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.listHmacKeys = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listHmacKeys(request), expectedError);
            assert((client.innerApiCalls.listHmacKeys as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateHmacKey', () => {
        it('invokes updateHmacKey without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.UpdateHmacKeyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.HmacKeyMetadata());
            client.innerApiCalls.updateHmacKey = stubSimpleCall(expectedResponse);
            const [response] = await client.updateHmacKey(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateHmacKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateHmacKey without error using callback', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.UpdateHmacKeyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.HmacKeyMetadata());
            client.innerApiCalls.updateHmacKey = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateHmacKey(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v1.IHmacKeyMetadata|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateHmacKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateHmacKey with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.UpdateHmacKeyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateHmacKey = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateHmacKey(request), expectedError);
            assert((client.innerApiCalls.updateHmacKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getObjectMedia', () => {
        it('invokes getObjectMedia without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetObjectMediaRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.GetObjectMediaResponse());
            client.innerApiCalls.getObjectMedia = stubServerStreamingCall(expectedResponse);
            const stream = client.getObjectMedia(request);
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response: protos.google.storage.v1.GetObjectMediaResponse) => {
                    resolve(response);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getObjectMedia as SinonStub)
                .getCall(0).calledWith(request, expectedOptions));
        });

        it('invokes getObjectMedia with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.GetObjectMediaRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.getObjectMedia = stubServerStreamingCall(undefined, expectedError);
            const stream = client.getObjectMedia(request);
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response: protos.google.storage.v1.GetObjectMediaResponse) => {
                    resolve(response);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.innerApiCalls.getObjectMedia as SinonStub)
                .getCall(0).calledWith(request, expectedOptions));
        });
    });

    describe('insertObject', () => {
        it('invokes insertObject without error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.InsertObjectRequest());
            const expectedResponse = generateSampleMessage(new protos.google.storage.v1.Object());
            client.innerApiCalls.insertObject = stubClientStreamingCall(expectedResponse);
            let stream: PassThrough;
            const promise = new Promise((resolve, reject) => {
                stream = client.insertObject(
                    (err?: Error|null, result?: protos.google.storage.v1.IObject|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }) as unknown as PassThrough;
                stream.write(request);
                stream.end();
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.insertObject as SinonStub)
                .getCall(0).calledWith(null, {} /*, callback defined above */));
            assert.deepStrictEqual((stream!._transform as SinonStub).getCall(0).args[0], request);
        });

        it('invokes insertObject with error', async () => {
            const client = new storageModule.v1.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storage.v1.InsertObjectRequest());
            const expectedError = new Error('expected');
            client.innerApiCalls.insertObject = stubClientStreamingCall(undefined, expectedError);
            let stream: PassThrough;
            const promise = new Promise((resolve, reject) => {
                stream = client.insertObject(
                    (err?: Error|null, result?: protos.google.storage.v1.IObject|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }) as unknown as PassThrough;
                stream.write(request);
                stream.end();
            });
            await assert.rejects(promise, expectedError);
            assert((client.innerApiCalls.insertObject as SinonStub)
                .getCall(0).calledWith(null, {} /*, callback defined above */));
        });
    });
});
