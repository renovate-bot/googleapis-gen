// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions} from 'google-gax';

import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/storage_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './storage_client_config.json';

const version = require('../../../package.json').version;

/**
 *  Manages Google Cloud Storage resources.
 * @class
 * @memberof v1
 */
export class StorageClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  storageStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of StorageClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP fallback mode.
   *     In fallback mode, a special browser-compatible transport implementation is used
   *     instead of gRPC transport. In browser context (if the `window` object is defined)
   *     the fallback mode is enabled automatically; set `options.fallback` to `false`
   *     if you need to override this behavior.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof StorageClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // Some of the methods on this service provide streaming responses.
    // Provide descriptors for these.
    this.descriptors.stream = {
      getObjectMedia: new this._gaxModule.StreamDescriptor(gax.StreamType.SERVER_STREAMING),
      insertObject: new this._gaxModule.StreamDescriptor(gax.StreamType.CLIENT_STREAMING)
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.storage.v1.Storage', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = gax.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.storageStub) {
      return this.storageStub;
    }

    // Put together the "service stub" for
    // google.storage.v1.Storage.
    this.storageStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.storage.v1.Storage') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.storage.v1.Storage,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const storageStubMethods =
        ['deleteBucketAccessControl', 'getBucketAccessControl', 'insertBucketAccessControl', 'listBucketAccessControls', 'updateBucketAccessControl', 'patchBucketAccessControl', 'deleteBucket', 'getBucket', 'insertBucket', 'listChannels', 'listBuckets', 'lockBucketRetentionPolicy', 'getBucketIamPolicy', 'setBucketIamPolicy', 'testBucketIamPermissions', 'patchBucket', 'updateBucket', 'stopChannel', 'deleteDefaultObjectAccessControl', 'getDefaultObjectAccessControl', 'insertDefaultObjectAccessControl', 'listDefaultObjectAccessControls', 'patchDefaultObjectAccessControl', 'updateDefaultObjectAccessControl', 'deleteNotification', 'getNotification', 'insertNotification', 'listNotifications', 'deleteObjectAccessControl', 'getObjectAccessControl', 'insertObjectAccessControl', 'listObjectAccessControls', 'patchObjectAccessControl', 'updateObjectAccessControl', 'composeObject', 'copyObject', 'deleteObject', 'getObject', 'getObjectMedia', 'insertObject', 'listObjects', 'rewriteObject', 'startResumableWrite', 'queryWriteStatus', 'patchObject', 'updateObject', 'getObjectIamPolicy', 'setObjectIamPolicy', 'testObjectIamPermissions', 'watchAllObjects', 'getServiceAccount', 'createHmacKey', 'deleteHmacKey', 'getHmacKey', 'listHmacKeys', 'updateHmacKey'];
    for (const methodName of storageStubMethods) {
      const callPromise = this.storageStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.stream[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.storageStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'storage.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'storage.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/cloud-platform.read-only',
      'https://www.googleapis.com/auth/devstorage.full_control',
      'https://www.googleapis.com/auth/devstorage.read_only',
      'https://www.googleapis.com/auth/devstorage.read_write'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  deleteBucketAccessControl(
      request?: protos.google.storage.v1.IDeleteBucketAccessControlRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.storage.v1.IDeleteBucketAccessControlRequest|undefined, {}|undefined
      ]>;
  deleteBucketAccessControl(
      request: protos.google.storage.v1.IDeleteBucketAccessControlRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IDeleteBucketAccessControlRequest|null|undefined,
          {}|null|undefined>): void;
  deleteBucketAccessControl(
      request: protos.google.storage.v1.IDeleteBucketAccessControlRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IDeleteBucketAccessControlRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Permanently deletes the ACL entry for the specified entity on the specified
 * bucket.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of a bucket.
 * @param {string} request.entity
 *   Required. The entity holding the permission. Can be one of:
 *   * `user-`*userId*
 *   * `user-`*emailAddress*
 *   * `group-`*groupId*
 *   * `group-`*emailAddress*
 *   * `allUsers`
 *   * `allAuthenticatedUsers`
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.deleteBucketAccessControl(request);
 */
  deleteBucketAccessControl(
      request?: protos.google.storage.v1.IDeleteBucketAccessControlRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IDeleteBucketAccessControlRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IDeleteBucketAccessControlRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.storage.v1.IDeleteBucketAccessControlRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.deleteBucketAccessControl(request, options, callback);
  }
  getBucketAccessControl(
      request?: protos.google.storage.v1.IGetBucketAccessControlRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IBucketAccessControl,
        protos.google.storage.v1.IGetBucketAccessControlRequest|undefined, {}|undefined
      ]>;
  getBucketAccessControl(
      request: protos.google.storage.v1.IGetBucketAccessControlRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IBucketAccessControl,
          protos.google.storage.v1.IGetBucketAccessControlRequest|null|undefined,
          {}|null|undefined>): void;
  getBucketAccessControl(
      request: protos.google.storage.v1.IGetBucketAccessControlRequest,
      callback: Callback<
          protos.google.storage.v1.IBucketAccessControl,
          protos.google.storage.v1.IGetBucketAccessControlRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Returns the ACL entry for the specified entity on the specified bucket.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of a bucket.
 * @param {string} request.entity
 *   Required. The entity holding the permission. Can be one of:
 *   * `user-`*userId*
 *   * `user-`*emailAddress*
 *   * `group-`*groupId*
 *   * `group-`*emailAddress*
 *   * `allUsers`
 *   * `allAuthenticatedUsers`
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [BucketAccessControl]{@link google.storage.v1.BucketAccessControl}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getBucketAccessControl(request);
 */
  getBucketAccessControl(
      request?: protos.google.storage.v1.IGetBucketAccessControlRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IBucketAccessControl,
          protos.google.storage.v1.IGetBucketAccessControlRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IBucketAccessControl,
          protos.google.storage.v1.IGetBucketAccessControlRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IBucketAccessControl,
        protos.google.storage.v1.IGetBucketAccessControlRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.getBucketAccessControl(request, options, callback);
  }
  insertBucketAccessControl(
      request?: protos.google.storage.v1.IInsertBucketAccessControlRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IBucketAccessControl,
        protos.google.storage.v1.IInsertBucketAccessControlRequest|undefined, {}|undefined
      ]>;
  insertBucketAccessControl(
      request: protos.google.storage.v1.IInsertBucketAccessControlRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IBucketAccessControl,
          protos.google.storage.v1.IInsertBucketAccessControlRequest|null|undefined,
          {}|null|undefined>): void;
  insertBucketAccessControl(
      request: protos.google.storage.v1.IInsertBucketAccessControlRequest,
      callback: Callback<
          protos.google.storage.v1.IBucketAccessControl,
          protos.google.storage.v1.IInsertBucketAccessControlRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates a new ACL entry on the specified bucket.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of a bucket.
 * @param {google.storage.v1.BucketAccessControl} request.bucketAccessControl
 *   Properties of the new bucket access control being inserted.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [BucketAccessControl]{@link google.storage.v1.BucketAccessControl}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.insertBucketAccessControl(request);
 */
  insertBucketAccessControl(
      request?: protos.google.storage.v1.IInsertBucketAccessControlRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IBucketAccessControl,
          protos.google.storage.v1.IInsertBucketAccessControlRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IBucketAccessControl,
          protos.google.storage.v1.IInsertBucketAccessControlRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IBucketAccessControl,
        protos.google.storage.v1.IInsertBucketAccessControlRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.insertBucketAccessControl(request, options, callback);
  }
  listBucketAccessControls(
      request?: protos.google.storage.v1.IListBucketAccessControlsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IListBucketAccessControlsResponse,
        protos.google.storage.v1.IListBucketAccessControlsRequest|undefined, {}|undefined
      ]>;
  listBucketAccessControls(
      request: protos.google.storage.v1.IListBucketAccessControlsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IListBucketAccessControlsResponse,
          protos.google.storage.v1.IListBucketAccessControlsRequest|null|undefined,
          {}|null|undefined>): void;
  listBucketAccessControls(
      request: protos.google.storage.v1.IListBucketAccessControlsRequest,
      callback: Callback<
          protos.google.storage.v1.IListBucketAccessControlsResponse,
          protos.google.storage.v1.IListBucketAccessControlsRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Retrieves ACL entries on the specified bucket.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of a bucket.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ListBucketAccessControlsResponse]{@link google.storage.v1.ListBucketAccessControlsResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.listBucketAccessControls(request);
 */
  listBucketAccessControls(
      request?: protos.google.storage.v1.IListBucketAccessControlsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IListBucketAccessControlsResponse,
          protos.google.storage.v1.IListBucketAccessControlsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IListBucketAccessControlsResponse,
          protos.google.storage.v1.IListBucketAccessControlsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IListBucketAccessControlsResponse,
        protos.google.storage.v1.IListBucketAccessControlsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.listBucketAccessControls(request, options, callback);
  }
  updateBucketAccessControl(
      request?: protos.google.storage.v1.IUpdateBucketAccessControlRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IBucketAccessControl,
        protos.google.storage.v1.IUpdateBucketAccessControlRequest|undefined, {}|undefined
      ]>;
  updateBucketAccessControl(
      request: protos.google.storage.v1.IUpdateBucketAccessControlRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IBucketAccessControl,
          protos.google.storage.v1.IUpdateBucketAccessControlRequest|null|undefined,
          {}|null|undefined>): void;
  updateBucketAccessControl(
      request: protos.google.storage.v1.IUpdateBucketAccessControlRequest,
      callback: Callback<
          protos.google.storage.v1.IBucketAccessControl,
          protos.google.storage.v1.IUpdateBucketAccessControlRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates an ACL entry on the specified bucket. Equivalent to
 * PatchBucketAccessControl, but all unspecified fields will be
 * reset to their default values.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of a bucket.
 * @param {string} request.entity
 *   Required. The entity holding the permission. Can be one of:
 *   * `user-`*userId*
 *   * `user-`*emailAddress*
 *   * `group-`*groupId*
 *   * `group-`*emailAddress*
 *   * `allUsers`
 *   * `allAuthenticatedUsers`
 * @param {google.storage.v1.BucketAccessControl} request.bucketAccessControl
 *   The BucketAccessControl for updating.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [BucketAccessControl]{@link google.storage.v1.BucketAccessControl}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.updateBucketAccessControl(request);
 */
  updateBucketAccessControl(
      request?: protos.google.storage.v1.IUpdateBucketAccessControlRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IBucketAccessControl,
          protos.google.storage.v1.IUpdateBucketAccessControlRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IBucketAccessControl,
          protos.google.storage.v1.IUpdateBucketAccessControlRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IBucketAccessControl,
        protos.google.storage.v1.IUpdateBucketAccessControlRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.updateBucketAccessControl(request, options, callback);
  }
  patchBucketAccessControl(
      request?: protos.google.storage.v1.IPatchBucketAccessControlRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IBucketAccessControl,
        protos.google.storage.v1.IPatchBucketAccessControlRequest|undefined, {}|undefined
      ]>;
  patchBucketAccessControl(
      request: protos.google.storage.v1.IPatchBucketAccessControlRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IBucketAccessControl,
          protos.google.storage.v1.IPatchBucketAccessControlRequest|null|undefined,
          {}|null|undefined>): void;
  patchBucketAccessControl(
      request: protos.google.storage.v1.IPatchBucketAccessControlRequest,
      callback: Callback<
          protos.google.storage.v1.IBucketAccessControl,
          protos.google.storage.v1.IPatchBucketAccessControlRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates an ACL entry on the specified bucket.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of a bucket.
 * @param {string} request.entity
 *   Required. The entity holding the permission. Can be one of:
 *   * `user-`*userId*
 *   * `user-`*emailAddress*
 *   * `group-`*groupId*
 *   * `group-`*emailAddress*
 *   * `allUsers`
 *   * `allAuthenticatedUsers`
 * @param {google.storage.v1.BucketAccessControl} request.bucketAccessControl
 *   The BucketAccessControl for updating.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   List of fields to be updated.
 *
 *   To specify ALL fields, equivalent to the JSON API's "update" function,
 *   specify a single field with the value `*`.
 *
 *
 *   Not specifying any fields is an error.
 *   Not specifying a field while setting that field to a non-default value is
 *   an error.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [BucketAccessControl]{@link google.storage.v1.BucketAccessControl}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.patchBucketAccessControl(request);
 */
  patchBucketAccessControl(
      request?: protos.google.storage.v1.IPatchBucketAccessControlRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IBucketAccessControl,
          protos.google.storage.v1.IPatchBucketAccessControlRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IBucketAccessControl,
          protos.google.storage.v1.IPatchBucketAccessControlRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IBucketAccessControl,
        protos.google.storage.v1.IPatchBucketAccessControlRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.patchBucketAccessControl(request, options, callback);
  }
  deleteBucket(
      request?: protos.google.storage.v1.IDeleteBucketRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.storage.v1.IDeleteBucketRequest|undefined, {}|undefined
      ]>;
  deleteBucket(
      request: protos.google.storage.v1.IDeleteBucketRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IDeleteBucketRequest|null|undefined,
          {}|null|undefined>): void;
  deleteBucket(
      request: protos.google.storage.v1.IDeleteBucketRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IDeleteBucketRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Permanently deletes an empty bucket.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of a bucket.
 * @param {google.protobuf.Int64Value} request.ifMetagenerationMatch
 *   If set, only deletes the bucket if its metageneration matches this value.
 * @param {google.protobuf.Int64Value} request.ifMetagenerationNotMatch
 *   If set, only deletes the bucket if its metageneration does not match this
 *   value.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.deleteBucket(request);
 */
  deleteBucket(
      request?: protos.google.storage.v1.IDeleteBucketRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IDeleteBucketRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IDeleteBucketRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.storage.v1.IDeleteBucketRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.deleteBucket(request, options, callback);
  }
  getBucket(
      request?: protos.google.storage.v1.IGetBucketRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IBucket,
        protos.google.storage.v1.IGetBucketRequest|undefined, {}|undefined
      ]>;
  getBucket(
      request: protos.google.storage.v1.IGetBucketRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IBucket,
          protos.google.storage.v1.IGetBucketRequest|null|undefined,
          {}|null|undefined>): void;
  getBucket(
      request: protos.google.storage.v1.IGetBucketRequest,
      callback: Callback<
          protos.google.storage.v1.IBucket,
          protos.google.storage.v1.IGetBucketRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Returns metadata for the specified bucket.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of a bucket.
 * @param {google.protobuf.Int64Value} request.ifMetagenerationMatch
 *   Makes the return of the bucket metadata conditional on whether the bucket's
 *   current metageneration matches the given value.
 * @param {google.protobuf.Int64Value} request.ifMetagenerationNotMatch
 *   Makes the return of the bucket metadata conditional on whether the bucket's
 *   current metageneration does not match the given value.
 * @param {google.storage.v1.CommonEnums.Projection} request.projection
 *   Set of properties to return. Defaults to `NO_ACL`.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Bucket]{@link google.storage.v1.Bucket}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getBucket(request);
 */
  getBucket(
      request?: protos.google.storage.v1.IGetBucketRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IBucket,
          protos.google.storage.v1.IGetBucketRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IBucket,
          protos.google.storage.v1.IGetBucketRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IBucket,
        protos.google.storage.v1.IGetBucketRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.getBucket(request, options, callback);
  }
  insertBucket(
      request?: protos.google.storage.v1.IInsertBucketRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IBucket,
        protos.google.storage.v1.IInsertBucketRequest|undefined, {}|undefined
      ]>;
  insertBucket(
      request: protos.google.storage.v1.IInsertBucketRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IBucket,
          protos.google.storage.v1.IInsertBucketRequest|null|undefined,
          {}|null|undefined>): void;
  insertBucket(
      request: protos.google.storage.v1.IInsertBucketRequest,
      callback: Callback<
          protos.google.storage.v1.IBucket,
          protos.google.storage.v1.IInsertBucketRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates a new bucket.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.storage.v1.CommonEnums.PredefinedBucketAcl} request.predefinedAcl
 *   Apply a predefined set of access controls to this bucket.
 * @param {google.storage.v1.CommonEnums.PredefinedObjectAcl} request.predefinedDefaultObjectAcl
 *   Apply a predefined set of default object access controls to this bucket.
 * @param {string} request.project
 *   Required. A valid API project identifier.
 * @param {google.storage.v1.CommonEnums.Projection} request.projection
 *   Set of properties to return. Defaults to `NO_ACL`, unless the
 *   bucket resource specifies `acl` or `defaultObjectAcl`
 *   properties, when it defaults to `FULL`.
 * @param {google.storage.v1.Bucket} request.bucket
 *   Properties of the new bucket being inserted, including its name.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Bucket]{@link google.storage.v1.Bucket}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.insertBucket(request);
 */
  insertBucket(
      request?: protos.google.storage.v1.IInsertBucketRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IBucket,
          protos.google.storage.v1.IInsertBucketRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IBucket,
          protos.google.storage.v1.IInsertBucketRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IBucket,
        protos.google.storage.v1.IInsertBucketRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.insertBucket(request, options, callback);
  }
  listChannels(
      request?: protos.google.storage.v1.IListChannelsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IListChannelsResponse,
        protos.google.storage.v1.IListChannelsRequest|undefined, {}|undefined
      ]>;
  listChannels(
      request: protos.google.storage.v1.IListChannelsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IListChannelsResponse,
          protos.google.storage.v1.IListChannelsRequest|null|undefined,
          {}|null|undefined>): void;
  listChannels(
      request: protos.google.storage.v1.IListChannelsRequest,
      callback: Callback<
          protos.google.storage.v1.IListChannelsResponse,
          protos.google.storage.v1.IListChannelsRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * List active object change notification channels for this bucket.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of a bucket.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ListChannelsResponse]{@link google.storage.v1.ListChannelsResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.listChannels(request);
 */
  listChannels(
      request?: protos.google.storage.v1.IListChannelsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IListChannelsResponse,
          protos.google.storage.v1.IListChannelsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IListChannelsResponse,
          protos.google.storage.v1.IListChannelsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IListChannelsResponse,
        protos.google.storage.v1.IListChannelsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.listChannels(request, options, callback);
  }
  listBuckets(
      request?: protos.google.storage.v1.IListBucketsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IListBucketsResponse,
        protos.google.storage.v1.IListBucketsRequest|undefined, {}|undefined
      ]>;
  listBuckets(
      request: protos.google.storage.v1.IListBucketsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IListBucketsResponse,
          protos.google.storage.v1.IListBucketsRequest|null|undefined,
          {}|null|undefined>): void;
  listBuckets(
      request: protos.google.storage.v1.IListBucketsRequest,
      callback: Callback<
          protos.google.storage.v1.IListBucketsResponse,
          protos.google.storage.v1.IListBucketsRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Retrieves a list of buckets for a given project.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.maxResults
 *   Maximum number of buckets to return in a single response. The service will
 *   use this parameter or 1,000 items, whichever is smaller.
 * @param {string} request.pageToken
 *   A previously-returned page token representing part of the larger set of
 *   results to view.
 * @param {string} request.prefix
 *   Filter results to buckets whose names begin with this prefix.
 * @param {string} request.project
 *   Required. A valid API project identifier.
 * @param {google.storage.v1.CommonEnums.Projection} request.projection
 *   Set of properties to return. Defaults to `NO_ACL`.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ListBucketsResponse]{@link google.storage.v1.ListBucketsResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.listBuckets(request);
 */
  listBuckets(
      request?: protos.google.storage.v1.IListBucketsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IListBucketsResponse,
          protos.google.storage.v1.IListBucketsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IListBucketsResponse,
          protos.google.storage.v1.IListBucketsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IListBucketsResponse,
        protos.google.storage.v1.IListBucketsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.listBuckets(request, options, callback);
  }
  lockBucketRetentionPolicy(
      request?: protos.google.storage.v1.ILockRetentionPolicyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IBucket,
        protos.google.storage.v1.ILockRetentionPolicyRequest|undefined, {}|undefined
      ]>;
  lockBucketRetentionPolicy(
      request: protos.google.storage.v1.ILockRetentionPolicyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IBucket,
          protos.google.storage.v1.ILockRetentionPolicyRequest|null|undefined,
          {}|null|undefined>): void;
  lockBucketRetentionPolicy(
      request: protos.google.storage.v1.ILockRetentionPolicyRequest,
      callback: Callback<
          protos.google.storage.v1.IBucket,
          protos.google.storage.v1.ILockRetentionPolicyRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Locks retention policy on a bucket.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of a bucket.
 * @param {number} request.ifMetagenerationMatch
 *   Makes the operation conditional on whether bucket's current metageneration
 *   matches the given value. Must be positive.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Bucket]{@link google.storage.v1.Bucket}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.lockBucketRetentionPolicy(request);
 */
  lockBucketRetentionPolicy(
      request?: protos.google.storage.v1.ILockRetentionPolicyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IBucket,
          protos.google.storage.v1.ILockRetentionPolicyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IBucket,
          protos.google.storage.v1.ILockRetentionPolicyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IBucket,
        protos.google.storage.v1.ILockRetentionPolicyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.lockBucketRetentionPolicy(request, options, callback);
  }
  getBucketIamPolicy(
      request?: protos.google.storage.v1.IGetIamPolicyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.storage.v1.IGetIamPolicyRequest|undefined, {}|undefined
      ]>;
  getBucketIamPolicy(
      request: protos.google.storage.v1.IGetIamPolicyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.storage.v1.IGetIamPolicyRequest|null|undefined,
          {}|null|undefined>): void;
  getBucketIamPolicy(
      request: protos.google.storage.v1.IGetIamPolicyRequest,
      callback: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.storage.v1.IGetIamPolicyRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Gets the IAM policy for the specified bucket.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.iam.v1.GetIamPolicyRequest} request.iamRequest
 *   The request sent to IAM.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getBucketIamPolicy(request);
 */
  getBucketIamPolicy(
      request?: protos.google.storage.v1.IGetIamPolicyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.storage.v1.IGetIamPolicyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.storage.v1.IGetIamPolicyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.storage.v1.IGetIamPolicyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.getBucketIamPolicy(request, options, callback);
  }
  setBucketIamPolicy(
      request?: protos.google.storage.v1.ISetIamPolicyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.storage.v1.ISetIamPolicyRequest|undefined, {}|undefined
      ]>;
  setBucketIamPolicy(
      request: protos.google.storage.v1.ISetIamPolicyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.storage.v1.ISetIamPolicyRequest|null|undefined,
          {}|null|undefined>): void;
  setBucketIamPolicy(
      request: protos.google.storage.v1.ISetIamPolicyRequest,
      callback: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.storage.v1.ISetIamPolicyRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates an IAM policy for the specified bucket.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.iam.v1.SetIamPolicyRequest} request.iamRequest
 *   The request sent to IAM.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.setBucketIamPolicy(request);
 */
  setBucketIamPolicy(
      request?: protos.google.storage.v1.ISetIamPolicyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.storage.v1.ISetIamPolicyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.storage.v1.ISetIamPolicyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.storage.v1.ISetIamPolicyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.setBucketIamPolicy(request, options, callback);
  }
  testBucketIamPermissions(
      request?: protos.google.storage.v1.ITestIamPermissionsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.v1.ITestIamPermissionsResponse,
        protos.google.storage.v1.ITestIamPermissionsRequest|undefined, {}|undefined
      ]>;
  testBucketIamPermissions(
      request: protos.google.storage.v1.ITestIamPermissionsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.storage.v1.ITestIamPermissionsRequest|null|undefined,
          {}|null|undefined>): void;
  testBucketIamPermissions(
      request: protos.google.storage.v1.ITestIamPermissionsRequest,
      callback: Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.storage.v1.ITestIamPermissionsRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Tests a set of permissions on the given bucket to see which, if
 * any, are held by the caller.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.iam.v1.TestIamPermissionsRequest} request.iamRequest
 *   The request sent to IAM.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.testBucketIamPermissions(request);
 */
  testBucketIamPermissions(
      request?: protos.google.storage.v1.ITestIamPermissionsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.storage.v1.ITestIamPermissionsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.storage.v1.ITestIamPermissionsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.v1.ITestIamPermissionsResponse,
        protos.google.storage.v1.ITestIamPermissionsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.testBucketIamPermissions(request, options, callback);
  }
  patchBucket(
      request?: protos.google.storage.v1.IPatchBucketRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IBucket,
        protos.google.storage.v1.IPatchBucketRequest|undefined, {}|undefined
      ]>;
  patchBucket(
      request: protos.google.storage.v1.IPatchBucketRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IBucket,
          protos.google.storage.v1.IPatchBucketRequest|null|undefined,
          {}|null|undefined>): void;
  patchBucket(
      request: protos.google.storage.v1.IPatchBucketRequest,
      callback: Callback<
          protos.google.storage.v1.IBucket,
          protos.google.storage.v1.IPatchBucketRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates a bucket. Changes to the bucket will be readable immediately after
 * writing, but configuration changes may take time to propagate.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of a bucket.
 * @param {google.protobuf.Int64Value} request.ifMetagenerationMatch
 *   Makes the return of the bucket metadata conditional on whether the bucket's
 *   current metageneration matches the given value.
 * @param {google.protobuf.Int64Value} request.ifMetagenerationNotMatch
 *   Makes the return of the bucket metadata conditional on whether the bucket's
 *   current metageneration does not match the given value.
 * @param {google.storage.v1.CommonEnums.PredefinedBucketAcl} request.predefinedAcl
 *   Apply a predefined set of access controls to this bucket.
 * @param {google.storage.v1.CommonEnums.PredefinedObjectAcl} request.predefinedDefaultObjectAcl
 *   Apply a predefined set of default object access controls to this bucket.
 * @param {google.storage.v1.CommonEnums.Projection} request.projection
 *   Set of properties to return. Defaults to `FULL`.
 * @param {google.storage.v1.Bucket} request.metadata
 *   The Bucket metadata for updating.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   List of fields to be updated.
 *
 *   To specify ALL fields, equivalent to the JSON API's "update" function,
 *   specify a single field with the value `*`. Note: not recommended. If a new
 *   field is introduced at a later time, an older client updating with the `*`
 *   may accidentally reset the new field's value.
 *
 *   Not specifying any fields is an error.
 *   Not specifying a field while setting that field to a non-default value is
 *   an error.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Bucket]{@link google.storage.v1.Bucket}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.patchBucket(request);
 */
  patchBucket(
      request?: protos.google.storage.v1.IPatchBucketRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IBucket,
          protos.google.storage.v1.IPatchBucketRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IBucket,
          protos.google.storage.v1.IPatchBucketRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IBucket,
        protos.google.storage.v1.IPatchBucketRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.patchBucket(request, options, callback);
  }
  updateBucket(
      request?: protos.google.storage.v1.IUpdateBucketRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IBucket,
        protos.google.storage.v1.IUpdateBucketRequest|undefined, {}|undefined
      ]>;
  updateBucket(
      request: protos.google.storage.v1.IUpdateBucketRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IBucket,
          protos.google.storage.v1.IUpdateBucketRequest|null|undefined,
          {}|null|undefined>): void;
  updateBucket(
      request: protos.google.storage.v1.IUpdateBucketRequest,
      callback: Callback<
          protos.google.storage.v1.IBucket,
          protos.google.storage.v1.IUpdateBucketRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates a bucket. Equivalent to PatchBucket, but always replaces all
 * mutatable fields of the bucket with new values, reverting all
 * unspecified fields to their default values.
 * Like PatchBucket, Changes to the bucket will be readable immediately after
 * writing, but configuration changes may take time to propagate.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of a bucket.
 * @param {google.protobuf.Int64Value} request.ifMetagenerationMatch
 *   Makes the return of the bucket metadata conditional on whether the bucket's
 *   current metageneration matches the given value.
 * @param {google.protobuf.Int64Value} request.ifMetagenerationNotMatch
 *   Makes the return of the bucket metadata conditional on whether the bucket's
 *   current metageneration does not match the given value.
 * @param {google.storage.v1.CommonEnums.PredefinedBucketAcl} request.predefinedAcl
 *   Apply a predefined set of access controls to this bucket.
 * @param {google.storage.v1.CommonEnums.PredefinedObjectAcl} request.predefinedDefaultObjectAcl
 *   Apply a predefined set of default object access controls to this bucket.
 * @param {google.storage.v1.CommonEnums.Projection} request.projection
 *   Set of properties to return. Defaults to `FULL`.
 * @param {google.storage.v1.Bucket} request.metadata
 *   The Bucket metadata for updating.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Bucket]{@link google.storage.v1.Bucket}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.updateBucket(request);
 */
  updateBucket(
      request?: protos.google.storage.v1.IUpdateBucketRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IBucket,
          protos.google.storage.v1.IUpdateBucketRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IBucket,
          protos.google.storage.v1.IUpdateBucketRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IBucket,
        protos.google.storage.v1.IUpdateBucketRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.updateBucket(request, options, callback);
  }
  stopChannel(
      request?: protos.google.storage.v1.IStopChannelRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.storage.v1.IStopChannelRequest|undefined, {}|undefined
      ]>;
  stopChannel(
      request: protos.google.storage.v1.IStopChannelRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IStopChannelRequest|null|undefined,
          {}|null|undefined>): void;
  stopChannel(
      request: protos.google.storage.v1.IStopChannelRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IStopChannelRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Halts "Object Change Notification" push messagages.
 * See https://cloud.google.com/storage/docs/object-change-notification
 * Note: this is not related to the newer "Notifications" resource, which
 * are stopped using DeleteNotification.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.storage.v1.Channel} request.channel
 *   The channel to be stopped.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.stopChannel(request);
 */
  stopChannel(
      request?: protos.google.storage.v1.IStopChannelRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IStopChannelRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IStopChannelRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.storage.v1.IStopChannelRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.stopChannel(request, options, callback);
  }
  deleteDefaultObjectAccessControl(
      request?: protos.google.storage.v1.IDeleteDefaultObjectAccessControlRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.storage.v1.IDeleteDefaultObjectAccessControlRequest|undefined, {}|undefined
      ]>;
  deleteDefaultObjectAccessControl(
      request: protos.google.storage.v1.IDeleteDefaultObjectAccessControlRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IDeleteDefaultObjectAccessControlRequest|null|undefined,
          {}|null|undefined>): void;
  deleteDefaultObjectAccessControl(
      request: protos.google.storage.v1.IDeleteDefaultObjectAccessControlRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IDeleteDefaultObjectAccessControlRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Permanently deletes the default object ACL entry for the specified entity
 * on the specified bucket.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of a bucket.
 * @param {string} request.entity
 *   Required. The entity holding the permission. Can be one of:
 *   * `user-`*userId*
 *   * `user-`*emailAddress*
 *   * `group-`*groupId*
 *   * `group-`*emailAddress*
 *   * `allUsers`
 *   * `allAuthenticatedUsers`
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.deleteDefaultObjectAccessControl(request);
 */
  deleteDefaultObjectAccessControl(
      request?: protos.google.storage.v1.IDeleteDefaultObjectAccessControlRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IDeleteDefaultObjectAccessControlRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IDeleteDefaultObjectAccessControlRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.storage.v1.IDeleteDefaultObjectAccessControlRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.deleteDefaultObjectAccessControl(request, options, callback);
  }
  getDefaultObjectAccessControl(
      request?: protos.google.storage.v1.IGetDefaultObjectAccessControlRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IObjectAccessControl,
        protos.google.storage.v1.IGetDefaultObjectAccessControlRequest|undefined, {}|undefined
      ]>;
  getDefaultObjectAccessControl(
      request: protos.google.storage.v1.IGetDefaultObjectAccessControlRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IGetDefaultObjectAccessControlRequest|null|undefined,
          {}|null|undefined>): void;
  getDefaultObjectAccessControl(
      request: protos.google.storage.v1.IGetDefaultObjectAccessControlRequest,
      callback: Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IGetDefaultObjectAccessControlRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Returns the default object ACL entry for the specified entity on the
 * specified bucket.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of a bucket.
 * @param {string} request.entity
 *   Required. The entity holding the permission. Can be one of:
 *   * `user-`*userId*
 *   * `user-`*emailAddress*
 *   * `group-`*groupId*
 *   * `group-`*emailAddress*
 *   * `allUsers`
 *   * `allAuthenticatedUsers`
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ObjectAccessControl]{@link google.storage.v1.ObjectAccessControl}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getDefaultObjectAccessControl(request);
 */
  getDefaultObjectAccessControl(
      request?: protos.google.storage.v1.IGetDefaultObjectAccessControlRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IGetDefaultObjectAccessControlRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IGetDefaultObjectAccessControlRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IObjectAccessControl,
        protos.google.storage.v1.IGetDefaultObjectAccessControlRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.getDefaultObjectAccessControl(request, options, callback);
  }
  insertDefaultObjectAccessControl(
      request?: protos.google.storage.v1.IInsertDefaultObjectAccessControlRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IObjectAccessControl,
        protos.google.storage.v1.IInsertDefaultObjectAccessControlRequest|undefined, {}|undefined
      ]>;
  insertDefaultObjectAccessControl(
      request: protos.google.storage.v1.IInsertDefaultObjectAccessControlRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IInsertDefaultObjectAccessControlRequest|null|undefined,
          {}|null|undefined>): void;
  insertDefaultObjectAccessControl(
      request: protos.google.storage.v1.IInsertDefaultObjectAccessControlRequest,
      callback: Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IInsertDefaultObjectAccessControlRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates a new default object ACL entry on the specified bucket.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of a bucket.
 * @param {google.storage.v1.ObjectAccessControl} request.objectAccessControl
 *   Properties of the object access control being inserted.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ObjectAccessControl]{@link google.storage.v1.ObjectAccessControl}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.insertDefaultObjectAccessControl(request);
 */
  insertDefaultObjectAccessControl(
      request?: protos.google.storage.v1.IInsertDefaultObjectAccessControlRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IInsertDefaultObjectAccessControlRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IInsertDefaultObjectAccessControlRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IObjectAccessControl,
        protos.google.storage.v1.IInsertDefaultObjectAccessControlRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.insertDefaultObjectAccessControl(request, options, callback);
  }
  listDefaultObjectAccessControls(
      request?: protos.google.storage.v1.IListDefaultObjectAccessControlsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IListObjectAccessControlsResponse,
        protos.google.storage.v1.IListDefaultObjectAccessControlsRequest|undefined, {}|undefined
      ]>;
  listDefaultObjectAccessControls(
      request: protos.google.storage.v1.IListDefaultObjectAccessControlsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IListObjectAccessControlsResponse,
          protos.google.storage.v1.IListDefaultObjectAccessControlsRequest|null|undefined,
          {}|null|undefined>): void;
  listDefaultObjectAccessControls(
      request: protos.google.storage.v1.IListDefaultObjectAccessControlsRequest,
      callback: Callback<
          protos.google.storage.v1.IListObjectAccessControlsResponse,
          protos.google.storage.v1.IListDefaultObjectAccessControlsRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Retrieves default object ACL entries on the specified bucket.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of a bucket.
 * @param {google.protobuf.Int64Value} request.ifMetagenerationMatch
 *   If present, only return default ACL listing if the bucket's current
 *   metageneration matches this value.
 * @param {google.protobuf.Int64Value} request.ifMetagenerationNotMatch
 *   If present, only return default ACL listing if the bucket's current
 *   metageneration does not match the given value.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ListObjectAccessControlsResponse]{@link google.storage.v1.ListObjectAccessControlsResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.listDefaultObjectAccessControls(request);
 */
  listDefaultObjectAccessControls(
      request?: protos.google.storage.v1.IListDefaultObjectAccessControlsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IListObjectAccessControlsResponse,
          protos.google.storage.v1.IListDefaultObjectAccessControlsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IListObjectAccessControlsResponse,
          protos.google.storage.v1.IListDefaultObjectAccessControlsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IListObjectAccessControlsResponse,
        protos.google.storage.v1.IListDefaultObjectAccessControlsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.listDefaultObjectAccessControls(request, options, callback);
  }
  patchDefaultObjectAccessControl(
      request?: protos.google.storage.v1.IPatchDefaultObjectAccessControlRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IObjectAccessControl,
        protos.google.storage.v1.IPatchDefaultObjectAccessControlRequest|undefined, {}|undefined
      ]>;
  patchDefaultObjectAccessControl(
      request: protos.google.storage.v1.IPatchDefaultObjectAccessControlRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IPatchDefaultObjectAccessControlRequest|null|undefined,
          {}|null|undefined>): void;
  patchDefaultObjectAccessControl(
      request: protos.google.storage.v1.IPatchDefaultObjectAccessControlRequest,
      callback: Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IPatchDefaultObjectAccessControlRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates a default object ACL entry on the specified bucket.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of a bucket.
 * @param {string} request.entity
 *   Required. The entity holding the permission. Can be one of:
 *   * `user-`*userId*
 *   * `user-`*emailAddress*
 *   * `group-`*groupId*
 *   * `group-`*emailAddress*
 *   * `allUsers`
 *   * `allAuthenticatedUsers`
 * @param {google.storage.v1.ObjectAccessControl} request.objectAccessControl
 *   The ObjectAccessControl for updating.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   List of fields to be updated.
 *
 *   To specify ALL fields, equivalent to the JSON API's "update" function,
 *   specify a single field with the value `*`. Note: not recommended. If a new
 *   field is introduced at a later time, an older client updating with the `*`
 *   may accidentally reset the new field's value.
 *
 *   Not specifying any fields is an error.
 *   Not specifying a field while setting that field to a non-default value is
 *   an error.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ObjectAccessControl]{@link google.storage.v1.ObjectAccessControl}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.patchDefaultObjectAccessControl(request);
 */
  patchDefaultObjectAccessControl(
      request?: protos.google.storage.v1.IPatchDefaultObjectAccessControlRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IPatchDefaultObjectAccessControlRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IPatchDefaultObjectAccessControlRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IObjectAccessControl,
        protos.google.storage.v1.IPatchDefaultObjectAccessControlRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.patchDefaultObjectAccessControl(request, options, callback);
  }
  updateDefaultObjectAccessControl(
      request?: protos.google.storage.v1.IUpdateDefaultObjectAccessControlRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IObjectAccessControl,
        protos.google.storage.v1.IUpdateDefaultObjectAccessControlRequest|undefined, {}|undefined
      ]>;
  updateDefaultObjectAccessControl(
      request: protos.google.storage.v1.IUpdateDefaultObjectAccessControlRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IUpdateDefaultObjectAccessControlRequest|null|undefined,
          {}|null|undefined>): void;
  updateDefaultObjectAccessControl(
      request: protos.google.storage.v1.IUpdateDefaultObjectAccessControlRequest,
      callback: Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IUpdateDefaultObjectAccessControlRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates a default object ACL entry on the specified bucket. Equivalent to
 * PatchDefaultObjectAccessControl, but modifies all unspecified fields to
 * their default values.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of a bucket.
 * @param {string} request.entity
 *   Required. The entity holding the permission. Can be one of:
 *   * `user-`*userId*
 *   * `user-`*emailAddress*
 *   * `group-`*groupId*
 *   * `group-`*emailAddress*
 *   * `allUsers`
 *   * `allAuthenticatedUsers`
 * @param {google.storage.v1.ObjectAccessControl} request.objectAccessControl
 *   The ObjectAccessControl for updating.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ObjectAccessControl]{@link google.storage.v1.ObjectAccessControl}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.updateDefaultObjectAccessControl(request);
 */
  updateDefaultObjectAccessControl(
      request?: protos.google.storage.v1.IUpdateDefaultObjectAccessControlRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IUpdateDefaultObjectAccessControlRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IUpdateDefaultObjectAccessControlRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IObjectAccessControl,
        protos.google.storage.v1.IUpdateDefaultObjectAccessControlRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.updateDefaultObjectAccessControl(request, options, callback);
  }
  deleteNotification(
      request?: protos.google.storage.v1.IDeleteNotificationRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.storage.v1.IDeleteNotificationRequest|undefined, {}|undefined
      ]>;
  deleteNotification(
      request: protos.google.storage.v1.IDeleteNotificationRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IDeleteNotificationRequest|null|undefined,
          {}|null|undefined>): void;
  deleteNotification(
      request: protos.google.storage.v1.IDeleteNotificationRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IDeleteNotificationRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Permanently deletes a notification subscription.
 * Note: Older, "Object Change Notification" push subscriptions should be
 * deleted using StopChannel instead.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. The parent bucket of the notification.
 * @param {string} request.notification
 *   Required. ID of the notification to delete.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.deleteNotification(request);
 */
  deleteNotification(
      request?: protos.google.storage.v1.IDeleteNotificationRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IDeleteNotificationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IDeleteNotificationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.storage.v1.IDeleteNotificationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.deleteNotification(request, options, callback);
  }
  getNotification(
      request?: protos.google.storage.v1.IGetNotificationRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.INotification,
        protos.google.storage.v1.IGetNotificationRequest|undefined, {}|undefined
      ]>;
  getNotification(
      request: protos.google.storage.v1.IGetNotificationRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.INotification,
          protos.google.storage.v1.IGetNotificationRequest|null|undefined,
          {}|null|undefined>): void;
  getNotification(
      request: protos.google.storage.v1.IGetNotificationRequest,
      callback: Callback<
          protos.google.storage.v1.INotification,
          protos.google.storage.v1.IGetNotificationRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * View a notification configuration.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. The parent bucket of the notification.
 * @param {string} request.notification
 *   Required. Notification ID.
 *   Required.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Notification]{@link google.storage.v1.Notification}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getNotification(request);
 */
  getNotification(
      request?: protos.google.storage.v1.IGetNotificationRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.INotification,
          protos.google.storage.v1.IGetNotificationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.INotification,
          protos.google.storage.v1.IGetNotificationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.INotification,
        protos.google.storage.v1.IGetNotificationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.getNotification(request, options, callback);
  }
  insertNotification(
      request?: protos.google.storage.v1.IInsertNotificationRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.INotification,
        protos.google.storage.v1.IInsertNotificationRequest|undefined, {}|undefined
      ]>;
  insertNotification(
      request: protos.google.storage.v1.IInsertNotificationRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.INotification,
          protos.google.storage.v1.IInsertNotificationRequest|null|undefined,
          {}|null|undefined>): void;
  insertNotification(
      request: protos.google.storage.v1.IInsertNotificationRequest,
      callback: Callback<
          protos.google.storage.v1.INotification,
          protos.google.storage.v1.IInsertNotificationRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates a notification subscription for a given bucket.
 * These notifications, when triggered, publish messages to the specified
 * Cloud Pub/Sub topics.
 * See https://cloud.google.com/storage/docs/pubsub-notifications.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. The parent bucket of the notification.
 * @param {google.storage.v1.Notification} request.notification
 *   Properties of the notification to be inserted.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Notification]{@link google.storage.v1.Notification}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.insertNotification(request);
 */
  insertNotification(
      request?: protos.google.storage.v1.IInsertNotificationRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.INotification,
          protos.google.storage.v1.IInsertNotificationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.INotification,
          protos.google.storage.v1.IInsertNotificationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.INotification,
        protos.google.storage.v1.IInsertNotificationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.insertNotification(request, options, callback);
  }
  listNotifications(
      request?: protos.google.storage.v1.IListNotificationsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IListNotificationsResponse,
        protos.google.storage.v1.IListNotificationsRequest|undefined, {}|undefined
      ]>;
  listNotifications(
      request: protos.google.storage.v1.IListNotificationsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IListNotificationsResponse,
          protos.google.storage.v1.IListNotificationsRequest|null|undefined,
          {}|null|undefined>): void;
  listNotifications(
      request: protos.google.storage.v1.IListNotificationsRequest,
      callback: Callback<
          protos.google.storage.v1.IListNotificationsResponse,
          protos.google.storage.v1.IListNotificationsRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Retrieves a list of notification subscriptions for a given bucket.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of a Google Cloud Storage bucket.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ListNotificationsResponse]{@link google.storage.v1.ListNotificationsResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.listNotifications(request);
 */
  listNotifications(
      request?: protos.google.storage.v1.IListNotificationsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IListNotificationsResponse,
          protos.google.storage.v1.IListNotificationsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IListNotificationsResponse,
          protos.google.storage.v1.IListNotificationsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IListNotificationsResponse,
        protos.google.storage.v1.IListNotificationsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.listNotifications(request, options, callback);
  }
  deleteObjectAccessControl(
      request?: protos.google.storage.v1.IDeleteObjectAccessControlRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.storage.v1.IDeleteObjectAccessControlRequest|undefined, {}|undefined
      ]>;
  deleteObjectAccessControl(
      request: protos.google.storage.v1.IDeleteObjectAccessControlRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IDeleteObjectAccessControlRequest|null|undefined,
          {}|null|undefined>): void;
  deleteObjectAccessControl(
      request: protos.google.storage.v1.IDeleteObjectAccessControlRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IDeleteObjectAccessControlRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Permanently deletes the ACL entry for the specified entity on the specified
 * object.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of a bucket.
 * @param {string} request.entity
 *   Required. The entity holding the permission. Can be one of:
 *   * `user-`*userId*
 *   * `user-`*emailAddress*
 *   * `group-`*groupId*
 *   * `group-`*emailAddress*
 *   * `allUsers`
 *   * `allAuthenticatedUsers`
 * @param {string} request.object
 *   Required. Name of the object.
 * @param {number} request.generation
 *   If present, selects a specific revision of this object (as opposed to the
 *   latest version, the default).
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.deleteObjectAccessControl(request);
 */
  deleteObjectAccessControl(
      request?: protos.google.storage.v1.IDeleteObjectAccessControlRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IDeleteObjectAccessControlRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IDeleteObjectAccessControlRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.storage.v1.IDeleteObjectAccessControlRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.deleteObjectAccessControl(request, options, callback);
  }
  getObjectAccessControl(
      request?: protos.google.storage.v1.IGetObjectAccessControlRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IObjectAccessControl,
        protos.google.storage.v1.IGetObjectAccessControlRequest|undefined, {}|undefined
      ]>;
  getObjectAccessControl(
      request: protos.google.storage.v1.IGetObjectAccessControlRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IGetObjectAccessControlRequest|null|undefined,
          {}|null|undefined>): void;
  getObjectAccessControl(
      request: protos.google.storage.v1.IGetObjectAccessControlRequest,
      callback: Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IGetObjectAccessControlRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Returns the ACL entry for the specified entity on the specified object.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of a bucket.
 * @param {string} request.entity
 *   Required. The entity holding the permission. Can be one of:
 *   * `user-`*userId*
 *   * `user-`*emailAddress*
 *   * `group-`*groupId*
 *   * `group-`*emailAddress*
 *   * `allUsers`
 *   * `allAuthenticatedUsers`
 * @param {string} request.object
 *   Required. Name of the object.
 * @param {number} request.generation
 *   If present, selects a specific revision of this object (as opposed to the
 *   latest version, the default).
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ObjectAccessControl]{@link google.storage.v1.ObjectAccessControl}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getObjectAccessControl(request);
 */
  getObjectAccessControl(
      request?: protos.google.storage.v1.IGetObjectAccessControlRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IGetObjectAccessControlRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IGetObjectAccessControlRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IObjectAccessControl,
        protos.google.storage.v1.IGetObjectAccessControlRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.getObjectAccessControl(request, options, callback);
  }
  insertObjectAccessControl(
      request?: protos.google.storage.v1.IInsertObjectAccessControlRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IObjectAccessControl,
        protos.google.storage.v1.IInsertObjectAccessControlRequest|undefined, {}|undefined
      ]>;
  insertObjectAccessControl(
      request: protos.google.storage.v1.IInsertObjectAccessControlRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IInsertObjectAccessControlRequest|null|undefined,
          {}|null|undefined>): void;
  insertObjectAccessControl(
      request: protos.google.storage.v1.IInsertObjectAccessControlRequest,
      callback: Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IInsertObjectAccessControlRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates a new ACL entry on the specified object.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of a bucket.
 * @param {string} request.object
 *   Required. Name of the object.
 * @param {number} request.generation
 *   If present, selects a specific revision of this object (as opposed to the
 *   latest version, the default).
 * @param {google.storage.v1.ObjectAccessControl} request.objectAccessControl
 *   Properties of the object access control to be inserted.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ObjectAccessControl]{@link google.storage.v1.ObjectAccessControl}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.insertObjectAccessControl(request);
 */
  insertObjectAccessControl(
      request?: protos.google.storage.v1.IInsertObjectAccessControlRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IInsertObjectAccessControlRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IInsertObjectAccessControlRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IObjectAccessControl,
        protos.google.storage.v1.IInsertObjectAccessControlRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.insertObjectAccessControl(request, options, callback);
  }
  listObjectAccessControls(
      request?: protos.google.storage.v1.IListObjectAccessControlsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IListObjectAccessControlsResponse,
        protos.google.storage.v1.IListObjectAccessControlsRequest|undefined, {}|undefined
      ]>;
  listObjectAccessControls(
      request: protos.google.storage.v1.IListObjectAccessControlsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IListObjectAccessControlsResponse,
          protos.google.storage.v1.IListObjectAccessControlsRequest|null|undefined,
          {}|null|undefined>): void;
  listObjectAccessControls(
      request: protos.google.storage.v1.IListObjectAccessControlsRequest,
      callback: Callback<
          protos.google.storage.v1.IListObjectAccessControlsResponse,
          protos.google.storage.v1.IListObjectAccessControlsRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Retrieves ACL entries on the specified object.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of a bucket.
 * @param {string} request.object
 *   Required. Name of the object.
 * @param {number} request.generation
 *   If present, selects a specific revision of this object (as opposed to the
 *   latest version, the default).
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ListObjectAccessControlsResponse]{@link google.storage.v1.ListObjectAccessControlsResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.listObjectAccessControls(request);
 */
  listObjectAccessControls(
      request?: protos.google.storage.v1.IListObjectAccessControlsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IListObjectAccessControlsResponse,
          protos.google.storage.v1.IListObjectAccessControlsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IListObjectAccessControlsResponse,
          protos.google.storage.v1.IListObjectAccessControlsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IListObjectAccessControlsResponse,
        protos.google.storage.v1.IListObjectAccessControlsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.listObjectAccessControls(request, options, callback);
  }
  patchObjectAccessControl(
      request?: protos.google.storage.v1.IPatchObjectAccessControlRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IObjectAccessControl,
        protos.google.storage.v1.IPatchObjectAccessControlRequest|undefined, {}|undefined
      ]>;
  patchObjectAccessControl(
      request: protos.google.storage.v1.IPatchObjectAccessControlRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IPatchObjectAccessControlRequest|null|undefined,
          {}|null|undefined>): void;
  patchObjectAccessControl(
      request: protos.google.storage.v1.IPatchObjectAccessControlRequest,
      callback: Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IPatchObjectAccessControlRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Patches an ACL entry on the specified object.  Patch is similar to update,
 * but only applies or appends the specified fields in the
 * object_access_control object.  Other fields are unaffected.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of a bucket.
 * @param {string} request.entity
 *   Required. The entity holding the permission. Can be one of:
 *   * `user-`*userId*
 *   * `user-`*emailAddress*
 *   * `group-`*groupId*
 *   * `group-`*emailAddress*
 *   * `allUsers`
 *   * `allAuthenticatedUsers`
 * @param {string} request.object
 *   Required. Name of the object.
 *   Required.
 * @param {number} request.generation
 *   If present, selects a specific revision of this object (as opposed to the
 *   latest version, the default).
 * @param {google.storage.v1.ObjectAccessControl} request.objectAccessControl
 *   The ObjectAccessControl for updating.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   List of fields to be updated.
 *
 *   To specify ALL fields, equivalent to the JSON API's "update" function,
 *   specify a single field with the value `*`. Note: not recommended. If a new
 *   field is introduced at a later time, an older client updating with the `*`
 *   may accidentally reset the new field's value.
 *
 *   Not specifying any fields is an error.
 *   Not specifying a field while setting that field to a non-default value is
 *   an error.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ObjectAccessControl]{@link google.storage.v1.ObjectAccessControl}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.patchObjectAccessControl(request);
 */
  patchObjectAccessControl(
      request?: protos.google.storage.v1.IPatchObjectAccessControlRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IPatchObjectAccessControlRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IPatchObjectAccessControlRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IObjectAccessControl,
        protos.google.storage.v1.IPatchObjectAccessControlRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.patchObjectAccessControl(request, options, callback);
  }
  updateObjectAccessControl(
      request?: protos.google.storage.v1.IUpdateObjectAccessControlRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IObjectAccessControl,
        protos.google.storage.v1.IUpdateObjectAccessControlRequest|undefined, {}|undefined
      ]>;
  updateObjectAccessControl(
      request: protos.google.storage.v1.IUpdateObjectAccessControlRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IUpdateObjectAccessControlRequest|null|undefined,
          {}|null|undefined>): void;
  updateObjectAccessControl(
      request: protos.google.storage.v1.IUpdateObjectAccessControlRequest,
      callback: Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IUpdateObjectAccessControlRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates an ACL entry on the specified object.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of a bucket.
 * @param {string} request.entity
 *   Required. The entity holding the permission. Can be one of:
 *   * `user-`*userId*
 *   * `user-`*emailAddress*
 *   * `group-`*groupId*
 *   * `group-`*emailAddress*
 *   * `allUsers`
 *   * `allAuthenticatedUsers`
 * @param {string} request.object
 *   Required. Name of the object.
 *   Required.
 * @param {number} request.generation
 *   If present, selects a specific revision of this object (as opposed to the
 *   latest version, the default).
 * @param {google.storage.v1.ObjectAccessControl} request.objectAccessControl
 *   The ObjectAccessControl for updating.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   List of fields to be updated.
 *
 *   To specify ALL fields, equivalent to the JSON API's "update" function,
 *   specify a single field with the value `*`. Note: not recommended. If a new
 *   field is introduced at a later time, an older client updating with the `*`
 *   may accidentally reset the new field's value.
 *
 *   Not specifying any fields is an error.
 *   Not specifying a field while setting that field to a non-default value is
 *   an error.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ObjectAccessControl]{@link google.storage.v1.ObjectAccessControl}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.updateObjectAccessControl(request);
 */
  updateObjectAccessControl(
      request?: protos.google.storage.v1.IUpdateObjectAccessControlRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IUpdateObjectAccessControlRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IObjectAccessControl,
          protos.google.storage.v1.IUpdateObjectAccessControlRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IObjectAccessControl,
        protos.google.storage.v1.IUpdateObjectAccessControlRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.updateObjectAccessControl(request, options, callback);
  }
  composeObject(
      request?: protos.google.storage.v1.IComposeObjectRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IObject,
        protos.google.storage.v1.IComposeObjectRequest|undefined, {}|undefined
      ]>;
  composeObject(
      request: protos.google.storage.v1.IComposeObjectRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IObject,
          protos.google.storage.v1.IComposeObjectRequest|null|undefined,
          {}|null|undefined>): void;
  composeObject(
      request: protos.google.storage.v1.IComposeObjectRequest,
      callback: Callback<
          protos.google.storage.v1.IObject,
          protos.google.storage.v1.IComposeObjectRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Concatenates a list of existing objects into a new object in the same
 * bucket.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.destinationBucket
 *   Required. Name of the bucket containing the source objects. The destination object is
 *   stored in this bucket.
 * @param {string} request.destinationObject
 *   Required. Name of the new object.
 * @param {google.storage.v1.CommonEnums.PredefinedObjectAcl} request.destinationPredefinedAcl
 *   Apply a predefined set of access controls to the destination object.
 * @param {google.storage.v1.Object} request.destination
 *   Properties of the resulting object.
 * @param {number[]} request.sourceObjects
 *   The list of source objects that will be concatenated into a single object.
 * @param {google.protobuf.Int64Value} request.ifGenerationMatch
 *   Makes the operation conditional on whether the object's current generation
 *   matches the given value. Setting to 0 makes the operation succeed only if
 *   there are no live versions of the object.
 * @param {google.protobuf.Int64Value} request.ifMetagenerationMatch
 *   Makes the operation conditional on whether the object's current
 *   metageneration matches the given value.
 * @param {string} request.kmsKeyName
 *   Resource name of the Cloud KMS key, of the form
 *   `projects/my-project/locations/my-location/keyRings/my-kr/cryptoKeys/my-key`,
 *   that will be used to encrypt the object. Overrides the object
 *   metadata's `kms_key_name` value, if any.
 * @param {google.storage.v1.CommonObjectRequestParams} request.commonObjectRequestParams
 *   A set of parameters common to Storage API requests concerning an object.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Object]{@link google.storage.v1.Object}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.composeObject(request);
 */
  composeObject(
      request?: protos.google.storage.v1.IComposeObjectRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IObject,
          protos.google.storage.v1.IComposeObjectRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IObject,
          protos.google.storage.v1.IComposeObjectRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IObject,
        protos.google.storage.v1.IComposeObjectRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.composeObject(request, options, callback);
  }
  copyObject(
      request?: protos.google.storage.v1.ICopyObjectRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IObject,
        protos.google.storage.v1.ICopyObjectRequest|undefined, {}|undefined
      ]>;
  copyObject(
      request: protos.google.storage.v1.ICopyObjectRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IObject,
          protos.google.storage.v1.ICopyObjectRequest|null|undefined,
          {}|null|undefined>): void;
  copyObject(
      request: protos.google.storage.v1.ICopyObjectRequest,
      callback: Callback<
          protos.google.storage.v1.IObject,
          protos.google.storage.v1.ICopyObjectRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Copies a source object to a destination object. Optionally overrides
 * metadata.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.destinationBucket
 *   Required. Name of the bucket in which to store the new object. Overrides the provided
 *   object
 *   metadata's `bucket` value, if any.
 * @param {string} request.destinationObject
 *   Required. Name of the new object.
 *   Required when the object metadata is not otherwise provided. Overrides the
 *   object metadata's `name` value, if any.
 * @param {google.storage.v1.CommonEnums.PredefinedObjectAcl} request.destinationPredefinedAcl
 *   Apply a predefined set of access controls to the destination object.
 * @param {google.protobuf.Int64Value} request.ifGenerationMatch
 *   Makes the operation conditional on whether the destination object's current
 *   generation matches the given value. Setting to 0 makes the operation
 *   succeed only if there are no live versions of the object.
 * @param {google.protobuf.Int64Value} request.ifGenerationNotMatch
 *   Makes the operation conditional on whether the destination object's current
 *   generation does not match the given value. If no live object exists, the
 *   precondition fails. Setting to 0 makes the operation succeed only if there
 *   is a live version of the object.
 * @param {google.protobuf.Int64Value} request.ifMetagenerationMatch
 *   Makes the operation conditional on whether the destination object's current
 *   metageneration matches the given value.
 * @param {google.protobuf.Int64Value} request.ifMetagenerationNotMatch
 *   Makes the operation conditional on whether the destination object's current
 *   metageneration does not match the given value.
 * @param {google.protobuf.Int64Value} request.ifSourceGenerationMatch
 *   Makes the operation conditional on whether the source object's current
 *   generation matches the given value.
 * @param {google.protobuf.Int64Value} request.ifSourceGenerationNotMatch
 *   Makes the operation conditional on whether the source object's current
 *   generation does not match the given value.
 * @param {google.protobuf.Int64Value} request.ifSourceMetagenerationMatch
 *   Makes the operation conditional on whether the source object's current
 *   metageneration matches the given value.
 * @param {google.protobuf.Int64Value} request.ifSourceMetagenerationNotMatch
 *   Makes the operation conditional on whether the source object's current
 *   metageneration does not match the given value.
 * @param {google.storage.v1.CommonEnums.Projection} request.projection
 *   Set of properties to return. Defaults to `NO_ACL`, unless the
 *   object resource specifies the `acl` property, when it defaults
 *   to `full`.
 * @param {string} request.sourceBucket
 *   Required. Name of the bucket in which to find the source object.
 * @param {string} request.sourceObject
 *   Required. Name of the source object.
 * @param {number} request.sourceGeneration
 *   If present, selects a specific revision of the source object (as opposed to
 *   the latest version, the default).
 * @param {google.storage.v1.Object} request.destination
 *   Properties of the resulting object. If not set, duplicate properties of
 *   source object.
 * @param {string} request.destinationKmsKeyName
 *   Resource name of the Cloud KMS key, of the form
 *   `projects/my-project/locations/my-location/keyRings/my-kr/cryptoKeys/my-key`,
 *   that will be used to encrypt the object. Overrides the object
 *   metadata's `kms_key_name` value, if any.
 * @param {google.storage.v1.CommonObjectRequestParams} request.commonObjectRequestParams
 *   A set of parameters common to Storage API requests concerning an object.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Object]{@link google.storage.v1.Object}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.copyObject(request);
 */
  copyObject(
      request?: protos.google.storage.v1.ICopyObjectRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IObject,
          protos.google.storage.v1.ICopyObjectRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IObject,
          protos.google.storage.v1.ICopyObjectRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IObject,
        protos.google.storage.v1.ICopyObjectRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.copyObject(request, options, callback);
  }
  deleteObject(
      request?: protos.google.storage.v1.IDeleteObjectRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.storage.v1.IDeleteObjectRequest|undefined, {}|undefined
      ]>;
  deleteObject(
      request: protos.google.storage.v1.IDeleteObjectRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IDeleteObjectRequest|null|undefined,
          {}|null|undefined>): void;
  deleteObject(
      request: protos.google.storage.v1.IDeleteObjectRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IDeleteObjectRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Deletes an object and its metadata. Deletions are permanent if versioning
 * is not enabled for the bucket, or if the `generation` parameter
 * is used.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of the bucket in which the object resides.
 * @param {string} request.object
 *   Required. The name of the object to delete (when not using a resumable write).
 * @param {string} request.uploadId
 *   The resumable upload_id of the object to delete (when using a
 *   resumable write). This should be copied from the `upload_id` field of
 *   `StartResumableWriteResponse`.
 * @param {number} request.generation
 *   If present, permanently deletes a specific revision of this object (as
 *   opposed to the latest version, the default).
 * @param {google.protobuf.Int64Value} request.ifGenerationMatch
 *   Makes the operation conditional on whether the object's current generation
 *   matches the given value. Setting to 0 makes the operation succeed only if
 *   there are no live versions of the object.
 * @param {google.protobuf.Int64Value} request.ifGenerationNotMatch
 *   Makes the operation conditional on whether the object's current generation
 *   does not match the given value. If no live object exists, the precondition
 *   fails. Setting to 0 makes the operation succeed only if there is a live
 *   version of the object.
 * @param {google.protobuf.Int64Value} request.ifMetagenerationMatch
 *   Makes the operation conditional on whether the object's current
 *   metageneration matches the given value.
 * @param {google.protobuf.Int64Value} request.ifMetagenerationNotMatch
 *   Makes the operation conditional on whether the object's current
 *   metageneration does not match the given value.
 * @param {google.storage.v1.CommonObjectRequestParams} request.commonObjectRequestParams
 *   A set of parameters common to Storage API requests concerning an object.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.deleteObject(request);
 */
  deleteObject(
      request?: protos.google.storage.v1.IDeleteObjectRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IDeleteObjectRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IDeleteObjectRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.storage.v1.IDeleteObjectRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.deleteObject(request, options, callback);
  }
  getObject(
      request?: protos.google.storage.v1.IGetObjectRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IObject,
        protos.google.storage.v1.IGetObjectRequest|undefined, {}|undefined
      ]>;
  getObject(
      request: protos.google.storage.v1.IGetObjectRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IObject,
          protos.google.storage.v1.IGetObjectRequest|null|undefined,
          {}|null|undefined>): void;
  getObject(
      request: protos.google.storage.v1.IGetObjectRequest,
      callback: Callback<
          protos.google.storage.v1.IObject,
          protos.google.storage.v1.IGetObjectRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Retrieves an object's metadata.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of the bucket in which the object resides.
 * @param {string} request.object
 *   Required. Name of the object.
 * @param {number} request.generation
 *   If present, selects a specific revision of this object (as opposed to the
 *   latest version, the default).
 * @param {google.protobuf.Int64Value} request.ifGenerationMatch
 *   Makes the operation conditional on whether the object's current generation
 *   matches the given value. Setting to 0 makes the operation succeed only if
 *   there are no live versions of the object.
 * @param {google.protobuf.Int64Value} request.ifGenerationNotMatch
 *   Makes the operation conditional on whether the object's current generation
 *   does not match the given value. If no live object exists, the precondition
 *   fails. Setting to 0 makes the operation succeed only if there is a live
 *   version of the object.
 * @param {google.protobuf.Int64Value} request.ifMetagenerationMatch
 *   Makes the operation conditional on whether the object's current
 *   metageneration matches the given value.
 * @param {google.protobuf.Int64Value} request.ifMetagenerationNotMatch
 *   Makes the operation conditional on whether the object's current
 *   metageneration does not match the given value.
 * @param {google.storage.v1.CommonEnums.Projection} request.projection
 *   Set of properties to return. Defaults to `NO_ACL`.
 * @param {google.storage.v1.CommonObjectRequestParams} request.commonObjectRequestParams
 *   A set of parameters common to Storage API requests concerning an object.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Object]{@link google.storage.v1.Object}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getObject(request);
 */
  getObject(
      request?: protos.google.storage.v1.IGetObjectRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IObject,
          protos.google.storage.v1.IGetObjectRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IObject,
          protos.google.storage.v1.IGetObjectRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IObject,
        protos.google.storage.v1.IGetObjectRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.getObject(request, options, callback);
  }
  listObjects(
      request?: protos.google.storage.v1.IListObjectsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IListObjectsResponse,
        protos.google.storage.v1.IListObjectsRequest|undefined, {}|undefined
      ]>;
  listObjects(
      request: protos.google.storage.v1.IListObjectsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IListObjectsResponse,
          protos.google.storage.v1.IListObjectsRequest|null|undefined,
          {}|null|undefined>): void;
  listObjects(
      request: protos.google.storage.v1.IListObjectsRequest,
      callback: Callback<
          protos.google.storage.v1.IListObjectsResponse,
          protos.google.storage.v1.IListObjectsRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Retrieves a list of objects matching the criteria.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of the bucket in which to look for objects.
 * @param {string} request.delimiter
 *   Returns results in a directory-like mode. `items` will contain
 *   only objects whose names, aside from the `prefix`, do not
 *   contain `delimiter`. Objects whose names, aside from the
 *   `prefix`, contain `delimiter` will have their name,
 *   truncated after the `delimiter`, returned in
 *   `prefixes`. Duplicate `prefixes` are omitted.
 * @param {boolean} request.includeTrailingDelimiter
 *   If true, objects that end in exactly one instance of `delimiter`
 *   will have their metadata included in `items` in addition to
 *   `prefixes`.
 * @param {number} request.maxResults
 *   Maximum number of `items` plus `prefixes` to return
 *   in a single page of responses. As duplicate `prefixes` are
 *   omitted, fewer total results may be returned than requested. The service
 *   will use this parameter or 1,000 items, whichever is smaller.
 * @param {string} request.pageToken
 *   A previously-returned page token representing part of the larger set of
 *   results to view.
 * @param {string} request.prefix
 *   Filter results to objects whose names begin with this prefix.
 * @param {google.storage.v1.CommonEnums.Projection} request.projection
 *   Set of properties to return. Defaults to `NO_ACL`.
 * @param {boolean} request.versions
 *   If `true`, lists all versions of an object as distinct results.
 *   The default is `false`. For more information, see
 *   [Object
 *   Versioning](https://cloud.google.com/storage/docs/object-versioning).
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ListObjectsResponse]{@link google.storage.v1.ListObjectsResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.listObjects(request);
 */
  listObjects(
      request?: protos.google.storage.v1.IListObjectsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IListObjectsResponse,
          protos.google.storage.v1.IListObjectsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IListObjectsResponse,
          protos.google.storage.v1.IListObjectsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IListObjectsResponse,
        protos.google.storage.v1.IListObjectsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.listObjects(request, options, callback);
  }
  rewriteObject(
      request?: protos.google.storage.v1.IRewriteObjectRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IRewriteResponse,
        protos.google.storage.v1.IRewriteObjectRequest|undefined, {}|undefined
      ]>;
  rewriteObject(
      request: protos.google.storage.v1.IRewriteObjectRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IRewriteResponse,
          protos.google.storage.v1.IRewriteObjectRequest|null|undefined,
          {}|null|undefined>): void;
  rewriteObject(
      request: protos.google.storage.v1.IRewriteObjectRequest,
      callback: Callback<
          protos.google.storage.v1.IRewriteResponse,
          protos.google.storage.v1.IRewriteObjectRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Rewrites a source object to a destination object. Optionally overrides
 * metadata.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.destinationBucket
 *   Required. Name of the bucket in which to store the new object. Overrides the provided
 *   object metadata's `bucket` value, if any.
 * @param {string} request.destinationObject
 *   Required. Name of the new object.
 *   Required when the object metadata is not otherwise provided. Overrides the
 *   object metadata's `name` value, if any.
 * @param {string} request.destinationKmsKeyName
 *   Resource name of the Cloud KMS key, of the form
 *   `projects/my-project/locations/my-location/keyRings/my-kr/cryptoKeys/my-key`,
 *   that will be used to encrypt the object. Overrides the object
 *   metadata's `kms_key_name` value, if any.
 * @param {google.storage.v1.CommonEnums.PredefinedObjectAcl} request.destinationPredefinedAcl
 *   Apply a predefined set of access controls to the destination object.
 * @param {google.protobuf.Int64Value} request.ifGenerationMatch
 *   Makes the operation conditional on whether the object's current generation
 *   matches the given value. Setting to 0 makes the operation succeed only if
 *   there are no live versions of the object.
 * @param {google.protobuf.Int64Value} request.ifGenerationNotMatch
 *   Makes the operation conditional on whether the object's current generation
 *   does not match the given value. If no live object exists, the precondition
 *   fails. Setting to 0 makes the operation succeed only if there is a live
 *   version of the object.
 * @param {google.protobuf.Int64Value} request.ifMetagenerationMatch
 *   Makes the operation conditional on whether the destination object's current
 *   metageneration matches the given value.
 * @param {google.protobuf.Int64Value} request.ifMetagenerationNotMatch
 *   Makes the operation conditional on whether the destination object's current
 *   metageneration does not match the given value.
 * @param {google.protobuf.Int64Value} request.ifSourceGenerationMatch
 *   Makes the operation conditional on whether the source object's current
 *   generation matches the given value.
 * @param {google.protobuf.Int64Value} request.ifSourceGenerationNotMatch
 *   Makes the operation conditional on whether the source object's current
 *   generation does not match the given value.
 * @param {google.protobuf.Int64Value} request.ifSourceMetagenerationMatch
 *   Makes the operation conditional on whether the source object's current
 *   metageneration matches the given value.
 * @param {google.protobuf.Int64Value} request.ifSourceMetagenerationNotMatch
 *   Makes the operation conditional on whether the source object's current
 *   metageneration does not match the given value.
 * @param {number} request.maxBytesRewrittenPerCall
 *   The maximum number of bytes that will be rewritten per rewrite request.
 *   Most callers
 *   shouldn't need to specify this parameter - it is primarily in place to
 *   support testing. If specified the value must be an integral multiple of
 *   1 MiB (1048576). Also, this only applies to requests where the source and
 *   destination span locations and/or storage classes. Finally, this value must
 *   not change across rewrite calls else you'll get an error that the
 *   `rewriteToken` is invalid.
 * @param {google.storage.v1.CommonEnums.Projection} request.projection
 *   Set of properties to return. Defaults to `NO_ACL`, unless the
 *   object resource specifies the `acl` property, when it defaults
 *   to `full`.
 * @param {string} request.rewriteToken
 *   Include this field (from the previous rewrite response) on each rewrite
 *   request after the first one, until the rewrite response 'done' flag is
 *   true. Calls that provide a rewriteToken can omit all other request fields,
 *   but if included those fields must match the values provided in the first
 *   rewrite request.
 * @param {string} request.sourceBucket
 *   Required. Name of the bucket in which to find the source object.
 * @param {string} request.sourceObject
 *   Required. Name of the source object.
 * @param {number} request.sourceGeneration
 *   If present, selects a specific revision of the source object (as opposed to
 *   the latest version, the default).
 * @param {google.storage.v1.Object} request.object
 *   Properties of the destination, post-rewrite object.
 * @param {string} request.copySourceEncryptionAlgorithm
 *   The algorithm used to encrypt the source object, if any.
 * @param {string} request.copySourceEncryptionKey
 *   The encryption key used to encrypt the source object, if any.
 * @param {string} request.copySourceEncryptionKeySha256
 *   The SHA-256 hash of the key used to encrypt the source object, if any.
 * @param {google.storage.v1.CommonObjectRequestParams} request.commonObjectRequestParams
 *   A set of parameters common to Storage API requests concerning an object.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [RewriteResponse]{@link google.storage.v1.RewriteResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.rewriteObject(request);
 */
  rewriteObject(
      request?: protos.google.storage.v1.IRewriteObjectRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IRewriteResponse,
          protos.google.storage.v1.IRewriteObjectRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IRewriteResponse,
          protos.google.storage.v1.IRewriteObjectRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IRewriteResponse,
        protos.google.storage.v1.IRewriteObjectRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.rewriteObject(request, options, callback);
  }
  startResumableWrite(
      request?: protos.google.storage.v1.IStartResumableWriteRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IStartResumableWriteResponse,
        protos.google.storage.v1.IStartResumableWriteRequest|undefined, {}|undefined
      ]>;
  startResumableWrite(
      request: protos.google.storage.v1.IStartResumableWriteRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IStartResumableWriteResponse,
          protos.google.storage.v1.IStartResumableWriteRequest|null|undefined,
          {}|null|undefined>): void;
  startResumableWrite(
      request: protos.google.storage.v1.IStartResumableWriteRequest,
      callback: Callback<
          protos.google.storage.v1.IStartResumableWriteResponse,
          protos.google.storage.v1.IStartResumableWriteRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Starts a resumable write. How long the write operation remains valid, and
 * what happens when the write operation becomes invalid, are
 * service-dependent.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.storage.v1.InsertObjectSpec} request.insertObjectSpec
 *   The destination bucket, object, and metadata, as well as any preconditions.
 * @param {google.storage.v1.CommonObjectRequestParams} request.commonObjectRequestParams
 *   A set of parameters common to Storage API requests concerning an object.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [StartResumableWriteResponse]{@link google.storage.v1.StartResumableWriteResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.startResumableWrite(request);
 */
  startResumableWrite(
      request?: protos.google.storage.v1.IStartResumableWriteRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IStartResumableWriteResponse,
          protos.google.storage.v1.IStartResumableWriteRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IStartResumableWriteResponse,
          protos.google.storage.v1.IStartResumableWriteRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IStartResumableWriteResponse,
        protos.google.storage.v1.IStartResumableWriteRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.startResumableWrite(request, options, callback);
  }
  queryWriteStatus(
      request?: protos.google.storage.v1.IQueryWriteStatusRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IQueryWriteStatusResponse,
        protos.google.storage.v1.IQueryWriteStatusRequest|undefined, {}|undefined
      ]>;
  queryWriteStatus(
      request: protos.google.storage.v1.IQueryWriteStatusRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IQueryWriteStatusResponse,
          protos.google.storage.v1.IQueryWriteStatusRequest|null|undefined,
          {}|null|undefined>): void;
  queryWriteStatus(
      request: protos.google.storage.v1.IQueryWriteStatusRequest,
      callback: Callback<
          protos.google.storage.v1.IQueryWriteStatusResponse,
          protos.google.storage.v1.IQueryWriteStatusRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Determines the `committed_size` for an object that is being written, which
 * can then be used as the `write_offset` for the next `Write()` call.
 *
 * If the object does not exist (i.e., the object has been deleted, or the
 * first `Write()` has not yet reached the service), this method returns the
 * error `NOT_FOUND`.
 *
 * The client **may** call `QueryWriteStatus()` at any time to determine how
 * much data has been processed for this object. This is useful if the
 * client is buffering data and needs to know which data can be safely
 * evicted. For any sequence of `QueryWriteStatus()` calls for a given
 * object name, the sequence of returned `committed_size` values will be
 * non-decreasing.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.uploadId
 *   Required. The name of the resume token for the object whose write status is being
 *   requested.
 * @param {google.storage.v1.CommonObjectRequestParams} request.commonObjectRequestParams
 *   A set of parameters common to Storage API requests concerning an object.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [QueryWriteStatusResponse]{@link google.storage.v1.QueryWriteStatusResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.queryWriteStatus(request);
 */
  queryWriteStatus(
      request?: protos.google.storage.v1.IQueryWriteStatusRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IQueryWriteStatusResponse,
          protos.google.storage.v1.IQueryWriteStatusRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IQueryWriteStatusResponse,
          protos.google.storage.v1.IQueryWriteStatusRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IQueryWriteStatusResponse,
        protos.google.storage.v1.IQueryWriteStatusRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.queryWriteStatus(request, options, callback);
  }
  patchObject(
      request?: protos.google.storage.v1.IPatchObjectRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IObject,
        protos.google.storage.v1.IPatchObjectRequest|undefined, {}|undefined
      ]>;
  patchObject(
      request: protos.google.storage.v1.IPatchObjectRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IObject,
          protos.google.storage.v1.IPatchObjectRequest|null|undefined,
          {}|null|undefined>): void;
  patchObject(
      request: protos.google.storage.v1.IPatchObjectRequest,
      callback: Callback<
          protos.google.storage.v1.IObject,
          protos.google.storage.v1.IPatchObjectRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates an object's metadata.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of the bucket in which the object resides.
 * @param {string} request.object
 *   Required. Name of the object.
 * @param {number} request.generation
 *   If present, selects a specific revision of this object (as opposed to the
 *   latest version, the default).
 * @param {google.protobuf.Int64Value} request.ifGenerationMatch
 *   Makes the operation conditional on whether the object's current generation
 *   matches the given value. Setting to 0 makes the operation succeed only if
 *   there are no live versions of the object.
 * @param {google.protobuf.Int64Value} request.ifGenerationNotMatch
 *   Makes the operation conditional on whether the object's current generation
 *   does not match the given value. If no live object exists, the precondition
 *   fails. Setting to 0 makes the operation succeed only if there is a live
 *   version of the object.
 * @param {google.protobuf.Int64Value} request.ifMetagenerationMatch
 *   Makes the operation conditional on whether the object's current
 *   metageneration matches the given value.
 * @param {google.protobuf.Int64Value} request.ifMetagenerationNotMatch
 *   Makes the operation conditional on whether the object's current
 *   metageneration does not match the given value.
 * @param {google.storage.v1.CommonEnums.PredefinedObjectAcl} request.predefinedAcl
 *   Apply a predefined set of access controls to this object.
 * @param {google.storage.v1.CommonEnums.Projection} request.projection
 *   Set of properties to return. Defaults to `FULL`.
 * @param {google.storage.v1.Object} request.metadata
 *   The Object metadata for updating.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   List of fields to be updated.
 *
 *   To specify ALL fields, equivalent to the JSON API's "update" function,
 *   specify a single field with the value `*`. Note: not recommended. If a new
 *   field is introduced at a later time, an older client updating with the `*`
 *   may accidentally reset the new field's value.
 *
 *   Not specifying any fields is an error.
 *   Not specifying a field while setting that field to a non-default value is
 *   an error.
 * @param {google.storage.v1.CommonObjectRequestParams} request.commonObjectRequestParams
 *   A set of parameters common to Storage API requests concerning an object.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Object]{@link google.storage.v1.Object}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.patchObject(request);
 */
  patchObject(
      request?: protos.google.storage.v1.IPatchObjectRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IObject,
          protos.google.storage.v1.IPatchObjectRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IObject,
          protos.google.storage.v1.IPatchObjectRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IObject,
        protos.google.storage.v1.IPatchObjectRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.patchObject(request, options, callback);
  }
  updateObject(
      request?: protos.google.storage.v1.IUpdateObjectRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IObject,
        protos.google.storage.v1.IUpdateObjectRequest|undefined, {}|undefined
      ]>;
  updateObject(
      request: protos.google.storage.v1.IUpdateObjectRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IObject,
          protos.google.storage.v1.IUpdateObjectRequest|null|undefined,
          {}|null|undefined>): void;
  updateObject(
      request: protos.google.storage.v1.IUpdateObjectRequest,
      callback: Callback<
          protos.google.storage.v1.IObject,
          protos.google.storage.v1.IUpdateObjectRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates an object's metadata. Equivalent to PatchObject, but always
 * replaces all mutatable fields of the bucket with new values, reverting all
 * unspecified fields to their default values.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of the bucket in which the object resides.
 * @param {string} request.object
 *   Required. Name of the object.
 * @param {number} request.generation
 *   If present, selects a specific revision of this object (as opposed to the
 *   latest version, the default).
 * @param {google.protobuf.Int64Value} request.ifGenerationMatch
 *   Makes the operation conditional on whether the object's current generation
 *   matches the given value. Setting to 0 makes the operation succeed only if
 *   there are no live versions of the object.
 * @param {google.protobuf.Int64Value} request.ifGenerationNotMatch
 *   Makes the operation conditional on whether the object's current generation
 *   does not match the given value. If no live object exists, the precondition
 *   fails. Setting to 0 makes the operation succeed only if there is a live
 *   version of the object.
 * @param {google.protobuf.Int64Value} request.ifMetagenerationMatch
 *   Makes the operation conditional on whether the object's current
 *   metageneration matches the given value.
 * @param {google.protobuf.Int64Value} request.ifMetagenerationNotMatch
 *   Makes the operation conditional on whether the object's current
 *   metageneration does not match the given value.
 * @param {google.storage.v1.CommonEnums.PredefinedObjectAcl} request.predefinedAcl
 *   Apply a predefined set of access controls to this object.
 * @param {google.storage.v1.CommonEnums.Projection} request.projection
 *   Set of properties to return. Defaults to `FULL`.
 * @param {google.storage.v1.Object} request.metadata
 *   The Object metadata for updating.
 * @param {google.storage.v1.CommonObjectRequestParams} request.commonObjectRequestParams
 *   A set of parameters common to Storage API requests concerning an object.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Object]{@link google.storage.v1.Object}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.updateObject(request);
 */
  updateObject(
      request?: protos.google.storage.v1.IUpdateObjectRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IObject,
          protos.google.storage.v1.IUpdateObjectRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IObject,
          protos.google.storage.v1.IUpdateObjectRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IObject,
        protos.google.storage.v1.IUpdateObjectRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.updateObject(request, options, callback);
  }
  getObjectIamPolicy(
      request?: protos.google.storage.v1.IGetIamPolicyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.storage.v1.IGetIamPolicyRequest|undefined, {}|undefined
      ]>;
  getObjectIamPolicy(
      request: protos.google.storage.v1.IGetIamPolicyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.storage.v1.IGetIamPolicyRequest|null|undefined,
          {}|null|undefined>): void;
  getObjectIamPolicy(
      request: protos.google.storage.v1.IGetIamPolicyRequest,
      callback: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.storage.v1.IGetIamPolicyRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Gets the IAM policy for the specified object.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.iam.v1.GetIamPolicyRequest} request.iamRequest
 *   The request sent to IAM.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getObjectIamPolicy(request);
 */
  getObjectIamPolicy(
      request?: protos.google.storage.v1.IGetIamPolicyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.storage.v1.IGetIamPolicyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.storage.v1.IGetIamPolicyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.storage.v1.IGetIamPolicyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.getObjectIamPolicy(request, options, callback);
  }
  setObjectIamPolicy(
      request?: protos.google.storage.v1.ISetIamPolicyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.storage.v1.ISetIamPolicyRequest|undefined, {}|undefined
      ]>;
  setObjectIamPolicy(
      request: protos.google.storage.v1.ISetIamPolicyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.storage.v1.ISetIamPolicyRequest|null|undefined,
          {}|null|undefined>): void;
  setObjectIamPolicy(
      request: protos.google.storage.v1.ISetIamPolicyRequest,
      callback: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.storage.v1.ISetIamPolicyRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates an IAM policy for the specified object.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.iam.v1.SetIamPolicyRequest} request.iamRequest
 *   The request sent to IAM.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.setObjectIamPolicy(request);
 */
  setObjectIamPolicy(
      request?: protos.google.storage.v1.ISetIamPolicyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.storage.v1.ISetIamPolicyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.storage.v1.ISetIamPolicyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.storage.v1.ISetIamPolicyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.setObjectIamPolicy(request, options, callback);
  }
  testObjectIamPermissions(
      request?: protos.google.storage.v1.ITestIamPermissionsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.v1.ITestIamPermissionsResponse,
        protos.google.storage.v1.ITestIamPermissionsRequest|undefined, {}|undefined
      ]>;
  testObjectIamPermissions(
      request: protos.google.storage.v1.ITestIamPermissionsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.storage.v1.ITestIamPermissionsRequest|null|undefined,
          {}|null|undefined>): void;
  testObjectIamPermissions(
      request: protos.google.storage.v1.ITestIamPermissionsRequest,
      callback: Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.storage.v1.ITestIamPermissionsRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Tests a set of permissions on the given object to see which, if
 * any, are held by the caller.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.iam.v1.TestIamPermissionsRequest} request.iamRequest
 *   The request sent to IAM.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.testObjectIamPermissions(request);
 */
  testObjectIamPermissions(
      request?: protos.google.storage.v1.ITestIamPermissionsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.storage.v1.ITestIamPermissionsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.storage.v1.ITestIamPermissionsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.v1.ITestIamPermissionsResponse,
        protos.google.storage.v1.ITestIamPermissionsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.testObjectIamPermissions(request, options, callback);
  }
  watchAllObjects(
      request?: protos.google.storage.v1.IWatchAllObjectsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IChannel,
        protos.google.storage.v1.IWatchAllObjectsRequest|undefined, {}|undefined
      ]>;
  watchAllObjects(
      request: protos.google.storage.v1.IWatchAllObjectsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IChannel,
          protos.google.storage.v1.IWatchAllObjectsRequest|null|undefined,
          {}|null|undefined>): void;
  watchAllObjects(
      request: protos.google.storage.v1.IWatchAllObjectsRequest,
      callback: Callback<
          protos.google.storage.v1.IChannel,
          protos.google.storage.v1.IWatchAllObjectsRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Watch for changes on all objects in a bucket.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Name of the bucket in which to look for objects.
 * @param {boolean} request.versions
 *   If `true`, lists all versions of an object as distinct results.
 *   The default is `false`. For more information, see
 *   [Object
 *   Versioning](https://cloud.google.com/storage/docs/object-versioning).
 * @param {string} request.delimiter
 *   Returns results in a directory-like mode. `items` will contain
 *   only objects whose names, aside from the `prefix`, do not
 *   contain `delimiter`. Objects whose names, aside from the
 *   `prefix`, contain `delimiter` will have their name,
 *   truncated after the `delimiter`, returned in
 *   `prefixes`. Duplicate `prefixes` are omitted.
 * @param {number} request.maxResults
 *   Maximum number of `items` plus `prefixes` to return
 *   in a single page of responses. As duplicate `prefixes` are
 *   omitted, fewer total results may be returned than requested. The service
 *   will use this parameter or 1,000 items, whichever is smaller.
 * @param {string} request.prefix
 *   Filter results to objects whose names begin with this prefix.
 * @param {boolean} request.includeTrailingDelimiter
 *   If true, objects that end in exactly one instance of `delimiter`
 *   will have their metadata included in `items` in addition to
 *   `prefixes`.
 * @param {string} request.pageToken
 *   A previously-returned page token representing part of the larger set of
 *   results to view.
 * @param {google.storage.v1.CommonEnums.Projection} request.projection
 *   Set of properties to return. Defaults to `NO_ACL`.
 * @param {google.storage.v1.Channel} request.channel
 *   Properties of the channel to be inserted.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Channel]{@link google.storage.v1.Channel}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.watchAllObjects(request);
 */
  watchAllObjects(
      request?: protos.google.storage.v1.IWatchAllObjectsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IChannel,
          protos.google.storage.v1.IWatchAllObjectsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IChannel,
          protos.google.storage.v1.IWatchAllObjectsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IChannel,
        protos.google.storage.v1.IWatchAllObjectsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.watchAllObjects(request, options, callback);
  }
  getServiceAccount(
      request?: protos.google.storage.v1.IGetProjectServiceAccountRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IServiceAccount,
        protos.google.storage.v1.IGetProjectServiceAccountRequest|undefined, {}|undefined
      ]>;
  getServiceAccount(
      request: protos.google.storage.v1.IGetProjectServiceAccountRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IServiceAccount,
          protos.google.storage.v1.IGetProjectServiceAccountRequest|null|undefined,
          {}|null|undefined>): void;
  getServiceAccount(
      request: protos.google.storage.v1.IGetProjectServiceAccountRequest,
      callback: Callback<
          protos.google.storage.v1.IServiceAccount,
          protos.google.storage.v1.IGetProjectServiceAccountRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Retrieves the name of a project's Google Cloud Storage service account.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Required. Project ID.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ServiceAccount]{@link google.storage.v1.ServiceAccount}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getServiceAccount(request);
 */
  getServiceAccount(
      request?: protos.google.storage.v1.IGetProjectServiceAccountRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IServiceAccount,
          protos.google.storage.v1.IGetProjectServiceAccountRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IServiceAccount,
          protos.google.storage.v1.IGetProjectServiceAccountRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IServiceAccount,
        protos.google.storage.v1.IGetProjectServiceAccountRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.getServiceAccount(request, options, callback);
  }
  createHmacKey(
      request?: protos.google.storage.v1.ICreateHmacKeyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.ICreateHmacKeyResponse,
        protos.google.storage.v1.ICreateHmacKeyRequest|undefined, {}|undefined
      ]>;
  createHmacKey(
      request: protos.google.storage.v1.ICreateHmacKeyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.ICreateHmacKeyResponse,
          protos.google.storage.v1.ICreateHmacKeyRequest|null|undefined,
          {}|null|undefined>): void;
  createHmacKey(
      request: protos.google.storage.v1.ICreateHmacKeyRequest,
      callback: Callback<
          protos.google.storage.v1.ICreateHmacKeyResponse,
          protos.google.storage.v1.ICreateHmacKeyRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates a new HMAC key for the given service account.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Required. The project that the HMAC-owning service account lives in.
 * @param {string} request.serviceAccountEmail
 *   Required. The service account to create the HMAC for.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [CreateHmacKeyResponse]{@link google.storage.v1.CreateHmacKeyResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.createHmacKey(request);
 */
  createHmacKey(
      request?: protos.google.storage.v1.ICreateHmacKeyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.ICreateHmacKeyResponse,
          protos.google.storage.v1.ICreateHmacKeyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.ICreateHmacKeyResponse,
          protos.google.storage.v1.ICreateHmacKeyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.ICreateHmacKeyResponse,
        protos.google.storage.v1.ICreateHmacKeyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.createHmacKey(request, options, callback);
  }
  deleteHmacKey(
      request?: protos.google.storage.v1.IDeleteHmacKeyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.storage.v1.IDeleteHmacKeyRequest|undefined, {}|undefined
      ]>;
  deleteHmacKey(
      request: protos.google.storage.v1.IDeleteHmacKeyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IDeleteHmacKeyRequest|null|undefined,
          {}|null|undefined>): void;
  deleteHmacKey(
      request: protos.google.storage.v1.IDeleteHmacKeyRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IDeleteHmacKeyRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Deletes a given HMAC key.  Key must be in an INACTIVE state.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.accessId
 *   Required. The identifying key for the HMAC to delete.
 * @param {string} request.projectId
 *   Required. The project id the HMAC key lies in.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.deleteHmacKey(request);
 */
  deleteHmacKey(
      request?: protos.google.storage.v1.IDeleteHmacKeyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IDeleteHmacKeyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v1.IDeleteHmacKeyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.storage.v1.IDeleteHmacKeyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.deleteHmacKey(request, options, callback);
  }
  getHmacKey(
      request?: protos.google.storage.v1.IGetHmacKeyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IHmacKeyMetadata,
        protos.google.storage.v1.IGetHmacKeyRequest|undefined, {}|undefined
      ]>;
  getHmacKey(
      request: protos.google.storage.v1.IGetHmacKeyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IHmacKeyMetadata,
          protos.google.storage.v1.IGetHmacKeyRequest|null|undefined,
          {}|null|undefined>): void;
  getHmacKey(
      request: protos.google.storage.v1.IGetHmacKeyRequest,
      callback: Callback<
          protos.google.storage.v1.IHmacKeyMetadata,
          protos.google.storage.v1.IGetHmacKeyRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Gets an existing HMAC key metadata for the given id.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.accessId
 *   Required. The identifying key for the HMAC to delete.
 * @param {string} request.projectId
 *   Required. The project id the HMAC key lies in.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [HmacKeyMetadata]{@link google.storage.v1.HmacKeyMetadata}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getHmacKey(request);
 */
  getHmacKey(
      request?: protos.google.storage.v1.IGetHmacKeyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IHmacKeyMetadata,
          protos.google.storage.v1.IGetHmacKeyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IHmacKeyMetadata,
          protos.google.storage.v1.IGetHmacKeyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IHmacKeyMetadata,
        protos.google.storage.v1.IGetHmacKeyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.getHmacKey(request, options, callback);
  }
  listHmacKeys(
      request?: protos.google.storage.v1.IListHmacKeysRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IListHmacKeysResponse,
        protos.google.storage.v1.IListHmacKeysRequest|undefined, {}|undefined
      ]>;
  listHmacKeys(
      request: protos.google.storage.v1.IListHmacKeysRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IListHmacKeysResponse,
          protos.google.storage.v1.IListHmacKeysRequest|null|undefined,
          {}|null|undefined>): void;
  listHmacKeys(
      request: protos.google.storage.v1.IListHmacKeysRequest,
      callback: Callback<
          protos.google.storage.v1.IListHmacKeysResponse,
          protos.google.storage.v1.IListHmacKeysRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Lists HMAC keys under a given project with the additional filters provided.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Required. The project id to list HMAC keys for.
 * @param {string} request.serviceAccountEmail
 *   An optional filter to only return HMAC keys for one service account.
 * @param {boolean} request.showDeletedKeys
 *   An optional bool to return deleted keys that have not been wiped out yet.
 * @param {number} request.maxResults
 *   The maximum number of keys to return.
 * @param {string} request.pageToken
 *   A previously returned token from ListHmacKeysResponse to get the next page.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ListHmacKeysResponse]{@link google.storage.v1.ListHmacKeysResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.listHmacKeys(request);
 */
  listHmacKeys(
      request?: protos.google.storage.v1.IListHmacKeysRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IListHmacKeysResponse,
          protos.google.storage.v1.IListHmacKeysRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IListHmacKeysResponse,
          protos.google.storage.v1.IListHmacKeysRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IListHmacKeysResponse,
        protos.google.storage.v1.IListHmacKeysRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.listHmacKeys(request, options, callback);
  }
  updateHmacKey(
      request?: protos.google.storage.v1.IUpdateHmacKeyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v1.IHmacKeyMetadata,
        protos.google.storage.v1.IUpdateHmacKeyRequest|undefined, {}|undefined
      ]>;
  updateHmacKey(
      request: protos.google.storage.v1.IUpdateHmacKeyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v1.IHmacKeyMetadata,
          protos.google.storage.v1.IUpdateHmacKeyRequest|null|undefined,
          {}|null|undefined>): void;
  updateHmacKey(
      request: protos.google.storage.v1.IUpdateHmacKeyRequest,
      callback: Callback<
          protos.google.storage.v1.IHmacKeyMetadata,
          protos.google.storage.v1.IUpdateHmacKeyRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates a given HMAC key state between ACTIVE and INACTIVE.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.accessId
 *   Required. The id of the HMAC key.
 * @param {string} request.projectId
 *   Required. The project id the HMAC's service account lies in.
 * @param {google.storage.v1.HmacKeyMetadata} request.metadata
 *   Required. The service account owner of the HMAC key.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [HmacKeyMetadata]{@link google.storage.v1.HmacKeyMetadata}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.updateHmacKey(request);
 */
  updateHmacKey(
      request?: protos.google.storage.v1.IUpdateHmacKeyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v1.IHmacKeyMetadata,
          protos.google.storage.v1.IUpdateHmacKeyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v1.IHmacKeyMetadata,
          protos.google.storage.v1.IUpdateHmacKeyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v1.IHmacKeyMetadata,
        protos.google.storage.v1.IUpdateHmacKeyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.updateHmacKey(request, options, callback);
  }

/**
 * Reads an object's data.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   The name of the bucket containing the object to read.
 * @param {string} request.object
 *   The name of the object to read.
 * @param {number} request.generation
 *   If present, selects a specific revision of this object (as opposed
 *   to the latest version, the default).
 * @param {number} request.readOffset
 *   The offset for the first byte to return in the read, relative to the start
 *   of the object.
 *
 *   A negative `read_offset` value will be interpreted as the number of bytes
 *   back from the end of the object to be returned. For example, if an object's
 *   length is 15 bytes, a GetObjectMediaRequest with `read_offset` = -5 and
 *   `read_limit` = 3 would return bytes 10 through 12 of the object.
 * @param {number} request.readLimit
 *   The maximum number of `data` bytes the server is allowed to return in the
 *   sum of all `Object` messages. A `read_limit` of zero indicates that there
 *   is no limit, and a negative `read_limit` will cause an error.
 *
 *   If the stream returns fewer bytes than allowed by the `read_limit` and no
 *   error occurred, the stream includes all data from the `read_offset` to the
 *   end of the resource.
 * @param {google.protobuf.Int64Value} request.ifGenerationMatch
 *   Makes the operation conditional on whether the object's current generation
 *   matches the given value. Setting to 0 makes the operation succeed only if
 *   there are no live versions of the object.
 * @param {google.protobuf.Int64Value} request.ifGenerationNotMatch
 *   Makes the operation conditional on whether the object's current generation
 *   does not match the given value. If no live object exists, the precondition
 *   fails. Setting to 0 makes the operation succeed only if there is a live
 *   version of the object.
 * @param {google.protobuf.Int64Value} request.ifMetagenerationMatch
 *   Makes the operation conditional on whether the object's current
 *   metageneration matches the given value.
 * @param {google.protobuf.Int64Value} request.ifMetagenerationNotMatch
 *   Makes the operation conditional on whether the object's current
 *   metageneration does not match the given value.
 * @param {google.storage.v1.CommonObjectRequestParams} request.commonObjectRequestParams
 *   A set of parameters common to Storage API requests concerning an object.
 * @param {google.storage.v1.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits [GetObjectMediaResponse]{@link google.storage.v1.GetObjectMediaResponse} on 'data' event.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming)
 *   for more details and examples.
 * @example
 * const stream = client.getObjectMedia(request);
 * stream.on('data', (response) => { ... });
 * stream.on('end', () => { ... });
 */
  getObjectMedia(
      request?: protos.google.storage.v1.IGetObjectMediaRequest,
      options?: CallOptions):
    gax.CancellableStream{
    request = request || {};
    options = options || {};
    this.initialize();
    return this.innerApiCalls.getObjectMedia(request, options);
  }

  insertObject(
      options?: CallOptions,
      callback?: Callback<
        protos.google.storage.v1.IObject,
        protos.google.storage.v1.IInsertObjectRequest|null|undefined,
        {}|null|undefined>):
    gax.CancellableStream;
  insertObject(
      callback?: Callback<
        protos.google.storage.v1.IObject,
        protos.google.storage.v1.IInsertObjectRequest|null|undefined,
        {}|null|undefined>):
    gax.CancellableStream;
/**
 * Stores a new object and metadata.
 *
 * An object can be written either in a single message stream or in a
 * resumable sequence of message streams. To write using a single stream,
 * the client should include in the first message of the stream an
 * `InsertObjectSpec` describing the destination bucket, object, and any
 * preconditions. Additionally, the final message must set 'finish_write' to
 * true, or else it is an error.
 *
 * For a resumable write, the client should instead call
 * `StartResumableWrite()` and provide that method an `InsertObjectSpec.`
 * They should then attach the returned `upload_id` to the first message of
 * each following call to `Insert`. If there is an error or the connection is
 * broken during the resumable `Insert()`, the client should check the status
 * of the `Insert()` by calling `QueryWriteStatus()` and continue writing from
 * the returned `committed_size`. This may be less than the amount of data the
 * client previously sent.
 *
 * The service will not view the object as complete until the client has
 * sent an `Insert` with `finish_write` set to `true`. Sending any
 * requests on a stream after sending a request with `finish_write` set to
 * `true` will cause an error. The client **should** check the
 * `Object` it receives to determine how much data the service was
 * able to commit and whether the service views the object as complete.
 *
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream} - A writable stream which accepts objects representing
 * [InsertObjectRequest]{@link google.storage.v1.InsertObjectRequest}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#client-streaming)
 *   for more details and examples.
 * @example
 * const stream = client.insertObject(callback);
 * stream.write(request);
 * stream.end();
 */
  insertObject(
      optionsOrCallback?: CallOptions|Callback<
        protos.google.storage.v1.IObject,
        protos.google.storage.v1.IInsertObjectRequest|null|undefined,
        {}|null|undefined>,
      callback?: Callback<
        protos.google.storage.v1.IObject,
        protos.google.storage.v1.IInsertObjectRequest|null|undefined,
        {}|null|undefined>):
    gax.CancellableStream {
    if (optionsOrCallback instanceof Function && callback === undefined) {
        callback = optionsOrCallback;
        optionsOrCallback = {};
    }
    const options = optionsOrCallback as CallOptions;
    this.initialize();
    return this.innerApiCalls.insertObject(null, options, callback);
  }


  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.storageStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
