# frozen_string_literal: true

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "helper"

require "gapic/grpc/service_stub"

require "google/storage/v2/storage_pb"
require "google/storage/v2/storage_services_pb"
require "google/storage/v2/storage"

class ::Google::Storage::V2::Storage::ClientTest < Minitest::Test
  class ClientStub
    attr_accessor :call_rpc_count, :requests

    def initialize response, operation, &block
      @response = response
      @operation = operation
      @block = block
      @call_rpc_count = 0
      @requests = []
    end

    def call_rpc *args, **kwargs
      @call_rpc_count += 1

      @requests << @block&.call(*args, **kwargs)

      yield @response, @operation if block_given?

      @response
    end
  end

  def test_read_object
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V2::ReadObjectResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a server streaming method.
    bucket = "hello world"
    object = "hello world"
    generation = 42
    read_offset = 42
    read_limit = 42
    if_generation_match = 42
    if_generation_not_match = 42
    if_metageneration_match = 42
    if_metageneration_not_match = 42
    common_object_request_params = {}
    common_request_params = {}
    read_mask = {}

    read_object_client_stub = ClientStub.new [grpc_response].to_enum, grpc_operation do |name, request, options:|
      assert_equal :read_object, name
      assert_kind_of ::Google::Storage::V2::ReadObjectRequest, request
      assert_equal "hello world", request["bucket"]
      assert_equal "hello world", request["object"]
      assert_equal 42, request["generation"]
      assert_equal 42, request["read_offset"]
      assert_equal 42, request["read_limit"]
      assert_equal 42, request["if_generation_match"]
      assert request.has_if_generation_match?
      assert_equal 42, request["if_generation_not_match"]
      assert request.has_if_generation_not_match?
      assert_equal 42, request["if_metageneration_match"]
      assert request.has_if_metageneration_match?
      assert_equal 42, request["if_metageneration_not_match"]
      assert request.has_if_metageneration_not_match?
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V2::CommonObjectRequestParams), request["common_object_request_params"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V2::CommonRequestParams), request["common_request_params"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::FieldMask), request["read_mask"]
      assert request.has_read_mask?
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, read_object_client_stub do
      # Create client
      client = ::Google::Storage::V2::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.read_object({ bucket: bucket, object: object, generation: generation, read_offset: read_offset, read_limit: read_limit, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, common_object_request_params: common_object_request_params, common_request_params: common_request_params, read_mask: read_mask }) do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Storage::V2::ReadObjectResponse, r
        end
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.read_object bucket: bucket, object: object, generation: generation, read_offset: read_offset, read_limit: read_limit, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, common_object_request_params: common_object_request_params, common_request_params: common_request_params, read_mask: read_mask do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Storage::V2::ReadObjectResponse, r
        end
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.read_object ::Google::Storage::V2::ReadObjectRequest.new(bucket: bucket, object: object, generation: generation, read_offset: read_offset, read_limit: read_limit, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, common_object_request_params: common_object_request_params, common_request_params: common_request_params, read_mask: read_mask) do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Storage::V2::ReadObjectResponse, r
        end
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.read_object({ bucket: bucket, object: object, generation: generation, read_offset: read_offset, read_limit: read_limit, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, common_object_request_params: common_object_request_params, common_request_params: common_request_params, read_mask: read_mask }, grpc_options) do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Storage::V2::ReadObjectResponse, r
        end
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.read_object(::Google::Storage::V2::ReadObjectRequest.new(bucket: bucket, object: object, generation: generation, read_offset: read_offset, read_limit: read_limit, if_generation_match: if_generation_match, if_generation_not_match: if_generation_not_match, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, common_object_request_params: common_object_request_params, common_request_params: common_request_params, read_mask: read_mask), grpc_options) do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Storage::V2::ReadObjectResponse, r
        end
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, read_object_client_stub.call_rpc_count
    end
  end

  def test_write_object
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V2::WriteObjectResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a client streaming method.
    upload_id = "hello world"
    write_offset = 42
    checksummed_data = {}
    object_checksums = {}
    finish_write = true
    common_object_request_params = {}
    common_request_params = {}

    write_object_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :write_object, name
      assert_kind_of Enumerable, request
      refute_nil options
      request
    end

    Gapic::ServiceStub.stub :new, write_object_client_stub do
      # Create client
      client = ::Google::Storage::V2::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use enumerable object with hash and protobuf object.
      request_hash = { upload_id: upload_id, write_offset: write_offset, checksummed_data: checksummed_data, object_checksums: object_checksums, finish_write: finish_write, common_object_request_params: common_object_request_params, common_request_params: common_request_params }
      request_proto = ::Google::Storage::V2::WriteObjectRequest.new upload_id: upload_id, write_offset: write_offset, checksummed_data: checksummed_data, object_checksums: object_checksums, finish_write: finish_write, common_object_request_params: common_object_request_params, common_request_params: common_request_params
      enum_input = [request_hash, request_proto].to_enum
      client.write_object enum_input do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use stream input object (from gapic-common).
      request_hash = { upload_id: upload_id, write_offset: write_offset, checksummed_data: checksummed_data, object_checksums: object_checksums, finish_write: finish_write, common_object_request_params: common_object_request_params, common_request_params: common_request_params }
      request_proto = ::Google::Storage::V2::WriteObjectRequest.new upload_id: upload_id, write_offset: write_offset, checksummed_data: checksummed_data, object_checksums: object_checksums, finish_write: finish_write, common_object_request_params: common_object_request_params, common_request_params: common_request_params
      stream_input = Gapic::StreamInput.new
      client.write_object stream_input do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end
      stream_input << request_hash
      stream_input << request_proto
      stream_input.close

      # Use enumerable object with hash and protobuf object with options.
      request_hash = { upload_id: upload_id, write_offset: write_offset, checksummed_data: checksummed_data, object_checksums: object_checksums, finish_write: finish_write, common_object_request_params: common_object_request_params, common_request_params: common_request_params }
      request_proto = ::Google::Storage::V2::WriteObjectRequest.new upload_id: upload_id, write_offset: write_offset, checksummed_data: checksummed_data, object_checksums: object_checksums, finish_write: finish_write, common_object_request_params: common_object_request_params, common_request_params: common_request_params
      enum_input = [request_hash, request_proto].to_enum
      client.write_object enum_input, grpc_options do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use stream input object (from gapic-common) with options.
      request_hash = { upload_id: upload_id, write_offset: write_offset, checksummed_data: checksummed_data, object_checksums: object_checksums, finish_write: finish_write, common_object_request_params: common_object_request_params, common_request_params: common_request_params }
      request_proto = ::Google::Storage::V2::WriteObjectRequest.new upload_id: upload_id, write_offset: write_offset, checksummed_data: checksummed_data, object_checksums: object_checksums, finish_write: finish_write, common_object_request_params: common_object_request_params, common_request_params: common_request_params
      stream_input = Gapic::StreamInput.new
      client.write_object stream_input, grpc_options do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end
      stream_input << request_hash
      stream_input << request_proto
      stream_input.close

      # Verify method calls
      assert_equal 4, write_object_client_stub.call_rpc_count
      write_object_client_stub.requests.each do |request|
        request.to_a.each do |r|
          assert_kind_of ::Google::Storage::V2::WriteObjectRequest, r
          assert_equal "hello world", r["upload_id"]
          assert_equal :upload_id, r.first_message
          assert_equal 42, r["write_offset"]
          assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V2::ChecksummedData), r["checksummed_data"]
          assert_equal :checksummed_data, r.data
          assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V2::ObjectChecksums), r["object_checksums"]
          assert_equal true, r["finish_write"]
          assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V2::CommonObjectRequestParams), r["common_object_request_params"]
          assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V2::CommonRequestParams), r["common_request_params"]
        end
      end
    end
  end

  def test_start_resumable_write
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V2::StartResumableWriteResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    write_object_spec = {}
    common_object_request_params = {}
    common_request_params = {}

    start_resumable_write_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :start_resumable_write, name
      assert_kind_of ::Google::Storage::V2::StartResumableWriteRequest, request
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V2::WriteObjectSpec), request["write_object_spec"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V2::CommonObjectRequestParams), request["common_object_request_params"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V2::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, start_resumable_write_client_stub do
      # Create client
      client = ::Google::Storage::V2::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.start_resumable_write({ write_object_spec: write_object_spec, common_object_request_params: common_object_request_params, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.start_resumable_write write_object_spec: write_object_spec, common_object_request_params: common_object_request_params, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.start_resumable_write ::Google::Storage::V2::StartResumableWriteRequest.new(write_object_spec: write_object_spec, common_object_request_params: common_object_request_params, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.start_resumable_write({ write_object_spec: write_object_spec, common_object_request_params: common_object_request_params, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.start_resumable_write(::Google::Storage::V2::StartResumableWriteRequest.new(write_object_spec: write_object_spec, common_object_request_params: common_object_request_params, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, start_resumable_write_client_stub.call_rpc_count
    end
  end

  def test_query_write_status
    # Create GRPC objects.
    grpc_response = ::Google::Storage::V2::QueryWriteStatusResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    upload_id = "hello world"
    common_object_request_params = {}
    common_request_params = {}

    query_write_status_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :query_write_status, name
      assert_kind_of ::Google::Storage::V2::QueryWriteStatusRequest, request
      assert_equal "hello world", request["upload_id"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V2::CommonObjectRequestParams), request["common_object_request_params"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Storage::V2::CommonRequestParams), request["common_request_params"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, query_write_status_client_stub do
      # Create client
      client = ::Google::Storage::V2::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.query_write_status({ upload_id: upload_id, common_object_request_params: common_object_request_params, common_request_params: common_request_params }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.query_write_status upload_id: upload_id, common_object_request_params: common_object_request_params, common_request_params: common_request_params do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.query_write_status ::Google::Storage::V2::QueryWriteStatusRequest.new(upload_id: upload_id, common_object_request_params: common_object_request_params, common_request_params: common_request_params) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.query_write_status({ upload_id: upload_id, common_object_request_params: common_object_request_params, common_request_params: common_request_params }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.query_write_status(::Google::Storage::V2::QueryWriteStatusRequest.new(upload_id: upload_id, common_object_request_params: common_object_request_params, common_request_params: common_request_params), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, query_write_status_client_stub.call_rpc_count
    end
  end

  def test_configure
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure

    client = block_config = config = nil
    Gapic::ServiceStub.stub :new, nil do
      client = ::Google::Storage::V2::Storage::Client.new do |config|
        config.credentials = grpc_channel
      end
    end

    config = client.configure do |c|
      block_config = c
    end

    assert_same block_config, config
    assert_kind_of ::Google::Storage::V2::Storage::Client::Configuration, config
  end
end
