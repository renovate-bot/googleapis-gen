# frozen_string_literal: true

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "gapic/common"
require "gapic/config"
require "gapic/config/method"

require "google/cloud/storage/v2/version"

require "google/storage/v2/storage/credentials"
require "google/storage/v2/storage/paths"
require "google/storage/v2/storage/client"

module Google
  module Storage
    module V2
      ##
      # ## API Overview and Naming Syntax
      #
      # The GCS gRPC API allows applications to read and write data through the
      # abstractions of buckets and objects. For a description of these abstractions
      # please see https://cloud.google.com/storage/docs.
      #
      # Resources are named as follows:
      #   - Projects are referred to as they are defined by the Resource Manager API,
      #     using strings like `projects/123456` or `projects/my-string-id`.
      #   - Buckets are named using string names of the form:
      #     `projects/{project}/buckets/{bucket}`
      #     For globally unique buckets, `_` may be substituted for the project.
      #   - Objects are uniquely identified by their name along with the name of the
      #     bucket they belong to, as separate strings in this API. For example:
      #
      #       ReadObjectRequest {
      #         bucket: 'projects/_/buckets/my-bucket'
      #         object: 'my-object'
      #       }
      #     Note that object names can contain `/` characters, which are treated as
      #     any other character (no special directory semantics).
      #
      # To load this service and instantiate a client:
      #
      #     require "google/storage/v2/storage"
      #     client = ::Google::Storage::V2::Storage::Client.new
      #
      module Storage
      end
    end
  end
end

helper_path = ::File.join __dir__, "storage", "helpers.rb"
require "google/storage/v2/storage/helpers" if ::File.file? helper_path
