# frozen_string_literal: true

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/cloud/errors"
require "google/storage/v2/storage_pb"

module Google
  module Storage
    module V2
      module Storage
        ##
        # Client for the Storage service.
        #
        # Manages Google Cloud Storage resources.
        #
        class Client
          include Paths

          # @private
          attr_reader :storage_stub

          ##
          # Configure the Storage Client class.
          #
          # See {::Google::Storage::V2::Storage::Client::Configuration}
          # for a description of the configuration fields.
          #
          # @example
          #
          #   # Modify the configuration for all Storage clients
          #   ::Google::Storage::V2::Storage::Client.configure do |config|
          #     config.timeout = 10.0
          #   end
          #
          # @yield [config] Configure the Client client.
          # @yieldparam config [Client::Configuration]
          #
          # @return [Client::Configuration]
          #
          def self.configure
            @configure ||= begin
              namespace = ["Google", "Storage", "V2"]
              parent_config = while namespace.any?
                                parent_name = namespace.join "::"
                                parent_const = const_get parent_name
                                break parent_const.configure if parent_const.respond_to? :configure
                                namespace.pop
                              end
              default_config = Client::Configuration.new parent_config

              default_config.timeout = 60.0
              default_config.retry_policy = {
                initial_delay: 1.0, max_delay: 60.0, multiplier: 2, retry_codes: [4, 14]
              }

              default_config
            end
            yield @configure if block_given?
            @configure
          end

          ##
          # Configure the Storage Client instance.
          #
          # The configuration is set to the derived mode, meaning that values can be changed,
          # but structural changes (adding new fields, etc.) are not allowed. Structural changes
          # should be made on {Client.configure}.
          #
          # See {::Google::Storage::V2::Storage::Client::Configuration}
          # for a description of the configuration fields.
          #
          # @yield [config] Configure the Client client.
          # @yieldparam config [Client::Configuration]
          #
          # @return [Client::Configuration]
          #
          def configure
            yield @config if block_given?
            @config
          end

          ##
          # Create a new Storage client object.
          #
          # @example
          #
          #   # Create a client using the default configuration
          #   client = ::Google::Storage::V2::Storage::Client.new
          #
          #   # Create a client using a custom configuration
          #   client = ::Google::Storage::V2::Storage::Client.new do |config|
          #     config.timeout = 10.0
          #   end
          #
          # @yield [config] Configure the Storage client.
          # @yieldparam config [Client::Configuration]
          #
          def initialize
            # These require statements are intentionally placed here to initialize
            # the gRPC module only when it's required.
            # See https://github.com/googleapis/toolkit/issues/446
            require "gapic/grpc"
            require "google/storage/v2/storage_services_pb"

            # Create the configuration object
            @config = Configuration.new Client.configure

            # Yield the configuration if needed
            yield @config if block_given?

            # Create credentials
            credentials = @config.credentials
            # Use self-signed JWT if the endpoint is unchanged from default,
            # but only if the default endpoint does not have a region prefix.
            enable_self_signed_jwt = @config.endpoint == Client.configure.endpoint &&
                                     !@config.endpoint.split(".").first.include?("-")
            credentials ||= Credentials.default scope: @config.scope,
                                                enable_self_signed_jwt: enable_self_signed_jwt
            if credentials.is_a?(::String) || credentials.is_a?(::Hash)
              credentials = Credentials.new credentials, scope: @config.scope
            end
            @quota_project_id = @config.quota_project
            @quota_project_id ||= credentials.quota_project_id if credentials.respond_to? :quota_project_id

            @storage_stub = ::Gapic::ServiceStub.new(
              ::Google::Storage::V2::Storage::Stub,
              credentials:  credentials,
              endpoint:     @config.endpoint,
              channel_args: @config.channel_args,
              interceptors: @config.interceptors
            )
          end

          # Service calls

          ##
          # Reads an object's data.
          #
          # @overload read_object(request, options = nil)
          #   Pass arguments to `read_object` via a request object, either of type
          #   {::Google::Storage::V2::ReadObjectRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V2::ReadObjectRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload read_object(bucket: nil, object: nil, generation: nil, read_offset: nil, read_limit: nil, if_generation_match: nil, if_generation_not_match: nil, if_metageneration_match: nil, if_metageneration_not_match: nil, common_object_request_params: nil, common_request_params: nil, read_mask: nil)
          #   Pass arguments to `read_object` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param bucket [::String]
          #     The name of the bucket containing the object to read.
          #   @param object [::String]
          #     The name of the object to read.
          #   @param generation [::Integer]
          #     If present, selects a specific revision of this object (as opposed
          #     to the latest version, the default).
          #   @param read_offset [::Integer]
          #     The offset for the first byte to return in the read, relative to the start
          #     of the object.
          #
          #     A negative `read_offset` value will be interpreted as the number of bytes
          #     back from the end of the object to be returned. For example, if an object's
          #     length is 15 bytes, a ReadObjectRequest with `read_offset` = -5 and
          #     `read_limit` = 3 would return bytes 10 through 12 of the object. Requesting
          #     a negative offset whose magnitude is larger than the size of the object
          #     will result in an error.
          #   @param read_limit [::Integer]
          #     The maximum number of `data` bytes the server is allowed to return in the
          #     sum of all `Object` messages. A `read_limit` of zero indicates that there
          #     is no limit, and a negative `read_limit` will cause an error.
          #
          #     If the stream returns fewer bytes than allowed by the `read_limit` and no
          #     error occurred, the stream includes all data from the `read_offset` to the
          #     end of the resource.
          #   @param if_generation_match [::Integer]
          #     Makes the operation conditional on whether the object's current generation
          #     matches the given value. Setting to 0 makes the operation succeed only if
          #     there are no live versions of the object.
          #   @param if_generation_not_match [::Integer]
          #     Makes the operation conditional on whether the object's current generation
          #     does not match the given value. If no live object exists, the precondition
          #     fails. Setting to 0 makes the operation succeed only if there is a live
          #     version of the object.
          #   @param if_metageneration_match [::Integer]
          #     Makes the operation conditional on whether the object's current
          #     metageneration matches the given value.
          #   @param if_metageneration_not_match [::Integer]
          #     Makes the operation conditional on whether the object's current
          #     metageneration does not match the given value.
          #   @param common_object_request_params [::Google::Storage::V2::CommonObjectRequestParams, ::Hash]
          #     A set of parameters common to Storage API requests concerning an object.
          #   @param common_request_params [::Google::Storage::V2::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #   @param read_mask [::Google::Protobuf::FieldMask, ::Hash]
          #     Mask specifying which fields to read.
          #     The checksummed_data field and its children will always be present.
          #     If no mask is specified, will default to all fields except metadata.owner
          #     and metadata.acl.
          #     * may be used to mean "all fields".
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Enumerable<::Google::Storage::V2::ReadObjectResponse>]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Enumerable<::Google::Storage::V2::ReadObjectResponse>]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v2"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V2::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V2::ReadObjectRequest.new
          #
          #   # Call the read_object method.
          #   result = client.read_object request
          #
          #   # The returned object is a streamed enumerable yielding elements of
          #   # type ::Google::Storage::V2::ReadObjectResponse.
          #   result.each do |response|
          #     p response
          #   end
          #
          def read_object request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V2::ReadObjectRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.read_object.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V2::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.read_object.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.read_object.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :read_object, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Stores a new object and metadata.
          #
          # An object can be written either in a single message stream or in a
          # resumable sequence of message streams. To write using a single stream,
          # the client should include in the first message of the stream an
          # `WriteObjectSpec` describing the destination bucket, object, and any
          # preconditions. Additionally, the final message must set 'finish_write' to
          # true, or else it is an error.
          #
          # For a resumable write, the client should instead call
          # `StartResumableWrite()` and provide that method an `WriteObjectSpec.`
          # They should then attach the returned `upload_id` to the first message of
          # each following call to `Create`. If there is an error or the connection is
          # broken during the resumable `Create()`, the client should check the status
          # of the `Create()` by calling `QueryWriteStatus()` and continue writing from
          # the returned `persisted_size`. This may be less than the amount of data the
          # client previously sent.
          #
          # The service will not view the object as complete until the client has
          # sent a `WriteObjectRequest` with `finish_write` set to `true`. Sending any
          # requests on a stream after sending a request with `finish_write` set to
          # `true` will cause an error. The client **should** check the response it
          # receives to determine how much data the service was able to commit and
          # whether the service views the object as complete.
          #
          # @param request [::Gapic::StreamInput, ::Enumerable<::Google::Storage::V2::WriteObjectRequest, ::Hash>]
          #   An enumerable of {::Google::Storage::V2::WriteObjectRequest} instances.
          # @param options [::Gapic::CallOptions, ::Hash]
          #   Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V2::WriteObjectResponse]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V2::WriteObjectResponse]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v2"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V2::Storage::Client.new
          #
          #   # Create a stream of requests, as an Enumerator.
          #   # For each request, pass in keyword arguments to set fields.
          #   request = [
          #     Google::Storage::V2::WriteObjectRequest.new,
          #     Google::Storage::V2::WriteObjectRequest.new
          #   ].to_enum
          #
          #   # Call the write_object method.
          #   result = client.write_object request
          #
          #   # The returned object is of type Google::Storage::V2::WriteObjectResponse.
          #   p result
          #
          def write_object request, options = nil
            unless request.is_a? ::Enumerable
              raise ::ArgumentError, "request must be an Enumerable" unless request.respond_to? :to_enum
              request = request.to_enum
            end

            request = request.lazy.map do |req|
              ::Gapic::Protobuf.coerce req, to: ::Google::Storage::V2::WriteObjectRequest
            end

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.write_object.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V2::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.write_object.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.write_object.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :write_object, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Starts a resumable write. How long the write operation remains valid, and
          # what happens when the write operation becomes invalid, are
          # service-dependent.
          #
          # @overload start_resumable_write(request, options = nil)
          #   Pass arguments to `start_resumable_write` via a request object, either of type
          #   {::Google::Storage::V2::StartResumableWriteRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V2::StartResumableWriteRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload start_resumable_write(write_object_spec: nil, common_object_request_params: nil, common_request_params: nil)
          #   Pass arguments to `start_resumable_write` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param write_object_spec [::Google::Storage::V2::WriteObjectSpec, ::Hash]
          #     The destination bucket, object, and metadata, as well as any preconditions.
          #   @param common_object_request_params [::Google::Storage::V2::CommonObjectRequestParams, ::Hash]
          #     A set of parameters common to Storage API requests concerning an object.
          #   @param common_request_params [::Google::Storage::V2::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V2::StartResumableWriteResponse]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V2::StartResumableWriteResponse]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v2"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V2::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V2::StartResumableWriteRequest.new
          #
          #   # Call the start_resumable_write method.
          #   result = client.start_resumable_write request
          #
          #   # The returned object is of type Google::Storage::V2::StartResumableWriteResponse.
          #   p result
          #
          def start_resumable_write request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V2::StartResumableWriteRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.start_resumable_write.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V2::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.start_resumable_write.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.start_resumable_write.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :start_resumable_write, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Determines the `persisted_size` for an object that is being written, which
          # can then be used as the `write_offset` for the next `Write()` call.
          #
          # If the object does not exist (i.e., the object has been deleted, or the
          # first `Write()` has not yet reached the service), this method returns the
          # error `NOT_FOUND`.
          #
          # The client **may** call `QueryWriteStatus()` at any time to determine how
          # much data has been processed for this object. This is useful if the
          # client is buffering data and needs to know which data can be safely
          # evicted. For any sequence of `QueryWriteStatus()` calls for a given
          # object name, the sequence of returned `persisted_size` values will be
          # non-decreasing.
          #
          # @overload query_write_status(request, options = nil)
          #   Pass arguments to `query_write_status` via a request object, either of type
          #   {::Google::Storage::V2::QueryWriteStatusRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Storage::V2::QueryWriteStatusRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload query_write_status(upload_id: nil, common_object_request_params: nil, common_request_params: nil)
          #   Pass arguments to `query_write_status` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param upload_id [::String]
          #     Required. The name of the resume token for the object whose write status is being
          #     requested.
          #   @param common_object_request_params [::Google::Storage::V2::CommonObjectRequestParams, ::Hash]
          #     A set of parameters common to Storage API requests concerning an object.
          #   @param common_request_params [::Google::Storage::V2::CommonRequestParams, ::Hash]
          #     A set of parameters common to all Storage API requests.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Storage::V2::QueryWriteStatusResponse]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Storage::V2::QueryWriteStatusResponse]
          #
          # @raise [::Google::Cloud::Error] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/storage/v2"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Storage::V2::Storage::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Storage::V2::QueryWriteStatusRequest.new
          #
          #   # Call the query_write_status method.
          #   result = client.query_write_status request
          #
          #   # The returned object is of type Google::Storage::V2::QueryWriteStatusResponse.
          #   p result
          #
          def query_write_status request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Storage::V2::QueryWriteStatusRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.query_write_status.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Cloud::Storage::V2::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.query_write_status.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.query_write_status.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @storage_stub.call_rpc :query_write_status, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue ::GRPC::BadStatus => e
            raise ::Google::Cloud::Error.from_error(e)
          end

          ##
          # Configuration class for the Storage API.
          #
          # This class represents the configuration for Storage,
          # providing control over timeouts, retry behavior, logging, transport
          # parameters, and other low-level controls. Certain parameters can also be
          # applied individually to specific RPCs. See
          # {::Google::Storage::V2::Storage::Client::Configuration::Rpcs}
          # for a list of RPCs that can be configured independently.
          #
          # Configuration can be applied globally to all clients, or to a single client
          # on construction.
          #
          # @example
          #
          #   # Modify the global config, setting the timeout for
          #   # read_object to 20 seconds,
          #   # and all remaining timeouts to 10 seconds.
          #   ::Google::Storage::V2::Storage::Client.configure do |config|
          #     config.timeout = 10.0
          #     config.rpcs.read_object.timeout = 20.0
          #   end
          #
          #   # Apply the above configuration only to a new client.
          #   client = ::Google::Storage::V2::Storage::Client.new do |config|
          #     config.timeout = 10.0
          #     config.rpcs.read_object.timeout = 20.0
          #   end
          #
          # @!attribute [rw] endpoint
          #   The hostname or hostname:port of the service endpoint.
          #   Defaults to `"storage.googleapis.com"`.
          #   @return [::String]
          # @!attribute [rw] credentials
          #   Credentials to send with calls. You may provide any of the following types:
          #    *  (`String`) The path to a service account key file in JSON format
          #    *  (`Hash`) A service account key as a Hash
          #    *  (`Google::Auth::Credentials`) A googleauth credentials object
          #       (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
          #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
          #       (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
          #    *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
          #    *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
          #    *  (`nil`) indicating no credentials
          #   @return [::Object]
          # @!attribute [rw] scope
          #   The OAuth scopes
          #   @return [::Array<::String>]
          # @!attribute [rw] lib_name
          #   The library name as recorded in instrumentation and logging
          #   @return [::String]
          # @!attribute [rw] lib_version
          #   The library version as recorded in instrumentation and logging
          #   @return [::String]
          # @!attribute [rw] channel_args
          #   Extra parameters passed to the gRPC channel. Note: this is ignored if a
          #   `GRPC::Core::Channel` object is provided as the credential.
          #   @return [::Hash]
          # @!attribute [rw] interceptors
          #   An array of interceptors that are run before calls are executed.
          #   @return [::Array<::GRPC::ClientInterceptor>]
          # @!attribute [rw] timeout
          #   The call timeout in seconds.
          #   @return [::Numeric]
          # @!attribute [rw] metadata
          #   Additional gRPC headers to be sent with the call.
          #   @return [::Hash{::Symbol=>::String}]
          # @!attribute [rw] retry_policy
          #   The retry policy. The value is a hash with the following keys:
          #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
          #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
          #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
          #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
          #       trigger a retry.
          #   @return [::Hash]
          # @!attribute [rw] quota_project
          #   A separate project against which to charge quota.
          #   @return [::String]
          #
          class Configuration
            extend ::Gapic::Config

            config_attr :endpoint,      "storage.googleapis.com", ::String
            config_attr :credentials,   nil do |value|
              allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
              allowed += [::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials] if defined? ::GRPC
              allowed.any? { |klass| klass === value }
            end
            config_attr :scope,         nil, ::String, ::Array, nil
            config_attr :lib_name,      nil, ::String, nil
            config_attr :lib_version,   nil, ::String, nil
            config_attr(:channel_args,  { "grpc.service_config_disable_resolution" => 1 }, ::Hash, nil)
            config_attr :interceptors,  nil, ::Array, nil
            config_attr :timeout,       nil, ::Numeric, nil
            config_attr :metadata,      nil, ::Hash, nil
            config_attr :retry_policy,  nil, ::Hash, ::Proc, nil
            config_attr :quota_project, nil, ::String, nil

            # @private
            def initialize parent_config = nil
              @parent_config = parent_config unless parent_config.nil?

              yield self if block_given?
            end

            ##
            # Configurations for individual RPCs
            # @return [Rpcs]
            #
            def rpcs
              @rpcs ||= begin
                parent_rpcs = nil
                parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config.respond_to?(:rpcs)
                Rpcs.new parent_rpcs
              end
            end

            ##
            # Configuration RPC class for the Storage API.
            #
            # Includes fields providing the configuration for each RPC in this service.
            # Each configuration object is of type `Gapic::Config::Method` and includes
            # the following configuration fields:
            #
            #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
            #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
            #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
            #     include the following keys:
            #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
            #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
            #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
            #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
            #         trigger a retry.
            #
            class Rpcs
              ##
              # RPC-specific configuration for `read_object`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :read_object
              ##
              # RPC-specific configuration for `write_object`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :write_object
              ##
              # RPC-specific configuration for `start_resumable_write`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :start_resumable_write
              ##
              # RPC-specific configuration for `query_write_status`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :query_write_status

              # @private
              def initialize parent_rpcs = nil
                read_object_config = parent_rpcs.read_object if parent_rpcs.respond_to? :read_object
                @read_object = ::Gapic::Config::Method.new read_object_config
                write_object_config = parent_rpcs.write_object if parent_rpcs.respond_to? :write_object
                @write_object = ::Gapic::Config::Method.new write_object_config
                start_resumable_write_config = parent_rpcs.start_resumable_write if parent_rpcs.respond_to? :start_resumable_write
                @start_resumable_write = ::Gapic::Config::Method.new start_resumable_write_config
                query_write_status_config = parent_rpcs.query_write_status if parent_rpcs.respond_to? :query_write_status
                @query_write_status = ::Gapic::Config::Method.new query_write_status_config

                yield self if block_given?
              end
            end
          end
        end
      end
    end
  end
end
