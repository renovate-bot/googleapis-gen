// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions} from 'google-gax';

import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v2/storage_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './storage_client_config.json';

const version = require('../../../package.json').version;

/**
 *  ## API Overview and Naming Syntax
 *
 *  The GCS gRPC API allows applications to read and write data through the
 *  abstractions of buckets and objects. For a description of these abstractions
 *  please see https://cloud.google.com/storage/docs.
 *
 *  Resources are named as follows:
 *    - Projects are referred to as they are defined by the Resource Manager API,
 *      using strings like `projects/123456` or `projects/my-string-id`.
 *    - Buckets are named using string names of the form:
 *      `projects/{project}/buckets/{bucket}`
 *      For globally unique buckets, `_` may be substituted for the project.
 *    - Objects are uniquely identified by their name along with the name of the
 *      bucket they belong to, as separate strings in this API. For example:
 *
 *        ReadObjectRequest {
 *          bucket: 'projects/_/buckets/my-bucket'
 *          object: 'my-object'
 *        }
 *      Note that object names can contain `/` characters, which are treated as
 *      any other character (no special directory semantics).
 * @class
 * @memberof v2
 */
export class StorageClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  storageStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of StorageClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP fallback mode.
   *     In fallback mode, a special browser-compatible transport implementation is used
   *     instead of gRPC transport. In browser context (if the `window` object is defined)
   *     the fallback mode is enabled automatically; set `options.fallback` to `false`
   *     if you need to override this behavior.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof StorageClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      bucketPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/buckets/{bucket}'
      ),
      cryptoKeyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
    };

    // Some of the methods on this service provide streaming responses.
    // Provide descriptors for these.
    this.descriptors.stream = {
      readObject: new this._gaxModule.StreamDescriptor(gax.StreamType.SERVER_STREAMING),
      writeObject: new this._gaxModule.StreamDescriptor(gax.StreamType.CLIENT_STREAMING)
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.storage.v2.Storage', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = gax.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.storageStub) {
      return this.storageStub;
    }

    // Put together the "service stub" for
    // google.storage.v2.Storage.
    this.storageStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.storage.v2.Storage') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.storage.v2.Storage,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const storageStubMethods =
        ['readObject', 'writeObject', 'startResumableWrite', 'queryWriteStatus'];
    for (const methodName of storageStubMethods) {
      const callPromise = this.storageStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.stream[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.storageStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'storage.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'storage.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/cloud-platform.read-only',
      'https://www.googleapis.com/auth/devstorage.full_control',
      'https://www.googleapis.com/auth/devstorage.read_only',
      'https://www.googleapis.com/auth/devstorage.read_write'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  startResumableWrite(
      request?: protos.google.storage.v2.IStartResumableWriteRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v2.IStartResumableWriteResponse,
        protos.google.storage.v2.IStartResumableWriteRequest|undefined, {}|undefined
      ]>;
  startResumableWrite(
      request: protos.google.storage.v2.IStartResumableWriteRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v2.IStartResumableWriteResponse,
          protos.google.storage.v2.IStartResumableWriteRequest|null|undefined,
          {}|null|undefined>): void;
  startResumableWrite(
      request: protos.google.storage.v2.IStartResumableWriteRequest,
      callback: Callback<
          protos.google.storage.v2.IStartResumableWriteResponse,
          protos.google.storage.v2.IStartResumableWriteRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Starts a resumable write. How long the write operation remains valid, and
 * what happens when the write operation becomes invalid, are
 * service-dependent.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.storage.v2.WriteObjectSpec} request.writeObjectSpec
 *   The destination bucket, object, and metadata, as well as any preconditions.
 * @param {google.storage.v2.CommonObjectRequestParams} request.commonObjectRequestParams
 *   A set of parameters common to Storage API requests concerning an object.
 * @param {google.storage.v2.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [StartResumableWriteResponse]{@link google.storage.v2.StartResumableWriteResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.startResumableWrite(request);
 */
  startResumableWrite(
      request?: protos.google.storage.v2.IStartResumableWriteRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v2.IStartResumableWriteResponse,
          protos.google.storage.v2.IStartResumableWriteRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v2.IStartResumableWriteResponse,
          protos.google.storage.v2.IStartResumableWriteRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v2.IStartResumableWriteResponse,
        protos.google.storage.v2.IStartResumableWriteRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.startResumableWrite(request, options, callback);
  }
  queryWriteStatus(
      request?: protos.google.storage.v2.IQueryWriteStatusRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v2.IQueryWriteStatusResponse,
        protos.google.storage.v2.IQueryWriteStatusRequest|undefined, {}|undefined
      ]>;
  queryWriteStatus(
      request: protos.google.storage.v2.IQueryWriteStatusRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v2.IQueryWriteStatusResponse,
          protos.google.storage.v2.IQueryWriteStatusRequest|null|undefined,
          {}|null|undefined>): void;
  queryWriteStatus(
      request: protos.google.storage.v2.IQueryWriteStatusRequest,
      callback: Callback<
          protos.google.storage.v2.IQueryWriteStatusResponse,
          protos.google.storage.v2.IQueryWriteStatusRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Determines the `persisted_size` for an object that is being written, which
 * can then be used as the `write_offset` for the next `Write()` call.
 *
 * If the object does not exist (i.e., the object has been deleted, or the
 * first `Write()` has not yet reached the service), this method returns the
 * error `NOT_FOUND`.
 *
 * The client **may** call `QueryWriteStatus()` at any time to determine how
 * much data has been processed for this object. This is useful if the
 * client is buffering data and needs to know which data can be safely
 * evicted. For any sequence of `QueryWriteStatus()` calls for a given
 * object name, the sequence of returned `persisted_size` values will be
 * non-decreasing.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.uploadId
 *   Required. The name of the resume token for the object whose write status is being
 *   requested.
 * @param {google.storage.v2.CommonObjectRequestParams} request.commonObjectRequestParams
 *   A set of parameters common to Storage API requests concerning an object.
 * @param {google.storage.v2.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [QueryWriteStatusResponse]{@link google.storage.v2.QueryWriteStatusResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.queryWriteStatus(request);
 */
  queryWriteStatus(
      request?: protos.google.storage.v2.IQueryWriteStatusRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v2.IQueryWriteStatusResponse,
          protos.google.storage.v2.IQueryWriteStatusRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v2.IQueryWriteStatusResponse,
          protos.google.storage.v2.IQueryWriteStatusRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v2.IQueryWriteStatusResponse,
        protos.google.storage.v2.IQueryWriteStatusRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.queryWriteStatus(request, options, callback);
  }

/**
 * Reads an object's data.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   The name of the bucket containing the object to read.
 * @param {string} request.object
 *   The name of the object to read.
 * @param {number} request.generation
 *   If present, selects a specific revision of this object (as opposed
 *   to the latest version, the default).
 * @param {number} request.readOffset
 *   The offset for the first byte to return in the read, relative to the start
 *   of the object.
 *
 *   A negative `read_offset` value will be interpreted as the number of bytes
 *   back from the end of the object to be returned. For example, if an object's
 *   length is 15 bytes, a ReadObjectRequest with `read_offset` = -5 and
 *   `read_limit` = 3 would return bytes 10 through 12 of the object. Requesting
 *   a negative offset whose magnitude is larger than the size of the object
 *   will result in an error.
 * @param {number} request.readLimit
 *   The maximum number of `data` bytes the server is allowed to return in the
 *   sum of all `Object` messages. A `read_limit` of zero indicates that there
 *   is no limit, and a negative `read_limit` will cause an error.
 *
 *   If the stream returns fewer bytes than allowed by the `read_limit` and no
 *   error occurred, the stream includes all data from the `read_offset` to the
 *   end of the resource.
 * @param {number} request.ifGenerationMatch
 *   Makes the operation conditional on whether the object's current generation
 *   matches the given value. Setting to 0 makes the operation succeed only if
 *   there are no live versions of the object.
 * @param {number} request.ifGenerationNotMatch
 *   Makes the operation conditional on whether the object's current generation
 *   does not match the given value. If no live object exists, the precondition
 *   fails. Setting to 0 makes the operation succeed only if there is a live
 *   version of the object.
 * @param {number} request.ifMetagenerationMatch
 *   Makes the operation conditional on whether the object's current
 *   metageneration matches the given value.
 * @param {number} request.ifMetagenerationNotMatch
 *   Makes the operation conditional on whether the object's current
 *   metageneration does not match the given value.
 * @param {google.storage.v2.CommonObjectRequestParams} request.commonObjectRequestParams
 *   A set of parameters common to Storage API requests concerning an object.
 * @param {google.storage.v2.CommonRequestParams} request.commonRequestParams
 *   A set of parameters common to all Storage API requests.
 * @param {google.protobuf.FieldMask} request.readMask
 *   Mask specifying which fields to read.
 *   The checksummed_data field and its children will always be present.
 *   If no mask is specified, will default to all fields except metadata.owner
 *   and metadata.acl.
 *   * may be used to mean "all fields".
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits [ReadObjectResponse]{@link google.storage.v2.ReadObjectResponse} on 'data' event.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming)
 *   for more details and examples.
 * @example
 * const stream = client.readObject(request);
 * stream.on('data', (response) => { ... });
 * stream.on('end', () => { ... });
 */
  readObject(
      request?: protos.google.storage.v2.IReadObjectRequest,
      options?: CallOptions):
    gax.CancellableStream{
    request = request || {};
    options = options || {};
    this.initialize();
    return this.innerApiCalls.readObject(request, options);
  }

  writeObject(
      options?: CallOptions,
      callback?: Callback<
        protos.google.storage.v2.IWriteObjectResponse,
        protos.google.storage.v2.IWriteObjectRequest|null|undefined,
        {}|null|undefined>):
    gax.CancellableStream;
  writeObject(
      callback?: Callback<
        protos.google.storage.v2.IWriteObjectResponse,
        protos.google.storage.v2.IWriteObjectRequest|null|undefined,
        {}|null|undefined>):
    gax.CancellableStream;
/**
 * Stores a new object and metadata.
 *
 * An object can be written either in a single message stream or in a
 * resumable sequence of message streams. To write using a single stream,
 * the client should include in the first message of the stream an
 * `WriteObjectSpec` describing the destination bucket, object, and any
 * preconditions. Additionally, the final message must set 'finish_write' to
 * true, or else it is an error.
 *
 * For a resumable write, the client should instead call
 * `StartResumableWrite()` and provide that method an `WriteObjectSpec.`
 * They should then attach the returned `upload_id` to the first message of
 * each following call to `Create`. If there is an error or the connection is
 * broken during the resumable `Create()`, the client should check the status
 * of the `Create()` by calling `QueryWriteStatus()` and continue writing from
 * the returned `persisted_size`. This may be less than the amount of data the
 * client previously sent.
 *
 * The service will not view the object as complete until the client has
 * sent a `WriteObjectRequest` with `finish_write` set to `true`. Sending any
 * requests on a stream after sending a request with `finish_write` set to
 * `true` will cause an error. The client **should** check the response it
 * receives to determine how much data the service was able to commit and
 * whether the service views the object as complete.
 *
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream} - A writable stream which accepts objects representing
 * [WriteObjectRequest]{@link google.storage.v2.WriteObjectRequest}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#client-streaming)
 *   for more details and examples.
 * @example
 * const stream = client.writeObject(callback);
 * stream.write(request);
 * stream.end();
 */
  writeObject(
      optionsOrCallback?: CallOptions|Callback<
        protos.google.storage.v2.IWriteObjectResponse,
        protos.google.storage.v2.IWriteObjectRequest|null|undefined,
        {}|null|undefined>,
      callback?: Callback<
        protos.google.storage.v2.IWriteObjectResponse,
        protos.google.storage.v2.IWriteObjectRequest|null|undefined,
        {}|null|undefined>):
    gax.CancellableStream {
    if (optionsOrCallback instanceof Function && callback === undefined) {
        callback = optionsOrCallback;
        optionsOrCallback = {};
    }
    const options = optionsOrCallback as CallOptions;
    this.initialize();
    return this.innerApiCalls.writeObject(null, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified bucket resource name string.
   *
   * @param {string} project
   * @param {string} bucket
   * @returns {string} Resource name string.
   */
  bucketPath(project:string,bucket:string) {
    return this.pathTemplates.bucketPathTemplate.render({
      project: project,
      bucket: bucket,
    });
  }

  /**
   * Parse the project from Bucket resource.
   *
   * @param {string} bucketName
   *   A fully-qualified path representing Bucket resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromBucketName(bucketName: string) {
    return this.pathTemplates.bucketPathTemplate.match(bucketName).project;
  }

  /**
   * Parse the bucket from Bucket resource.
   *
   * @param {string} bucketName
   *   A fully-qualified path representing Bucket resource.
   * @returns {string} A string representing the bucket.
   */
  matchBucketFromBucketName(bucketName: string) {
    return this.pathTemplates.bucketPathTemplate.match(bucketName).bucket;
  }

  /**
   * Return a fully-qualified cryptoKey resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} key_ring
   * @param {string} crypto_key
   * @returns {string} Resource name string.
   */
  cryptoKeyPath(project:string,location:string,keyRing:string,cryptoKey:string) {
    return this.pathTemplates.cryptoKeyPathTemplate.render({
      project: project,
      location: location,
      key_ring: keyRing,
      crypto_key: cryptoKey,
    });
  }

  /**
   * Parse the project from CryptoKey resource.
   *
   * @param {string} cryptoKeyName
   *   A fully-qualified path representing CryptoKey resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCryptoKeyName(cryptoKeyName: string) {
    return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName).project;
  }

  /**
   * Parse the location from CryptoKey resource.
   *
   * @param {string} cryptoKeyName
   *   A fully-qualified path representing CryptoKey resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCryptoKeyName(cryptoKeyName: string) {
    return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName).location;
  }

  /**
   * Parse the key_ring from CryptoKey resource.
   *
   * @param {string} cryptoKeyName
   *   A fully-qualified path representing CryptoKey resource.
   * @returns {string} A string representing the key_ring.
   */
  matchKeyRingFromCryptoKeyName(cryptoKeyName: string) {
    return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName).key_ring;
  }

  /**
   * Parse the crypto_key from CryptoKey resource.
   *
   * @param {string} cryptoKeyName
   *   A fully-qualified path representing CryptoKey resource.
   * @returns {string} A string representing the crypto_key.
   */
  matchCryptoKeyFromCryptoKeyName(cryptoKeyName: string) {
    return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName).crypto_key;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project:string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.storageStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
