<?php
/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * Generated by gapic-generator-php from the file
 * https://github.com/google/googleapis/blob/master/google/storage/v2/storage.proto
 * Updates to the above are reflected here through a refresh process.
 */

namespace Google\Storage\V2\Gapic;

use Google\ApiCore\ApiException;

use Google\ApiCore\Call;

use Google\ApiCore\CredentialsWrapper;
use Google\ApiCore\GapicClientTrait;
use Google\ApiCore\PathTemplate;
use Google\ApiCore\RetrySettings;
use Google\ApiCore\Transport\TransportInterface;
use Google\ApiCore\ValidationException;
use Google\Auth\FetchAuthTokenInterface;
use Google\Protobuf\FieldMask;
use Google\Storage\V2\CommonObjectRequestParams;
use Google\Storage\V2\CommonRequestParams;
use Google\Storage\V2\QueryWriteStatusRequest;
use Google\Storage\V2\QueryWriteStatusResponse;
use Google\Storage\V2\ReadObjectRequest;
use Google\Storage\V2\ReadObjectResponse;
use Google\Storage\V2\StartResumableWriteRequest;
use Google\Storage\V2\StartResumableWriteResponse;
use Google\Storage\V2\WriteObjectRequest;
use Google\Storage\V2\WriteObjectResponse;
use Google\Storage\V2\WriteObjectSpec;

/**
 * Service Description: Manages Google Cloud Storage resources.
 *
 * This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods. Sample code to get started:
 *
 * ```
 * $storageClient = new StorageClient();
 * try {
 *     $uploadId = 'upload_id';
 *     $response = $storageClient->queryWriteStatus($uploadId);
 * } finally {
 *     $storageClient->close();
 * }
 * ```
 *
 * Many parameters require resource names to be formatted in a particular way. To
 * assist with these names, this class includes a format method for each type of
 * name, and additionally a parseName method to extract the individual identifiers
 * contained within formatted names that are returned by the API.
 */
class StorageGapicClient
{
    use GapicClientTrait;

    /**
     * The name of the service.
     */
    const SERVICE_NAME = 'google.storage.v2.Storage';

    /**
     * The default address of the service.
     */
    const SERVICE_ADDRESS = 'storage.googleapis.com';

    /**
     * The default port of the service.
     */
    const DEFAULT_SERVICE_PORT = 443;

    /**
     * The name of the code generator, to be included in the agent header.
     */
    const CODEGEN_NAME = 'gapic';

    /**
     * The default scopes required by the service.
     */
    public static $serviceScopes = [
        'https://www.googleapis.com/auth/cloud-platform',
        'https://www.googleapis.com/auth/cloud-platform.read-only',
        'https://www.googleapis.com/auth/devstorage.full_control',
        'https://www.googleapis.com/auth/devstorage.read_only',
        'https://www.googleapis.com/auth/devstorage.read_write',
    ];

    private static $projectNameTemplate;

    private static $pathTemplateMap;

    private static function getClientDefaults()
    {
        return [
            'serviceName' => self::SERVICE_NAME,
            'serviceAddress' => self::SERVICE_ADDRESS . ':' . self::DEFAULT_SERVICE_PORT,
            'clientConfig' => __DIR__ . '/../resources/storage_client_config.json',
            'descriptorsConfigPath' => __DIR__ . '/../resources/storage_descriptor_config.php',
            'gcpApiConfigPath' => __DIR__ . '/../resources/storage_grpc_config.json',
            'credentialsConfig' => [
                'defaultScopes' => self::$serviceScopes,
            ],
            'transportConfig' => [
                'rest' => [
                    'restClientConfigPath' => __DIR__ . '/../resources/storage_rest_client_config.php',
                ],
            ],
        ];
    }

    private static function getProjectNameTemplate()
    {
        if (self::$projectNameTemplate == null) {
            self::$projectNameTemplate = new PathTemplate('projects/{project}');
        }

        return self::$projectNameTemplate;
    }

    private static function getPathTemplateMap()
    {
        if (self::$pathTemplateMap == null) {
            self::$pathTemplateMap = [
                'project' => self::getProjectNameTemplate(),
            ];
        }

        return self::$pathTemplateMap;
    }

    /**
     * Formats a string containing the fully-qualified path to represent a project
     * resource.
     *
     * @param string $project
     *
     * @return string The formatted project resource.
     */
    public static function projectName($project)
    {
        return self::getProjectNameTemplate()->render([
            'project' => $project,
        ]);
    }

    /**
     * Parses a formatted name string and returns an associative array of the components in the name.
     * The following name formats are supported:
     * Template: Pattern
     * - project: projects/{project}
     *
     * The optional $template argument can be supplied to specify a particular pattern,
     * and must match one of the templates listed above. If no $template argument is
     * provided, or if the $template argument does not match one of the templates
     * listed, then parseName will check each of the supported templates, and return
     * the first match.
     *
     * @param string $formattedName The formatted name string
     * @param string $template      Optional name of template to match
     *
     * @return array An associative array from name component IDs to component values.
     *
     * @throws ValidationException If $formattedName could not be matched.
     */
    public static function parseName($formattedName, $template = null)
    {
        $templateMap = self::getPathTemplateMap();
        if ($template) {
            if (!isset($templateMap[$template])) {
                throw new ValidationException("Template name $template does not exist");
            }

            return $templateMap[$template]->match($formattedName);
        }

        foreach ($templateMap as $templateName => $pathTemplate) {
            try {
                return $pathTemplate->match($formattedName);
            } catch (ValidationException $ex) {
                // Swallow the exception to continue trying other path templates
            }
        }

        throw new ValidationException("Input did not match any known format. Input: $formattedName");
    }

    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *
     *     @type string $serviceAddress
     *           The address of the API remote host. May optionally include the port, formatted
     *           as "<uri>:<port>". Default 'storage.googleapis.com:443'.
     *     @type string|array|FetchAuthTokenInterface|CredentialsWrapper $credentials
     *           The credentials to be used by the client to authorize API calls. This option
     *           accepts either a path to a credentials file, or a decoded credentials file as a
     *           PHP array.
     *           *Advanced usage*: In addition, this option can also accept a pre-constructed
     *           {@see \Google\Auth\FetchAuthTokenInterface} object or
     *           {@see \Google\ApiCore\CredentialsWrapper} object. Note that when one of these
     *           objects are provided, any settings in $credentialsConfig will be ignored.
     *     @type array $credentialsConfig
     *           Options used to configure credentials, including auth token caching, for the
     *           client. For a full list of supporting configuration options, see
     *           {@see \Google\ApiCore\CredentialsWrapper::build()} .
     *     @type bool $disableRetries
     *           Determines whether or not retries defined by the client configuration should be
     *           disabled. Defaults to `false`.
     *     @type string|array $clientConfig
     *           Client method configuration, including retry settings. This option can be either
     *           a path to a JSON file, or a PHP array containing the decoded JSON data. By
     *           default this settings points to the default client config file, which is
     *           provided in the resources folder.
     *     @type string|TransportInterface $transport
     *           The transport used for executing network requests. May be either the string
     *           `rest` or `grpc`. Defaults to `grpc` if gRPC support is detected on the system.
     *           *Advanced usage*: Additionally, it is possible to pass in an already
     *           instantiated {@see \Google\ApiCore\Transport\TransportInterface} object. Note
     *           that when this object is provided, any settings in $transportConfig, and any
     *           $serviceAddress setting, will be ignored.
     *     @type array $transportConfig
     *           Configuration options that will be used to construct the transport. Options for
     *           each supported transport type should be passed in a key for that transport. For
     *           example:
     *           $transportConfig = [
     *               'grpc' => [...],
     *               'rest' => [...],
     *           ];
     *           See the {@see \Google\ApiCore\Transport\GrpcTransport::build()} and
     *           {@see \Google\ApiCore\Transport\RestTransport::build()} methods for the
     *           supported options.
     *     @type callable $clientCertSource
     *           A callable which returns the client cert as a string. This can be used to
     *           provide a certificate and private key to the transport layer for mTLS.
     * }
     *
     * @throws ValidationException
     */
    public function __construct(array $options = [])
    {
        $clientOptions = $this->buildClientOptions($options);
        $this->setClientOptions($clientOptions);
    }

    /**
     * Determines the `persisted_size` for an object that is being written, which
     * can then be used as the `write_offset` for the next `Write()` call.
     *
     * If the object does not exist (i.e., the object has been deleted, or the
     * first `Write()` has not yet reached the service), this method returns the
     * error `NOT_FOUND`.
     *
     * The client **may** call `QueryWriteStatus()` at any time to determine how
     * much data has been processed for this object. This is useful if the
     * client is buffering data and needs to know which data can be safely
     * evicted. For any sequence of `QueryWriteStatus()` calls for a given
     * object name, the sequence of returned `persisted_size` values will be
     * non-decreasing.
     *
     * Sample code:
     * ```
     * $storageClient = new StorageClient();
     * try {
     *     $uploadId = 'upload_id';
     *     $response = $storageClient->queryWriteStatus($uploadId);
     * } finally {
     *     $storageClient->close();
     * }
     * ```
     *
     * @param string $uploadId     Required. The name of the resume token for the object whose write status is being
     *                             requested.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type CommonObjectRequestParams $commonObjectRequestParams
     *           A set of parameters common to Storage API requests concerning an object.
     *     @type CommonRequestParams $commonRequestParams
     *           A set of parameters common to all Storage API requests.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Storage\V2\QueryWriteStatusResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function queryWriteStatus($uploadId, array $optionalArgs = [])
    {
        $request = new QueryWriteStatusRequest();
        $request->setUploadId($uploadId);
        if (isset($optionalArgs['commonObjectRequestParams'])) {
            $request->setCommonObjectRequestParams($optionalArgs['commonObjectRequestParams']);
        }

        if (isset($optionalArgs['commonRequestParams'])) {
            $request->setCommonRequestParams($optionalArgs['commonRequestParams']);
        }

        return $this->startCall('QueryWriteStatus', QueryWriteStatusResponse::class, $optionalArgs, $request)->wait();
    }

    /**
     * Reads an object's data.
     *
     * Sample code:
     * ```
     * $storageClient = new StorageClient();
     * try {
     *     // Read all responses until the stream is complete
     *     $stream = $storageClient->readObject();
     *     foreach ($stream->readAll() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $storageClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $bucket
     *           The name of the bucket containing the object to read.
     *     @type string $object
     *           The name of the object to read.
     *     @type int $generation
     *           If present, selects a specific revision of this object (as opposed
     *           to the latest version, the default).
     *     @type int $readOffset
     *           The offset for the first byte to return in the read, relative to the start
     *           of the object.
     *
     *           A negative `read_offset` value will be interpreted as the number of bytes
     *           back from the end of the object to be returned. For example, if an object's
     *           length is 15 bytes, a ReadObjectRequest with `read_offset` = -5 and
     *           `read_limit` = 3 would return bytes 10 through 12 of the object. Requesting
     *           a negative offset whose magnitude is larger than the size of the object
     *           will result in an error.
     *     @type int $readLimit
     *           The maximum number of `data` bytes the server is allowed to return in the
     *           sum of all `Object` messages. A `read_limit` of zero indicates that there
     *           is no limit, and a negative `read_limit` will cause an error.
     *
     *           If the stream returns fewer bytes than allowed by the `read_limit` and no
     *           error occurred, the stream includes all data from the `read_offset` to the
     *           end of the resource.
     *     @type int $ifGenerationMatch
     *           Makes the operation conditional on whether the object's current generation
     *           matches the given value. Setting to 0 makes the operation succeed only if
     *           there are no live versions of the object.
     *     @type int $ifGenerationNotMatch
     *           Makes the operation conditional on whether the object's current generation
     *           does not match the given value. If no live object exists, the precondition
     *           fails. Setting to 0 makes the operation succeed only if there is a live
     *           version of the object.
     *     @type int $ifMetagenerationMatch
     *           Makes the operation conditional on whether the object's current
     *           metageneration matches the given value.
     *     @type int $ifMetagenerationNotMatch
     *           Makes the operation conditional on whether the object's current
     *           metageneration does not match the given value.
     *     @type CommonObjectRequestParams $commonObjectRequestParams
     *           A set of parameters common to Storage API requests concerning an object.
     *     @type CommonRequestParams $commonRequestParams
     *           A set of parameters common to all Storage API requests.
     *     @type FieldMask $readMask
     *           Mask specifying which fields to read.
     *           The checksummed_data field and its children will always be present.
     *           If no mask is specified, will default to all fields except metadata.owner
     *           and metadata.acl.
     *           * may be used to mean "all fields".
     *     @type int $timeoutMillis
     *           Timeout to use for this call.
     * }
     *
     * @return \Google\ApiCore\ServerStream
     *
     * @throws ApiException if the remote call fails
     */
    public function readObject(array $optionalArgs = [])
    {
        $request = new ReadObjectRequest();
        if (isset($optionalArgs['bucket'])) {
            $request->setBucket($optionalArgs['bucket']);
        }

        if (isset($optionalArgs['object'])) {
            $request->setObject($optionalArgs['object']);
        }

        if (isset($optionalArgs['generation'])) {
            $request->setGeneration($optionalArgs['generation']);
        }

        if (isset($optionalArgs['readOffset'])) {
            $request->setReadOffset($optionalArgs['readOffset']);
        }

        if (isset($optionalArgs['readLimit'])) {
            $request->setReadLimit($optionalArgs['readLimit']);
        }

        if (isset($optionalArgs['ifGenerationMatch'])) {
            $request->setIfGenerationMatch($optionalArgs['ifGenerationMatch']);
        }

        if (isset($optionalArgs['ifGenerationNotMatch'])) {
            $request->setIfGenerationNotMatch($optionalArgs['ifGenerationNotMatch']);
        }

        if (isset($optionalArgs['ifMetagenerationMatch'])) {
            $request->setIfMetagenerationMatch($optionalArgs['ifMetagenerationMatch']);
        }

        if (isset($optionalArgs['ifMetagenerationNotMatch'])) {
            $request->setIfMetagenerationNotMatch($optionalArgs['ifMetagenerationNotMatch']);
        }

        if (isset($optionalArgs['commonObjectRequestParams'])) {
            $request->setCommonObjectRequestParams($optionalArgs['commonObjectRequestParams']);
        }

        if (isset($optionalArgs['commonRequestParams'])) {
            $request->setCommonRequestParams($optionalArgs['commonRequestParams']);
        }

        if (isset($optionalArgs['readMask'])) {
            $request->setReadMask($optionalArgs['readMask']);
        }

        return $this->startCall('ReadObject', ReadObjectResponse::class, $optionalArgs, $request, Call::SERVER_STREAMING_CALL);
    }

    /**
     * Starts a resumable write. How long the write operation remains valid, and
     * what happens when the write operation becomes invalid, are
     * service-dependent.
     *
     * Sample code:
     * ```
     * $storageClient = new StorageClient();
     * try {
     *     $response = $storageClient->startResumableWrite();
     * } finally {
     *     $storageClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type WriteObjectSpec $writeObjectSpec
     *           The destination bucket, object, and metadata, as well as any preconditions.
     *     @type CommonObjectRequestParams $commonObjectRequestParams
     *           A set of parameters common to Storage API requests concerning an object.
     *     @type CommonRequestParams $commonRequestParams
     *           A set of parameters common to all Storage API requests.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Storage\V2\StartResumableWriteResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function startResumableWrite(array $optionalArgs = [])
    {
        $request = new StartResumableWriteRequest();
        if (isset($optionalArgs['writeObjectSpec'])) {
            $request->setWriteObjectSpec($optionalArgs['writeObjectSpec']);
        }

        if (isset($optionalArgs['commonObjectRequestParams'])) {
            $request->setCommonObjectRequestParams($optionalArgs['commonObjectRequestParams']);
        }

        if (isset($optionalArgs['commonRequestParams'])) {
            $request->setCommonRequestParams($optionalArgs['commonRequestParams']);
        }

        return $this->startCall('StartResumableWrite', StartResumableWriteResponse::class, $optionalArgs, $request)->wait();
    }

    /**
     * Stores a new object and metadata.
     *
     * An object can be written either in a single message stream or in a
     * resumable sequence of message streams. To write using a single stream,
     * the client should include in the first message of the stream an
     * `WriteObjectSpec` describing the destination bucket, object, and any
     * preconditions. Additionally, the final message must set 'finish_write' to
     * true, or else it is an error.
     *
     * For a resumable write, the client should instead call
     * `StartResumableWrite()` and provide that method an `WriteObjectSpec.`
     * They should then attach the returned `upload_id` to the first message of
     * each following call to `Create`. If there is an error or the connection is
     * broken during the resumable `Create()`, the client should check the status
     * of the `Create()` by calling `QueryWriteStatus()` and continue writing from
     * the returned `persisted_size`. This may be less than the amount of data the
     * client previously sent.
     *
     * The service will not view the object as complete until the client has
     * sent a `WriteObjectRequest` with `finish_write` set to `true`. Sending any
     * requests on a stream after sending a request with `finish_write` set to
     * `true` will cause an error. The client **should** check the response it
     * receives to determine how much data the service was able to commit and
     * whether the service views the object as complete.
     *
     * Sample code:
     * ```
     * $storageClient = new StorageClient();
     * try {
     *     $writeOffset = 0;
     *     $request = new WriteObjectRequest();
     *     $request->setWriteOffset($writeOffset);
     *     // Write data to server and wait for a response
     *     $requests = [
     *         $request,
     *     ];
     *     $stream = $storageClient->writeObject();
     *     $result = $stream->writeAllAndReadResponse($requests);
     *     // doSomethingWith($result)
     *     // Alternatively:
     *     // Write data as it becomes available, then wait for a response
     *     $requests = [
     *         $request,
     *     ];
     *     $stream = $storageClient->writeObject();
     *     foreach ($requests as $request) {
     *         $stream->write($request);
     *     }
     *     $result = $stream->readResponse();
     *     // doSomethingWith($result)
     * } finally {
     *     $storageClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type int $timeoutMillis
     *           Timeout to use for this call.
     * }
     *
     * @return \Google\ApiCore\ClientStream
     *
     * @throws ApiException if the remote call fails
     */
    public function writeObject(array $optionalArgs = [])
    {
        return $this->startCall('WriteObject', WriteObjectResponse::class, $optionalArgs, null, Call::CLIENT_STREAMING_CALL);
    }
}
