# frozen_string_literal: true

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "helper"

require "gapic/grpc/service_stub"

require "google/streetview/publish/v1/streetview_publish_pb"
require "google/streetview/publish/v1/streetview_publish_services_pb"
require "google/streetview/publish/v1/street_view_publish_service"

class ::Google::Streetview::Publish::V1::StreetViewPublishService::ClientTest < Minitest::Test
  class ClientStub
    attr_accessor :call_rpc_count, :requests

    def initialize response, operation, &block
      @response = response
      @operation = operation
      @block = block
      @call_rpc_count = 0
      @requests = []
    end

    def call_rpc *args, **kwargs
      @call_rpc_count += 1

      @requests << @block&.call(*args, **kwargs)

      yield @response, @operation if block_given?

      @response
    end
  end

  def test_start_upload
    # Create GRPC objects.
    grpc_response = ::Google::Streetview::Publish::V1::UploadRef.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.

    start_upload_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :start_upload, name
      assert_kind_of ::Google::Protobuf::Empty, request
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, start_upload_client_stub do
      # Create client
      client = ::Google::Streetview::Publish::V1::StreetViewPublishService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.start_upload({}) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.start_upload ::Google::Protobuf::Empty.new() do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.start_upload({}, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.start_upload(::Google::Protobuf::Empty.new(), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 4, start_upload_client_stub.call_rpc_count
    end
  end

  def test_create_photo
    # Create GRPC objects.
    grpc_response = ::Google::Streetview::Publish::V1::Photo.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    photo = {}

    create_photo_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :create_photo, name
      assert_kind_of ::Google::Streetview::Publish::V1::CreatePhotoRequest, request
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Streetview::Publish::V1::Photo), request["photo"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, create_photo_client_stub do
      # Create client
      client = ::Google::Streetview::Publish::V1::StreetViewPublishService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.create_photo({ photo: photo }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.create_photo photo: photo do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.create_photo ::Google::Streetview::Publish::V1::CreatePhotoRequest.new(photo: photo) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.create_photo({ photo: photo }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.create_photo(::Google::Streetview::Publish::V1::CreatePhotoRequest.new(photo: photo), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, create_photo_client_stub.call_rpc_count
    end
  end

  def test_get_photo
    # Create GRPC objects.
    grpc_response = ::Google::Streetview::Publish::V1::Photo.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    photo_id = "hello world"
    view = :BASIC
    language_code = "hello world"

    get_photo_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :get_photo, name
      assert_kind_of ::Google::Streetview::Publish::V1::GetPhotoRequest, request
      assert_equal "hello world", request["photo_id"]
      assert_equal :BASIC, request["view"]
      assert_equal "hello world", request["language_code"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, get_photo_client_stub do
      # Create client
      client = ::Google::Streetview::Publish::V1::StreetViewPublishService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.get_photo({ photo_id: photo_id, view: view, language_code: language_code }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.get_photo photo_id: photo_id, view: view, language_code: language_code do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.get_photo ::Google::Streetview::Publish::V1::GetPhotoRequest.new(photo_id: photo_id, view: view, language_code: language_code) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.get_photo({ photo_id: photo_id, view: view, language_code: language_code }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.get_photo(::Google::Streetview::Publish::V1::GetPhotoRequest.new(photo_id: photo_id, view: view, language_code: language_code), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, get_photo_client_stub.call_rpc_count
    end
  end

  def test_batch_get_photos
    # Create GRPC objects.
    grpc_response = ::Google::Streetview::Publish::V1::BatchGetPhotosResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    photo_ids = ["hello world"]
    view = :BASIC
    language_code = "hello world"

    batch_get_photos_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :batch_get_photos, name
      assert_kind_of ::Google::Streetview::Publish::V1::BatchGetPhotosRequest, request
      assert_equal ["hello world"], request["photo_ids"]
      assert_equal :BASIC, request["view"]
      assert_equal "hello world", request["language_code"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, batch_get_photos_client_stub do
      # Create client
      client = ::Google::Streetview::Publish::V1::StreetViewPublishService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.batch_get_photos({ photo_ids: photo_ids, view: view, language_code: language_code }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.batch_get_photos photo_ids: photo_ids, view: view, language_code: language_code do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.batch_get_photos ::Google::Streetview::Publish::V1::BatchGetPhotosRequest.new(photo_ids: photo_ids, view: view, language_code: language_code) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.batch_get_photos({ photo_ids: photo_ids, view: view, language_code: language_code }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.batch_get_photos(::Google::Streetview::Publish::V1::BatchGetPhotosRequest.new(photo_ids: photo_ids, view: view, language_code: language_code), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, batch_get_photos_client_stub.call_rpc_count
    end
  end

  def test_list_photos
    # Create GRPC objects.
    grpc_response = ::Google::Streetview::Publish::V1::ListPhotosResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    view = :BASIC
    page_size = 42
    page_token = "hello world"
    filter = "hello world"
    language_code = "hello world"

    list_photos_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :list_photos, name
      assert_kind_of ::Google::Streetview::Publish::V1::ListPhotosRequest, request
      assert_equal :BASIC, request["view"]
      assert_equal 42, request["page_size"]
      assert_equal "hello world", request["page_token"]
      assert_equal "hello world", request["filter"]
      assert_equal "hello world", request["language_code"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, list_photos_client_stub do
      # Create client
      client = ::Google::Streetview::Publish::V1::StreetViewPublishService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.list_photos({ view: view, page_size: page_size, page_token: page_token, filter: filter, language_code: language_code }) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.list_photos view: view, page_size: page_size, page_token: page_token, filter: filter, language_code: language_code do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.list_photos ::Google::Streetview::Publish::V1::ListPhotosRequest.new(view: view, page_size: page_size, page_token: page_token, filter: filter, language_code: language_code) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.list_photos({ view: view, page_size: page_size, page_token: page_token, filter: filter, language_code: language_code }, grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.list_photos(::Google::Streetview::Publish::V1::ListPhotosRequest.new(view: view, page_size: page_size, page_token: page_token, filter: filter, language_code: language_code), grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, list_photos_client_stub.call_rpc_count
    end
  end

  def test_update_photo
    # Create GRPC objects.
    grpc_response = ::Google::Streetview::Publish::V1::Photo.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    photo = {}
    update_mask = {}

    update_photo_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :update_photo, name
      assert_kind_of ::Google::Streetview::Publish::V1::UpdatePhotoRequest, request
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Streetview::Publish::V1::Photo), request["photo"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::FieldMask), request["update_mask"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, update_photo_client_stub do
      # Create client
      client = ::Google::Streetview::Publish::V1::StreetViewPublishService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.update_photo({ photo: photo, update_mask: update_mask }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.update_photo photo: photo, update_mask: update_mask do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.update_photo ::Google::Streetview::Publish::V1::UpdatePhotoRequest.new(photo: photo, update_mask: update_mask) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.update_photo({ photo: photo, update_mask: update_mask }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.update_photo(::Google::Streetview::Publish::V1::UpdatePhotoRequest.new(photo: photo, update_mask: update_mask), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, update_photo_client_stub.call_rpc_count
    end
  end

  def test_batch_update_photos
    # Create GRPC objects.
    grpc_response = ::Google::Streetview::Publish::V1::BatchUpdatePhotosResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    update_photo_requests = [{}]

    batch_update_photos_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :batch_update_photos, name
      assert_kind_of ::Google::Streetview::Publish::V1::BatchUpdatePhotosRequest, request
      assert_kind_of ::Google::Streetview::Publish::V1::UpdatePhotoRequest, request["update_photo_requests"].first
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, batch_update_photos_client_stub do
      # Create client
      client = ::Google::Streetview::Publish::V1::StreetViewPublishService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.batch_update_photos({ update_photo_requests: update_photo_requests }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.batch_update_photos update_photo_requests: update_photo_requests do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.batch_update_photos ::Google::Streetview::Publish::V1::BatchUpdatePhotosRequest.new(update_photo_requests: update_photo_requests) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.batch_update_photos({ update_photo_requests: update_photo_requests }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.batch_update_photos(::Google::Streetview::Publish::V1::BatchUpdatePhotosRequest.new(update_photo_requests: update_photo_requests), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, batch_update_photos_client_stub.call_rpc_count
    end
  end

  def test_delete_photo
    # Create GRPC objects.
    grpc_response = ::Google::Protobuf::Empty.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    photo_id = "hello world"

    delete_photo_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :delete_photo, name
      assert_kind_of ::Google::Streetview::Publish::V1::DeletePhotoRequest, request
      assert_equal "hello world", request["photo_id"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, delete_photo_client_stub do
      # Create client
      client = ::Google::Streetview::Publish::V1::StreetViewPublishService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.delete_photo({ photo_id: photo_id }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.delete_photo photo_id: photo_id do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.delete_photo ::Google::Streetview::Publish::V1::DeletePhotoRequest.new(photo_id: photo_id) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.delete_photo({ photo_id: photo_id }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.delete_photo(::Google::Streetview::Publish::V1::DeletePhotoRequest.new(photo_id: photo_id), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, delete_photo_client_stub.call_rpc_count
    end
  end

  def test_batch_delete_photos
    # Create GRPC objects.
    grpc_response = ::Google::Streetview::Publish::V1::BatchDeletePhotosResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    photo_ids = ["hello world"]

    batch_delete_photos_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :batch_delete_photos, name
      assert_kind_of ::Google::Streetview::Publish::V1::BatchDeletePhotosRequest, request
      assert_equal ["hello world"], request["photo_ids"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, batch_delete_photos_client_stub do
      # Create client
      client = ::Google::Streetview::Publish::V1::StreetViewPublishService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.batch_delete_photos({ photo_ids: photo_ids }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.batch_delete_photos photo_ids: photo_ids do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.batch_delete_photos ::Google::Streetview::Publish::V1::BatchDeletePhotosRequest.new(photo_ids: photo_ids) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.batch_delete_photos({ photo_ids: photo_ids }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.batch_delete_photos(::Google::Streetview::Publish::V1::BatchDeletePhotosRequest.new(photo_ids: photo_ids), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, batch_delete_photos_client_stub.call_rpc_count
    end
  end

  def test_configure
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure

    client = block_config = config = nil
    Gapic::ServiceStub.stub :new, nil do
      client = ::Google::Streetview::Publish::V1::StreetViewPublishService::Client.new do |config|
        config.credentials = grpc_channel
      end
    end

    config = client.configure do |c|
      block_config = c
    end

    assert_same block_config, config
    assert_kind_of ::Google::Streetview::Publish::V1::StreetViewPublishService::Client::Configuration, config
  end
end
