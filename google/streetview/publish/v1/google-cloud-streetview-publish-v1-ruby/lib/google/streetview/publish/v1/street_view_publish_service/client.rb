# frozen_string_literal: true

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/cloud/errors"
require "google/streetview/publish/v1/streetview_publish_pb"

module Google
  module Streetview
    module Publish
      module V1
        module StreetViewPublishService
          ##
          # Client for the StreetViewPublishService service.
          #
          # Publishes and connects user-contributed photos on Street View.
          #
          class Client
            # @private
            attr_reader :street_view_publish_service_stub

            ##
            # Configure the StreetViewPublishService Client class.
            #
            # See {::Google::Streetview::Publish::V1::StreetViewPublishService::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @example
            #
            #   # Modify the configuration for all StreetViewPublishService clients
            #   ::Google::Streetview::Publish::V1::StreetViewPublishService::Client.configure do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def self.configure
              @configure ||= begin
                namespace = ["Google", "Streetview", "Publish", "V1"]
                parent_config = while namespace.any?
                                  parent_name = namespace.join "::"
                                  parent_const = const_get parent_name
                                  break parent_const.configure if parent_const.respond_to? :configure
                                  namespace.pop
                                end
                default_config = Client::Configuration.new parent_config

                default_config
              end
              yield @configure if block_given?
              @configure
            end

            ##
            # Configure the StreetViewPublishService Client instance.
            #
            # The configuration is set to the derived mode, meaning that values can be changed,
            # but structural changes (adding new fields, etc.) are not allowed. Structural changes
            # should be made on {Client.configure}.
            #
            # See {::Google::Streetview::Publish::V1::StreetViewPublishService::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def configure
              yield @config if block_given?
              @config
            end

            ##
            # Create a new StreetViewPublishService client object.
            #
            # @example
            #
            #   # Create a client using the default configuration
            #   client = ::Google::Streetview::Publish::V1::StreetViewPublishService::Client.new
            #
            #   # Create a client using a custom configuration
            #   client = ::Google::Streetview::Publish::V1::StreetViewPublishService::Client.new do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the StreetViewPublishService client.
            # @yieldparam config [Client::Configuration]
            #
            def initialize
              # These require statements are intentionally placed here to initialize
              # the gRPC module only when it's required.
              # See https://github.com/googleapis/toolkit/issues/446
              require "gapic/grpc"
              require "google/streetview/publish/v1/streetview_publish_services_pb"

              # Create the configuration object
              @config = Configuration.new Client.configure

              # Yield the configuration if needed
              yield @config if block_given?

              # Create credentials
              credentials = @config.credentials
              # Use self-signed JWT if the endpoint is unchanged from default,
              # but only if the default endpoint does not have a region prefix.
              enable_self_signed_jwt = @config.endpoint == Client.configure.endpoint &&
                                       !@config.endpoint.split(".").first.include?("-")
              credentials ||= Credentials.default scope: @config.scope,
                                                  enable_self_signed_jwt: enable_self_signed_jwt
              if credentials.is_a?(::String) || credentials.is_a?(::Hash)
                credentials = Credentials.new credentials, scope: @config.scope
              end
              @quota_project_id = @config.quota_project
              @quota_project_id ||= credentials.quota_project_id if credentials.respond_to? :quota_project_id

              @street_view_publish_service_stub = ::Gapic::ServiceStub.new(
                ::Google::Streetview::Publish::V1::StreetViewPublishService::Stub,
                credentials:  credentials,
                endpoint:     @config.endpoint,
                channel_args: @config.channel_args,
                interceptors: @config.interceptors
              )
            end

            # Service calls

            ##
            # Creates an upload session to start uploading photo bytes. The method uses
            # the upload URL of the returned
            # {::Google::Streetview::Publish::V1::UploadRef UploadRef} to upload the bytes for
            # the {::Google::Streetview::Publish::V1::Photo Photo}.
            #
            # In addition to the photo requirements shown in
            # https://support.google.com/maps/answer/7012050?hl=en&ref_topic=6275604,
            # the photo must meet the following requirements:
            #
            # * Photo Sphere XMP metadata must be included in the photo medadata. See
            # https://developers.google.com/streetview/spherical-metadata for the
            # required fields.
            # * The pixel size of the photo must meet the size requirements listed in
            # https://support.google.com/maps/answer/7012050?hl=en&ref_topic=6275604, and
            # the photo must be a full 360 horizontally.
            #
            # After the upload completes, the method uses
            # {::Google::Streetview::Publish::V1::UploadRef UploadRef} with
            # {::Google::Streetview::Publish::V1::StreetViewPublishService::Client#create_photo CreatePhoto}
            # to create the {::Google::Streetview::Publish::V1::Photo Photo} object entry.
            #
            # @overload start_upload(request, options = nil)
            #   Pass arguments to `start_upload` via a request object, either of type
            #   {::Google::Protobuf::Empty} or an equivalent Hash.
            #
            #   @param request [::Google::Protobuf::Empty, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Streetview::Publish::V1::UploadRef]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Streetview::Publish::V1::UploadRef]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def start_upload request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Protobuf::Empty

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.start_upload.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Publish::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.start_upload.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.start_upload.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @street_view_publish_service_stub.call_rpc :start_upload, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # After the client finishes uploading the photo with the returned
            # {::Google::Streetview::Publish::V1::UploadRef UploadRef},
            # {::Google::Streetview::Publish::V1::StreetViewPublishService::Client#create_photo CreatePhoto}
            # publishes the uploaded {::Google::Streetview::Publish::V1::Photo Photo} to
            # Street View on Google Maps.
            #
            # Currently, the only way to set heading, pitch, and roll in CreatePhoto is
            # through the [Photo Sphere XMP
            # metadata](https://developers.google.com/streetview/spherical-metadata) in
            # the photo bytes. CreatePhoto ignores the `pose.heading`, `pose.pitch`,
            # `pose.roll`, `pose.altitude`, and `pose.level` fields in Pose.
            #
            # This method returns the following error codes:
            #
            # * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] if
            # the request is malformed or if the uploaded photo is not a 360 photo.
            # * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the upload
            # reference does not exist.
            # * [google.rpc.Code.RESOURCE_EXHAUSTED][google.rpc.Code.RESOURCE_EXHAUSTED]
            # if the account has reached the storage limit.
            #
            # @overload create_photo(request, options = nil)
            #   Pass arguments to `create_photo` via a request object, either of type
            #   {::Google::Streetview::Publish::V1::CreatePhotoRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Streetview::Publish::V1::CreatePhotoRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload create_photo(photo: nil)
            #   Pass arguments to `create_photo` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param photo [::Google::Streetview::Publish::V1::Photo, ::Hash]
            #     Required. Photo to create.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Streetview::Publish::V1::Photo]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Streetview::Publish::V1::Photo]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def create_photo request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Streetview::Publish::V1::CreatePhotoRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.create_photo.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Publish::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.create_photo.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.create_photo.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @street_view_publish_service_stub.call_rpc :create_photo, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Gets the metadata of the specified
            # {::Google::Streetview::Publish::V1::Photo Photo}.
            #
            # This method returns the following error codes:
            #
            # * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
            # the requesting user did not create the requested
            # {::Google::Streetview::Publish::V1::Photo Photo}.
            # * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the requested
            # {::Google::Streetview::Publish::V1::Photo Photo} does not exist.
            # * [google.rpc.Code.UNAVAILABLE][google.rpc.Code.UNAVAILABLE] if the
            # requested {::Google::Streetview::Publish::V1::Photo Photo} is still being
            # indexed.
            #
            # @overload get_photo(request, options = nil)
            #   Pass arguments to `get_photo` via a request object, either of type
            #   {::Google::Streetview::Publish::V1::GetPhotoRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Streetview::Publish::V1::GetPhotoRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_photo(photo_id: nil, view: nil, language_code: nil)
            #   Pass arguments to `get_photo` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param photo_id [::String]
            #     Required. ID of the {::Google::Streetview::Publish::V1::Photo Photo}.
            #   @param view [::Google::Streetview::Publish::V1::PhotoView]
            #     Specifies if a download URL for the photo bytes should be returned in the
            #     {::Google::Streetview::Publish::V1::Photo Photo} response.
            #   @param language_code [::String]
            #     The BCP-47 language code, such as "en-US" or "sr-Latn". For more
            #     information, see
            #     http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
            #     If language_code is unspecified, the user's language preference for Google
            #     services is used.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Streetview::Publish::V1::Photo]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Streetview::Publish::V1::Photo]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def get_photo request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Streetview::Publish::V1::GetPhotoRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_photo.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Publish::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "photo_id" => request.photo_id
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get_photo.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_photo.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @street_view_publish_service_stub.call_rpc :get_photo, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Gets the metadata of the specified
            # {::Google::Streetview::Publish::V1::Photo Photo} batch.
            #
            # Note that if
            # {::Google::Streetview::Publish::V1::StreetViewPublishService::Client#batch_get_photos BatchGetPhotos}
            # fails, either critical fields are missing or there is an authentication
            # error. Even if
            # {::Google::Streetview::Publish::V1::StreetViewPublishService::Client#batch_get_photos BatchGetPhotos}
            # succeeds, individual photos in the batch may have failures.
            # These failures are specified in each
            # {::Google::Streetview::Publish::V1::PhotoResponse#status PhotoResponse.status}
            # in
            # {::Google::Streetview::Publish::V1::BatchGetPhotosResponse#results BatchGetPhotosResponse.results}.
            # See
            # {::Google::Streetview::Publish::V1::StreetViewPublishService::Client#get_photo GetPhoto}
            # for specific failures that can occur per photo.
            #
            # @overload batch_get_photos(request, options = nil)
            #   Pass arguments to `batch_get_photos` via a request object, either of type
            #   {::Google::Streetview::Publish::V1::BatchGetPhotosRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Streetview::Publish::V1::BatchGetPhotosRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload batch_get_photos(photo_ids: nil, view: nil, language_code: nil)
            #   Pass arguments to `batch_get_photos` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param photo_ids [::Array<::String>]
            #     Required. IDs of the {::Google::Streetview::Publish::V1::Photo Photos}. HTTP GET
            #     requests require the following syntax for the URL query parameter:
            #     `photoIds=<id1>&photoIds=<id2>&...`.
            #   @param view [::Google::Streetview::Publish::V1::PhotoView]
            #     Specifies if a download URL for the photo bytes should be returned in the
            #     Photo response.
            #   @param language_code [::String]
            #     The BCP-47 language code, such as "en-US" or "sr-Latn". For more
            #     information, see
            #     http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
            #     If language_code is unspecified, the user's language preference for Google
            #     services is used.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Streetview::Publish::V1::BatchGetPhotosResponse]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Streetview::Publish::V1::BatchGetPhotosResponse]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def batch_get_photos request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Streetview::Publish::V1::BatchGetPhotosRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.batch_get_photos.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Publish::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.batch_get_photos.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.batch_get_photos.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @street_view_publish_service_stub.call_rpc :batch_get_photos, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Lists all the {::Google::Streetview::Publish::V1::Photo Photos} that belong to
            # the user.
            #
            # <aside class="note"><b>Note:</b> Recently created photos that are still
            # being indexed are not returned in the response.</aside>
            #
            # @overload list_photos(request, options = nil)
            #   Pass arguments to `list_photos` via a request object, either of type
            #   {::Google::Streetview::Publish::V1::ListPhotosRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Streetview::Publish::V1::ListPhotosRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_photos(view: nil, page_size: nil, page_token: nil, filter: nil, language_code: nil)
            #   Pass arguments to `list_photos` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param view [::Google::Streetview::Publish::V1::PhotoView]
            #     Specifies if a download URL for the photos bytes should be returned in the
            #     Photos response.
            #   @param page_size [::Integer]
            #     The maximum number of photos to return.
            #     `pageSize` must be non-negative. If `pageSize` is zero or is not provided,
            #     the default page size of 100 is used.
            #     The number of photos returned in the response may be less than `pageSize`
            #     if the number of photos that belong to the user is less than `pageSize`.
            #   @param page_token [::String]
            #     The
            #     {::Google::Streetview::Publish::V1::ListPhotosResponse#next_page_token nextPageToken}
            #     value returned from a previous
            #     {::Google::Streetview::Publish::V1::StreetViewPublishService::Client#list_photos ListPhotos}
            #     request, if any.
            #   @param filter [::String]
            #     The filter expression. For example: `placeId=ChIJj61dQgK6j4AR4GeTYWZsKWw`.
            #
            #     The only filter supported at the moment is `placeId`.
            #   @param language_code [::String]
            #     The BCP-47 language code, such as "en-US" or "sr-Latn". For more
            #     information, see
            #     http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
            #     If language_code is unspecified, the user's language preference for Google
            #     services is used.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Streetview::Publish::V1::Photo>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Streetview::Publish::V1::Photo>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def list_photos request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Streetview::Publish::V1::ListPhotosRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_photos.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Publish::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.list_photos.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_photos.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @street_view_publish_service_stub.call_rpc :list_photos, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @street_view_publish_service_stub, :list_photos, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Updates the metadata of a {::Google::Streetview::Publish::V1::Photo Photo}, such
            # as pose, place association, connections, etc. Changing the pixels of a
            # photo is not supported.
            #
            # Only the fields specified in the
            # {::Google::Streetview::Publish::V1::UpdatePhotoRequest#update_mask updateMask}
            # field are used. If `updateMask` is not present, the update applies to all
            # fields.
            #
            # This method returns the following error codes:
            #
            # * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
            # the requesting user did not create the requested photo.
            # * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] if
            # the request is malformed.
            # * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the requested
            # photo does not exist.
            # * [google.rpc.Code.UNAVAILABLE][google.rpc.Code.UNAVAILABLE] if the
            # requested {::Google::Streetview::Publish::V1::Photo Photo} is still being
            # indexed.
            #
            # @overload update_photo(request, options = nil)
            #   Pass arguments to `update_photo` via a request object, either of type
            #   {::Google::Streetview::Publish::V1::UpdatePhotoRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Streetview::Publish::V1::UpdatePhotoRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload update_photo(photo: nil, update_mask: nil)
            #   Pass arguments to `update_photo` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param photo [::Google::Streetview::Publish::V1::Photo, ::Hash]
            #     Required. {::Google::Streetview::Publish::V1::Photo Photo} object containing the
            #     new metadata.
            #   @param update_mask [::Google::Protobuf::FieldMask, ::Hash]
            #     Mask that identifies fields on the photo metadata to update.
            #     If not present, the old {::Google::Streetview::Publish::V1::Photo Photo}
            #     metadata is entirely replaced with the
            #     new {::Google::Streetview::Publish::V1::Photo Photo} metadata in this request.
            #     The update fails if invalid fields are specified. Multiple fields can be
            #     specified in a comma-delimited list.
            #
            #     The following fields are valid:
            #
            #     * `pose.heading`
            #     * `pose.latLngPair`
            #     * `pose.pitch`
            #     * `pose.roll`
            #     * `pose.level`
            #     * `pose.altitude`
            #     * `connections`
            #     * `places`
            #
            #
            #     <aside class="note"><b>Note:</b>  When
            #     {::Google::Streetview::Publish::V1::UpdatePhotoRequest#update_mask updateMask}
            #     contains repeated fields, the entire set of repeated values get replaced
            #     with the new contents. For example, if
            #     {::Google::Streetview::Publish::V1::UpdatePhotoRequest#update_mask updateMask}
            #     contains `connections` and `UpdatePhotoRequest.photo.connections` is empty,
            #     all connections are removed.</aside>
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Streetview::Publish::V1::Photo]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Streetview::Publish::V1::Photo]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def update_photo request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Streetview::Publish::V1::UpdatePhotoRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.update_photo.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Publish::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "photo.photo_id.id" => request.photo.photo_id.id
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.update_photo.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.update_photo.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @street_view_publish_service_stub.call_rpc :update_photo, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Updates the metadata of {::Google::Streetview::Publish::V1::Photo Photos}, such
            # as pose, place association, connections, etc. Changing the pixels of photos
            # is not supported.
            #
            # Note that if
            # {::Google::Streetview::Publish::V1::StreetViewPublishService::Client#batch_update_photos BatchUpdatePhotos}
            # fails, either critical fields are missing or there is an authentication
            # error. Even if
            # {::Google::Streetview::Publish::V1::StreetViewPublishService::Client#batch_update_photos BatchUpdatePhotos}
            # succeeds, individual photos in the batch may have failures.
            # These failures are specified in each
            # {::Google::Streetview::Publish::V1::PhotoResponse#status PhotoResponse.status}
            # in
            # {::Google::Streetview::Publish::V1::BatchUpdatePhotosResponse#results BatchUpdatePhotosResponse.results}.
            # See
            # {::Google::Streetview::Publish::V1::StreetViewPublishService::Client#update_photo UpdatePhoto}
            # for specific failures that can occur per photo.
            #
            # Only the fields specified in
            # {::Google::Streetview::Publish::V1::UpdatePhotoRequest#update_mask updateMask}
            # field are used. If `updateMask` is not present, the update applies to all
            # fields.
            #
            # The number of
            # {::Google::Streetview::Publish::V1::UpdatePhotoRequest UpdatePhotoRequest}
            # messages in a
            # {::Google::Streetview::Publish::V1::BatchUpdatePhotosRequest BatchUpdatePhotosRequest}
            # must not exceed 20.
            #
            # <aside class="note"><b>Note:</b> To update
            # {::Google::Streetview::Publish::V1::Pose#altitude Pose.altitude},
            # {::Google::Streetview::Publish::V1::Pose#lat_lng_pair Pose.latLngPair} has to be
            # filled as well. Otherwise, the request will fail.</aside>
            #
            # @overload batch_update_photos(request, options = nil)
            #   Pass arguments to `batch_update_photos` via a request object, either of type
            #   {::Google::Streetview::Publish::V1::BatchUpdatePhotosRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Streetview::Publish::V1::BatchUpdatePhotosRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload batch_update_photos(update_photo_requests: nil)
            #   Pass arguments to `batch_update_photos` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param update_photo_requests [::Array<::Google::Streetview::Publish::V1::UpdatePhotoRequest, ::Hash>]
            #     Required. List of
            #     {::Google::Streetview::Publish::V1::UpdatePhotoRequest UpdatePhotoRequests}.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Streetview::Publish::V1::BatchUpdatePhotosResponse]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Streetview::Publish::V1::BatchUpdatePhotosResponse]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def batch_update_photos request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Streetview::Publish::V1::BatchUpdatePhotosRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.batch_update_photos.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Publish::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.batch_update_photos.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.batch_update_photos.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @street_view_publish_service_stub.call_rpc :batch_update_photos, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Deletes a {::Google::Streetview::Publish::V1::Photo Photo} and its metadata.
            #
            # This method returns the following error codes:
            #
            # * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
            # the requesting user did not create the requested photo.
            # * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the photo ID
            # does not exist.
            #
            # @overload delete_photo(request, options = nil)
            #   Pass arguments to `delete_photo` via a request object, either of type
            #   {::Google::Streetview::Publish::V1::DeletePhotoRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Streetview::Publish::V1::DeletePhotoRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload delete_photo(photo_id: nil)
            #   Pass arguments to `delete_photo` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param photo_id [::String]
            #     Required. ID of the {::Google::Streetview::Publish::V1::Photo Photo}.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Protobuf::Empty]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Protobuf::Empty]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def delete_photo request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Streetview::Publish::V1::DeletePhotoRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.delete_photo.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Publish::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "photo_id" => request.photo_id
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.delete_photo.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.delete_photo.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @street_view_publish_service_stub.call_rpc :delete_photo, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Deletes a list of {::Google::Streetview::Publish::V1::Photo Photos} and their
            # metadata.
            #
            # Note that if
            # {::Google::Streetview::Publish::V1::StreetViewPublishService::Client#batch_delete_photos BatchDeletePhotos}
            # fails, either critical fields are missing or there was an authentication
            # error. Even if
            # {::Google::Streetview::Publish::V1::StreetViewPublishService::Client#batch_delete_photos BatchDeletePhotos}
            # succeeds, individual photos in the batch may have failures.
            # These failures are specified in each
            # {::Google::Streetview::Publish::V1::PhotoResponse#status PhotoResponse.status}
            # in
            # {::Google::Streetview::Publish::V1::BatchDeletePhotosResponse#status BatchDeletePhotosResponse.results}.
            # See
            # {::Google::Streetview::Publish::V1::StreetViewPublishService::Client#delete_photo DeletePhoto}
            # for specific failures that can occur per photo.
            #
            # @overload batch_delete_photos(request, options = nil)
            #   Pass arguments to `batch_delete_photos` via a request object, either of type
            #   {::Google::Streetview::Publish::V1::BatchDeletePhotosRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Streetview::Publish::V1::BatchDeletePhotosRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload batch_delete_photos(photo_ids: nil)
            #   Pass arguments to `batch_delete_photos` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param photo_ids [::Array<::String>]
            #     Required. IDs of the {::Google::Streetview::Publish::V1::Photo Photos}. HTTP
            #     GET requests require the following syntax for the URL query parameter:
            #     `photoIds=<id1>&photoIds=<id2>&...`.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Streetview::Publish::V1::BatchDeletePhotosResponse]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Streetview::Publish::V1::BatchDeletePhotosResponse]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def batch_delete_photos request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Streetview::Publish::V1::BatchDeletePhotosRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.batch_delete_photos.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Publish::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.batch_delete_photos.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.batch_delete_photos.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @street_view_publish_service_stub.call_rpc :batch_delete_photos, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Configuration class for the StreetViewPublishService API.
            #
            # This class represents the configuration for StreetViewPublishService,
            # providing control over timeouts, retry behavior, logging, transport
            # parameters, and other low-level controls. Certain parameters can also be
            # applied individually to specific RPCs. See
            # {::Google::Streetview::Publish::V1::StreetViewPublishService::Client::Configuration::Rpcs}
            # for a list of RPCs that can be configured independently.
            #
            # Configuration can be applied globally to all clients, or to a single client
            # on construction.
            #
            # @example
            #
            #   # Modify the global config, setting the timeout for
            #   # start_upload to 20 seconds,
            #   # and all remaining timeouts to 10 seconds.
            #   ::Google::Streetview::Publish::V1::StreetViewPublishService::Client.configure do |config|
            #     config.timeout = 10.0
            #     config.rpcs.start_upload.timeout = 20.0
            #   end
            #
            #   # Apply the above configuration only to a new client.
            #   client = ::Google::Streetview::Publish::V1::StreetViewPublishService::Client.new do |config|
            #     config.timeout = 10.0
            #     config.rpcs.start_upload.timeout = 20.0
            #   end
            #
            # @!attribute [rw] endpoint
            #   The hostname or hostname:port of the service endpoint.
            #   Defaults to `"streetviewpublish.googleapis.com"`.
            #   @return [::String]
            # @!attribute [rw] credentials
            #   Credentials to send with calls. You may provide any of the following types:
            #    *  (`String`) The path to a service account key file in JSON format
            #    *  (`Hash`) A service account key as a Hash
            #    *  (`Google::Auth::Credentials`) A googleauth credentials object
            #       (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
            #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
            #       (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
            #    *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
            #    *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
            #    *  (`nil`) indicating no credentials
            #   @return [::Object]
            # @!attribute [rw] scope
            #   The OAuth scopes
            #   @return [::Array<::String>]
            # @!attribute [rw] lib_name
            #   The library name as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] lib_version
            #   The library version as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] channel_args
            #   Extra parameters passed to the gRPC channel. Note: this is ignored if a
            #   `GRPC::Core::Channel` object is provided as the credential.
            #   @return [::Hash]
            # @!attribute [rw] interceptors
            #   An array of interceptors that are run before calls are executed.
            #   @return [::Array<::GRPC::ClientInterceptor>]
            # @!attribute [rw] timeout
            #   The call timeout in seconds.
            #   @return [::Numeric]
            # @!attribute [rw] metadata
            #   Additional gRPC headers to be sent with the call.
            #   @return [::Hash{::Symbol=>::String}]
            # @!attribute [rw] retry_policy
            #   The retry policy. The value is a hash with the following keys:
            #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
            #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
            #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
            #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
            #       trigger a retry.
            #   @return [::Hash]
            # @!attribute [rw] quota_project
            #   A separate project against which to charge quota.
            #   @return [::String]
            #
            class Configuration
              extend ::Gapic::Config

              config_attr :endpoint,      "streetviewpublish.googleapis.com", ::String
              config_attr :credentials,   nil do |value|
                allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
                allowed += [::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials] if defined? ::GRPC
                allowed.any? { |klass| klass === value }
              end
              config_attr :scope,         nil, ::String, ::Array, nil
              config_attr :lib_name,      nil, ::String, nil
              config_attr :lib_version,   nil, ::String, nil
              config_attr(:channel_args,  { "grpc.service_config_disable_resolution" => 1 }, ::Hash, nil)
              config_attr :interceptors,  nil, ::Array, nil
              config_attr :timeout,       nil, ::Numeric, nil
              config_attr :metadata,      nil, ::Hash, nil
              config_attr :retry_policy,  nil, ::Hash, ::Proc, nil
              config_attr :quota_project, nil, ::String, nil

              # @private
              def initialize parent_config = nil
                @parent_config = parent_config unless parent_config.nil?

                yield self if block_given?
              end

              ##
              # Configurations for individual RPCs
              # @return [Rpcs]
              #
              def rpcs
                @rpcs ||= begin
                  parent_rpcs = nil
                  parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config.respond_to?(:rpcs)
                  Rpcs.new parent_rpcs
                end
              end

              ##
              # Configuration RPC class for the StreetViewPublishService API.
              #
              # Includes fields providing the configuration for each RPC in this service.
              # Each configuration object is of type `Gapic::Config::Method` and includes
              # the following configuration fields:
              #
              #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
              #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
              #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
              #     include the following keys:
              #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
              #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
              #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
              #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
              #         trigger a retry.
              #
              class Rpcs
                ##
                # RPC-specific configuration for `start_upload`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :start_upload
                ##
                # RPC-specific configuration for `create_photo`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :create_photo
                ##
                # RPC-specific configuration for `get_photo`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_photo
                ##
                # RPC-specific configuration for `batch_get_photos`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :batch_get_photos
                ##
                # RPC-specific configuration for `list_photos`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_photos
                ##
                # RPC-specific configuration for `update_photo`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :update_photo
                ##
                # RPC-specific configuration for `batch_update_photos`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :batch_update_photos
                ##
                # RPC-specific configuration for `delete_photo`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :delete_photo
                ##
                # RPC-specific configuration for `batch_delete_photos`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :batch_delete_photos

                # @private
                def initialize parent_rpcs = nil
                  start_upload_config = parent_rpcs.start_upload if parent_rpcs.respond_to? :start_upload
                  @start_upload = ::Gapic::Config::Method.new start_upload_config
                  create_photo_config = parent_rpcs.create_photo if parent_rpcs.respond_to? :create_photo
                  @create_photo = ::Gapic::Config::Method.new create_photo_config
                  get_photo_config = parent_rpcs.get_photo if parent_rpcs.respond_to? :get_photo
                  @get_photo = ::Gapic::Config::Method.new get_photo_config
                  batch_get_photos_config = parent_rpcs.batch_get_photos if parent_rpcs.respond_to? :batch_get_photos
                  @batch_get_photos = ::Gapic::Config::Method.new batch_get_photos_config
                  list_photos_config = parent_rpcs.list_photos if parent_rpcs.respond_to? :list_photos
                  @list_photos = ::Gapic::Config::Method.new list_photos_config
                  update_photo_config = parent_rpcs.update_photo if parent_rpcs.respond_to? :update_photo
                  @update_photo = ::Gapic::Config::Method.new update_photo_config
                  batch_update_photos_config = parent_rpcs.batch_update_photos if parent_rpcs.respond_to? :batch_update_photos
                  @batch_update_photos = ::Gapic::Config::Method.new batch_update_photos_config
                  delete_photo_config = parent_rpcs.delete_photo if parent_rpcs.respond_to? :delete_photo
                  @delete_photo = ::Gapic::Config::Method.new delete_photo_config
                  batch_delete_photos_config = parent_rpcs.batch_delete_photos if parent_rpcs.respond_to? :batch_delete_photos
                  @batch_delete_photos = ::Gapic::Config::Method.new batch_delete_photos_config

                  yield self if block_given?
                end
              end
            end
          end
        end
      end
    end
  end
end
