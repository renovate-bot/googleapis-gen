// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/streetview/publish/v1/streetview_publish.proto
// </auto-generated>
// Original file comments:
// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Streetview.Publish.V1 {
  /// <summary>
  /// Publishes and connects user-contributed photos on Street View.
  /// </summary>
  public static partial class StreetViewPublishService
  {
    static readonly string __ServiceName = "google.streetview.publish.v1.StreetViewPublishService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Streetview.Publish.V1.UploadRef> __Marshaller_google_streetview_publish_v1_UploadRef = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Streetview.Publish.V1.UploadRef.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Streetview.Publish.V1.CreatePhotoRequest> __Marshaller_google_streetview_publish_v1_CreatePhotoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Streetview.Publish.V1.CreatePhotoRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Streetview.Publish.V1.Photo> __Marshaller_google_streetview_publish_v1_Photo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Streetview.Publish.V1.Photo.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Streetview.Publish.V1.GetPhotoRequest> __Marshaller_google_streetview_publish_v1_GetPhotoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Streetview.Publish.V1.GetPhotoRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Streetview.Publish.V1.BatchGetPhotosRequest> __Marshaller_google_streetview_publish_v1_BatchGetPhotosRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Streetview.Publish.V1.BatchGetPhotosRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Streetview.Publish.V1.BatchGetPhotosResponse> __Marshaller_google_streetview_publish_v1_BatchGetPhotosResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Streetview.Publish.V1.BatchGetPhotosResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Streetview.Publish.V1.ListPhotosRequest> __Marshaller_google_streetview_publish_v1_ListPhotosRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Streetview.Publish.V1.ListPhotosRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Streetview.Publish.V1.ListPhotosResponse> __Marshaller_google_streetview_publish_v1_ListPhotosResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Streetview.Publish.V1.ListPhotosResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Streetview.Publish.V1.UpdatePhotoRequest> __Marshaller_google_streetview_publish_v1_UpdatePhotoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Streetview.Publish.V1.UpdatePhotoRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Streetview.Publish.V1.BatchUpdatePhotosRequest> __Marshaller_google_streetview_publish_v1_BatchUpdatePhotosRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Streetview.Publish.V1.BatchUpdatePhotosRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Streetview.Publish.V1.BatchUpdatePhotosResponse> __Marshaller_google_streetview_publish_v1_BatchUpdatePhotosResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Streetview.Publish.V1.BatchUpdatePhotosResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Streetview.Publish.V1.DeletePhotoRequest> __Marshaller_google_streetview_publish_v1_DeletePhotoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Streetview.Publish.V1.DeletePhotoRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Streetview.Publish.V1.BatchDeletePhotosRequest> __Marshaller_google_streetview_publish_v1_BatchDeletePhotosRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Streetview.Publish.V1.BatchDeletePhotosRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Streetview.Publish.V1.BatchDeletePhotosResponse> __Marshaller_google_streetview_publish_v1_BatchDeletePhotosResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Streetview.Publish.V1.BatchDeletePhotosResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Google.Streetview.Publish.V1.UploadRef> __Method_StartUpload = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Google.Streetview.Publish.V1.UploadRef>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartUpload",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_google_streetview_publish_v1_UploadRef);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Streetview.Publish.V1.CreatePhotoRequest, global::Google.Streetview.Publish.V1.Photo> __Method_CreatePhoto = new grpc::Method<global::Google.Streetview.Publish.V1.CreatePhotoRequest, global::Google.Streetview.Publish.V1.Photo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreatePhoto",
        __Marshaller_google_streetview_publish_v1_CreatePhotoRequest,
        __Marshaller_google_streetview_publish_v1_Photo);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Streetview.Publish.V1.GetPhotoRequest, global::Google.Streetview.Publish.V1.Photo> __Method_GetPhoto = new grpc::Method<global::Google.Streetview.Publish.V1.GetPhotoRequest, global::Google.Streetview.Publish.V1.Photo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPhoto",
        __Marshaller_google_streetview_publish_v1_GetPhotoRequest,
        __Marshaller_google_streetview_publish_v1_Photo);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Streetview.Publish.V1.BatchGetPhotosRequest, global::Google.Streetview.Publish.V1.BatchGetPhotosResponse> __Method_BatchGetPhotos = new grpc::Method<global::Google.Streetview.Publish.V1.BatchGetPhotosRequest, global::Google.Streetview.Publish.V1.BatchGetPhotosResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchGetPhotos",
        __Marshaller_google_streetview_publish_v1_BatchGetPhotosRequest,
        __Marshaller_google_streetview_publish_v1_BatchGetPhotosResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Streetview.Publish.V1.ListPhotosRequest, global::Google.Streetview.Publish.V1.ListPhotosResponse> __Method_ListPhotos = new grpc::Method<global::Google.Streetview.Publish.V1.ListPhotosRequest, global::Google.Streetview.Publish.V1.ListPhotosResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListPhotos",
        __Marshaller_google_streetview_publish_v1_ListPhotosRequest,
        __Marshaller_google_streetview_publish_v1_ListPhotosResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Streetview.Publish.V1.UpdatePhotoRequest, global::Google.Streetview.Publish.V1.Photo> __Method_UpdatePhoto = new grpc::Method<global::Google.Streetview.Publish.V1.UpdatePhotoRequest, global::Google.Streetview.Publish.V1.Photo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdatePhoto",
        __Marshaller_google_streetview_publish_v1_UpdatePhotoRequest,
        __Marshaller_google_streetview_publish_v1_Photo);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Streetview.Publish.V1.BatchUpdatePhotosRequest, global::Google.Streetview.Publish.V1.BatchUpdatePhotosResponse> __Method_BatchUpdatePhotos = new grpc::Method<global::Google.Streetview.Publish.V1.BatchUpdatePhotosRequest, global::Google.Streetview.Publish.V1.BatchUpdatePhotosResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchUpdatePhotos",
        __Marshaller_google_streetview_publish_v1_BatchUpdatePhotosRequest,
        __Marshaller_google_streetview_publish_v1_BatchUpdatePhotosResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Streetview.Publish.V1.DeletePhotoRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeletePhoto = new grpc::Method<global::Google.Streetview.Publish.V1.DeletePhotoRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeletePhoto",
        __Marshaller_google_streetview_publish_v1_DeletePhotoRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Streetview.Publish.V1.BatchDeletePhotosRequest, global::Google.Streetview.Publish.V1.BatchDeletePhotosResponse> __Method_BatchDeletePhotos = new grpc::Method<global::Google.Streetview.Publish.V1.BatchDeletePhotosRequest, global::Google.Streetview.Publish.V1.BatchDeletePhotosResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchDeletePhotos",
        __Marshaller_google_streetview_publish_v1_BatchDeletePhotosRequest,
        __Marshaller_google_streetview_publish_v1_BatchDeletePhotosResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Streetview.Publish.V1.StreetviewPublishReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of StreetViewPublishService</summary>
    [grpc::BindServiceMethod(typeof(StreetViewPublishService), "BindService")]
    public abstract partial class StreetViewPublishServiceBase
    {
      /// <summary>
      /// Creates an upload session to start uploading photo bytes. The method uses
      /// the upload URL of the returned
      /// [UploadRef][google.streetview.publish.v1.UploadRef] to upload the bytes for
      /// the [Photo][google.streetview.publish.v1.Photo].
      ///
      /// In addition to the photo requirements shown in
      /// https://support.google.com/maps/answer/7012050?hl=en&amp;ref_topic=6275604,
      /// the photo must meet the following requirements:
      ///
      /// * Photo Sphere XMP metadata must be included in the photo medadata. See
      /// https://developers.google.com/streetview/spherical-metadata for the
      /// required fields.
      /// * The pixel size of the photo must meet the size requirements listed in
      /// https://support.google.com/maps/answer/7012050?hl=en&amp;ref_topic=6275604, and
      /// the photo must be a full 360 horizontally.
      ///
      /// After the upload completes, the method uses
      /// [UploadRef][google.streetview.publish.v1.UploadRef] with
      /// [CreatePhoto][google.streetview.publish.v1.StreetViewPublishService.CreatePhoto]
      /// to create the [Photo][google.streetview.publish.v1.Photo] object entry.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Streetview.Publish.V1.UploadRef> StartUpload(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// After the client finishes uploading the photo with the returned
      /// [UploadRef][google.streetview.publish.v1.UploadRef],
      /// [CreatePhoto][google.streetview.publish.v1.StreetViewPublishService.CreatePhoto]
      /// publishes the uploaded [Photo][google.streetview.publish.v1.Photo] to
      /// Street View on Google Maps.
      ///
      /// Currently, the only way to set heading, pitch, and roll in CreatePhoto is
      /// through the [Photo Sphere XMP
      /// metadata](https://developers.google.com/streetview/spherical-metadata) in
      /// the photo bytes. CreatePhoto ignores the `pose.heading`, `pose.pitch`,
      /// `pose.roll`, `pose.altitude`, and `pose.level` fields in Pose.
      ///
      /// This method returns the following error codes:
      ///
      /// * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] if
      /// the request is malformed or if the uploaded photo is not a 360 photo.
      /// * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the upload
      /// reference does not exist.
      /// * [google.rpc.Code.RESOURCE_EXHAUSTED][google.rpc.Code.RESOURCE_EXHAUSTED]
      /// if the account has reached the storage limit.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Streetview.Publish.V1.Photo> CreatePhoto(global::Google.Streetview.Publish.V1.CreatePhotoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the metadata of the specified
      /// [Photo][google.streetview.publish.v1.Photo].
      ///
      /// This method returns the following error codes:
      ///
      /// * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
      /// the requesting user did not create the requested
      /// [Photo][google.streetview.publish.v1.Photo].
      /// * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the requested
      /// [Photo][google.streetview.publish.v1.Photo] does not exist.
      /// * [google.rpc.Code.UNAVAILABLE][google.rpc.Code.UNAVAILABLE] if the
      /// requested [Photo][google.streetview.publish.v1.Photo] is still being
      /// indexed.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Streetview.Publish.V1.Photo> GetPhoto(global::Google.Streetview.Publish.V1.GetPhotoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the metadata of the specified
      /// [Photo][google.streetview.publish.v1.Photo] batch.
      ///
      /// Note that if
      /// [BatchGetPhotos][google.streetview.publish.v1.StreetViewPublishService.BatchGetPhotos]
      /// fails, either critical fields are missing or there is an authentication
      /// error. Even if
      /// [BatchGetPhotos][google.streetview.publish.v1.StreetViewPublishService.BatchGetPhotos]
      /// succeeds, individual photos in the batch may have failures.
      /// These failures are specified in each
      /// [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
      /// in
      /// [BatchGetPhotosResponse.results][google.streetview.publish.v1.BatchGetPhotosResponse.results].
      /// See
      /// [GetPhoto][google.streetview.publish.v1.StreetViewPublishService.GetPhoto]
      /// for specific failures that can occur per photo.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Streetview.Publish.V1.BatchGetPhotosResponse> BatchGetPhotos(global::Google.Streetview.Publish.V1.BatchGetPhotosRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all the [Photos][google.streetview.publish.v1.Photo] that belong to
      /// the user.
      ///
      /// &lt;aside class="note">&lt;b>Note:&lt;/b> Recently created photos that are still
      /// being indexed are not returned in the response.&lt;/aside>
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Streetview.Publish.V1.ListPhotosResponse> ListPhotos(global::Google.Streetview.Publish.V1.ListPhotosRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the metadata of a [Photo][google.streetview.publish.v1.Photo], such
      /// as pose, place association, connections, etc. Changing the pixels of a
      /// photo is not supported.
      ///
      /// Only the fields specified in the
      /// [updateMask][google.streetview.publish.v1.UpdatePhotoRequest.update_mask]
      /// field are used. If `updateMask` is not present, the update applies to all
      /// fields.
      ///
      /// This method returns the following error codes:
      ///
      /// * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
      /// the requesting user did not create the requested photo.
      /// * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] if
      /// the request is malformed.
      /// * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the requested
      /// photo does not exist.
      /// * [google.rpc.Code.UNAVAILABLE][google.rpc.Code.UNAVAILABLE] if the
      /// requested [Photo][google.streetview.publish.v1.Photo] is still being
      /// indexed.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Streetview.Publish.V1.Photo> UpdatePhoto(global::Google.Streetview.Publish.V1.UpdatePhotoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the metadata of [Photos][google.streetview.publish.v1.Photo], such
      /// as pose, place association, connections, etc. Changing the pixels of photos
      /// is not supported.
      ///
      /// Note that if
      /// [BatchUpdatePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchUpdatePhotos]
      /// fails, either critical fields are missing or there is an authentication
      /// error. Even if
      /// [BatchUpdatePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchUpdatePhotos]
      /// succeeds, individual photos in the batch may have failures.
      /// These failures are specified in each
      /// [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
      /// in
      /// [BatchUpdatePhotosResponse.results][google.streetview.publish.v1.BatchUpdatePhotosResponse.results].
      /// See
      /// [UpdatePhoto][google.streetview.publish.v1.StreetViewPublishService.UpdatePhoto]
      /// for specific failures that can occur per photo.
      ///
      /// Only the fields specified in
      /// [updateMask][google.streetview.publish.v1.UpdatePhotoRequest.update_mask]
      /// field are used. If `updateMask` is not present, the update applies to all
      /// fields.
      ///
      /// The number of
      /// [UpdatePhotoRequest][google.streetview.publish.v1.UpdatePhotoRequest]
      /// messages in a
      /// [BatchUpdatePhotosRequest][google.streetview.publish.v1.BatchUpdatePhotosRequest]
      /// must not exceed 20.
      ///
      /// &lt;aside class="note">&lt;b>Note:&lt;/b> To update
      /// [Pose.altitude][google.streetview.publish.v1.Pose.altitude],
      /// [Pose.latLngPair][google.streetview.publish.v1.Pose.lat_lng_pair] has to be
      /// filled as well. Otherwise, the request will fail.&lt;/aside>
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Streetview.Publish.V1.BatchUpdatePhotosResponse> BatchUpdatePhotos(global::Google.Streetview.Publish.V1.BatchUpdatePhotosRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a [Photo][google.streetview.publish.v1.Photo] and its metadata.
      ///
      /// This method returns the following error codes:
      ///
      /// * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
      /// the requesting user did not create the requested photo.
      /// * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the photo ID
      /// does not exist.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeletePhoto(global::Google.Streetview.Publish.V1.DeletePhotoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a list of [Photos][google.streetview.publish.v1.Photo] and their
      /// metadata.
      ///
      /// Note that if
      /// [BatchDeletePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchDeletePhotos]
      /// fails, either critical fields are missing or there was an authentication
      /// error. Even if
      /// [BatchDeletePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchDeletePhotos]
      /// succeeds, individual photos in the batch may have failures.
      /// These failures are specified in each
      /// [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
      /// in
      /// [BatchDeletePhotosResponse.results][google.streetview.publish.v1.BatchDeletePhotosResponse.status].
      /// See
      /// [DeletePhoto][google.streetview.publish.v1.StreetViewPublishService.DeletePhoto]
      /// for specific failures that can occur per photo.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Streetview.Publish.V1.BatchDeletePhotosResponse> BatchDeletePhotos(global::Google.Streetview.Publish.V1.BatchDeletePhotosRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for StreetViewPublishService</summary>
    public partial class StreetViewPublishServiceClient : grpc::ClientBase<StreetViewPublishServiceClient>
    {
      /// <summary>Creates a new client for StreetViewPublishService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public StreetViewPublishServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for StreetViewPublishService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public StreetViewPublishServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected StreetViewPublishServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected StreetViewPublishServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates an upload session to start uploading photo bytes. The method uses
      /// the upload URL of the returned
      /// [UploadRef][google.streetview.publish.v1.UploadRef] to upload the bytes for
      /// the [Photo][google.streetview.publish.v1.Photo].
      ///
      /// In addition to the photo requirements shown in
      /// https://support.google.com/maps/answer/7012050?hl=en&amp;ref_topic=6275604,
      /// the photo must meet the following requirements:
      ///
      /// * Photo Sphere XMP metadata must be included in the photo medadata. See
      /// https://developers.google.com/streetview/spherical-metadata for the
      /// required fields.
      /// * The pixel size of the photo must meet the size requirements listed in
      /// https://support.google.com/maps/answer/7012050?hl=en&amp;ref_topic=6275604, and
      /// the photo must be a full 360 horizontally.
      ///
      /// After the upload completes, the method uses
      /// [UploadRef][google.streetview.publish.v1.UploadRef] with
      /// [CreatePhoto][google.streetview.publish.v1.StreetViewPublishService.CreatePhoto]
      /// to create the [Photo][google.streetview.publish.v1.Photo] object entry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Streetview.Publish.V1.UploadRef StartUpload(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartUpload(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an upload session to start uploading photo bytes. The method uses
      /// the upload URL of the returned
      /// [UploadRef][google.streetview.publish.v1.UploadRef] to upload the bytes for
      /// the [Photo][google.streetview.publish.v1.Photo].
      ///
      /// In addition to the photo requirements shown in
      /// https://support.google.com/maps/answer/7012050?hl=en&amp;ref_topic=6275604,
      /// the photo must meet the following requirements:
      ///
      /// * Photo Sphere XMP metadata must be included in the photo medadata. See
      /// https://developers.google.com/streetview/spherical-metadata for the
      /// required fields.
      /// * The pixel size of the photo must meet the size requirements listed in
      /// https://support.google.com/maps/answer/7012050?hl=en&amp;ref_topic=6275604, and
      /// the photo must be a full 360 horizontally.
      ///
      /// After the upload completes, the method uses
      /// [UploadRef][google.streetview.publish.v1.UploadRef] with
      /// [CreatePhoto][google.streetview.publish.v1.StreetViewPublishService.CreatePhoto]
      /// to create the [Photo][google.streetview.publish.v1.Photo] object entry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Streetview.Publish.V1.UploadRef StartUpload(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartUpload, null, options, request);
      }
      /// <summary>
      /// Creates an upload session to start uploading photo bytes. The method uses
      /// the upload URL of the returned
      /// [UploadRef][google.streetview.publish.v1.UploadRef] to upload the bytes for
      /// the [Photo][google.streetview.publish.v1.Photo].
      ///
      /// In addition to the photo requirements shown in
      /// https://support.google.com/maps/answer/7012050?hl=en&amp;ref_topic=6275604,
      /// the photo must meet the following requirements:
      ///
      /// * Photo Sphere XMP metadata must be included in the photo medadata. See
      /// https://developers.google.com/streetview/spherical-metadata for the
      /// required fields.
      /// * The pixel size of the photo must meet the size requirements listed in
      /// https://support.google.com/maps/answer/7012050?hl=en&amp;ref_topic=6275604, and
      /// the photo must be a full 360 horizontally.
      ///
      /// After the upload completes, the method uses
      /// [UploadRef][google.streetview.publish.v1.UploadRef] with
      /// [CreatePhoto][google.streetview.publish.v1.StreetViewPublishService.CreatePhoto]
      /// to create the [Photo][google.streetview.publish.v1.Photo] object entry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Streetview.Publish.V1.UploadRef> StartUploadAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartUploadAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an upload session to start uploading photo bytes. The method uses
      /// the upload URL of the returned
      /// [UploadRef][google.streetview.publish.v1.UploadRef] to upload the bytes for
      /// the [Photo][google.streetview.publish.v1.Photo].
      ///
      /// In addition to the photo requirements shown in
      /// https://support.google.com/maps/answer/7012050?hl=en&amp;ref_topic=6275604,
      /// the photo must meet the following requirements:
      ///
      /// * Photo Sphere XMP metadata must be included in the photo medadata. See
      /// https://developers.google.com/streetview/spherical-metadata for the
      /// required fields.
      /// * The pixel size of the photo must meet the size requirements listed in
      /// https://support.google.com/maps/answer/7012050?hl=en&amp;ref_topic=6275604, and
      /// the photo must be a full 360 horizontally.
      ///
      /// After the upload completes, the method uses
      /// [UploadRef][google.streetview.publish.v1.UploadRef] with
      /// [CreatePhoto][google.streetview.publish.v1.StreetViewPublishService.CreatePhoto]
      /// to create the [Photo][google.streetview.publish.v1.Photo] object entry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Streetview.Publish.V1.UploadRef> StartUploadAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartUpload, null, options, request);
      }
      /// <summary>
      /// After the client finishes uploading the photo with the returned
      /// [UploadRef][google.streetview.publish.v1.UploadRef],
      /// [CreatePhoto][google.streetview.publish.v1.StreetViewPublishService.CreatePhoto]
      /// publishes the uploaded [Photo][google.streetview.publish.v1.Photo] to
      /// Street View on Google Maps.
      ///
      /// Currently, the only way to set heading, pitch, and roll in CreatePhoto is
      /// through the [Photo Sphere XMP
      /// metadata](https://developers.google.com/streetview/spherical-metadata) in
      /// the photo bytes. CreatePhoto ignores the `pose.heading`, `pose.pitch`,
      /// `pose.roll`, `pose.altitude`, and `pose.level` fields in Pose.
      ///
      /// This method returns the following error codes:
      ///
      /// * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] if
      /// the request is malformed or if the uploaded photo is not a 360 photo.
      /// * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the upload
      /// reference does not exist.
      /// * [google.rpc.Code.RESOURCE_EXHAUSTED][google.rpc.Code.RESOURCE_EXHAUSTED]
      /// if the account has reached the storage limit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Streetview.Publish.V1.Photo CreatePhoto(global::Google.Streetview.Publish.V1.CreatePhotoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePhoto(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// After the client finishes uploading the photo with the returned
      /// [UploadRef][google.streetview.publish.v1.UploadRef],
      /// [CreatePhoto][google.streetview.publish.v1.StreetViewPublishService.CreatePhoto]
      /// publishes the uploaded [Photo][google.streetview.publish.v1.Photo] to
      /// Street View on Google Maps.
      ///
      /// Currently, the only way to set heading, pitch, and roll in CreatePhoto is
      /// through the [Photo Sphere XMP
      /// metadata](https://developers.google.com/streetview/spherical-metadata) in
      /// the photo bytes. CreatePhoto ignores the `pose.heading`, `pose.pitch`,
      /// `pose.roll`, `pose.altitude`, and `pose.level` fields in Pose.
      ///
      /// This method returns the following error codes:
      ///
      /// * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] if
      /// the request is malformed or if the uploaded photo is not a 360 photo.
      /// * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the upload
      /// reference does not exist.
      /// * [google.rpc.Code.RESOURCE_EXHAUSTED][google.rpc.Code.RESOURCE_EXHAUSTED]
      /// if the account has reached the storage limit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Streetview.Publish.V1.Photo CreatePhoto(global::Google.Streetview.Publish.V1.CreatePhotoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreatePhoto, null, options, request);
      }
      /// <summary>
      /// After the client finishes uploading the photo with the returned
      /// [UploadRef][google.streetview.publish.v1.UploadRef],
      /// [CreatePhoto][google.streetview.publish.v1.StreetViewPublishService.CreatePhoto]
      /// publishes the uploaded [Photo][google.streetview.publish.v1.Photo] to
      /// Street View on Google Maps.
      ///
      /// Currently, the only way to set heading, pitch, and roll in CreatePhoto is
      /// through the [Photo Sphere XMP
      /// metadata](https://developers.google.com/streetview/spherical-metadata) in
      /// the photo bytes. CreatePhoto ignores the `pose.heading`, `pose.pitch`,
      /// `pose.roll`, `pose.altitude`, and `pose.level` fields in Pose.
      ///
      /// This method returns the following error codes:
      ///
      /// * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] if
      /// the request is malformed or if the uploaded photo is not a 360 photo.
      /// * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the upload
      /// reference does not exist.
      /// * [google.rpc.Code.RESOURCE_EXHAUSTED][google.rpc.Code.RESOURCE_EXHAUSTED]
      /// if the account has reached the storage limit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Streetview.Publish.V1.Photo> CreatePhotoAsync(global::Google.Streetview.Publish.V1.CreatePhotoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePhotoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// After the client finishes uploading the photo with the returned
      /// [UploadRef][google.streetview.publish.v1.UploadRef],
      /// [CreatePhoto][google.streetview.publish.v1.StreetViewPublishService.CreatePhoto]
      /// publishes the uploaded [Photo][google.streetview.publish.v1.Photo] to
      /// Street View on Google Maps.
      ///
      /// Currently, the only way to set heading, pitch, and roll in CreatePhoto is
      /// through the [Photo Sphere XMP
      /// metadata](https://developers.google.com/streetview/spherical-metadata) in
      /// the photo bytes. CreatePhoto ignores the `pose.heading`, `pose.pitch`,
      /// `pose.roll`, `pose.altitude`, and `pose.level` fields in Pose.
      ///
      /// This method returns the following error codes:
      ///
      /// * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] if
      /// the request is malformed or if the uploaded photo is not a 360 photo.
      /// * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the upload
      /// reference does not exist.
      /// * [google.rpc.Code.RESOURCE_EXHAUSTED][google.rpc.Code.RESOURCE_EXHAUSTED]
      /// if the account has reached the storage limit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Streetview.Publish.V1.Photo> CreatePhotoAsync(global::Google.Streetview.Publish.V1.CreatePhotoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreatePhoto, null, options, request);
      }
      /// <summary>
      /// Gets the metadata of the specified
      /// [Photo][google.streetview.publish.v1.Photo].
      ///
      /// This method returns the following error codes:
      ///
      /// * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
      /// the requesting user did not create the requested
      /// [Photo][google.streetview.publish.v1.Photo].
      /// * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the requested
      /// [Photo][google.streetview.publish.v1.Photo] does not exist.
      /// * [google.rpc.Code.UNAVAILABLE][google.rpc.Code.UNAVAILABLE] if the
      /// requested [Photo][google.streetview.publish.v1.Photo] is still being
      /// indexed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Streetview.Publish.V1.Photo GetPhoto(global::Google.Streetview.Publish.V1.GetPhotoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPhoto(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the metadata of the specified
      /// [Photo][google.streetview.publish.v1.Photo].
      ///
      /// This method returns the following error codes:
      ///
      /// * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
      /// the requesting user did not create the requested
      /// [Photo][google.streetview.publish.v1.Photo].
      /// * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the requested
      /// [Photo][google.streetview.publish.v1.Photo] does not exist.
      /// * [google.rpc.Code.UNAVAILABLE][google.rpc.Code.UNAVAILABLE] if the
      /// requested [Photo][google.streetview.publish.v1.Photo] is still being
      /// indexed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Streetview.Publish.V1.Photo GetPhoto(global::Google.Streetview.Publish.V1.GetPhotoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPhoto, null, options, request);
      }
      /// <summary>
      /// Gets the metadata of the specified
      /// [Photo][google.streetview.publish.v1.Photo].
      ///
      /// This method returns the following error codes:
      ///
      /// * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
      /// the requesting user did not create the requested
      /// [Photo][google.streetview.publish.v1.Photo].
      /// * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the requested
      /// [Photo][google.streetview.publish.v1.Photo] does not exist.
      /// * [google.rpc.Code.UNAVAILABLE][google.rpc.Code.UNAVAILABLE] if the
      /// requested [Photo][google.streetview.publish.v1.Photo] is still being
      /// indexed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Streetview.Publish.V1.Photo> GetPhotoAsync(global::Google.Streetview.Publish.V1.GetPhotoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPhotoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the metadata of the specified
      /// [Photo][google.streetview.publish.v1.Photo].
      ///
      /// This method returns the following error codes:
      ///
      /// * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
      /// the requesting user did not create the requested
      /// [Photo][google.streetview.publish.v1.Photo].
      /// * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the requested
      /// [Photo][google.streetview.publish.v1.Photo] does not exist.
      /// * [google.rpc.Code.UNAVAILABLE][google.rpc.Code.UNAVAILABLE] if the
      /// requested [Photo][google.streetview.publish.v1.Photo] is still being
      /// indexed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Streetview.Publish.V1.Photo> GetPhotoAsync(global::Google.Streetview.Publish.V1.GetPhotoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPhoto, null, options, request);
      }
      /// <summary>
      /// Gets the metadata of the specified
      /// [Photo][google.streetview.publish.v1.Photo] batch.
      ///
      /// Note that if
      /// [BatchGetPhotos][google.streetview.publish.v1.StreetViewPublishService.BatchGetPhotos]
      /// fails, either critical fields are missing or there is an authentication
      /// error. Even if
      /// [BatchGetPhotos][google.streetview.publish.v1.StreetViewPublishService.BatchGetPhotos]
      /// succeeds, individual photos in the batch may have failures.
      /// These failures are specified in each
      /// [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
      /// in
      /// [BatchGetPhotosResponse.results][google.streetview.publish.v1.BatchGetPhotosResponse.results].
      /// See
      /// [GetPhoto][google.streetview.publish.v1.StreetViewPublishService.GetPhoto]
      /// for specific failures that can occur per photo.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Streetview.Publish.V1.BatchGetPhotosResponse BatchGetPhotos(global::Google.Streetview.Publish.V1.BatchGetPhotosRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchGetPhotos(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the metadata of the specified
      /// [Photo][google.streetview.publish.v1.Photo] batch.
      ///
      /// Note that if
      /// [BatchGetPhotos][google.streetview.publish.v1.StreetViewPublishService.BatchGetPhotos]
      /// fails, either critical fields are missing or there is an authentication
      /// error. Even if
      /// [BatchGetPhotos][google.streetview.publish.v1.StreetViewPublishService.BatchGetPhotos]
      /// succeeds, individual photos in the batch may have failures.
      /// These failures are specified in each
      /// [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
      /// in
      /// [BatchGetPhotosResponse.results][google.streetview.publish.v1.BatchGetPhotosResponse.results].
      /// See
      /// [GetPhoto][google.streetview.publish.v1.StreetViewPublishService.GetPhoto]
      /// for specific failures that can occur per photo.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Streetview.Publish.V1.BatchGetPhotosResponse BatchGetPhotos(global::Google.Streetview.Publish.V1.BatchGetPhotosRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchGetPhotos, null, options, request);
      }
      /// <summary>
      /// Gets the metadata of the specified
      /// [Photo][google.streetview.publish.v1.Photo] batch.
      ///
      /// Note that if
      /// [BatchGetPhotos][google.streetview.publish.v1.StreetViewPublishService.BatchGetPhotos]
      /// fails, either critical fields are missing or there is an authentication
      /// error. Even if
      /// [BatchGetPhotos][google.streetview.publish.v1.StreetViewPublishService.BatchGetPhotos]
      /// succeeds, individual photos in the batch may have failures.
      /// These failures are specified in each
      /// [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
      /// in
      /// [BatchGetPhotosResponse.results][google.streetview.publish.v1.BatchGetPhotosResponse.results].
      /// See
      /// [GetPhoto][google.streetview.publish.v1.StreetViewPublishService.GetPhoto]
      /// for specific failures that can occur per photo.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Streetview.Publish.V1.BatchGetPhotosResponse> BatchGetPhotosAsync(global::Google.Streetview.Publish.V1.BatchGetPhotosRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchGetPhotosAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the metadata of the specified
      /// [Photo][google.streetview.publish.v1.Photo] batch.
      ///
      /// Note that if
      /// [BatchGetPhotos][google.streetview.publish.v1.StreetViewPublishService.BatchGetPhotos]
      /// fails, either critical fields are missing or there is an authentication
      /// error. Even if
      /// [BatchGetPhotos][google.streetview.publish.v1.StreetViewPublishService.BatchGetPhotos]
      /// succeeds, individual photos in the batch may have failures.
      /// These failures are specified in each
      /// [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
      /// in
      /// [BatchGetPhotosResponse.results][google.streetview.publish.v1.BatchGetPhotosResponse.results].
      /// See
      /// [GetPhoto][google.streetview.publish.v1.StreetViewPublishService.GetPhoto]
      /// for specific failures that can occur per photo.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Streetview.Publish.V1.BatchGetPhotosResponse> BatchGetPhotosAsync(global::Google.Streetview.Publish.V1.BatchGetPhotosRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchGetPhotos, null, options, request);
      }
      /// <summary>
      /// Lists all the [Photos][google.streetview.publish.v1.Photo] that belong to
      /// the user.
      ///
      /// &lt;aside class="note">&lt;b>Note:&lt;/b> Recently created photos that are still
      /// being indexed are not returned in the response.&lt;/aside>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Streetview.Publish.V1.ListPhotosResponse ListPhotos(global::Google.Streetview.Publish.V1.ListPhotosRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPhotos(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all the [Photos][google.streetview.publish.v1.Photo] that belong to
      /// the user.
      ///
      /// &lt;aside class="note">&lt;b>Note:&lt;/b> Recently created photos that are still
      /// being indexed are not returned in the response.&lt;/aside>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Streetview.Publish.V1.ListPhotosResponse ListPhotos(global::Google.Streetview.Publish.V1.ListPhotosRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListPhotos, null, options, request);
      }
      /// <summary>
      /// Lists all the [Photos][google.streetview.publish.v1.Photo] that belong to
      /// the user.
      ///
      /// &lt;aside class="note">&lt;b>Note:&lt;/b> Recently created photos that are still
      /// being indexed are not returned in the response.&lt;/aside>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Streetview.Publish.V1.ListPhotosResponse> ListPhotosAsync(global::Google.Streetview.Publish.V1.ListPhotosRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPhotosAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all the [Photos][google.streetview.publish.v1.Photo] that belong to
      /// the user.
      ///
      /// &lt;aside class="note">&lt;b>Note:&lt;/b> Recently created photos that are still
      /// being indexed are not returned in the response.&lt;/aside>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Streetview.Publish.V1.ListPhotosResponse> ListPhotosAsync(global::Google.Streetview.Publish.V1.ListPhotosRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListPhotos, null, options, request);
      }
      /// <summary>
      /// Updates the metadata of a [Photo][google.streetview.publish.v1.Photo], such
      /// as pose, place association, connections, etc. Changing the pixels of a
      /// photo is not supported.
      ///
      /// Only the fields specified in the
      /// [updateMask][google.streetview.publish.v1.UpdatePhotoRequest.update_mask]
      /// field are used. If `updateMask` is not present, the update applies to all
      /// fields.
      ///
      /// This method returns the following error codes:
      ///
      /// * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
      /// the requesting user did not create the requested photo.
      /// * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] if
      /// the request is malformed.
      /// * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the requested
      /// photo does not exist.
      /// * [google.rpc.Code.UNAVAILABLE][google.rpc.Code.UNAVAILABLE] if the
      /// requested [Photo][google.streetview.publish.v1.Photo] is still being
      /// indexed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Streetview.Publish.V1.Photo UpdatePhoto(global::Google.Streetview.Publish.V1.UpdatePhotoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePhoto(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the metadata of a [Photo][google.streetview.publish.v1.Photo], such
      /// as pose, place association, connections, etc. Changing the pixels of a
      /// photo is not supported.
      ///
      /// Only the fields specified in the
      /// [updateMask][google.streetview.publish.v1.UpdatePhotoRequest.update_mask]
      /// field are used. If `updateMask` is not present, the update applies to all
      /// fields.
      ///
      /// This method returns the following error codes:
      ///
      /// * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
      /// the requesting user did not create the requested photo.
      /// * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] if
      /// the request is malformed.
      /// * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the requested
      /// photo does not exist.
      /// * [google.rpc.Code.UNAVAILABLE][google.rpc.Code.UNAVAILABLE] if the
      /// requested [Photo][google.streetview.publish.v1.Photo] is still being
      /// indexed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Streetview.Publish.V1.Photo UpdatePhoto(global::Google.Streetview.Publish.V1.UpdatePhotoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdatePhoto, null, options, request);
      }
      /// <summary>
      /// Updates the metadata of a [Photo][google.streetview.publish.v1.Photo], such
      /// as pose, place association, connections, etc. Changing the pixels of a
      /// photo is not supported.
      ///
      /// Only the fields specified in the
      /// [updateMask][google.streetview.publish.v1.UpdatePhotoRequest.update_mask]
      /// field are used. If `updateMask` is not present, the update applies to all
      /// fields.
      ///
      /// This method returns the following error codes:
      ///
      /// * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
      /// the requesting user did not create the requested photo.
      /// * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] if
      /// the request is malformed.
      /// * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the requested
      /// photo does not exist.
      /// * [google.rpc.Code.UNAVAILABLE][google.rpc.Code.UNAVAILABLE] if the
      /// requested [Photo][google.streetview.publish.v1.Photo] is still being
      /// indexed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Streetview.Publish.V1.Photo> UpdatePhotoAsync(global::Google.Streetview.Publish.V1.UpdatePhotoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePhotoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the metadata of a [Photo][google.streetview.publish.v1.Photo], such
      /// as pose, place association, connections, etc. Changing the pixels of a
      /// photo is not supported.
      ///
      /// Only the fields specified in the
      /// [updateMask][google.streetview.publish.v1.UpdatePhotoRequest.update_mask]
      /// field are used. If `updateMask` is not present, the update applies to all
      /// fields.
      ///
      /// This method returns the following error codes:
      ///
      /// * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
      /// the requesting user did not create the requested photo.
      /// * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] if
      /// the request is malformed.
      /// * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the requested
      /// photo does not exist.
      /// * [google.rpc.Code.UNAVAILABLE][google.rpc.Code.UNAVAILABLE] if the
      /// requested [Photo][google.streetview.publish.v1.Photo] is still being
      /// indexed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Streetview.Publish.V1.Photo> UpdatePhotoAsync(global::Google.Streetview.Publish.V1.UpdatePhotoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdatePhoto, null, options, request);
      }
      /// <summary>
      /// Updates the metadata of [Photos][google.streetview.publish.v1.Photo], such
      /// as pose, place association, connections, etc. Changing the pixels of photos
      /// is not supported.
      ///
      /// Note that if
      /// [BatchUpdatePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchUpdatePhotos]
      /// fails, either critical fields are missing or there is an authentication
      /// error. Even if
      /// [BatchUpdatePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchUpdatePhotos]
      /// succeeds, individual photos in the batch may have failures.
      /// These failures are specified in each
      /// [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
      /// in
      /// [BatchUpdatePhotosResponse.results][google.streetview.publish.v1.BatchUpdatePhotosResponse.results].
      /// See
      /// [UpdatePhoto][google.streetview.publish.v1.StreetViewPublishService.UpdatePhoto]
      /// for specific failures that can occur per photo.
      ///
      /// Only the fields specified in
      /// [updateMask][google.streetview.publish.v1.UpdatePhotoRequest.update_mask]
      /// field are used. If `updateMask` is not present, the update applies to all
      /// fields.
      ///
      /// The number of
      /// [UpdatePhotoRequest][google.streetview.publish.v1.UpdatePhotoRequest]
      /// messages in a
      /// [BatchUpdatePhotosRequest][google.streetview.publish.v1.BatchUpdatePhotosRequest]
      /// must not exceed 20.
      ///
      /// &lt;aside class="note">&lt;b>Note:&lt;/b> To update
      /// [Pose.altitude][google.streetview.publish.v1.Pose.altitude],
      /// [Pose.latLngPair][google.streetview.publish.v1.Pose.lat_lng_pair] has to be
      /// filled as well. Otherwise, the request will fail.&lt;/aside>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Streetview.Publish.V1.BatchUpdatePhotosResponse BatchUpdatePhotos(global::Google.Streetview.Publish.V1.BatchUpdatePhotosRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchUpdatePhotos(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the metadata of [Photos][google.streetview.publish.v1.Photo], such
      /// as pose, place association, connections, etc. Changing the pixels of photos
      /// is not supported.
      ///
      /// Note that if
      /// [BatchUpdatePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchUpdatePhotos]
      /// fails, either critical fields are missing or there is an authentication
      /// error. Even if
      /// [BatchUpdatePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchUpdatePhotos]
      /// succeeds, individual photos in the batch may have failures.
      /// These failures are specified in each
      /// [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
      /// in
      /// [BatchUpdatePhotosResponse.results][google.streetview.publish.v1.BatchUpdatePhotosResponse.results].
      /// See
      /// [UpdatePhoto][google.streetview.publish.v1.StreetViewPublishService.UpdatePhoto]
      /// for specific failures that can occur per photo.
      ///
      /// Only the fields specified in
      /// [updateMask][google.streetview.publish.v1.UpdatePhotoRequest.update_mask]
      /// field are used. If `updateMask` is not present, the update applies to all
      /// fields.
      ///
      /// The number of
      /// [UpdatePhotoRequest][google.streetview.publish.v1.UpdatePhotoRequest]
      /// messages in a
      /// [BatchUpdatePhotosRequest][google.streetview.publish.v1.BatchUpdatePhotosRequest]
      /// must not exceed 20.
      ///
      /// &lt;aside class="note">&lt;b>Note:&lt;/b> To update
      /// [Pose.altitude][google.streetview.publish.v1.Pose.altitude],
      /// [Pose.latLngPair][google.streetview.publish.v1.Pose.lat_lng_pair] has to be
      /// filled as well. Otherwise, the request will fail.&lt;/aside>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Streetview.Publish.V1.BatchUpdatePhotosResponse BatchUpdatePhotos(global::Google.Streetview.Publish.V1.BatchUpdatePhotosRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchUpdatePhotos, null, options, request);
      }
      /// <summary>
      /// Updates the metadata of [Photos][google.streetview.publish.v1.Photo], such
      /// as pose, place association, connections, etc. Changing the pixels of photos
      /// is not supported.
      ///
      /// Note that if
      /// [BatchUpdatePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchUpdatePhotos]
      /// fails, either critical fields are missing or there is an authentication
      /// error. Even if
      /// [BatchUpdatePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchUpdatePhotos]
      /// succeeds, individual photos in the batch may have failures.
      /// These failures are specified in each
      /// [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
      /// in
      /// [BatchUpdatePhotosResponse.results][google.streetview.publish.v1.BatchUpdatePhotosResponse.results].
      /// See
      /// [UpdatePhoto][google.streetview.publish.v1.StreetViewPublishService.UpdatePhoto]
      /// for specific failures that can occur per photo.
      ///
      /// Only the fields specified in
      /// [updateMask][google.streetview.publish.v1.UpdatePhotoRequest.update_mask]
      /// field are used. If `updateMask` is not present, the update applies to all
      /// fields.
      ///
      /// The number of
      /// [UpdatePhotoRequest][google.streetview.publish.v1.UpdatePhotoRequest]
      /// messages in a
      /// [BatchUpdatePhotosRequest][google.streetview.publish.v1.BatchUpdatePhotosRequest]
      /// must not exceed 20.
      ///
      /// &lt;aside class="note">&lt;b>Note:&lt;/b> To update
      /// [Pose.altitude][google.streetview.publish.v1.Pose.altitude],
      /// [Pose.latLngPair][google.streetview.publish.v1.Pose.lat_lng_pair] has to be
      /// filled as well. Otherwise, the request will fail.&lt;/aside>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Streetview.Publish.V1.BatchUpdatePhotosResponse> BatchUpdatePhotosAsync(global::Google.Streetview.Publish.V1.BatchUpdatePhotosRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchUpdatePhotosAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the metadata of [Photos][google.streetview.publish.v1.Photo], such
      /// as pose, place association, connections, etc. Changing the pixels of photos
      /// is not supported.
      ///
      /// Note that if
      /// [BatchUpdatePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchUpdatePhotos]
      /// fails, either critical fields are missing or there is an authentication
      /// error. Even if
      /// [BatchUpdatePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchUpdatePhotos]
      /// succeeds, individual photos in the batch may have failures.
      /// These failures are specified in each
      /// [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
      /// in
      /// [BatchUpdatePhotosResponse.results][google.streetview.publish.v1.BatchUpdatePhotosResponse.results].
      /// See
      /// [UpdatePhoto][google.streetview.publish.v1.StreetViewPublishService.UpdatePhoto]
      /// for specific failures that can occur per photo.
      ///
      /// Only the fields specified in
      /// [updateMask][google.streetview.publish.v1.UpdatePhotoRequest.update_mask]
      /// field are used. If `updateMask` is not present, the update applies to all
      /// fields.
      ///
      /// The number of
      /// [UpdatePhotoRequest][google.streetview.publish.v1.UpdatePhotoRequest]
      /// messages in a
      /// [BatchUpdatePhotosRequest][google.streetview.publish.v1.BatchUpdatePhotosRequest]
      /// must not exceed 20.
      ///
      /// &lt;aside class="note">&lt;b>Note:&lt;/b> To update
      /// [Pose.altitude][google.streetview.publish.v1.Pose.altitude],
      /// [Pose.latLngPair][google.streetview.publish.v1.Pose.lat_lng_pair] has to be
      /// filled as well. Otherwise, the request will fail.&lt;/aside>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Streetview.Publish.V1.BatchUpdatePhotosResponse> BatchUpdatePhotosAsync(global::Google.Streetview.Publish.V1.BatchUpdatePhotosRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchUpdatePhotos, null, options, request);
      }
      /// <summary>
      /// Deletes a [Photo][google.streetview.publish.v1.Photo] and its metadata.
      ///
      /// This method returns the following error codes:
      ///
      /// * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
      /// the requesting user did not create the requested photo.
      /// * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the photo ID
      /// does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeletePhoto(global::Google.Streetview.Publish.V1.DeletePhotoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePhoto(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a [Photo][google.streetview.publish.v1.Photo] and its metadata.
      ///
      /// This method returns the following error codes:
      ///
      /// * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
      /// the requesting user did not create the requested photo.
      /// * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the photo ID
      /// does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeletePhoto(global::Google.Streetview.Publish.V1.DeletePhotoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeletePhoto, null, options, request);
      }
      /// <summary>
      /// Deletes a [Photo][google.streetview.publish.v1.Photo] and its metadata.
      ///
      /// This method returns the following error codes:
      ///
      /// * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
      /// the requesting user did not create the requested photo.
      /// * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the photo ID
      /// does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeletePhotoAsync(global::Google.Streetview.Publish.V1.DeletePhotoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePhotoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a [Photo][google.streetview.publish.v1.Photo] and its metadata.
      ///
      /// This method returns the following error codes:
      ///
      /// * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
      /// the requesting user did not create the requested photo.
      /// * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the photo ID
      /// does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeletePhotoAsync(global::Google.Streetview.Publish.V1.DeletePhotoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeletePhoto, null, options, request);
      }
      /// <summary>
      /// Deletes a list of [Photos][google.streetview.publish.v1.Photo] and their
      /// metadata.
      ///
      /// Note that if
      /// [BatchDeletePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchDeletePhotos]
      /// fails, either critical fields are missing or there was an authentication
      /// error. Even if
      /// [BatchDeletePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchDeletePhotos]
      /// succeeds, individual photos in the batch may have failures.
      /// These failures are specified in each
      /// [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
      /// in
      /// [BatchDeletePhotosResponse.results][google.streetview.publish.v1.BatchDeletePhotosResponse.status].
      /// See
      /// [DeletePhoto][google.streetview.publish.v1.StreetViewPublishService.DeletePhoto]
      /// for specific failures that can occur per photo.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Streetview.Publish.V1.BatchDeletePhotosResponse BatchDeletePhotos(global::Google.Streetview.Publish.V1.BatchDeletePhotosRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchDeletePhotos(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a list of [Photos][google.streetview.publish.v1.Photo] and their
      /// metadata.
      ///
      /// Note that if
      /// [BatchDeletePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchDeletePhotos]
      /// fails, either critical fields are missing or there was an authentication
      /// error. Even if
      /// [BatchDeletePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchDeletePhotos]
      /// succeeds, individual photos in the batch may have failures.
      /// These failures are specified in each
      /// [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
      /// in
      /// [BatchDeletePhotosResponse.results][google.streetview.publish.v1.BatchDeletePhotosResponse.status].
      /// See
      /// [DeletePhoto][google.streetview.publish.v1.StreetViewPublishService.DeletePhoto]
      /// for specific failures that can occur per photo.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Streetview.Publish.V1.BatchDeletePhotosResponse BatchDeletePhotos(global::Google.Streetview.Publish.V1.BatchDeletePhotosRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchDeletePhotos, null, options, request);
      }
      /// <summary>
      /// Deletes a list of [Photos][google.streetview.publish.v1.Photo] and their
      /// metadata.
      ///
      /// Note that if
      /// [BatchDeletePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchDeletePhotos]
      /// fails, either critical fields are missing or there was an authentication
      /// error. Even if
      /// [BatchDeletePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchDeletePhotos]
      /// succeeds, individual photos in the batch may have failures.
      /// These failures are specified in each
      /// [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
      /// in
      /// [BatchDeletePhotosResponse.results][google.streetview.publish.v1.BatchDeletePhotosResponse.status].
      /// See
      /// [DeletePhoto][google.streetview.publish.v1.StreetViewPublishService.DeletePhoto]
      /// for specific failures that can occur per photo.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Streetview.Publish.V1.BatchDeletePhotosResponse> BatchDeletePhotosAsync(global::Google.Streetview.Publish.V1.BatchDeletePhotosRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchDeletePhotosAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a list of [Photos][google.streetview.publish.v1.Photo] and their
      /// metadata.
      ///
      /// Note that if
      /// [BatchDeletePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchDeletePhotos]
      /// fails, either critical fields are missing or there was an authentication
      /// error. Even if
      /// [BatchDeletePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchDeletePhotos]
      /// succeeds, individual photos in the batch may have failures.
      /// These failures are specified in each
      /// [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
      /// in
      /// [BatchDeletePhotosResponse.results][google.streetview.publish.v1.BatchDeletePhotosResponse.status].
      /// See
      /// [DeletePhoto][google.streetview.publish.v1.StreetViewPublishService.DeletePhoto]
      /// for specific failures that can occur per photo.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Streetview.Publish.V1.BatchDeletePhotosResponse> BatchDeletePhotosAsync(global::Google.Streetview.Publish.V1.BatchDeletePhotosRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchDeletePhotos, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override StreetViewPublishServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new StreetViewPublishServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(StreetViewPublishServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_StartUpload, serviceImpl.StartUpload)
          .AddMethod(__Method_CreatePhoto, serviceImpl.CreatePhoto)
          .AddMethod(__Method_GetPhoto, serviceImpl.GetPhoto)
          .AddMethod(__Method_BatchGetPhotos, serviceImpl.BatchGetPhotos)
          .AddMethod(__Method_ListPhotos, serviceImpl.ListPhotos)
          .AddMethod(__Method_UpdatePhoto, serviceImpl.UpdatePhoto)
          .AddMethod(__Method_BatchUpdatePhotos, serviceImpl.BatchUpdatePhotos)
          .AddMethod(__Method_DeletePhoto, serviceImpl.DeletePhoto)
          .AddMethod(__Method_BatchDeletePhotos, serviceImpl.BatchDeletePhotos).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, StreetViewPublishServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_StartUpload, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Google.Streetview.Publish.V1.UploadRef>(serviceImpl.StartUpload));
      serviceBinder.AddMethod(__Method_CreatePhoto, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Streetview.Publish.V1.CreatePhotoRequest, global::Google.Streetview.Publish.V1.Photo>(serviceImpl.CreatePhoto));
      serviceBinder.AddMethod(__Method_GetPhoto, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Streetview.Publish.V1.GetPhotoRequest, global::Google.Streetview.Publish.V1.Photo>(serviceImpl.GetPhoto));
      serviceBinder.AddMethod(__Method_BatchGetPhotos, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Streetview.Publish.V1.BatchGetPhotosRequest, global::Google.Streetview.Publish.V1.BatchGetPhotosResponse>(serviceImpl.BatchGetPhotos));
      serviceBinder.AddMethod(__Method_ListPhotos, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Streetview.Publish.V1.ListPhotosRequest, global::Google.Streetview.Publish.V1.ListPhotosResponse>(serviceImpl.ListPhotos));
      serviceBinder.AddMethod(__Method_UpdatePhoto, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Streetview.Publish.V1.UpdatePhotoRequest, global::Google.Streetview.Publish.V1.Photo>(serviceImpl.UpdatePhoto));
      serviceBinder.AddMethod(__Method_BatchUpdatePhotos, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Streetview.Publish.V1.BatchUpdatePhotosRequest, global::Google.Streetview.Publish.V1.BatchUpdatePhotosResponse>(serviceImpl.BatchUpdatePhotos));
      serviceBinder.AddMethod(__Method_DeletePhoto, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Streetview.Publish.V1.DeletePhotoRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeletePhoto));
      serviceBinder.AddMethod(__Method_BatchDeletePhotos, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Streetview.Publish.V1.BatchDeletePhotosRequest, global::Google.Streetview.Publish.V1.BatchDeletePhotosResponse>(serviceImpl.BatchDeletePhotos));
    }

  }
}
#endregion
