// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/streetview/publish/v1/resources.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Streetview.Publish.V1 {

  /// <summary>Holder for reflection information generated from google/streetview/publish/v1/resources.proto</summary>
  public static partial class ResourcesReflection {

    #region Descriptor
    /// <summary>File descriptor for google/streetview/publish/v1/resources.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ResourcesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cixnb29nbGUvc3RyZWV0dmlldy9wdWJsaXNoL3YxL3Jlc291cmNlcy5wcm90",
            "bxIcZ29vZ2xlLnN0cmVldHZpZXcucHVibGlzaC52MRocZ29vZ2xlL2FwaS9h",
            "bm5vdGF0aW9ucy5wcm90bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5w",
            "cm90bxoYZ29vZ2xlL3R5cGUvbGF0bG5nLnByb3RvIh8KCVVwbG9hZFJlZhIS",
            "Cgp1cGxvYWRfdXJsGAEgASgJIhUKB1Bob3RvSWQSCgoCaWQYASABKAkiJQoF",
            "TGV2ZWwSDgoGbnVtYmVyGAEgASgBEgwKBG5hbWUYAiABKAkivgEKBFBvc2US",
            "KQoMbGF0X2xuZ19wYWlyGAEgASgLMhMuZ29vZ2xlLnR5cGUuTGF0TG5nEhAK",
            "CGFsdGl0dWRlGAIgASgBEg8KB2hlYWRpbmcYAyABKAESDQoFcGl0Y2gYBCAB",
            "KAESDAoEcm9sbBgFIAEoARIyCgVsZXZlbBgHIAEoCzIjLmdvb2dsZS5zdHJl",
            "ZXR2aWV3LnB1Ymxpc2gudjEuTGV2ZWwSFwoPYWNjdXJhY3lfbWV0ZXJzGAkg",
            "ASgCIj4KBVBsYWNlEhAKCHBsYWNlX2lkGAEgASgJEgwKBG5hbWUYAiABKAkS",
            "FQoNbGFuZ3VhZ2VfY29kZRgDIAEoCSJDCgpDb25uZWN0aW9uEjUKBnRhcmdl",
            "dBgBIAEoCzIlLmdvb2dsZS5zdHJlZXR2aWV3LnB1Ymxpc2gudjEuUGhvdG9J",
            "ZCLYBgoFUGhvdG8SNwoIcGhvdG9faWQYASABKAsyJS5nb29nbGUuc3RyZWV0",
            "dmlldy5wdWJsaXNoLnYxLlBob3RvSWQSQQoQdXBsb2FkX3JlZmVyZW5jZRgC",
            "IAEoCzInLmdvb2dsZS5zdHJlZXR2aWV3LnB1Ymxpc2gudjEuVXBsb2FkUmVm",
            "EhQKDGRvd25sb2FkX3VybBgDIAEoCRIVCg10aHVtYm5haWxfdXJsGAkgASgJ",
            "EhIKCnNoYXJlX2xpbmsYCyABKAkSMAoEcG9zZRgEIAEoCzIiLmdvb2dsZS5z",
            "dHJlZXR2aWV3LnB1Ymxpc2gudjEuUG9zZRI9Cgtjb25uZWN0aW9ucxgFIAMo",
            "CzIoLmdvb2dsZS5zdHJlZXR2aWV3LnB1Ymxpc2gudjEuQ29ubmVjdGlvbhIw",
            "CgxjYXB0dXJlX3RpbWUYBiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0",
            "YW1wEjMKBnBsYWNlcxgHIAMoCzIjLmdvb2dsZS5zdHJlZXR2aWV3LnB1Ymxp",
            "c2gudjEuUGxhY2USEgoKdmlld19jb3VudBgKIAEoAxJLCg90cmFuc2Zlcl9z",
            "dGF0dXMYDCABKA4yMi5nb29nbGUuc3RyZWV0dmlldy5wdWJsaXNoLnYxLlBo",
            "b3RvLlRyYW5zZmVyU3RhdHVzElIKE21hcHNfcHVibGlzaF9zdGF0dXMYDSAB",
            "KA4yNS5nb29nbGUuc3RyZWV0dmlldy5wdWJsaXNoLnYxLlBob3RvLk1hcHNQ",
            "dWJsaXNoU3RhdHVzIqUBCg5UcmFuc2ZlclN0YXR1cxIbChdUUkFOU0ZFUl9T",
            "VEFUVVNfVU5LTk9XThAAEhUKEU5FVkVSX1RSQU5TRkVSUkVEEAESCwoHUEVO",
            "RElORxACEg0KCUNPTVBMRVRFRBADEgwKCFJFSkVDVEVEEAQSCwoHRVhQSVJF",
            "RBAFEg0KCUNBTkNFTExFRBAGEhkKFVJFQ0VJVkVEX1ZJQV9UUkFOU0ZFUhAH",
            "Il0KEU1hcHNQdWJsaXNoU3RhdHVzEiMKH1VOU1BFQ0lGSUVEX01BUFNfUFVC",
            "TElTSF9TVEFUVVMQABINCglQVUJMSVNIRUQQARIUChBSRUpFQ1RFRF9VTktO",
            "T1dOEAJCiwEKKGNvbS5nb29nbGUuZ2VvLnVnYy5zdHJlZXR2aWV3LnB1Ymxp",
            "c2gudjFCGlN0cmVldFZpZXdQdWJsaXNoUmVzb3VyY2VzWkNnb29nbGUuZ29s",
            "YW5nLm9yZy9nZW5wcm90by9nb29nbGVhcGlzL3N0cmVldHZpZXcvcHVibGlz",
            "aC92MTtwdWJsaXNoYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Type.LatlngReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Streetview.Publish.V1.UploadRef), global::Google.Streetview.Publish.V1.UploadRef.Parser, new[]{ "UploadUrl" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Streetview.Publish.V1.PhotoId), global::Google.Streetview.Publish.V1.PhotoId.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Streetview.Publish.V1.Level), global::Google.Streetview.Publish.V1.Level.Parser, new[]{ "Number", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Streetview.Publish.V1.Pose), global::Google.Streetview.Publish.V1.Pose.Parser, new[]{ "LatLngPair", "Altitude", "Heading", "Pitch", "Roll", "Level", "AccuracyMeters" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Streetview.Publish.V1.Place), global::Google.Streetview.Publish.V1.Place.Parser, new[]{ "PlaceId", "Name", "LanguageCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Streetview.Publish.V1.Connection), global::Google.Streetview.Publish.V1.Connection.Parser, new[]{ "Target" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Streetview.Publish.V1.Photo), global::Google.Streetview.Publish.V1.Photo.Parser, new[]{ "PhotoId", "UploadReference", "DownloadUrl", "ThumbnailUrl", "ShareLink", "Pose", "Connections", "CaptureTime", "Places", "ViewCount", "TransferStatus", "MapsPublishStatus" }, null, new[]{ typeof(global::Google.Streetview.Publish.V1.Photo.Types.TransferStatus), typeof(global::Google.Streetview.Publish.V1.Photo.Types.MapsPublishStatus) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Upload reference for media files.
  /// </summary>
  public sealed partial class UploadRef : pb::IMessage<UploadRef>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UploadRef> _parser = new pb::MessageParser<UploadRef>(() => new UploadRef());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UploadRef> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Streetview.Publish.V1.ResourcesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadRef() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadRef(UploadRef other) : this() {
      uploadUrl_ = other.uploadUrl_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadRef Clone() {
      return new UploadRef(this);
    }

    /// <summary>Field number for the "upload_url" field.</summary>
    public const int UploadUrlFieldNumber = 1;
    private string uploadUrl_ = "";
    /// <summary>
    /// Required. An upload reference should be unique for each user. It follows
    /// the form:
    /// "https://streetviewpublish.googleapis.com/media/user/{account_id}/photo/{upload_reference}"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UploadUrl {
      get { return uploadUrl_; }
      set {
        uploadUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UploadRef);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UploadRef other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UploadUrl != other.UploadUrl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UploadUrl.Length != 0) hash ^= UploadUrl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UploadUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UploadUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UploadUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UploadUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UploadUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UploadUrl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UploadRef other) {
      if (other == null) {
        return;
      }
      if (other.UploadUrl.Length != 0) {
        UploadUrl = other.UploadUrl;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UploadUrl = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            UploadUrl = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Identifier for a [Photo][google.streetview.publish.v1.Photo].
  /// </summary>
  public sealed partial class PhotoId : pb::IMessage<PhotoId>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PhotoId> _parser = new pb::MessageParser<PhotoId>(() => new PhotoId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PhotoId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Streetview.Publish.V1.ResourcesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotoId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotoId(PhotoId other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotoId Clone() {
      return new PhotoId(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// Required. A unique identifier for a photo.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PhotoId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PhotoId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PhotoId other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Level information containing level number and its corresponding name.
  /// </summary>
  public sealed partial class Level : pb::IMessage<Level>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Level> _parser = new pb::MessageParser<Level>(() => new Level());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Level> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Streetview.Publish.V1.ResourcesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Level() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Level(Level other) : this() {
      number_ = other.number_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Level Clone() {
      return new Level(this);
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 1;
    private double number_;
    /// <summary>
    /// Floor number, used for ordering. 0 indicates the ground level, 1 indicates
    /// the first level above ground level, -1 indicates the first level under
    /// ground level. Non-integer values are OK.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// Required. A name assigned to this Level, restricted to 3 characters.
    /// Consider how the elevator buttons would be labeled for this level if there
    /// was an elevator.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Level);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Level other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Number, other.Number)) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Number != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Number);
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Number != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Number);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Number != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Number);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Number != 0D) {
        size += 1 + 8;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Level other) {
      if (other == null) {
        return;
      }
      if (other.Number != 0D) {
        Number = other.Number;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Number = input.ReadDouble();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Number = input.ReadDouble();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Raw pose measurement for an entity.
  /// </summary>
  public sealed partial class Pose : pb::IMessage<Pose>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Pose> _parser = new pb::MessageParser<Pose>(() => new Pose());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pose> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Streetview.Publish.V1.ResourcesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pose() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pose(Pose other) : this() {
      latLngPair_ = other.latLngPair_ != null ? other.latLngPair_.Clone() : null;
      altitude_ = other.altitude_;
      heading_ = other.heading_;
      pitch_ = other.pitch_;
      roll_ = other.roll_;
      level_ = other.level_ != null ? other.level_.Clone() : null;
      accuracyMeters_ = other.accuracyMeters_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pose Clone() {
      return new Pose(this);
    }

    /// <summary>Field number for the "lat_lng_pair" field.</summary>
    public const int LatLngPairFieldNumber = 1;
    private global::Google.Type.LatLng latLngPair_;
    /// <summary>
    /// Latitude and longitude pair of the pose, as explained here:
    /// https://cloud.google.com/datastore/docs/reference/rest/Shared.Types/LatLng
    /// When creating a [Photo][google.streetview.publish.v1.Photo], if the
    /// latitude and longitude pair are not provided, the geolocation from the
    /// exif header is used. A latitude and longitude pair not provided in the
    /// photo or exif header causes the create photo process to fail.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.LatLng LatLngPair {
      get { return latLngPair_; }
      set {
        latLngPair_ = value;
      }
    }

    /// <summary>Field number for the "altitude" field.</summary>
    public const int AltitudeFieldNumber = 2;
    private double altitude_;
    /// <summary>
    /// Altitude of the pose in meters above WGS84 ellipsoid.
    /// NaN indicates an unmeasured quantity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Altitude {
      get { return altitude_; }
      set {
        altitude_ = value;
      }
    }

    /// <summary>Field number for the "heading" field.</summary>
    public const int HeadingFieldNumber = 3;
    private double heading_;
    /// <summary>
    /// Compass heading, measured at the center of the photo in degrees clockwise
    /// from North. Value must be >=0 and &lt;360.
    /// NaN indicates an unmeasured quantity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Heading {
      get { return heading_; }
      set {
        heading_ = value;
      }
    }

    /// <summary>Field number for the "pitch" field.</summary>
    public const int PitchFieldNumber = 4;
    private double pitch_;
    /// <summary>
    /// Pitch, measured at the center of the photo in degrees. Value must be >=-90
    /// and &lt;= 90. A value of -90 means looking directly down, and a value of 90
    /// means looking directly up.
    /// NaN indicates an unmeasured quantity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Pitch {
      get { return pitch_; }
      set {
        pitch_ = value;
      }
    }

    /// <summary>Field number for the "roll" field.</summary>
    public const int RollFieldNumber = 5;
    private double roll_;
    /// <summary>
    /// Roll, measured in degrees. Value must be >= 0 and &lt;360. A value of 0
    /// means level with the horizon.
    /// NaN indicates an unmeasured quantity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Roll {
      get { return roll_; }
      set {
        roll_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 7;
    private global::Google.Streetview.Publish.V1.Level level_;
    /// <summary>
    /// Level (the floor in a building) used to configure vertical navigation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Streetview.Publish.V1.Level Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "accuracy_meters" field.</summary>
    public const int AccuracyMetersFieldNumber = 9;
    private float accuracyMeters_;
    /// <summary>
    /// The estimated horizontal accuracy of this pose in meters with 68%
    /// confidence (one standard deviation). For example, on Android, this value is
    /// available from this method:
    /// https://developer.android.com/reference/android/location/Location#getAccuracy().
    /// Other platforms have different methods of obtaining similar accuracy
    /// estimations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AccuracyMeters {
      get { return accuracyMeters_; }
      set {
        accuracyMeters_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pose);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pose other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LatLngPair, other.LatLngPair)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Altitude, other.Altitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Heading, other.Heading)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Pitch, other.Pitch)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Roll, other.Roll)) return false;
      if (!object.Equals(Level, other.Level)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AccuracyMeters, other.AccuracyMeters)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (latLngPair_ != null) hash ^= LatLngPair.GetHashCode();
      if (Altitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Altitude);
      if (Heading != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Heading);
      if (Pitch != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Pitch);
      if (Roll != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Roll);
      if (level_ != null) hash ^= Level.GetHashCode();
      if (AccuracyMeters != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AccuracyMeters);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (latLngPair_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LatLngPair);
      }
      if (Altitude != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Altitude);
      }
      if (Heading != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Heading);
      }
      if (Pitch != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Pitch);
      }
      if (Roll != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Roll);
      }
      if (level_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Level);
      }
      if (AccuracyMeters != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(AccuracyMeters);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (latLngPair_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LatLngPair);
      }
      if (Altitude != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Altitude);
      }
      if (Heading != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Heading);
      }
      if (Pitch != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Pitch);
      }
      if (Roll != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Roll);
      }
      if (level_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Level);
      }
      if (AccuracyMeters != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(AccuracyMeters);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (latLngPair_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LatLngPair);
      }
      if (Altitude != 0D) {
        size += 1 + 8;
      }
      if (Heading != 0D) {
        size += 1 + 8;
      }
      if (Pitch != 0D) {
        size += 1 + 8;
      }
      if (Roll != 0D) {
        size += 1 + 8;
      }
      if (level_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Level);
      }
      if (AccuracyMeters != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pose other) {
      if (other == null) {
        return;
      }
      if (other.latLngPair_ != null) {
        if (latLngPair_ == null) {
          LatLngPair = new global::Google.Type.LatLng();
        }
        LatLngPair.MergeFrom(other.LatLngPair);
      }
      if (other.Altitude != 0D) {
        Altitude = other.Altitude;
      }
      if (other.Heading != 0D) {
        Heading = other.Heading;
      }
      if (other.Pitch != 0D) {
        Pitch = other.Pitch;
      }
      if (other.Roll != 0D) {
        Roll = other.Roll;
      }
      if (other.level_ != null) {
        if (level_ == null) {
          Level = new global::Google.Streetview.Publish.V1.Level();
        }
        Level.MergeFrom(other.Level);
      }
      if (other.AccuracyMeters != 0F) {
        AccuracyMeters = other.AccuracyMeters;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (latLngPair_ == null) {
              LatLngPair = new global::Google.Type.LatLng();
            }
            input.ReadMessage(LatLngPair);
            break;
          }
          case 17: {
            Altitude = input.ReadDouble();
            break;
          }
          case 25: {
            Heading = input.ReadDouble();
            break;
          }
          case 33: {
            Pitch = input.ReadDouble();
            break;
          }
          case 41: {
            Roll = input.ReadDouble();
            break;
          }
          case 58: {
            if (level_ == null) {
              Level = new global::Google.Streetview.Publish.V1.Level();
            }
            input.ReadMessage(Level);
            break;
          }
          case 77: {
            AccuracyMeters = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (latLngPair_ == null) {
              LatLngPair = new global::Google.Type.LatLng();
            }
            input.ReadMessage(LatLngPair);
            break;
          }
          case 17: {
            Altitude = input.ReadDouble();
            break;
          }
          case 25: {
            Heading = input.ReadDouble();
            break;
          }
          case 33: {
            Pitch = input.ReadDouble();
            break;
          }
          case 41: {
            Roll = input.ReadDouble();
            break;
          }
          case 58: {
            if (level_ == null) {
              Level = new global::Google.Streetview.Publish.V1.Level();
            }
            input.ReadMessage(Level);
            break;
          }
          case 77: {
            AccuracyMeters = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Place metadata for an entity.
  /// </summary>
  public sealed partial class Place : pb::IMessage<Place>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Place> _parser = new pb::MessageParser<Place>(() => new Place());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Place> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Streetview.Publish.V1.ResourcesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Place() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Place(Place other) : this() {
      placeId_ = other.placeId_;
      name_ = other.name_;
      languageCode_ = other.languageCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Place Clone() {
      return new Place(this);
    }

    /// <summary>Field number for the "place_id" field.</summary>
    public const int PlaceIdFieldNumber = 1;
    private string placeId_ = "";
    /// <summary>
    /// Place identifier, as described in
    /// https://developers.google.com/places/place-id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlaceId {
      get { return placeId_; }
      set {
        placeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// Output-only. The name of the place, localized to the language_code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "language_code" field.</summary>
    public const int LanguageCodeFieldNumber = 3;
    private string languageCode_ = "";
    /// <summary>
    /// Output-only. The language_code that the name is localized with. This should
    /// be the language_code specified in the request, but may be a fallback.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LanguageCode {
      get { return languageCode_; }
      set {
        languageCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Place);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Place other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlaceId != other.PlaceId) return false;
      if (Name != other.Name) return false;
      if (LanguageCode != other.LanguageCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlaceId.Length != 0) hash ^= PlaceId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (LanguageCode.Length != 0) hash ^= LanguageCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlaceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlaceId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (LanguageCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LanguageCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlaceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlaceId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (LanguageCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LanguageCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlaceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlaceId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (LanguageCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LanguageCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Place other) {
      if (other == null) {
        return;
      }
      if (other.PlaceId.Length != 0) {
        PlaceId = other.PlaceId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.LanguageCode.Length != 0) {
        LanguageCode = other.LanguageCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlaceId = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            LanguageCode = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PlaceId = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            LanguageCode = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A connection is the link from a source photo to a destination photo.
  /// </summary>
  public sealed partial class Connection : pb::IMessage<Connection>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Connection> _parser = new pb::MessageParser<Connection>(() => new Connection());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Connection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Streetview.Publish.V1.ResourcesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Connection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Connection(Connection other) : this() {
      target_ = other.target_ != null ? other.target_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Connection Clone() {
      return new Connection(this);
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 1;
    private global::Google.Streetview.Publish.V1.PhotoId target_;
    /// <summary>
    /// Required. The destination of the connection from the containing photo to
    /// another photo.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Streetview.Publish.V1.PhotoId Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Connection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Connection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Target, other.Target)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (target_ != null) hash ^= Target.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (target_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (target_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Connection other) {
      if (other == null) {
        return;
      }
      if (other.target_ != null) {
        if (target_ == null) {
          Target = new global::Google.Streetview.Publish.V1.PhotoId();
        }
        Target.MergeFrom(other.Target);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (target_ == null) {
              Target = new global::Google.Streetview.Publish.V1.PhotoId();
            }
            input.ReadMessage(Target);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (target_ == null) {
              Target = new global::Google.Streetview.Publish.V1.PhotoId();
            }
            input.ReadMessage(Target);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Photo is used to store 360 photos along with photo metadata.
  /// </summary>
  public sealed partial class Photo : pb::IMessage<Photo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Photo> _parser = new pb::MessageParser<Photo>(() => new Photo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Photo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Streetview.Publish.V1.ResourcesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Photo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Photo(Photo other) : this() {
      photoId_ = other.photoId_ != null ? other.photoId_.Clone() : null;
      uploadReference_ = other.uploadReference_ != null ? other.uploadReference_.Clone() : null;
      downloadUrl_ = other.downloadUrl_;
      thumbnailUrl_ = other.thumbnailUrl_;
      shareLink_ = other.shareLink_;
      pose_ = other.pose_ != null ? other.pose_.Clone() : null;
      connections_ = other.connections_.Clone();
      captureTime_ = other.captureTime_ != null ? other.captureTime_.Clone() : null;
      places_ = other.places_.Clone();
      viewCount_ = other.viewCount_;
      transferStatus_ = other.transferStatus_;
      mapsPublishStatus_ = other.mapsPublishStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Photo Clone() {
      return new Photo(this);
    }

    /// <summary>Field number for the "photo_id" field.</summary>
    public const int PhotoIdFieldNumber = 1;
    private global::Google.Streetview.Publish.V1.PhotoId photoId_;
    /// <summary>
    /// Required when updating a photo. Output only when creating a photo.
    /// Identifier for the photo, which is unique among all photos in
    /// Google.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Streetview.Publish.V1.PhotoId PhotoId {
      get { return photoId_; }
      set {
        photoId_ = value;
      }
    }

    /// <summary>Field number for the "upload_reference" field.</summary>
    public const int UploadReferenceFieldNumber = 2;
    private global::Google.Streetview.Publish.V1.UploadRef uploadReference_;
    /// <summary>
    /// Required when creating a photo. Input only. The resource URL where the
    /// photo bytes are uploaded to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Streetview.Publish.V1.UploadRef UploadReference {
      get { return uploadReference_; }
      set {
        uploadReference_ = value;
      }
    }

    /// <summary>Field number for the "download_url" field.</summary>
    public const int DownloadUrlFieldNumber = 3;
    private string downloadUrl_ = "";
    /// <summary>
    /// Output only. The download URL for the photo bytes. This field is set only
    /// when
    /// [GetPhotoRequest.view][google.streetview.publish.v1.GetPhotoRequest.view]
    /// is set to
    /// [PhotoView.INCLUDE_DOWNLOAD_URL][google.streetview.publish.v1.PhotoView.INCLUDE_DOWNLOAD_URL].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DownloadUrl {
      get { return downloadUrl_; }
      set {
        downloadUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "thumbnail_url" field.</summary>
    public const int ThumbnailUrlFieldNumber = 9;
    private string thumbnailUrl_ = "";
    /// <summary>
    /// Output only. The thumbnail URL for showing a preview of the given photo.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ThumbnailUrl {
      get { return thumbnailUrl_; }
      set {
        thumbnailUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "share_link" field.</summary>
    public const int ShareLinkFieldNumber = 11;
    private string shareLink_ = "";
    /// <summary>
    /// Output only. The share link for the photo.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShareLink {
      get { return shareLink_; }
      set {
        shareLink_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pose" field.</summary>
    public const int PoseFieldNumber = 4;
    private global::Google.Streetview.Publish.V1.Pose pose_;
    /// <summary>
    /// Pose of the photo.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Streetview.Publish.V1.Pose Pose {
      get { return pose_; }
      set {
        pose_ = value;
      }
    }

    /// <summary>Field number for the "connections" field.</summary>
    public const int ConnectionsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Google.Streetview.Publish.V1.Connection> _repeated_connections_codec
        = pb::FieldCodec.ForMessage(42, global::Google.Streetview.Publish.V1.Connection.Parser);
    private readonly pbc::RepeatedField<global::Google.Streetview.Publish.V1.Connection> connections_ = new pbc::RepeatedField<global::Google.Streetview.Publish.V1.Connection>();
    /// <summary>
    /// Connections to other photos. A connection represents the link from this
    /// photo to another photo.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Streetview.Publish.V1.Connection> Connections {
      get { return connections_; }
    }

    /// <summary>Field number for the "capture_time" field.</summary>
    public const int CaptureTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp captureTime_;
    /// <summary>
    /// Absolute time when the photo was captured.
    /// When the photo has no exif timestamp, this is used to set a timestamp in
    /// the photo metadata.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CaptureTime {
      get { return captureTime_; }
      set {
        captureTime_ = value;
      }
    }

    /// <summary>Field number for the "places" field.</summary>
    public const int PlacesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Google.Streetview.Publish.V1.Place> _repeated_places_codec
        = pb::FieldCodec.ForMessage(58, global::Google.Streetview.Publish.V1.Place.Parser);
    private readonly pbc::RepeatedField<global::Google.Streetview.Publish.V1.Place> places_ = new pbc::RepeatedField<global::Google.Streetview.Publish.V1.Place>();
    /// <summary>
    /// Places where this photo belongs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Streetview.Publish.V1.Place> Places {
      get { return places_; }
    }

    /// <summary>Field number for the "view_count" field.</summary>
    public const int ViewCountFieldNumber = 10;
    private long viewCount_;
    /// <summary>
    /// Output only. View count of the photo.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ViewCount {
      get { return viewCount_; }
      set {
        viewCount_ = value;
      }
    }

    /// <summary>Field number for the "transfer_status" field.</summary>
    public const int TransferStatusFieldNumber = 12;
    private global::Google.Streetview.Publish.V1.Photo.Types.TransferStatus transferStatus_ = global::Google.Streetview.Publish.V1.Photo.Types.TransferStatus.Unknown;
    /// <summary>
    /// Output only. Status of rights transfer on this photo.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Streetview.Publish.V1.Photo.Types.TransferStatus TransferStatus {
      get { return transferStatus_; }
      set {
        transferStatus_ = value;
      }
    }

    /// <summary>Field number for the "maps_publish_status" field.</summary>
    public const int MapsPublishStatusFieldNumber = 13;
    private global::Google.Streetview.Publish.V1.Photo.Types.MapsPublishStatus mapsPublishStatus_ = global::Google.Streetview.Publish.V1.Photo.Types.MapsPublishStatus.UnspecifiedMapsPublishStatus;
    /// <summary>
    /// Output only. Status in Google Maps, whether this photo was published or
    /// rejected.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Streetview.Publish.V1.Photo.Types.MapsPublishStatus MapsPublishStatus {
      get { return mapsPublishStatus_; }
      set {
        mapsPublishStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Photo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Photo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PhotoId, other.PhotoId)) return false;
      if (!object.Equals(UploadReference, other.UploadReference)) return false;
      if (DownloadUrl != other.DownloadUrl) return false;
      if (ThumbnailUrl != other.ThumbnailUrl) return false;
      if (ShareLink != other.ShareLink) return false;
      if (!object.Equals(Pose, other.Pose)) return false;
      if(!connections_.Equals(other.connections_)) return false;
      if (!object.Equals(CaptureTime, other.CaptureTime)) return false;
      if(!places_.Equals(other.places_)) return false;
      if (ViewCount != other.ViewCount) return false;
      if (TransferStatus != other.TransferStatus) return false;
      if (MapsPublishStatus != other.MapsPublishStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (photoId_ != null) hash ^= PhotoId.GetHashCode();
      if (uploadReference_ != null) hash ^= UploadReference.GetHashCode();
      if (DownloadUrl.Length != 0) hash ^= DownloadUrl.GetHashCode();
      if (ThumbnailUrl.Length != 0) hash ^= ThumbnailUrl.GetHashCode();
      if (ShareLink.Length != 0) hash ^= ShareLink.GetHashCode();
      if (pose_ != null) hash ^= Pose.GetHashCode();
      hash ^= connections_.GetHashCode();
      if (captureTime_ != null) hash ^= CaptureTime.GetHashCode();
      hash ^= places_.GetHashCode();
      if (ViewCount != 0L) hash ^= ViewCount.GetHashCode();
      if (TransferStatus != global::Google.Streetview.Publish.V1.Photo.Types.TransferStatus.Unknown) hash ^= TransferStatus.GetHashCode();
      if (MapsPublishStatus != global::Google.Streetview.Publish.V1.Photo.Types.MapsPublishStatus.UnspecifiedMapsPublishStatus) hash ^= MapsPublishStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (photoId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PhotoId);
      }
      if (uploadReference_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UploadReference);
      }
      if (DownloadUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DownloadUrl);
      }
      if (pose_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Pose);
      }
      connections_.WriteTo(output, _repeated_connections_codec);
      if (captureTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CaptureTime);
      }
      places_.WriteTo(output, _repeated_places_codec);
      if (ThumbnailUrl.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ThumbnailUrl);
      }
      if (ViewCount != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(ViewCount);
      }
      if (ShareLink.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ShareLink);
      }
      if (TransferStatus != global::Google.Streetview.Publish.V1.Photo.Types.TransferStatus.Unknown) {
        output.WriteRawTag(96);
        output.WriteEnum((int) TransferStatus);
      }
      if (MapsPublishStatus != global::Google.Streetview.Publish.V1.Photo.Types.MapsPublishStatus.UnspecifiedMapsPublishStatus) {
        output.WriteRawTag(104);
        output.WriteEnum((int) MapsPublishStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (photoId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PhotoId);
      }
      if (uploadReference_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UploadReference);
      }
      if (DownloadUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DownloadUrl);
      }
      if (pose_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Pose);
      }
      connections_.WriteTo(ref output, _repeated_connections_codec);
      if (captureTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CaptureTime);
      }
      places_.WriteTo(ref output, _repeated_places_codec);
      if (ThumbnailUrl.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ThumbnailUrl);
      }
      if (ViewCount != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(ViewCount);
      }
      if (ShareLink.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ShareLink);
      }
      if (TransferStatus != global::Google.Streetview.Publish.V1.Photo.Types.TransferStatus.Unknown) {
        output.WriteRawTag(96);
        output.WriteEnum((int) TransferStatus);
      }
      if (MapsPublishStatus != global::Google.Streetview.Publish.V1.Photo.Types.MapsPublishStatus.UnspecifiedMapsPublishStatus) {
        output.WriteRawTag(104);
        output.WriteEnum((int) MapsPublishStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (photoId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PhotoId);
      }
      if (uploadReference_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UploadReference);
      }
      if (DownloadUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DownloadUrl);
      }
      if (ThumbnailUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ThumbnailUrl);
      }
      if (ShareLink.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShareLink);
      }
      if (pose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pose);
      }
      size += connections_.CalculateSize(_repeated_connections_codec);
      if (captureTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CaptureTime);
      }
      size += places_.CalculateSize(_repeated_places_codec);
      if (ViewCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ViewCount);
      }
      if (TransferStatus != global::Google.Streetview.Publish.V1.Photo.Types.TransferStatus.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TransferStatus);
      }
      if (MapsPublishStatus != global::Google.Streetview.Publish.V1.Photo.Types.MapsPublishStatus.UnspecifiedMapsPublishStatus) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MapsPublishStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Photo other) {
      if (other == null) {
        return;
      }
      if (other.photoId_ != null) {
        if (photoId_ == null) {
          PhotoId = new global::Google.Streetview.Publish.V1.PhotoId();
        }
        PhotoId.MergeFrom(other.PhotoId);
      }
      if (other.uploadReference_ != null) {
        if (uploadReference_ == null) {
          UploadReference = new global::Google.Streetview.Publish.V1.UploadRef();
        }
        UploadReference.MergeFrom(other.UploadReference);
      }
      if (other.DownloadUrl.Length != 0) {
        DownloadUrl = other.DownloadUrl;
      }
      if (other.ThumbnailUrl.Length != 0) {
        ThumbnailUrl = other.ThumbnailUrl;
      }
      if (other.ShareLink.Length != 0) {
        ShareLink = other.ShareLink;
      }
      if (other.pose_ != null) {
        if (pose_ == null) {
          Pose = new global::Google.Streetview.Publish.V1.Pose();
        }
        Pose.MergeFrom(other.Pose);
      }
      connections_.Add(other.connections_);
      if (other.captureTime_ != null) {
        if (captureTime_ == null) {
          CaptureTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CaptureTime.MergeFrom(other.CaptureTime);
      }
      places_.Add(other.places_);
      if (other.ViewCount != 0L) {
        ViewCount = other.ViewCount;
      }
      if (other.TransferStatus != global::Google.Streetview.Publish.V1.Photo.Types.TransferStatus.Unknown) {
        TransferStatus = other.TransferStatus;
      }
      if (other.MapsPublishStatus != global::Google.Streetview.Publish.V1.Photo.Types.MapsPublishStatus.UnspecifiedMapsPublishStatus) {
        MapsPublishStatus = other.MapsPublishStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (photoId_ == null) {
              PhotoId = new global::Google.Streetview.Publish.V1.PhotoId();
            }
            input.ReadMessage(PhotoId);
            break;
          }
          case 18: {
            if (uploadReference_ == null) {
              UploadReference = new global::Google.Streetview.Publish.V1.UploadRef();
            }
            input.ReadMessage(UploadReference);
            break;
          }
          case 26: {
            DownloadUrl = input.ReadString();
            break;
          }
          case 34: {
            if (pose_ == null) {
              Pose = new global::Google.Streetview.Publish.V1.Pose();
            }
            input.ReadMessage(Pose);
            break;
          }
          case 42: {
            connections_.AddEntriesFrom(input, _repeated_connections_codec);
            break;
          }
          case 50: {
            if (captureTime_ == null) {
              CaptureTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CaptureTime);
            break;
          }
          case 58: {
            places_.AddEntriesFrom(input, _repeated_places_codec);
            break;
          }
          case 74: {
            ThumbnailUrl = input.ReadString();
            break;
          }
          case 80: {
            ViewCount = input.ReadInt64();
            break;
          }
          case 90: {
            ShareLink = input.ReadString();
            break;
          }
          case 96: {
            TransferStatus = (global::Google.Streetview.Publish.V1.Photo.Types.TransferStatus) input.ReadEnum();
            break;
          }
          case 104: {
            MapsPublishStatus = (global::Google.Streetview.Publish.V1.Photo.Types.MapsPublishStatus) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (photoId_ == null) {
              PhotoId = new global::Google.Streetview.Publish.V1.PhotoId();
            }
            input.ReadMessage(PhotoId);
            break;
          }
          case 18: {
            if (uploadReference_ == null) {
              UploadReference = new global::Google.Streetview.Publish.V1.UploadRef();
            }
            input.ReadMessage(UploadReference);
            break;
          }
          case 26: {
            DownloadUrl = input.ReadString();
            break;
          }
          case 34: {
            if (pose_ == null) {
              Pose = new global::Google.Streetview.Publish.V1.Pose();
            }
            input.ReadMessage(Pose);
            break;
          }
          case 42: {
            connections_.AddEntriesFrom(ref input, _repeated_connections_codec);
            break;
          }
          case 50: {
            if (captureTime_ == null) {
              CaptureTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CaptureTime);
            break;
          }
          case 58: {
            places_.AddEntriesFrom(ref input, _repeated_places_codec);
            break;
          }
          case 74: {
            ThumbnailUrl = input.ReadString();
            break;
          }
          case 80: {
            ViewCount = input.ReadInt64();
            break;
          }
          case 90: {
            ShareLink = input.ReadString();
            break;
          }
          case 96: {
            TransferStatus = (global::Google.Streetview.Publish.V1.Photo.Types.TransferStatus) input.ReadEnum();
            break;
          }
          case 104: {
            MapsPublishStatus = (global::Google.Streetview.Publish.V1.Photo.Types.MapsPublishStatus) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Photo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Status of rights transfer.
      /// </summary>
      public enum TransferStatus {
        /// <summary>
        /// The status of this transfer is unspecified.
        /// </summary>
        [pbr::OriginalName("TRANSFER_STATUS_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// This photo has never been in a transfer.
        /// </summary>
        [pbr::OriginalName("NEVER_TRANSFERRED")] NeverTransferred = 1,
        /// <summary>
        /// This photo transfer has been initiated, but the receiver has not yet
        /// responded.
        /// </summary>
        [pbr::OriginalName("PENDING")] Pending = 2,
        /// <summary>
        /// The photo transfer has been completed, and this photo has been
        /// transferred to the recipient.
        /// </summary>
        [pbr::OriginalName("COMPLETED")] Completed = 3,
        /// <summary>
        /// The recipient rejected this photo transfer.
        /// </summary>
        [pbr::OriginalName("REJECTED")] Rejected = 4,
        /// <summary>
        /// The photo transfer expired before the recipient took any action.
        /// </summary>
        [pbr::OriginalName("EXPIRED")] Expired = 5,
        /// <summary>
        /// The sender cancelled this photo transfer.
        /// </summary>
        [pbr::OriginalName("CANCELLED")] Cancelled = 6,
        /// <summary>
        /// The recipient owns this photo due to a rights transfer.
        /// </summary>
        [pbr::OriginalName("RECEIVED_VIA_TRANSFER")] ReceivedViaTransfer = 7,
      }

      /// <summary>
      /// Publication status of the photo in Google Maps.
      /// </summary>
      public enum MapsPublishStatus {
        /// <summary>
        /// The status of the photo is unknown.
        /// </summary>
        [pbr::OriginalName("UNSPECIFIED_MAPS_PUBLISH_STATUS")] UnspecifiedMapsPublishStatus = 0,
        /// <summary>
        /// The photo is published to the public through Google Maps.
        /// </summary>
        [pbr::OriginalName("PUBLISHED")] Published = 1,
        /// <summary>
        /// The photo has been rejected for an unknown reason.
        /// </summary>
        [pbr::OriginalName("REJECTED_UNKNOWN")] RejectedUnknown = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
