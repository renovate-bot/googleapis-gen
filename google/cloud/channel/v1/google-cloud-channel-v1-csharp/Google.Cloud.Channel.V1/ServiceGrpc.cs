// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/channel/v1/service.proto
// </auto-generated>
// Original file comments:
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Channel.V1 {
  /// <summary>
  /// CloudChannelService lets Google cloud resellers and distributors manage
  /// their customers, channel partners, entitlements, and reports.
  ///
  /// Using this service:
  /// 1. Resellers and distributors can manage a customer entity.
  /// 2. Distributors can register an authorized reseller in their channel and
  ///    provide them with delegated admin access.
  /// 3. Resellers and distributors can manage customer entitlements.
  ///
  /// CloudChannelService exposes the following resources:
  /// - [Customer][google.cloud.channel.v1.Customer]s: An entity—usually an enterprise—managed by a reseller or
  /// distributor.
  ///
  /// - [Entitlement][google.cloud.channel.v1.Entitlement]s: An entity that provides a customer with the means to use
  /// a service. Entitlements are created or updated as a result of a successful
  /// fulfillment.
  ///
  /// - [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink]s: An entity that identifies links between
  /// distributors and their indirect resellers in a channel.
  /// </summary>
  public static partial class CloudChannelService
  {
    static readonly string __ServiceName = "google.cloud.channel.v1.CloudChannelService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.ListCustomersRequest> __Marshaller_google_cloud_channel_v1_ListCustomersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.ListCustomersRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.ListCustomersResponse> __Marshaller_google_cloud_channel_v1_ListCustomersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.ListCustomersResponse.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.GetCustomerRequest> __Marshaller_google_cloud_channel_v1_GetCustomerRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.GetCustomerRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.Customer> __Marshaller_google_cloud_channel_v1_Customer = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.Customer.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.CheckCloudIdentityAccountsExistRequest> __Marshaller_google_cloud_channel_v1_CheckCloudIdentityAccountsExistRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.CheckCloudIdentityAccountsExistRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.CheckCloudIdentityAccountsExistResponse> __Marshaller_google_cloud_channel_v1_CheckCloudIdentityAccountsExistResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.CheckCloudIdentityAccountsExistResponse.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.CreateCustomerRequest> __Marshaller_google_cloud_channel_v1_CreateCustomerRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.CreateCustomerRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.UpdateCustomerRequest> __Marshaller_google_cloud_channel_v1_UpdateCustomerRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.UpdateCustomerRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.DeleteCustomerRequest> __Marshaller_google_cloud_channel_v1_DeleteCustomerRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.DeleteCustomerRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.ImportCustomerRequest> __Marshaller_google_cloud_channel_v1_ImportCustomerRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.ImportCustomerRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.ProvisionCloudIdentityRequest> __Marshaller_google_cloud_channel_v1_ProvisionCloudIdentityRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.ProvisionCloudIdentityRequest.Parser));
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.ListEntitlementsRequest> __Marshaller_google_cloud_channel_v1_ListEntitlementsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.ListEntitlementsRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.ListEntitlementsResponse> __Marshaller_google_cloud_channel_v1_ListEntitlementsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.ListEntitlementsResponse.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.ListTransferableSkusRequest> __Marshaller_google_cloud_channel_v1_ListTransferableSkusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.ListTransferableSkusRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.ListTransferableSkusResponse> __Marshaller_google_cloud_channel_v1_ListTransferableSkusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.ListTransferableSkusResponse.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.ListTransferableOffersRequest> __Marshaller_google_cloud_channel_v1_ListTransferableOffersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.ListTransferableOffersRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.ListTransferableOffersResponse> __Marshaller_google_cloud_channel_v1_ListTransferableOffersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.ListTransferableOffersResponse.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.GetEntitlementRequest> __Marshaller_google_cloud_channel_v1_GetEntitlementRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.GetEntitlementRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.Entitlement> __Marshaller_google_cloud_channel_v1_Entitlement = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.Entitlement.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.CreateEntitlementRequest> __Marshaller_google_cloud_channel_v1_CreateEntitlementRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.CreateEntitlementRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.ChangeParametersRequest> __Marshaller_google_cloud_channel_v1_ChangeParametersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.ChangeParametersRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.ChangeRenewalSettingsRequest> __Marshaller_google_cloud_channel_v1_ChangeRenewalSettingsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.ChangeRenewalSettingsRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.ChangeOfferRequest> __Marshaller_google_cloud_channel_v1_ChangeOfferRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.ChangeOfferRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.StartPaidServiceRequest> __Marshaller_google_cloud_channel_v1_StartPaidServiceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.StartPaidServiceRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.SuspendEntitlementRequest> __Marshaller_google_cloud_channel_v1_SuspendEntitlementRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.SuspendEntitlementRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.CancelEntitlementRequest> __Marshaller_google_cloud_channel_v1_CancelEntitlementRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.CancelEntitlementRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.ActivateEntitlementRequest> __Marshaller_google_cloud_channel_v1_ActivateEntitlementRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.ActivateEntitlementRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.TransferEntitlementsRequest> __Marshaller_google_cloud_channel_v1_TransferEntitlementsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.TransferEntitlementsRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.TransferEntitlementsToGoogleRequest> __Marshaller_google_cloud_channel_v1_TransferEntitlementsToGoogleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.TransferEntitlementsToGoogleRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.ListChannelPartnerLinksRequest> __Marshaller_google_cloud_channel_v1_ListChannelPartnerLinksRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.ListChannelPartnerLinksRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.ListChannelPartnerLinksResponse> __Marshaller_google_cloud_channel_v1_ListChannelPartnerLinksResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.ListChannelPartnerLinksResponse.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.GetChannelPartnerLinkRequest> __Marshaller_google_cloud_channel_v1_GetChannelPartnerLinkRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.GetChannelPartnerLinkRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.ChannelPartnerLink> __Marshaller_google_cloud_channel_v1_ChannelPartnerLink = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.ChannelPartnerLink.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.CreateChannelPartnerLinkRequest> __Marshaller_google_cloud_channel_v1_CreateChannelPartnerLinkRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.CreateChannelPartnerLinkRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.UpdateChannelPartnerLinkRequest> __Marshaller_google_cloud_channel_v1_UpdateChannelPartnerLinkRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.UpdateChannelPartnerLinkRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.LookupOfferRequest> __Marshaller_google_cloud_channel_v1_LookupOfferRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.LookupOfferRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.Offer> __Marshaller_google_cloud_channel_v1_Offer = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.Offer.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.ListProductsRequest> __Marshaller_google_cloud_channel_v1_ListProductsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.ListProductsRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.ListProductsResponse> __Marshaller_google_cloud_channel_v1_ListProductsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.ListProductsResponse.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.ListSkusRequest> __Marshaller_google_cloud_channel_v1_ListSkusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.ListSkusRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.ListSkusResponse> __Marshaller_google_cloud_channel_v1_ListSkusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.ListSkusResponse.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.ListOffersRequest> __Marshaller_google_cloud_channel_v1_ListOffersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.ListOffersRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.ListOffersResponse> __Marshaller_google_cloud_channel_v1_ListOffersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.ListOffersResponse.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.ListPurchasableSkusRequest> __Marshaller_google_cloud_channel_v1_ListPurchasableSkusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.ListPurchasableSkusRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.ListPurchasableSkusResponse> __Marshaller_google_cloud_channel_v1_ListPurchasableSkusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.ListPurchasableSkusResponse.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.ListPurchasableOffersRequest> __Marshaller_google_cloud_channel_v1_ListPurchasableOffersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.ListPurchasableOffersRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.ListPurchasableOffersResponse> __Marshaller_google_cloud_channel_v1_ListPurchasableOffersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.ListPurchasableOffersResponse.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.RegisterSubscriberRequest> __Marshaller_google_cloud_channel_v1_RegisterSubscriberRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.RegisterSubscriberRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.RegisterSubscriberResponse> __Marshaller_google_cloud_channel_v1_RegisterSubscriberResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.RegisterSubscriberResponse.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.UnregisterSubscriberRequest> __Marshaller_google_cloud_channel_v1_UnregisterSubscriberRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.UnregisterSubscriberRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.UnregisterSubscriberResponse> __Marshaller_google_cloud_channel_v1_UnregisterSubscriberResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.UnregisterSubscriberResponse.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.ListSubscribersRequest> __Marshaller_google_cloud_channel_v1_ListSubscribersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.ListSubscribersRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Channel.V1.ListSubscribersResponse> __Marshaller_google_cloud_channel_v1_ListSubscribersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Channel.V1.ListSubscribersResponse.Parser));

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.ListCustomersRequest, global::Google.Cloud.Channel.V1.ListCustomersResponse> __Method_ListCustomers = new grpc::Method<global::Google.Cloud.Channel.V1.ListCustomersRequest, global::Google.Cloud.Channel.V1.ListCustomersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCustomers",
        __Marshaller_google_cloud_channel_v1_ListCustomersRequest,
        __Marshaller_google_cloud_channel_v1_ListCustomersResponse);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.GetCustomerRequest, global::Google.Cloud.Channel.V1.Customer> __Method_GetCustomer = new grpc::Method<global::Google.Cloud.Channel.V1.GetCustomerRequest, global::Google.Cloud.Channel.V1.Customer>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCustomer",
        __Marshaller_google_cloud_channel_v1_GetCustomerRequest,
        __Marshaller_google_cloud_channel_v1_Customer);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.CheckCloudIdentityAccountsExistRequest, global::Google.Cloud.Channel.V1.CheckCloudIdentityAccountsExistResponse> __Method_CheckCloudIdentityAccountsExist = new grpc::Method<global::Google.Cloud.Channel.V1.CheckCloudIdentityAccountsExistRequest, global::Google.Cloud.Channel.V1.CheckCloudIdentityAccountsExistResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CheckCloudIdentityAccountsExist",
        __Marshaller_google_cloud_channel_v1_CheckCloudIdentityAccountsExistRequest,
        __Marshaller_google_cloud_channel_v1_CheckCloudIdentityAccountsExistResponse);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.CreateCustomerRequest, global::Google.Cloud.Channel.V1.Customer> __Method_CreateCustomer = new grpc::Method<global::Google.Cloud.Channel.V1.CreateCustomerRequest, global::Google.Cloud.Channel.V1.Customer>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCustomer",
        __Marshaller_google_cloud_channel_v1_CreateCustomerRequest,
        __Marshaller_google_cloud_channel_v1_Customer);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.UpdateCustomerRequest, global::Google.Cloud.Channel.V1.Customer> __Method_UpdateCustomer = new grpc::Method<global::Google.Cloud.Channel.V1.UpdateCustomerRequest, global::Google.Cloud.Channel.V1.Customer>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCustomer",
        __Marshaller_google_cloud_channel_v1_UpdateCustomerRequest,
        __Marshaller_google_cloud_channel_v1_Customer);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.DeleteCustomerRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteCustomer = new grpc::Method<global::Google.Cloud.Channel.V1.DeleteCustomerRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCustomer",
        __Marshaller_google_cloud_channel_v1_DeleteCustomerRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.ImportCustomerRequest, global::Google.Cloud.Channel.V1.Customer> __Method_ImportCustomer = new grpc::Method<global::Google.Cloud.Channel.V1.ImportCustomerRequest, global::Google.Cloud.Channel.V1.Customer>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ImportCustomer",
        __Marshaller_google_cloud_channel_v1_ImportCustomerRequest,
        __Marshaller_google_cloud_channel_v1_Customer);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.ProvisionCloudIdentityRequest, global::Google.LongRunning.Operation> __Method_ProvisionCloudIdentity = new grpc::Method<global::Google.Cloud.Channel.V1.ProvisionCloudIdentityRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ProvisionCloudIdentity",
        __Marshaller_google_cloud_channel_v1_ProvisionCloudIdentityRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.ListEntitlementsRequest, global::Google.Cloud.Channel.V1.ListEntitlementsResponse> __Method_ListEntitlements = new grpc::Method<global::Google.Cloud.Channel.V1.ListEntitlementsRequest, global::Google.Cloud.Channel.V1.ListEntitlementsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListEntitlements",
        __Marshaller_google_cloud_channel_v1_ListEntitlementsRequest,
        __Marshaller_google_cloud_channel_v1_ListEntitlementsResponse);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.ListTransferableSkusRequest, global::Google.Cloud.Channel.V1.ListTransferableSkusResponse> __Method_ListTransferableSkus = new grpc::Method<global::Google.Cloud.Channel.V1.ListTransferableSkusRequest, global::Google.Cloud.Channel.V1.ListTransferableSkusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListTransferableSkus",
        __Marshaller_google_cloud_channel_v1_ListTransferableSkusRequest,
        __Marshaller_google_cloud_channel_v1_ListTransferableSkusResponse);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.ListTransferableOffersRequest, global::Google.Cloud.Channel.V1.ListTransferableOffersResponse> __Method_ListTransferableOffers = new grpc::Method<global::Google.Cloud.Channel.V1.ListTransferableOffersRequest, global::Google.Cloud.Channel.V1.ListTransferableOffersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListTransferableOffers",
        __Marshaller_google_cloud_channel_v1_ListTransferableOffersRequest,
        __Marshaller_google_cloud_channel_v1_ListTransferableOffersResponse);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.GetEntitlementRequest, global::Google.Cloud.Channel.V1.Entitlement> __Method_GetEntitlement = new grpc::Method<global::Google.Cloud.Channel.V1.GetEntitlementRequest, global::Google.Cloud.Channel.V1.Entitlement>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetEntitlement",
        __Marshaller_google_cloud_channel_v1_GetEntitlementRequest,
        __Marshaller_google_cloud_channel_v1_Entitlement);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.CreateEntitlementRequest, global::Google.LongRunning.Operation> __Method_CreateEntitlement = new grpc::Method<global::Google.Cloud.Channel.V1.CreateEntitlementRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateEntitlement",
        __Marshaller_google_cloud_channel_v1_CreateEntitlementRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.ChangeParametersRequest, global::Google.LongRunning.Operation> __Method_ChangeParameters = new grpc::Method<global::Google.Cloud.Channel.V1.ChangeParametersRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChangeParameters",
        __Marshaller_google_cloud_channel_v1_ChangeParametersRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.ChangeRenewalSettingsRequest, global::Google.LongRunning.Operation> __Method_ChangeRenewalSettings = new grpc::Method<global::Google.Cloud.Channel.V1.ChangeRenewalSettingsRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChangeRenewalSettings",
        __Marshaller_google_cloud_channel_v1_ChangeRenewalSettingsRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.ChangeOfferRequest, global::Google.LongRunning.Operation> __Method_ChangeOffer = new grpc::Method<global::Google.Cloud.Channel.V1.ChangeOfferRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChangeOffer",
        __Marshaller_google_cloud_channel_v1_ChangeOfferRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.StartPaidServiceRequest, global::Google.LongRunning.Operation> __Method_StartPaidService = new grpc::Method<global::Google.Cloud.Channel.V1.StartPaidServiceRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartPaidService",
        __Marshaller_google_cloud_channel_v1_StartPaidServiceRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.SuspendEntitlementRequest, global::Google.LongRunning.Operation> __Method_SuspendEntitlement = new grpc::Method<global::Google.Cloud.Channel.V1.SuspendEntitlementRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SuspendEntitlement",
        __Marshaller_google_cloud_channel_v1_SuspendEntitlementRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.CancelEntitlementRequest, global::Google.LongRunning.Operation> __Method_CancelEntitlement = new grpc::Method<global::Google.Cloud.Channel.V1.CancelEntitlementRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CancelEntitlement",
        __Marshaller_google_cloud_channel_v1_CancelEntitlementRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.ActivateEntitlementRequest, global::Google.LongRunning.Operation> __Method_ActivateEntitlement = new grpc::Method<global::Google.Cloud.Channel.V1.ActivateEntitlementRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ActivateEntitlement",
        __Marshaller_google_cloud_channel_v1_ActivateEntitlementRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.TransferEntitlementsRequest, global::Google.LongRunning.Operation> __Method_TransferEntitlements = new grpc::Method<global::Google.Cloud.Channel.V1.TransferEntitlementsRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TransferEntitlements",
        __Marshaller_google_cloud_channel_v1_TransferEntitlementsRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.TransferEntitlementsToGoogleRequest, global::Google.LongRunning.Operation> __Method_TransferEntitlementsToGoogle = new grpc::Method<global::Google.Cloud.Channel.V1.TransferEntitlementsToGoogleRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TransferEntitlementsToGoogle",
        __Marshaller_google_cloud_channel_v1_TransferEntitlementsToGoogleRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.ListChannelPartnerLinksRequest, global::Google.Cloud.Channel.V1.ListChannelPartnerLinksResponse> __Method_ListChannelPartnerLinks = new grpc::Method<global::Google.Cloud.Channel.V1.ListChannelPartnerLinksRequest, global::Google.Cloud.Channel.V1.ListChannelPartnerLinksResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListChannelPartnerLinks",
        __Marshaller_google_cloud_channel_v1_ListChannelPartnerLinksRequest,
        __Marshaller_google_cloud_channel_v1_ListChannelPartnerLinksResponse);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.GetChannelPartnerLinkRequest, global::Google.Cloud.Channel.V1.ChannelPartnerLink> __Method_GetChannelPartnerLink = new grpc::Method<global::Google.Cloud.Channel.V1.GetChannelPartnerLinkRequest, global::Google.Cloud.Channel.V1.ChannelPartnerLink>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetChannelPartnerLink",
        __Marshaller_google_cloud_channel_v1_GetChannelPartnerLinkRequest,
        __Marshaller_google_cloud_channel_v1_ChannelPartnerLink);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.CreateChannelPartnerLinkRequest, global::Google.Cloud.Channel.V1.ChannelPartnerLink> __Method_CreateChannelPartnerLink = new grpc::Method<global::Google.Cloud.Channel.V1.CreateChannelPartnerLinkRequest, global::Google.Cloud.Channel.V1.ChannelPartnerLink>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateChannelPartnerLink",
        __Marshaller_google_cloud_channel_v1_CreateChannelPartnerLinkRequest,
        __Marshaller_google_cloud_channel_v1_ChannelPartnerLink);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.UpdateChannelPartnerLinkRequest, global::Google.Cloud.Channel.V1.ChannelPartnerLink> __Method_UpdateChannelPartnerLink = new grpc::Method<global::Google.Cloud.Channel.V1.UpdateChannelPartnerLinkRequest, global::Google.Cloud.Channel.V1.ChannelPartnerLink>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateChannelPartnerLink",
        __Marshaller_google_cloud_channel_v1_UpdateChannelPartnerLinkRequest,
        __Marshaller_google_cloud_channel_v1_ChannelPartnerLink);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.LookupOfferRequest, global::Google.Cloud.Channel.V1.Offer> __Method_LookupOffer = new grpc::Method<global::Google.Cloud.Channel.V1.LookupOfferRequest, global::Google.Cloud.Channel.V1.Offer>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LookupOffer",
        __Marshaller_google_cloud_channel_v1_LookupOfferRequest,
        __Marshaller_google_cloud_channel_v1_Offer);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.ListProductsRequest, global::Google.Cloud.Channel.V1.ListProductsResponse> __Method_ListProducts = new grpc::Method<global::Google.Cloud.Channel.V1.ListProductsRequest, global::Google.Cloud.Channel.V1.ListProductsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListProducts",
        __Marshaller_google_cloud_channel_v1_ListProductsRequest,
        __Marshaller_google_cloud_channel_v1_ListProductsResponse);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.ListSkusRequest, global::Google.Cloud.Channel.V1.ListSkusResponse> __Method_ListSkus = new grpc::Method<global::Google.Cloud.Channel.V1.ListSkusRequest, global::Google.Cloud.Channel.V1.ListSkusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSkus",
        __Marshaller_google_cloud_channel_v1_ListSkusRequest,
        __Marshaller_google_cloud_channel_v1_ListSkusResponse);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.ListOffersRequest, global::Google.Cloud.Channel.V1.ListOffersResponse> __Method_ListOffers = new grpc::Method<global::Google.Cloud.Channel.V1.ListOffersRequest, global::Google.Cloud.Channel.V1.ListOffersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListOffers",
        __Marshaller_google_cloud_channel_v1_ListOffersRequest,
        __Marshaller_google_cloud_channel_v1_ListOffersResponse);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.ListPurchasableSkusRequest, global::Google.Cloud.Channel.V1.ListPurchasableSkusResponse> __Method_ListPurchasableSkus = new grpc::Method<global::Google.Cloud.Channel.V1.ListPurchasableSkusRequest, global::Google.Cloud.Channel.V1.ListPurchasableSkusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListPurchasableSkus",
        __Marshaller_google_cloud_channel_v1_ListPurchasableSkusRequest,
        __Marshaller_google_cloud_channel_v1_ListPurchasableSkusResponse);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.ListPurchasableOffersRequest, global::Google.Cloud.Channel.V1.ListPurchasableOffersResponse> __Method_ListPurchasableOffers = new grpc::Method<global::Google.Cloud.Channel.V1.ListPurchasableOffersRequest, global::Google.Cloud.Channel.V1.ListPurchasableOffersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListPurchasableOffers",
        __Marshaller_google_cloud_channel_v1_ListPurchasableOffersRequest,
        __Marshaller_google_cloud_channel_v1_ListPurchasableOffersResponse);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.RegisterSubscriberRequest, global::Google.Cloud.Channel.V1.RegisterSubscriberResponse> __Method_RegisterSubscriber = new grpc::Method<global::Google.Cloud.Channel.V1.RegisterSubscriberRequest, global::Google.Cloud.Channel.V1.RegisterSubscriberResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegisterSubscriber",
        __Marshaller_google_cloud_channel_v1_RegisterSubscriberRequest,
        __Marshaller_google_cloud_channel_v1_RegisterSubscriberResponse);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.UnregisterSubscriberRequest, global::Google.Cloud.Channel.V1.UnregisterSubscriberResponse> __Method_UnregisterSubscriber = new grpc::Method<global::Google.Cloud.Channel.V1.UnregisterSubscriberRequest, global::Google.Cloud.Channel.V1.UnregisterSubscriberResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnregisterSubscriber",
        __Marshaller_google_cloud_channel_v1_UnregisterSubscriberRequest,
        __Marshaller_google_cloud_channel_v1_UnregisterSubscriberResponse);

    static readonly grpc::Method<global::Google.Cloud.Channel.V1.ListSubscribersRequest, global::Google.Cloud.Channel.V1.ListSubscribersResponse> __Method_ListSubscribers = new grpc::Method<global::Google.Cloud.Channel.V1.ListSubscribersRequest, global::Google.Cloud.Channel.V1.ListSubscribersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSubscribers",
        __Marshaller_google_cloud_channel_v1_ListSubscribersRequest,
        __Marshaller_google_cloud_channel_v1_ListSubscribersResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Channel.V1.ServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CloudChannelService</summary>
    [grpc::BindServiceMethod(typeof(CloudChannelService), "BindService")]
    public abstract partial class CloudChannelServiceBase
    {
      /// <summary>
      /// List [Customer][google.cloud.channel.v1.Customer]s.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      ///
      /// Return value:
      /// List of [Customer][google.cloud.channel.v1.Customer]s, or an empty list if there are no customers.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Channel.V1.ListCustomersResponse> ListCustomers(global::Google.Cloud.Channel.V1.ListCustomersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the requested [Customer][google.cloud.channel.v1.Customer] resource.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: The customer resource doesn't exist. Usually the result of an
      /// invalid name parameter.
      ///
      /// Return value:
      /// The [Customer][google.cloud.channel.v1.Customer] resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Channel.V1.Customer> GetCustomer(global::Google.Cloud.Channel.V1.GetCustomerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Confirms the existence of Cloud Identity accounts based on the domain and
      /// if the Cloud Identity accounts are owned by the reseller.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * INVALID_VALUE: Invalid domain value in the request.
      ///
      /// Return value:
      /// A list of [CloudIdentityCustomerAccount][google.cloud.channel.v1.CloudIdentityCustomerAccount] resources for the domain (may be
      /// empty)
      ///
      /// Note: in the v1alpha1 version of the API, a NOT_FOUND error returns if
      /// no [CloudIdentityCustomerAccount][google.cloud.channel.v1.CloudIdentityCustomerAccount] resources match the domain.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Channel.V1.CheckCloudIdentityAccountsExistResponse> CheckCloudIdentityAccountsExist(global::Google.Cloud.Channel.V1.CheckCloudIdentityAccountsExistRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new [Customer][google.cloud.channel.v1.Customer] resource under the reseller or distributor
      /// account.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT:
      ///     * Required request parameters are missing or invalid.
      ///     * Domain field value doesn't match the primary email domain.
      ///
      /// Return value:
      /// The newly created [Customer][google.cloud.channel.v1.Customer] resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Channel.V1.Customer> CreateCustomer(global::Google.Cloud.Channel.V1.CreateCustomerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an existing [Customer][google.cloud.channel.v1.Customer] resource for the reseller or
      /// distributor.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: No [Customer][google.cloud.channel.v1.Customer] resource found for the name in the request.
      ///
      /// Return value:
      /// The updated [Customer][google.cloud.channel.v1.Customer] resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Channel.V1.Customer> UpdateCustomer(global::Google.Cloud.Channel.V1.UpdateCustomerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the given [Customer][google.cloud.channel.v1.Customer] permanently.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The account making the request does not own
      /// this customer.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * FAILED_PRECONDITION: The customer has existing entitlements.
      /// * NOT_FOUND: No [Customer][google.cloud.channel.v1.Customer] resource found for the name in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteCustomer(global::Google.Cloud.Channel.V1.DeleteCustomerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Imports a [Customer][google.cloud.channel.v1.Customer] from the Cloud Identity associated with the provided
      /// Cloud Identity ID or domain before a TransferEntitlements call. If a
      /// linked Customer already exists and overwrite_if_exists is true, it will
      /// update that Customer's data.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * NOT_FOUND: Cloud Identity doesn't exist or was deleted.
      /// * INVALID_ARGUMENT: Required parameters are missing, or the auth_token is
      /// expired or invalid.
      /// * ALREADY_EXISTS: A customer already exists and has conflicting critical
      /// fields. Requires an overwrite.
      ///
      /// Return value:
      /// The [Customer][google.cloud.channel.v1.Customer].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Channel.V1.Customer> ImportCustomer(global::Google.Cloud.Channel.V1.ImportCustomerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a Cloud Identity for the given customer using the customer's
      /// information, or the information provided here.
      ///
      /// Possible error codes:
      ///
      /// *  PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// *  INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// *  NOT_FOUND: The customer was not found.
      /// *  ALREADY_EXISTS: The customer's primary email already exists. Retry
      ///    after changing the customer's primary contact email.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata contains an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> ProvisionCloudIdentity(global::Google.Cloud.Channel.V1.ProvisionCloudIdentityRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists [Entitlement][google.cloud.channel.v1.Entitlement]s belonging to a customer.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      ///
      /// Return value:
      /// A list of the customer's [Entitlement][google.cloud.channel.v1.Entitlement]s.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Channel.V1.ListEntitlementsResponse> ListEntitlements(global::Google.Cloud.Channel.V1.ListEntitlementsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List [TransferableSku][google.cloud.channel.v1.TransferableSku]s of a customer based on the Cloud Identity ID or
      /// Customer Name in the request.
      ///
      /// Use this method to list the entitlements information of an
      /// unowned customer. You should provide the customer's
      /// Cloud Identity ID or Customer Name.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED:
      ///     * The customer doesn't belong to the reseller and has no auth token.
      ///     * The supplied auth token is invalid.
      ///     * The reseller account making the request is different
      ///     from the reseller account in the query.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      ///
      /// Return value:
      /// A list of the customer's [TransferableSku][google.cloud.channel.v1.TransferableSku].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Channel.V1.ListTransferableSkusResponse> ListTransferableSkus(global::Google.Cloud.Channel.V1.ListTransferableSkusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List [TransferableOffer][google.cloud.channel.v1.TransferableOffer]s of a customer based on Cloud Identity ID or
      /// Customer Name in the request.
      ///
      /// Use this method when a reseller gets the entitlement information of an
      /// unowned customer. The reseller should provide the customer's
      /// Cloud Identity ID or Customer Name.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED:
      ///     * The customer doesn't belong to the reseller and has no auth token.
      ///     * The supplied auth token is invalid.
      ///     * The reseller account making the request is different
      ///     from the reseller account in the query.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      ///
      /// Return value:
      /// List of [TransferableOffer][google.cloud.channel.v1.TransferableOffer] for the given customer and SKU.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Channel.V1.ListTransferableOffersResponse> ListTransferableOffers(global::Google.Cloud.Channel.V1.ListTransferableOffersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the requested [Entitlement][google.cloud.channel.v1.Entitlement] resource.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: The customer entitlement was not found.
      ///
      /// Return value:
      /// The requested [Entitlement][google.cloud.channel.v1.Entitlement] resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Channel.V1.Entitlement> GetEntitlement(global::Google.Cloud.Channel.V1.GetEntitlementRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates an entitlement for a customer.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT:
      ///     * Required request parameters are missing or invalid.
      ///     * There is already a customer entitlement for a SKU from the same
      ///     product family.
      /// * INVALID_VALUE: Make sure the OfferId is valid. If it is, contact
      /// Google Channel support for further troubleshooting.
      /// * NOT_FOUND: The customer or offer resource was not found.
      /// * ALREADY_EXISTS:
      ///     * The SKU was already purchased for the customer.
      ///     * The customer's primary email already exists. Retry
      ///     after changing the customer's primary contact email.
      /// * CONDITION_NOT_MET or FAILED_PRECONDITION:
      ///     * The domain required for purchasing a SKU has not been verified.
      ///     * A pre-requisite SKU required to purchase an Add-On SKU is missing.
      ///     For example, Google Workspace Business Starter is required to purchase
      ///     Vault or Drive.
      ///     * (Developer accounts only) Reseller and resold domain must meet the
      ///     following naming requirements:
      ///         * Domain names must start with goog-test.
      ///         * Domain names must include the reseller domain.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateEntitlement(global::Google.Cloud.Channel.V1.CreateEntitlementRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Change parameters of the entitlement.
      ///
      /// An entitlement update is a long-running operation and it updates the
      /// entitlement as a result of fulfillment.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// For example, the number of seats being changed is greater than the allowed
      /// number of max seats, or decreasing seats for a commitment based plan.
      /// * NOT_FOUND: Entitlement resource not found.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> ChangeParameters(global::Google.Cloud.Channel.V1.ChangeParametersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the renewal settings for an existing customer entitlement.
      ///
      /// An entitlement update is a long-running operation and it updates the
      /// entitlement as a result of fulfillment.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Entitlement resource not found.
      /// * NOT_COMMITMENT_PLAN: Renewal Settings are only applicable for a
      /// commitment plan. Can't enable or disable renewals for non-commitment plans.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      ///   Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> ChangeRenewalSettings(global::Google.Cloud.Channel.V1.ChangeRenewalSettingsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the Offer for an existing customer entitlement.
      ///
      /// An entitlement update is a long-running operation and it updates the
      /// entitlement as a result of fulfillment.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Offer or Entitlement resource not found.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> ChangeOffer(global::Google.Cloud.Channel.V1.ChangeOfferRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Starts paid service for a trial entitlement.
      ///
      /// Starts paid service for a trial entitlement immediately. This method is
      /// only applicable if a plan is set up for a trial entitlement but has some
      /// trial days remaining.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Entitlement resource not found.
      /// * FAILED_PRECONDITION/NOT_IN_TRIAL: This method only works for
      /// entitlement on trial plans.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> StartPaidService(global::Google.Cloud.Channel.V1.StartPaidServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Suspends a previously fulfilled entitlement.
      ///
      /// An entitlement suspension is a long-running operation.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Entitlement resource not found.
      /// * NOT_ACTIVE: Entitlement is not active.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> SuspendEntitlement(global::Google.Cloud.Channel.V1.SuspendEntitlementRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Cancels a previously fulfilled entitlement.
      ///
      /// An entitlement cancellation is a long-running operation.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * FAILED_PRECONDITION: There are Google Cloud projects linked to the
      /// Google Cloud entitlement's Cloud Billing subaccount.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Entitlement resource not found.
      /// * DELETION_TYPE_NOT_ALLOWED: Cancel is only allowed for Google Workspace
      /// add-ons, or entitlements for Google Cloud's development platform.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The response will contain
      /// google.protobuf.Empty on success. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CancelEntitlement(global::Google.Cloud.Channel.V1.CancelEntitlementRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Activates a previously suspended entitlement. Entitlements suspended for
      /// pending ToS acceptance can't be activated using this method.
      ///
      /// An entitlement activation is a long-running operation and it updates
      /// the state of the customer entitlement.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Entitlement resource not found.
      /// * SUSPENSION_NOT_RESELLER_INITIATED: Can only activate reseller-initiated
      /// suspensions and entitlements that have accepted the TOS.
      /// * NOT_SUSPENDED: Can only activate suspended entitlements not in an ACTIVE
      /// state.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> ActivateEntitlement(global::Google.Cloud.Channel.V1.ActivateEntitlementRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Transfers customer entitlements to new reseller.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: The customer or offer resource was not found.
      /// * ALREADY_EXISTS: The SKU was already transferred for the customer.
      /// * CONDITION_NOT_MET or FAILED_PRECONDITION:
      ///     * The SKU requires domain verification to transfer, but the domain is
      ///     not verified.
      ///     * An Add-On SKU (example, Vault or Drive) is missing the
      ///     pre-requisite SKU (example, G Suite Basic).
      ///     * (Developer accounts only) Reseller and resold domain must meet the
      ///     following naming requirements:
      ///         * Domain names must start with goog-test.
      ///         * Domain names must include the reseller domain.
      ///     * Specify all transferring entitlements.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> TransferEntitlements(global::Google.Cloud.Channel.V1.TransferEntitlementsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Transfers customer entitlements from their current reseller to Google.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: The customer or offer resource was not found.
      /// * ALREADY_EXISTS: The SKU was already transferred for the customer.
      /// * CONDITION_NOT_MET or FAILED_PRECONDITION:
      ///     * The SKU requires domain verification to transfer, but the domain is
      ///     not verified.
      ///     * An Add-On SKU (example, Vault or Drive) is missing the
      ///     pre-requisite SKU (example, G Suite Basic).
      ///     * (Developer accounts only) Reseller and resold domain must meet the
      ///     following naming requirements:
      ///         * Domain names must start with goog-test.
      ///         * Domain names must include the reseller domain.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The response will contain
      /// google.protobuf.Empty on success. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> TransferEntitlementsToGoogle(global::Google.Cloud.Channel.V1.TransferEntitlementsToGoogleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink]s belonging to a distributor.
      /// You must be a distributor to call this method.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      ///
      /// Return value:
      /// The list of the distributor account's [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink] resources.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Channel.V1.ListChannelPartnerLinksResponse> ListChannelPartnerLinks(global::Google.Cloud.Channel.V1.ListChannelPartnerLinksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the requested [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink] resource.
      /// You must be a distributor to call this method.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: ChannelPartnerLink resource not found because of an
      /// invalid channel partner link name.
      ///
      /// Return value:
      /// The [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink] resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Channel.V1.ChannelPartnerLink> GetChannelPartnerLink(global::Google.Cloud.Channel.V1.GetChannelPartnerLinkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Initiates a channel partner link between a distributor and a reseller, or
      /// between resellers in an n-tier reseller channel.
      /// Invited partners need to follow the invite_link_uri provided in the
      /// response to accept. After accepting the invitation, a link is set up
      /// between the two parties.
      /// You must be a distributor to call this method.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * ALREADY_EXISTS: The ChannelPartnerLink sent in the request already
      /// exists.
      /// * NOT_FOUND: No Cloud Identity customer exists for provided domain.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The new [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink] resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Channel.V1.ChannelPartnerLink> CreateChannelPartnerLink(global::Google.Cloud.Channel.V1.CreateChannelPartnerLinkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a channel partner link. Distributors call this method to change a
      /// link's status. For example, to suspend a partner link.
      /// You must be a distributor to call this method.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT:
      ///     * Required request parameters are missing or invalid.
      ///     * Link state cannot change from invited to active or suspended.
      ///     * Cannot send reseller_cloud_identity_id, invite_url, or name in update
      ///     mask.
      /// * NOT_FOUND: ChannelPartnerLink resource not found.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The updated [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink] resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Channel.V1.ChannelPartnerLink> UpdateChannelPartnerLink(global::Google.Cloud.Channel.V1.UpdateChannelPartnerLinkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the requested [Offer][google.cloud.channel.v1.Offer] resource.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The entitlement doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Entitlement or offer was not found.
      ///
      /// Return value:
      /// The [Offer][google.cloud.channel.v1.Offer] resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Channel.V1.Offer> LookupOffer(global::Google.Cloud.Channel.V1.LookupOfferRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the Products the reseller is authorized to sell.
      ///
      /// Possible error codes:
      ///
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Channel.V1.ListProductsResponse> ListProducts(global::Google.Cloud.Channel.V1.ListProductsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the SKUs for a product the reseller is authorized to sell.
      ///
      /// Possible error codes:
      ///
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Channel.V1.ListSkusResponse> ListSkus(global::Google.Cloud.Channel.V1.ListSkusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the Offers the reseller can sell.
      ///
      /// Possible error codes:
      ///
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Channel.V1.ListOffersResponse> ListOffers(global::Google.Cloud.Channel.V1.ListOffersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the following:
      ///
      /// * SKUs that you can purchase for a customer
      /// * SKUs that you can upgrade or downgrade for an entitlement.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Channel.V1.ListPurchasableSkusResponse> ListPurchasableSkus(global::Google.Cloud.Channel.V1.ListPurchasableSkusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the following:
      ///
      /// * Offers that you can purchase for a customer.
      /// * Offers that you can change for an entitlement.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Channel.V1.ListPurchasableOffersResponse> ListPurchasableOffers(global::Google.Cloud.Channel.V1.ListPurchasableOffersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Registers a service account with subscriber privileges on the Cloud Pub/Sub
      /// topic for this Channel Services account. After you create a
      /// subscriber, you get the events through [SubscriberEvent][google.cloud.channel.v1.SubscriberEvent]
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request and the
      /// provided reseller account are different, or the impersonated user
      /// is not a super admin.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The topic name with the registered service email address.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Channel.V1.RegisterSubscriberResponse> RegisterSubscriber(global::Google.Cloud.Channel.V1.RegisterSubscriberRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Unregisters a service account with subscriber privileges on the Cloud
      /// Pub/Sub topic created for this Channel Services account. If there are no
      /// service accounts left with subscriber privileges, this deletes the topic.
      /// You can call ListSubscribers to check for these accounts.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request and the
      /// provided reseller account are different, or the impersonated user
      /// is not a super admin.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: The topic resource doesn't exist.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The topic name that unregistered the service email address.
      /// Returns a success response if the service email address wasn't registered
      /// with the topic.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Channel.V1.UnregisterSubscriberResponse> UnregisterSubscriber(global::Google.Cloud.Channel.V1.UnregisterSubscriberRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists service accounts with subscriber privileges on the Cloud Pub/Sub
      /// topic created for this Channel Services account.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request and the
      /// provided reseller account are different, or the impersonated user
      /// is not a super admin.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: The topic resource doesn't exist.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// A list of service email addresses.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Channel.V1.ListSubscribersResponse> ListSubscribers(global::Google.Cloud.Channel.V1.ListSubscribersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CloudChannelService</summary>
    public partial class CloudChannelServiceClient : grpc::ClientBase<CloudChannelServiceClient>
    {
      /// <summary>Creates a new client for CloudChannelService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CloudChannelServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CloudChannelService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CloudChannelServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CloudChannelServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CloudChannelServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// List [Customer][google.cloud.channel.v1.Customer]s.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      ///
      /// Return value:
      /// List of [Customer][google.cloud.channel.v1.Customer]s, or an empty list if there are no customers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.ListCustomersResponse ListCustomers(global::Google.Cloud.Channel.V1.ListCustomersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCustomers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List [Customer][google.cloud.channel.v1.Customer]s.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      ///
      /// Return value:
      /// List of [Customer][google.cloud.channel.v1.Customer]s, or an empty list if there are no customers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.ListCustomersResponse ListCustomers(global::Google.Cloud.Channel.V1.ListCustomersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCustomers, null, options, request);
      }
      /// <summary>
      /// List [Customer][google.cloud.channel.v1.Customer]s.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      ///
      /// Return value:
      /// List of [Customer][google.cloud.channel.v1.Customer]s, or an empty list if there are no customers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.ListCustomersResponse> ListCustomersAsync(global::Google.Cloud.Channel.V1.ListCustomersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCustomersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List [Customer][google.cloud.channel.v1.Customer]s.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      ///
      /// Return value:
      /// List of [Customer][google.cloud.channel.v1.Customer]s, or an empty list if there are no customers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.ListCustomersResponse> ListCustomersAsync(global::Google.Cloud.Channel.V1.ListCustomersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCustomers, null, options, request);
      }
      /// <summary>
      /// Returns the requested [Customer][google.cloud.channel.v1.Customer] resource.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: The customer resource doesn't exist. Usually the result of an
      /// invalid name parameter.
      ///
      /// Return value:
      /// The [Customer][google.cloud.channel.v1.Customer] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.Customer GetCustomer(global::Google.Cloud.Channel.V1.GetCustomerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCustomer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the requested [Customer][google.cloud.channel.v1.Customer] resource.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: The customer resource doesn't exist. Usually the result of an
      /// invalid name parameter.
      ///
      /// Return value:
      /// The [Customer][google.cloud.channel.v1.Customer] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.Customer GetCustomer(global::Google.Cloud.Channel.V1.GetCustomerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCustomer, null, options, request);
      }
      /// <summary>
      /// Returns the requested [Customer][google.cloud.channel.v1.Customer] resource.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: The customer resource doesn't exist. Usually the result of an
      /// invalid name parameter.
      ///
      /// Return value:
      /// The [Customer][google.cloud.channel.v1.Customer] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.Customer> GetCustomerAsync(global::Google.Cloud.Channel.V1.GetCustomerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCustomerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the requested [Customer][google.cloud.channel.v1.Customer] resource.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: The customer resource doesn't exist. Usually the result of an
      /// invalid name parameter.
      ///
      /// Return value:
      /// The [Customer][google.cloud.channel.v1.Customer] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.Customer> GetCustomerAsync(global::Google.Cloud.Channel.V1.GetCustomerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCustomer, null, options, request);
      }
      /// <summary>
      /// Confirms the existence of Cloud Identity accounts based on the domain and
      /// if the Cloud Identity accounts are owned by the reseller.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * INVALID_VALUE: Invalid domain value in the request.
      ///
      /// Return value:
      /// A list of [CloudIdentityCustomerAccount][google.cloud.channel.v1.CloudIdentityCustomerAccount] resources for the domain (may be
      /// empty)
      ///
      /// Note: in the v1alpha1 version of the API, a NOT_FOUND error returns if
      /// no [CloudIdentityCustomerAccount][google.cloud.channel.v1.CloudIdentityCustomerAccount] resources match the domain.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.CheckCloudIdentityAccountsExistResponse CheckCloudIdentityAccountsExist(global::Google.Cloud.Channel.V1.CheckCloudIdentityAccountsExistRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckCloudIdentityAccountsExist(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Confirms the existence of Cloud Identity accounts based on the domain and
      /// if the Cloud Identity accounts are owned by the reseller.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * INVALID_VALUE: Invalid domain value in the request.
      ///
      /// Return value:
      /// A list of [CloudIdentityCustomerAccount][google.cloud.channel.v1.CloudIdentityCustomerAccount] resources for the domain (may be
      /// empty)
      ///
      /// Note: in the v1alpha1 version of the API, a NOT_FOUND error returns if
      /// no [CloudIdentityCustomerAccount][google.cloud.channel.v1.CloudIdentityCustomerAccount] resources match the domain.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.CheckCloudIdentityAccountsExistResponse CheckCloudIdentityAccountsExist(global::Google.Cloud.Channel.V1.CheckCloudIdentityAccountsExistRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CheckCloudIdentityAccountsExist, null, options, request);
      }
      /// <summary>
      /// Confirms the existence of Cloud Identity accounts based on the domain and
      /// if the Cloud Identity accounts are owned by the reseller.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * INVALID_VALUE: Invalid domain value in the request.
      ///
      /// Return value:
      /// A list of [CloudIdentityCustomerAccount][google.cloud.channel.v1.CloudIdentityCustomerAccount] resources for the domain (may be
      /// empty)
      ///
      /// Note: in the v1alpha1 version of the API, a NOT_FOUND error returns if
      /// no [CloudIdentityCustomerAccount][google.cloud.channel.v1.CloudIdentityCustomerAccount] resources match the domain.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.CheckCloudIdentityAccountsExistResponse> CheckCloudIdentityAccountsExistAsync(global::Google.Cloud.Channel.V1.CheckCloudIdentityAccountsExistRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckCloudIdentityAccountsExistAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Confirms the existence of Cloud Identity accounts based on the domain and
      /// if the Cloud Identity accounts are owned by the reseller.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * INVALID_VALUE: Invalid domain value in the request.
      ///
      /// Return value:
      /// A list of [CloudIdentityCustomerAccount][google.cloud.channel.v1.CloudIdentityCustomerAccount] resources for the domain (may be
      /// empty)
      ///
      /// Note: in the v1alpha1 version of the API, a NOT_FOUND error returns if
      /// no [CloudIdentityCustomerAccount][google.cloud.channel.v1.CloudIdentityCustomerAccount] resources match the domain.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.CheckCloudIdentityAccountsExistResponse> CheckCloudIdentityAccountsExistAsync(global::Google.Cloud.Channel.V1.CheckCloudIdentityAccountsExistRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CheckCloudIdentityAccountsExist, null, options, request);
      }
      /// <summary>
      /// Creates a new [Customer][google.cloud.channel.v1.Customer] resource under the reseller or distributor
      /// account.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT:
      ///     * Required request parameters are missing or invalid.
      ///     * Domain field value doesn't match the primary email domain.
      ///
      /// Return value:
      /// The newly created [Customer][google.cloud.channel.v1.Customer] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.Customer CreateCustomer(global::Google.Cloud.Channel.V1.CreateCustomerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCustomer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new [Customer][google.cloud.channel.v1.Customer] resource under the reseller or distributor
      /// account.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT:
      ///     * Required request parameters are missing or invalid.
      ///     * Domain field value doesn't match the primary email domain.
      ///
      /// Return value:
      /// The newly created [Customer][google.cloud.channel.v1.Customer] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.Customer CreateCustomer(global::Google.Cloud.Channel.V1.CreateCustomerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCustomer, null, options, request);
      }
      /// <summary>
      /// Creates a new [Customer][google.cloud.channel.v1.Customer] resource under the reseller or distributor
      /// account.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT:
      ///     * Required request parameters are missing or invalid.
      ///     * Domain field value doesn't match the primary email domain.
      ///
      /// Return value:
      /// The newly created [Customer][google.cloud.channel.v1.Customer] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.Customer> CreateCustomerAsync(global::Google.Cloud.Channel.V1.CreateCustomerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCustomerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new [Customer][google.cloud.channel.v1.Customer] resource under the reseller or distributor
      /// account.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT:
      ///     * Required request parameters are missing or invalid.
      ///     * Domain field value doesn't match the primary email domain.
      ///
      /// Return value:
      /// The newly created [Customer][google.cloud.channel.v1.Customer] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.Customer> CreateCustomerAsync(global::Google.Cloud.Channel.V1.CreateCustomerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCustomer, null, options, request);
      }
      /// <summary>
      /// Updates an existing [Customer][google.cloud.channel.v1.Customer] resource for the reseller or
      /// distributor.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: No [Customer][google.cloud.channel.v1.Customer] resource found for the name in the request.
      ///
      /// Return value:
      /// The updated [Customer][google.cloud.channel.v1.Customer] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.Customer UpdateCustomer(global::Google.Cloud.Channel.V1.UpdateCustomerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCustomer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing [Customer][google.cloud.channel.v1.Customer] resource for the reseller or
      /// distributor.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: No [Customer][google.cloud.channel.v1.Customer] resource found for the name in the request.
      ///
      /// Return value:
      /// The updated [Customer][google.cloud.channel.v1.Customer] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.Customer UpdateCustomer(global::Google.Cloud.Channel.V1.UpdateCustomerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCustomer, null, options, request);
      }
      /// <summary>
      /// Updates an existing [Customer][google.cloud.channel.v1.Customer] resource for the reseller or
      /// distributor.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: No [Customer][google.cloud.channel.v1.Customer] resource found for the name in the request.
      ///
      /// Return value:
      /// The updated [Customer][google.cloud.channel.v1.Customer] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.Customer> UpdateCustomerAsync(global::Google.Cloud.Channel.V1.UpdateCustomerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCustomerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing [Customer][google.cloud.channel.v1.Customer] resource for the reseller or
      /// distributor.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: No [Customer][google.cloud.channel.v1.Customer] resource found for the name in the request.
      ///
      /// Return value:
      /// The updated [Customer][google.cloud.channel.v1.Customer] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.Customer> UpdateCustomerAsync(global::Google.Cloud.Channel.V1.UpdateCustomerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCustomer, null, options, request);
      }
      /// <summary>
      /// Deletes the given [Customer][google.cloud.channel.v1.Customer] permanently.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The account making the request does not own
      /// this customer.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * FAILED_PRECONDITION: The customer has existing entitlements.
      /// * NOT_FOUND: No [Customer][google.cloud.channel.v1.Customer] resource found for the name in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteCustomer(global::Google.Cloud.Channel.V1.DeleteCustomerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCustomer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the given [Customer][google.cloud.channel.v1.Customer] permanently.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The account making the request does not own
      /// this customer.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * FAILED_PRECONDITION: The customer has existing entitlements.
      /// * NOT_FOUND: No [Customer][google.cloud.channel.v1.Customer] resource found for the name in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteCustomer(global::Google.Cloud.Channel.V1.DeleteCustomerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCustomer, null, options, request);
      }
      /// <summary>
      /// Deletes the given [Customer][google.cloud.channel.v1.Customer] permanently.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The account making the request does not own
      /// this customer.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * FAILED_PRECONDITION: The customer has existing entitlements.
      /// * NOT_FOUND: No [Customer][google.cloud.channel.v1.Customer] resource found for the name in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteCustomerAsync(global::Google.Cloud.Channel.V1.DeleteCustomerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCustomerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the given [Customer][google.cloud.channel.v1.Customer] permanently.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The account making the request does not own
      /// this customer.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * FAILED_PRECONDITION: The customer has existing entitlements.
      /// * NOT_FOUND: No [Customer][google.cloud.channel.v1.Customer] resource found for the name in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteCustomerAsync(global::Google.Cloud.Channel.V1.DeleteCustomerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCustomer, null, options, request);
      }
      /// <summary>
      /// Imports a [Customer][google.cloud.channel.v1.Customer] from the Cloud Identity associated with the provided
      /// Cloud Identity ID or domain before a TransferEntitlements call. If a
      /// linked Customer already exists and overwrite_if_exists is true, it will
      /// update that Customer's data.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * NOT_FOUND: Cloud Identity doesn't exist or was deleted.
      /// * INVALID_ARGUMENT: Required parameters are missing, or the auth_token is
      /// expired or invalid.
      /// * ALREADY_EXISTS: A customer already exists and has conflicting critical
      /// fields. Requires an overwrite.
      ///
      /// Return value:
      /// The [Customer][google.cloud.channel.v1.Customer].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.Customer ImportCustomer(global::Google.Cloud.Channel.V1.ImportCustomerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ImportCustomer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Imports a [Customer][google.cloud.channel.v1.Customer] from the Cloud Identity associated with the provided
      /// Cloud Identity ID or domain before a TransferEntitlements call. If a
      /// linked Customer already exists and overwrite_if_exists is true, it will
      /// update that Customer's data.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * NOT_FOUND: Cloud Identity doesn't exist or was deleted.
      /// * INVALID_ARGUMENT: Required parameters are missing, or the auth_token is
      /// expired or invalid.
      /// * ALREADY_EXISTS: A customer already exists and has conflicting critical
      /// fields. Requires an overwrite.
      ///
      /// Return value:
      /// The [Customer][google.cloud.channel.v1.Customer].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.Customer ImportCustomer(global::Google.Cloud.Channel.V1.ImportCustomerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ImportCustomer, null, options, request);
      }
      /// <summary>
      /// Imports a [Customer][google.cloud.channel.v1.Customer] from the Cloud Identity associated with the provided
      /// Cloud Identity ID or domain before a TransferEntitlements call. If a
      /// linked Customer already exists and overwrite_if_exists is true, it will
      /// update that Customer's data.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * NOT_FOUND: Cloud Identity doesn't exist or was deleted.
      /// * INVALID_ARGUMENT: Required parameters are missing, or the auth_token is
      /// expired or invalid.
      /// * ALREADY_EXISTS: A customer already exists and has conflicting critical
      /// fields. Requires an overwrite.
      ///
      /// Return value:
      /// The [Customer][google.cloud.channel.v1.Customer].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.Customer> ImportCustomerAsync(global::Google.Cloud.Channel.V1.ImportCustomerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ImportCustomerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Imports a [Customer][google.cloud.channel.v1.Customer] from the Cloud Identity associated with the provided
      /// Cloud Identity ID or domain before a TransferEntitlements call. If a
      /// linked Customer already exists and overwrite_if_exists is true, it will
      /// update that Customer's data.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * NOT_FOUND: Cloud Identity doesn't exist or was deleted.
      /// * INVALID_ARGUMENT: Required parameters are missing, or the auth_token is
      /// expired or invalid.
      /// * ALREADY_EXISTS: A customer already exists and has conflicting critical
      /// fields. Requires an overwrite.
      ///
      /// Return value:
      /// The [Customer][google.cloud.channel.v1.Customer].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.Customer> ImportCustomerAsync(global::Google.Cloud.Channel.V1.ImportCustomerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ImportCustomer, null, options, request);
      }
      /// <summary>
      /// Creates a Cloud Identity for the given customer using the customer's
      /// information, or the information provided here.
      ///
      /// Possible error codes:
      ///
      /// *  PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// *  INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// *  NOT_FOUND: The customer was not found.
      /// *  ALREADY_EXISTS: The customer's primary email already exists. Retry
      ///    after changing the customer's primary contact email.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata contains an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation ProvisionCloudIdentity(global::Google.Cloud.Channel.V1.ProvisionCloudIdentityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProvisionCloudIdentity(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a Cloud Identity for the given customer using the customer's
      /// information, or the information provided here.
      ///
      /// Possible error codes:
      ///
      /// *  PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// *  INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// *  NOT_FOUND: The customer was not found.
      /// *  ALREADY_EXISTS: The customer's primary email already exists. Retry
      ///    after changing the customer's primary contact email.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata contains an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation ProvisionCloudIdentity(global::Google.Cloud.Channel.V1.ProvisionCloudIdentityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ProvisionCloudIdentity, null, options, request);
      }
      /// <summary>
      /// Creates a Cloud Identity for the given customer using the customer's
      /// information, or the information provided here.
      ///
      /// Possible error codes:
      ///
      /// *  PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// *  INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// *  NOT_FOUND: The customer was not found.
      /// *  ALREADY_EXISTS: The customer's primary email already exists. Retry
      ///    after changing the customer's primary contact email.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata contains an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ProvisionCloudIdentityAsync(global::Google.Cloud.Channel.V1.ProvisionCloudIdentityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProvisionCloudIdentityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a Cloud Identity for the given customer using the customer's
      /// information, or the information provided here.
      ///
      /// Possible error codes:
      ///
      /// *  PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// *  INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// *  NOT_FOUND: The customer was not found.
      /// *  ALREADY_EXISTS: The customer's primary email already exists. Retry
      ///    after changing the customer's primary contact email.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata contains an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ProvisionCloudIdentityAsync(global::Google.Cloud.Channel.V1.ProvisionCloudIdentityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ProvisionCloudIdentity, null, options, request);
      }
      /// <summary>
      /// Lists [Entitlement][google.cloud.channel.v1.Entitlement]s belonging to a customer.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      ///
      /// Return value:
      /// A list of the customer's [Entitlement][google.cloud.channel.v1.Entitlement]s.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.ListEntitlementsResponse ListEntitlements(global::Google.Cloud.Channel.V1.ListEntitlementsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListEntitlements(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists [Entitlement][google.cloud.channel.v1.Entitlement]s belonging to a customer.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      ///
      /// Return value:
      /// A list of the customer's [Entitlement][google.cloud.channel.v1.Entitlement]s.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.ListEntitlementsResponse ListEntitlements(global::Google.Cloud.Channel.V1.ListEntitlementsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListEntitlements, null, options, request);
      }
      /// <summary>
      /// Lists [Entitlement][google.cloud.channel.v1.Entitlement]s belonging to a customer.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      ///
      /// Return value:
      /// A list of the customer's [Entitlement][google.cloud.channel.v1.Entitlement]s.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.ListEntitlementsResponse> ListEntitlementsAsync(global::Google.Cloud.Channel.V1.ListEntitlementsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListEntitlementsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists [Entitlement][google.cloud.channel.v1.Entitlement]s belonging to a customer.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      ///
      /// Return value:
      /// A list of the customer's [Entitlement][google.cloud.channel.v1.Entitlement]s.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.ListEntitlementsResponse> ListEntitlementsAsync(global::Google.Cloud.Channel.V1.ListEntitlementsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListEntitlements, null, options, request);
      }
      /// <summary>
      /// List [TransferableSku][google.cloud.channel.v1.TransferableSku]s of a customer based on the Cloud Identity ID or
      /// Customer Name in the request.
      ///
      /// Use this method to list the entitlements information of an
      /// unowned customer. You should provide the customer's
      /// Cloud Identity ID or Customer Name.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED:
      ///     * The customer doesn't belong to the reseller and has no auth token.
      ///     * The supplied auth token is invalid.
      ///     * The reseller account making the request is different
      ///     from the reseller account in the query.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      ///
      /// Return value:
      /// A list of the customer's [TransferableSku][google.cloud.channel.v1.TransferableSku].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.ListTransferableSkusResponse ListTransferableSkus(global::Google.Cloud.Channel.V1.ListTransferableSkusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTransferableSkus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List [TransferableSku][google.cloud.channel.v1.TransferableSku]s of a customer based on the Cloud Identity ID or
      /// Customer Name in the request.
      ///
      /// Use this method to list the entitlements information of an
      /// unowned customer. You should provide the customer's
      /// Cloud Identity ID or Customer Name.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED:
      ///     * The customer doesn't belong to the reseller and has no auth token.
      ///     * The supplied auth token is invalid.
      ///     * The reseller account making the request is different
      ///     from the reseller account in the query.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      ///
      /// Return value:
      /// A list of the customer's [TransferableSku][google.cloud.channel.v1.TransferableSku].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.ListTransferableSkusResponse ListTransferableSkus(global::Google.Cloud.Channel.V1.ListTransferableSkusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTransferableSkus, null, options, request);
      }
      /// <summary>
      /// List [TransferableSku][google.cloud.channel.v1.TransferableSku]s of a customer based on the Cloud Identity ID or
      /// Customer Name in the request.
      ///
      /// Use this method to list the entitlements information of an
      /// unowned customer. You should provide the customer's
      /// Cloud Identity ID or Customer Name.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED:
      ///     * The customer doesn't belong to the reseller and has no auth token.
      ///     * The supplied auth token is invalid.
      ///     * The reseller account making the request is different
      ///     from the reseller account in the query.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      ///
      /// Return value:
      /// A list of the customer's [TransferableSku][google.cloud.channel.v1.TransferableSku].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.ListTransferableSkusResponse> ListTransferableSkusAsync(global::Google.Cloud.Channel.V1.ListTransferableSkusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTransferableSkusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List [TransferableSku][google.cloud.channel.v1.TransferableSku]s of a customer based on the Cloud Identity ID or
      /// Customer Name in the request.
      ///
      /// Use this method to list the entitlements information of an
      /// unowned customer. You should provide the customer's
      /// Cloud Identity ID or Customer Name.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED:
      ///     * The customer doesn't belong to the reseller and has no auth token.
      ///     * The supplied auth token is invalid.
      ///     * The reseller account making the request is different
      ///     from the reseller account in the query.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      ///
      /// Return value:
      /// A list of the customer's [TransferableSku][google.cloud.channel.v1.TransferableSku].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.ListTransferableSkusResponse> ListTransferableSkusAsync(global::Google.Cloud.Channel.V1.ListTransferableSkusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTransferableSkus, null, options, request);
      }
      /// <summary>
      /// List [TransferableOffer][google.cloud.channel.v1.TransferableOffer]s of a customer based on Cloud Identity ID or
      /// Customer Name in the request.
      ///
      /// Use this method when a reseller gets the entitlement information of an
      /// unowned customer. The reseller should provide the customer's
      /// Cloud Identity ID or Customer Name.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED:
      ///     * The customer doesn't belong to the reseller and has no auth token.
      ///     * The supplied auth token is invalid.
      ///     * The reseller account making the request is different
      ///     from the reseller account in the query.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      ///
      /// Return value:
      /// List of [TransferableOffer][google.cloud.channel.v1.TransferableOffer] for the given customer and SKU.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.ListTransferableOffersResponse ListTransferableOffers(global::Google.Cloud.Channel.V1.ListTransferableOffersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTransferableOffers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List [TransferableOffer][google.cloud.channel.v1.TransferableOffer]s of a customer based on Cloud Identity ID or
      /// Customer Name in the request.
      ///
      /// Use this method when a reseller gets the entitlement information of an
      /// unowned customer. The reseller should provide the customer's
      /// Cloud Identity ID or Customer Name.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED:
      ///     * The customer doesn't belong to the reseller and has no auth token.
      ///     * The supplied auth token is invalid.
      ///     * The reseller account making the request is different
      ///     from the reseller account in the query.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      ///
      /// Return value:
      /// List of [TransferableOffer][google.cloud.channel.v1.TransferableOffer] for the given customer and SKU.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.ListTransferableOffersResponse ListTransferableOffers(global::Google.Cloud.Channel.V1.ListTransferableOffersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTransferableOffers, null, options, request);
      }
      /// <summary>
      /// List [TransferableOffer][google.cloud.channel.v1.TransferableOffer]s of a customer based on Cloud Identity ID or
      /// Customer Name in the request.
      ///
      /// Use this method when a reseller gets the entitlement information of an
      /// unowned customer. The reseller should provide the customer's
      /// Cloud Identity ID or Customer Name.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED:
      ///     * The customer doesn't belong to the reseller and has no auth token.
      ///     * The supplied auth token is invalid.
      ///     * The reseller account making the request is different
      ///     from the reseller account in the query.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      ///
      /// Return value:
      /// List of [TransferableOffer][google.cloud.channel.v1.TransferableOffer] for the given customer and SKU.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.ListTransferableOffersResponse> ListTransferableOffersAsync(global::Google.Cloud.Channel.V1.ListTransferableOffersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTransferableOffersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List [TransferableOffer][google.cloud.channel.v1.TransferableOffer]s of a customer based on Cloud Identity ID or
      /// Customer Name in the request.
      ///
      /// Use this method when a reseller gets the entitlement information of an
      /// unowned customer. The reseller should provide the customer's
      /// Cloud Identity ID or Customer Name.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED:
      ///     * The customer doesn't belong to the reseller and has no auth token.
      ///     * The supplied auth token is invalid.
      ///     * The reseller account making the request is different
      ///     from the reseller account in the query.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      ///
      /// Return value:
      /// List of [TransferableOffer][google.cloud.channel.v1.TransferableOffer] for the given customer and SKU.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.ListTransferableOffersResponse> ListTransferableOffersAsync(global::Google.Cloud.Channel.V1.ListTransferableOffersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTransferableOffers, null, options, request);
      }
      /// <summary>
      /// Returns the requested [Entitlement][google.cloud.channel.v1.Entitlement] resource.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: The customer entitlement was not found.
      ///
      /// Return value:
      /// The requested [Entitlement][google.cloud.channel.v1.Entitlement] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.Entitlement GetEntitlement(global::Google.Cloud.Channel.V1.GetEntitlementRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEntitlement(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the requested [Entitlement][google.cloud.channel.v1.Entitlement] resource.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: The customer entitlement was not found.
      ///
      /// Return value:
      /// The requested [Entitlement][google.cloud.channel.v1.Entitlement] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.Entitlement GetEntitlement(global::Google.Cloud.Channel.V1.GetEntitlementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetEntitlement, null, options, request);
      }
      /// <summary>
      /// Returns the requested [Entitlement][google.cloud.channel.v1.Entitlement] resource.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: The customer entitlement was not found.
      ///
      /// Return value:
      /// The requested [Entitlement][google.cloud.channel.v1.Entitlement] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.Entitlement> GetEntitlementAsync(global::Google.Cloud.Channel.V1.GetEntitlementRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEntitlementAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the requested [Entitlement][google.cloud.channel.v1.Entitlement] resource.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: The customer entitlement was not found.
      ///
      /// Return value:
      /// The requested [Entitlement][google.cloud.channel.v1.Entitlement] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.Entitlement> GetEntitlementAsync(global::Google.Cloud.Channel.V1.GetEntitlementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetEntitlement, null, options, request);
      }
      /// <summary>
      /// Creates an entitlement for a customer.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT:
      ///     * Required request parameters are missing or invalid.
      ///     * There is already a customer entitlement for a SKU from the same
      ///     product family.
      /// * INVALID_VALUE: Make sure the OfferId is valid. If it is, contact
      /// Google Channel support for further troubleshooting.
      /// * NOT_FOUND: The customer or offer resource was not found.
      /// * ALREADY_EXISTS:
      ///     * The SKU was already purchased for the customer.
      ///     * The customer's primary email already exists. Retry
      ///     after changing the customer's primary contact email.
      /// * CONDITION_NOT_MET or FAILED_PRECONDITION:
      ///     * The domain required for purchasing a SKU has not been verified.
      ///     * A pre-requisite SKU required to purchase an Add-On SKU is missing.
      ///     For example, Google Workspace Business Starter is required to purchase
      ///     Vault or Drive.
      ///     * (Developer accounts only) Reseller and resold domain must meet the
      ///     following naming requirements:
      ///         * Domain names must start with goog-test.
      ///         * Domain names must include the reseller domain.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation CreateEntitlement(global::Google.Cloud.Channel.V1.CreateEntitlementRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateEntitlement(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an entitlement for a customer.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT:
      ///     * Required request parameters are missing or invalid.
      ///     * There is already a customer entitlement for a SKU from the same
      ///     product family.
      /// * INVALID_VALUE: Make sure the OfferId is valid. If it is, contact
      /// Google Channel support for further troubleshooting.
      /// * NOT_FOUND: The customer or offer resource was not found.
      /// * ALREADY_EXISTS:
      ///     * The SKU was already purchased for the customer.
      ///     * The customer's primary email already exists. Retry
      ///     after changing the customer's primary contact email.
      /// * CONDITION_NOT_MET or FAILED_PRECONDITION:
      ///     * The domain required for purchasing a SKU has not been verified.
      ///     * A pre-requisite SKU required to purchase an Add-On SKU is missing.
      ///     For example, Google Workspace Business Starter is required to purchase
      ///     Vault or Drive.
      ///     * (Developer accounts only) Reseller and resold domain must meet the
      ///     following naming requirements:
      ///         * Domain names must start with goog-test.
      ///         * Domain names must include the reseller domain.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation CreateEntitlement(global::Google.Cloud.Channel.V1.CreateEntitlementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateEntitlement, null, options, request);
      }
      /// <summary>
      /// Creates an entitlement for a customer.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT:
      ///     * Required request parameters are missing or invalid.
      ///     * There is already a customer entitlement for a SKU from the same
      ///     product family.
      /// * INVALID_VALUE: Make sure the OfferId is valid. If it is, contact
      /// Google Channel support for further troubleshooting.
      /// * NOT_FOUND: The customer or offer resource was not found.
      /// * ALREADY_EXISTS:
      ///     * The SKU was already purchased for the customer.
      ///     * The customer's primary email already exists. Retry
      ///     after changing the customer's primary contact email.
      /// * CONDITION_NOT_MET or FAILED_PRECONDITION:
      ///     * The domain required for purchasing a SKU has not been verified.
      ///     * A pre-requisite SKU required to purchase an Add-On SKU is missing.
      ///     For example, Google Workspace Business Starter is required to purchase
      ///     Vault or Drive.
      ///     * (Developer accounts only) Reseller and resold domain must meet the
      ///     following naming requirements:
      ///         * Domain names must start with goog-test.
      ///         * Domain names must include the reseller domain.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateEntitlementAsync(global::Google.Cloud.Channel.V1.CreateEntitlementRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateEntitlementAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an entitlement for a customer.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT:
      ///     * Required request parameters are missing or invalid.
      ///     * There is already a customer entitlement for a SKU from the same
      ///     product family.
      /// * INVALID_VALUE: Make sure the OfferId is valid. If it is, contact
      /// Google Channel support for further troubleshooting.
      /// * NOT_FOUND: The customer or offer resource was not found.
      /// * ALREADY_EXISTS:
      ///     * The SKU was already purchased for the customer.
      ///     * The customer's primary email already exists. Retry
      ///     after changing the customer's primary contact email.
      /// * CONDITION_NOT_MET or FAILED_PRECONDITION:
      ///     * The domain required for purchasing a SKU has not been verified.
      ///     * A pre-requisite SKU required to purchase an Add-On SKU is missing.
      ///     For example, Google Workspace Business Starter is required to purchase
      ///     Vault or Drive.
      ///     * (Developer accounts only) Reseller and resold domain must meet the
      ///     following naming requirements:
      ///         * Domain names must start with goog-test.
      ///         * Domain names must include the reseller domain.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateEntitlementAsync(global::Google.Cloud.Channel.V1.CreateEntitlementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateEntitlement, null, options, request);
      }
      /// <summary>
      /// Change parameters of the entitlement.
      ///
      /// An entitlement update is a long-running operation and it updates the
      /// entitlement as a result of fulfillment.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// For example, the number of seats being changed is greater than the allowed
      /// number of max seats, or decreasing seats for a commitment based plan.
      /// * NOT_FOUND: Entitlement resource not found.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation ChangeParameters(global::Google.Cloud.Channel.V1.ChangeParametersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChangeParameters(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Change parameters of the entitlement.
      ///
      /// An entitlement update is a long-running operation and it updates the
      /// entitlement as a result of fulfillment.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// For example, the number of seats being changed is greater than the allowed
      /// number of max seats, or decreasing seats for a commitment based plan.
      /// * NOT_FOUND: Entitlement resource not found.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation ChangeParameters(global::Google.Cloud.Channel.V1.ChangeParametersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChangeParameters, null, options, request);
      }
      /// <summary>
      /// Change parameters of the entitlement.
      ///
      /// An entitlement update is a long-running operation and it updates the
      /// entitlement as a result of fulfillment.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// For example, the number of seats being changed is greater than the allowed
      /// number of max seats, or decreasing seats for a commitment based plan.
      /// * NOT_FOUND: Entitlement resource not found.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ChangeParametersAsync(global::Google.Cloud.Channel.V1.ChangeParametersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChangeParametersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Change parameters of the entitlement.
      ///
      /// An entitlement update is a long-running operation and it updates the
      /// entitlement as a result of fulfillment.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// For example, the number of seats being changed is greater than the allowed
      /// number of max seats, or decreasing seats for a commitment based plan.
      /// * NOT_FOUND: Entitlement resource not found.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ChangeParametersAsync(global::Google.Cloud.Channel.V1.ChangeParametersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChangeParameters, null, options, request);
      }
      /// <summary>
      /// Updates the renewal settings for an existing customer entitlement.
      ///
      /// An entitlement update is a long-running operation and it updates the
      /// entitlement as a result of fulfillment.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Entitlement resource not found.
      /// * NOT_COMMITMENT_PLAN: Renewal Settings are only applicable for a
      /// commitment plan. Can't enable or disable renewals for non-commitment plans.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      ///   Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation ChangeRenewalSettings(global::Google.Cloud.Channel.V1.ChangeRenewalSettingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChangeRenewalSettings(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the renewal settings for an existing customer entitlement.
      ///
      /// An entitlement update is a long-running operation and it updates the
      /// entitlement as a result of fulfillment.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Entitlement resource not found.
      /// * NOT_COMMITMENT_PLAN: Renewal Settings are only applicable for a
      /// commitment plan. Can't enable or disable renewals for non-commitment plans.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      ///   Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation ChangeRenewalSettings(global::Google.Cloud.Channel.V1.ChangeRenewalSettingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChangeRenewalSettings, null, options, request);
      }
      /// <summary>
      /// Updates the renewal settings for an existing customer entitlement.
      ///
      /// An entitlement update is a long-running operation and it updates the
      /// entitlement as a result of fulfillment.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Entitlement resource not found.
      /// * NOT_COMMITMENT_PLAN: Renewal Settings are only applicable for a
      /// commitment plan. Can't enable or disable renewals for non-commitment plans.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      ///   Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ChangeRenewalSettingsAsync(global::Google.Cloud.Channel.V1.ChangeRenewalSettingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChangeRenewalSettingsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the renewal settings for an existing customer entitlement.
      ///
      /// An entitlement update is a long-running operation and it updates the
      /// entitlement as a result of fulfillment.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Entitlement resource not found.
      /// * NOT_COMMITMENT_PLAN: Renewal Settings are only applicable for a
      /// commitment plan. Can't enable or disable renewals for non-commitment plans.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      ///   Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ChangeRenewalSettingsAsync(global::Google.Cloud.Channel.V1.ChangeRenewalSettingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChangeRenewalSettings, null, options, request);
      }
      /// <summary>
      /// Updates the Offer for an existing customer entitlement.
      ///
      /// An entitlement update is a long-running operation and it updates the
      /// entitlement as a result of fulfillment.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Offer or Entitlement resource not found.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation ChangeOffer(global::Google.Cloud.Channel.V1.ChangeOfferRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChangeOffer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the Offer for an existing customer entitlement.
      ///
      /// An entitlement update is a long-running operation and it updates the
      /// entitlement as a result of fulfillment.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Offer or Entitlement resource not found.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation ChangeOffer(global::Google.Cloud.Channel.V1.ChangeOfferRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChangeOffer, null, options, request);
      }
      /// <summary>
      /// Updates the Offer for an existing customer entitlement.
      ///
      /// An entitlement update is a long-running operation and it updates the
      /// entitlement as a result of fulfillment.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Offer or Entitlement resource not found.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ChangeOfferAsync(global::Google.Cloud.Channel.V1.ChangeOfferRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChangeOfferAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the Offer for an existing customer entitlement.
      ///
      /// An entitlement update is a long-running operation and it updates the
      /// entitlement as a result of fulfillment.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Offer or Entitlement resource not found.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ChangeOfferAsync(global::Google.Cloud.Channel.V1.ChangeOfferRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChangeOffer, null, options, request);
      }
      /// <summary>
      /// Starts paid service for a trial entitlement.
      ///
      /// Starts paid service for a trial entitlement immediately. This method is
      /// only applicable if a plan is set up for a trial entitlement but has some
      /// trial days remaining.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Entitlement resource not found.
      /// * FAILED_PRECONDITION/NOT_IN_TRIAL: This method only works for
      /// entitlement on trial plans.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation StartPaidService(global::Google.Cloud.Channel.V1.StartPaidServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartPaidService(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Starts paid service for a trial entitlement.
      ///
      /// Starts paid service for a trial entitlement immediately. This method is
      /// only applicable if a plan is set up for a trial entitlement but has some
      /// trial days remaining.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Entitlement resource not found.
      /// * FAILED_PRECONDITION/NOT_IN_TRIAL: This method only works for
      /// entitlement on trial plans.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation StartPaidService(global::Google.Cloud.Channel.V1.StartPaidServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartPaidService, null, options, request);
      }
      /// <summary>
      /// Starts paid service for a trial entitlement.
      ///
      /// Starts paid service for a trial entitlement immediately. This method is
      /// only applicable if a plan is set up for a trial entitlement but has some
      /// trial days remaining.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Entitlement resource not found.
      /// * FAILED_PRECONDITION/NOT_IN_TRIAL: This method only works for
      /// entitlement on trial plans.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> StartPaidServiceAsync(global::Google.Cloud.Channel.V1.StartPaidServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartPaidServiceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Starts paid service for a trial entitlement.
      ///
      /// Starts paid service for a trial entitlement immediately. This method is
      /// only applicable if a plan is set up for a trial entitlement but has some
      /// trial days remaining.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Entitlement resource not found.
      /// * FAILED_PRECONDITION/NOT_IN_TRIAL: This method only works for
      /// entitlement on trial plans.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> StartPaidServiceAsync(global::Google.Cloud.Channel.V1.StartPaidServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartPaidService, null, options, request);
      }
      /// <summary>
      /// Suspends a previously fulfilled entitlement.
      ///
      /// An entitlement suspension is a long-running operation.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Entitlement resource not found.
      /// * NOT_ACTIVE: Entitlement is not active.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation SuspendEntitlement(global::Google.Cloud.Channel.V1.SuspendEntitlementRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SuspendEntitlement(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Suspends a previously fulfilled entitlement.
      ///
      /// An entitlement suspension is a long-running operation.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Entitlement resource not found.
      /// * NOT_ACTIVE: Entitlement is not active.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation SuspendEntitlement(global::Google.Cloud.Channel.V1.SuspendEntitlementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SuspendEntitlement, null, options, request);
      }
      /// <summary>
      /// Suspends a previously fulfilled entitlement.
      ///
      /// An entitlement suspension is a long-running operation.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Entitlement resource not found.
      /// * NOT_ACTIVE: Entitlement is not active.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> SuspendEntitlementAsync(global::Google.Cloud.Channel.V1.SuspendEntitlementRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SuspendEntitlementAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Suspends a previously fulfilled entitlement.
      ///
      /// An entitlement suspension is a long-running operation.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Entitlement resource not found.
      /// * NOT_ACTIVE: Entitlement is not active.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> SuspendEntitlementAsync(global::Google.Cloud.Channel.V1.SuspendEntitlementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SuspendEntitlement, null, options, request);
      }
      /// <summary>
      /// Cancels a previously fulfilled entitlement.
      ///
      /// An entitlement cancellation is a long-running operation.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * FAILED_PRECONDITION: There are Google Cloud projects linked to the
      /// Google Cloud entitlement's Cloud Billing subaccount.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Entitlement resource not found.
      /// * DELETION_TYPE_NOT_ALLOWED: Cancel is only allowed for Google Workspace
      /// add-ons, or entitlements for Google Cloud's development platform.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The response will contain
      /// google.protobuf.Empty on success. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation CancelEntitlement(global::Google.Cloud.Channel.V1.CancelEntitlementRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelEntitlement(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Cancels a previously fulfilled entitlement.
      ///
      /// An entitlement cancellation is a long-running operation.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * FAILED_PRECONDITION: There are Google Cloud projects linked to the
      /// Google Cloud entitlement's Cloud Billing subaccount.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Entitlement resource not found.
      /// * DELETION_TYPE_NOT_ALLOWED: Cancel is only allowed for Google Workspace
      /// add-ons, or entitlements for Google Cloud's development platform.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The response will contain
      /// google.protobuf.Empty on success. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation CancelEntitlement(global::Google.Cloud.Channel.V1.CancelEntitlementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CancelEntitlement, null, options, request);
      }
      /// <summary>
      /// Cancels a previously fulfilled entitlement.
      ///
      /// An entitlement cancellation is a long-running operation.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * FAILED_PRECONDITION: There are Google Cloud projects linked to the
      /// Google Cloud entitlement's Cloud Billing subaccount.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Entitlement resource not found.
      /// * DELETION_TYPE_NOT_ALLOWED: Cancel is only allowed for Google Workspace
      /// add-ons, or entitlements for Google Cloud's development platform.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The response will contain
      /// google.protobuf.Empty on success. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CancelEntitlementAsync(global::Google.Cloud.Channel.V1.CancelEntitlementRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelEntitlementAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Cancels a previously fulfilled entitlement.
      ///
      /// An entitlement cancellation is a long-running operation.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * FAILED_PRECONDITION: There are Google Cloud projects linked to the
      /// Google Cloud entitlement's Cloud Billing subaccount.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Entitlement resource not found.
      /// * DELETION_TYPE_NOT_ALLOWED: Cancel is only allowed for Google Workspace
      /// add-ons, or entitlements for Google Cloud's development platform.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The response will contain
      /// google.protobuf.Empty on success. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CancelEntitlementAsync(global::Google.Cloud.Channel.V1.CancelEntitlementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CancelEntitlement, null, options, request);
      }
      /// <summary>
      /// Activates a previously suspended entitlement. Entitlements suspended for
      /// pending ToS acceptance can't be activated using this method.
      ///
      /// An entitlement activation is a long-running operation and it updates
      /// the state of the customer entitlement.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Entitlement resource not found.
      /// * SUSPENSION_NOT_RESELLER_INITIATED: Can only activate reseller-initiated
      /// suspensions and entitlements that have accepted the TOS.
      /// * NOT_SUSPENDED: Can only activate suspended entitlements not in an ACTIVE
      /// state.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation ActivateEntitlement(global::Google.Cloud.Channel.V1.ActivateEntitlementRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActivateEntitlement(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Activates a previously suspended entitlement. Entitlements suspended for
      /// pending ToS acceptance can't be activated using this method.
      ///
      /// An entitlement activation is a long-running operation and it updates
      /// the state of the customer entitlement.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Entitlement resource not found.
      /// * SUSPENSION_NOT_RESELLER_INITIATED: Can only activate reseller-initiated
      /// suspensions and entitlements that have accepted the TOS.
      /// * NOT_SUSPENDED: Can only activate suspended entitlements not in an ACTIVE
      /// state.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation ActivateEntitlement(global::Google.Cloud.Channel.V1.ActivateEntitlementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ActivateEntitlement, null, options, request);
      }
      /// <summary>
      /// Activates a previously suspended entitlement. Entitlements suspended for
      /// pending ToS acceptance can't be activated using this method.
      ///
      /// An entitlement activation is a long-running operation and it updates
      /// the state of the customer entitlement.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Entitlement resource not found.
      /// * SUSPENSION_NOT_RESELLER_INITIATED: Can only activate reseller-initiated
      /// suspensions and entitlements that have accepted the TOS.
      /// * NOT_SUSPENDED: Can only activate suspended entitlements not in an ACTIVE
      /// state.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ActivateEntitlementAsync(global::Google.Cloud.Channel.V1.ActivateEntitlementRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActivateEntitlementAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Activates a previously suspended entitlement. Entitlements suspended for
      /// pending ToS acceptance can't be activated using this method.
      ///
      /// An entitlement activation is a long-running operation and it updates
      /// the state of the customer entitlement.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Entitlement resource not found.
      /// * SUSPENSION_NOT_RESELLER_INITIATED: Can only activate reseller-initiated
      /// suspensions and entitlements that have accepted the TOS.
      /// * NOT_SUSPENDED: Can only activate suspended entitlements not in an ACTIVE
      /// state.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ActivateEntitlementAsync(global::Google.Cloud.Channel.V1.ActivateEntitlementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ActivateEntitlement, null, options, request);
      }
      /// <summary>
      /// Transfers customer entitlements to new reseller.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: The customer or offer resource was not found.
      /// * ALREADY_EXISTS: The SKU was already transferred for the customer.
      /// * CONDITION_NOT_MET or FAILED_PRECONDITION:
      ///     * The SKU requires domain verification to transfer, but the domain is
      ///     not verified.
      ///     * An Add-On SKU (example, Vault or Drive) is missing the
      ///     pre-requisite SKU (example, G Suite Basic).
      ///     * (Developer accounts only) Reseller and resold domain must meet the
      ///     following naming requirements:
      ///         * Domain names must start with goog-test.
      ///         * Domain names must include the reseller domain.
      ///     * Specify all transferring entitlements.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation TransferEntitlements(global::Google.Cloud.Channel.V1.TransferEntitlementsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferEntitlements(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Transfers customer entitlements to new reseller.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: The customer or offer resource was not found.
      /// * ALREADY_EXISTS: The SKU was already transferred for the customer.
      /// * CONDITION_NOT_MET or FAILED_PRECONDITION:
      ///     * The SKU requires domain verification to transfer, but the domain is
      ///     not verified.
      ///     * An Add-On SKU (example, Vault or Drive) is missing the
      ///     pre-requisite SKU (example, G Suite Basic).
      ///     * (Developer accounts only) Reseller and resold domain must meet the
      ///     following naming requirements:
      ///         * Domain names must start with goog-test.
      ///         * Domain names must include the reseller domain.
      ///     * Specify all transferring entitlements.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation TransferEntitlements(global::Google.Cloud.Channel.V1.TransferEntitlementsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TransferEntitlements, null, options, request);
      }
      /// <summary>
      /// Transfers customer entitlements to new reseller.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: The customer or offer resource was not found.
      /// * ALREADY_EXISTS: The SKU was already transferred for the customer.
      /// * CONDITION_NOT_MET or FAILED_PRECONDITION:
      ///     * The SKU requires domain verification to transfer, but the domain is
      ///     not verified.
      ///     * An Add-On SKU (example, Vault or Drive) is missing the
      ///     pre-requisite SKU (example, G Suite Basic).
      ///     * (Developer accounts only) Reseller and resold domain must meet the
      ///     following naming requirements:
      ///         * Domain names must start with goog-test.
      ///         * Domain names must include the reseller domain.
      ///     * Specify all transferring entitlements.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> TransferEntitlementsAsync(global::Google.Cloud.Channel.V1.TransferEntitlementsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferEntitlementsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Transfers customer entitlements to new reseller.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: The customer or offer resource was not found.
      /// * ALREADY_EXISTS: The SKU was already transferred for the customer.
      /// * CONDITION_NOT_MET or FAILED_PRECONDITION:
      ///     * The SKU requires domain verification to transfer, but the domain is
      ///     not verified.
      ///     * An Add-On SKU (example, Vault or Drive) is missing the
      ///     pre-requisite SKU (example, G Suite Basic).
      ///     * (Developer accounts only) Reseller and resold domain must meet the
      ///     following naming requirements:
      ///         * Domain names must start with goog-test.
      ///         * Domain names must include the reseller domain.
      ///     * Specify all transferring entitlements.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> TransferEntitlementsAsync(global::Google.Cloud.Channel.V1.TransferEntitlementsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TransferEntitlements, null, options, request);
      }
      /// <summary>
      /// Transfers customer entitlements from their current reseller to Google.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: The customer or offer resource was not found.
      /// * ALREADY_EXISTS: The SKU was already transferred for the customer.
      /// * CONDITION_NOT_MET or FAILED_PRECONDITION:
      ///     * The SKU requires domain verification to transfer, but the domain is
      ///     not verified.
      ///     * An Add-On SKU (example, Vault or Drive) is missing the
      ///     pre-requisite SKU (example, G Suite Basic).
      ///     * (Developer accounts only) Reseller and resold domain must meet the
      ///     following naming requirements:
      ///         * Domain names must start with goog-test.
      ///         * Domain names must include the reseller domain.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The response will contain
      /// google.protobuf.Empty on success. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation TransferEntitlementsToGoogle(global::Google.Cloud.Channel.V1.TransferEntitlementsToGoogleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferEntitlementsToGoogle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Transfers customer entitlements from their current reseller to Google.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: The customer or offer resource was not found.
      /// * ALREADY_EXISTS: The SKU was already transferred for the customer.
      /// * CONDITION_NOT_MET or FAILED_PRECONDITION:
      ///     * The SKU requires domain verification to transfer, but the domain is
      ///     not verified.
      ///     * An Add-On SKU (example, Vault or Drive) is missing the
      ///     pre-requisite SKU (example, G Suite Basic).
      ///     * (Developer accounts only) Reseller and resold domain must meet the
      ///     following naming requirements:
      ///         * Domain names must start with goog-test.
      ///         * Domain names must include the reseller domain.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The response will contain
      /// google.protobuf.Empty on success. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation TransferEntitlementsToGoogle(global::Google.Cloud.Channel.V1.TransferEntitlementsToGoogleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TransferEntitlementsToGoogle, null, options, request);
      }
      /// <summary>
      /// Transfers customer entitlements from their current reseller to Google.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: The customer or offer resource was not found.
      /// * ALREADY_EXISTS: The SKU was already transferred for the customer.
      /// * CONDITION_NOT_MET or FAILED_PRECONDITION:
      ///     * The SKU requires domain verification to transfer, but the domain is
      ///     not verified.
      ///     * An Add-On SKU (example, Vault or Drive) is missing the
      ///     pre-requisite SKU (example, G Suite Basic).
      ///     * (Developer accounts only) Reseller and resold domain must meet the
      ///     following naming requirements:
      ///         * Domain names must start with goog-test.
      ///         * Domain names must include the reseller domain.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The response will contain
      /// google.protobuf.Empty on success. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> TransferEntitlementsToGoogleAsync(global::Google.Cloud.Channel.V1.TransferEntitlementsToGoogleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferEntitlementsToGoogleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Transfers customer entitlements from their current reseller to Google.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: The customer or offer resource was not found.
      /// * ALREADY_EXISTS: The SKU was already transferred for the customer.
      /// * CONDITION_NOT_MET or FAILED_PRECONDITION:
      ///     * The SKU requires domain verification to transfer, but the domain is
      ///     not verified.
      ///     * An Add-On SKU (example, Vault or Drive) is missing the
      ///     pre-requisite SKU (example, G Suite Basic).
      ///     * (Developer accounts only) Reseller and resold domain must meet the
      ///     following naming requirements:
      ///         * Domain names must start with goog-test.
      ///         * Domain names must include the reseller domain.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The ID of a long-running operation.
      ///
      /// To get the results of the operation, call the GetOperation method of
      /// CloudChannelOperationsService. The response will contain
      /// google.protobuf.Empty on success. The Operation metadata will contain an
      /// instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> TransferEntitlementsToGoogleAsync(global::Google.Cloud.Channel.V1.TransferEntitlementsToGoogleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TransferEntitlementsToGoogle, null, options, request);
      }
      /// <summary>
      /// List [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink]s belonging to a distributor.
      /// You must be a distributor to call this method.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      ///
      /// Return value:
      /// The list of the distributor account's [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink] resources.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.ListChannelPartnerLinksResponse ListChannelPartnerLinks(global::Google.Cloud.Channel.V1.ListChannelPartnerLinksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListChannelPartnerLinks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink]s belonging to a distributor.
      /// You must be a distributor to call this method.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      ///
      /// Return value:
      /// The list of the distributor account's [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink] resources.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.ListChannelPartnerLinksResponse ListChannelPartnerLinks(global::Google.Cloud.Channel.V1.ListChannelPartnerLinksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListChannelPartnerLinks, null, options, request);
      }
      /// <summary>
      /// List [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink]s belonging to a distributor.
      /// You must be a distributor to call this method.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      ///
      /// Return value:
      /// The list of the distributor account's [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink] resources.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.ListChannelPartnerLinksResponse> ListChannelPartnerLinksAsync(global::Google.Cloud.Channel.V1.ListChannelPartnerLinksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListChannelPartnerLinksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink]s belonging to a distributor.
      /// You must be a distributor to call this method.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      ///
      /// Return value:
      /// The list of the distributor account's [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink] resources.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.ListChannelPartnerLinksResponse> ListChannelPartnerLinksAsync(global::Google.Cloud.Channel.V1.ListChannelPartnerLinksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListChannelPartnerLinks, null, options, request);
      }
      /// <summary>
      /// Returns the requested [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink] resource.
      /// You must be a distributor to call this method.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: ChannelPartnerLink resource not found because of an
      /// invalid channel partner link name.
      ///
      /// Return value:
      /// The [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.ChannelPartnerLink GetChannelPartnerLink(global::Google.Cloud.Channel.V1.GetChannelPartnerLinkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetChannelPartnerLink(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the requested [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink] resource.
      /// You must be a distributor to call this method.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: ChannelPartnerLink resource not found because of an
      /// invalid channel partner link name.
      ///
      /// Return value:
      /// The [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.ChannelPartnerLink GetChannelPartnerLink(global::Google.Cloud.Channel.V1.GetChannelPartnerLinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetChannelPartnerLink, null, options, request);
      }
      /// <summary>
      /// Returns the requested [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink] resource.
      /// You must be a distributor to call this method.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: ChannelPartnerLink resource not found because of an
      /// invalid channel partner link name.
      ///
      /// Return value:
      /// The [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.ChannelPartnerLink> GetChannelPartnerLinkAsync(global::Google.Cloud.Channel.V1.GetChannelPartnerLinkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetChannelPartnerLinkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the requested [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink] resource.
      /// You must be a distributor to call this method.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: ChannelPartnerLink resource not found because of an
      /// invalid channel partner link name.
      ///
      /// Return value:
      /// The [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.ChannelPartnerLink> GetChannelPartnerLinkAsync(global::Google.Cloud.Channel.V1.GetChannelPartnerLinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetChannelPartnerLink, null, options, request);
      }
      /// <summary>
      /// Initiates a channel partner link between a distributor and a reseller, or
      /// between resellers in an n-tier reseller channel.
      /// Invited partners need to follow the invite_link_uri provided in the
      /// response to accept. After accepting the invitation, a link is set up
      /// between the two parties.
      /// You must be a distributor to call this method.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * ALREADY_EXISTS: The ChannelPartnerLink sent in the request already
      /// exists.
      /// * NOT_FOUND: No Cloud Identity customer exists for provided domain.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The new [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.ChannelPartnerLink CreateChannelPartnerLink(global::Google.Cloud.Channel.V1.CreateChannelPartnerLinkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateChannelPartnerLink(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Initiates a channel partner link between a distributor and a reseller, or
      /// between resellers in an n-tier reseller channel.
      /// Invited partners need to follow the invite_link_uri provided in the
      /// response to accept. After accepting the invitation, a link is set up
      /// between the two parties.
      /// You must be a distributor to call this method.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * ALREADY_EXISTS: The ChannelPartnerLink sent in the request already
      /// exists.
      /// * NOT_FOUND: No Cloud Identity customer exists for provided domain.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The new [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.ChannelPartnerLink CreateChannelPartnerLink(global::Google.Cloud.Channel.V1.CreateChannelPartnerLinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateChannelPartnerLink, null, options, request);
      }
      /// <summary>
      /// Initiates a channel partner link between a distributor and a reseller, or
      /// between resellers in an n-tier reseller channel.
      /// Invited partners need to follow the invite_link_uri provided in the
      /// response to accept. After accepting the invitation, a link is set up
      /// between the two parties.
      /// You must be a distributor to call this method.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * ALREADY_EXISTS: The ChannelPartnerLink sent in the request already
      /// exists.
      /// * NOT_FOUND: No Cloud Identity customer exists for provided domain.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The new [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.ChannelPartnerLink> CreateChannelPartnerLinkAsync(global::Google.Cloud.Channel.V1.CreateChannelPartnerLinkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateChannelPartnerLinkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Initiates a channel partner link between a distributor and a reseller, or
      /// between resellers in an n-tier reseller channel.
      /// Invited partners need to follow the invite_link_uri provided in the
      /// response to accept. After accepting the invitation, a link is set up
      /// between the two parties.
      /// You must be a distributor to call this method.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * ALREADY_EXISTS: The ChannelPartnerLink sent in the request already
      /// exists.
      /// * NOT_FOUND: No Cloud Identity customer exists for provided domain.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The new [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.ChannelPartnerLink> CreateChannelPartnerLinkAsync(global::Google.Cloud.Channel.V1.CreateChannelPartnerLinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateChannelPartnerLink, null, options, request);
      }
      /// <summary>
      /// Updates a channel partner link. Distributors call this method to change a
      /// link's status. For example, to suspend a partner link.
      /// You must be a distributor to call this method.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT:
      ///     * Required request parameters are missing or invalid.
      ///     * Link state cannot change from invited to active or suspended.
      ///     * Cannot send reseller_cloud_identity_id, invite_url, or name in update
      ///     mask.
      /// * NOT_FOUND: ChannelPartnerLink resource not found.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The updated [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.ChannelPartnerLink UpdateChannelPartnerLink(global::Google.Cloud.Channel.V1.UpdateChannelPartnerLinkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateChannelPartnerLink(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a channel partner link. Distributors call this method to change a
      /// link's status. For example, to suspend a partner link.
      /// You must be a distributor to call this method.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT:
      ///     * Required request parameters are missing or invalid.
      ///     * Link state cannot change from invited to active or suspended.
      ///     * Cannot send reseller_cloud_identity_id, invite_url, or name in update
      ///     mask.
      /// * NOT_FOUND: ChannelPartnerLink resource not found.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The updated [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.ChannelPartnerLink UpdateChannelPartnerLink(global::Google.Cloud.Channel.V1.UpdateChannelPartnerLinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateChannelPartnerLink, null, options, request);
      }
      /// <summary>
      /// Updates a channel partner link. Distributors call this method to change a
      /// link's status. For example, to suspend a partner link.
      /// You must be a distributor to call this method.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT:
      ///     * Required request parameters are missing or invalid.
      ///     * Link state cannot change from invited to active or suspended.
      ///     * Cannot send reseller_cloud_identity_id, invite_url, or name in update
      ///     mask.
      /// * NOT_FOUND: ChannelPartnerLink resource not found.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The updated [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.ChannelPartnerLink> UpdateChannelPartnerLinkAsync(global::Google.Cloud.Channel.V1.UpdateChannelPartnerLinkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateChannelPartnerLinkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a channel partner link. Distributors call this method to change a
      /// link's status. For example, to suspend a partner link.
      /// You must be a distributor to call this method.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request is different
      /// from the reseller account in the API request.
      /// * INVALID_ARGUMENT:
      ///     * Required request parameters are missing or invalid.
      ///     * Link state cannot change from invited to active or suspended.
      ///     * Cannot send reseller_cloud_identity_id, invite_url, or name in update
      ///     mask.
      /// * NOT_FOUND: ChannelPartnerLink resource not found.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The updated [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.ChannelPartnerLink> UpdateChannelPartnerLinkAsync(global::Google.Cloud.Channel.V1.UpdateChannelPartnerLinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateChannelPartnerLink, null, options, request);
      }
      /// <summary>
      /// Returns the requested [Offer][google.cloud.channel.v1.Offer] resource.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The entitlement doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Entitlement or offer was not found.
      ///
      /// Return value:
      /// The [Offer][google.cloud.channel.v1.Offer] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.Offer LookupOffer(global::Google.Cloud.Channel.V1.LookupOfferRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LookupOffer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the requested [Offer][google.cloud.channel.v1.Offer] resource.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The entitlement doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Entitlement or offer was not found.
      ///
      /// Return value:
      /// The [Offer][google.cloud.channel.v1.Offer] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.Offer LookupOffer(global::Google.Cloud.Channel.V1.LookupOfferRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LookupOffer, null, options, request);
      }
      /// <summary>
      /// Returns the requested [Offer][google.cloud.channel.v1.Offer] resource.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The entitlement doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Entitlement or offer was not found.
      ///
      /// Return value:
      /// The [Offer][google.cloud.channel.v1.Offer] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.Offer> LookupOfferAsync(global::Google.Cloud.Channel.V1.LookupOfferRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LookupOfferAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the requested [Offer][google.cloud.channel.v1.Offer] resource.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The entitlement doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: Entitlement or offer was not found.
      ///
      /// Return value:
      /// The [Offer][google.cloud.channel.v1.Offer] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.Offer> LookupOfferAsync(global::Google.Cloud.Channel.V1.LookupOfferRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LookupOffer, null, options, request);
      }
      /// <summary>
      /// Lists the Products the reseller is authorized to sell.
      ///
      /// Possible error codes:
      ///
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.ListProductsResponse ListProducts(global::Google.Cloud.Channel.V1.ListProductsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListProducts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the Products the reseller is authorized to sell.
      ///
      /// Possible error codes:
      ///
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.ListProductsResponse ListProducts(global::Google.Cloud.Channel.V1.ListProductsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListProducts, null, options, request);
      }
      /// <summary>
      /// Lists the Products the reseller is authorized to sell.
      ///
      /// Possible error codes:
      ///
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.ListProductsResponse> ListProductsAsync(global::Google.Cloud.Channel.V1.ListProductsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListProductsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the Products the reseller is authorized to sell.
      ///
      /// Possible error codes:
      ///
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.ListProductsResponse> ListProductsAsync(global::Google.Cloud.Channel.V1.ListProductsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListProducts, null, options, request);
      }
      /// <summary>
      /// Lists the SKUs for a product the reseller is authorized to sell.
      ///
      /// Possible error codes:
      ///
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.ListSkusResponse ListSkus(global::Google.Cloud.Channel.V1.ListSkusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSkus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the SKUs for a product the reseller is authorized to sell.
      ///
      /// Possible error codes:
      ///
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.ListSkusResponse ListSkus(global::Google.Cloud.Channel.V1.ListSkusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSkus, null, options, request);
      }
      /// <summary>
      /// Lists the SKUs for a product the reseller is authorized to sell.
      ///
      /// Possible error codes:
      ///
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.ListSkusResponse> ListSkusAsync(global::Google.Cloud.Channel.V1.ListSkusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSkusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the SKUs for a product the reseller is authorized to sell.
      ///
      /// Possible error codes:
      ///
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.ListSkusResponse> ListSkusAsync(global::Google.Cloud.Channel.V1.ListSkusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSkus, null, options, request);
      }
      /// <summary>
      /// Lists the Offers the reseller can sell.
      ///
      /// Possible error codes:
      ///
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.ListOffersResponse ListOffers(global::Google.Cloud.Channel.V1.ListOffersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOffers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the Offers the reseller can sell.
      ///
      /// Possible error codes:
      ///
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.ListOffersResponse ListOffers(global::Google.Cloud.Channel.V1.ListOffersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListOffers, null, options, request);
      }
      /// <summary>
      /// Lists the Offers the reseller can sell.
      ///
      /// Possible error codes:
      ///
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.ListOffersResponse> ListOffersAsync(global::Google.Cloud.Channel.V1.ListOffersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOffersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the Offers the reseller can sell.
      ///
      /// Possible error codes:
      ///
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.ListOffersResponse> ListOffersAsync(global::Google.Cloud.Channel.V1.ListOffersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListOffers, null, options, request);
      }
      /// <summary>
      /// Lists the following:
      ///
      /// * SKUs that you can purchase for a customer
      /// * SKUs that you can upgrade or downgrade for an entitlement.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.ListPurchasableSkusResponse ListPurchasableSkus(global::Google.Cloud.Channel.V1.ListPurchasableSkusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPurchasableSkus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the following:
      ///
      /// * SKUs that you can purchase for a customer
      /// * SKUs that you can upgrade or downgrade for an entitlement.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.ListPurchasableSkusResponse ListPurchasableSkus(global::Google.Cloud.Channel.V1.ListPurchasableSkusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListPurchasableSkus, null, options, request);
      }
      /// <summary>
      /// Lists the following:
      ///
      /// * SKUs that you can purchase for a customer
      /// * SKUs that you can upgrade or downgrade for an entitlement.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.ListPurchasableSkusResponse> ListPurchasableSkusAsync(global::Google.Cloud.Channel.V1.ListPurchasableSkusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPurchasableSkusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the following:
      ///
      /// * SKUs that you can purchase for a customer
      /// * SKUs that you can upgrade or downgrade for an entitlement.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.ListPurchasableSkusResponse> ListPurchasableSkusAsync(global::Google.Cloud.Channel.V1.ListPurchasableSkusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListPurchasableSkus, null, options, request);
      }
      /// <summary>
      /// Lists the following:
      ///
      /// * Offers that you can purchase for a customer.
      /// * Offers that you can change for an entitlement.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.ListPurchasableOffersResponse ListPurchasableOffers(global::Google.Cloud.Channel.V1.ListPurchasableOffersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPurchasableOffers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the following:
      ///
      /// * Offers that you can purchase for a customer.
      /// * Offers that you can change for an entitlement.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.ListPurchasableOffersResponse ListPurchasableOffers(global::Google.Cloud.Channel.V1.ListPurchasableOffersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListPurchasableOffers, null, options, request);
      }
      /// <summary>
      /// Lists the following:
      ///
      /// * Offers that you can purchase for a customer.
      /// * Offers that you can change for an entitlement.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.ListPurchasableOffersResponse> ListPurchasableOffersAsync(global::Google.Cloud.Channel.V1.ListPurchasableOffersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPurchasableOffersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the following:
      ///
      /// * Offers that you can purchase for a customer.
      /// * Offers that you can change for an entitlement.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The customer doesn't belong to the reseller
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.ListPurchasableOffersResponse> ListPurchasableOffersAsync(global::Google.Cloud.Channel.V1.ListPurchasableOffersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListPurchasableOffers, null, options, request);
      }
      /// <summary>
      /// Registers a service account with subscriber privileges on the Cloud Pub/Sub
      /// topic for this Channel Services account. After you create a
      /// subscriber, you get the events through [SubscriberEvent][google.cloud.channel.v1.SubscriberEvent]
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request and the
      /// provided reseller account are different, or the impersonated user
      /// is not a super admin.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The topic name with the registered service email address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.RegisterSubscriberResponse RegisterSubscriber(global::Google.Cloud.Channel.V1.RegisterSubscriberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterSubscriber(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Registers a service account with subscriber privileges on the Cloud Pub/Sub
      /// topic for this Channel Services account. After you create a
      /// subscriber, you get the events through [SubscriberEvent][google.cloud.channel.v1.SubscriberEvent]
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request and the
      /// provided reseller account are different, or the impersonated user
      /// is not a super admin.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The topic name with the registered service email address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.RegisterSubscriberResponse RegisterSubscriber(global::Google.Cloud.Channel.V1.RegisterSubscriberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RegisterSubscriber, null, options, request);
      }
      /// <summary>
      /// Registers a service account with subscriber privileges on the Cloud Pub/Sub
      /// topic for this Channel Services account. After you create a
      /// subscriber, you get the events through [SubscriberEvent][google.cloud.channel.v1.SubscriberEvent]
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request and the
      /// provided reseller account are different, or the impersonated user
      /// is not a super admin.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The topic name with the registered service email address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.RegisterSubscriberResponse> RegisterSubscriberAsync(global::Google.Cloud.Channel.V1.RegisterSubscriberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterSubscriberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Registers a service account with subscriber privileges on the Cloud Pub/Sub
      /// topic for this Channel Services account. After you create a
      /// subscriber, you get the events through [SubscriberEvent][google.cloud.channel.v1.SubscriberEvent]
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request and the
      /// provided reseller account are different, or the impersonated user
      /// is not a super admin.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The topic name with the registered service email address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.RegisterSubscriberResponse> RegisterSubscriberAsync(global::Google.Cloud.Channel.V1.RegisterSubscriberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RegisterSubscriber, null, options, request);
      }
      /// <summary>
      /// Unregisters a service account with subscriber privileges on the Cloud
      /// Pub/Sub topic created for this Channel Services account. If there are no
      /// service accounts left with subscriber privileges, this deletes the topic.
      /// You can call ListSubscribers to check for these accounts.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request and the
      /// provided reseller account are different, or the impersonated user
      /// is not a super admin.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: The topic resource doesn't exist.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The topic name that unregistered the service email address.
      /// Returns a success response if the service email address wasn't registered
      /// with the topic.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.UnregisterSubscriberResponse UnregisterSubscriber(global::Google.Cloud.Channel.V1.UnregisterSubscriberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnregisterSubscriber(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Unregisters a service account with subscriber privileges on the Cloud
      /// Pub/Sub topic created for this Channel Services account. If there are no
      /// service accounts left with subscriber privileges, this deletes the topic.
      /// You can call ListSubscribers to check for these accounts.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request and the
      /// provided reseller account are different, or the impersonated user
      /// is not a super admin.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: The topic resource doesn't exist.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The topic name that unregistered the service email address.
      /// Returns a success response if the service email address wasn't registered
      /// with the topic.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.UnregisterSubscriberResponse UnregisterSubscriber(global::Google.Cloud.Channel.V1.UnregisterSubscriberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnregisterSubscriber, null, options, request);
      }
      /// <summary>
      /// Unregisters a service account with subscriber privileges on the Cloud
      /// Pub/Sub topic created for this Channel Services account. If there are no
      /// service accounts left with subscriber privileges, this deletes the topic.
      /// You can call ListSubscribers to check for these accounts.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request and the
      /// provided reseller account are different, or the impersonated user
      /// is not a super admin.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: The topic resource doesn't exist.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The topic name that unregistered the service email address.
      /// Returns a success response if the service email address wasn't registered
      /// with the topic.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.UnregisterSubscriberResponse> UnregisterSubscriberAsync(global::Google.Cloud.Channel.V1.UnregisterSubscriberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnregisterSubscriberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Unregisters a service account with subscriber privileges on the Cloud
      /// Pub/Sub topic created for this Channel Services account. If there are no
      /// service accounts left with subscriber privileges, this deletes the topic.
      /// You can call ListSubscribers to check for these accounts.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request and the
      /// provided reseller account are different, or the impersonated user
      /// is not a super admin.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: The topic resource doesn't exist.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// The topic name that unregistered the service email address.
      /// Returns a success response if the service email address wasn't registered
      /// with the topic.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.UnregisterSubscriberResponse> UnregisterSubscriberAsync(global::Google.Cloud.Channel.V1.UnregisterSubscriberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnregisterSubscriber, null, options, request);
      }
      /// <summary>
      /// Lists service accounts with subscriber privileges on the Cloud Pub/Sub
      /// topic created for this Channel Services account.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request and the
      /// provided reseller account are different, or the impersonated user
      /// is not a super admin.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: The topic resource doesn't exist.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// A list of service email addresses.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.ListSubscribersResponse ListSubscribers(global::Google.Cloud.Channel.V1.ListSubscribersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSubscribers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists service accounts with subscriber privileges on the Cloud Pub/Sub
      /// topic created for this Channel Services account.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request and the
      /// provided reseller account are different, or the impersonated user
      /// is not a super admin.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: The topic resource doesn't exist.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// A list of service email addresses.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Channel.V1.ListSubscribersResponse ListSubscribers(global::Google.Cloud.Channel.V1.ListSubscribersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSubscribers, null, options, request);
      }
      /// <summary>
      /// Lists service accounts with subscriber privileges on the Cloud Pub/Sub
      /// topic created for this Channel Services account.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request and the
      /// provided reseller account are different, or the impersonated user
      /// is not a super admin.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: The topic resource doesn't exist.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// A list of service email addresses.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.ListSubscribersResponse> ListSubscribersAsync(global::Google.Cloud.Channel.V1.ListSubscribersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSubscribersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists service accounts with subscriber privileges on the Cloud Pub/Sub
      /// topic created for this Channel Services account.
      ///
      /// Possible error codes:
      ///
      /// * PERMISSION_DENIED: The reseller account making the request and the
      /// provided reseller account are different, or the impersonated user
      /// is not a super admin.
      /// * INVALID_ARGUMENT: Required request parameters are missing or invalid.
      /// * NOT_FOUND: The topic resource doesn't exist.
      /// * INTERNAL: Any non-user error related to a technical issue in the
      /// backend. Contact Cloud Channel support.
      /// * UNKNOWN: Any non-user error related to a technical issue in the backend.
      /// Contact Cloud Channel support.
      ///
      /// Return value:
      /// A list of service email addresses.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Channel.V1.ListSubscribersResponse> ListSubscribersAsync(global::Google.Cloud.Channel.V1.ListSubscribersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSubscribers, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CloudChannelServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CloudChannelServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CloudChannelServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListCustomers, serviceImpl.ListCustomers)
          .AddMethod(__Method_GetCustomer, serviceImpl.GetCustomer)
          .AddMethod(__Method_CheckCloudIdentityAccountsExist, serviceImpl.CheckCloudIdentityAccountsExist)
          .AddMethod(__Method_CreateCustomer, serviceImpl.CreateCustomer)
          .AddMethod(__Method_UpdateCustomer, serviceImpl.UpdateCustomer)
          .AddMethod(__Method_DeleteCustomer, serviceImpl.DeleteCustomer)
          .AddMethod(__Method_ImportCustomer, serviceImpl.ImportCustomer)
          .AddMethod(__Method_ProvisionCloudIdentity, serviceImpl.ProvisionCloudIdentity)
          .AddMethod(__Method_ListEntitlements, serviceImpl.ListEntitlements)
          .AddMethod(__Method_ListTransferableSkus, serviceImpl.ListTransferableSkus)
          .AddMethod(__Method_ListTransferableOffers, serviceImpl.ListTransferableOffers)
          .AddMethod(__Method_GetEntitlement, serviceImpl.GetEntitlement)
          .AddMethod(__Method_CreateEntitlement, serviceImpl.CreateEntitlement)
          .AddMethod(__Method_ChangeParameters, serviceImpl.ChangeParameters)
          .AddMethod(__Method_ChangeRenewalSettings, serviceImpl.ChangeRenewalSettings)
          .AddMethod(__Method_ChangeOffer, serviceImpl.ChangeOffer)
          .AddMethod(__Method_StartPaidService, serviceImpl.StartPaidService)
          .AddMethod(__Method_SuspendEntitlement, serviceImpl.SuspendEntitlement)
          .AddMethod(__Method_CancelEntitlement, serviceImpl.CancelEntitlement)
          .AddMethod(__Method_ActivateEntitlement, serviceImpl.ActivateEntitlement)
          .AddMethod(__Method_TransferEntitlements, serviceImpl.TransferEntitlements)
          .AddMethod(__Method_TransferEntitlementsToGoogle, serviceImpl.TransferEntitlementsToGoogle)
          .AddMethod(__Method_ListChannelPartnerLinks, serviceImpl.ListChannelPartnerLinks)
          .AddMethod(__Method_GetChannelPartnerLink, serviceImpl.GetChannelPartnerLink)
          .AddMethod(__Method_CreateChannelPartnerLink, serviceImpl.CreateChannelPartnerLink)
          .AddMethod(__Method_UpdateChannelPartnerLink, serviceImpl.UpdateChannelPartnerLink)
          .AddMethod(__Method_LookupOffer, serviceImpl.LookupOffer)
          .AddMethod(__Method_ListProducts, serviceImpl.ListProducts)
          .AddMethod(__Method_ListSkus, serviceImpl.ListSkus)
          .AddMethod(__Method_ListOffers, serviceImpl.ListOffers)
          .AddMethod(__Method_ListPurchasableSkus, serviceImpl.ListPurchasableSkus)
          .AddMethod(__Method_ListPurchasableOffers, serviceImpl.ListPurchasableOffers)
          .AddMethod(__Method_RegisterSubscriber, serviceImpl.RegisterSubscriber)
          .AddMethod(__Method_UnregisterSubscriber, serviceImpl.UnregisterSubscriber)
          .AddMethod(__Method_ListSubscribers, serviceImpl.ListSubscribers).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CloudChannelServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListCustomers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.ListCustomersRequest, global::Google.Cloud.Channel.V1.ListCustomersResponse>(serviceImpl.ListCustomers));
      serviceBinder.AddMethod(__Method_GetCustomer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.GetCustomerRequest, global::Google.Cloud.Channel.V1.Customer>(serviceImpl.GetCustomer));
      serviceBinder.AddMethod(__Method_CheckCloudIdentityAccountsExist, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.CheckCloudIdentityAccountsExistRequest, global::Google.Cloud.Channel.V1.CheckCloudIdentityAccountsExistResponse>(serviceImpl.CheckCloudIdentityAccountsExist));
      serviceBinder.AddMethod(__Method_CreateCustomer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.CreateCustomerRequest, global::Google.Cloud.Channel.V1.Customer>(serviceImpl.CreateCustomer));
      serviceBinder.AddMethod(__Method_UpdateCustomer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.UpdateCustomerRequest, global::Google.Cloud.Channel.V1.Customer>(serviceImpl.UpdateCustomer));
      serviceBinder.AddMethod(__Method_DeleteCustomer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.DeleteCustomerRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteCustomer));
      serviceBinder.AddMethod(__Method_ImportCustomer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.ImportCustomerRequest, global::Google.Cloud.Channel.V1.Customer>(serviceImpl.ImportCustomer));
      serviceBinder.AddMethod(__Method_ProvisionCloudIdentity, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.ProvisionCloudIdentityRequest, global::Google.LongRunning.Operation>(serviceImpl.ProvisionCloudIdentity));
      serviceBinder.AddMethod(__Method_ListEntitlements, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.ListEntitlementsRequest, global::Google.Cloud.Channel.V1.ListEntitlementsResponse>(serviceImpl.ListEntitlements));
      serviceBinder.AddMethod(__Method_ListTransferableSkus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.ListTransferableSkusRequest, global::Google.Cloud.Channel.V1.ListTransferableSkusResponse>(serviceImpl.ListTransferableSkus));
      serviceBinder.AddMethod(__Method_ListTransferableOffers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.ListTransferableOffersRequest, global::Google.Cloud.Channel.V1.ListTransferableOffersResponse>(serviceImpl.ListTransferableOffers));
      serviceBinder.AddMethod(__Method_GetEntitlement, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.GetEntitlementRequest, global::Google.Cloud.Channel.V1.Entitlement>(serviceImpl.GetEntitlement));
      serviceBinder.AddMethod(__Method_CreateEntitlement, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.CreateEntitlementRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateEntitlement));
      serviceBinder.AddMethod(__Method_ChangeParameters, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.ChangeParametersRequest, global::Google.LongRunning.Operation>(serviceImpl.ChangeParameters));
      serviceBinder.AddMethod(__Method_ChangeRenewalSettings, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.ChangeRenewalSettingsRequest, global::Google.LongRunning.Operation>(serviceImpl.ChangeRenewalSettings));
      serviceBinder.AddMethod(__Method_ChangeOffer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.ChangeOfferRequest, global::Google.LongRunning.Operation>(serviceImpl.ChangeOffer));
      serviceBinder.AddMethod(__Method_StartPaidService, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.StartPaidServiceRequest, global::Google.LongRunning.Operation>(serviceImpl.StartPaidService));
      serviceBinder.AddMethod(__Method_SuspendEntitlement, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.SuspendEntitlementRequest, global::Google.LongRunning.Operation>(serviceImpl.SuspendEntitlement));
      serviceBinder.AddMethod(__Method_CancelEntitlement, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.CancelEntitlementRequest, global::Google.LongRunning.Operation>(serviceImpl.CancelEntitlement));
      serviceBinder.AddMethod(__Method_ActivateEntitlement, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.ActivateEntitlementRequest, global::Google.LongRunning.Operation>(serviceImpl.ActivateEntitlement));
      serviceBinder.AddMethod(__Method_TransferEntitlements, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.TransferEntitlementsRequest, global::Google.LongRunning.Operation>(serviceImpl.TransferEntitlements));
      serviceBinder.AddMethod(__Method_TransferEntitlementsToGoogle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.TransferEntitlementsToGoogleRequest, global::Google.LongRunning.Operation>(serviceImpl.TransferEntitlementsToGoogle));
      serviceBinder.AddMethod(__Method_ListChannelPartnerLinks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.ListChannelPartnerLinksRequest, global::Google.Cloud.Channel.V1.ListChannelPartnerLinksResponse>(serviceImpl.ListChannelPartnerLinks));
      serviceBinder.AddMethod(__Method_GetChannelPartnerLink, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.GetChannelPartnerLinkRequest, global::Google.Cloud.Channel.V1.ChannelPartnerLink>(serviceImpl.GetChannelPartnerLink));
      serviceBinder.AddMethod(__Method_CreateChannelPartnerLink, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.CreateChannelPartnerLinkRequest, global::Google.Cloud.Channel.V1.ChannelPartnerLink>(serviceImpl.CreateChannelPartnerLink));
      serviceBinder.AddMethod(__Method_UpdateChannelPartnerLink, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.UpdateChannelPartnerLinkRequest, global::Google.Cloud.Channel.V1.ChannelPartnerLink>(serviceImpl.UpdateChannelPartnerLink));
      serviceBinder.AddMethod(__Method_LookupOffer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.LookupOfferRequest, global::Google.Cloud.Channel.V1.Offer>(serviceImpl.LookupOffer));
      serviceBinder.AddMethod(__Method_ListProducts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.ListProductsRequest, global::Google.Cloud.Channel.V1.ListProductsResponse>(serviceImpl.ListProducts));
      serviceBinder.AddMethod(__Method_ListSkus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.ListSkusRequest, global::Google.Cloud.Channel.V1.ListSkusResponse>(serviceImpl.ListSkus));
      serviceBinder.AddMethod(__Method_ListOffers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.ListOffersRequest, global::Google.Cloud.Channel.V1.ListOffersResponse>(serviceImpl.ListOffers));
      serviceBinder.AddMethod(__Method_ListPurchasableSkus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.ListPurchasableSkusRequest, global::Google.Cloud.Channel.V1.ListPurchasableSkusResponse>(serviceImpl.ListPurchasableSkus));
      serviceBinder.AddMethod(__Method_ListPurchasableOffers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.ListPurchasableOffersRequest, global::Google.Cloud.Channel.V1.ListPurchasableOffersResponse>(serviceImpl.ListPurchasableOffers));
      serviceBinder.AddMethod(__Method_RegisterSubscriber, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.RegisterSubscriberRequest, global::Google.Cloud.Channel.V1.RegisterSubscriberResponse>(serviceImpl.RegisterSubscriber));
      serviceBinder.AddMethod(__Method_UnregisterSubscriber, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.UnregisterSubscriberRequest, global::Google.Cloud.Channel.V1.UnregisterSubscriberResponse>(serviceImpl.UnregisterSubscriber));
      serviceBinder.AddMethod(__Method_ListSubscribers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Channel.V1.ListSubscribersRequest, global::Google.Cloud.Channel.V1.ListSubscribersResponse>(serviceImpl.ListSubscribers));
    }

  }
}
#endregion
