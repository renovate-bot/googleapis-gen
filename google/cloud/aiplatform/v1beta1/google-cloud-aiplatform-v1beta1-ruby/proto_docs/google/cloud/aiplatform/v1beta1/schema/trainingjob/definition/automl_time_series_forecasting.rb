# frozen_string_literal: true

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!


module Google
  module Cloud
    module Aiplatform
      module V1beta1
        module Schema
          module Trainingjob
            module Definition
              # A TrainingJob that trains and uploads an AutoML Forecasting Model.
              # @!attribute [rw] inputs
              #   @return [::Google::Cloud::Aiplatform::V1beta1::Schema::Trainingjob::Definition::AutoMlForecastingInputs]
              #     The input parameters of this TrainingJob.
              # @!attribute [rw] metadata
              #   @return [::Google::Cloud::Aiplatform::V1beta1::Schema::Trainingjob::Definition::AutoMlForecastingMetadata]
              #     The metadata information.
              class AutoMlForecasting
                include ::Google::Protobuf::MessageExts
                extend ::Google::Protobuf::MessageExts::ClassMethods
              end

              # @!attribute [rw] target_column
              #   @return [::String]
              #     The name of the column that the model is to predict.
              # @!attribute [rw] time_series_identifier_column
              #   @return [::String]
              #     The name of the column that identifies the time series.
              # @!attribute [rw] time_column
              #   @return [::String]
              #     The name of the column that identifies time order in the time series.
              # @!attribute [rw] transformations
              #   @return [::Array<::Google::Cloud::Aiplatform::V1beta1::Schema::Trainingjob::Definition::AutoMlForecastingInputs::Transformation>]
              #     Each transformation will apply transform function to given input column.
              #     And the result will be used for training.
              #     When creating transformation for BigQuery Struct column, the column should
              #     be flattened using "." as the delimiter.
              # @!attribute [rw] optimization_objective
              #   @return [::String]
              #     Objective function the model is optimizing towards. The training process
              #     creates a model that optimizes the value of the objective
              #     function over the validation set.
              #
              #     The supported optimization objectives:
              #
              #       * "minimize-rmse" (default) - Minimize root-mean-squared error (RMSE).
              #
              #       * "minimize-mae" - Minimize mean-absolute error (MAE).
              #
              #       * "minimize-rmsle" - Minimize root-mean-squared log error (RMSLE).
              #
              #       * "minimize-rmspe" - Minimize root-mean-squared percentage error (RMSPE).
              #
              #       * "minimize-wape-mae" - Minimize the combination of weighted absolute
              #         percentage error (WAPE) and mean-absolute-error (MAE).
              #
              #       * "minimize-quantile-loss" - Minimize the quantile loss at the quantiles
              #         defined in `quantiles`.
              # @!attribute [rw] train_budget_milli_node_hours
              #   @return [::Integer]
              #     Required. The train budget of creating this model, expressed in milli node
              #     hours i.e. 1,000 value in this field means 1 node hour.
              #
              #     The training cost of the model will not exceed this budget. The final cost
              #     will be attempted to be close to the budget, though may end up being (even)
              #     noticeably smaller - at the backend's discretion. This especially may
              #     happen when further model training ceases to provide any improvements.
              #
              #     If the budget is set to a value known to be insufficient to train a
              #     model for the given dataset, the training won't be attempted and
              #     will error.
              #
              #     The train budget must be between 1,000 and 72,000 milli node hours,
              #     inclusive.
              # @!attribute [rw] weight_column
              #   @return [::String]
              #     Column name that should be used as the weight column.
              #     Higher values in this column give more importance to the row
              #     during model training. The column must have numeric values between 0 and
              #     10000 inclusively; 0 means the row is ignored for training. If weight
              #     column field is not set, then all rows are assumed to have equal weight
              #     of 1.
              # @!attribute [rw] time_series_attribute_columns
              #   @return [::Array<::String>]
              #     Column names that should be used as attribute columns.
              #     The value of these columns does not vary as a function of time.
              #     For example, store ID or item color.
              # @!attribute [rw] unavailable_at_forecast_columns
              #   @return [::Array<::String>]
              #     Names of columns that are unavailable when a forecast is requested.
              #     This column contains information for the given entity (identified
              #     by the time_series_identifier_column) that is unknown before the forecast
              #     For example, actual weather on a given day.
              # @!attribute [rw] available_at_forecast_columns
              #   @return [::Array<::String>]
              #     Names of columns that are available and provided when a forecast
              #     is requested. These columns
              #     contain information for the given entity (identified by the
              #     time_series_identifier_column column) that is known at forecast.
              #     For example, predicted weather for a specific day.
              # @!attribute [rw] data_granularity
              #   @return [::Google::Cloud::Aiplatform::V1beta1::Schema::Trainingjob::Definition::AutoMlForecastingInputs::Granularity]
              #     Expected difference in time granularity between rows in the data.
              # @!attribute [rw] forecast_horizon
              #   @return [::Integer]
              #     The amount of time into the future for which forecasted values for the
              #     target are returned. Expressed in number of units defined by the
              #     `data_granularity` field.
              # @!attribute [rw] context_window
              #   @return [::Integer]
              #     The amount of time into the past training and prediction data is used
              #     for model training and prediction respectively. Expressed in number of
              #     units defined by the `data_granularity` field.
              # @!attribute [rw] export_evaluated_data_items_config
              #   @return [::Google::Cloud::Aiplatform::V1beta1::Schema::Trainingjob::Definition::ExportEvaluatedDataItemsConfig]
              #     Configuration for exporting test set predictions to a BigQuery table. If
              #     this configuration is absent, then the export is not performed.
              # @!attribute [rw] quantiles
              #   @return [::Array<::Float>]
              #     Quantiles to use for minimize-quantile-loss `optimization_objective`. Up to
              #     5 quantiles are allowed of values between 0 and 1, exclusive. Required if
              #     the value of optimization_objective is minimize-quantile-loss. Represents
              #     the percent quantiles to use for that objective. Quantiles must be unique.
              # @!attribute [rw] validation_options
              #   @return [::String]
              #     Validation options for the data validation component. The available options
              #     are:
              #
              #       * "fail-pipeline" - default, will validate against the validation and
              #          fail the pipeline if it fails.
              #
              #       * "ignore-validation" - ignore the results of the validation and continue
              # @!attribute [rw] additional_experiments
              #   @return [::Array<::String>]
              #     Additional experiment flags for the time series forcasting training.
              class AutoMlForecastingInputs
                include ::Google::Protobuf::MessageExts
                extend ::Google::Protobuf::MessageExts::ClassMethods

                # @!attribute [rw] auto
                #   @return [::Google::Cloud::Aiplatform::V1beta1::Schema::Trainingjob::Definition::AutoMlForecastingInputs::Transformation::AutoTransformation]
                # @!attribute [rw] numeric
                #   @return [::Google::Cloud::Aiplatform::V1beta1::Schema::Trainingjob::Definition::AutoMlForecastingInputs::Transformation::NumericTransformation]
                # @!attribute [rw] categorical
                #   @return [::Google::Cloud::Aiplatform::V1beta1::Schema::Trainingjob::Definition::AutoMlForecastingInputs::Transformation::CategoricalTransformation]
                # @!attribute [rw] timestamp
                #   @return [::Google::Cloud::Aiplatform::V1beta1::Schema::Trainingjob::Definition::AutoMlForecastingInputs::Transformation::TimestampTransformation]
                # @!attribute [rw] text
                #   @return [::Google::Cloud::Aiplatform::V1beta1::Schema::Trainingjob::Definition::AutoMlForecastingInputs::Transformation::TextTransformation]
                class Transformation
                  include ::Google::Protobuf::MessageExts
                  extend ::Google::Protobuf::MessageExts::ClassMethods

                  # Training pipeline will infer the proper transformation based on the
                  # statistic of dataset.
                  # @!attribute [rw] column_name
                  #   @return [::String]
                  class AutoTransformation
                    include ::Google::Protobuf::MessageExts
                    extend ::Google::Protobuf::MessageExts::ClassMethods
                  end

                  # Training pipeline will perform following transformation functions.
                  #
                  # *  The value converted to float32.
                  #
                  # *  The z_score of the value.
                  #
                  # *  log(value+1) when the value is greater than or equal to 0. Otherwise,
                  #    this transformation is not applied and the value is considered a
                  #    missing value.
                  #
                  # *  z_score of log(value+1) when the value is greater than or equal to 0.
                  #    Otherwise, this transformation is not applied and the value is
                  #    considered a missing value.
                  #
                  # *  A boolean value that indicates whether the value is valid.
                  # @!attribute [rw] column_name
                  #   @return [::String]
                  class NumericTransformation
                    include ::Google::Protobuf::MessageExts
                    extend ::Google::Protobuf::MessageExts::ClassMethods
                  end

                  # Training pipeline will perform following transformation functions.
                  #
                  # *  The categorical string as is--no change to case, punctuation,
                  #    spelling, tense, and so on.
                  #
                  # *  Convert the category name to a dictionary lookup index and generate an
                  #    embedding for each index.
                  #
                  # *  Categories that appear less than 5 times in the training dataset are
                  #    treated as the "unknown" category. The "unknown" category gets its own
                  #    special lookup index and resulting embedding.
                  # @!attribute [rw] column_name
                  #   @return [::String]
                  class CategoricalTransformation
                    include ::Google::Protobuf::MessageExts
                    extend ::Google::Protobuf::MessageExts::ClassMethods
                  end

                  # Training pipeline will perform following transformation functions.
                  #
                  # *  Apply the transformation functions for Numerical columns.
                  #
                  # *  Determine the year, month, day,and weekday. Treat each value from the
                  #    timestamp as a Categorical column.
                  #
                  # *  Invalid numerical values (for example, values that fall outside of a
                  #    typical timestamp range, or are extreme values) receive no special
                  #    treatment and are not removed.
                  # @!attribute [rw] column_name
                  #   @return [::String]
                  # @!attribute [rw] time_format
                  #   @return [::String]
                  #     The format in which that time field is expressed. The time_format must
                  #     either be one of:
                  #
                  #     * `unix-seconds`
                  #
                  #     * `unix-milliseconds`
                  #
                  #     * `unix-microseconds`
                  #
                  #     * `unix-nanoseconds`
                  #
                  #     (for respectively number of seconds, milliseconds, microseconds and
                  #     nanoseconds since start of the Unix epoch);
                  #
                  #     or be written in `strftime` syntax.
                  #
                  #     If time_format is not set, then the
                  #     default format is RFC 3339 `date-time` format, where
                  #     `time-offset` = `"Z"` (e.g. 1985-04-12T23:20:50.52Z)
                  class TimestampTransformation
                    include ::Google::Protobuf::MessageExts
                    extend ::Google::Protobuf::MessageExts::ClassMethods
                  end

                  # Training pipeline will perform following transformation functions.
                  #
                  # *  The text as is--no change to case, punctuation, spelling, tense, and
                  #    so on.
                  #
                  # *  Convert the category name to a dictionary lookup index and generate an
                  #    embedding for each index.
                  # @!attribute [rw] column_name
                  #   @return [::String]
                  class TextTransformation
                    include ::Google::Protobuf::MessageExts
                    extend ::Google::Protobuf::MessageExts::ClassMethods
                  end
                end

                # A duration of time expressed in time granularity units.
                # @!attribute [rw] unit
                #   @return [::String]
                #     The time granularity unit of this time period.
                #     The supported units are:
                #
                #      * "minute"
                #
                #      * "hour"
                #
                #      * "day"
                #
                #      * "week"
                #
                #      * "month"
                #
                #      * "year"
                # @!attribute [rw] quantity
                #   @return [::Integer]
                #     The number of granularity_units between data points in the training
                #     data. If `granularity_unit` is `minute`,
                #     can be 1, 5, 10, 15, or 30. For all other values of `granularity_unit`,
                #     must be 1.
                class Granularity
                  include ::Google::Protobuf::MessageExts
                  extend ::Google::Protobuf::MessageExts::ClassMethods
                end
              end

              # Model metadata specific to AutoML Forecasting.
              # @!attribute [rw] train_cost_milli_node_hours
              #   @return [::Integer]
              #     Output only. The actual training cost of the model, expressed in milli
              #     node hours, i.e. 1,000 value in this field means 1 node hour. Guaranteed
              #     to not exceed the train budget.
              class AutoMlForecastingMetadata
                include ::Google::Protobuf::MessageExts
                extend ::Google::Protobuf::MessageExts::ClassMethods
              end
            end
          end
        end
      end
    end
  end
end
