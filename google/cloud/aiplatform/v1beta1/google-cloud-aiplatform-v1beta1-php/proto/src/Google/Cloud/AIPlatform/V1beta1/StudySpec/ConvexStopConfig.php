<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/aiplatform/v1beta1/study.proto

namespace Google\Cloud\AIPlatform\V1beta1\StudySpec;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Configuration for ConvexStopPolicy.
 *
 * Generated from protobuf message <code>google.cloud.aiplatform.v1beta1.StudySpec.ConvexStopConfig</code>
 */
class ConvexStopConfig extends \Google\Protobuf\Internal\Message
{
    /**
     * Steps used in predicting the final objective for early stopped trials. In
     * general, it's set to be the same as the defined steps in training /
     * tuning. When use_steps is false, this field is set to the maximum elapsed
     * seconds.
     *
     * Generated from protobuf field <code>int64 max_num_steps = 1;</code>
     */
    protected $max_num_steps = 0;
    /**
     * Minimum number of steps for a trial to complete. Trials which do not have
     * a measurement with num_steps > min_num_steps won't be considered for
     * early stopping. It's ok to set it to 0, and a trial can be early stopped
     * at any stage. By default, min_num_steps is set to be one-tenth of the
     * max_num_steps.
     * When use_steps is false, this field is set to the minimum elapsed
     * seconds.
     *
     * Generated from protobuf field <code>int64 min_num_steps = 2;</code>
     */
    protected $min_num_steps = 0;
    /**
     * The number of Trial measurements used in autoregressive model for
     * value prediction. A trial won't be considered early stopping if has fewer
     * measurement points.
     *
     * Generated from protobuf field <code>int64 autoregressive_order = 3;</code>
     */
    protected $autoregressive_order = 0;
    /**
     * The hyper-parameter name used in the tuning job that stands for learning
     * rate. Leave it blank if learning rate is not in a parameter in tuning.
     * The learning_rate is used to estimate the objective value of the ongoing
     * trial.
     *
     * Generated from protobuf field <code>string learning_rate_parameter_name = 4;</code>
     */
    protected $learning_rate_parameter_name = '';
    /**
     * This bool determines whether or not the rule is applied based on
     * elapsed_secs or steps. If use_seconds==false, the early stopping decision
     * is made according to the predicted objective values according to the
     * target steps. If use_seconds==true, elapsed_secs is used instead of
     * steps. Also, in this case, the parameters max_num_steps and min_num_steps
     * are overloaded to contain max_elapsed_seconds and min_elapsed_seconds.
     *
     * Generated from protobuf field <code>bool use_seconds = 5;</code>
     */
    protected $use_seconds = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $max_num_steps
     *           Steps used in predicting the final objective for early stopped trials. In
     *           general, it's set to be the same as the defined steps in training /
     *           tuning. When use_steps is false, this field is set to the maximum elapsed
     *           seconds.
     *     @type int|string $min_num_steps
     *           Minimum number of steps for a trial to complete. Trials which do not have
     *           a measurement with num_steps > min_num_steps won't be considered for
     *           early stopping. It's ok to set it to 0, and a trial can be early stopped
     *           at any stage. By default, min_num_steps is set to be one-tenth of the
     *           max_num_steps.
     *           When use_steps is false, this field is set to the minimum elapsed
     *           seconds.
     *     @type int|string $autoregressive_order
     *           The number of Trial measurements used in autoregressive model for
     *           value prediction. A trial won't be considered early stopping if has fewer
     *           measurement points.
     *     @type string $learning_rate_parameter_name
     *           The hyper-parameter name used in the tuning job that stands for learning
     *           rate. Leave it blank if learning rate is not in a parameter in tuning.
     *           The learning_rate is used to estimate the objective value of the ongoing
     *           trial.
     *     @type bool $use_seconds
     *           This bool determines whether or not the rule is applied based on
     *           elapsed_secs or steps. If use_seconds==false, the early stopping decision
     *           is made according to the predicted objective values according to the
     *           target steps. If use_seconds==true, elapsed_secs is used instead of
     *           steps. Also, in this case, the parameters max_num_steps and min_num_steps
     *           are overloaded to contain max_elapsed_seconds and min_elapsed_seconds.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Aiplatform\V1Beta1\Study::initOnce();
        parent::__construct($data);
    }

    /**
     * Steps used in predicting the final objective for early stopped trials. In
     * general, it's set to be the same as the defined steps in training /
     * tuning. When use_steps is false, this field is set to the maximum elapsed
     * seconds.
     *
     * Generated from protobuf field <code>int64 max_num_steps = 1;</code>
     * @return int|string
     */
    public function getMaxNumSteps()
    {
        return $this->max_num_steps;
    }

    /**
     * Steps used in predicting the final objective for early stopped trials. In
     * general, it's set to be the same as the defined steps in training /
     * tuning. When use_steps is false, this field is set to the maximum elapsed
     * seconds.
     *
     * Generated from protobuf field <code>int64 max_num_steps = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setMaxNumSteps($var)
    {
        GPBUtil::checkInt64($var);
        $this->max_num_steps = $var;

        return $this;
    }

    /**
     * Minimum number of steps for a trial to complete. Trials which do not have
     * a measurement with num_steps > min_num_steps won't be considered for
     * early stopping. It's ok to set it to 0, and a trial can be early stopped
     * at any stage. By default, min_num_steps is set to be one-tenth of the
     * max_num_steps.
     * When use_steps is false, this field is set to the minimum elapsed
     * seconds.
     *
     * Generated from protobuf field <code>int64 min_num_steps = 2;</code>
     * @return int|string
     */
    public function getMinNumSteps()
    {
        return $this->min_num_steps;
    }

    /**
     * Minimum number of steps for a trial to complete. Trials which do not have
     * a measurement with num_steps > min_num_steps won't be considered for
     * early stopping. It's ok to set it to 0, and a trial can be early stopped
     * at any stage. By default, min_num_steps is set to be one-tenth of the
     * max_num_steps.
     * When use_steps is false, this field is set to the minimum elapsed
     * seconds.
     *
     * Generated from protobuf field <code>int64 min_num_steps = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setMinNumSteps($var)
    {
        GPBUtil::checkInt64($var);
        $this->min_num_steps = $var;

        return $this;
    }

    /**
     * The number of Trial measurements used in autoregressive model for
     * value prediction. A trial won't be considered early stopping if has fewer
     * measurement points.
     *
     * Generated from protobuf field <code>int64 autoregressive_order = 3;</code>
     * @return int|string
     */
    public function getAutoregressiveOrder()
    {
        return $this->autoregressive_order;
    }

    /**
     * The number of Trial measurements used in autoregressive model for
     * value prediction. A trial won't be considered early stopping if has fewer
     * measurement points.
     *
     * Generated from protobuf field <code>int64 autoregressive_order = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setAutoregressiveOrder($var)
    {
        GPBUtil::checkInt64($var);
        $this->autoregressive_order = $var;

        return $this;
    }

    /**
     * The hyper-parameter name used in the tuning job that stands for learning
     * rate. Leave it blank if learning rate is not in a parameter in tuning.
     * The learning_rate is used to estimate the objective value of the ongoing
     * trial.
     *
     * Generated from protobuf field <code>string learning_rate_parameter_name = 4;</code>
     * @return string
     */
    public function getLearningRateParameterName()
    {
        return $this->learning_rate_parameter_name;
    }

    /**
     * The hyper-parameter name used in the tuning job that stands for learning
     * rate. Leave it blank if learning rate is not in a parameter in tuning.
     * The learning_rate is used to estimate the objective value of the ongoing
     * trial.
     *
     * Generated from protobuf field <code>string learning_rate_parameter_name = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setLearningRateParameterName($var)
    {
        GPBUtil::checkString($var, True);
        $this->learning_rate_parameter_name = $var;

        return $this;
    }

    /**
     * This bool determines whether or not the rule is applied based on
     * elapsed_secs or steps. If use_seconds==false, the early stopping decision
     * is made according to the predicted objective values according to the
     * target steps. If use_seconds==true, elapsed_secs is used instead of
     * steps. Also, in this case, the parameters max_num_steps and min_num_steps
     * are overloaded to contain max_elapsed_seconds and min_elapsed_seconds.
     *
     * Generated from protobuf field <code>bool use_seconds = 5;</code>
     * @return bool
     */
    public function getUseSeconds()
    {
        return $this->use_seconds;
    }

    /**
     * This bool determines whether or not the rule is applied based on
     * elapsed_secs or steps. If use_seconds==false, the early stopping decision
     * is made according to the predicted objective values according to the
     * target steps. If use_seconds==true, elapsed_secs is used instead of
     * steps. Also, in this case, the parameters max_num_steps and min_num_steps
     * are overloaded to contain max_elapsed_seconds and min_elapsed_seconds.
     *
     * Generated from protobuf field <code>bool use_seconds = 5;</code>
     * @param bool $var
     * @return $this
     */
    public function setUseSeconds($var)
    {
        GPBUtil::checkBool($var);
        $this->use_seconds = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(ConvexStopConfig::class, \Google\Cloud\AIPlatform\V1beta1\StudySpec_ConvexStopConfig::class);

