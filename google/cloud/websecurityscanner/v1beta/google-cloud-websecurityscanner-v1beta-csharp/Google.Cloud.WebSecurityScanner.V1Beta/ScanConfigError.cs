// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/websecurityscanner/v1beta/scan_config_error.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.WebSecurityScanner.V1Beta {

  /// <summary>Holder for reflection information generated from google/cloud/websecurityscanner/v1beta/scan_config_error.proto</summary>
  public static partial class ScanConfigErrorReflection {

    #region Descriptor
    /// <summary>File descriptor for google/cloud/websecurityscanner/v1beta/scan_config_error.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ScanConfigErrorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cj5nb29nbGUvY2xvdWQvd2Vic2VjdXJpdHlzY2FubmVyL3YxYmV0YS9zY2Fu",
            "X2NvbmZpZ19lcnJvci5wcm90bxImZ29vZ2xlLmNsb3VkLndlYnNlY3VyaXR5",
            "c2Nhbm5lci52MWJldGEi7QsKD1NjYW5Db25maWdFcnJvchJKCgRjb2RlGAEg",
            "ASgOMjwuZ29vZ2xlLmNsb3VkLndlYnNlY3VyaXR5c2Nhbm5lci52MWJldGEu",
            "U2NhbkNvbmZpZ0Vycm9yLkNvZGUSEgoKZmllbGRfbmFtZRgCIAEoCSL5CgoE",
            "Q29kZRIUChBDT0RFX1VOU1BFQ0lGSUVEEAASBgoCT0sQABISCg5JTlRFUk5B",
            "TF9FUlJPUhABEh8KG0FQUEVOR0lORV9BUElfQkFDS0VORF9FUlJPUhACEiAK",
            "HEFQUEVOR0lORV9BUElfTk9UX0FDQ0VTU0lCTEUQAxIiCh5BUFBFTkdJTkVf",
            "REVGQVVMVF9IT1NUX01JU1NJTkcQBBIhCh1DQU5OT1RfVVNFX0dPT0dMRV9D",
            "T01fQUNDT1VOVBAGEhwKGENBTk5PVF9VU0VfT1dORVJfQUNDT1VOVBAHEh0K",
            "GUNPTVBVVEVfQVBJX0JBQ0tFTkRfRVJST1IQCBIeChpDT01QVVRFX0FQSV9O",
            "T1RfQUNDRVNTSUJMRRAJEjcKM0NVU1RPTV9MT0dJTl9VUkxfRE9FU19OT1Rf",
            "QkVMT05HX1RPX0NVUlJFTlRfUFJPSkVDVBAKEh4KGkNVU1RPTV9MT0dJTl9V",
            "UkxfTUFMRk9STUVEEAsSMwovQ1VTVE9NX0xPR0lOX1VSTF9NQVBQRURfVE9f",
            "Tk9OX1JPVVRBQkxFX0FERFJFU1MQDBIxCi1DVVNUT01fTE9HSU5fVVJMX01B",
            "UFBFRF9UT19VTlJFU0VSVkVEX0FERFJFU1MQDRIwCixDVVNUT01fTE9HSU5f",
            "VVJMX0hBU19OT05fUk9VVEFCTEVfSVBfQUREUkVTUxAOEi4KKkNVU1RPTV9M",
            "T0dJTl9VUkxfSEFTX1VOUkVTRVJWRURfSVBfQUREUkVTUxAPEhcKE0RVUExJ",
            "Q0FURV9TQ0FOX05BTUUQEBIXChNJTlZBTElEX0ZJRUxEX1ZBTFVFEBISJAog",
            "RkFJTEVEX1RPX0FVVEhFTlRJQ0FURV9UT19UQVJHRVQQExIcChhGSU5ESU5H",
            "X1RZUEVfVU5TUEVDSUZJRUQQFBIdChlGT1JCSURERU5fVE9fU0NBTl9DT01Q",
            "VVRFEBUSJAogRk9SQklEREVOX1VQREFURV9UT19NQU5BR0VEX1NDQU4QKxIU",
            "ChBNQUxGT1JNRURfRklMVEVSEBYSGwoXTUFMRk9STUVEX1JFU09VUkNFX05B",
            "TUUQFxIUChBQUk9KRUNUX0lOQUNUSVZFEBgSEgoOUkVRVUlSRURfRklFTEQQ",
            "GRIeChpSRVNPVVJDRV9OQU1FX0lOQ09OU0lTVEVOVBAaEhgKFFNDQU5fQUxS",
            "RUFEWV9SVU5OSU5HEBsSFAoQU0NBTl9OT1RfUlVOTklORxAcEi8KK1NFRURf",
            "VVJMX0RPRVNfTk9UX0JFTE9OR19UT19DVVJSRU5UX1BST0pFQ1QQHRIWChJT",
            "RUVEX1VSTF9NQUxGT1JNRUQQHhIrCidTRUVEX1VSTF9NQVBQRURfVE9fTk9O",
            "X1JPVVRBQkxFX0FERFJFU1MQHxIpCiVTRUVEX1VSTF9NQVBQRURfVE9fVU5S",
            "RVNFUlZFRF9BRERSRVNTECASKAokU0VFRF9VUkxfSEFTX05PTl9ST1VUQUJM",
            "RV9JUF9BRERSRVNTECESJgoiU0VFRF9VUkxfSEFTX1VOUkVTRVJWRURfSVBf",
            "QUREUkVTUxAjEiIKHlNFUlZJQ0VfQUNDT1VOVF9OT1RfQ09ORklHVVJFRBAk",
            "EhIKDlRPT19NQU5ZX1NDQU5TECUSIgoeVU5BQkxFX1RPX1JFU09MVkVfUFJP",
            "SkVDVF9JTkZPECYSKAokVU5TVVBQT1JURURfQkxBQ0tMSVNUX1BBVFRFUk5f",
            "Rk9STUFUECcSFgoSVU5TVVBQT1JURURfRklMVEVSECgSHAoYVU5TVVBQT1JU",
            "RURfRklORElOR19UWVBFECkSGgoWVU5TVVBQT1JURURfVVJMX1NDSEVNRRAq",
            "GgIQAUKcAgoqY29tLmdvb2dsZS5jbG91ZC53ZWJzZWN1cml0eXNjYW5uZXIu",
            "djFiZXRhQhRTY2FuQ29uZmlnRXJyb3JQcm90b1ABWlhnb29nbGUuZ29sYW5n",
            "Lm9yZy9nZW5wcm90by9nb29nbGVhcGlzL2Nsb3VkL3dlYnNlY3VyaXR5c2Nh",
            "bm5lci92MWJldGE7d2Vic2VjdXJpdHlzY2FubmVyqgImR29vZ2xlLkNsb3Vk",
            "LldlYlNlY3VyaXR5U2Nhbm5lci5WMUJldGHKAiZHb29nbGVcQ2xvdWRcV2Vi",
            "U2VjdXJpdHlTY2FubmVyXFYxYmV0YeoCKUdvb2dsZTo6Q2xvdWQ6OldlYlNl",
            "Y3VyaXR5U2Nhbm5lcjo6VjFiZXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.WebSecurityScanner.V1Beta.ScanConfigError), global::Google.Cloud.WebSecurityScanner.V1Beta.ScanConfigError.Parser, new[]{ "Code", "FieldName" }, null, new[]{ typeof(global::Google.Cloud.WebSecurityScanner.V1Beta.ScanConfigError.Types.Code) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Defines a custom error message used by CreateScanConfig and UpdateScanConfig
  /// APIs when scan configuration validation fails. It is also reported as part of
  /// a ScanRunErrorTrace message if scan validation fails due to a scan
  /// configuration error.
  /// </summary>
  public sealed partial class ScanConfigError : pb::IMessage<ScanConfigError>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ScanConfigError> _parser = new pb::MessageParser<ScanConfigError>(() => new ScanConfigError());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScanConfigError> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.WebSecurityScanner.V1Beta.ScanConfigErrorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanConfigError() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanConfigError(ScanConfigError other) : this() {
      code_ = other.code_;
      fieldName_ = other.fieldName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanConfigError Clone() {
      return new ScanConfigError(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Google.Cloud.WebSecurityScanner.V1Beta.ScanConfigError.Types.Code code_ = global::Google.Cloud.WebSecurityScanner.V1Beta.ScanConfigError.Types.Code.Unspecified;
    /// <summary>
    /// Indicates the reason code for a configuration failure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.WebSecurityScanner.V1Beta.ScanConfigError.Types.Code Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "field_name" field.</summary>
    public const int FieldNameFieldNumber = 2;
    private string fieldName_ = "";
    /// <summary>
    /// Indicates the full name of the ScanConfig field that triggers this error,
    /// for example "scan_config.max_qps". This field is provided for
    /// troubleshooting purposes only and its actual value can change in the
    /// future.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FieldName {
      get { return fieldName_; }
      set {
        fieldName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScanConfigError);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScanConfigError other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (FieldName != other.FieldName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != global::Google.Cloud.WebSecurityScanner.V1Beta.ScanConfigError.Types.Code.Unspecified) hash ^= Code.GetHashCode();
      if (FieldName.Length != 0) hash ^= FieldName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Code != global::Google.Cloud.WebSecurityScanner.V1Beta.ScanConfigError.Types.Code.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (FieldName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FieldName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Code != global::Google.Cloud.WebSecurityScanner.V1Beta.ScanConfigError.Types.Code.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (FieldName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FieldName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != global::Google.Cloud.WebSecurityScanner.V1Beta.ScanConfigError.Types.Code.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (FieldName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FieldName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScanConfigError other) {
      if (other == null) {
        return;
      }
      if (other.Code != global::Google.Cloud.WebSecurityScanner.V1Beta.ScanConfigError.Types.Code.Unspecified) {
        Code = other.Code;
      }
      if (other.FieldName.Length != 0) {
        FieldName = other.FieldName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Google.Cloud.WebSecurityScanner.V1Beta.ScanConfigError.Types.Code) input.ReadEnum();
            break;
          }
          case 18: {
            FieldName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = (global::Google.Cloud.WebSecurityScanner.V1Beta.ScanConfigError.Types.Code) input.ReadEnum();
            break;
          }
          case 18: {
            FieldName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ScanConfigError message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Output only.
      /// Defines an error reason code.
      /// Next id: 44
      /// </summary>
      public enum Code {
        /// <summary>
        /// There is no error.
        /// </summary>
        [pbr::OriginalName("CODE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// There is no error.
        /// </summary>
        [pbr::OriginalName("OK", PreferredAlias = false)] Ok = 0,
        /// <summary>
        /// Indicates an internal server error.
        /// Please DO NOT USE THIS ERROR CODE unless the root cause is truly unknown.
        /// </summary>
        [pbr::OriginalName("INTERNAL_ERROR")] InternalError = 1,
        /// <summary>
        /// One of the seed URLs is an App Engine URL but we cannot validate the scan
        /// settings due to an App Engine API backend error.
        /// </summary>
        [pbr::OriginalName("APPENGINE_API_BACKEND_ERROR")] AppengineApiBackendError = 2,
        /// <summary>
        /// One of the seed URLs is an App Engine URL but we cannot access the
        /// App Engine API to validate scan settings.
        /// </summary>
        [pbr::OriginalName("APPENGINE_API_NOT_ACCESSIBLE")] AppengineApiNotAccessible = 3,
        /// <summary>
        /// One of the seed URLs is an App Engine URL but the Default Host of the
        /// App Engine is not set.
        /// </summary>
        [pbr::OriginalName("APPENGINE_DEFAULT_HOST_MISSING")] AppengineDefaultHostMissing = 4,
        /// <summary>
        /// Google corporate accounts can not be used for scanning.
        /// </summary>
        [pbr::OriginalName("CANNOT_USE_GOOGLE_COM_ACCOUNT")] CannotUseGoogleComAccount = 6,
        /// <summary>
        /// The account of the scan creator can not be used for scanning.
        /// </summary>
        [pbr::OriginalName("CANNOT_USE_OWNER_ACCOUNT")] CannotUseOwnerAccount = 7,
        /// <summary>
        /// This scan targets Compute Engine, but we cannot validate scan settings
        /// due to a Compute Engine API backend error.
        /// </summary>
        [pbr::OriginalName("COMPUTE_API_BACKEND_ERROR")] ComputeApiBackendError = 8,
        /// <summary>
        /// This scan targets Compute Engine, but we cannot access the Compute Engine
        /// API to validate the scan settings.
        /// </summary>
        [pbr::OriginalName("COMPUTE_API_NOT_ACCESSIBLE")] ComputeApiNotAccessible = 9,
        /// <summary>
        /// The Custom Login URL does not belong to the current project.
        /// </summary>
        [pbr::OriginalName("CUSTOM_LOGIN_URL_DOES_NOT_BELONG_TO_CURRENT_PROJECT")] CustomLoginUrlDoesNotBelongToCurrentProject = 10,
        /// <summary>
        /// The Custom Login URL is malformed (can not be parsed).
        /// </summary>
        [pbr::OriginalName("CUSTOM_LOGIN_URL_MALFORMED")] CustomLoginUrlMalformed = 11,
        /// <summary>
        /// The Custom Login URL is mapped to a non-routable IP address in DNS.
        /// </summary>
        [pbr::OriginalName("CUSTOM_LOGIN_URL_MAPPED_TO_NON_ROUTABLE_ADDRESS")] CustomLoginUrlMappedToNonRoutableAddress = 12,
        /// <summary>
        /// The Custom Login URL is mapped to an IP address which is not reserved for
        /// the current project.
        /// </summary>
        [pbr::OriginalName("CUSTOM_LOGIN_URL_MAPPED_TO_UNRESERVED_ADDRESS")] CustomLoginUrlMappedToUnreservedAddress = 13,
        /// <summary>
        /// The Custom Login URL has a non-routable IP address.
        /// </summary>
        [pbr::OriginalName("CUSTOM_LOGIN_URL_HAS_NON_ROUTABLE_IP_ADDRESS")] CustomLoginUrlHasNonRoutableIpAddress = 14,
        /// <summary>
        /// The Custom Login URL has an IP address which is not reserved for the
        /// current project.
        /// </summary>
        [pbr::OriginalName("CUSTOM_LOGIN_URL_HAS_UNRESERVED_IP_ADDRESS")] CustomLoginUrlHasUnreservedIpAddress = 15,
        /// <summary>
        /// Another scan with the same name (case-sensitive) already exists.
        /// </summary>
        [pbr::OriginalName("DUPLICATE_SCAN_NAME")] DuplicateScanName = 16,
        /// <summary>
        /// A field is set to an invalid value.
        /// </summary>
        [pbr::OriginalName("INVALID_FIELD_VALUE")] InvalidFieldValue = 18,
        /// <summary>
        /// There was an error trying to authenticate to the scan target.
        /// </summary>
        [pbr::OriginalName("FAILED_TO_AUTHENTICATE_TO_TARGET")] FailedToAuthenticateToTarget = 19,
        /// <summary>
        /// Finding type value is not specified in the list findings request.
        /// </summary>
        [pbr::OriginalName("FINDING_TYPE_UNSPECIFIED")] FindingTypeUnspecified = 20,
        /// <summary>
        /// Scan targets Compute Engine, yet current project was not whitelisted for
        /// Google Compute Engine Scanning Alpha access.
        /// </summary>
        [pbr::OriginalName("FORBIDDEN_TO_SCAN_COMPUTE")] ForbiddenToScanCompute = 21,
        /// <summary>
        /// User tries to update managed scan
        /// </summary>
        [pbr::OriginalName("FORBIDDEN_UPDATE_TO_MANAGED_SCAN")] ForbiddenUpdateToManagedScan = 43,
        /// <summary>
        /// The supplied filter is malformed. For example, it can not be parsed, does
        /// not have a filter type in expression, or the same filter type appears
        /// more than once.
        /// </summary>
        [pbr::OriginalName("MALFORMED_FILTER")] MalformedFilter = 22,
        /// <summary>
        /// The supplied resource name is malformed (can not be parsed).
        /// </summary>
        [pbr::OriginalName("MALFORMED_RESOURCE_NAME")] MalformedResourceName = 23,
        /// <summary>
        /// The current project is not in an active state.
        /// </summary>
        [pbr::OriginalName("PROJECT_INACTIVE")] ProjectInactive = 24,
        /// <summary>
        /// A required field is not set.
        /// </summary>
        [pbr::OriginalName("REQUIRED_FIELD")] RequiredField = 25,
        /// <summary>
        /// Project id, scanconfig id, scanrun id, or finding id are not consistent
        /// with each other in resource name.
        /// </summary>
        [pbr::OriginalName("RESOURCE_NAME_INCONSISTENT")] ResourceNameInconsistent = 26,
        /// <summary>
        /// The scan being requested to start is already running.
        /// </summary>
        [pbr::OriginalName("SCAN_ALREADY_RUNNING")] ScanAlreadyRunning = 27,
        /// <summary>
        /// The scan that was requested to be stopped is not running.
        /// </summary>
        [pbr::OriginalName("SCAN_NOT_RUNNING")] ScanNotRunning = 28,
        /// <summary>
        /// One of the seed URLs does not belong to the current project.
        /// </summary>
        [pbr::OriginalName("SEED_URL_DOES_NOT_BELONG_TO_CURRENT_PROJECT")] SeedUrlDoesNotBelongToCurrentProject = 29,
        /// <summary>
        /// One of the seed URLs is malformed (can not be parsed).
        /// </summary>
        [pbr::OriginalName("SEED_URL_MALFORMED")] SeedUrlMalformed = 30,
        /// <summary>
        /// One of the seed URLs is mapped to a non-routable IP address in DNS.
        /// </summary>
        [pbr::OriginalName("SEED_URL_MAPPED_TO_NON_ROUTABLE_ADDRESS")] SeedUrlMappedToNonRoutableAddress = 31,
        /// <summary>
        /// One of the seed URLs is mapped to an IP address which is not reserved
        /// for the current project.
        /// </summary>
        [pbr::OriginalName("SEED_URL_MAPPED_TO_UNRESERVED_ADDRESS")] SeedUrlMappedToUnreservedAddress = 32,
        /// <summary>
        /// One of the seed URLs has on-routable IP address.
        /// </summary>
        [pbr::OriginalName("SEED_URL_HAS_NON_ROUTABLE_IP_ADDRESS")] SeedUrlHasNonRoutableIpAddress = 33,
        /// <summary>
        /// One of the seed URLs has an IP address that is not reserved
        /// for the current project.
        /// </summary>
        [pbr::OriginalName("SEED_URL_HAS_UNRESERVED_IP_ADDRESS")] SeedUrlHasUnreservedIpAddress = 35,
        /// <summary>
        /// The Cloud Security Scanner service account is not configured under the
        /// project.
        /// </summary>
        [pbr::OriginalName("SERVICE_ACCOUNT_NOT_CONFIGURED")] ServiceAccountNotConfigured = 36,
        /// <summary>
        /// A project has reached the maximum number of scans.
        /// </summary>
        [pbr::OriginalName("TOO_MANY_SCANS")] TooManyScans = 37,
        /// <summary>
        /// Resolving the details of the current project fails.
        /// </summary>
        [pbr::OriginalName("UNABLE_TO_RESOLVE_PROJECT_INFO")] UnableToResolveProjectInfo = 38,
        /// <summary>
        /// One or more blacklist patterns were in the wrong format.
        /// </summary>
        [pbr::OriginalName("UNSUPPORTED_BLACKLIST_PATTERN_FORMAT")] UnsupportedBlacklistPatternFormat = 39,
        /// <summary>
        /// The supplied filter is not supported.
        /// </summary>
        [pbr::OriginalName("UNSUPPORTED_FILTER")] UnsupportedFilter = 40,
        /// <summary>
        /// The supplied finding type is not supported. For example, we do not
        /// provide findings of the given finding type.
        /// </summary>
        [pbr::OriginalName("UNSUPPORTED_FINDING_TYPE")] UnsupportedFindingType = 41,
        /// <summary>
        /// The URL scheme of one or more of the supplied URLs is not supported.
        /// </summary>
        [pbr::OriginalName("UNSUPPORTED_URL_SCHEME")] UnsupportedUrlScheme = 42,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
