# frozen_string_literal: true

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!


module Google
  module Cloud
    module Websecurityscanner
      module V1alpha
        # A Finding resource represents a vulnerability instance identified during a
        # ScanRun.
        # @!attribute [rw] name
        #   @return [::String]
        #     The resource name of the Finding. The name follows the format of
        #     'projects/\\{projectId}/scanConfigs/\\{scanConfigId}/scanruns/\\{scanRunId}/findings/\\{findingId}'.
        #     The finding IDs are generated by the system.
        # @!attribute [rw] finding_type
        #   @return [::Google::Cloud::Websecurityscanner::V1alpha::Finding::FindingType]
        #     The type of the Finding.
        # @!attribute [rw] http_method
        #   @return [::String]
        #     The http method of the request that triggered the vulnerability, in
        #     uppercase.
        # @!attribute [rw] fuzzed_url
        #   @return [::String]
        #     The URL produced by the server-side fuzzer and used in the request that
        #     triggered the vulnerability.
        # @!attribute [rw] body
        #   @return [::String]
        #     The body of the request that triggered the vulnerability.
        # @!attribute [rw] description
        #   @return [::String]
        #     The description of the vulnerability.
        # @!attribute [rw] reproduction_url
        #   @return [::String]
        #     The URL containing human-readable payload that user can leverage to
        #     reproduce the vulnerability.
        # @!attribute [rw] frame_url
        #   @return [::String]
        #     If the vulnerability was originated from nested IFrame, the immediate
        #     parent IFrame is reported.
        # @!attribute [rw] final_url
        #   @return [::String]
        #     The URL where the browser lands when the vulnerability is detected.
        # @!attribute [rw] tracking_id
        #   @return [::String]
        #     The tracking ID uniquely identifies a vulnerability instance across
        #     multiple ScanRuns.
        # @!attribute [rw] outdated_library
        #   @return [::Google::Cloud::Websecurityscanner::V1alpha::OutdatedLibrary]
        #     An addon containing information about outdated libraries.
        # @!attribute [rw] violating_resource
        #   @return [::Google::Cloud::Websecurityscanner::V1alpha::ViolatingResource]
        #     An addon containing detailed information regarding any resource causing the
        #     vulnerability such as JavaScript sources, image, audio files, etc.
        # @!attribute [rw] vulnerable_headers
        #   @return [::Google::Cloud::Websecurityscanner::V1alpha::VulnerableHeaders]
        #     An addon containing information about vulnerable or missing HTTP headers.
        # @!attribute [rw] vulnerable_parameters
        #   @return [::Google::Cloud::Websecurityscanner::V1alpha::VulnerableParameters]
        #     An addon containing information about request parameters which were found
        #     to be vulnerable.
        # @!attribute [rw] xss
        #   @return [::Google::Cloud::Websecurityscanner::V1alpha::Xss]
        #     An addon containing information reported for an XSS, if any.
        class Finding
          include ::Google::Protobuf::MessageExts
          extend ::Google::Protobuf::MessageExts::ClassMethods

          # Types of Findings.
          module FindingType
            # The invalid finding type.
            FINDING_TYPE_UNSPECIFIED = 0

            # A page that was served over HTTPS also resources over HTTP. A
            # man-in-the-middle attacker could tamper with the HTTP resource and gain
            # full access to the website that loads the resource or to monitor the
            # actions taken by the user.
            MIXED_CONTENT = 1

            # The version of an included library is known to contain a security issue.
            # The scanner checks the version of library in use against a known list of
            # vulnerable libraries. False positives are possible if the version
            # detection fails or if the library has been manually patched.
            OUTDATED_LIBRARY = 2

            # This type of vulnerability occurs when the value of a request parameter
            # is reflected at the beginning of the response, for example, in requests
            # using JSONP. Under certain circumstances, an attacker may be able to
            # supply an alphanumeric-only Flash file in the vulnerable parameter
            # causing the browser to execute the Flash file as if it originated on the
            # vulnerable server.
            ROSETTA_FLASH = 5

            # A cross-site scripting (XSS) bug is found via JavaScript callback. For
            # detailed explanations on XSS, see
            # https://www.google.com/about/appsecurity/learning/xss/.
            XSS_CALLBACK = 3

            # A potential cross-site scripting (XSS) bug due to JavaScript breakage.
            # In some circumstances, the application under test might modify the test
            # string before it is parsed by the browser. When the browser attempts to
            # runs this modified test string, it will likely break and throw a
            # JavaScript execution error, thus an injection issue is occurring.
            # However, it may not be exploitable. Manual verification is needed to see
            # if the test string modifications can be evaded and confirm that the issue
            # is in fact an XSS vulnerability. For detailed explanations on XSS, see
            # https://www.google.com/about/appsecurity/learning/xss/.
            XSS_ERROR = 4

            # An application appears to be transmitting a password field in clear text.
            # An attacker can eavesdrop network traffic and sniff the password field.
            CLEAR_TEXT_PASSWORD = 6

            # An application returns sensitive content with an invalid content type,
            # or without an 'X-Content-Type-Options: nosniff' header.
            INVALID_CONTENT_TYPE = 7

            # A cross-site scripting (XSS) vulnerability in AngularJS module that
            # occurs when a user-provided string is interpolated by Angular.
            XSS_ANGULAR_CALLBACK = 8

            # A malformed or invalid valued header.
            INVALID_HEADER = 9

            # Misspelled security header name.
            MISSPELLED_SECURITY_HEADER_NAME = 10

            # Mismatching values in a duplicate security header.
            MISMATCHING_SECURITY_HEADER_VALUES = 11
          end
        end
      end
    end
  end
end
