// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/automl/v1beta1/table_spec.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Automl.V1Beta1 {

  /// <summary>Holder for reflection information generated from google/cloud/automl/v1beta1/table_spec.proto</summary>
  public static partial class TableSpecReflection {

    #region Descriptor
    /// <summary>File descriptor for google/cloud/automl/v1beta1/table_spec.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TableSpecReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cixnb29nbGUvY2xvdWQvYXV0b21sL3YxYmV0YTEvdGFibGVfc3BlYy5wcm90",
            "bxIbZ29vZ2xlLmNsb3VkLmF1dG9tbC52MWJldGExGhlnb29nbGUvYXBpL3Jl",
            "c291cmNlLnByb3RvGiRnb29nbGUvY2xvdWQvYXV0b21sL3YxYmV0YTEvaW8u",
            "cHJvdG8aHGdvb2dsZS9hcGkvYW5ub3RhdGlvbnMucHJvdG8iwQIKCVRhYmxl",
            "U3BlYxIMCgRuYW1lGAEgASgJEhsKE3RpbWVfY29sdW1uX3NwZWNfaWQYAiAB",
            "KAkSEQoJcm93X2NvdW50GAMgASgDEhcKD3ZhbGlkX3Jvd19jb3VudBgEIAEo",
            "AxIUCgxjb2x1bW5fY291bnQYByABKAMSPwoNaW5wdXRfY29uZmlncxgFIAMo",
            "CzIoLmdvb2dsZS5jbG91ZC5hdXRvbWwudjFiZXRhMS5JbnB1dENvbmZpZxIM",
            "CgRldGFnGAYgASgJOnjqQXUKH2F1dG9tbC5nb29nbGVhcGlzLmNvbS9UYWJs",
            "ZVNwZWMSUnByb2plY3RzL3twcm9qZWN0fS9sb2NhdGlvbnMve2xvY2F0aW9u",
            "fS9kYXRhc2V0cy97ZGF0YXNldH0vdGFibGVTcGVjcy97dGFibGVfc3BlY31C",
            "pQEKH2NvbS5nb29nbGUuY2xvdWQuYXV0b21sLnYxYmV0YTFQAVpBZ29vZ2xl",
            "LmdvbGFuZy5vcmcvZ2VucHJvdG8vZ29vZ2xlYXBpcy9jbG91ZC9hdXRvbWwv",
            "djFiZXRhMTthdXRvbWzKAhtHb29nbGVcQ2xvdWRcQXV0b01sXFYxYmV0YTHq",
            "Ah5Hb29nbGU6OkNsb3VkOjpBdXRvTUw6OlYxYmV0YTFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.ResourceReflection.Descriptor, global::Google.Cloud.Automl.V1Beta1.IoReflection.Descriptor, global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Automl.V1Beta1.TableSpec), global::Google.Cloud.Automl.V1Beta1.TableSpec.Parser, new[]{ "Name", "TimeColumnSpecId", "RowCount", "ValidRowCount", "ColumnCount", "InputConfigs", "Etag" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A specification of a relational table.
  /// The table's schema is represented via its child column specs. It is
  /// pre-populated as part of ImportData by schema inference algorithm, the
  /// version of which is a required parameter of ImportData InputConfig.
  /// Note: While working with a table, at times the schema may be
  /// inconsistent with the data in the table (e.g. string in a FLOAT64 column).
  /// The consistency validation is done upon creation of a model.
  /// Used by:
  ///   *   Tables
  /// </summary>
  public sealed partial class TableSpec : pb::IMessage<TableSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TableSpec> _parser = new pb::MessageParser<TableSpec>(() => new TableSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TableSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Automl.V1Beta1.TableSpecReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableSpec(TableSpec other) : this() {
      name_ = other.name_;
      timeColumnSpecId_ = other.timeColumnSpecId_;
      rowCount_ = other.rowCount_;
      validRowCount_ = other.validRowCount_;
      columnCount_ = other.columnCount_;
      inputConfigs_ = other.inputConfigs_.Clone();
      etag_ = other.etag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableSpec Clone() {
      return new TableSpec(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Output only. The resource name of the table spec.
    /// Form:
    ///
    /// `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/tableSpecs/{table_spec_id}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time_column_spec_id" field.</summary>
    public const int TimeColumnSpecIdFieldNumber = 2;
    private string timeColumnSpecId_ = "";
    /// <summary>
    /// column_spec_id of the time column. Only used if the parent dataset's
    /// ml_use_column_spec_id is not set. Used to split rows into TRAIN, VALIDATE
    /// and TEST sets such that oldest rows go to TRAIN set, newest to TEST, and
    /// those in between to VALIDATE.
    /// Required type: TIMESTAMP.
    /// If both this column and ml_use_column are not set, then ML use of all rows
    /// will be assigned by AutoML. NOTE: Updates of this field will instantly
    /// affect any other users concurrently working with the dataset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TimeColumnSpecId {
      get { return timeColumnSpecId_; }
      set {
        timeColumnSpecId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_count" field.</summary>
    public const int RowCountFieldNumber = 3;
    private long rowCount_;
    /// <summary>
    /// Output only. The number of rows (i.e. examples) in the table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RowCount {
      get { return rowCount_; }
      set {
        rowCount_ = value;
      }
    }

    /// <summary>Field number for the "valid_row_count" field.</summary>
    public const int ValidRowCountFieldNumber = 4;
    private long validRowCount_;
    /// <summary>
    /// Output only. The number of valid rows (i.e. without values that don't match
    /// DataType-s of their columns).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ValidRowCount {
      get { return validRowCount_; }
      set {
        validRowCount_ = value;
      }
    }

    /// <summary>Field number for the "column_count" field.</summary>
    public const int ColumnCountFieldNumber = 7;
    private long columnCount_;
    /// <summary>
    /// Output only. The number of columns of the table. That is, the number of
    /// child ColumnSpec-s.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ColumnCount {
      get { return columnCount_; }
      set {
        columnCount_ = value;
      }
    }

    /// <summary>Field number for the "input_configs" field.</summary>
    public const int InputConfigsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Google.Cloud.Automl.V1Beta1.InputConfig> _repeated_inputConfigs_codec
        = pb::FieldCodec.ForMessage(42, global::Google.Cloud.Automl.V1Beta1.InputConfig.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Automl.V1Beta1.InputConfig> inputConfigs_ = new pbc::RepeatedField<global::Google.Cloud.Automl.V1Beta1.InputConfig>();
    /// <summary>
    /// Output only. Input configs via which data currently residing in the table
    /// had been imported.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Automl.V1Beta1.InputConfig> InputConfigs {
      get { return inputConfigs_; }
    }

    /// <summary>Field number for the "etag" field.</summary>
    public const int EtagFieldNumber = 6;
    private string etag_ = "";
    /// <summary>
    /// Used to perform consistent read-modify-write updates. If not set, a blind
    /// "overwrite" update happens.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Etag {
      get { return etag_; }
      set {
        etag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TableSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TableSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (TimeColumnSpecId != other.TimeColumnSpecId) return false;
      if (RowCount != other.RowCount) return false;
      if (ValidRowCount != other.ValidRowCount) return false;
      if (ColumnCount != other.ColumnCount) return false;
      if(!inputConfigs_.Equals(other.inputConfigs_)) return false;
      if (Etag != other.Etag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (TimeColumnSpecId.Length != 0) hash ^= TimeColumnSpecId.GetHashCode();
      if (RowCount != 0L) hash ^= RowCount.GetHashCode();
      if (ValidRowCount != 0L) hash ^= ValidRowCount.GetHashCode();
      if (ColumnCount != 0L) hash ^= ColumnCount.GetHashCode();
      hash ^= inputConfigs_.GetHashCode();
      if (Etag.Length != 0) hash ^= Etag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (TimeColumnSpecId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TimeColumnSpecId);
      }
      if (RowCount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(RowCount);
      }
      if (ValidRowCount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ValidRowCount);
      }
      inputConfigs_.WriteTo(output, _repeated_inputConfigs_codec);
      if (Etag.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Etag);
      }
      if (ColumnCount != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(ColumnCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (TimeColumnSpecId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TimeColumnSpecId);
      }
      if (RowCount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(RowCount);
      }
      if (ValidRowCount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ValidRowCount);
      }
      inputConfigs_.WriteTo(ref output, _repeated_inputConfigs_codec);
      if (Etag.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Etag);
      }
      if (ColumnCount != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(ColumnCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (TimeColumnSpecId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TimeColumnSpecId);
      }
      if (RowCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RowCount);
      }
      if (ValidRowCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ValidRowCount);
      }
      if (ColumnCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ColumnCount);
      }
      size += inputConfigs_.CalculateSize(_repeated_inputConfigs_codec);
      if (Etag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Etag);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TableSpec other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.TimeColumnSpecId.Length != 0) {
        TimeColumnSpecId = other.TimeColumnSpecId;
      }
      if (other.RowCount != 0L) {
        RowCount = other.RowCount;
      }
      if (other.ValidRowCount != 0L) {
        ValidRowCount = other.ValidRowCount;
      }
      if (other.ColumnCount != 0L) {
        ColumnCount = other.ColumnCount;
      }
      inputConfigs_.Add(other.inputConfigs_);
      if (other.Etag.Length != 0) {
        Etag = other.Etag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            TimeColumnSpecId = input.ReadString();
            break;
          }
          case 24: {
            RowCount = input.ReadInt64();
            break;
          }
          case 32: {
            ValidRowCount = input.ReadInt64();
            break;
          }
          case 42: {
            inputConfigs_.AddEntriesFrom(input, _repeated_inputConfigs_codec);
            break;
          }
          case 50: {
            Etag = input.ReadString();
            break;
          }
          case 56: {
            ColumnCount = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            TimeColumnSpecId = input.ReadString();
            break;
          }
          case 24: {
            RowCount = input.ReadInt64();
            break;
          }
          case 32: {
            ValidRowCount = input.ReadInt64();
            break;
          }
          case 42: {
            inputConfigs_.AddEntriesFrom(ref input, _repeated_inputConfigs_codec);
            break;
          }
          case 50: {
            Etag = input.ReadString();
            break;
          }
          case 56: {
            ColumnCount = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
