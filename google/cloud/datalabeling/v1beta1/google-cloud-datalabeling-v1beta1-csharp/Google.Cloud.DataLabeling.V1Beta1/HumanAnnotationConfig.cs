// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/datalabeling/v1beta1/human_annotation_config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.DataLabeling.V1Beta1 {

  /// <summary>Holder for reflection information generated from google/cloud/datalabeling/v1beta1/human_annotation_config.proto</summary>
  public static partial class HumanAnnotationConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for google/cloud/datalabeling/v1beta1/human_annotation_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HumanAnnotationConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cj9nb29nbGUvY2xvdWQvZGF0YWxhYmVsaW5nL3YxYmV0YTEvaHVtYW5fYW5u",
            "b3RhdGlvbl9jb25maWcucHJvdG8SIWdvb2dsZS5jbG91ZC5kYXRhbGFiZWxp",
            "bmcudjFiZXRhMRocZ29vZ2xlL2FwaS9hbm5vdGF0aW9ucy5wcm90bxofZ29v",
            "Z2xlL2FwaS9maWVsZF9iZWhhdmlvci5wcm90bxoeZ29vZ2xlL3Byb3RvYnVm",
            "L2R1cmF0aW9uLnByb3RvItQCChVIdW1hbkFubm90YXRpb25Db25maWcSGAoL",
            "aW5zdHJ1Y3Rpb24YASABKAlCA+BBAhIrCh5hbm5vdGF0ZWRfZGF0YXNldF9k",
            "aXNwbGF5X25hbWUYAiABKAlCA+BBAhIqCh1hbm5vdGF0ZWRfZGF0YXNldF9k",
            "ZXNjcmlwdGlvbhgDIAEoCUID4EEBEhgKC2xhYmVsX2dyb3VwGAQgASgJQgPg",
            "QQESGgoNbGFuZ3VhZ2VfY29kZRgFIAEoCUID4EEBEhoKDXJlcGxpY2FfY291",
            "bnQYBiABKAVCA+BBARI5ChFxdWVzdGlvbl9kdXJhdGlvbhgHIAEoCzIZLmdv",
            "b2dsZS5wcm90b2J1Zi5EdXJhdGlvbkID4EEBEh8KEmNvbnRyaWJ1dG9yX2Vt",
            "YWlscxgJIAMoCUID4EEBEhoKEnVzZXJfZW1haWxfYWRkcmVzcxgKIAEoCSK9",
            "AQoZSW1hZ2VDbGFzc2lmaWNhdGlvbkNvbmZpZxIgChNhbm5vdGF0aW9uX3Nw",
            "ZWNfc2V0GAEgASgJQgPgQQISHgoRYWxsb3dfbXVsdGlfbGFiZWwYAiABKAhC",
            "A+BBARJeChdhbnN3ZXJfYWdncmVnYXRpb25fdHlwZRgDIAEoDjI4Lmdvb2ds",
            "ZS5jbG91ZC5kYXRhbGFiZWxpbmcudjFiZXRhMS5TdHJpbmdBZ2dyZWdhdGlv",
            "blR5cGVCA+BBASJYChJCb3VuZGluZ1BvbHlDb25maWcSIAoTYW5ub3RhdGlv",
            "bl9zcGVjX3NldBgBIAEoCUID4EECEiAKE2luc3RydWN0aW9uX21lc3NhZ2UY",
            "AiABKAlCA+BBASJUCg5Qb2x5bGluZUNvbmZpZxIgChNhbm5vdGF0aW9uX3Nw",
            "ZWNfc2V0GAEgASgJQgPgQQISIAoTaW5zdHJ1Y3Rpb25fbWVzc2FnZRgCIAEo",
            "CUID4EEBIlMKElNlZ21lbnRhdGlvbkNvbmZpZxIgChNhbm5vdGF0aW9uX3Nw",
            "ZWNfc2V0GAEgASgJQgPgQQISGwoTaW5zdHJ1Y3Rpb25fbWVzc2FnZRgCIAEo",
            "CSKbAgoZVmlkZW9DbGFzc2lmaWNhdGlvbkNvbmZpZxJ+Chthbm5vdGF0aW9u",
            "X3NwZWNfc2V0X2NvbmZpZ3MYASADKAsyVC5nb29nbGUuY2xvdWQuZGF0YWxh",
            "YmVsaW5nLnYxYmV0YTEuVmlkZW9DbGFzc2lmaWNhdGlvbkNvbmZpZy5Bbm5v",
            "dGF0aW9uU3BlY1NldENvbmZpZ0ID4EECEiEKFGFwcGx5X3Nob3RfZGV0ZWN0",
            "aW9uGAIgASgIQgPgQQEaWwoXQW5ub3RhdGlvblNwZWNTZXRDb25maWcSIAoT",
            "YW5ub3RhdGlvbl9zcGVjX3NldBgBIAEoCUID4EECEh4KEWFsbG93X211bHRp",
            "X2xhYmVsGAIgASgIQgPgQQEiXQoVT2JqZWN0RGV0ZWN0aW9uQ29uZmlnEiAK",
            "E2Fubm90YXRpb25fc3BlY19zZXQYASABKAlCA+BBAhIiChVleHRyYWN0aW9u",
            "X2ZyYW1lX3JhdGUYAyABKAFCA+BBAiI4ChRPYmplY3RUcmFja2luZ0NvbmZp",
            "ZxIgChNhbm5vdGF0aW9uX3NwZWNfc2V0GAEgASgJQgPgQQIiMAoLRXZlbnRD",
            "b25maWcSIQoUYW5ub3RhdGlvbl9zcGVjX3NldHMYASADKAlCA+BBAiKvAQoY",
            "VGV4dENsYXNzaWZpY2F0aW9uQ29uZmlnEh4KEWFsbG93X211bHRpX2xhYmVs",
            "GAEgASgIQgPgQQESIAoTYW5ub3RhdGlvbl9zcGVjX3NldBgCIAEoCUID4EEC",
            "ElEKEHNlbnRpbWVudF9jb25maWcYAyABKAsyMi5nb29nbGUuY2xvdWQuZGF0",
            "YWxhYmVsaW5nLnYxYmV0YTEuU2VudGltZW50Q29uZmlnQgPgQQEiOwoPU2Vu",
            "dGltZW50Q29uZmlnEigKIGVuYWJsZV9sYWJlbF9zZW50aW1lbnRfc2VsZWN0",
            "aW9uGAEgASgIIj4KGlRleHRFbnRpdHlFeHRyYWN0aW9uQ29uZmlnEiAKE2Fu",
            "bm90YXRpb25fc3BlY19zZXQYASABKAlCA+BBAip7ChVTdHJpbmdBZ2dyZWdh",
            "dGlvblR5cGUSJwojU1RSSU5HX0FHR1JFR0FUSU9OX1RZUEVfVU5TUEVDSUZJ",
            "RUQQABIRCg1NQUpPUklUWV9WT1RFEAESEgoOVU5BTklNT1VTX1ZPVEUQAhIS",
            "Cg5OT19BR0dSRUdBVElPThADQucBCiVjb20uZ29vZ2xlLmNsb3VkLmRhdGFs",
            "YWJlbGluZy52MWJldGExUAFaTWdvb2dsZS5nb2xhbmcub3JnL2dlbnByb3Rv",
            "L2dvb2dsZWFwaXMvY2xvdWQvZGF0YWxhYmVsaW5nL3YxYmV0YTE7ZGF0YWxh",
            "YmVsaW5nqgIhR29vZ2xlLkNsb3VkLkRhdGFMYWJlbGluZy5WMUJldGExygIh",
            "R29vZ2xlXENsb3VkXERhdGFMYWJlbGluZ1xWMWJldGEx6gIkR29vZ2xlOjpD",
            "bG91ZDo6RGF0YUxhYmVsaW5nOjpWMWJldGExYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Google.Cloud.DataLabeling.V1Beta1.StringAggregationType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.DataLabeling.V1Beta1.HumanAnnotationConfig), global::Google.Cloud.DataLabeling.V1Beta1.HumanAnnotationConfig.Parser, new[]{ "Instruction", "AnnotatedDatasetDisplayName", "AnnotatedDatasetDescription", "LabelGroup", "LanguageCode", "ReplicaCount", "QuestionDuration", "ContributorEmails", "UserEmailAddress" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.DataLabeling.V1Beta1.ImageClassificationConfig), global::Google.Cloud.DataLabeling.V1Beta1.ImageClassificationConfig.Parser, new[]{ "AnnotationSpecSet", "AllowMultiLabel", "AnswerAggregationType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.DataLabeling.V1Beta1.BoundingPolyConfig), global::Google.Cloud.DataLabeling.V1Beta1.BoundingPolyConfig.Parser, new[]{ "AnnotationSpecSet", "InstructionMessage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.DataLabeling.V1Beta1.PolylineConfig), global::Google.Cloud.DataLabeling.V1Beta1.PolylineConfig.Parser, new[]{ "AnnotationSpecSet", "InstructionMessage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.DataLabeling.V1Beta1.SegmentationConfig), global::Google.Cloud.DataLabeling.V1Beta1.SegmentationConfig.Parser, new[]{ "AnnotationSpecSet", "InstructionMessage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.DataLabeling.V1Beta1.VideoClassificationConfig), global::Google.Cloud.DataLabeling.V1Beta1.VideoClassificationConfig.Parser, new[]{ "AnnotationSpecSetConfigs", "ApplyShotDetection" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.DataLabeling.V1Beta1.VideoClassificationConfig.Types.AnnotationSpecSetConfig), global::Google.Cloud.DataLabeling.V1Beta1.VideoClassificationConfig.Types.AnnotationSpecSetConfig.Parser, new[]{ "AnnotationSpecSet", "AllowMultiLabel" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.DataLabeling.V1Beta1.ObjectDetectionConfig), global::Google.Cloud.DataLabeling.V1Beta1.ObjectDetectionConfig.Parser, new[]{ "AnnotationSpecSet", "ExtractionFrameRate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.DataLabeling.V1Beta1.ObjectTrackingConfig), global::Google.Cloud.DataLabeling.V1Beta1.ObjectTrackingConfig.Parser, new[]{ "AnnotationSpecSet" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.DataLabeling.V1Beta1.EventConfig), global::Google.Cloud.DataLabeling.V1Beta1.EventConfig.Parser, new[]{ "AnnotationSpecSets" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.DataLabeling.V1Beta1.TextClassificationConfig), global::Google.Cloud.DataLabeling.V1Beta1.TextClassificationConfig.Parser, new[]{ "AllowMultiLabel", "AnnotationSpecSet", "SentimentConfig" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.DataLabeling.V1Beta1.SentimentConfig), global::Google.Cloud.DataLabeling.V1Beta1.SentimentConfig.Parser, new[]{ "EnableLabelSentimentSelection" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.DataLabeling.V1Beta1.TextEntityExtractionConfig), global::Google.Cloud.DataLabeling.V1Beta1.TextEntityExtractionConfig.Parser, new[]{ "AnnotationSpecSet" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum StringAggregationType {
    [pbr::OriginalName("STRING_AGGREGATION_TYPE_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// Majority vote to aggregate answers.
    /// </summary>
    [pbr::OriginalName("MAJORITY_VOTE")] MajorityVote = 1,
    /// <summary>
    /// Unanimous answers will be adopted.
    /// </summary>
    [pbr::OriginalName("UNANIMOUS_VOTE")] UnanimousVote = 2,
    /// <summary>
    /// Preserve all answers by crowd compute.
    /// </summary>
    [pbr::OriginalName("NO_AGGREGATION")] NoAggregation = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Configuration for how human labeling task should be done.
  /// </summary>
  public sealed partial class HumanAnnotationConfig : pb::IMessage<HumanAnnotationConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HumanAnnotationConfig> _parser = new pb::MessageParser<HumanAnnotationConfig>(() => new HumanAnnotationConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HumanAnnotationConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.DataLabeling.V1Beta1.HumanAnnotationConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HumanAnnotationConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HumanAnnotationConfig(HumanAnnotationConfig other) : this() {
      instruction_ = other.instruction_;
      annotatedDatasetDisplayName_ = other.annotatedDatasetDisplayName_;
      annotatedDatasetDescription_ = other.annotatedDatasetDescription_;
      labelGroup_ = other.labelGroup_;
      languageCode_ = other.languageCode_;
      replicaCount_ = other.replicaCount_;
      questionDuration_ = other.questionDuration_ != null ? other.questionDuration_.Clone() : null;
      contributorEmails_ = other.contributorEmails_.Clone();
      userEmailAddress_ = other.userEmailAddress_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HumanAnnotationConfig Clone() {
      return new HumanAnnotationConfig(this);
    }

    /// <summary>Field number for the "instruction" field.</summary>
    public const int InstructionFieldNumber = 1;
    private string instruction_ = "";
    /// <summary>
    /// Required. Instruction resource name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Instruction {
      get { return instruction_; }
      set {
        instruction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "annotated_dataset_display_name" field.</summary>
    public const int AnnotatedDatasetDisplayNameFieldNumber = 2;
    private string annotatedDatasetDisplayName_ = "";
    /// <summary>
    /// Required. A human-readable name for AnnotatedDataset defined by
    /// users. Maximum of 64 characters
    /// .
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnnotatedDatasetDisplayName {
      get { return annotatedDatasetDisplayName_; }
      set {
        annotatedDatasetDisplayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "annotated_dataset_description" field.</summary>
    public const int AnnotatedDatasetDescriptionFieldNumber = 3;
    private string annotatedDatasetDescription_ = "";
    /// <summary>
    /// Optional. A human-readable description for AnnotatedDataset.
    /// The description can be up to 10000 characters long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnnotatedDatasetDescription {
      get { return annotatedDatasetDescription_; }
      set {
        annotatedDatasetDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "label_group" field.</summary>
    public const int LabelGroupFieldNumber = 4;
    private string labelGroup_ = "";
    /// <summary>
    /// Optional. A human-readable label used to logically group labeling tasks.
    /// This string must match the regular expression `[a-zA-Z\\d_-]{0,128}`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LabelGroup {
      get { return labelGroup_; }
      set {
        labelGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "language_code" field.</summary>
    public const int LanguageCodeFieldNumber = 5;
    private string languageCode_ = "";
    /// <summary>
    /// Optional. The Language of this question, as a
    /// [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt).
    /// Default value is en-US.
    /// Only need to set this when task is language related. For example, French
    /// text classification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LanguageCode {
      get { return languageCode_; }
      set {
        languageCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "replica_count" field.</summary>
    public const int ReplicaCountFieldNumber = 6;
    private int replicaCount_;
    /// <summary>
    /// Optional. Replication of questions. Each question will be sent to up to
    /// this number of contributors to label. Aggregated answers will be returned.
    /// Default is set to 1.
    /// For image related labeling, valid values are 1, 3, 5.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplicaCount {
      get { return replicaCount_; }
      set {
        replicaCount_ = value;
      }
    }

    /// <summary>Field number for the "question_duration" field.</summary>
    public const int QuestionDurationFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Duration questionDuration_;
    /// <summary>
    /// Optional. Maximum duration for contributors to answer a question. Maximum
    /// is 3600 seconds. Default is 3600 seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration QuestionDuration {
      get { return questionDuration_; }
      set {
        questionDuration_ = value;
      }
    }

    /// <summary>Field number for the "contributor_emails" field.</summary>
    public const int ContributorEmailsFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_contributorEmails_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> contributorEmails_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Optional. If you want your own labeling contributors to manage and work on
    /// this labeling request, you can set these contributors here. We will give
    /// them access to the question types in crowdcompute. Note that these
    /// emails must be registered in crowdcompute worker UI:
    /// https://crowd-compute.appspot.com/
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ContributorEmails {
      get { return contributorEmails_; }
    }

    /// <summary>Field number for the "user_email_address" field.</summary>
    public const int UserEmailAddressFieldNumber = 10;
    private string userEmailAddress_ = "";
    /// <summary>
    /// Email of the user who started the labeling task and should be notified by
    /// email. If empty no notification will be sent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserEmailAddress {
      get { return userEmailAddress_; }
      set {
        userEmailAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HumanAnnotationConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HumanAnnotationConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Instruction != other.Instruction) return false;
      if (AnnotatedDatasetDisplayName != other.AnnotatedDatasetDisplayName) return false;
      if (AnnotatedDatasetDescription != other.AnnotatedDatasetDescription) return false;
      if (LabelGroup != other.LabelGroup) return false;
      if (LanguageCode != other.LanguageCode) return false;
      if (ReplicaCount != other.ReplicaCount) return false;
      if (!object.Equals(QuestionDuration, other.QuestionDuration)) return false;
      if(!contributorEmails_.Equals(other.contributorEmails_)) return false;
      if (UserEmailAddress != other.UserEmailAddress) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Instruction.Length != 0) hash ^= Instruction.GetHashCode();
      if (AnnotatedDatasetDisplayName.Length != 0) hash ^= AnnotatedDatasetDisplayName.GetHashCode();
      if (AnnotatedDatasetDescription.Length != 0) hash ^= AnnotatedDatasetDescription.GetHashCode();
      if (LabelGroup.Length != 0) hash ^= LabelGroup.GetHashCode();
      if (LanguageCode.Length != 0) hash ^= LanguageCode.GetHashCode();
      if (ReplicaCount != 0) hash ^= ReplicaCount.GetHashCode();
      if (questionDuration_ != null) hash ^= QuestionDuration.GetHashCode();
      hash ^= contributorEmails_.GetHashCode();
      if (UserEmailAddress.Length != 0) hash ^= UserEmailAddress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Instruction.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Instruction);
      }
      if (AnnotatedDatasetDisplayName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AnnotatedDatasetDisplayName);
      }
      if (AnnotatedDatasetDescription.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AnnotatedDatasetDescription);
      }
      if (LabelGroup.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LabelGroup);
      }
      if (LanguageCode.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LanguageCode);
      }
      if (ReplicaCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ReplicaCount);
      }
      if (questionDuration_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(QuestionDuration);
      }
      contributorEmails_.WriteTo(output, _repeated_contributorEmails_codec);
      if (UserEmailAddress.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(UserEmailAddress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Instruction.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Instruction);
      }
      if (AnnotatedDatasetDisplayName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AnnotatedDatasetDisplayName);
      }
      if (AnnotatedDatasetDescription.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AnnotatedDatasetDescription);
      }
      if (LabelGroup.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LabelGroup);
      }
      if (LanguageCode.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LanguageCode);
      }
      if (ReplicaCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ReplicaCount);
      }
      if (questionDuration_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(QuestionDuration);
      }
      contributorEmails_.WriteTo(ref output, _repeated_contributorEmails_codec);
      if (UserEmailAddress.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(UserEmailAddress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Instruction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Instruction);
      }
      if (AnnotatedDatasetDisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnnotatedDatasetDisplayName);
      }
      if (AnnotatedDatasetDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnnotatedDatasetDescription);
      }
      if (LabelGroup.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LabelGroup);
      }
      if (LanguageCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LanguageCode);
      }
      if (ReplicaCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplicaCount);
      }
      if (questionDuration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QuestionDuration);
      }
      size += contributorEmails_.CalculateSize(_repeated_contributorEmails_codec);
      if (UserEmailAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserEmailAddress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HumanAnnotationConfig other) {
      if (other == null) {
        return;
      }
      if (other.Instruction.Length != 0) {
        Instruction = other.Instruction;
      }
      if (other.AnnotatedDatasetDisplayName.Length != 0) {
        AnnotatedDatasetDisplayName = other.AnnotatedDatasetDisplayName;
      }
      if (other.AnnotatedDatasetDescription.Length != 0) {
        AnnotatedDatasetDescription = other.AnnotatedDatasetDescription;
      }
      if (other.LabelGroup.Length != 0) {
        LabelGroup = other.LabelGroup;
      }
      if (other.LanguageCode.Length != 0) {
        LanguageCode = other.LanguageCode;
      }
      if (other.ReplicaCount != 0) {
        ReplicaCount = other.ReplicaCount;
      }
      if (other.questionDuration_ != null) {
        if (questionDuration_ == null) {
          QuestionDuration = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        QuestionDuration.MergeFrom(other.QuestionDuration);
      }
      contributorEmails_.Add(other.contributorEmails_);
      if (other.UserEmailAddress.Length != 0) {
        UserEmailAddress = other.UserEmailAddress;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Instruction = input.ReadString();
            break;
          }
          case 18: {
            AnnotatedDatasetDisplayName = input.ReadString();
            break;
          }
          case 26: {
            AnnotatedDatasetDescription = input.ReadString();
            break;
          }
          case 34: {
            LabelGroup = input.ReadString();
            break;
          }
          case 42: {
            LanguageCode = input.ReadString();
            break;
          }
          case 48: {
            ReplicaCount = input.ReadInt32();
            break;
          }
          case 58: {
            if (questionDuration_ == null) {
              QuestionDuration = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(QuestionDuration);
            break;
          }
          case 74: {
            contributorEmails_.AddEntriesFrom(input, _repeated_contributorEmails_codec);
            break;
          }
          case 82: {
            UserEmailAddress = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Instruction = input.ReadString();
            break;
          }
          case 18: {
            AnnotatedDatasetDisplayName = input.ReadString();
            break;
          }
          case 26: {
            AnnotatedDatasetDescription = input.ReadString();
            break;
          }
          case 34: {
            LabelGroup = input.ReadString();
            break;
          }
          case 42: {
            LanguageCode = input.ReadString();
            break;
          }
          case 48: {
            ReplicaCount = input.ReadInt32();
            break;
          }
          case 58: {
            if (questionDuration_ == null) {
              QuestionDuration = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(QuestionDuration);
            break;
          }
          case 74: {
            contributorEmails_.AddEntriesFrom(ref input, _repeated_contributorEmails_codec);
            break;
          }
          case 82: {
            UserEmailAddress = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Config for image classification human labeling task.
  /// </summary>
  public sealed partial class ImageClassificationConfig : pb::IMessage<ImageClassificationConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ImageClassificationConfig> _parser = new pb::MessageParser<ImageClassificationConfig>(() => new ImageClassificationConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageClassificationConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.DataLabeling.V1Beta1.HumanAnnotationConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageClassificationConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageClassificationConfig(ImageClassificationConfig other) : this() {
      annotationSpecSet_ = other.annotationSpecSet_;
      allowMultiLabel_ = other.allowMultiLabel_;
      answerAggregationType_ = other.answerAggregationType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageClassificationConfig Clone() {
      return new ImageClassificationConfig(this);
    }

    /// <summary>Field number for the "annotation_spec_set" field.</summary>
    public const int AnnotationSpecSetFieldNumber = 1;
    private string annotationSpecSet_ = "";
    /// <summary>
    /// Required. Annotation spec set resource name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnnotationSpecSet {
      get { return annotationSpecSet_; }
      set {
        annotationSpecSet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "allow_multi_label" field.</summary>
    public const int AllowMultiLabelFieldNumber = 2;
    private bool allowMultiLabel_;
    /// <summary>
    /// Optional. If allow_multi_label is true, contributors are able to choose
    /// multiple labels for one image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowMultiLabel {
      get { return allowMultiLabel_; }
      set {
        allowMultiLabel_ = value;
      }
    }

    /// <summary>Field number for the "answer_aggregation_type" field.</summary>
    public const int AnswerAggregationTypeFieldNumber = 3;
    private global::Google.Cloud.DataLabeling.V1Beta1.StringAggregationType answerAggregationType_ = global::Google.Cloud.DataLabeling.V1Beta1.StringAggregationType.Unspecified;
    /// <summary>
    /// Optional. The type of how to aggregate answers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.DataLabeling.V1Beta1.StringAggregationType AnswerAggregationType {
      get { return answerAggregationType_; }
      set {
        answerAggregationType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageClassificationConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageClassificationConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AnnotationSpecSet != other.AnnotationSpecSet) return false;
      if (AllowMultiLabel != other.AllowMultiLabel) return false;
      if (AnswerAggregationType != other.AnswerAggregationType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AnnotationSpecSet.Length != 0) hash ^= AnnotationSpecSet.GetHashCode();
      if (AllowMultiLabel != false) hash ^= AllowMultiLabel.GetHashCode();
      if (AnswerAggregationType != global::Google.Cloud.DataLabeling.V1Beta1.StringAggregationType.Unspecified) hash ^= AnswerAggregationType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AnnotationSpecSet.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AnnotationSpecSet);
      }
      if (AllowMultiLabel != false) {
        output.WriteRawTag(16);
        output.WriteBool(AllowMultiLabel);
      }
      if (AnswerAggregationType != global::Google.Cloud.DataLabeling.V1Beta1.StringAggregationType.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) AnswerAggregationType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AnnotationSpecSet.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AnnotationSpecSet);
      }
      if (AllowMultiLabel != false) {
        output.WriteRawTag(16);
        output.WriteBool(AllowMultiLabel);
      }
      if (AnswerAggregationType != global::Google.Cloud.DataLabeling.V1Beta1.StringAggregationType.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) AnswerAggregationType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AnnotationSpecSet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnnotationSpecSet);
      }
      if (AllowMultiLabel != false) {
        size += 1 + 1;
      }
      if (AnswerAggregationType != global::Google.Cloud.DataLabeling.V1Beta1.StringAggregationType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AnswerAggregationType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageClassificationConfig other) {
      if (other == null) {
        return;
      }
      if (other.AnnotationSpecSet.Length != 0) {
        AnnotationSpecSet = other.AnnotationSpecSet;
      }
      if (other.AllowMultiLabel != false) {
        AllowMultiLabel = other.AllowMultiLabel;
      }
      if (other.AnswerAggregationType != global::Google.Cloud.DataLabeling.V1Beta1.StringAggregationType.Unspecified) {
        AnswerAggregationType = other.AnswerAggregationType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AnnotationSpecSet = input.ReadString();
            break;
          }
          case 16: {
            AllowMultiLabel = input.ReadBool();
            break;
          }
          case 24: {
            AnswerAggregationType = (global::Google.Cloud.DataLabeling.V1Beta1.StringAggregationType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            AnnotationSpecSet = input.ReadString();
            break;
          }
          case 16: {
            AllowMultiLabel = input.ReadBool();
            break;
          }
          case 24: {
            AnswerAggregationType = (global::Google.Cloud.DataLabeling.V1Beta1.StringAggregationType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Config for image bounding poly (and bounding box) human labeling task.
  /// </summary>
  public sealed partial class BoundingPolyConfig : pb::IMessage<BoundingPolyConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BoundingPolyConfig> _parser = new pb::MessageParser<BoundingPolyConfig>(() => new BoundingPolyConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BoundingPolyConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.DataLabeling.V1Beta1.HumanAnnotationConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoundingPolyConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoundingPolyConfig(BoundingPolyConfig other) : this() {
      annotationSpecSet_ = other.annotationSpecSet_;
      instructionMessage_ = other.instructionMessage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoundingPolyConfig Clone() {
      return new BoundingPolyConfig(this);
    }

    /// <summary>Field number for the "annotation_spec_set" field.</summary>
    public const int AnnotationSpecSetFieldNumber = 1;
    private string annotationSpecSet_ = "";
    /// <summary>
    /// Required. Annotation spec set resource name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnnotationSpecSet {
      get { return annotationSpecSet_; }
      set {
        annotationSpecSet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instruction_message" field.</summary>
    public const int InstructionMessageFieldNumber = 2;
    private string instructionMessage_ = "";
    /// <summary>
    /// Optional. Instruction message showed on contributors UI.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstructionMessage {
      get { return instructionMessage_; }
      set {
        instructionMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BoundingPolyConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BoundingPolyConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AnnotationSpecSet != other.AnnotationSpecSet) return false;
      if (InstructionMessage != other.InstructionMessage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AnnotationSpecSet.Length != 0) hash ^= AnnotationSpecSet.GetHashCode();
      if (InstructionMessage.Length != 0) hash ^= InstructionMessage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AnnotationSpecSet.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AnnotationSpecSet);
      }
      if (InstructionMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InstructionMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AnnotationSpecSet.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AnnotationSpecSet);
      }
      if (InstructionMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InstructionMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AnnotationSpecSet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnnotationSpecSet);
      }
      if (InstructionMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstructionMessage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BoundingPolyConfig other) {
      if (other == null) {
        return;
      }
      if (other.AnnotationSpecSet.Length != 0) {
        AnnotationSpecSet = other.AnnotationSpecSet;
      }
      if (other.InstructionMessage.Length != 0) {
        InstructionMessage = other.InstructionMessage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AnnotationSpecSet = input.ReadString();
            break;
          }
          case 18: {
            InstructionMessage = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            AnnotationSpecSet = input.ReadString();
            break;
          }
          case 18: {
            InstructionMessage = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Config for image polyline human labeling task.
  /// </summary>
  public sealed partial class PolylineConfig : pb::IMessage<PolylineConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PolylineConfig> _parser = new pb::MessageParser<PolylineConfig>(() => new PolylineConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PolylineConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.DataLabeling.V1Beta1.HumanAnnotationConfigReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolylineConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolylineConfig(PolylineConfig other) : this() {
      annotationSpecSet_ = other.annotationSpecSet_;
      instructionMessage_ = other.instructionMessage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolylineConfig Clone() {
      return new PolylineConfig(this);
    }

    /// <summary>Field number for the "annotation_spec_set" field.</summary>
    public const int AnnotationSpecSetFieldNumber = 1;
    private string annotationSpecSet_ = "";
    /// <summary>
    /// Required. Annotation spec set resource name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnnotationSpecSet {
      get { return annotationSpecSet_; }
      set {
        annotationSpecSet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instruction_message" field.</summary>
    public const int InstructionMessageFieldNumber = 2;
    private string instructionMessage_ = "";
    /// <summary>
    /// Optional. Instruction message showed on contributors UI.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstructionMessage {
      get { return instructionMessage_; }
      set {
        instructionMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PolylineConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PolylineConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AnnotationSpecSet != other.AnnotationSpecSet) return false;
      if (InstructionMessage != other.InstructionMessage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AnnotationSpecSet.Length != 0) hash ^= AnnotationSpecSet.GetHashCode();
      if (InstructionMessage.Length != 0) hash ^= InstructionMessage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AnnotationSpecSet.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AnnotationSpecSet);
      }
      if (InstructionMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InstructionMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AnnotationSpecSet.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AnnotationSpecSet);
      }
      if (InstructionMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InstructionMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AnnotationSpecSet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnnotationSpecSet);
      }
      if (InstructionMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstructionMessage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PolylineConfig other) {
      if (other == null) {
        return;
      }
      if (other.AnnotationSpecSet.Length != 0) {
        AnnotationSpecSet = other.AnnotationSpecSet;
      }
      if (other.InstructionMessage.Length != 0) {
        InstructionMessage = other.InstructionMessage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AnnotationSpecSet = input.ReadString();
            break;
          }
          case 18: {
            InstructionMessage = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            AnnotationSpecSet = input.ReadString();
            break;
          }
          case 18: {
            InstructionMessage = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Config for image segmentation
  /// </summary>
  public sealed partial class SegmentationConfig : pb::IMessage<SegmentationConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SegmentationConfig> _parser = new pb::MessageParser<SegmentationConfig>(() => new SegmentationConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SegmentationConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.DataLabeling.V1Beta1.HumanAnnotationConfigReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentationConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentationConfig(SegmentationConfig other) : this() {
      annotationSpecSet_ = other.annotationSpecSet_;
      instructionMessage_ = other.instructionMessage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentationConfig Clone() {
      return new SegmentationConfig(this);
    }

    /// <summary>Field number for the "annotation_spec_set" field.</summary>
    public const int AnnotationSpecSetFieldNumber = 1;
    private string annotationSpecSet_ = "";
    /// <summary>
    /// Required. Annotation spec set resource name. format:
    /// projects/{project_id}/annotationSpecSets/{annotation_spec_set_id}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnnotationSpecSet {
      get { return annotationSpecSet_; }
      set {
        annotationSpecSet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instruction_message" field.</summary>
    public const int InstructionMessageFieldNumber = 2;
    private string instructionMessage_ = "";
    /// <summary>
    /// Instruction message showed on labelers UI.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstructionMessage {
      get { return instructionMessage_; }
      set {
        instructionMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SegmentationConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SegmentationConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AnnotationSpecSet != other.AnnotationSpecSet) return false;
      if (InstructionMessage != other.InstructionMessage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AnnotationSpecSet.Length != 0) hash ^= AnnotationSpecSet.GetHashCode();
      if (InstructionMessage.Length != 0) hash ^= InstructionMessage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AnnotationSpecSet.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AnnotationSpecSet);
      }
      if (InstructionMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InstructionMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AnnotationSpecSet.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AnnotationSpecSet);
      }
      if (InstructionMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InstructionMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AnnotationSpecSet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnnotationSpecSet);
      }
      if (InstructionMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstructionMessage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SegmentationConfig other) {
      if (other == null) {
        return;
      }
      if (other.AnnotationSpecSet.Length != 0) {
        AnnotationSpecSet = other.AnnotationSpecSet;
      }
      if (other.InstructionMessage.Length != 0) {
        InstructionMessage = other.InstructionMessage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AnnotationSpecSet = input.ReadString();
            break;
          }
          case 18: {
            InstructionMessage = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            AnnotationSpecSet = input.ReadString();
            break;
          }
          case 18: {
            InstructionMessage = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Config for video classification human labeling task.
  /// Currently two types of video classification are supported:
  /// 1. Assign labels on the entire video.
  /// 2. Split the video into multiple video clips based on camera shot, and
  /// assign labels on each video clip.
  /// </summary>
  public sealed partial class VideoClassificationConfig : pb::IMessage<VideoClassificationConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VideoClassificationConfig> _parser = new pb::MessageParser<VideoClassificationConfig>(() => new VideoClassificationConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoClassificationConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.DataLabeling.V1Beta1.HumanAnnotationConfigReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoClassificationConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoClassificationConfig(VideoClassificationConfig other) : this() {
      annotationSpecSetConfigs_ = other.annotationSpecSetConfigs_.Clone();
      applyShotDetection_ = other.applyShotDetection_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoClassificationConfig Clone() {
      return new VideoClassificationConfig(this);
    }

    /// <summary>Field number for the "annotation_spec_set_configs" field.</summary>
    public const int AnnotationSpecSetConfigsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.DataLabeling.V1Beta1.VideoClassificationConfig.Types.AnnotationSpecSetConfig> _repeated_annotationSpecSetConfigs_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.DataLabeling.V1Beta1.VideoClassificationConfig.Types.AnnotationSpecSetConfig.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.DataLabeling.V1Beta1.VideoClassificationConfig.Types.AnnotationSpecSetConfig> annotationSpecSetConfigs_ = new pbc::RepeatedField<global::Google.Cloud.DataLabeling.V1Beta1.VideoClassificationConfig.Types.AnnotationSpecSetConfig>();
    /// <summary>
    /// Required. The list of annotation spec set configs.
    /// Since watching a video clip takes much longer time than an image, we
    /// support label with multiple AnnotationSpecSet at the same time. Labels
    /// in each AnnotationSpecSet will be shown in a group to contributors.
    /// Contributors can select one or more (depending on whether to allow multi
    /// label) from each group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.DataLabeling.V1Beta1.VideoClassificationConfig.Types.AnnotationSpecSetConfig> AnnotationSpecSetConfigs {
      get { return annotationSpecSetConfigs_; }
    }

    /// <summary>Field number for the "apply_shot_detection" field.</summary>
    public const int ApplyShotDetectionFieldNumber = 2;
    private bool applyShotDetection_;
    /// <summary>
    /// Optional. Option to apply shot detection on the video.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ApplyShotDetection {
      get { return applyShotDetection_; }
      set {
        applyShotDetection_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VideoClassificationConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VideoClassificationConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!annotationSpecSetConfigs_.Equals(other.annotationSpecSetConfigs_)) return false;
      if (ApplyShotDetection != other.ApplyShotDetection) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= annotationSpecSetConfigs_.GetHashCode();
      if (ApplyShotDetection != false) hash ^= ApplyShotDetection.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      annotationSpecSetConfigs_.WriteTo(output, _repeated_annotationSpecSetConfigs_codec);
      if (ApplyShotDetection != false) {
        output.WriteRawTag(16);
        output.WriteBool(ApplyShotDetection);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      annotationSpecSetConfigs_.WriteTo(ref output, _repeated_annotationSpecSetConfigs_codec);
      if (ApplyShotDetection != false) {
        output.WriteRawTag(16);
        output.WriteBool(ApplyShotDetection);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += annotationSpecSetConfigs_.CalculateSize(_repeated_annotationSpecSetConfigs_codec);
      if (ApplyShotDetection != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VideoClassificationConfig other) {
      if (other == null) {
        return;
      }
      annotationSpecSetConfigs_.Add(other.annotationSpecSetConfigs_);
      if (other.ApplyShotDetection != false) {
        ApplyShotDetection = other.ApplyShotDetection;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            annotationSpecSetConfigs_.AddEntriesFrom(input, _repeated_annotationSpecSetConfigs_codec);
            break;
          }
          case 16: {
            ApplyShotDetection = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            annotationSpecSetConfigs_.AddEntriesFrom(ref input, _repeated_annotationSpecSetConfigs_codec);
            break;
          }
          case 16: {
            ApplyShotDetection = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the VideoClassificationConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Annotation spec set with the setting of allowing multi labels or not.
      /// </summary>
      public sealed partial class AnnotationSpecSetConfig : pb::IMessage<AnnotationSpecSetConfig>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AnnotationSpecSetConfig> _parser = new pb::MessageParser<AnnotationSpecSetConfig>(() => new AnnotationSpecSetConfig());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AnnotationSpecSetConfig> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.DataLabeling.V1Beta1.VideoClassificationConfig.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnnotationSpecSetConfig() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnnotationSpecSetConfig(AnnotationSpecSetConfig other) : this() {
          annotationSpecSet_ = other.annotationSpecSet_;
          allowMultiLabel_ = other.allowMultiLabel_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnnotationSpecSetConfig Clone() {
          return new AnnotationSpecSetConfig(this);
        }

        /// <summary>Field number for the "annotation_spec_set" field.</summary>
        public const int AnnotationSpecSetFieldNumber = 1;
        private string annotationSpecSet_ = "";
        /// <summary>
        /// Required. Annotation spec set resource name.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AnnotationSpecSet {
          get { return annotationSpecSet_; }
          set {
            annotationSpecSet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "allow_multi_label" field.</summary>
        public const int AllowMultiLabelFieldNumber = 2;
        private bool allowMultiLabel_;
        /// <summary>
        /// Optional. If allow_multi_label is true, contributors are able to
        /// choose multiple labels from one annotation spec set.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool AllowMultiLabel {
          get { return allowMultiLabel_; }
          set {
            allowMultiLabel_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AnnotationSpecSetConfig);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AnnotationSpecSetConfig other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AnnotationSpecSet != other.AnnotationSpecSet) return false;
          if (AllowMultiLabel != other.AllowMultiLabel) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (AnnotationSpecSet.Length != 0) hash ^= AnnotationSpecSet.GetHashCode();
          if (AllowMultiLabel != false) hash ^= AllowMultiLabel.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (AnnotationSpecSet.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(AnnotationSpecSet);
          }
          if (AllowMultiLabel != false) {
            output.WriteRawTag(16);
            output.WriteBool(AllowMultiLabel);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (AnnotationSpecSet.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(AnnotationSpecSet);
          }
          if (AllowMultiLabel != false) {
            output.WriteRawTag(16);
            output.WriteBool(AllowMultiLabel);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (AnnotationSpecSet.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AnnotationSpecSet);
          }
          if (AllowMultiLabel != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AnnotationSpecSetConfig other) {
          if (other == null) {
            return;
          }
          if (other.AnnotationSpecSet.Length != 0) {
            AnnotationSpecSet = other.AnnotationSpecSet;
          }
          if (other.AllowMultiLabel != false) {
            AllowMultiLabel = other.AllowMultiLabel;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                AnnotationSpecSet = input.ReadString();
                break;
              }
              case 16: {
                AllowMultiLabel = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                AnnotationSpecSet = input.ReadString();
                break;
              }
              case 16: {
                AllowMultiLabel = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// Config for video object detection human labeling task.
  /// Object detection will be conducted on the images extracted from the video,
  /// and those objects will be labeled with bounding boxes.
  /// User need to specify the number of images to be extracted per second as the
  /// extraction frame rate.
  /// </summary>
  public sealed partial class ObjectDetectionConfig : pb::IMessage<ObjectDetectionConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectDetectionConfig> _parser = new pb::MessageParser<ObjectDetectionConfig>(() => new ObjectDetectionConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectDetectionConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.DataLabeling.V1Beta1.HumanAnnotationConfigReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectDetectionConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectDetectionConfig(ObjectDetectionConfig other) : this() {
      annotationSpecSet_ = other.annotationSpecSet_;
      extractionFrameRate_ = other.extractionFrameRate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectDetectionConfig Clone() {
      return new ObjectDetectionConfig(this);
    }

    /// <summary>Field number for the "annotation_spec_set" field.</summary>
    public const int AnnotationSpecSetFieldNumber = 1;
    private string annotationSpecSet_ = "";
    /// <summary>
    /// Required. Annotation spec set resource name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnnotationSpecSet {
      get { return annotationSpecSet_; }
      set {
        annotationSpecSet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extraction_frame_rate" field.</summary>
    public const int ExtractionFrameRateFieldNumber = 3;
    private double extractionFrameRate_;
    /// <summary>
    /// Required. Number of frames per second to be extracted from the video.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ExtractionFrameRate {
      get { return extractionFrameRate_; }
      set {
        extractionFrameRate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectDetectionConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectDetectionConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AnnotationSpecSet != other.AnnotationSpecSet) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ExtractionFrameRate, other.ExtractionFrameRate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AnnotationSpecSet.Length != 0) hash ^= AnnotationSpecSet.GetHashCode();
      if (ExtractionFrameRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ExtractionFrameRate);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AnnotationSpecSet.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AnnotationSpecSet);
      }
      if (ExtractionFrameRate != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(ExtractionFrameRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AnnotationSpecSet.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AnnotationSpecSet);
      }
      if (ExtractionFrameRate != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(ExtractionFrameRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AnnotationSpecSet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnnotationSpecSet);
      }
      if (ExtractionFrameRate != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectDetectionConfig other) {
      if (other == null) {
        return;
      }
      if (other.AnnotationSpecSet.Length != 0) {
        AnnotationSpecSet = other.AnnotationSpecSet;
      }
      if (other.ExtractionFrameRate != 0D) {
        ExtractionFrameRate = other.ExtractionFrameRate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AnnotationSpecSet = input.ReadString();
            break;
          }
          case 25: {
            ExtractionFrameRate = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            AnnotationSpecSet = input.ReadString();
            break;
          }
          case 25: {
            ExtractionFrameRate = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Config for video object tracking human labeling task.
  /// </summary>
  public sealed partial class ObjectTrackingConfig : pb::IMessage<ObjectTrackingConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectTrackingConfig> _parser = new pb::MessageParser<ObjectTrackingConfig>(() => new ObjectTrackingConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectTrackingConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.DataLabeling.V1Beta1.HumanAnnotationConfigReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectTrackingConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectTrackingConfig(ObjectTrackingConfig other) : this() {
      annotationSpecSet_ = other.annotationSpecSet_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectTrackingConfig Clone() {
      return new ObjectTrackingConfig(this);
    }

    /// <summary>Field number for the "annotation_spec_set" field.</summary>
    public const int AnnotationSpecSetFieldNumber = 1;
    private string annotationSpecSet_ = "";
    /// <summary>
    /// Required. Annotation spec set resource name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnnotationSpecSet {
      get { return annotationSpecSet_; }
      set {
        annotationSpecSet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectTrackingConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectTrackingConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AnnotationSpecSet != other.AnnotationSpecSet) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AnnotationSpecSet.Length != 0) hash ^= AnnotationSpecSet.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AnnotationSpecSet.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AnnotationSpecSet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AnnotationSpecSet.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AnnotationSpecSet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AnnotationSpecSet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnnotationSpecSet);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectTrackingConfig other) {
      if (other == null) {
        return;
      }
      if (other.AnnotationSpecSet.Length != 0) {
        AnnotationSpecSet = other.AnnotationSpecSet;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AnnotationSpecSet = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            AnnotationSpecSet = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Config for video event human labeling task.
  /// </summary>
  public sealed partial class EventConfig : pb::IMessage<EventConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventConfig> _parser = new pb::MessageParser<EventConfig>(() => new EventConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.DataLabeling.V1Beta1.HumanAnnotationConfigReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventConfig(EventConfig other) : this() {
      annotationSpecSets_ = other.annotationSpecSets_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventConfig Clone() {
      return new EventConfig(this);
    }

    /// <summary>Field number for the "annotation_spec_sets" field.</summary>
    public const int AnnotationSpecSetsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_annotationSpecSets_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> annotationSpecSets_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Required. The list of annotation spec set resource name. Similar to video
    /// classification, we support selecting event from multiple AnnotationSpecSet
    /// at the same time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AnnotationSpecSets {
      get { return annotationSpecSets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!annotationSpecSets_.Equals(other.annotationSpecSets_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= annotationSpecSets_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      annotationSpecSets_.WriteTo(output, _repeated_annotationSpecSets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      annotationSpecSets_.WriteTo(ref output, _repeated_annotationSpecSets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += annotationSpecSets_.CalculateSize(_repeated_annotationSpecSets_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventConfig other) {
      if (other == null) {
        return;
      }
      annotationSpecSets_.Add(other.annotationSpecSets_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            annotationSpecSets_.AddEntriesFrom(input, _repeated_annotationSpecSets_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            annotationSpecSets_.AddEntriesFrom(ref input, _repeated_annotationSpecSets_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Config for text classification human labeling task.
  /// </summary>
  public sealed partial class TextClassificationConfig : pb::IMessage<TextClassificationConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TextClassificationConfig> _parser = new pb::MessageParser<TextClassificationConfig>(() => new TextClassificationConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextClassificationConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.DataLabeling.V1Beta1.HumanAnnotationConfigReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextClassificationConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextClassificationConfig(TextClassificationConfig other) : this() {
      allowMultiLabel_ = other.allowMultiLabel_;
      annotationSpecSet_ = other.annotationSpecSet_;
      sentimentConfig_ = other.sentimentConfig_ != null ? other.sentimentConfig_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextClassificationConfig Clone() {
      return new TextClassificationConfig(this);
    }

    /// <summary>Field number for the "allow_multi_label" field.</summary>
    public const int AllowMultiLabelFieldNumber = 1;
    private bool allowMultiLabel_;
    /// <summary>
    /// Optional. If allow_multi_label is true, contributors are able to choose
    /// multiple labels for one text segment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowMultiLabel {
      get { return allowMultiLabel_; }
      set {
        allowMultiLabel_ = value;
      }
    }

    /// <summary>Field number for the "annotation_spec_set" field.</summary>
    public const int AnnotationSpecSetFieldNumber = 2;
    private string annotationSpecSet_ = "";
    /// <summary>
    /// Required. Annotation spec set resource name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnnotationSpecSet {
      get { return annotationSpecSet_; }
      set {
        annotationSpecSet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sentiment_config" field.</summary>
    public const int SentimentConfigFieldNumber = 3;
    private global::Google.Cloud.DataLabeling.V1Beta1.SentimentConfig sentimentConfig_;
    /// <summary>
    /// Optional. Configs for sentiment selection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.DataLabeling.V1Beta1.SentimentConfig SentimentConfig {
      get { return sentimentConfig_; }
      set {
        sentimentConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextClassificationConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextClassificationConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AllowMultiLabel != other.AllowMultiLabel) return false;
      if (AnnotationSpecSet != other.AnnotationSpecSet) return false;
      if (!object.Equals(SentimentConfig, other.SentimentConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AllowMultiLabel != false) hash ^= AllowMultiLabel.GetHashCode();
      if (AnnotationSpecSet.Length != 0) hash ^= AnnotationSpecSet.GetHashCode();
      if (sentimentConfig_ != null) hash ^= SentimentConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AllowMultiLabel != false) {
        output.WriteRawTag(8);
        output.WriteBool(AllowMultiLabel);
      }
      if (AnnotationSpecSet.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AnnotationSpecSet);
      }
      if (sentimentConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SentimentConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AllowMultiLabel != false) {
        output.WriteRawTag(8);
        output.WriteBool(AllowMultiLabel);
      }
      if (AnnotationSpecSet.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AnnotationSpecSet);
      }
      if (sentimentConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SentimentConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AllowMultiLabel != false) {
        size += 1 + 1;
      }
      if (AnnotationSpecSet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnnotationSpecSet);
      }
      if (sentimentConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SentimentConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextClassificationConfig other) {
      if (other == null) {
        return;
      }
      if (other.AllowMultiLabel != false) {
        AllowMultiLabel = other.AllowMultiLabel;
      }
      if (other.AnnotationSpecSet.Length != 0) {
        AnnotationSpecSet = other.AnnotationSpecSet;
      }
      if (other.sentimentConfig_ != null) {
        if (sentimentConfig_ == null) {
          SentimentConfig = new global::Google.Cloud.DataLabeling.V1Beta1.SentimentConfig();
        }
        SentimentConfig.MergeFrom(other.SentimentConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AllowMultiLabel = input.ReadBool();
            break;
          }
          case 18: {
            AnnotationSpecSet = input.ReadString();
            break;
          }
          case 26: {
            if (sentimentConfig_ == null) {
              SentimentConfig = new global::Google.Cloud.DataLabeling.V1Beta1.SentimentConfig();
            }
            input.ReadMessage(SentimentConfig);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AllowMultiLabel = input.ReadBool();
            break;
          }
          case 18: {
            AnnotationSpecSet = input.ReadString();
            break;
          }
          case 26: {
            if (sentimentConfig_ == null) {
              SentimentConfig = new global::Google.Cloud.DataLabeling.V1Beta1.SentimentConfig();
            }
            input.ReadMessage(SentimentConfig);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Config for setting up sentiments.
  /// </summary>
  public sealed partial class SentimentConfig : pb::IMessage<SentimentConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SentimentConfig> _parser = new pb::MessageParser<SentimentConfig>(() => new SentimentConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SentimentConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.DataLabeling.V1Beta1.HumanAnnotationConfigReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SentimentConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SentimentConfig(SentimentConfig other) : this() {
      enableLabelSentimentSelection_ = other.enableLabelSentimentSelection_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SentimentConfig Clone() {
      return new SentimentConfig(this);
    }

    /// <summary>Field number for the "enable_label_sentiment_selection" field.</summary>
    public const int EnableLabelSentimentSelectionFieldNumber = 1;
    private bool enableLabelSentimentSelection_;
    /// <summary>
    /// If set to true, contributors will have the option to select sentiment of
    /// the label they selected, to mark it as negative or positive label. Default
    /// is false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableLabelSentimentSelection {
      get { return enableLabelSentimentSelection_; }
      set {
        enableLabelSentimentSelection_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SentimentConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SentimentConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnableLabelSentimentSelection != other.EnableLabelSentimentSelection) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnableLabelSentimentSelection != false) hash ^= EnableLabelSentimentSelection.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (EnableLabelSentimentSelection != false) {
        output.WriteRawTag(8);
        output.WriteBool(EnableLabelSentimentSelection);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (EnableLabelSentimentSelection != false) {
        output.WriteRawTag(8);
        output.WriteBool(EnableLabelSentimentSelection);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnableLabelSentimentSelection != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SentimentConfig other) {
      if (other == null) {
        return;
      }
      if (other.EnableLabelSentimentSelection != false) {
        EnableLabelSentimentSelection = other.EnableLabelSentimentSelection;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EnableLabelSentimentSelection = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EnableLabelSentimentSelection = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Config for text entity extraction human labeling task.
  /// </summary>
  public sealed partial class TextEntityExtractionConfig : pb::IMessage<TextEntityExtractionConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TextEntityExtractionConfig> _parser = new pb::MessageParser<TextEntityExtractionConfig>(() => new TextEntityExtractionConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextEntityExtractionConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.DataLabeling.V1Beta1.HumanAnnotationConfigReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextEntityExtractionConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextEntityExtractionConfig(TextEntityExtractionConfig other) : this() {
      annotationSpecSet_ = other.annotationSpecSet_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextEntityExtractionConfig Clone() {
      return new TextEntityExtractionConfig(this);
    }

    /// <summary>Field number for the "annotation_spec_set" field.</summary>
    public const int AnnotationSpecSetFieldNumber = 1;
    private string annotationSpecSet_ = "";
    /// <summary>
    /// Required. Annotation spec set resource name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnnotationSpecSet {
      get { return annotationSpecSet_; }
      set {
        annotationSpecSet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextEntityExtractionConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextEntityExtractionConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AnnotationSpecSet != other.AnnotationSpecSet) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AnnotationSpecSet.Length != 0) hash ^= AnnotationSpecSet.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AnnotationSpecSet.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AnnotationSpecSet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AnnotationSpecSet.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AnnotationSpecSet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AnnotationSpecSet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnnotationSpecSet);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextEntityExtractionConfig other) {
      if (other == null) {
        return;
      }
      if (other.AnnotationSpecSet.Length != 0) {
        AnnotationSpecSet = other.AnnotationSpecSet;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AnnotationSpecSet = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            AnnotationSpecSet = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
