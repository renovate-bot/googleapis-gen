# frozen_string_literal: true

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "helper"

require "gapic/grpc/service_stub"

require "google/cloud/osconfig/agentendpoint/v1/agentendpoint_pb"
require "google/cloud/osconfig/agentendpoint/v1/agentendpoint_services_pb"
require "google/cloud/osconfig/agentendpoint/v1/agent_endpoint_service"

class ::Google::Cloud::Osconfig::Agentendpoint::V1::AgentEndpointService::ClientTest < Minitest::Test
  class ClientStub
    attr_accessor :call_rpc_count, :requests

    def initialize response, operation, &block
      @response = response
      @operation = operation
      @block = block
      @call_rpc_count = 0
      @requests = []
    end

    def call_rpc *args, **kwargs
      @call_rpc_count += 1

      @requests << @block&.call(*args, **kwargs)

      yield @response, @operation if block_given?

      @response
    end
  end

  def test_receive_task_notification
    # Create GRPC objects.
    grpc_response = ::Google::Cloud::Osconfig::Agentendpoint::V1::ReceiveTaskNotificationResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a server streaming method.
    instance_id_token = "hello world"
    agent_version = "hello world"

    receive_task_notification_client_stub = ClientStub.new [grpc_response].to_enum, grpc_operation do |name, request, options:|
      assert_equal :receive_task_notification, name
      assert_kind_of ::Google::Cloud::Osconfig::Agentendpoint::V1::ReceiveTaskNotificationRequest, request
      assert_equal "hello world", request["instance_id_token"]
      assert_equal "hello world", request["agent_version"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, receive_task_notification_client_stub do
      # Create client
      client = ::Google::Cloud::Osconfig::Agentendpoint::V1::AgentEndpointService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.receive_task_notification({ instance_id_token: instance_id_token, agent_version: agent_version }) do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Cloud::Osconfig::Agentendpoint::V1::ReceiveTaskNotificationResponse, r
        end
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.receive_task_notification instance_id_token: instance_id_token, agent_version: agent_version do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Cloud::Osconfig::Agentendpoint::V1::ReceiveTaskNotificationResponse, r
        end
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.receive_task_notification ::Google::Cloud::Osconfig::Agentendpoint::V1::ReceiveTaskNotificationRequest.new(instance_id_token: instance_id_token, agent_version: agent_version) do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Cloud::Osconfig::Agentendpoint::V1::ReceiveTaskNotificationResponse, r
        end
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.receive_task_notification({ instance_id_token: instance_id_token, agent_version: agent_version }, grpc_options) do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Cloud::Osconfig::Agentendpoint::V1::ReceiveTaskNotificationResponse, r
        end
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.receive_task_notification(::Google::Cloud::Osconfig::Agentendpoint::V1::ReceiveTaskNotificationRequest.new(instance_id_token: instance_id_token, agent_version: agent_version), grpc_options) do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Cloud::Osconfig::Agentendpoint::V1::ReceiveTaskNotificationResponse, r
        end
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, receive_task_notification_client_stub.call_rpc_count
    end
  end

  def test_start_next_task
    # Create GRPC objects.
    grpc_response = ::Google::Cloud::Osconfig::Agentendpoint::V1::StartNextTaskResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    instance_id_token = "hello world"

    start_next_task_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :start_next_task, name
      assert_kind_of ::Google::Cloud::Osconfig::Agentendpoint::V1::StartNextTaskRequest, request
      assert_equal "hello world", request["instance_id_token"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, start_next_task_client_stub do
      # Create client
      client = ::Google::Cloud::Osconfig::Agentendpoint::V1::AgentEndpointService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.start_next_task({ instance_id_token: instance_id_token }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.start_next_task instance_id_token: instance_id_token do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.start_next_task ::Google::Cloud::Osconfig::Agentendpoint::V1::StartNextTaskRequest.new(instance_id_token: instance_id_token) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.start_next_task({ instance_id_token: instance_id_token }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.start_next_task(::Google::Cloud::Osconfig::Agentendpoint::V1::StartNextTaskRequest.new(instance_id_token: instance_id_token), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, start_next_task_client_stub.call_rpc_count
    end
  end

  def test_report_task_progress
    # Create GRPC objects.
    grpc_response = ::Google::Cloud::Osconfig::Agentendpoint::V1::ReportTaskProgressResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    instance_id_token = "hello world"
    task_id = "hello world"
    task_type = :TASK_TYPE_UNSPECIFIED
    apply_patches_task_progress = {}

    report_task_progress_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :report_task_progress, name
      assert_kind_of ::Google::Cloud::Osconfig::Agentendpoint::V1::ReportTaskProgressRequest, request
      assert_equal "hello world", request["instance_id_token"]
      assert_equal "hello world", request["task_id"]
      assert_equal :TASK_TYPE_UNSPECIFIED, request["task_type"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Cloud::Osconfig::Agentendpoint::V1::ApplyPatchesTaskProgress), request["apply_patches_task_progress"]
      assert_equal :apply_patches_task_progress, request.progress
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, report_task_progress_client_stub do
      # Create client
      client = ::Google::Cloud::Osconfig::Agentendpoint::V1::AgentEndpointService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.report_task_progress({ instance_id_token: instance_id_token, task_id: task_id, task_type: task_type, apply_patches_task_progress: apply_patches_task_progress }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.report_task_progress instance_id_token: instance_id_token, task_id: task_id, task_type: task_type, apply_patches_task_progress: apply_patches_task_progress do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.report_task_progress ::Google::Cloud::Osconfig::Agentendpoint::V1::ReportTaskProgressRequest.new(instance_id_token: instance_id_token, task_id: task_id, task_type: task_type, apply_patches_task_progress: apply_patches_task_progress) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.report_task_progress({ instance_id_token: instance_id_token, task_id: task_id, task_type: task_type, apply_patches_task_progress: apply_patches_task_progress }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.report_task_progress(::Google::Cloud::Osconfig::Agentendpoint::V1::ReportTaskProgressRequest.new(instance_id_token: instance_id_token, task_id: task_id, task_type: task_type, apply_patches_task_progress: apply_patches_task_progress), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, report_task_progress_client_stub.call_rpc_count
    end
  end

  def test_report_task_complete
    # Create GRPC objects.
    grpc_response = ::Google::Cloud::Osconfig::Agentendpoint::V1::ReportTaskCompleteResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    instance_id_token = "hello world"
    task_id = "hello world"
    task_type = :TASK_TYPE_UNSPECIFIED
    error_message = "hello world"
    apply_patches_task_output = {}

    report_task_complete_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :report_task_complete, name
      assert_kind_of ::Google::Cloud::Osconfig::Agentendpoint::V1::ReportTaskCompleteRequest, request
      assert_equal "hello world", request["instance_id_token"]
      assert_equal "hello world", request["task_id"]
      assert_equal :TASK_TYPE_UNSPECIFIED, request["task_type"]
      assert_equal "hello world", request["error_message"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Cloud::Osconfig::Agentendpoint::V1::ApplyPatchesTaskOutput), request["apply_patches_task_output"]
      assert_equal :apply_patches_task_output, request.output
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, report_task_complete_client_stub do
      # Create client
      client = ::Google::Cloud::Osconfig::Agentendpoint::V1::AgentEndpointService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.report_task_complete({ instance_id_token: instance_id_token, task_id: task_id, task_type: task_type, error_message: error_message, apply_patches_task_output: apply_patches_task_output }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.report_task_complete instance_id_token: instance_id_token, task_id: task_id, task_type: task_type, error_message: error_message, apply_patches_task_output: apply_patches_task_output do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.report_task_complete ::Google::Cloud::Osconfig::Agentendpoint::V1::ReportTaskCompleteRequest.new(instance_id_token: instance_id_token, task_id: task_id, task_type: task_type, error_message: error_message, apply_patches_task_output: apply_patches_task_output) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.report_task_complete({ instance_id_token: instance_id_token, task_id: task_id, task_type: task_type, error_message: error_message, apply_patches_task_output: apply_patches_task_output }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.report_task_complete(::Google::Cloud::Osconfig::Agentendpoint::V1::ReportTaskCompleteRequest.new(instance_id_token: instance_id_token, task_id: task_id, task_type: task_type, error_message: error_message, apply_patches_task_output: apply_patches_task_output), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, report_task_complete_client_stub.call_rpc_count
    end
  end

  def test_register_agent
    # Create GRPC objects.
    grpc_response = ::Google::Cloud::Osconfig::Agentendpoint::V1::RegisterAgentResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    instance_id_token = "hello world"
    agent_version = "hello world"
    supported_capabilities = ["hello world"]
    os_long_name = "hello world"
    os_short_name = "hello world"
    os_version = "hello world"
    os_architecture = "hello world"

    register_agent_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :register_agent, name
      assert_kind_of ::Google::Cloud::Osconfig::Agentendpoint::V1::RegisterAgentRequest, request
      assert_equal "hello world", request["instance_id_token"]
      assert_equal "hello world", request["agent_version"]
      assert_equal ["hello world"], request["supported_capabilities"]
      assert_equal "hello world", request["os_long_name"]
      assert_equal "hello world", request["os_short_name"]
      assert_equal "hello world", request["os_version"]
      assert_equal "hello world", request["os_architecture"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, register_agent_client_stub do
      # Create client
      client = ::Google::Cloud::Osconfig::Agentendpoint::V1::AgentEndpointService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.register_agent({ instance_id_token: instance_id_token, agent_version: agent_version, supported_capabilities: supported_capabilities, os_long_name: os_long_name, os_short_name: os_short_name, os_version: os_version, os_architecture: os_architecture }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.register_agent instance_id_token: instance_id_token, agent_version: agent_version, supported_capabilities: supported_capabilities, os_long_name: os_long_name, os_short_name: os_short_name, os_version: os_version, os_architecture: os_architecture do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.register_agent ::Google::Cloud::Osconfig::Agentendpoint::V1::RegisterAgentRequest.new(instance_id_token: instance_id_token, agent_version: agent_version, supported_capabilities: supported_capabilities, os_long_name: os_long_name, os_short_name: os_short_name, os_version: os_version, os_architecture: os_architecture) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.register_agent({ instance_id_token: instance_id_token, agent_version: agent_version, supported_capabilities: supported_capabilities, os_long_name: os_long_name, os_short_name: os_short_name, os_version: os_version, os_architecture: os_architecture }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.register_agent(::Google::Cloud::Osconfig::Agentendpoint::V1::RegisterAgentRequest.new(instance_id_token: instance_id_token, agent_version: agent_version, supported_capabilities: supported_capabilities, os_long_name: os_long_name, os_short_name: os_short_name, os_version: os_version, os_architecture: os_architecture), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, register_agent_client_stub.call_rpc_count
    end
  end

  def test_report_inventory
    # Create GRPC objects.
    grpc_response = ::Google::Cloud::Osconfig::Agentendpoint::V1::ReportInventoryResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    instance_id_token = "hello world"
    inventory_checksum = "hello world"
    inventory = {}

    report_inventory_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :report_inventory, name
      assert_kind_of ::Google::Cloud::Osconfig::Agentendpoint::V1::ReportInventoryRequest, request
      assert_equal "hello world", request["instance_id_token"]
      assert_equal "hello world", request["inventory_checksum"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Cloud::Osconfig::Agentendpoint::V1::Inventory), request["inventory"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, report_inventory_client_stub do
      # Create client
      client = ::Google::Cloud::Osconfig::Agentendpoint::V1::AgentEndpointService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.report_inventory({ instance_id_token: instance_id_token, inventory_checksum: inventory_checksum, inventory: inventory }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.report_inventory instance_id_token: instance_id_token, inventory_checksum: inventory_checksum, inventory: inventory do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.report_inventory ::Google::Cloud::Osconfig::Agentendpoint::V1::ReportInventoryRequest.new(instance_id_token: instance_id_token, inventory_checksum: inventory_checksum, inventory: inventory) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.report_inventory({ instance_id_token: instance_id_token, inventory_checksum: inventory_checksum, inventory: inventory }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.report_inventory(::Google::Cloud::Osconfig::Agentendpoint::V1::ReportInventoryRequest.new(instance_id_token: instance_id_token, inventory_checksum: inventory_checksum, inventory: inventory), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, report_inventory_client_stub.call_rpc_count
    end
  end

  def test_configure
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure

    client = block_config = config = nil
    Gapic::ServiceStub.stub :new, nil do
      client = ::Google::Cloud::Osconfig::Agentendpoint::V1::AgentEndpointService::Client.new do |config|
        config.credentials = grpc_channel
      end
    end

    config = client.configure do |c|
      block_config = c
    end

    assert_same block_config, config
    assert_kind_of ::Google::Cloud::Osconfig::Agentendpoint::V1::AgentEndpointService::Client::Configuration, config
  end
end
