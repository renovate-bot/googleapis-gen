# frozen_string_literal: true

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/cloud/errors"
require "google/cloud/osconfig/agentendpoint/v1beta/agentendpoint_pb"

module Google
  module Cloud
    module Osconfig
      module Agentendpoint
        module V1beta
          module AgentEndpointService
            ##
            # Client for the AgentEndpointService service.
            #
            # OS Config agent endpoint API.
            #
            class Client
              # @private
              attr_reader :agent_endpoint_service_stub

              ##
              # Configure the AgentEndpointService Client class.
              #
              # See {::Google::Cloud::Osconfig::Agentendpoint::V1beta::AgentEndpointService::Client::Configuration}
              # for a description of the configuration fields.
              #
              # @example
              #
              #   # Modify the configuration for all AgentEndpointService clients
              #   ::Google::Cloud::Osconfig::Agentendpoint::V1beta::AgentEndpointService::Client.configure do |config|
              #     config.timeout = 10.0
              #   end
              #
              # @yield [config] Configure the Client client.
              # @yieldparam config [Client::Configuration]
              #
              # @return [Client::Configuration]
              #
              def self.configure
                @configure ||= begin
                  namespace = ["Google", "Cloud", "Osconfig", "Agentendpoint", "V1beta"]
                  parent_config = while namespace.any?
                                    parent_name = namespace.join "::"
                                    parent_const = const_get parent_name
                                    break parent_const.configure if parent_const.respond_to? :configure
                                    namespace.pop
                                  end
                  default_config = Client::Configuration.new parent_config

                  default_config.timeout = 60.0
                  default_config.retry_policy = {
                    initial_delay: 1.0, max_delay: 60.0, multiplier: 1.3, retry_codes: [14]
                  }

                  default_config.rpcs.receive_task_notification.timeout = 3600.0
                  default_config.rpcs.receive_task_notification.retry_policy = {
                    initial_delay: 1.0, max_delay: 60.0, multiplier: 1.3, retry_codes: [4, 1, 10, 13, 14]
                  }

                  default_config
                end
                yield @configure if block_given?
                @configure
              end

              ##
              # Configure the AgentEndpointService Client instance.
              #
              # The configuration is set to the derived mode, meaning that values can be changed,
              # but structural changes (adding new fields, etc.) are not allowed. Structural changes
              # should be made on {Client.configure}.
              #
              # See {::Google::Cloud::Osconfig::Agentendpoint::V1beta::AgentEndpointService::Client::Configuration}
              # for a description of the configuration fields.
              #
              # @yield [config] Configure the Client client.
              # @yieldparam config [Client::Configuration]
              #
              # @return [Client::Configuration]
              #
              def configure
                yield @config if block_given?
                @config
              end

              ##
              # Create a new AgentEndpointService client object.
              #
              # @example
              #
              #   # Create a client using the default configuration
              #   client = ::Google::Cloud::Osconfig::Agentendpoint::V1beta::AgentEndpointService::Client.new
              #
              #   # Create a client using a custom configuration
              #   client = ::Google::Cloud::Osconfig::Agentendpoint::V1beta::AgentEndpointService::Client.new do |config|
              #     config.timeout = 10.0
              #   end
              #
              # @yield [config] Configure the AgentEndpointService client.
              # @yieldparam config [Client::Configuration]
              #
              def initialize
                # These require statements are intentionally placed here to initialize
                # the gRPC module only when it's required.
                # See https://github.com/googleapis/toolkit/issues/446
                require "gapic/grpc"
                require "google/cloud/osconfig/agentendpoint/v1beta/agentendpoint_services_pb"

                # Create the configuration object
                @config = Configuration.new Client.configure

                # Yield the configuration if needed
                yield @config if block_given?

                # Create credentials
                credentials = @config.credentials
                # Use self-signed JWT if the endpoint is unchanged from default,
                # but only if the default endpoint does not have a region prefix.
                enable_self_signed_jwt = @config.endpoint == Client.configure.endpoint &&
                                         !@config.endpoint.split(".").first.include?("-")
                credentials ||= Credentials.default scope: @config.scope,
                                                    enable_self_signed_jwt: enable_self_signed_jwt
                if credentials.is_a?(::String) || credentials.is_a?(::Hash)
                  credentials = Credentials.new credentials, scope: @config.scope
                end
                @quota_project_id = @config.quota_project
                @quota_project_id ||= credentials.quota_project_id if credentials.respond_to? :quota_project_id

                @agent_endpoint_service_stub = ::Gapic::ServiceStub.new(
                  ::Google::Cloud::Osconfig::Agentendpoint::V1beta::AgentEndpointService::Stub,
                  credentials:  credentials,
                  endpoint:     @config.endpoint,
                  channel_args: @config.channel_args,
                  interceptors: @config.interceptors
                )
              end

              # Service calls

              ##
              # Stream established by client to receive Task notifications.
              #
              # @overload receive_task_notification(request, options = nil)
              #   Pass arguments to `receive_task_notification` via a request object, either of type
              #   {::Google::Cloud::Osconfig::Agentendpoint::V1beta::ReceiveTaskNotificationRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::Osconfig::Agentendpoint::V1beta::ReceiveTaskNotificationRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload receive_task_notification(instance_id_token: nil, agent_version: nil)
              #   Pass arguments to `receive_task_notification` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param instance_id_token [::String]
              #     Required. This is the Compute Engine instance identity token described in
              #     https://cloud.google.com/compute/docs/instances/verifying-instance-identity
              #     where the audience is 'osconfig.googleapis.com' and the format is 'full'.
              #   @param agent_version [::String]
              #     Required. The version of the agent making the request.
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Enumerable<::Google::Cloud::Osconfig::Agentendpoint::V1beta::ReceiveTaskNotificationResponse>]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Enumerable<::Google::Cloud::Osconfig::Agentendpoint::V1beta::ReceiveTaskNotificationResponse>]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              # @example Basic example
              #   require "google/cloud/osconfig/agentendpoint/v1beta"
              #
              #   # Create a client object. The client can be reused for multiple calls.
              #   client = Google::Cloud::Osconfig::Agentendpoint::V1beta::AgentEndpointService::Client.new
              #
              #   # Create a request. To set request fields, pass in keyword arguments.
              #   request = Google::Cloud::Osconfig::Agentendpoint::V1beta::ReceiveTaskNotificationRequest.new
              #
              #   # Call the receive_task_notification method.
              #   result = client.receive_task_notification request
              #
              #   # The returned object is a streamed enumerable yielding elements of
              #   # type ::Google::Cloud::Osconfig::Agentendpoint::V1beta::ReceiveTaskNotificationResponse.
              #   result.each do |response|
              #     p response
              #   end
              #
              def receive_task_notification request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Osconfig::Agentendpoint::V1beta::ReceiveTaskNotificationRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.receive_task_notification.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Agentendpoint::V1beta::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                options.apply_defaults timeout:      @config.rpcs.receive_task_notification.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.receive_task_notification.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @agent_endpoint_service_stub.call_rpc :receive_task_notification, request, options: options do |response, operation|
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Signals the start of a task execution and returns the task info.
              #
              # @overload start_next_task(request, options = nil)
              #   Pass arguments to `start_next_task` via a request object, either of type
              #   {::Google::Cloud::Osconfig::Agentendpoint::V1beta::StartNextTaskRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::Osconfig::Agentendpoint::V1beta::StartNextTaskRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload start_next_task(instance_id_token: nil)
              #   Pass arguments to `start_next_task` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param instance_id_token [::String]
              #     Required. This is the Compute Engine instance identity token described in
              #     https://cloud.google.com/compute/docs/instances/verifying-instance-identity
              #     where the audience is 'osconfig.googleapis.com' and the format is 'full'.
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Google::Cloud::Osconfig::Agentendpoint::V1beta::StartNextTaskResponse]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Google::Cloud::Osconfig::Agentendpoint::V1beta::StartNextTaskResponse]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              # @example Basic example
              #   require "google/cloud/osconfig/agentendpoint/v1beta"
              #
              #   # Create a client object. The client can be reused for multiple calls.
              #   client = Google::Cloud::Osconfig::Agentendpoint::V1beta::AgentEndpointService::Client.new
              #
              #   # Create a request. To set request fields, pass in keyword arguments.
              #   request = Google::Cloud::Osconfig::Agentendpoint::V1beta::StartNextTaskRequest.new
              #
              #   # Call the start_next_task method.
              #   result = client.start_next_task request
              #
              #   # The returned object is of type Google::Cloud::Osconfig::Agentendpoint::V1beta::StartNextTaskResponse.
              #   p result
              #
              def start_next_task request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Osconfig::Agentendpoint::V1beta::StartNextTaskRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.start_next_task.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Agentendpoint::V1beta::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                options.apply_defaults timeout:      @config.rpcs.start_next_task.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.start_next_task.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @agent_endpoint_service_stub.call_rpc :start_next_task, request, options: options do |response, operation|
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Signals an intermediary progress checkpoint in task execution.
              #
              # @overload report_task_progress(request, options = nil)
              #   Pass arguments to `report_task_progress` via a request object, either of type
              #   {::Google::Cloud::Osconfig::Agentendpoint::V1beta::ReportTaskProgressRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::Osconfig::Agentendpoint::V1beta::ReportTaskProgressRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload report_task_progress(instance_id_token: nil, task_id: nil, task_type: nil, apply_patches_task_progress: nil, exec_step_task_progress: nil)
              #   Pass arguments to `report_task_progress` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param instance_id_token [::String]
              #     Required. This is the Compute Engine instance identity token described in
              #     https://cloud.google.com/compute/docs/instances/verifying-instance-identity
              #     where the audience is 'osconfig.googleapis.com' and the format is 'full'.
              #   @param task_id [::String]
              #     Required. Unique identifier of the task this applies to.
              #   @param task_type [::Google::Cloud::Osconfig::Agentendpoint::V1beta::TaskType]
              #     Required. The type of task to report progress on.
              #
              #     Progress must include the appropriate message based on this enum as
              #     specified below:
              #     APPLY_PATCHES = ApplyPatchesTaskProgress
              #     EXEC_STEP = Progress not supported for this type.
              #   @param apply_patches_task_progress [::Google::Cloud::Osconfig::Agentendpoint::V1beta::ApplyPatchesTaskProgress, ::Hash]
              #     Details about the progress of the apply patches task.
              #   @param exec_step_task_progress [::Google::Cloud::Osconfig::Agentendpoint::V1beta::ExecStepTaskProgress, ::Hash]
              #     Details about the progress of the exec step task.
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Google::Cloud::Osconfig::Agentendpoint::V1beta::ReportTaskProgressResponse]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Google::Cloud::Osconfig::Agentendpoint::V1beta::ReportTaskProgressResponse]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              # @example Basic example
              #   require "google/cloud/osconfig/agentendpoint/v1beta"
              #
              #   # Create a client object. The client can be reused for multiple calls.
              #   client = Google::Cloud::Osconfig::Agentendpoint::V1beta::AgentEndpointService::Client.new
              #
              #   # Create a request. To set request fields, pass in keyword arguments.
              #   request = Google::Cloud::Osconfig::Agentendpoint::V1beta::ReportTaskProgressRequest.new
              #
              #   # Call the report_task_progress method.
              #   result = client.report_task_progress request
              #
              #   # The returned object is of type Google::Cloud::Osconfig::Agentendpoint::V1beta::ReportTaskProgressResponse.
              #   p result
              #
              def report_task_progress request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Osconfig::Agentendpoint::V1beta::ReportTaskProgressRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.report_task_progress.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Agentendpoint::V1beta::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                options.apply_defaults timeout:      @config.rpcs.report_task_progress.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.report_task_progress.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @agent_endpoint_service_stub.call_rpc :report_task_progress, request, options: options do |response, operation|
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Signals that the task execution is complete and optionally returns the next
              # task.
              #
              # @overload report_task_complete(request, options = nil)
              #   Pass arguments to `report_task_complete` via a request object, either of type
              #   {::Google::Cloud::Osconfig::Agentendpoint::V1beta::ReportTaskCompleteRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::Osconfig::Agentendpoint::V1beta::ReportTaskCompleteRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload report_task_complete(instance_id_token: nil, task_id: nil, task_type: nil, error_message: nil, apply_patches_task_output: nil, exec_step_task_output: nil)
              #   Pass arguments to `report_task_complete` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param instance_id_token [::String]
              #     Required. This is the Compute Engine instance identity token described in
              #     https://cloud.google.com/compute/docs/instances/verifying-instance-identity
              #     where the audience is 'osconfig.googleapis.com' and the format is 'full'.
              #   @param task_id [::String]
              #     Required. Unique identifier of the task this applies to.
              #   @param task_type [::Google::Cloud::Osconfig::Agentendpoint::V1beta::TaskType]
              #     Required. The type of task to report completed.
              #
              #     The output must include the appropriate message based on the following
              #     enum values:
              #     APPLY_PATCHES = ApplyPatchesTaskOutput
              #     EXEC_STEP = ExecStepTaskOutput
              #   @param error_message [::String]
              #     Descriptive error message if the task execution ended in error.
              #   @param apply_patches_task_output [::Google::Cloud::Osconfig::Agentendpoint::V1beta::ApplyPatchesTaskOutput, ::Hash]
              #     Final output details of the apply patches task;
              #   @param exec_step_task_output [::Google::Cloud::Osconfig::Agentendpoint::V1beta::ExecStepTaskOutput, ::Hash]
              #     Final output details of the exec step task;
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Google::Cloud::Osconfig::Agentendpoint::V1beta::ReportTaskCompleteResponse]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Google::Cloud::Osconfig::Agentendpoint::V1beta::ReportTaskCompleteResponse]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              # @example Basic example
              #   require "google/cloud/osconfig/agentendpoint/v1beta"
              #
              #   # Create a client object. The client can be reused for multiple calls.
              #   client = Google::Cloud::Osconfig::Agentendpoint::V1beta::AgentEndpointService::Client.new
              #
              #   # Create a request. To set request fields, pass in keyword arguments.
              #   request = Google::Cloud::Osconfig::Agentendpoint::V1beta::ReportTaskCompleteRequest.new
              #
              #   # Call the report_task_complete method.
              #   result = client.report_task_complete request
              #
              #   # The returned object is of type Google::Cloud::Osconfig::Agentendpoint::V1beta::ReportTaskCompleteResponse.
              #   p result
              #
              def report_task_complete request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Osconfig::Agentendpoint::V1beta::ReportTaskCompleteRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.report_task_complete.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Agentendpoint::V1beta::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                options.apply_defaults timeout:      @config.rpcs.report_task_complete.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.report_task_complete.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @agent_endpoint_service_stub.call_rpc :report_task_complete, request, options: options do |response, operation|
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Lookup the effective guest policy that applies to a VM instance. This
              # lookup merges all policies that are assigned to the instance ancestry.
              #
              # @overload lookup_effective_guest_policy(request, options = nil)
              #   Pass arguments to `lookup_effective_guest_policy` via a request object, either of type
              #   {::Google::Cloud::Osconfig::Agentendpoint::V1beta::LookupEffectiveGuestPolicyRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::Osconfig::Agentendpoint::V1beta::LookupEffectiveGuestPolicyRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload lookup_effective_guest_policy(instance_id_token: nil, os_short_name: nil, os_version: nil, os_architecture: nil)
              #   Pass arguments to `lookup_effective_guest_policy` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param instance_id_token [::String]
              #     Required. This is the GCE instance identity token described in
              #     https://cloud.google.com/compute/docs/instances/verifying-instance-identity
              #     where the audience is 'osconfig.googleapis.com' and the format is 'full'.
              #   @param os_short_name [::String]
              #     Short name of the OS running on the instance. The OS Config agent only
              #     provideS this field for targeting if OS Inventory is enabled for that
              #     instance.
              #   @param os_version [::String]
              #     Version of the OS running on the instance. The OS Config agent only
              #     provide this field for targeting if OS Inventory is enabled for that
              #     VM instance.
              #   @param os_architecture [::String]
              #     Architecture of OS running on the instance. The OS Config agent only
              #     provide this field for targeting if OS Inventory is enabled for that
              #     instance.
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Google::Cloud::Osconfig::Agentendpoint::V1beta::EffectiveGuestPolicy]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Google::Cloud::Osconfig::Agentendpoint::V1beta::EffectiveGuestPolicy]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              # @example Basic example
              #   require "google/cloud/osconfig/agentendpoint/v1beta"
              #
              #   # Create a client object. The client can be reused for multiple calls.
              #   client = Google::Cloud::Osconfig::Agentendpoint::V1beta::AgentEndpointService::Client.new
              #
              #   # Create a request. To set request fields, pass in keyword arguments.
              #   request = Google::Cloud::Osconfig::Agentendpoint::V1beta::LookupEffectiveGuestPolicyRequest.new
              #
              #   # Call the lookup_effective_guest_policy method.
              #   result = client.lookup_effective_guest_policy request
              #
              #   # The returned object is of type Google::Cloud::Osconfig::Agentendpoint::V1beta::EffectiveGuestPolicy.
              #   p result
              #
              def lookup_effective_guest_policy request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Osconfig::Agentendpoint::V1beta::LookupEffectiveGuestPolicyRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.lookup_effective_guest_policy.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Agentendpoint::V1beta::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                options.apply_defaults timeout:      @config.rpcs.lookup_effective_guest_policy.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.lookup_effective_guest_policy.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @agent_endpoint_service_stub.call_rpc :lookup_effective_guest_policy, request, options: options do |response, operation|
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Registers the agent running on the VM.
              #
              # @overload register_agent(request, options = nil)
              #   Pass arguments to `register_agent` via a request object, either of type
              #   {::Google::Cloud::Osconfig::Agentendpoint::V1beta::RegisterAgentRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::Osconfig::Agentendpoint::V1beta::RegisterAgentRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload register_agent(instance_id_token: nil, agent_version: nil, supported_capabilities: nil)
              #   Pass arguments to `register_agent` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param instance_id_token [::String]
              #     Required. This is the Compute Engine instance identity token described in
              #     https://cloud.google.com/compute/docs/instances/verifying-instance-identity
              #     where the audience is 'osconfig.googleapis.com' and the format is 'full'.
              #   @param agent_version [::String]
              #     Required. The version of the agent.
              #   @param supported_capabilities [::Array<::String>]
              #     Required. The capabilities supported by the agent. Supported values are:
              #     PATCH_GA
              #     GUEST_POLICY_BETA
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Google::Cloud::Osconfig::Agentendpoint::V1beta::RegisterAgentResponse]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Google::Cloud::Osconfig::Agentendpoint::V1beta::RegisterAgentResponse]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              # @example Basic example
              #   require "google/cloud/osconfig/agentendpoint/v1beta"
              #
              #   # Create a client object. The client can be reused for multiple calls.
              #   client = Google::Cloud::Osconfig::Agentendpoint::V1beta::AgentEndpointService::Client.new
              #
              #   # Create a request. To set request fields, pass in keyword arguments.
              #   request = Google::Cloud::Osconfig::Agentendpoint::V1beta::RegisterAgentRequest.new
              #
              #   # Call the register_agent method.
              #   result = client.register_agent request
              #
              #   # The returned object is of type Google::Cloud::Osconfig::Agentendpoint::V1beta::RegisterAgentResponse.
              #   p result
              #
              def register_agent request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Osconfig::Agentendpoint::V1beta::RegisterAgentRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.register_agent.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Agentendpoint::V1beta::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                options.apply_defaults timeout:      @config.rpcs.register_agent.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.register_agent.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @agent_endpoint_service_stub.call_rpc :register_agent, request, options: options do |response, operation|
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Configuration class for the AgentEndpointService API.
              #
              # This class represents the configuration for AgentEndpointService,
              # providing control over timeouts, retry behavior, logging, transport
              # parameters, and other low-level controls. Certain parameters can also be
              # applied individually to specific RPCs. See
              # {::Google::Cloud::Osconfig::Agentendpoint::V1beta::AgentEndpointService::Client::Configuration::Rpcs}
              # for a list of RPCs that can be configured independently.
              #
              # Configuration can be applied globally to all clients, or to a single client
              # on construction.
              #
              # @example
              #
              #   # Modify the global config, setting the timeout for
              #   # receive_task_notification to 20 seconds,
              #   # and all remaining timeouts to 10 seconds.
              #   ::Google::Cloud::Osconfig::Agentendpoint::V1beta::AgentEndpointService::Client.configure do |config|
              #     config.timeout = 10.0
              #     config.rpcs.receive_task_notification.timeout = 20.0
              #   end
              #
              #   # Apply the above configuration only to a new client.
              #   client = ::Google::Cloud::Osconfig::Agentendpoint::V1beta::AgentEndpointService::Client.new do |config|
              #     config.timeout = 10.0
              #     config.rpcs.receive_task_notification.timeout = 20.0
              #   end
              #
              # @!attribute [rw] endpoint
              #   The hostname or hostname:port of the service endpoint.
              #   Defaults to `"osconfig.googleapis.com"`.
              #   @return [::String]
              # @!attribute [rw] credentials
              #   Credentials to send with calls. You may provide any of the following types:
              #    *  (`String`) The path to a service account key file in JSON format
              #    *  (`Hash`) A service account key as a Hash
              #    *  (`Google::Auth::Credentials`) A googleauth credentials object
              #       (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
              #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
              #       (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
              #    *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
              #    *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
              #    *  (`nil`) indicating no credentials
              #   @return [::Object]
              # @!attribute [rw] scope
              #   The OAuth scopes
              #   @return [::Array<::String>]
              # @!attribute [rw] lib_name
              #   The library name as recorded in instrumentation and logging
              #   @return [::String]
              # @!attribute [rw] lib_version
              #   The library version as recorded in instrumentation and logging
              #   @return [::String]
              # @!attribute [rw] channel_args
              #   Extra parameters passed to the gRPC channel. Note: this is ignored if a
              #   `GRPC::Core::Channel` object is provided as the credential.
              #   @return [::Hash]
              # @!attribute [rw] interceptors
              #   An array of interceptors that are run before calls are executed.
              #   @return [::Array<::GRPC::ClientInterceptor>]
              # @!attribute [rw] timeout
              #   The call timeout in seconds.
              #   @return [::Numeric]
              # @!attribute [rw] metadata
              #   Additional gRPC headers to be sent with the call.
              #   @return [::Hash{::Symbol=>::String}]
              # @!attribute [rw] retry_policy
              #   The retry policy. The value is a hash with the following keys:
              #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
              #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
              #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
              #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
              #       trigger a retry.
              #   @return [::Hash]
              # @!attribute [rw] quota_project
              #   A separate project against which to charge quota.
              #   @return [::String]
              #
              class Configuration
                extend ::Gapic::Config

                config_attr :endpoint,      "osconfig.googleapis.com", ::String
                config_attr :credentials,   nil do |value|
                  allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
                  allowed += [::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials] if defined? ::GRPC
                  allowed.any? { |klass| klass === value }
                end
                config_attr :scope,         nil, ::String, ::Array, nil
                config_attr :lib_name,      nil, ::String, nil
                config_attr :lib_version,   nil, ::String, nil
                config_attr(:channel_args,  { "grpc.service_config_disable_resolution" => 1 }, ::Hash, nil)
                config_attr :interceptors,  nil, ::Array, nil
                config_attr :timeout,       nil, ::Numeric, nil
                config_attr :metadata,      nil, ::Hash, nil
                config_attr :retry_policy,  nil, ::Hash, ::Proc, nil
                config_attr :quota_project, nil, ::String, nil

                # @private
                def initialize parent_config = nil
                  @parent_config = parent_config unless parent_config.nil?

                  yield self if block_given?
                end

                ##
                # Configurations for individual RPCs
                # @return [Rpcs]
                #
                def rpcs
                  @rpcs ||= begin
                    parent_rpcs = nil
                    parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config.respond_to?(:rpcs)
                    Rpcs.new parent_rpcs
                  end
                end

                ##
                # Configuration RPC class for the AgentEndpointService API.
                #
                # Includes fields providing the configuration for each RPC in this service.
                # Each configuration object is of type `Gapic::Config::Method` and includes
                # the following configuration fields:
                #
                #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
                #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
                #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
                #     include the following keys:
                #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
                #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
                #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
                #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
                #         trigger a retry.
                #
                class Rpcs
                  ##
                  # RPC-specific configuration for `receive_task_notification`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :receive_task_notification
                  ##
                  # RPC-specific configuration for `start_next_task`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :start_next_task
                  ##
                  # RPC-specific configuration for `report_task_progress`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :report_task_progress
                  ##
                  # RPC-specific configuration for `report_task_complete`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :report_task_complete
                  ##
                  # RPC-specific configuration for `lookup_effective_guest_policy`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :lookup_effective_guest_policy
                  ##
                  # RPC-specific configuration for `register_agent`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :register_agent

                  # @private
                  def initialize parent_rpcs = nil
                    receive_task_notification_config = parent_rpcs.receive_task_notification if parent_rpcs.respond_to? :receive_task_notification
                    @receive_task_notification = ::Gapic::Config::Method.new receive_task_notification_config
                    start_next_task_config = parent_rpcs.start_next_task if parent_rpcs.respond_to? :start_next_task
                    @start_next_task = ::Gapic::Config::Method.new start_next_task_config
                    report_task_progress_config = parent_rpcs.report_task_progress if parent_rpcs.respond_to? :report_task_progress
                    @report_task_progress = ::Gapic::Config::Method.new report_task_progress_config
                    report_task_complete_config = parent_rpcs.report_task_complete if parent_rpcs.respond_to? :report_task_complete
                    @report_task_complete = ::Gapic::Config::Method.new report_task_complete_config
                    lookup_effective_guest_policy_config = parent_rpcs.lookup_effective_guest_policy if parent_rpcs.respond_to? :lookup_effective_guest_policy
                    @lookup_effective_guest_policy = ::Gapic::Config::Method.new lookup_effective_guest_policy_config
                    register_agent_config = parent_rpcs.register_agent if parent_rpcs.respond_to? :register_agent
                    @register_agent = ::Gapic::Config::Method.new register_agent_config

                    yield self if block_given?
                  end
                end
              end
            end
          end
        end
      end
    end
  end
end
