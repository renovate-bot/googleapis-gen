# frozen_string_literal: true

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/cloud/errors"
require "google/cloud/osconfig/v1beta/osconfig_service_pb"

module Google
  module Cloud
    module Osconfig
      module V1beta
        module OsConfigService
          ##
          # Client for the OsConfigService service.
          #
          # OS Config API
          #
          # The OS Config service is a server-side component that you can use to
          # manage package installations and patch jobs for virtual machine instances.
          #
          class Client
            include Paths

            # @private
            attr_reader :os_config_service_stub

            ##
            # Configure the OsConfigService Client class.
            #
            # See {::Google::Cloud::Osconfig::V1beta::OsConfigService::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @example
            #
            #   # Modify the configuration for all OsConfigService clients
            #   ::Google::Cloud::Osconfig::V1beta::OsConfigService::Client.configure do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def self.configure
              @configure ||= begin
                namespace = ["Google", "Cloud", "Osconfig", "V1beta"]
                parent_config = while namespace.any?
                                  parent_name = namespace.join "::"
                                  parent_const = const_get parent_name
                                  break parent_const.configure if parent_const.respond_to? :configure
                                  namespace.pop
                                end
                default_config = Client::Configuration.new parent_config

                default_config
              end
              yield @configure if block_given?
              @configure
            end

            ##
            # Configure the OsConfigService Client instance.
            #
            # The configuration is set to the derived mode, meaning that values can be changed,
            # but structural changes (adding new fields, etc.) are not allowed. Structural changes
            # should be made on {Client.configure}.
            #
            # See {::Google::Cloud::Osconfig::V1beta::OsConfigService::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def configure
              yield @config if block_given?
              @config
            end

            ##
            # Create a new OsConfigService client object.
            #
            # @example
            #
            #   # Create a client using the default configuration
            #   client = ::Google::Cloud::Osconfig::V1beta::OsConfigService::Client.new
            #
            #   # Create a client using a custom configuration
            #   client = ::Google::Cloud::Osconfig::V1beta::OsConfigService::Client.new do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the OsConfigService client.
            # @yieldparam config [Client::Configuration]
            #
            def initialize
              # These require statements are intentionally placed here to initialize
              # the gRPC module only when it's required.
              # See https://github.com/googleapis/toolkit/issues/446
              require "gapic/grpc"
              require "google/cloud/osconfig/v1beta/osconfig_service_services_pb"

              # Create the configuration object
              @config = Configuration.new Client.configure

              # Yield the configuration if needed
              yield @config if block_given?

              # Create credentials
              credentials = @config.credentials
              # Use self-signed JWT if the endpoint is unchanged from default,
              # but only if the default endpoint does not have a region prefix.
              enable_self_signed_jwt = @config.endpoint == Client.configure.endpoint &&
                                       !@config.endpoint.split(".").first.include?("-")
              credentials ||= Credentials.default scope: @config.scope,
                                                  enable_self_signed_jwt: enable_self_signed_jwt
              if credentials.is_a?(::String) || credentials.is_a?(::Hash)
                credentials = Credentials.new credentials, scope: @config.scope
              end
              @quota_project_id = @config.quota_project
              @quota_project_id ||= credentials.quota_project_id if credentials.respond_to? :quota_project_id

              @os_config_service_stub = ::Gapic::ServiceStub.new(
                ::Google::Cloud::Osconfig::V1beta::OsConfigService::Stub,
                credentials:  credentials,
                endpoint:     @config.endpoint,
                channel_args: @config.channel_args,
                interceptors: @config.interceptors
              )
            end

            # Service calls

            ##
            # Patch VM instances by creating and running a patch job.
            #
            # @overload execute_patch_job(request, options = nil)
            #   Pass arguments to `execute_patch_job` via a request object, either of type
            #   {::Google::Cloud::Osconfig::V1beta::ExecutePatchJobRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Osconfig::V1beta::ExecutePatchJobRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload execute_patch_job(parent: nil, description: nil, instance_filter: nil, patch_config: nil, duration: nil, dry_run: nil, display_name: nil)
            #   Pass arguments to `execute_patch_job` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The project in which to run this patch in the form `projects/*`
            #   @param description [::String]
            #     Description of the patch job. Length of the description is limited
            #     to 1024 characters.
            #   @param instance_filter [::Google::Cloud::Osconfig::V1beta::PatchInstanceFilter, ::Hash]
            #     Required. Instances to patch, either explicitly or filtered by some criteria such
            #     as zone or labels.
            #   @param patch_config [::Google::Cloud::Osconfig::V1beta::PatchConfig, ::Hash]
            #     Patch configuration being applied. If omitted, instances are
            #     patched using the default configurations.
            #   @param duration [::Google::Protobuf::Duration, ::Hash]
            #     Duration of the patch job. After the duration ends, the patch job
            #     times out.
            #   @param dry_run [::Boolean]
            #     If this patch is a dry-run only, instances are contacted but
            #     will do nothing.
            #   @param display_name [::String]
            #     Display name for this patch job. This does not have to be unique.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Osconfig::V1beta::PatchJob]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Osconfig::V1beta::PatchJob]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/osconfig/v1beta"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Osconfig::V1beta::OsConfigService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Osconfig::V1beta::ExecutePatchJobRequest.new
            #
            #   # Call the execute_patch_job method.
            #   result = client.execute_patch_job request
            #
            #   # The returned object is of type Google::Cloud::Osconfig::V1beta::PatchJob.
            #   p result
            #
            def execute_patch_job request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Osconfig::V1beta::ExecutePatchJobRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.execute_patch_job.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Osconfig::V1beta::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.execute_patch_job.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.execute_patch_job.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @os_config_service_stub.call_rpc :execute_patch_job, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Get the patch job. This can be used to track the progress of an
            # ongoing patch job or review the details of completed jobs.
            #
            # @overload get_patch_job(request, options = nil)
            #   Pass arguments to `get_patch_job` via a request object, either of type
            #   {::Google::Cloud::Osconfig::V1beta::GetPatchJobRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Osconfig::V1beta::GetPatchJobRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_patch_job(name: nil)
            #   Pass arguments to `get_patch_job` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. Name of the patch in the form `projects/*/patchJobs/*`
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Osconfig::V1beta::PatchJob]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Osconfig::V1beta::PatchJob]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/osconfig/v1beta"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Osconfig::V1beta::OsConfigService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Osconfig::V1beta::GetPatchJobRequest.new
            #
            #   # Call the get_patch_job method.
            #   result = client.get_patch_job request
            #
            #   # The returned object is of type Google::Cloud::Osconfig::V1beta::PatchJob.
            #   p result
            #
            def get_patch_job request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Osconfig::V1beta::GetPatchJobRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_patch_job.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Osconfig::V1beta::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.name
                header_params["name"] = request.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get_patch_job.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_patch_job.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @os_config_service_stub.call_rpc :get_patch_job, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Cancel a patch job. The patch job must be active. Canceled patch jobs
            # cannot be restarted.
            #
            # @overload cancel_patch_job(request, options = nil)
            #   Pass arguments to `cancel_patch_job` via a request object, either of type
            #   {::Google::Cloud::Osconfig::V1beta::CancelPatchJobRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Osconfig::V1beta::CancelPatchJobRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload cancel_patch_job(name: nil)
            #   Pass arguments to `cancel_patch_job` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. Name of the patch in the form `projects/*/patchJobs/*`
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Osconfig::V1beta::PatchJob]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Osconfig::V1beta::PatchJob]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/osconfig/v1beta"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Osconfig::V1beta::OsConfigService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Osconfig::V1beta::CancelPatchJobRequest.new
            #
            #   # Call the cancel_patch_job method.
            #   result = client.cancel_patch_job request
            #
            #   # The returned object is of type Google::Cloud::Osconfig::V1beta::PatchJob.
            #   p result
            #
            def cancel_patch_job request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Osconfig::V1beta::CancelPatchJobRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.cancel_patch_job.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Osconfig::V1beta::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.name
                header_params["name"] = request.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.cancel_patch_job.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.cancel_patch_job.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @os_config_service_stub.call_rpc :cancel_patch_job, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Get a list of patch jobs.
            #
            # @overload list_patch_jobs(request, options = nil)
            #   Pass arguments to `list_patch_jobs` via a request object, either of type
            #   {::Google::Cloud::Osconfig::V1beta::ListPatchJobsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Osconfig::V1beta::ListPatchJobsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_patch_jobs(parent: nil, page_size: nil, page_token: nil, filter: nil)
            #   Pass arguments to `list_patch_jobs` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. In the form of `projects/*`
            #   @param page_size [::Integer]
            #     The maximum number of instance status to return.
            #   @param page_token [::String]
            #     A pagination token returned from a previous call
            #     that indicates where this listing should continue from.
            #   @param filter [::String]
            #     If provided, this field specifies the criteria that must be met by patch
            #     jobs to be included in the response.
            #     Currently, filtering is only available on the patch_deployment field.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::Osconfig::V1beta::PatchJob>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Cloud::Osconfig::V1beta::PatchJob>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/osconfig/v1beta"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Osconfig::V1beta::OsConfigService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Osconfig::V1beta::ListPatchJobsRequest.new
            #
            #   # Call the list_patch_jobs method.
            #   result = client.list_patch_jobs request
            #
            #   # The returned object is of type Gapic::PagedEnumerable. You can
            #   # iterate over all elements by calling #each, and the enumerable
            #   # will lazily make API calls to fetch subsequent pages. Other
            #   # methods are also available for managing paging directly.
            #   result.each do |response|
            #     # Each element is of type ::Google::Cloud::Osconfig::V1beta::PatchJob.
            #     p response
            #   end
            #
            def list_patch_jobs request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Osconfig::V1beta::ListPatchJobsRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_patch_jobs.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Osconfig::V1beta::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.list_patch_jobs.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_patch_jobs.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @os_config_service_stub.call_rpc :list_patch_jobs, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @os_config_service_stub, :list_patch_jobs, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Get a list of instance details for a given patch job.
            #
            # @overload list_patch_job_instance_details(request, options = nil)
            #   Pass arguments to `list_patch_job_instance_details` via a request object, either of type
            #   {::Google::Cloud::Osconfig::V1beta::ListPatchJobInstanceDetailsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Osconfig::V1beta::ListPatchJobInstanceDetailsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_patch_job_instance_details(parent: nil, page_size: nil, page_token: nil, filter: nil)
            #   Pass arguments to `list_patch_job_instance_details` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The parent for the instances are in the form of `projects/*/patchJobs/*`.
            #   @param page_size [::Integer]
            #     The maximum number of instance details records to return.  Default is 100.
            #   @param page_token [::String]
            #     A pagination token returned from a previous call
            #     that indicates where this listing should continue from.
            #   @param filter [::String]
            #     A filter expression that filters results listed in the response. This
            #     field supports filtering results by instance zone, name, state, or
            #     `failure_reason`.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::Osconfig::V1beta::PatchJobInstanceDetails>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Cloud::Osconfig::V1beta::PatchJobInstanceDetails>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/osconfig/v1beta"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Osconfig::V1beta::OsConfigService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Osconfig::V1beta::ListPatchJobInstanceDetailsRequest.new
            #
            #   # Call the list_patch_job_instance_details method.
            #   result = client.list_patch_job_instance_details request
            #
            #   # The returned object is of type Gapic::PagedEnumerable. You can
            #   # iterate over all elements by calling #each, and the enumerable
            #   # will lazily make API calls to fetch subsequent pages. Other
            #   # methods are also available for managing paging directly.
            #   result.each do |response|
            #     # Each element is of type ::Google::Cloud::Osconfig::V1beta::PatchJobInstanceDetails.
            #     p response
            #   end
            #
            def list_patch_job_instance_details request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Osconfig::V1beta::ListPatchJobInstanceDetailsRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_patch_job_instance_details.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Osconfig::V1beta::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.list_patch_job_instance_details.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_patch_job_instance_details.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @os_config_service_stub.call_rpc :list_patch_job_instance_details, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @os_config_service_stub, :list_patch_job_instance_details, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Create an OS Config patch deployment.
            #
            # @overload create_patch_deployment(request, options = nil)
            #   Pass arguments to `create_patch_deployment` via a request object, either of type
            #   {::Google::Cloud::Osconfig::V1beta::CreatePatchDeploymentRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Osconfig::V1beta::CreatePatchDeploymentRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload create_patch_deployment(parent: nil, patch_deployment_id: nil, patch_deployment: nil)
            #   Pass arguments to `create_patch_deployment` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The project to apply this patch deployment to in the form `projects/*`.
            #   @param patch_deployment_id [::String]
            #     Required. A name for the patch deployment in the project. When creating a name
            #     the following rules apply:
            #     * Must contain only lowercase letters, numbers, and hyphens.
            #     * Must start with a letter.
            #     * Must be between 1-63 characters.
            #     * Must end with a number or a letter.
            #     * Must be unique within the project.
            #   @param patch_deployment [::Google::Cloud::Osconfig::V1beta::PatchDeployment, ::Hash]
            #     Required. The patch deployment to create.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Osconfig::V1beta::PatchDeployment]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Osconfig::V1beta::PatchDeployment]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/osconfig/v1beta"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Osconfig::V1beta::OsConfigService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Osconfig::V1beta::CreatePatchDeploymentRequest.new
            #
            #   # Call the create_patch_deployment method.
            #   result = client.create_patch_deployment request
            #
            #   # The returned object is of type Google::Cloud::Osconfig::V1beta::PatchDeployment.
            #   p result
            #
            def create_patch_deployment request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Osconfig::V1beta::CreatePatchDeploymentRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.create_patch_deployment.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Osconfig::V1beta::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.create_patch_deployment.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.create_patch_deployment.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @os_config_service_stub.call_rpc :create_patch_deployment, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Get an OS Config patch deployment.
            #
            # @overload get_patch_deployment(request, options = nil)
            #   Pass arguments to `get_patch_deployment` via a request object, either of type
            #   {::Google::Cloud::Osconfig::V1beta::GetPatchDeploymentRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Osconfig::V1beta::GetPatchDeploymentRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_patch_deployment(name: nil)
            #   Pass arguments to `get_patch_deployment` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The resource name of the patch deployment in the form
            #     `projects/*/patchDeployments/*`.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Osconfig::V1beta::PatchDeployment]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Osconfig::V1beta::PatchDeployment]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/osconfig/v1beta"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Osconfig::V1beta::OsConfigService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Osconfig::V1beta::GetPatchDeploymentRequest.new
            #
            #   # Call the get_patch_deployment method.
            #   result = client.get_patch_deployment request
            #
            #   # The returned object is of type Google::Cloud::Osconfig::V1beta::PatchDeployment.
            #   p result
            #
            def get_patch_deployment request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Osconfig::V1beta::GetPatchDeploymentRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_patch_deployment.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Osconfig::V1beta::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.name
                header_params["name"] = request.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get_patch_deployment.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_patch_deployment.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @os_config_service_stub.call_rpc :get_patch_deployment, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Get a page of OS Config patch deployments.
            #
            # @overload list_patch_deployments(request, options = nil)
            #   Pass arguments to `list_patch_deployments` via a request object, either of type
            #   {::Google::Cloud::Osconfig::V1beta::ListPatchDeploymentsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Osconfig::V1beta::ListPatchDeploymentsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_patch_deployments(parent: nil, page_size: nil, page_token: nil)
            #   Pass arguments to `list_patch_deployments` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The resource name of the parent in the form `projects/*`.
            #   @param page_size [::Integer]
            #     Optional. The maximum number of patch deployments to return. Default is 100.
            #   @param page_token [::String]
            #     Optional. A pagination token returned from a previous call to ListPatchDeployments
            #     that indicates where this listing should continue from.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::Osconfig::V1beta::PatchDeployment>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Cloud::Osconfig::V1beta::PatchDeployment>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/osconfig/v1beta"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Osconfig::V1beta::OsConfigService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Osconfig::V1beta::ListPatchDeploymentsRequest.new
            #
            #   # Call the list_patch_deployments method.
            #   result = client.list_patch_deployments request
            #
            #   # The returned object is of type Gapic::PagedEnumerable. You can
            #   # iterate over all elements by calling #each, and the enumerable
            #   # will lazily make API calls to fetch subsequent pages. Other
            #   # methods are also available for managing paging directly.
            #   result.each do |response|
            #     # Each element is of type ::Google::Cloud::Osconfig::V1beta::PatchDeployment.
            #     p response
            #   end
            #
            def list_patch_deployments request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Osconfig::V1beta::ListPatchDeploymentsRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_patch_deployments.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Osconfig::V1beta::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.list_patch_deployments.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_patch_deployments.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @os_config_service_stub.call_rpc :list_patch_deployments, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @os_config_service_stub, :list_patch_deployments, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Delete an OS Config patch deployment.
            #
            # @overload delete_patch_deployment(request, options = nil)
            #   Pass arguments to `delete_patch_deployment` via a request object, either of type
            #   {::Google::Cloud::Osconfig::V1beta::DeletePatchDeploymentRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Osconfig::V1beta::DeletePatchDeploymentRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload delete_patch_deployment(name: nil)
            #   Pass arguments to `delete_patch_deployment` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The resource name of the patch deployment in the form
            #     `projects/*/patchDeployments/*`.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Protobuf::Empty]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Protobuf::Empty]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/osconfig/v1beta"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Osconfig::V1beta::OsConfigService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Osconfig::V1beta::DeletePatchDeploymentRequest.new
            #
            #   # Call the delete_patch_deployment method.
            #   result = client.delete_patch_deployment request
            #
            #   # The returned object is of type Google::Protobuf::Empty.
            #   p result
            #
            def delete_patch_deployment request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Osconfig::V1beta::DeletePatchDeploymentRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.delete_patch_deployment.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Osconfig::V1beta::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.name
                header_params["name"] = request.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.delete_patch_deployment.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.delete_patch_deployment.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @os_config_service_stub.call_rpc :delete_patch_deployment, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Create an OS Config guest policy.
            #
            # @overload create_guest_policy(request, options = nil)
            #   Pass arguments to `create_guest_policy` via a request object, either of type
            #   {::Google::Cloud::Osconfig::V1beta::CreateGuestPolicyRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Osconfig::V1beta::CreateGuestPolicyRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload create_guest_policy(parent: nil, guest_policy_id: nil, guest_policy: nil)
            #   Pass arguments to `create_guest_policy` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The resource name of the parent using one of the following forms:
            #     `projects/{project_number}`.
            #   @param guest_policy_id [::String]
            #     Required. The logical name of the guest policy in the project
            #     with the following restrictions:
            #
            #     * Must contain only lowercase letters, numbers, and hyphens.
            #     * Must start with a letter.
            #     * Must be between 1-63 characters.
            #     * Must end with a number or a letter.
            #     * Must be unique within the project.
            #   @param guest_policy [::Google::Cloud::Osconfig::V1beta::GuestPolicy, ::Hash]
            #     Required. The GuestPolicy to create.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Osconfig::V1beta::GuestPolicy]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Osconfig::V1beta::GuestPolicy]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/osconfig/v1beta"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Osconfig::V1beta::OsConfigService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Osconfig::V1beta::CreateGuestPolicyRequest.new
            #
            #   # Call the create_guest_policy method.
            #   result = client.create_guest_policy request
            #
            #   # The returned object is of type Google::Cloud::Osconfig::V1beta::GuestPolicy.
            #   p result
            #
            def create_guest_policy request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Osconfig::V1beta::CreateGuestPolicyRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.create_guest_policy.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Osconfig::V1beta::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.create_guest_policy.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.create_guest_policy.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @os_config_service_stub.call_rpc :create_guest_policy, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Get an OS Config guest policy.
            #
            # @overload get_guest_policy(request, options = nil)
            #   Pass arguments to `get_guest_policy` via a request object, either of type
            #   {::Google::Cloud::Osconfig::V1beta::GetGuestPolicyRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Osconfig::V1beta::GetGuestPolicyRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_guest_policy(name: nil)
            #   Pass arguments to `get_guest_policy` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The resource name of the guest policy using one of the following forms:
            #     `projects/{project_number}/guestPolicies/{guest_policy_id}`.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Osconfig::V1beta::GuestPolicy]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Osconfig::V1beta::GuestPolicy]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/osconfig/v1beta"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Osconfig::V1beta::OsConfigService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Osconfig::V1beta::GetGuestPolicyRequest.new
            #
            #   # Call the get_guest_policy method.
            #   result = client.get_guest_policy request
            #
            #   # The returned object is of type Google::Cloud::Osconfig::V1beta::GuestPolicy.
            #   p result
            #
            def get_guest_policy request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Osconfig::V1beta::GetGuestPolicyRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_guest_policy.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Osconfig::V1beta::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.name
                header_params["name"] = request.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get_guest_policy.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_guest_policy.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @os_config_service_stub.call_rpc :get_guest_policy, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Get a page of OS Config guest policies.
            #
            # @overload list_guest_policies(request, options = nil)
            #   Pass arguments to `list_guest_policies` via a request object, either of type
            #   {::Google::Cloud::Osconfig::V1beta::ListGuestPoliciesRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Osconfig::V1beta::ListGuestPoliciesRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_guest_policies(parent: nil, page_size: nil, page_token: nil)
            #   Pass arguments to `list_guest_policies` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The resource name of the parent using one of the following forms:
            #     `projects/{project_number}`.
            #   @param page_size [::Integer]
            #     The maximum number of guest policies to return.
            #   @param page_token [::String]
            #     A pagination token returned from a previous call to `ListGuestPolicies`
            #     that indicates where this listing should continue from.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::Osconfig::V1beta::GuestPolicy>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Cloud::Osconfig::V1beta::GuestPolicy>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/osconfig/v1beta"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Osconfig::V1beta::OsConfigService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Osconfig::V1beta::ListGuestPoliciesRequest.new
            #
            #   # Call the list_guest_policies method.
            #   result = client.list_guest_policies request
            #
            #   # The returned object is of type Gapic::PagedEnumerable. You can
            #   # iterate over all elements by calling #each, and the enumerable
            #   # will lazily make API calls to fetch subsequent pages. Other
            #   # methods are also available for managing paging directly.
            #   result.each do |response|
            #     # Each element is of type ::Google::Cloud::Osconfig::V1beta::GuestPolicy.
            #     p response
            #   end
            #
            def list_guest_policies request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Osconfig::V1beta::ListGuestPoliciesRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_guest_policies.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Osconfig::V1beta::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.list_guest_policies.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_guest_policies.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @os_config_service_stub.call_rpc :list_guest_policies, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @os_config_service_stub, :list_guest_policies, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Update an OS Config guest policy.
            #
            # @overload update_guest_policy(request, options = nil)
            #   Pass arguments to `update_guest_policy` via a request object, either of type
            #   {::Google::Cloud::Osconfig::V1beta::UpdateGuestPolicyRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Osconfig::V1beta::UpdateGuestPolicyRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload update_guest_policy(guest_policy: nil, update_mask: nil)
            #   Pass arguments to `update_guest_policy` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param guest_policy [::Google::Cloud::Osconfig::V1beta::GuestPolicy, ::Hash]
            #     Required. The updated GuestPolicy.
            #   @param update_mask [::Google::Protobuf::FieldMask, ::Hash]
            #     Field mask that controls which fields of the guest policy should be
            #     updated.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Osconfig::V1beta::GuestPolicy]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Osconfig::V1beta::GuestPolicy]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/osconfig/v1beta"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Osconfig::V1beta::OsConfigService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Osconfig::V1beta::UpdateGuestPolicyRequest.new
            #
            #   # Call the update_guest_policy method.
            #   result = client.update_guest_policy request
            #
            #   # The returned object is of type Google::Cloud::Osconfig::V1beta::GuestPolicy.
            #   p result
            #
            def update_guest_policy request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Osconfig::V1beta::UpdateGuestPolicyRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.update_guest_policy.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Osconfig::V1beta::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.guest_policy&.name
                header_params["guest_policy.name"] = request.guest_policy.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.update_guest_policy.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.update_guest_policy.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @os_config_service_stub.call_rpc :update_guest_policy, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Delete an OS Config guest policy.
            #
            # @overload delete_guest_policy(request, options = nil)
            #   Pass arguments to `delete_guest_policy` via a request object, either of type
            #   {::Google::Cloud::Osconfig::V1beta::DeleteGuestPolicyRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Osconfig::V1beta::DeleteGuestPolicyRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload delete_guest_policy(name: nil)
            #   Pass arguments to `delete_guest_policy` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The resource name of the guest policy  using one of the following forms:
            #     `projects/{project_number}/guestPolicies/{guest_policy_id}`.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Protobuf::Empty]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Protobuf::Empty]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/osconfig/v1beta"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Osconfig::V1beta::OsConfigService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Osconfig::V1beta::DeleteGuestPolicyRequest.new
            #
            #   # Call the delete_guest_policy method.
            #   result = client.delete_guest_policy request
            #
            #   # The returned object is of type Google::Protobuf::Empty.
            #   p result
            #
            def delete_guest_policy request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Osconfig::V1beta::DeleteGuestPolicyRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.delete_guest_policy.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Osconfig::V1beta::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.name
                header_params["name"] = request.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.delete_guest_policy.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.delete_guest_policy.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @os_config_service_stub.call_rpc :delete_guest_policy, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Lookup the effective guest policy that applies to a VM instance. This
            # lookup merges all policies that are assigned to the instance ancestry.
            #
            # @overload lookup_effective_guest_policy(request, options = nil)
            #   Pass arguments to `lookup_effective_guest_policy` via a request object, either of type
            #   {::Google::Cloud::Osconfig::V1beta::LookupEffectiveGuestPolicyRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Osconfig::V1beta::LookupEffectiveGuestPolicyRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload lookup_effective_guest_policy(instance: nil, os_short_name: nil, os_version: nil, os_architecture: nil)
            #   Pass arguments to `lookup_effective_guest_policy` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param instance [::String]
            #     Required. The VM instance whose policies are being looked up.
            #   @param os_short_name [::String]
            #     Short name of the OS running on the instance. The OS Config agent only
            #     provides this field for targeting if OS Inventory is enabled for that
            #     instance.
            #   @param os_version [::String]
            #     Version of the OS running on the instance. The OS Config agent only
            #     provides this field for targeting if OS Inventory is enabled for that
            #     VM instance.
            #   @param os_architecture [::String]
            #     Architecture of OS running on the instance. The OS Config agent only
            #     provides this field for targeting if OS Inventory is enabled for that
            #     instance.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Osconfig::V1beta::EffectiveGuestPolicy]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Osconfig::V1beta::EffectiveGuestPolicy]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/osconfig/v1beta"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Osconfig::V1beta::OsConfigService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Osconfig::V1beta::LookupEffectiveGuestPolicyRequest.new
            #
            #   # Call the lookup_effective_guest_policy method.
            #   result = client.lookup_effective_guest_policy request
            #
            #   # The returned object is of type Google::Cloud::Osconfig::V1beta::EffectiveGuestPolicy.
            #   p result
            #
            def lookup_effective_guest_policy request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Osconfig::V1beta::LookupEffectiveGuestPolicyRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.lookup_effective_guest_policy.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Osconfig::V1beta::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.instance
                header_params["instance"] = request.instance
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.lookup_effective_guest_policy.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.lookup_effective_guest_policy.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @os_config_service_stub.call_rpc :lookup_effective_guest_policy, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Configuration class for the OsConfigService API.
            #
            # This class represents the configuration for OsConfigService,
            # providing control over timeouts, retry behavior, logging, transport
            # parameters, and other low-level controls. Certain parameters can also be
            # applied individually to specific RPCs. See
            # {::Google::Cloud::Osconfig::V1beta::OsConfigService::Client::Configuration::Rpcs}
            # for a list of RPCs that can be configured independently.
            #
            # Configuration can be applied globally to all clients, or to a single client
            # on construction.
            #
            # @example
            #
            #   # Modify the global config, setting the timeout for
            #   # execute_patch_job to 20 seconds,
            #   # and all remaining timeouts to 10 seconds.
            #   ::Google::Cloud::Osconfig::V1beta::OsConfigService::Client.configure do |config|
            #     config.timeout = 10.0
            #     config.rpcs.execute_patch_job.timeout = 20.0
            #   end
            #
            #   # Apply the above configuration only to a new client.
            #   client = ::Google::Cloud::Osconfig::V1beta::OsConfigService::Client.new do |config|
            #     config.timeout = 10.0
            #     config.rpcs.execute_patch_job.timeout = 20.0
            #   end
            #
            # @!attribute [rw] endpoint
            #   The hostname or hostname:port of the service endpoint.
            #   Defaults to `"osconfig.googleapis.com"`.
            #   @return [::String]
            # @!attribute [rw] credentials
            #   Credentials to send with calls. You may provide any of the following types:
            #    *  (`String`) The path to a service account key file in JSON format
            #    *  (`Hash`) A service account key as a Hash
            #    *  (`Google::Auth::Credentials`) A googleauth credentials object
            #       (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
            #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
            #       (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
            #    *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
            #    *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
            #    *  (`nil`) indicating no credentials
            #   @return [::Object]
            # @!attribute [rw] scope
            #   The OAuth scopes
            #   @return [::Array<::String>]
            # @!attribute [rw] lib_name
            #   The library name as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] lib_version
            #   The library version as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] channel_args
            #   Extra parameters passed to the gRPC channel. Note: this is ignored if a
            #   `GRPC::Core::Channel` object is provided as the credential.
            #   @return [::Hash]
            # @!attribute [rw] interceptors
            #   An array of interceptors that are run before calls are executed.
            #   @return [::Array<::GRPC::ClientInterceptor>]
            # @!attribute [rw] timeout
            #   The call timeout in seconds.
            #   @return [::Numeric]
            # @!attribute [rw] metadata
            #   Additional gRPC headers to be sent with the call.
            #   @return [::Hash{::Symbol=>::String}]
            # @!attribute [rw] retry_policy
            #   The retry policy. The value is a hash with the following keys:
            #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
            #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
            #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
            #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
            #       trigger a retry.
            #   @return [::Hash]
            # @!attribute [rw] quota_project
            #   A separate project against which to charge quota.
            #   @return [::String]
            #
            class Configuration
              extend ::Gapic::Config

              config_attr :endpoint,      "osconfig.googleapis.com", ::String
              config_attr :credentials,   nil do |value|
                allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
                allowed += [::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials] if defined? ::GRPC
                allowed.any? { |klass| klass === value }
              end
              config_attr :scope,         nil, ::String, ::Array, nil
              config_attr :lib_name,      nil, ::String, nil
              config_attr :lib_version,   nil, ::String, nil
              config_attr(:channel_args,  { "grpc.service_config_disable_resolution" => 1 }, ::Hash, nil)
              config_attr :interceptors,  nil, ::Array, nil
              config_attr :timeout,       nil, ::Numeric, nil
              config_attr :metadata,      nil, ::Hash, nil
              config_attr :retry_policy,  nil, ::Hash, ::Proc, nil
              config_attr :quota_project, nil, ::String, nil

              # @private
              def initialize parent_config = nil
                @parent_config = parent_config unless parent_config.nil?

                yield self if block_given?
              end

              ##
              # Configurations for individual RPCs
              # @return [Rpcs]
              #
              def rpcs
                @rpcs ||= begin
                  parent_rpcs = nil
                  parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config.respond_to?(:rpcs)
                  Rpcs.new parent_rpcs
                end
              end

              ##
              # Configuration RPC class for the OsConfigService API.
              #
              # Includes fields providing the configuration for each RPC in this service.
              # Each configuration object is of type `Gapic::Config::Method` and includes
              # the following configuration fields:
              #
              #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
              #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
              #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
              #     include the following keys:
              #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
              #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
              #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
              #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
              #         trigger a retry.
              #
              class Rpcs
                ##
                # RPC-specific configuration for `execute_patch_job`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :execute_patch_job
                ##
                # RPC-specific configuration for `get_patch_job`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_patch_job
                ##
                # RPC-specific configuration for `cancel_patch_job`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :cancel_patch_job
                ##
                # RPC-specific configuration for `list_patch_jobs`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_patch_jobs
                ##
                # RPC-specific configuration for `list_patch_job_instance_details`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_patch_job_instance_details
                ##
                # RPC-specific configuration for `create_patch_deployment`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :create_patch_deployment
                ##
                # RPC-specific configuration for `get_patch_deployment`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_patch_deployment
                ##
                # RPC-specific configuration for `list_patch_deployments`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_patch_deployments
                ##
                # RPC-specific configuration for `delete_patch_deployment`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :delete_patch_deployment
                ##
                # RPC-specific configuration for `create_guest_policy`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :create_guest_policy
                ##
                # RPC-specific configuration for `get_guest_policy`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_guest_policy
                ##
                # RPC-specific configuration for `list_guest_policies`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_guest_policies
                ##
                # RPC-specific configuration for `update_guest_policy`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :update_guest_policy
                ##
                # RPC-specific configuration for `delete_guest_policy`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :delete_guest_policy
                ##
                # RPC-specific configuration for `lookup_effective_guest_policy`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :lookup_effective_guest_policy

                # @private
                def initialize parent_rpcs = nil
                  execute_patch_job_config = parent_rpcs.execute_patch_job if parent_rpcs.respond_to? :execute_patch_job
                  @execute_patch_job = ::Gapic::Config::Method.new execute_patch_job_config
                  get_patch_job_config = parent_rpcs.get_patch_job if parent_rpcs.respond_to? :get_patch_job
                  @get_patch_job = ::Gapic::Config::Method.new get_patch_job_config
                  cancel_patch_job_config = parent_rpcs.cancel_patch_job if parent_rpcs.respond_to? :cancel_patch_job
                  @cancel_patch_job = ::Gapic::Config::Method.new cancel_patch_job_config
                  list_patch_jobs_config = parent_rpcs.list_patch_jobs if parent_rpcs.respond_to? :list_patch_jobs
                  @list_patch_jobs = ::Gapic::Config::Method.new list_patch_jobs_config
                  list_patch_job_instance_details_config = parent_rpcs.list_patch_job_instance_details if parent_rpcs.respond_to? :list_patch_job_instance_details
                  @list_patch_job_instance_details = ::Gapic::Config::Method.new list_patch_job_instance_details_config
                  create_patch_deployment_config = parent_rpcs.create_patch_deployment if parent_rpcs.respond_to? :create_patch_deployment
                  @create_patch_deployment = ::Gapic::Config::Method.new create_patch_deployment_config
                  get_patch_deployment_config = parent_rpcs.get_patch_deployment if parent_rpcs.respond_to? :get_patch_deployment
                  @get_patch_deployment = ::Gapic::Config::Method.new get_patch_deployment_config
                  list_patch_deployments_config = parent_rpcs.list_patch_deployments if parent_rpcs.respond_to? :list_patch_deployments
                  @list_patch_deployments = ::Gapic::Config::Method.new list_patch_deployments_config
                  delete_patch_deployment_config = parent_rpcs.delete_patch_deployment if parent_rpcs.respond_to? :delete_patch_deployment
                  @delete_patch_deployment = ::Gapic::Config::Method.new delete_patch_deployment_config
                  create_guest_policy_config = parent_rpcs.create_guest_policy if parent_rpcs.respond_to? :create_guest_policy
                  @create_guest_policy = ::Gapic::Config::Method.new create_guest_policy_config
                  get_guest_policy_config = parent_rpcs.get_guest_policy if parent_rpcs.respond_to? :get_guest_policy
                  @get_guest_policy = ::Gapic::Config::Method.new get_guest_policy_config
                  list_guest_policies_config = parent_rpcs.list_guest_policies if parent_rpcs.respond_to? :list_guest_policies
                  @list_guest_policies = ::Gapic::Config::Method.new list_guest_policies_config
                  update_guest_policy_config = parent_rpcs.update_guest_policy if parent_rpcs.respond_to? :update_guest_policy
                  @update_guest_policy = ::Gapic::Config::Method.new update_guest_policy_config
                  delete_guest_policy_config = parent_rpcs.delete_guest_policy if parent_rpcs.respond_to? :delete_guest_policy
                  @delete_guest_policy = ::Gapic::Config::Method.new delete_guest_policy_config
                  lookup_effective_guest_policy_config = parent_rpcs.lookup_effective_guest_policy if parent_rpcs.respond_to? :lookup_effective_guest_policy
                  @lookup_effective_guest_policy = ::Gapic::Config::Method.new lookup_effective_guest_policy_config

                  yield self if block_given?
                end
              end
            end
          end
        end
      end
    end
  end
end
