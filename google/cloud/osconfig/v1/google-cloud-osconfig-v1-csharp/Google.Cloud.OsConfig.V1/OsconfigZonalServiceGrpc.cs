// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/osconfig/v1/osconfig_zonal_service.proto
// </auto-generated>
// Original file comments:
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.OsConfig.V1 {
  /// <summary>
  /// Zonal OS Config API
  ///
  /// The OS Config service is the server-side component that allows users to
  /// manage package installations and patch jobs for Compute Engine VM instances.
  /// </summary>
  public static partial class OsConfigZonalService
  {
    static readonly string __ServiceName = "google.cloud.osconfig.v1.OsConfigZonalService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Google.Cloud.OsConfig.V1.GetInventoryRequest> __Marshaller_google_cloud_osconfig_v1_GetInventoryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.OsConfig.V1.GetInventoryRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.OsConfig.V1.Inventory> __Marshaller_google_cloud_osconfig_v1_Inventory = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.OsConfig.V1.Inventory.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.OsConfig.V1.ListInventoriesRequest> __Marshaller_google_cloud_osconfig_v1_ListInventoriesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.OsConfig.V1.ListInventoriesRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.OsConfig.V1.ListInventoriesResponse> __Marshaller_google_cloud_osconfig_v1_ListInventoriesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.OsConfig.V1.ListInventoriesResponse.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.OsConfig.V1.GetVulnerabilityReportRequest> __Marshaller_google_cloud_osconfig_v1_GetVulnerabilityReportRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.OsConfig.V1.GetVulnerabilityReportRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.OsConfig.V1.VulnerabilityReport> __Marshaller_google_cloud_osconfig_v1_VulnerabilityReport = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.OsConfig.V1.VulnerabilityReport.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.OsConfig.V1.ListVulnerabilityReportsRequest> __Marshaller_google_cloud_osconfig_v1_ListVulnerabilityReportsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.OsConfig.V1.ListVulnerabilityReportsRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.OsConfig.V1.ListVulnerabilityReportsResponse> __Marshaller_google_cloud_osconfig_v1_ListVulnerabilityReportsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.OsConfig.V1.ListVulnerabilityReportsResponse.Parser));

    static readonly grpc::Method<global::Google.Cloud.OsConfig.V1.GetInventoryRequest, global::Google.Cloud.OsConfig.V1.Inventory> __Method_GetInventory = new grpc::Method<global::Google.Cloud.OsConfig.V1.GetInventoryRequest, global::Google.Cloud.OsConfig.V1.Inventory>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInventory",
        __Marshaller_google_cloud_osconfig_v1_GetInventoryRequest,
        __Marshaller_google_cloud_osconfig_v1_Inventory);

    static readonly grpc::Method<global::Google.Cloud.OsConfig.V1.ListInventoriesRequest, global::Google.Cloud.OsConfig.V1.ListInventoriesResponse> __Method_ListInventories = new grpc::Method<global::Google.Cloud.OsConfig.V1.ListInventoriesRequest, global::Google.Cloud.OsConfig.V1.ListInventoriesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListInventories",
        __Marshaller_google_cloud_osconfig_v1_ListInventoriesRequest,
        __Marshaller_google_cloud_osconfig_v1_ListInventoriesResponse);

    static readonly grpc::Method<global::Google.Cloud.OsConfig.V1.GetVulnerabilityReportRequest, global::Google.Cloud.OsConfig.V1.VulnerabilityReport> __Method_GetVulnerabilityReport = new grpc::Method<global::Google.Cloud.OsConfig.V1.GetVulnerabilityReportRequest, global::Google.Cloud.OsConfig.V1.VulnerabilityReport>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetVulnerabilityReport",
        __Marshaller_google_cloud_osconfig_v1_GetVulnerabilityReportRequest,
        __Marshaller_google_cloud_osconfig_v1_VulnerabilityReport);

    static readonly grpc::Method<global::Google.Cloud.OsConfig.V1.ListVulnerabilityReportsRequest, global::Google.Cloud.OsConfig.V1.ListVulnerabilityReportsResponse> __Method_ListVulnerabilityReports = new grpc::Method<global::Google.Cloud.OsConfig.V1.ListVulnerabilityReportsRequest, global::Google.Cloud.OsConfig.V1.ListVulnerabilityReportsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListVulnerabilityReports",
        __Marshaller_google_cloud_osconfig_v1_ListVulnerabilityReportsRequest,
        __Marshaller_google_cloud_osconfig_v1_ListVulnerabilityReportsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.OsConfig.V1.OsconfigZonalServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of OsConfigZonalService</summary>
    [grpc::BindServiceMethod(typeof(OsConfigZonalService), "BindService")]
    public abstract partial class OsConfigZonalServiceBase
    {
      /// <summary>
      /// Get inventory data for the specified VM instance. If the VM has no
      /// associated inventory, the message `NOT_FOUND` is returned.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.OsConfig.V1.Inventory> GetInventory(global::Google.Cloud.OsConfig.V1.GetInventoryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List inventory data for all VM instances in the specified zone.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.OsConfig.V1.ListInventoriesResponse> ListInventories(global::Google.Cloud.OsConfig.V1.ListInventoriesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the vulnerability report for the specified VM instance. Only VMs with
      /// inventory data have vulnerability reports associated with them.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.OsConfig.V1.VulnerabilityReport> GetVulnerabilityReport(global::Google.Cloud.OsConfig.V1.GetVulnerabilityReportRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List vulnerability reports for all VM instances in the specified zone.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.OsConfig.V1.ListVulnerabilityReportsResponse> ListVulnerabilityReports(global::Google.Cloud.OsConfig.V1.ListVulnerabilityReportsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for OsConfigZonalService</summary>
    public partial class OsConfigZonalServiceClient : grpc::ClientBase<OsConfigZonalServiceClient>
    {
      /// <summary>Creates a new client for OsConfigZonalService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public OsConfigZonalServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for OsConfigZonalService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public OsConfigZonalServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected OsConfigZonalServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected OsConfigZonalServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Get inventory data for the specified VM instance. If the VM has no
      /// associated inventory, the message `NOT_FOUND` is returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.OsConfig.V1.Inventory GetInventory(global::Google.Cloud.OsConfig.V1.GetInventoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInventory(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get inventory data for the specified VM instance. If the VM has no
      /// associated inventory, the message `NOT_FOUND` is returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.OsConfig.V1.Inventory GetInventory(global::Google.Cloud.OsConfig.V1.GetInventoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInventory, null, options, request);
      }
      /// <summary>
      /// Get inventory data for the specified VM instance. If the VM has no
      /// associated inventory, the message `NOT_FOUND` is returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.OsConfig.V1.Inventory> GetInventoryAsync(global::Google.Cloud.OsConfig.V1.GetInventoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInventoryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get inventory data for the specified VM instance. If the VM has no
      /// associated inventory, the message `NOT_FOUND` is returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.OsConfig.V1.Inventory> GetInventoryAsync(global::Google.Cloud.OsConfig.V1.GetInventoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInventory, null, options, request);
      }
      /// <summary>
      /// List inventory data for all VM instances in the specified zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.OsConfig.V1.ListInventoriesResponse ListInventories(global::Google.Cloud.OsConfig.V1.ListInventoriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListInventories(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List inventory data for all VM instances in the specified zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.OsConfig.V1.ListInventoriesResponse ListInventories(global::Google.Cloud.OsConfig.V1.ListInventoriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListInventories, null, options, request);
      }
      /// <summary>
      /// List inventory data for all VM instances in the specified zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.OsConfig.V1.ListInventoriesResponse> ListInventoriesAsync(global::Google.Cloud.OsConfig.V1.ListInventoriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListInventoriesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List inventory data for all VM instances in the specified zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.OsConfig.V1.ListInventoriesResponse> ListInventoriesAsync(global::Google.Cloud.OsConfig.V1.ListInventoriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListInventories, null, options, request);
      }
      /// <summary>
      /// Gets the vulnerability report for the specified VM instance. Only VMs with
      /// inventory data have vulnerability reports associated with them.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.OsConfig.V1.VulnerabilityReport GetVulnerabilityReport(global::Google.Cloud.OsConfig.V1.GetVulnerabilityReportRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVulnerabilityReport(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the vulnerability report for the specified VM instance. Only VMs with
      /// inventory data have vulnerability reports associated with them.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.OsConfig.V1.VulnerabilityReport GetVulnerabilityReport(global::Google.Cloud.OsConfig.V1.GetVulnerabilityReportRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetVulnerabilityReport, null, options, request);
      }
      /// <summary>
      /// Gets the vulnerability report for the specified VM instance. Only VMs with
      /// inventory data have vulnerability reports associated with them.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.OsConfig.V1.VulnerabilityReport> GetVulnerabilityReportAsync(global::Google.Cloud.OsConfig.V1.GetVulnerabilityReportRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVulnerabilityReportAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the vulnerability report for the specified VM instance. Only VMs with
      /// inventory data have vulnerability reports associated with them.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.OsConfig.V1.VulnerabilityReport> GetVulnerabilityReportAsync(global::Google.Cloud.OsConfig.V1.GetVulnerabilityReportRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetVulnerabilityReport, null, options, request);
      }
      /// <summary>
      /// List vulnerability reports for all VM instances in the specified zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.OsConfig.V1.ListVulnerabilityReportsResponse ListVulnerabilityReports(global::Google.Cloud.OsConfig.V1.ListVulnerabilityReportsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListVulnerabilityReports(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List vulnerability reports for all VM instances in the specified zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.OsConfig.V1.ListVulnerabilityReportsResponse ListVulnerabilityReports(global::Google.Cloud.OsConfig.V1.ListVulnerabilityReportsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListVulnerabilityReports, null, options, request);
      }
      /// <summary>
      /// List vulnerability reports for all VM instances in the specified zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.OsConfig.V1.ListVulnerabilityReportsResponse> ListVulnerabilityReportsAsync(global::Google.Cloud.OsConfig.V1.ListVulnerabilityReportsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListVulnerabilityReportsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List vulnerability reports for all VM instances in the specified zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.OsConfig.V1.ListVulnerabilityReportsResponse> ListVulnerabilityReportsAsync(global::Google.Cloud.OsConfig.V1.ListVulnerabilityReportsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListVulnerabilityReports, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override OsConfigZonalServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new OsConfigZonalServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(OsConfigZonalServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetInventory, serviceImpl.GetInventory)
          .AddMethod(__Method_ListInventories, serviceImpl.ListInventories)
          .AddMethod(__Method_GetVulnerabilityReport, serviceImpl.GetVulnerabilityReport)
          .AddMethod(__Method_ListVulnerabilityReports, serviceImpl.ListVulnerabilityReports).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, OsConfigZonalServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetInventory, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.OsConfig.V1.GetInventoryRequest, global::Google.Cloud.OsConfig.V1.Inventory>(serviceImpl.GetInventory));
      serviceBinder.AddMethod(__Method_ListInventories, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.OsConfig.V1.ListInventoriesRequest, global::Google.Cloud.OsConfig.V1.ListInventoriesResponse>(serviceImpl.ListInventories));
      serviceBinder.AddMethod(__Method_GetVulnerabilityReport, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.OsConfig.V1.GetVulnerabilityReportRequest, global::Google.Cloud.OsConfig.V1.VulnerabilityReport>(serviceImpl.GetVulnerabilityReport));
      serviceBinder.AddMethod(__Method_ListVulnerabilityReports, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.OsConfig.V1.ListVulnerabilityReportsRequest, global::Google.Cloud.OsConfig.V1.ListVulnerabilityReportsResponse>(serviceImpl.ListVulnerabilityReports));
    }

  }
}
#endregion
