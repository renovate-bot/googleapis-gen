// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/bigquery/v2/model.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Bigquery.V2 {

  /// <summary>Holder for reflection information generated from google/cloud/bigquery/v2/model.proto</summary>
  public static partial class ModelReflection {

    #region Descriptor
    /// <summary>File descriptor for google/cloud/bigquery/v2/model.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ModelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRnb29nbGUvY2xvdWQvYmlncXVlcnkvdjIvbW9kZWwucHJvdG8SGGdvb2ds",
            "ZS5jbG91ZC5iaWdxdWVyeS52MhoXZ29vZ2xlL2FwaS9jbGllbnQucHJvdG8a",
            "H2dvb2dsZS9hcGkvZmllbGRfYmVoYXZpb3IucHJvdG8aMGdvb2dsZS9jbG91",
            "ZC9iaWdxdWVyeS92Mi9lbmNyeXB0aW9uX2NvbmZpZy5wcm90bxouZ29vZ2xl",
            "L2Nsb3VkL2JpZ3F1ZXJ5L3YyL21vZGVsX3JlZmVyZW5jZS5wcm90bxorZ29v",
            "Z2xlL2Nsb3VkL2JpZ3F1ZXJ5L3YyL3N0YW5kYXJkX3NxbC5wcm90bxouZ29v",
            "Z2xlL2Nsb3VkL2JpZ3F1ZXJ5L3YyL3RhYmxlX3JlZmVyZW5jZS5wcm90bxob",
            "Z29vZ2xlL3Byb3RvYnVmL2VtcHR5LnByb3RvGh9nb29nbGUvcHJvdG9idWYv",
            "dGltZXN0YW1wLnByb3RvGh5nb29nbGUvcHJvdG9idWYvd3JhcHBlcnMucHJv",
            "dG8aHGdvb2dsZS9hcGkvYW5ub3RhdGlvbnMucHJvdG8ix18KBU1vZGVsEhEK",
            "BGV0YWcYASABKAlCA+BBAxJGCg9tb2RlbF9yZWZlcmVuY2UYAiABKAsyKC5n",
            "b29nbGUuY2xvdWQuYmlncXVlcnkudjIuTW9kZWxSZWZlcmVuY2VCA+BBAhIa",
            "Cg1jcmVhdGlvbl90aW1lGAUgASgDQgPgQQMSHwoSbGFzdF9tb2RpZmllZF90",
            "aW1lGAYgASgDQgPgQQMSGAoLZGVzY3JpcHRpb24YDCABKAlCA+BBARIaCg1m",
            "cmllbmRseV9uYW1lGA4gASgJQgPgQQESOwoGbGFiZWxzGA8gAygLMisuZ29v",
            "Z2xlLmNsb3VkLmJpZ3F1ZXJ5LnYyLk1vZGVsLkxhYmVsc0VudHJ5EhwKD2V4",
            "cGlyYXRpb25fdGltZRgQIAEoA0ID4EEBEhUKCGxvY2F0aW9uGA0gASgJQgPg",
            "QQMSUwoYZW5jcnlwdGlvbl9jb25maWd1cmF0aW9uGBEgASgLMjEuZ29vZ2xl",
            "LmNsb3VkLmJpZ3F1ZXJ5LnYyLkVuY3J5cHRpb25Db25maWd1cmF0aW9uEkIK",
            "Cm1vZGVsX3R5cGUYByABKA4yKS5nb29nbGUuY2xvdWQuYmlncXVlcnkudjIu",
            "TW9kZWwuTW9kZWxUeXBlQgPgQQMSRwoNdHJhaW5pbmdfcnVucxgJIAMoCzIr",
            "Lmdvb2dsZS5jbG91ZC5iaWdxdWVyeS52Mi5Nb2RlbC5UcmFpbmluZ1J1bkID",
            "4EEDEkgKD2ZlYXR1cmVfY29sdW1ucxgKIAMoCzIqLmdvb2dsZS5jbG91ZC5i",
            "aWdxdWVyeS52Mi5TdGFuZGFyZFNxbEZpZWxkQgPgQQMSRgoNbGFiZWxfY29s",
            "dW1ucxgLIAMoCzIqLmdvb2dsZS5jbG91ZC5iaWdxdWVyeS52Mi5TdGFuZGFy",
            "ZFNxbEZpZWxkQgPgQQMSGQoNYmVzdF90cmlhbF9pZBgTIAEoA0ICGAEaoAEK",
            "DlNlYXNvbmFsUGVyaW9kIo0BChJTZWFzb25hbFBlcmlvZFR5cGUSJAogU0VB",
            "U09OQUxfUEVSSU9EX1RZUEVfVU5TUEVDSUZJRUQQABISCg5OT19TRUFTT05B",
            "TElUWRABEgkKBURBSUxZEAISCgoGV0VFS0xZEAMSCwoHTU9OVEhMWRAEEg0K",
            "CVFVQVJURVJMWRAFEgoKBllFQVJMWRAGGocBCgtLbWVhbnNFbnVtcyJ4ChpL",
            "bWVhbnNJbml0aWFsaXphdGlvbk1ldGhvZBIsCihLTUVBTlNfSU5JVElBTEla",
            "QVRJT05fTUVUSE9EX1VOU1BFQ0lGSUVEEAASCgoGUkFORE9NEAESCgoGQ1VT",
            "VE9NEAISFAoQS01FQU5TX1BMVVNfUExVUxADGrQCChFSZWdyZXNzaW9uTWV0",
            "cmljcxI5ChNtZWFuX2Fic29sdXRlX2Vycm9yGAEgASgLMhwuZ29vZ2xlLnBy",
            "b3RvYnVmLkRvdWJsZVZhbHVlEjgKEm1lYW5fc3F1YXJlZF9lcnJvchgCIAEo",
            "CzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRI8ChZtZWFuX3NxdWFy",
            "ZWRfbG9nX2Vycm9yGAMgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZh",
            "bHVlEjsKFW1lZGlhbl9hYnNvbHV0ZV9lcnJvchgEIAEoCzIcLmdvb2dsZS5w",
            "cm90b2J1Zi5Eb3VibGVWYWx1ZRIvCglyX3NxdWFyZWQYBSABKAsyHC5nb29n",
            "bGUucHJvdG9idWYuRG91YmxlVmFsdWUa7wIKHkFnZ3JlZ2F0ZUNsYXNzaWZp",
            "Y2F0aW9uTWV0cmljcxIvCglwcmVjaXNpb24YASABKAsyHC5nb29nbGUucHJv",
            "dG9idWYuRG91YmxlVmFsdWUSLAoGcmVjYWxsGAIgASgLMhwuZ29vZ2xlLnBy",
            "b3RvYnVmLkRvdWJsZVZhbHVlEi4KCGFjY3VyYWN5GAMgASgLMhwuZ29vZ2xl",
            "LnByb3RvYnVmLkRvdWJsZVZhbHVlEi8KCXRocmVzaG9sZBgEIAEoCzIcLmdv",
            "b2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRIuCghmMV9zY29yZRgFIAEoCzIc",
            "Lmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRIuCghsb2dfbG9zcxgGIAEo",
            "CzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRItCgdyb2NfYXVjGAcg",
            "ASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlGp8GChtCaW5hcnlD",
            "bGFzc2lmaWNhdGlvbk1ldHJpY3MSaAogYWdncmVnYXRlX2NsYXNzaWZpY2F0",
            "aW9uX21ldHJpY3MYASABKAsyPi5nb29nbGUuY2xvdWQuYmlncXVlcnkudjIu",
            "TW9kZWwuQWdncmVnYXRlQ2xhc3NpZmljYXRpb25NZXRyaWNzEncKHGJpbmFy",
            "eV9jb25mdXNpb25fbWF0cml4X2xpc3QYAiADKAsyUS5nb29nbGUuY2xvdWQu",
            "YmlncXVlcnkudjIuTW9kZWwuQmluYXJ5Q2xhc3NpZmljYXRpb25NZXRyaWNz",
            "LkJpbmFyeUNvbmZ1c2lvbk1hdHJpeBIWCg5wb3NpdGl2ZV9sYWJlbBgDIAEo",
            "CRIWCg5uZWdhdGl2ZV9sYWJlbBgEIAEoCRrsAwoVQmluYXJ5Q29uZnVzaW9u",
            "TWF0cml4Ej4KGHBvc2l0aXZlX2NsYXNzX3RocmVzaG9sZBgBIAEoCzIcLmdv",
            "b2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRIzCg50cnVlX3Bvc2l0aXZlcxgC",
            "IAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEjQKD2ZhbHNlX3Bv",
            "c2l0aXZlcxgDIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEjMK",
            "DnRydWVfbmVnYXRpdmVzGAQgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0",
            "VmFsdWUSNAoPZmFsc2VfbmVnYXRpdmVzGAUgASgLMhsuZ29vZ2xlLnByb3Rv",
            "YnVmLkludDY0VmFsdWUSLwoJcHJlY2lzaW9uGAYgASgLMhwuZ29vZ2xlLnBy",
            "b3RvYnVmLkRvdWJsZVZhbHVlEiwKBnJlY2FsbBgHIAEoCzIcLmdvb2dsZS5w",
            "cm90b2J1Zi5Eb3VibGVWYWx1ZRIuCghmMV9zY29yZRgIIAEoCzIcLmdvb2ds",
            "ZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRIuCghhY2N1cmFjeRgJIAEoCzIcLmdv",
            "b2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRqHBQofTXVsdGlDbGFzc0NsYXNz",
            "aWZpY2F0aW9uTWV0cmljcxJoCiBhZ2dyZWdhdGVfY2xhc3NpZmljYXRpb25f",
            "bWV0cmljcxgBIAEoCzI+Lmdvb2dsZS5jbG91ZC5iaWdxdWVyeS52Mi5Nb2Rl",
            "bC5BZ2dyZWdhdGVDbGFzc2lmaWNhdGlvbk1ldHJpY3MSbgoVY29uZnVzaW9u",
            "X21hdHJpeF9saXN0GAIgAygLMk8uZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LnYy",
            "Lk1vZGVsLk11bHRpQ2xhc3NDbGFzc2lmaWNhdGlvbk1ldHJpY3MuQ29uZnVz",
            "aW9uTWF0cml4GokDCg9Db25mdXNpb25NYXRyaXgSOgoUY29uZmlkZW5jZV90",
            "aHJlc2hvbGQYASABKAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUS",
            "YQoEcm93cxgCIAMoCzJTLmdvb2dsZS5jbG91ZC5iaWdxdWVyeS52Mi5Nb2Rl",
            "bC5NdWx0aUNsYXNzQ2xhc3NpZmljYXRpb25NZXRyaWNzLkNvbmZ1c2lvbk1h",
            "dHJpeC5Sb3caUQoFRW50cnkSFwoPcHJlZGljdGVkX2xhYmVsGAEgASgJEi8K",
            "Cml0ZW1fY291bnQYAiABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1",
            "ZRqDAQoDUm93EhQKDGFjdHVhbF9sYWJlbBgBIAEoCRJmCgdlbnRyaWVzGAIg",
            "AygLMlUuZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LnYyLk1vZGVsLk11bHRpQ2xh",
            "c3NDbGFzc2lmaWNhdGlvbk1ldHJpY3MuQ29uZnVzaW9uTWF0cml4LkVudHJ5",
            "GssGChFDbHVzdGVyaW5nTWV0cmljcxI6ChRkYXZpZXNfYm91bGRpbl9pbmRl",
            "eBgBIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRI7ChVtZWFu",
            "X3NxdWFyZWRfZGlzdGFuY2UYAiABKAsyHC5nb29nbGUucHJvdG9idWYuRG91",
            "YmxlVmFsdWUSSwoIY2x1c3RlcnMYAyADKAsyOS5nb29nbGUuY2xvdWQuYmln",
            "cXVlcnkudjIuTW9kZWwuQ2x1c3RlcmluZ01ldHJpY3MuQ2x1c3RlchrvBAoH",
            "Q2x1c3RlchITCgtjZW50cm9pZF9pZBgBIAEoAxJeCg5mZWF0dXJlX3ZhbHVl",
            "cxgCIAMoCzJGLmdvb2dsZS5jbG91ZC5iaWdxdWVyeS52Mi5Nb2RlbC5DbHVz",
            "dGVyaW5nTWV0cmljcy5DbHVzdGVyLkZlYXR1cmVWYWx1ZRIqCgVjb3VudBgD",
            "IAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlGsIDCgxGZWF0dXJl",
            "VmFsdWUSFgoOZmVhdHVyZV9jb2x1bW4YASABKAkSNwoPbnVtZXJpY2FsX3Zh",
            "bHVlGAIgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlSAASdAoR",
            "Y2F0ZWdvcmljYWxfdmFsdWUYAyABKAsyVy5nb29nbGUuY2xvdWQuYmlncXVl",
            "cnkudjIuTW9kZWwuQ2x1c3RlcmluZ01ldHJpY3MuQ2x1c3Rlci5GZWF0dXJl",
            "VmFsdWUuQ2F0ZWdvcmljYWxWYWx1ZUgAGuEBChBDYXRlZ29yaWNhbFZhbHVl",
            "En4KD2NhdGVnb3J5X2NvdW50cxgBIAMoCzJlLmdvb2dsZS5jbG91ZC5iaWdx",
            "dWVyeS52Mi5Nb2RlbC5DbHVzdGVyaW5nTWV0cmljcy5DbHVzdGVyLkZlYXR1",
            "cmVWYWx1ZS5DYXRlZ29yaWNhbFZhbHVlLkNhdGVnb3J5Q291bnQaTQoNQ2F0",
            "ZWdvcnlDb3VudBIQCghjYXRlZ29yeRgBIAEoCRIqCgVjb3VudBgCIAEoCzIb",
            "Lmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlQgcKBXZhbHVlGokCCg5SYW5r",
            "aW5nTWV0cmljcxI8ChZtZWFuX2F2ZXJhZ2VfcHJlY2lzaW9uGAEgASgLMhwu",
            "Z29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEjgKEm1lYW5fc3F1YXJlZF9l",
            "cnJvchgCIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRJLCiVu",
            "b3JtYWxpemVkX2Rpc2NvdW50ZWRfY3VtdWxhdGl2ZV9nYWluGAMgASgLMhwu",
            "Z29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEjIKDGF2ZXJhZ2VfcmFuaxgE",
            "IAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRrpBwoXQXJpbWFG",
            "b3JlY2FzdGluZ01ldHJpY3MSSgoSbm9uX3NlYXNvbmFsX29yZGVyGAEgAygL",
            "MiouZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LnYyLk1vZGVsLkFyaW1hT3JkZXJC",
            "AhgBElYKFWFyaW1hX2ZpdHRpbmdfbWV0cmljcxgCIAMoCzIzLmdvb2dsZS5j",
            "bG91ZC5iaWdxdWVyeS52Mi5Nb2RlbC5BcmltYUZpdHRpbmdNZXRyaWNzQgIY",
            "ARJfChBzZWFzb25hbF9wZXJpb2RzGAMgAygOMkEuZ29vZ2xlLmNsb3VkLmJp",
            "Z3F1ZXJ5LnYyLk1vZGVsLlNlYXNvbmFsUGVyaW9kLlNlYXNvbmFsUGVyaW9k",
            "VHlwZUICGAESFQoJaGFzX2RyaWZ0GAQgAygIQgIYARIaCg50aW1lX3Nlcmll",
            "c19pZBgFIAMoCUICGAESigEKJmFyaW1hX3NpbmdsZV9tb2RlbF9mb3JlY2Fz",
            "dGluZ19tZXRyaWNzGAYgAygLMlouZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LnYy",
            "Lk1vZGVsLkFyaW1hRm9yZWNhc3RpbmdNZXRyaWNzLkFyaW1hU2luZ2xlTW9k",
            "ZWxGb3JlY2FzdGluZ01ldHJpY3MaiAQKIkFyaW1hU2luZ2xlTW9kZWxGb3Jl",
            "Y2FzdGluZ01ldHJpY3MSRgoSbm9uX3NlYXNvbmFsX29yZGVyGAEgASgLMiou",
            "Z29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LnYyLk1vZGVsLkFyaW1hT3JkZXISUgoV",
            "YXJpbWFfZml0dGluZ19tZXRyaWNzGAIgASgLMjMuZ29vZ2xlLmNsb3VkLmJp",
            "Z3F1ZXJ5LnYyLk1vZGVsLkFyaW1hRml0dGluZ01ldHJpY3MSEQoJaGFzX2Ry",
            "aWZ0GAMgASgIEhYKDnRpbWVfc2VyaWVzX2lkGAQgASgJEhcKD3RpbWVfc2Vy",
            "aWVzX2lkcxgJIAMoCRJbChBzZWFzb25hbF9wZXJpb2RzGAUgAygOMkEuZ29v",
            "Z2xlLmNsb3VkLmJpZ3F1ZXJ5LnYyLk1vZGVsLlNlYXNvbmFsUGVyaW9kLlNl",
            "YXNvbmFsUGVyaW9kVHlwZRI2ChJoYXNfaG9saWRheV9lZmZlY3QYBiABKAsy",
            "Gi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEjcKE2hhc19zcGlrZXNfYW5k",
            "X2RpcHMYByABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEjQKEGhh",
            "c19zdGVwX2NoYW5nZXMYCCABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZh",
            "bHVlGr4EChFFdmFsdWF0aW9uTWV0cmljcxJPChJyZWdyZXNzaW9uX21ldHJp",
            "Y3MYASABKAsyMS5nb29nbGUuY2xvdWQuYmlncXVlcnkudjIuTW9kZWwuUmVn",
            "cmVzc2lvbk1ldHJpY3NIABJkCh1iaW5hcnlfY2xhc3NpZmljYXRpb25fbWV0",
            "cmljcxgCIAEoCzI7Lmdvb2dsZS5jbG91ZC5iaWdxdWVyeS52Mi5Nb2RlbC5C",
            "aW5hcnlDbGFzc2lmaWNhdGlvbk1ldHJpY3NIABJtCiJtdWx0aV9jbGFzc19j",
            "bGFzc2lmaWNhdGlvbl9tZXRyaWNzGAMgASgLMj8uZ29vZ2xlLmNsb3VkLmJp",
            "Z3F1ZXJ5LnYyLk1vZGVsLk11bHRpQ2xhc3NDbGFzc2lmaWNhdGlvbk1ldHJp",
            "Y3NIABJPChJjbHVzdGVyaW5nX21ldHJpY3MYBCABKAsyMS5nb29nbGUuY2xv",
            "dWQuYmlncXVlcnkudjIuTW9kZWwuQ2x1c3RlcmluZ01ldHJpY3NIABJJCg9y",
            "YW5raW5nX21ldHJpY3MYBSABKAsyLi5nb29nbGUuY2xvdWQuYmlncXVlcnku",
            "djIuTW9kZWwuUmFua2luZ01ldHJpY3NIABJcChlhcmltYV9mb3JlY2FzdGlu",
            "Z19tZXRyaWNzGAYgASgLMjcuZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LnYyLk1v",
            "ZGVsLkFyaW1hRm9yZWNhc3RpbmdNZXRyaWNzSABCCQoHbWV0cmljcxqXAQoP",
            "RGF0YVNwbGl0UmVzdWx0EkAKDnRyYWluaW5nX3RhYmxlGAEgASgLMiguZ29v",
            "Z2xlLmNsb3VkLmJpZ3F1ZXJ5LnYyLlRhYmxlUmVmZXJlbmNlEkIKEGV2YWx1",
            "YXRpb25fdGFibGUYAiABKAsyKC5nb29nbGUuY2xvdWQuYmlncXVlcnkudjIu",
            "VGFibGVSZWZlcmVuY2UaLQoKQXJpbWFPcmRlchIJCgFwGAEgASgDEgkKAWQY",
            "AiABKAMSCQoBcRgDIAEoAxpMChNBcmltYUZpdHRpbmdNZXRyaWNzEhYKDmxv",
            "Z19saWtlbGlob29kGAEgASgBEgsKA2FpYxgCIAEoARIQCgh2YXJpYW5jZRgD",
            "IAEoARrVAQoRR2xvYmFsRXhwbGFuYXRpb24SUwoMZXhwbGFuYXRpb25zGAEg",
            "AygLMj0uZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LnYyLk1vZGVsLkdsb2JhbEV4",
            "cGxhbmF0aW9uLkV4cGxhbmF0aW9uEhMKC2NsYXNzX2xhYmVsGAIgASgJGlYK",
            "C0V4cGxhbmF0aW9uEhQKDGZlYXR1cmVfbmFtZRgBIAEoCRIxCgthdHRyaWJ1",
            "dGlvbhgCIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRrnIAoL",
            "VHJhaW5pbmdSdW4SVQoQdHJhaW5pbmdfb3B0aW9ucxgBIAEoCzI7Lmdvb2ds",
            "ZS5jbG91ZC5iaWdxdWVyeS52Mi5Nb2RlbC5UcmFpbmluZ1J1bi5UcmFpbmlu",
            "Z09wdGlvbnMSLgoKc3RhcnRfdGltZRgIIAEoCzIaLmdvb2dsZS5wcm90b2J1",
            "Zi5UaW1lc3RhbXASTAoHcmVzdWx0cxgGIAMoCzI7Lmdvb2dsZS5jbG91ZC5i",
            "aWdxdWVyeS52Mi5Nb2RlbC5UcmFpbmluZ1J1bi5JdGVyYXRpb25SZXN1bHQS",
            "TQoSZXZhbHVhdGlvbl9tZXRyaWNzGAcgASgLMjEuZ29vZ2xlLmNsb3VkLmJp",
            "Z3F1ZXJ5LnYyLk1vZGVsLkV2YWx1YXRpb25NZXRyaWNzEkoKEWRhdGFfc3Bs",
            "aXRfcmVzdWx0GAkgASgLMi8uZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LnYyLk1v",
            "ZGVsLkRhdGFTcGxpdFJlc3VsdBJOChNnbG9iYWxfZXhwbGFuYXRpb25zGAog",
            "AygLMjEuZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LnYyLk1vZGVsLkdsb2JhbEV4",
            "cGxhbmF0aW9uGpIRCg9UcmFpbmluZ09wdGlvbnMSFgoObWF4X2l0ZXJhdGlv",
            "bnMYASABKAMSOwoJbG9zc190eXBlGAIgASgOMiguZ29vZ2xlLmNsb3VkLmJp",
            "Z3F1ZXJ5LnYyLk1vZGVsLkxvc3NUeXBlEhIKCmxlYXJuX3JhdGUYAyABKAES",
            "NwoRbDFfcmVndWxhcml6YXRpb24YBCABKAsyHC5nb29nbGUucHJvdG9idWYu",
            "RG91YmxlVmFsdWUSNwoRbDJfcmVndWxhcml6YXRpb24YBSABKAsyHC5nb29n",
            "bGUucHJvdG9idWYuRG91YmxlVmFsdWUSOwoVbWluX3JlbGF0aXZlX3Byb2dy",
            "ZXNzGAYgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEi4KCndh",
            "cm1fc3RhcnQYByABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEi4K",
            "CmVhcmx5X3N0b3AYCCABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVl",
            "EhsKE2lucHV0X2xhYmVsX2NvbHVtbnMYCSADKAkSSgoRZGF0YV9zcGxpdF9t",
            "ZXRob2QYCiABKA4yLy5nb29nbGUuY2xvdWQuYmlncXVlcnkudjIuTW9kZWwu",
            "RGF0YVNwbGl0TWV0aG9kEiAKGGRhdGFfc3BsaXRfZXZhbF9mcmFjdGlvbhgL",
            "IAEoARIZChFkYXRhX3NwbGl0X2NvbHVtbhgMIAEoCRJOChNsZWFybl9yYXRl",
            "X3N0cmF0ZWd5GA0gASgOMjEuZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LnYyLk1v",
            "ZGVsLkxlYXJuUmF0ZVN0cmF0ZWd5EhoKEmluaXRpYWxfbGVhcm5fcmF0ZRgQ",
            "IAEoARJvChNsYWJlbF9jbGFzc193ZWlnaHRzGBEgAygLMlIuZ29vZ2xlLmNs",
            "b3VkLmJpZ3F1ZXJ5LnYyLk1vZGVsLlRyYWluaW5nUnVuLlRyYWluaW5nT3B0",
            "aW9ucy5MYWJlbENsYXNzV2VpZ2h0c0VudHJ5EhMKC3VzZXJfY29sdW1uGBIg",
            "ASgJEhMKC2l0ZW1fY29sdW1uGBMgASgJEkMKDWRpc3RhbmNlX3R5cGUYFCAB",
            "KA4yLC5nb29nbGUuY2xvdWQuYmlncXVlcnkudjIuTW9kZWwuRGlzdGFuY2VU",
            "eXBlEhQKDG51bV9jbHVzdGVycxgVIAEoAxIRCgltb2RlbF91cmkYFiABKAkS",
            "UwoVb3B0aW1pemF0aW9uX3N0cmF0ZWd5GBcgASgOMjQuZ29vZ2xlLmNsb3Vk",
            "LmJpZ3F1ZXJ5LnYyLk1vZGVsLk9wdGltaXphdGlvblN0cmF0ZWd5EhQKDGhp",
            "ZGRlbl91bml0cxgYIAMoAxISCgpiYXRjaF9zaXplGBkgASgDEi0KB2Ryb3Bv",
            "dXQYGiABKAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSFgoObWF4",
            "X3RyZWVfZGVwdGgYGyABKAMSEQoJc3Vic2FtcGxlGBwgASgBEjQKDm1pbl9z",
            "cGxpdF9sb3NzGB0gASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVl",
            "EhMKC251bV9mYWN0b3JzGB4gASgDEkMKDWZlZWRiYWNrX3R5cGUYHyABKA4y",
            "LC5nb29nbGUuY2xvdWQuYmlncXVlcnkudjIuTW9kZWwuRmVlZGJhY2tUeXBl",
            "EjAKCndhbHNfYWxwaGEYICABKAsyHC5nb29nbGUucHJvdG9idWYuRG91Ymxl",
            "VmFsdWUSbAoca21lYW5zX2luaXRpYWxpemF0aW9uX21ldGhvZBghIAEoDjJG",
            "Lmdvb2dsZS5jbG91ZC5iaWdxdWVyeS52Mi5Nb2RlbC5LbWVhbnNFbnVtcy5L",
            "bWVhbnNJbml0aWFsaXphdGlvbk1ldGhvZBIkChxrbWVhbnNfaW5pdGlhbGl6",
            "YXRpb25fY29sdW1uGCIgASgJEiQKHHRpbWVfc2VyaWVzX3RpbWVzdGFtcF9j",
            "b2x1bW4YIyABKAkSHwoXdGltZV9zZXJpZXNfZGF0YV9jb2x1bW4YJCABKAkS",
            "EgoKYXV0b19hcmltYRglIAEoCBJGChJub25fc2Vhc29uYWxfb3JkZXIYJiAB",
            "KAsyKi5nb29nbGUuY2xvdWQuYmlncXVlcnkudjIuTW9kZWwuQXJpbWFPcmRl",
            "chJFCg5kYXRhX2ZyZXF1ZW5jeRgnIAEoDjItLmdvb2dsZS5jbG91ZC5iaWdx",
            "dWVyeS52Mi5Nb2RlbC5EYXRhRnJlcXVlbmN5EhUKDWluY2x1ZGVfZHJpZnQY",
            "KSABKAgSRQoOaG9saWRheV9yZWdpb24YKiABKA4yLS5nb29nbGUuY2xvdWQu",
            "YmlncXVlcnkudjIuTW9kZWwuSG9saWRheVJlZ2lvbhIdChV0aW1lX3Nlcmll",
            "c19pZF9jb2x1bW4YKyABKAkSHgoWdGltZV9zZXJpZXNfaWRfY29sdW1ucxgz",
            "IAMoCRIPCgdob3Jpem9uGCwgASgDEh4KFnByZXNlcnZlX2lucHV0X3N0cnVj",
            "dHMYLSABKAgSHAoUYXV0b19hcmltYV9tYXhfb3JkZXIYLiABKAMSOQoVZGVj",
            "b21wb3NlX3RpbWVfc2VyaWVzGDIgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJv",
            "b2xWYWx1ZRI5ChVjbGVhbl9zcGlrZXNfYW5kX2RpcHMYNCABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuQm9vbFZhbHVlEjcKE2FkanVzdF9zdGVwX2NoYW5nZXMY",
            "NSABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlGjgKFkxhYmVsQ2xh",
            "c3NXZWlnaHRzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgBOgI4",
            "ARqCDAoPSXRlcmF0aW9uUmVzdWx0EioKBWluZGV4GAEgASgLMhsuZ29vZ2xl",
            "LnByb3RvYnVmLkludDMyVmFsdWUSMAoLZHVyYXRpb25fbXMYBCABKAsyGy5n",
            "b29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRIzCg10cmFpbmluZ19sb3NzGAUg",
            "ASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEi8KCWV2YWxfbG9z",
            "cxgGIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRISCgpsZWFy",
            "bl9yYXRlGAcgASgBEl4KDWNsdXN0ZXJfaW5mb3MYCCADKAsyRy5nb29nbGUu",
            "Y2xvdWQuYmlncXVlcnkudjIuTW9kZWwuVHJhaW5pbmdSdW4uSXRlcmF0aW9u",
            "UmVzdWx0LkNsdXN0ZXJJbmZvEl0KDGFyaW1hX3Jlc3VsdBgJIAEoCzJHLmdv",
            "b2dsZS5jbG91ZC5iaWdxdWVyeS52Mi5Nb2RlbC5UcmFpbmluZ1J1bi5JdGVy",
            "YXRpb25SZXN1bHQuQXJpbWFSZXN1bHQaiwEKC0NsdXN0ZXJJbmZvEhMKC2Nl",
            "bnRyb2lkX2lkGAEgASgDEjQKDmNsdXN0ZXJfcmFkaXVzGAIgASgLMhwuZ29v",
            "Z2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEjEKDGNsdXN0ZXJfc2l6ZRgDIAEo",
            "CzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlGskHCgtBcmltYVJlc3Vs",
            "dBJwChBhcmltYV9tb2RlbF9pbmZvGAEgAygLMlYuZ29vZ2xlLmNsb3VkLmJp",
            "Z3F1ZXJ5LnYyLk1vZGVsLlRyYWluaW5nUnVuLkl0ZXJhdGlvblJlc3VsdC5B",
            "cmltYVJlc3VsdC5BcmltYU1vZGVsSW5mbxJbChBzZWFzb25hbF9wZXJpb2Rz",
            "GAIgAygOMkEuZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LnYyLk1vZGVsLlNlYXNv",
            "bmFsUGVyaW9kLlNlYXNvbmFsUGVyaW9kVHlwZRp9ChFBcmltYUNvZWZmaWNp",
            "ZW50cxIkChxhdXRvX3JlZ3Jlc3NpdmVfY29lZmZpY2llbnRzGAEgAygBEiMK",
            "G21vdmluZ19hdmVyYWdlX2NvZWZmaWNpZW50cxgCIAMoARIdChVpbnRlcmNl",
            "cHRfY29lZmZpY2llbnQYAyABKAEa6wQKDkFyaW1hTW9kZWxJbmZvEkYKEm5v",
            "bl9zZWFzb25hbF9vcmRlchgBIAEoCzIqLmdvb2dsZS5jbG91ZC5iaWdxdWVy",
            "eS52Mi5Nb2RlbC5BcmltYU9yZGVyEnUKEmFyaW1hX2NvZWZmaWNpZW50cxgC",
            "IAEoCzJZLmdvb2dsZS5jbG91ZC5iaWdxdWVyeS52Mi5Nb2RlbC5UcmFpbmlu",
            "Z1J1bi5JdGVyYXRpb25SZXN1bHQuQXJpbWFSZXN1bHQuQXJpbWFDb2VmZmlj",
            "aWVudHMSUgoVYXJpbWFfZml0dGluZ19tZXRyaWNzGAMgASgLMjMuZ29vZ2xl",
            "LmNsb3VkLmJpZ3F1ZXJ5LnYyLk1vZGVsLkFyaW1hRml0dGluZ01ldHJpY3MS",
            "EQoJaGFzX2RyaWZ0GAQgASgIEhYKDnRpbWVfc2VyaWVzX2lkGAUgASgJEhcK",
            "D3RpbWVfc2VyaWVzX2lkcxgKIAMoCRJbChBzZWFzb25hbF9wZXJpb2RzGAYg",
            "AygOMkEuZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LnYyLk1vZGVsLlNlYXNvbmFs",
            "UGVyaW9kLlNlYXNvbmFsUGVyaW9kVHlwZRI2ChJoYXNfaG9saWRheV9lZmZl",
            "Y3QYByABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEjcKE2hhc19z",
            "cGlrZXNfYW5kX2RpcHMYCCABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZh",
            "bHVlEjQKEGhhc19zdGVwX2NoYW5nZXMYCSABKAsyGi5nb29nbGUucHJvdG9i",
            "dWYuQm9vbFZhbHVlGi0KC0xhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2",
            "YWx1ZRgCIAEoCToCOAEitQIKCU1vZGVsVHlwZRIaChZNT0RFTF9UWVBFX1VO",
            "U1BFQ0lGSUVEEAASFQoRTElORUFSX1JFR1JFU1NJT04QARIXChNMT0dJU1RJ",
            "Q19SRUdSRVNTSU9OEAISCgoGS01FQU5TEAMSGAoUTUFUUklYX0ZBQ1RPUkla",
            "QVRJT04QBBISCg5ETk5fQ0xBU1NJRklFUhAFEg4KClRFTlNPUkZMT1cQBhIR",
            "Cg1ETk5fUkVHUkVTU09SEAcSGgoWQk9PU1RFRF9UUkVFX1JFR1JFU1NPUhAJ",
            "EhsKF0JPT1NURURfVFJFRV9DTEFTU0lGSUVSEAoSCQoFQVJJTUEQCxIUChBB",
            "VVRPTUxfUkVHUkVTU09SEAwSFQoRQVVUT01MX0NMQVNTSUZJRVIQDRIOCgpB",
            "UklNQV9QTFVTEBMiTwoITG9zc1R5cGUSGQoVTE9TU19UWVBFX1VOU1BFQ0lG",
            "SUVEEAASFQoRTUVBTl9TUVVBUkVEX0xPU1MQARIRCg1NRUFOX0xPR19MT1NT",
            "EAIiSAoMRGlzdGFuY2VUeXBlEh0KGURJU1RBTkNFX1RZUEVfVU5TUEVDSUZJ",
            "RUQQABINCglFVUNMSURFQU4QARIKCgZDT1NJTkUQAiJ6Cg9EYXRhU3BsaXRN",
            "ZXRob2QSIQodREFUQV9TUExJVF9NRVRIT0RfVU5TUEVDSUZJRUQQABIKCgZS",
            "QU5ET00QARIKCgZDVVNUT00QAhIOCgpTRVFVRU5USUFMEAMSDAoITk9fU1BM",
            "SVQQBBIOCgpBVVRPX1NQTElUEAUingEKDURhdGFGcmVxdWVuY3kSHgoaREFU",
            "QV9GUkVRVUVOQ1lfVU5TUEVDSUZJRUQQABISCg5BVVRPX0ZSRVFVRU5DWRAB",
            "EgoKBllFQVJMWRACEg0KCVFVQVJURVJMWRADEgsKB01PTlRITFkQBBIKCgZX",
            "RUVLTFkQBRIJCgVEQUlMWRAGEgoKBkhPVVJMWRAHEg4KClBFUl9NSU5VVEUQ",
            "CCLZBAoNSG9saWRheVJlZ2lvbhIeChpIT0xJREFZX1JFR0lPTl9VTlNQRUNJ",
            "RklFRBAAEgoKBkdMT0JBTBABEgYKAk5BEAISCQoFSkFQQUMQAxIICgRFTUVB",
            "EAQSBwoDTEFDEAUSBgoCQUUQBhIGCgJBUhAHEgYKAkFUEAgSBgoCQVUQCRIG",
            "CgJCRRAKEgYKAkJSEAsSBgoCQ0EQDBIGCgJDSBANEgYKAkNMEA4SBgoCQ04Q",
            "DxIGCgJDTxAQEgYKAkNTEBESBgoCQ1oQEhIGCgJERRATEgYKAkRLEBQSBgoC",
            "RFoQFRIGCgJFQxAWEgYKAkVFEBcSBgoCRUcQGBIGCgJFUxAZEgYKAkZJEBoS",
            "BgoCRlIQGxIGCgJHQhAcEgYKAkdSEB0SBgoCSEsQHhIGCgJIVRAfEgYKAklE",
            "ECASBgoCSUUQIRIGCgJJTBAiEgYKAklOECMSBgoCSVIQJBIGCgJJVBAlEgYK",
            "AkpQECYSBgoCS1IQJxIGCgJMVhAoEgYKAk1BECkSBgoCTVgQKhIGCgJNWRAr",
            "EgYKAk5HECwSBgoCTkwQLRIGCgJOTxAuEgYKAk5aEC8SBgoCUEUQMBIGCgJQ",
            "SBAxEgYKAlBLEDISBgoCUEwQMxIGCgJQVBA0EgYKAlJPEDUSBgoCUlMQNhIG",
            "CgJSVRA3EgYKAlNBEDgSBgoCU0UQORIGCgJTRxA6EgYKAlNJEDsSBgoCU0sQ",
            "PBIGCgJUSBA9EgYKAlRSED4SBgoCVFcQPxIGCgJVQRBAEgYKAlVTEEESBgoC",
            "VkUQQhIGCgJWThBDEgYKAlpBEEQiVwoRTGVhcm5SYXRlU3RyYXRlZ3kSIwof",
            "TEVBUk5fUkFURV9TVFJBVEVHWV9VTlNQRUNJRklFRBAAEg8KC0xJTkVfU0VB",
            "UkNIEAESDAoIQ09OU1RBTlQQAiJuChRPcHRpbWl6YXRpb25TdHJhdGVneRIl",
            "CiFPUFRJTUlaQVRJT05fU1RSQVRFR1lfVU5TUEVDSUZJRUQQABIaChZCQVRD",
            "SF9HUkFESUVOVF9ERVNDRU5UEAESEwoPTk9STUFMX0VRVUFUSU9OEAIiSQoM",
            "RmVlZGJhY2tUeXBlEh0KGUZFRURCQUNLX1RZUEVfVU5TUEVDSUZJRUQQABIM",
            "CghJTVBMSUNJVBABEgwKCEVYUExJQ0lUEAIiWgoPR2V0TW9kZWxSZXF1ZXN0",
            "EhcKCnByb2plY3RfaWQYASABKAlCA+BBAhIXCgpkYXRhc2V0X2lkGAIgASgJ",
            "QgPgQQISFQoIbW9kZWxfaWQYAyABKAlCA+BBAiKRAQoRUGF0Y2hNb2RlbFJl",
            "cXVlc3QSFwoKcHJvamVjdF9pZBgBIAEoCUID4EECEhcKCmRhdGFzZXRfaWQY",
            "AiABKAlCA+BBAhIVCghtb2RlbF9pZBgDIAEoCUID4EECEjMKBW1vZGVsGAQg",
            "ASgLMh8uZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LnYyLk1vZGVsQgPgQQIiXQoS",
            "RGVsZXRlTW9kZWxSZXF1ZXN0EhcKCnByb2plY3RfaWQYASABKAlCA+BBAhIX",
            "CgpkYXRhc2V0X2lkGAIgASgJQgPgQQISFQoIbW9kZWxfaWQYAyABKAlCA+BB",
            "AiKMAQoRTGlzdE1vZGVsc1JlcXVlc3QSFwoKcHJvamVjdF9pZBgBIAEoCUID",
            "4EECEhcKCmRhdGFzZXRfaWQYAiABKAlCA+BBAhIxCgttYXhfcmVzdWx0cxgD",
            "IAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5VSW50MzJWYWx1ZRISCgpwYWdlX3Rv",
            "a2VuGAQgASgJIl4KEkxpc3RNb2RlbHNSZXNwb25zZRIvCgZtb2RlbHMYASAD",
            "KAsyHy5nb29nbGUuY2xvdWQuYmlncXVlcnkudjIuTW9kZWwSFwoPbmV4dF9w",
            "YWdlX3Rva2VuGAIgASgJMtcICgxNb2RlbFNlcnZpY2US0QEKCEdldE1vZGVs",
            "EikuZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LnYyLkdldE1vZGVsUmVxdWVzdBof",
            "Lmdvb2dsZS5jbG91ZC5iaWdxdWVyeS52Mi5Nb2RlbCJ5gtPkkwJSElAvYmln",
            "cXVlcnkvdjIvcHJvamVjdHMve3Byb2plY3RfaWQ9Kn0vZGF0YXNldHMve2Rh",
            "dGFzZXRfaWQ9Kn0vbW9kZWxzL3ttb2RlbF9pZD0qfdpBHnByb2plY3RfaWQs",
            "ZGF0YXNldF9pZCxtb2RlbF9pZBLYAQoKTGlzdE1vZGVscxIrLmdvb2dsZS5j",
            "bG91ZC5iaWdxdWVyeS52Mi5MaXN0TW9kZWxzUmVxdWVzdBosLmdvb2dsZS5j",
            "bG91ZC5iaWdxdWVyeS52Mi5MaXN0TW9kZWxzUmVzcG9uc2Uib4LT5JMCRRJD",
            "L2JpZ3F1ZXJ5L3YyL3Byb2plY3RzL3twcm9qZWN0X2lkPSp9L2RhdGFzZXRz",
            "L3tkYXRhc2V0X2lkPSp9L21vZGVsc9pBIXByb2plY3RfaWQsZGF0YXNldF9p",
            "ZCxtYXhfcmVzdWx0cxLjAQoKUGF0Y2hNb2RlbBIrLmdvb2dsZS5jbG91ZC5i",
            "aWdxdWVyeS52Mi5QYXRjaE1vZGVsUmVxdWVzdBofLmdvb2dsZS5jbG91ZC5i",
            "aWdxdWVyeS52Mi5Nb2RlbCKGAYLT5JMCWTJQL2JpZ3F1ZXJ5L3YyL3Byb2pl",
            "Y3RzL3twcm9qZWN0X2lkPSp9L2RhdGFzZXRzL3tkYXRhc2V0X2lkPSp9L21v",
            "ZGVscy97bW9kZWxfaWQ9Kn06BW1vZGVs2kEkcHJvamVjdF9pZCxkYXRhc2V0",
            "X2lkLG1vZGVsX2lkLG1vZGVsEs4BCgtEZWxldGVNb2RlbBIsLmdvb2dsZS5j",
            "bG91ZC5iaWdxdWVyeS52Mi5EZWxldGVNb2RlbFJlcXVlc3QaFi5nb29nbGUu",
            "cHJvdG9idWYuRW1wdHkieYLT5JMCUipQL2JpZ3F1ZXJ5L3YyL3Byb2plY3Rz",
            "L3twcm9qZWN0X2lkPSp9L2RhdGFzZXRzL3tkYXRhc2V0X2lkPSp9L21vZGVs",
            "cy97bW9kZWxfaWQ9Kn3aQR5wcm9qZWN0X2lkLGRhdGFzZXRfaWQsbW9kZWxf",
            "aWQa4AHKQRdiaWdxdWVyeS5nb29nbGVhcGlzLmNvbdJBwgFodHRwczovL3d3",
            "dy5nb29nbGVhcGlzLmNvbS9hdXRoL2JpZ3F1ZXJ5LGh0dHBzOi8vd3d3Lmdv",
            "b2dsZWFwaXMuY29tL2F1dGgvYmlncXVlcnkucmVhZG9ubHksaHR0cHM6Ly93",
            "d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9jbG91ZC1wbGF0Zm9ybSxodHRwczov",
            "L3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2Nsb3VkLXBsYXRmb3JtLnJlYWQt",
            "b25seUJsChxjb20uZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LnYyQgpNb2RlbFBy",
            "b3RvWkBnb29nbGUuZ29sYW5nLm9yZy9nZW5wcm90by9nb29nbGVhcGlzL2Ns",
            "b3VkL2JpZ3F1ZXJ5L3YyO2JpZ3F1ZXJ5YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.ClientReflection.Descriptor, global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Cloud.Bigquery.V2.EncryptionConfigReflection.Descriptor, global::Google.Cloud.Bigquery.V2.ModelReferenceReflection.Descriptor, global::Google.Cloud.Bigquery.V2.StandardSqlReflection.Descriptor, global::Google.Cloud.Bigquery.V2.TableReferenceReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model), global::Google.Cloud.Bigquery.V2.Model.Parser, new[]{ "Etag", "ModelReference", "CreationTime", "LastModifiedTime", "Description", "FriendlyName", "Labels", "ExpirationTime", "Location", "EncryptionConfiguration", "ModelType", "TrainingRuns", "FeatureColumns", "LabelColumns", "BestTrialId" }, null, new[]{ typeof(global::Google.Cloud.Bigquery.V2.Model.Types.ModelType), typeof(global::Google.Cloud.Bigquery.V2.Model.Types.LossType), typeof(global::Google.Cloud.Bigquery.V2.Model.Types.DistanceType), typeof(global::Google.Cloud.Bigquery.V2.Model.Types.DataSplitMethod), typeof(global::Google.Cloud.Bigquery.V2.Model.Types.DataFrequency), typeof(global::Google.Cloud.Bigquery.V2.Model.Types.HolidayRegion), typeof(global::Google.Cloud.Bigquery.V2.Model.Types.LearnRateStrategy), typeof(global::Google.Cloud.Bigquery.V2.Model.Types.OptimizationStrategy), typeof(global::Google.Cloud.Bigquery.V2.Model.Types.FeedbackType) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model.Types.SeasonalPeriod), global::Google.Cloud.Bigquery.V2.Model.Types.SeasonalPeriod.Parser, null, null, new[]{ typeof(global::Google.Cloud.Bigquery.V2.Model.Types.SeasonalPeriod.Types.SeasonalPeriodType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model.Types.KmeansEnums), global::Google.Cloud.Bigquery.V2.Model.Types.KmeansEnums.Parser, null, null, new[]{ typeof(global::Google.Cloud.Bigquery.V2.Model.Types.KmeansEnums.Types.KmeansInitializationMethod) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model.Types.RegressionMetrics), global::Google.Cloud.Bigquery.V2.Model.Types.RegressionMetrics.Parser, new[]{ "MeanAbsoluteError", "MeanSquaredError", "MeanSquaredLogError", "MedianAbsoluteError", "RSquared" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model.Types.AggregateClassificationMetrics), global::Google.Cloud.Bigquery.V2.Model.Types.AggregateClassificationMetrics.Parser, new[]{ "Precision", "Recall", "Accuracy", "Threshold", "F1Score", "LogLoss", "RocAuc" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model.Types.BinaryClassificationMetrics), global::Google.Cloud.Bigquery.V2.Model.Types.BinaryClassificationMetrics.Parser, new[]{ "AggregateClassificationMetrics", "BinaryConfusionMatrixList", "PositiveLabel", "NegativeLabel" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model.Types.BinaryClassificationMetrics.Types.BinaryConfusionMatrix), global::Google.Cloud.Bigquery.V2.Model.Types.BinaryClassificationMetrics.Types.BinaryConfusionMatrix.Parser, new[]{ "PositiveClassThreshold", "TruePositives", "FalsePositives", "TrueNegatives", "FalseNegatives", "Precision", "Recall", "F1Score", "Accuracy" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics), global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics.Parser, new[]{ "AggregateClassificationMetrics", "ConfusionMatrixList" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics.Types.ConfusionMatrix), global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics.Types.ConfusionMatrix.Parser, new[]{ "ConfidenceThreshold", "Rows" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics.Types.ConfusionMatrix.Types.Entry), global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics.Types.ConfusionMatrix.Types.Entry.Parser, new[]{ "PredictedLabel", "ItemCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics.Types.ConfusionMatrix.Types.Row), global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics.Types.ConfusionMatrix.Types.Row.Parser, new[]{ "ActualLabel", "Entries" }, null, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics), global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Parser, new[]{ "DaviesBouldinIndex", "MeanSquaredDistance", "Clusters" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster), global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster.Parser, new[]{ "CentroidId", "FeatureValues", "Count" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster.Types.FeatureValue), global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster.Types.FeatureValue.Parser, new[]{ "FeatureColumn", "NumericalValue", "CategoricalValue" }, new[]{ "Value" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster.Types.FeatureValue.Types.CategoricalValue), global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster.Types.FeatureValue.Types.CategoricalValue.Parser, new[]{ "CategoryCounts" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster.Types.FeatureValue.Types.CategoricalValue.Types.CategoryCount), global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster.Types.FeatureValue.Types.CategoricalValue.Types.CategoryCount.Parser, new[]{ "Category", "Count" }, null, null, null, null)})})})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model.Types.RankingMetrics), global::Google.Cloud.Bigquery.V2.Model.Types.RankingMetrics.Parser, new[]{ "MeanAveragePrecision", "MeanSquaredError", "NormalizedDiscountedCumulativeGain", "AverageRank" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model.Types.ArimaForecastingMetrics), global::Google.Cloud.Bigquery.V2.Model.Types.ArimaForecastingMetrics.Parser, new[]{ "NonSeasonalOrder", "ArimaFittingMetrics", "SeasonalPeriods", "HasDrift", "TimeSeriesId", "ArimaSingleModelForecastingMetrics" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model.Types.ArimaForecastingMetrics.Types.ArimaSingleModelForecastingMetrics), global::Google.Cloud.Bigquery.V2.Model.Types.ArimaForecastingMetrics.Types.ArimaSingleModelForecastingMetrics.Parser, new[]{ "NonSeasonalOrder", "ArimaFittingMetrics", "HasDrift", "TimeSeriesId", "TimeSeriesIds", "SeasonalPeriods", "HasHolidayEffect", "HasSpikesAndDips", "HasStepChanges" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model.Types.EvaluationMetrics), global::Google.Cloud.Bigquery.V2.Model.Types.EvaluationMetrics.Parser, new[]{ "RegressionMetrics", "BinaryClassificationMetrics", "MultiClassClassificationMetrics", "ClusteringMetrics", "RankingMetrics", "ArimaForecastingMetrics" }, new[]{ "Metrics" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model.Types.DataSplitResult), global::Google.Cloud.Bigquery.V2.Model.Types.DataSplitResult.Parser, new[]{ "TrainingTable", "EvaluationTable" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model.Types.ArimaOrder), global::Google.Cloud.Bigquery.V2.Model.Types.ArimaOrder.Parser, new[]{ "P", "D", "Q" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model.Types.ArimaFittingMetrics), global::Google.Cloud.Bigquery.V2.Model.Types.ArimaFittingMetrics.Parser, new[]{ "LogLikelihood", "Aic", "Variance" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model.Types.GlobalExplanation), global::Google.Cloud.Bigquery.V2.Model.Types.GlobalExplanation.Parser, new[]{ "Explanations", "ClassLabel" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model.Types.GlobalExplanation.Types.Explanation), global::Google.Cloud.Bigquery.V2.Model.Types.GlobalExplanation.Types.Explanation.Parser, new[]{ "FeatureName", "Attribution" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun), global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Parser, new[]{ "TrainingOptions", "StartTime", "Results", "EvaluationMetrics", "DataSplitResult", "GlobalExplanations" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.TrainingOptions), global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.TrainingOptions.Parser, new[]{ "MaxIterations", "LossType", "LearnRate", "L1Regularization", "L2Regularization", "MinRelativeProgress", "WarmStart", "EarlyStop", "InputLabelColumns", "DataSplitMethod", "DataSplitEvalFraction", "DataSplitColumn", "LearnRateStrategy", "InitialLearnRate", "LabelClassWeights", "UserColumn", "ItemColumn", "DistanceType", "NumClusters", "ModelUri", "OptimizationStrategy", "HiddenUnits", "BatchSize", "Dropout", "MaxTreeDepth", "Subsample", "MinSplitLoss", "NumFactors", "FeedbackType", "WalsAlpha", "KmeansInitializationMethod", "KmeansInitializationColumn", "TimeSeriesTimestampColumn", "TimeSeriesDataColumn", "AutoArima", "NonSeasonalOrder", "DataFrequency", "IncludeDrift", "HolidayRegion", "TimeSeriesIdColumn", "TimeSeriesIdColumns", "Horizon", "PreserveInputStructs", "AutoArimaMaxOrder", "DecomposeTimeSeries", "CleanSpikesAndDips", "AdjustStepChanges" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult), global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Parser, new[]{ "Index", "DurationMs", "TrainingLoss", "EvalLoss", "LearnRate", "ClusterInfos", "ArimaResult" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Types.ClusterInfo), global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Types.ClusterInfo.Parser, new[]{ "CentroidId", "ClusterRadius", "ClusterSize" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Types.ArimaResult), global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Types.ArimaResult.Parser, new[]{ "ArimaModelInfo", "SeasonalPeriods" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Types.ArimaResult.Types.ArimaCoefficients), global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Types.ArimaResult.Types.ArimaCoefficients.Parser, new[]{ "AutoRegressiveCoefficients", "MovingAverageCoefficients", "InterceptCoefficient" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Types.ArimaResult.Types.ArimaModelInfo), global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Types.ArimaResult.Types.ArimaModelInfo.Parser, new[]{ "NonSeasonalOrder", "ArimaCoefficients", "ArimaFittingMetrics", "HasDrift", "TimeSeriesId", "TimeSeriesIds", "SeasonalPeriods", "HasHolidayEffect", "HasSpikesAndDips", "HasStepChanges" }, null, null, null, null)})})}),
            null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.GetModelRequest), global::Google.Cloud.Bigquery.V2.GetModelRequest.Parser, new[]{ "ProjectId", "DatasetId", "ModelId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.PatchModelRequest), global::Google.Cloud.Bigquery.V2.PatchModelRequest.Parser, new[]{ "ProjectId", "DatasetId", "ModelId", "Model" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.DeleteModelRequest), global::Google.Cloud.Bigquery.V2.DeleteModelRequest.Parser, new[]{ "ProjectId", "DatasetId", "ModelId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.ListModelsRequest), global::Google.Cloud.Bigquery.V2.ListModelsRequest.Parser, new[]{ "ProjectId", "DatasetId", "MaxResults", "PageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.ListModelsResponse), global::Google.Cloud.Bigquery.V2.ListModelsResponse.Parser, new[]{ "Models", "NextPageToken" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Model : pb::IMessage<Model>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Model> _parser = new pb::MessageParser<Model>(() => new Model());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Model> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Bigquery.V2.ModelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Model() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Model(Model other) : this() {
      etag_ = other.etag_;
      modelReference_ = other.modelReference_ != null ? other.modelReference_.Clone() : null;
      creationTime_ = other.creationTime_;
      lastModifiedTime_ = other.lastModifiedTime_;
      description_ = other.description_;
      friendlyName_ = other.friendlyName_;
      labels_ = other.labels_.Clone();
      expirationTime_ = other.expirationTime_;
      location_ = other.location_;
      encryptionConfiguration_ = other.encryptionConfiguration_ != null ? other.encryptionConfiguration_.Clone() : null;
      modelType_ = other.modelType_;
      trainingRuns_ = other.trainingRuns_.Clone();
      featureColumns_ = other.featureColumns_.Clone();
      labelColumns_ = other.labelColumns_.Clone();
      bestTrialId_ = other.bestTrialId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Model Clone() {
      return new Model(this);
    }

    /// <summary>Field number for the "etag" field.</summary>
    public const int EtagFieldNumber = 1;
    private string etag_ = "";
    /// <summary>
    /// Output only. A hash of this resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Etag {
      get { return etag_; }
      set {
        etag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_reference" field.</summary>
    public const int ModelReferenceFieldNumber = 2;
    private global::Google.Cloud.Bigquery.V2.ModelReference modelReference_;
    /// <summary>
    /// Required. Unique identifier for this model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Bigquery.V2.ModelReference ModelReference {
      get { return modelReference_; }
      set {
        modelReference_ = value;
      }
    }

    /// <summary>Field number for the "creation_time" field.</summary>
    public const int CreationTimeFieldNumber = 5;
    private long creationTime_;
    /// <summary>
    /// Output only. The time when this model was created, in millisecs since the epoch.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreationTime {
      get { return creationTime_; }
      set {
        creationTime_ = value;
      }
    }

    /// <summary>Field number for the "last_modified_time" field.</summary>
    public const int LastModifiedTimeFieldNumber = 6;
    private long lastModifiedTime_;
    /// <summary>
    /// Output only. The time when this model was last modified, in millisecs since the epoch.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastModifiedTime {
      get { return lastModifiedTime_; }
      set {
        lastModifiedTime_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 12;
    private string description_ = "";
    /// <summary>
    /// Optional. A user-friendly description of this model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "friendly_name" field.</summary>
    public const int FriendlyNameFieldNumber = 14;
    private string friendlyName_ = "";
    /// <summary>
    /// Optional. A descriptive name for this model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FriendlyName {
      get { return friendlyName_; }
      set {
        friendlyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 15;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 122);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// The labels associated with this model. You can use these to organize
    /// and group your models. Label keys and values can be no longer
    /// than 63 characters, can only contain lowercase letters, numeric
    /// characters, underscores and dashes. International characters are allowed.
    /// Label values are optional. Label keys must start with a letter and each
    /// label in the list must have a different key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "expiration_time" field.</summary>
    public const int ExpirationTimeFieldNumber = 16;
    private long expirationTime_;
    /// <summary>
    /// Optional. The time when this model expires, in milliseconds since the epoch.
    /// If not present, the model will persist indefinitely. Expired models
    /// will be deleted and their storage reclaimed.  The defaultTableExpirationMs
    /// property of the encapsulating dataset can be used to set a default
    /// expirationTime on newly created models.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpirationTime {
      get { return expirationTime_; }
      set {
        expirationTime_ = value;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 13;
    private string location_ = "";
    /// <summary>
    /// Output only. The geographic location where the model resides. This value
    /// is inherited from the dataset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryption_configuration" field.</summary>
    public const int EncryptionConfigurationFieldNumber = 17;
    private global::Google.Cloud.Bigquery.V2.EncryptionConfiguration encryptionConfiguration_;
    /// <summary>
    /// Custom encryption configuration (e.g., Cloud KMS keys). This shows the
    /// encryption configuration of the model data while stored in BigQuery
    /// storage. This field can be used with PatchModel to update encryption key
    /// for an already encrypted model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Bigquery.V2.EncryptionConfiguration EncryptionConfiguration {
      get { return encryptionConfiguration_; }
      set {
        encryptionConfiguration_ = value;
      }
    }

    /// <summary>Field number for the "model_type" field.</summary>
    public const int ModelTypeFieldNumber = 7;
    private global::Google.Cloud.Bigquery.V2.Model.Types.ModelType modelType_ = global::Google.Cloud.Bigquery.V2.Model.Types.ModelType.Unspecified;
    /// <summary>
    /// Output only. Type of the model resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Bigquery.V2.Model.Types.ModelType ModelType {
      get { return modelType_; }
      set {
        modelType_ = value;
      }
    }

    /// <summary>Field number for the "training_runs" field.</summary>
    public const int TrainingRunsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun> _repeated_trainingRuns_codec
        = pb::FieldCodec.ForMessage(74, global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun> trainingRuns_ = new pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun>();
    /// <summary>
    /// Output only. Information for all training runs in increasing order of start_time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun> TrainingRuns {
      get { return trainingRuns_; }
    }

    /// <summary>Field number for the "feature_columns" field.</summary>
    public const int FeatureColumnsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Google.Cloud.Bigquery.V2.StandardSqlField> _repeated_featureColumns_codec
        = pb::FieldCodec.ForMessage(82, global::Google.Cloud.Bigquery.V2.StandardSqlField.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.StandardSqlField> featureColumns_ = new pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.StandardSqlField>();
    /// <summary>
    /// Output only. Input feature columns that were used to train this model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.StandardSqlField> FeatureColumns {
      get { return featureColumns_; }
    }

    /// <summary>Field number for the "label_columns" field.</summary>
    public const int LabelColumnsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Google.Cloud.Bigquery.V2.StandardSqlField> _repeated_labelColumns_codec
        = pb::FieldCodec.ForMessage(90, global::Google.Cloud.Bigquery.V2.StandardSqlField.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.StandardSqlField> labelColumns_ = new pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.StandardSqlField>();
    /// <summary>
    /// Output only. Label columns that were used to train this model.
    /// The output of the model will have a "predicted_" prefix to these columns.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.StandardSqlField> LabelColumns {
      get { return labelColumns_; }
    }

    /// <summary>Field number for the "best_trial_id" field.</summary>
    public const int BestTrialIdFieldNumber = 19;
    private long bestTrialId_;
    /// <summary>
    /// The best trial_id across all training runs.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BestTrialId {
      get { return bestTrialId_; }
      set {
        bestTrialId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Model);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Model other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Etag != other.Etag) return false;
      if (!object.Equals(ModelReference, other.ModelReference)) return false;
      if (CreationTime != other.CreationTime) return false;
      if (LastModifiedTime != other.LastModifiedTime) return false;
      if (Description != other.Description) return false;
      if (FriendlyName != other.FriendlyName) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (ExpirationTime != other.ExpirationTime) return false;
      if (Location != other.Location) return false;
      if (!object.Equals(EncryptionConfiguration, other.EncryptionConfiguration)) return false;
      if (ModelType != other.ModelType) return false;
      if(!trainingRuns_.Equals(other.trainingRuns_)) return false;
      if(!featureColumns_.Equals(other.featureColumns_)) return false;
      if(!labelColumns_.Equals(other.labelColumns_)) return false;
      if (BestTrialId != other.BestTrialId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Etag.Length != 0) hash ^= Etag.GetHashCode();
      if (modelReference_ != null) hash ^= ModelReference.GetHashCode();
      if (CreationTime != 0L) hash ^= CreationTime.GetHashCode();
      if (LastModifiedTime != 0L) hash ^= LastModifiedTime.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (FriendlyName.Length != 0) hash ^= FriendlyName.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (ExpirationTime != 0L) hash ^= ExpirationTime.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (encryptionConfiguration_ != null) hash ^= EncryptionConfiguration.GetHashCode();
      if (ModelType != global::Google.Cloud.Bigquery.V2.Model.Types.ModelType.Unspecified) hash ^= ModelType.GetHashCode();
      hash ^= trainingRuns_.GetHashCode();
      hash ^= featureColumns_.GetHashCode();
      hash ^= labelColumns_.GetHashCode();
      if (BestTrialId != 0L) hash ^= BestTrialId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Etag.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Etag);
      }
      if (modelReference_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ModelReference);
      }
      if (CreationTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CreationTime);
      }
      if (LastModifiedTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(LastModifiedTime);
      }
      if (ModelType != global::Google.Cloud.Bigquery.V2.Model.Types.ModelType.Unspecified) {
        output.WriteRawTag(56);
        output.WriteEnum((int) ModelType);
      }
      trainingRuns_.WriteTo(output, _repeated_trainingRuns_codec);
      featureColumns_.WriteTo(output, _repeated_featureColumns_codec);
      labelColumns_.WriteTo(output, _repeated_labelColumns_codec);
      if (Description.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Description);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Location);
      }
      if (FriendlyName.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(FriendlyName);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (ExpirationTime != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(ExpirationTime);
      }
      if (encryptionConfiguration_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(EncryptionConfiguration);
      }
      if (BestTrialId != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(BestTrialId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Etag.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Etag);
      }
      if (modelReference_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ModelReference);
      }
      if (CreationTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CreationTime);
      }
      if (LastModifiedTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(LastModifiedTime);
      }
      if (ModelType != global::Google.Cloud.Bigquery.V2.Model.Types.ModelType.Unspecified) {
        output.WriteRawTag(56);
        output.WriteEnum((int) ModelType);
      }
      trainingRuns_.WriteTo(ref output, _repeated_trainingRuns_codec);
      featureColumns_.WriteTo(ref output, _repeated_featureColumns_codec);
      labelColumns_.WriteTo(ref output, _repeated_labelColumns_codec);
      if (Description.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Description);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Location);
      }
      if (FriendlyName.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(FriendlyName);
      }
      labels_.WriteTo(ref output, _map_labels_codec);
      if (ExpirationTime != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(ExpirationTime);
      }
      if (encryptionConfiguration_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(EncryptionConfiguration);
      }
      if (BestTrialId != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(BestTrialId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Etag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Etag);
      }
      if (modelReference_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModelReference);
      }
      if (CreationTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreationTime);
      }
      if (LastModifiedTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastModifiedTime);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (FriendlyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FriendlyName);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (ExpirationTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ExpirationTime);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (encryptionConfiguration_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EncryptionConfiguration);
      }
      if (ModelType != global::Google.Cloud.Bigquery.V2.Model.Types.ModelType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ModelType);
      }
      size += trainingRuns_.CalculateSize(_repeated_trainingRuns_codec);
      size += featureColumns_.CalculateSize(_repeated_featureColumns_codec);
      size += labelColumns_.CalculateSize(_repeated_labelColumns_codec);
      if (BestTrialId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BestTrialId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Model other) {
      if (other == null) {
        return;
      }
      if (other.Etag.Length != 0) {
        Etag = other.Etag;
      }
      if (other.modelReference_ != null) {
        if (modelReference_ == null) {
          ModelReference = new global::Google.Cloud.Bigquery.V2.ModelReference();
        }
        ModelReference.MergeFrom(other.ModelReference);
      }
      if (other.CreationTime != 0L) {
        CreationTime = other.CreationTime;
      }
      if (other.LastModifiedTime != 0L) {
        LastModifiedTime = other.LastModifiedTime;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.FriendlyName.Length != 0) {
        FriendlyName = other.FriendlyName;
      }
      labels_.Add(other.labels_);
      if (other.ExpirationTime != 0L) {
        ExpirationTime = other.ExpirationTime;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.encryptionConfiguration_ != null) {
        if (encryptionConfiguration_ == null) {
          EncryptionConfiguration = new global::Google.Cloud.Bigquery.V2.EncryptionConfiguration();
        }
        EncryptionConfiguration.MergeFrom(other.EncryptionConfiguration);
      }
      if (other.ModelType != global::Google.Cloud.Bigquery.V2.Model.Types.ModelType.Unspecified) {
        ModelType = other.ModelType;
      }
      trainingRuns_.Add(other.trainingRuns_);
      featureColumns_.Add(other.featureColumns_);
      labelColumns_.Add(other.labelColumns_);
      if (other.BestTrialId != 0L) {
        BestTrialId = other.BestTrialId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Etag = input.ReadString();
            break;
          }
          case 18: {
            if (modelReference_ == null) {
              ModelReference = new global::Google.Cloud.Bigquery.V2.ModelReference();
            }
            input.ReadMessage(ModelReference);
            break;
          }
          case 40: {
            CreationTime = input.ReadInt64();
            break;
          }
          case 48: {
            LastModifiedTime = input.ReadInt64();
            break;
          }
          case 56: {
            ModelType = (global::Google.Cloud.Bigquery.V2.Model.Types.ModelType) input.ReadEnum();
            break;
          }
          case 74: {
            trainingRuns_.AddEntriesFrom(input, _repeated_trainingRuns_codec);
            break;
          }
          case 82: {
            featureColumns_.AddEntriesFrom(input, _repeated_featureColumns_codec);
            break;
          }
          case 90: {
            labelColumns_.AddEntriesFrom(input, _repeated_labelColumns_codec);
            break;
          }
          case 98: {
            Description = input.ReadString();
            break;
          }
          case 106: {
            Location = input.ReadString();
            break;
          }
          case 114: {
            FriendlyName = input.ReadString();
            break;
          }
          case 122: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 128: {
            ExpirationTime = input.ReadInt64();
            break;
          }
          case 138: {
            if (encryptionConfiguration_ == null) {
              EncryptionConfiguration = new global::Google.Cloud.Bigquery.V2.EncryptionConfiguration();
            }
            input.ReadMessage(EncryptionConfiguration);
            break;
          }
          case 152: {
            BestTrialId = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Etag = input.ReadString();
            break;
          }
          case 18: {
            if (modelReference_ == null) {
              ModelReference = new global::Google.Cloud.Bigquery.V2.ModelReference();
            }
            input.ReadMessage(ModelReference);
            break;
          }
          case 40: {
            CreationTime = input.ReadInt64();
            break;
          }
          case 48: {
            LastModifiedTime = input.ReadInt64();
            break;
          }
          case 56: {
            ModelType = (global::Google.Cloud.Bigquery.V2.Model.Types.ModelType) input.ReadEnum();
            break;
          }
          case 74: {
            trainingRuns_.AddEntriesFrom(ref input, _repeated_trainingRuns_codec);
            break;
          }
          case 82: {
            featureColumns_.AddEntriesFrom(ref input, _repeated_featureColumns_codec);
            break;
          }
          case 90: {
            labelColumns_.AddEntriesFrom(ref input, _repeated_labelColumns_codec);
            break;
          }
          case 98: {
            Description = input.ReadString();
            break;
          }
          case 106: {
            Location = input.ReadString();
            break;
          }
          case 114: {
            FriendlyName = input.ReadString();
            break;
          }
          case 122: {
            labels_.AddEntriesFrom(ref input, _map_labels_codec);
            break;
          }
          case 128: {
            ExpirationTime = input.ReadInt64();
            break;
          }
          case 138: {
            if (encryptionConfiguration_ == null) {
              EncryptionConfiguration = new global::Google.Cloud.Bigquery.V2.EncryptionConfiguration();
            }
            input.ReadMessage(EncryptionConfiguration);
            break;
          }
          case 152: {
            BestTrialId = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Model message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Indicates the type of the Model.
      /// </summary>
      public enum ModelType {
        [pbr::OriginalName("MODEL_TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Linear regression model.
        /// </summary>
        [pbr::OriginalName("LINEAR_REGRESSION")] LinearRegression = 1,
        /// <summary>
        /// Logistic regression based classification model.
        /// </summary>
        [pbr::OriginalName("LOGISTIC_REGRESSION")] LogisticRegression = 2,
        /// <summary>
        /// K-means clustering model.
        /// </summary>
        [pbr::OriginalName("KMEANS")] Kmeans = 3,
        /// <summary>
        /// Matrix factorization model.
        /// </summary>
        [pbr::OriginalName("MATRIX_FACTORIZATION")] MatrixFactorization = 4,
        /// <summary>
        /// DNN classifier model.
        /// </summary>
        [pbr::OriginalName("DNN_CLASSIFIER")] DnnClassifier = 5,
        /// <summary>
        /// An imported TensorFlow model.
        /// </summary>
        [pbr::OriginalName("TENSORFLOW")] Tensorflow = 6,
        /// <summary>
        /// DNN regressor model.
        /// </summary>
        [pbr::OriginalName("DNN_REGRESSOR")] DnnRegressor = 7,
        /// <summary>
        /// Boosted tree regressor model.
        /// </summary>
        [pbr::OriginalName("BOOSTED_TREE_REGRESSOR")] BoostedTreeRegressor = 9,
        /// <summary>
        /// Boosted tree classifier model.
        /// </summary>
        [pbr::OriginalName("BOOSTED_TREE_CLASSIFIER")] BoostedTreeClassifier = 10,
        /// <summary>
        /// ARIMA model.
        /// </summary>
        [pbr::OriginalName("ARIMA")] Arima = 11,
        /// <summary>
        /// [Beta] AutoML Tables regression model.
        /// </summary>
        [pbr::OriginalName("AUTOML_REGRESSOR")] AutomlRegressor = 12,
        /// <summary>
        /// [Beta] AutoML Tables classification model.
        /// </summary>
        [pbr::OriginalName("AUTOML_CLASSIFIER")] AutomlClassifier = 13,
        /// <summary>
        /// New name for the ARIMA model.
        /// </summary>
        [pbr::OriginalName("ARIMA_PLUS")] ArimaPlus = 19,
      }

      /// <summary>
      /// Loss metric to evaluate model training performance.
      /// </summary>
      public enum LossType {
        [pbr::OriginalName("LOSS_TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Mean squared loss, used for linear regression.
        /// </summary>
        [pbr::OriginalName("MEAN_SQUARED_LOSS")] MeanSquaredLoss = 1,
        /// <summary>
        /// Mean log loss, used for logistic regression.
        /// </summary>
        [pbr::OriginalName("MEAN_LOG_LOSS")] MeanLogLoss = 2,
      }

      /// <summary>
      /// Distance metric used to compute the distance between two points.
      /// </summary>
      public enum DistanceType {
        [pbr::OriginalName("DISTANCE_TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Eculidean distance.
        /// </summary>
        [pbr::OriginalName("EUCLIDEAN")] Euclidean = 1,
        /// <summary>
        /// Cosine distance.
        /// </summary>
        [pbr::OriginalName("COSINE")] Cosine = 2,
      }

      /// <summary>
      /// Indicates the method to split input data into multiple tables.
      /// </summary>
      public enum DataSplitMethod {
        [pbr::OriginalName("DATA_SPLIT_METHOD_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Splits data randomly.
        /// </summary>
        [pbr::OriginalName("RANDOM")] Random = 1,
        /// <summary>
        /// Splits data with the user provided tags.
        /// </summary>
        [pbr::OriginalName("CUSTOM")] Custom = 2,
        /// <summary>
        /// Splits data sequentially.
        /// </summary>
        [pbr::OriginalName("SEQUENTIAL")] Sequential = 3,
        /// <summary>
        /// Data split will be skipped.
        /// </summary>
        [pbr::OriginalName("NO_SPLIT")] NoSplit = 4,
        /// <summary>
        /// Splits data automatically: Uses NO_SPLIT if the data size is small.
        /// Otherwise uses RANDOM.
        /// </summary>
        [pbr::OriginalName("AUTO_SPLIT")] AutoSplit = 5,
      }

      /// <summary>
      /// Type of supported data frequency for time series forecasting models.
      /// </summary>
      public enum DataFrequency {
        [pbr::OriginalName("DATA_FREQUENCY_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Automatically inferred from timestamps.
        /// </summary>
        [pbr::OriginalName("AUTO_FREQUENCY")] AutoFrequency = 1,
        /// <summary>
        /// Yearly data.
        /// </summary>
        [pbr::OriginalName("YEARLY")] Yearly = 2,
        /// <summary>
        /// Quarterly data.
        /// </summary>
        [pbr::OriginalName("QUARTERLY")] Quarterly = 3,
        /// <summary>
        /// Monthly data.
        /// </summary>
        [pbr::OriginalName("MONTHLY")] Monthly = 4,
        /// <summary>
        /// Weekly data.
        /// </summary>
        [pbr::OriginalName("WEEKLY")] Weekly = 5,
        /// <summary>
        /// Daily data.
        /// </summary>
        [pbr::OriginalName("DAILY")] Daily = 6,
        /// <summary>
        /// Hourly data.
        /// </summary>
        [pbr::OriginalName("HOURLY")] Hourly = 7,
        /// <summary>
        /// Per-minute data.
        /// </summary>
        [pbr::OriginalName("PER_MINUTE")] PerMinute = 8,
      }

      /// <summary>
      /// Type of supported holiday regions for time series forecasting models.
      /// </summary>
      public enum HolidayRegion {
        /// <summary>
        /// Holiday region unspecified.
        /// </summary>
        [pbr::OriginalName("HOLIDAY_REGION_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Global.
        /// </summary>
        [pbr::OriginalName("GLOBAL")] Global = 1,
        /// <summary>
        /// North America.
        /// </summary>
        [pbr::OriginalName("NA")] Na = 2,
        /// <summary>
        /// Japan and Asia Pacific: Korea, Greater China, India, Australia, and New
        /// Zealand.
        /// </summary>
        [pbr::OriginalName("JAPAC")] Japac = 3,
        /// <summary>
        /// Europe, the Middle East and Africa.
        /// </summary>
        [pbr::OriginalName("EMEA")] Emea = 4,
        /// <summary>
        /// Latin America and the Caribbean.
        /// </summary>
        [pbr::OriginalName("LAC")] Lac = 5,
        /// <summary>
        /// United Arab Emirates
        /// </summary>
        [pbr::OriginalName("AE")] Ae = 6,
        /// <summary>
        /// Argentina
        /// </summary>
        [pbr::OriginalName("AR")] Ar = 7,
        /// <summary>
        /// Austria
        /// </summary>
        [pbr::OriginalName("AT")] At = 8,
        /// <summary>
        /// Australia
        /// </summary>
        [pbr::OriginalName("AU")] Au = 9,
        /// <summary>
        /// Belgium
        /// </summary>
        [pbr::OriginalName("BE")] Be = 10,
        /// <summary>
        /// Brazil
        /// </summary>
        [pbr::OriginalName("BR")] Br = 11,
        /// <summary>
        /// Canada
        /// </summary>
        [pbr::OriginalName("CA")] Ca = 12,
        /// <summary>
        /// Switzerland
        /// </summary>
        [pbr::OriginalName("CH")] Ch = 13,
        /// <summary>
        /// Chile
        /// </summary>
        [pbr::OriginalName("CL")] Cl = 14,
        /// <summary>
        /// China
        /// </summary>
        [pbr::OriginalName("CN")] Cn = 15,
        /// <summary>
        /// Colombia
        /// </summary>
        [pbr::OriginalName("CO")] Co = 16,
        /// <summary>
        /// Czechoslovakia
        /// </summary>
        [pbr::OriginalName("CS")] Cs = 17,
        /// <summary>
        /// Czech Republic
        /// </summary>
        [pbr::OriginalName("CZ")] Cz = 18,
        /// <summary>
        /// Germany
        /// </summary>
        [pbr::OriginalName("DE")] De = 19,
        /// <summary>
        /// Denmark
        /// </summary>
        [pbr::OriginalName("DK")] Dk = 20,
        /// <summary>
        /// Algeria
        /// </summary>
        [pbr::OriginalName("DZ")] Dz = 21,
        /// <summary>
        /// Ecuador
        /// </summary>
        [pbr::OriginalName("EC")] Ec = 22,
        /// <summary>
        /// Estonia
        /// </summary>
        [pbr::OriginalName("EE")] Ee = 23,
        /// <summary>
        /// Egypt
        /// </summary>
        [pbr::OriginalName("EG")] Eg = 24,
        /// <summary>
        /// Spain
        /// </summary>
        [pbr::OriginalName("ES")] Es = 25,
        /// <summary>
        /// Finland
        /// </summary>
        [pbr::OriginalName("FI")] Fi = 26,
        /// <summary>
        /// France
        /// </summary>
        [pbr::OriginalName("FR")] Fr = 27,
        /// <summary>
        /// Great Britain (United Kingdom)
        /// </summary>
        [pbr::OriginalName("GB")] Gb = 28,
        /// <summary>
        /// Greece
        /// </summary>
        [pbr::OriginalName("GR")] Gr = 29,
        /// <summary>
        /// Hong Kong
        /// </summary>
        [pbr::OriginalName("HK")] Hk = 30,
        /// <summary>
        /// Hungary
        /// </summary>
        [pbr::OriginalName("HU")] Hu = 31,
        /// <summary>
        /// Indonesia
        /// </summary>
        [pbr::OriginalName("ID")] Id = 32,
        /// <summary>
        /// Ireland
        /// </summary>
        [pbr::OriginalName("IE")] Ie = 33,
        /// <summary>
        /// Israel
        /// </summary>
        [pbr::OriginalName("IL")] Il = 34,
        /// <summary>
        /// India
        /// </summary>
        [pbr::OriginalName("IN")] In = 35,
        /// <summary>
        /// Iran
        /// </summary>
        [pbr::OriginalName("IR")] Ir = 36,
        /// <summary>
        /// Italy
        /// </summary>
        [pbr::OriginalName("IT")] It = 37,
        /// <summary>
        /// Japan
        /// </summary>
        [pbr::OriginalName("JP")] Jp = 38,
        /// <summary>
        /// Korea (South)
        /// </summary>
        [pbr::OriginalName("KR")] Kr = 39,
        /// <summary>
        /// Latvia
        /// </summary>
        [pbr::OriginalName("LV")] Lv = 40,
        /// <summary>
        /// Morocco
        /// </summary>
        [pbr::OriginalName("MA")] Ma = 41,
        /// <summary>
        /// Mexico
        /// </summary>
        [pbr::OriginalName("MX")] Mx = 42,
        /// <summary>
        /// Malaysia
        /// </summary>
        [pbr::OriginalName("MY")] My = 43,
        /// <summary>
        /// Nigeria
        /// </summary>
        [pbr::OriginalName("NG")] Ng = 44,
        /// <summary>
        /// Netherlands
        /// </summary>
        [pbr::OriginalName("NL")] Nl = 45,
        /// <summary>
        /// Norway
        /// </summary>
        [pbr::OriginalName("NO")] No = 46,
        /// <summary>
        /// New Zealand
        /// </summary>
        [pbr::OriginalName("NZ")] Nz = 47,
        /// <summary>
        /// Peru
        /// </summary>
        [pbr::OriginalName("PE")] Pe = 48,
        /// <summary>
        /// Philippines
        /// </summary>
        [pbr::OriginalName("PH")] Ph = 49,
        /// <summary>
        /// Pakistan
        /// </summary>
        [pbr::OriginalName("PK")] Pk = 50,
        /// <summary>
        /// Poland
        /// </summary>
        [pbr::OriginalName("PL")] Pl = 51,
        /// <summary>
        /// Portugal
        /// </summary>
        [pbr::OriginalName("PT")] Pt = 52,
        /// <summary>
        /// Romania
        /// </summary>
        [pbr::OriginalName("RO")] Ro = 53,
        /// <summary>
        /// Serbia
        /// </summary>
        [pbr::OriginalName("RS")] Rs = 54,
        /// <summary>
        /// Russian Federation
        /// </summary>
        [pbr::OriginalName("RU")] Ru = 55,
        /// <summary>
        /// Saudi Arabia
        /// </summary>
        [pbr::OriginalName("SA")] Sa = 56,
        /// <summary>
        /// Sweden
        /// </summary>
        [pbr::OriginalName("SE")] Se = 57,
        /// <summary>
        /// Singapore
        /// </summary>
        [pbr::OriginalName("SG")] Sg = 58,
        /// <summary>
        /// Slovenia
        /// </summary>
        [pbr::OriginalName("SI")] Si = 59,
        /// <summary>
        /// Slovakia
        /// </summary>
        [pbr::OriginalName("SK")] Sk = 60,
        /// <summary>
        /// Thailand
        /// </summary>
        [pbr::OriginalName("TH")] Th = 61,
        /// <summary>
        /// Turkey
        /// </summary>
        [pbr::OriginalName("TR")] Tr = 62,
        /// <summary>
        /// Taiwan
        /// </summary>
        [pbr::OriginalName("TW")] Tw = 63,
        /// <summary>
        /// Ukraine
        /// </summary>
        [pbr::OriginalName("UA")] Ua = 64,
        /// <summary>
        /// United States
        /// </summary>
        [pbr::OriginalName("US")] Us = 65,
        /// <summary>
        /// Venezuela
        /// </summary>
        [pbr::OriginalName("VE")] Ve = 66,
        /// <summary>
        /// Viet Nam
        /// </summary>
        [pbr::OriginalName("VN")] Vn = 67,
        /// <summary>
        /// South Africa
        /// </summary>
        [pbr::OriginalName("ZA")] Za = 68,
      }

      /// <summary>
      /// Indicates the learning rate optimization strategy to use.
      /// </summary>
      public enum LearnRateStrategy {
        [pbr::OriginalName("LEARN_RATE_STRATEGY_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Use line search to determine learning rate.
        /// </summary>
        [pbr::OriginalName("LINE_SEARCH")] LineSearch = 1,
        /// <summary>
        /// Use a constant learning rate.
        /// </summary>
        [pbr::OriginalName("CONSTANT")] Constant = 2,
      }

      /// <summary>
      /// Indicates the optimization strategy used for training.
      /// </summary>
      public enum OptimizationStrategy {
        [pbr::OriginalName("OPTIMIZATION_STRATEGY_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Uses an iterative batch gradient descent algorithm.
        /// </summary>
        [pbr::OriginalName("BATCH_GRADIENT_DESCENT")] BatchGradientDescent = 1,
        /// <summary>
        /// Uses a normal equation to solve linear regression problem.
        /// </summary>
        [pbr::OriginalName("NORMAL_EQUATION")] NormalEquation = 2,
      }

      /// <summary>
      /// Indicates the training algorithm to use for matrix factorization models.
      /// </summary>
      public enum FeedbackType {
        [pbr::OriginalName("FEEDBACK_TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Use weighted-als for implicit feedback problems.
        /// </summary>
        [pbr::OriginalName("IMPLICIT")] Implicit = 1,
        /// <summary>
        /// Use nonweighted-als for explicit feedback problems.
        /// </summary>
        [pbr::OriginalName("EXPLICIT")] Explicit = 2,
      }

      public sealed partial class SeasonalPeriod : pb::IMessage<SeasonalPeriod>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<SeasonalPeriod> _parser = new pb::MessageParser<SeasonalPeriod>(() => new SeasonalPeriod());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SeasonalPeriod> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Bigquery.V2.Model.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SeasonalPeriod() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SeasonalPeriod(SeasonalPeriod other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SeasonalPeriod Clone() {
          return new SeasonalPeriod(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SeasonalPeriod);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SeasonalPeriod other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SeasonalPeriod other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the SeasonalPeriod message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum SeasonalPeriodType {
            [pbr::OriginalName("SEASONAL_PERIOD_TYPE_UNSPECIFIED")] Unspecified = 0,
            /// <summary>
            /// No seasonality
            /// </summary>
            [pbr::OriginalName("NO_SEASONALITY")] NoSeasonality = 1,
            /// <summary>
            /// Daily period, 24 hours.
            /// </summary>
            [pbr::OriginalName("DAILY")] Daily = 2,
            /// <summary>
            /// Weekly period, 7 days.
            /// </summary>
            [pbr::OriginalName("WEEKLY")] Weekly = 3,
            /// <summary>
            /// Monthly period, 30 days or irregular.
            /// </summary>
            [pbr::OriginalName("MONTHLY")] Monthly = 4,
            /// <summary>
            /// Quarterly period, 90 days or irregular.
            /// </summary>
            [pbr::OriginalName("QUARTERLY")] Quarterly = 5,
            /// <summary>
            /// Yearly period, 365 days or irregular.
            /// </summary>
            [pbr::OriginalName("YEARLY")] Yearly = 6,
          }

        }
        #endregion

      }

      public sealed partial class KmeansEnums : pb::IMessage<KmeansEnums>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<KmeansEnums> _parser = new pb::MessageParser<KmeansEnums>(() => new KmeansEnums());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<KmeansEnums> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Bigquery.V2.Model.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KmeansEnums() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KmeansEnums(KmeansEnums other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KmeansEnums Clone() {
          return new KmeansEnums(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as KmeansEnums);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(KmeansEnums other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(KmeansEnums other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the KmeansEnums message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Indicates the method used to initialize the centroids for KMeans
          /// clustering algorithm.
          /// </summary>
          public enum KmeansInitializationMethod {
            /// <summary>
            /// Unspecified initialization method.
            /// </summary>
            [pbr::OriginalName("KMEANS_INITIALIZATION_METHOD_UNSPECIFIED")] Unspecified = 0,
            /// <summary>
            /// Initializes the centroids randomly.
            /// </summary>
            [pbr::OriginalName("RANDOM")] Random = 1,
            /// <summary>
            /// Initializes the centroids using data specified in
            /// kmeans_initialization_column.
            /// </summary>
            [pbr::OriginalName("CUSTOM")] Custom = 2,
            /// <summary>
            /// Initializes with kmeans++.
            /// </summary>
            [pbr::OriginalName("KMEANS_PLUS_PLUS")] KmeansPlusPlus = 3,
          }

        }
        #endregion

      }

      /// <summary>
      /// Evaluation metrics for regression and explicit feedback type matrix
      /// factorization models.
      /// </summary>
      public sealed partial class RegressionMetrics : pb::IMessage<RegressionMetrics>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<RegressionMetrics> _parser = new pb::MessageParser<RegressionMetrics>(() => new RegressionMetrics());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RegressionMetrics> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Bigquery.V2.Model.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RegressionMetrics() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RegressionMetrics(RegressionMetrics other) : this() {
          MeanAbsoluteError = other.MeanAbsoluteError;
          MeanSquaredError = other.MeanSquaredError;
          MeanSquaredLogError = other.MeanSquaredLogError;
          MedianAbsoluteError = other.MedianAbsoluteError;
          RSquared = other.RSquared;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RegressionMetrics Clone() {
          return new RegressionMetrics(this);
        }

        /// <summary>Field number for the "mean_absolute_error" field.</summary>
        public const int MeanAbsoluteErrorFieldNumber = 1;
        private static readonly pb::FieldCodec<double?> _single_meanAbsoluteError_codec = pb::FieldCodec.ForStructWrapper<double>(10);
        private double? meanAbsoluteError_;
        /// <summary>
        /// Mean absolute error.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? MeanAbsoluteError {
          get { return meanAbsoluteError_; }
          set {
            meanAbsoluteError_ = value;
          }
        }


        /// <summary>Field number for the "mean_squared_error" field.</summary>
        public const int MeanSquaredErrorFieldNumber = 2;
        private static readonly pb::FieldCodec<double?> _single_meanSquaredError_codec = pb::FieldCodec.ForStructWrapper<double>(18);
        private double? meanSquaredError_;
        /// <summary>
        /// Mean squared error.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? MeanSquaredError {
          get { return meanSquaredError_; }
          set {
            meanSquaredError_ = value;
          }
        }


        /// <summary>Field number for the "mean_squared_log_error" field.</summary>
        public const int MeanSquaredLogErrorFieldNumber = 3;
        private static readonly pb::FieldCodec<double?> _single_meanSquaredLogError_codec = pb::FieldCodec.ForStructWrapper<double>(26);
        private double? meanSquaredLogError_;
        /// <summary>
        /// Mean squared log error.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? MeanSquaredLogError {
          get { return meanSquaredLogError_; }
          set {
            meanSquaredLogError_ = value;
          }
        }


        /// <summary>Field number for the "median_absolute_error" field.</summary>
        public const int MedianAbsoluteErrorFieldNumber = 4;
        private static readonly pb::FieldCodec<double?> _single_medianAbsoluteError_codec = pb::FieldCodec.ForStructWrapper<double>(34);
        private double? medianAbsoluteError_;
        /// <summary>
        /// Median absolute error.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? MedianAbsoluteError {
          get { return medianAbsoluteError_; }
          set {
            medianAbsoluteError_ = value;
          }
        }


        /// <summary>Field number for the "r_squared" field.</summary>
        public const int RSquaredFieldNumber = 5;
        private static readonly pb::FieldCodec<double?> _single_rSquared_codec = pb::FieldCodec.ForStructWrapper<double>(42);
        private double? rSquared_;
        /// <summary>
        /// R^2 score. This corresponds to r2_score in ML.EVALUATE.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? RSquared {
          get { return rSquared_; }
          set {
            rSquared_ = value;
          }
        }


        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RegressionMetrics);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RegressionMetrics other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(MeanAbsoluteError, other.MeanAbsoluteError)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(MeanSquaredError, other.MeanSquaredError)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(MeanSquaredLogError, other.MeanSquaredLogError)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(MedianAbsoluteError, other.MedianAbsoluteError)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(RSquared, other.RSquared)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (meanAbsoluteError_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(MeanAbsoluteError);
          if (meanSquaredError_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(MeanSquaredError);
          if (meanSquaredLogError_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(MeanSquaredLogError);
          if (medianAbsoluteError_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(MedianAbsoluteError);
          if (rSquared_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(RSquared);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (meanAbsoluteError_ != null) {
            _single_meanAbsoluteError_codec.WriteTagAndValue(output, MeanAbsoluteError);
          }
          if (meanSquaredError_ != null) {
            _single_meanSquaredError_codec.WriteTagAndValue(output, MeanSquaredError);
          }
          if (meanSquaredLogError_ != null) {
            _single_meanSquaredLogError_codec.WriteTagAndValue(output, MeanSquaredLogError);
          }
          if (medianAbsoluteError_ != null) {
            _single_medianAbsoluteError_codec.WriteTagAndValue(output, MedianAbsoluteError);
          }
          if (rSquared_ != null) {
            _single_rSquared_codec.WriteTagAndValue(output, RSquared);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (meanAbsoluteError_ != null) {
            _single_meanAbsoluteError_codec.WriteTagAndValue(ref output, MeanAbsoluteError);
          }
          if (meanSquaredError_ != null) {
            _single_meanSquaredError_codec.WriteTagAndValue(ref output, MeanSquaredError);
          }
          if (meanSquaredLogError_ != null) {
            _single_meanSquaredLogError_codec.WriteTagAndValue(ref output, MeanSquaredLogError);
          }
          if (medianAbsoluteError_ != null) {
            _single_medianAbsoluteError_codec.WriteTagAndValue(ref output, MedianAbsoluteError);
          }
          if (rSquared_ != null) {
            _single_rSquared_codec.WriteTagAndValue(ref output, RSquared);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (meanAbsoluteError_ != null) {
            size += _single_meanAbsoluteError_codec.CalculateSizeWithTag(MeanAbsoluteError);
          }
          if (meanSquaredError_ != null) {
            size += _single_meanSquaredError_codec.CalculateSizeWithTag(MeanSquaredError);
          }
          if (meanSquaredLogError_ != null) {
            size += _single_meanSquaredLogError_codec.CalculateSizeWithTag(MeanSquaredLogError);
          }
          if (medianAbsoluteError_ != null) {
            size += _single_medianAbsoluteError_codec.CalculateSizeWithTag(MedianAbsoluteError);
          }
          if (rSquared_ != null) {
            size += _single_rSquared_codec.CalculateSizeWithTag(RSquared);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RegressionMetrics other) {
          if (other == null) {
            return;
          }
          if (other.meanAbsoluteError_ != null) {
            if (meanAbsoluteError_ == null || other.MeanAbsoluteError != 0D) {
              MeanAbsoluteError = other.MeanAbsoluteError;
            }
          }
          if (other.meanSquaredError_ != null) {
            if (meanSquaredError_ == null || other.MeanSquaredError != 0D) {
              MeanSquaredError = other.MeanSquaredError;
            }
          }
          if (other.meanSquaredLogError_ != null) {
            if (meanSquaredLogError_ == null || other.MeanSquaredLogError != 0D) {
              MeanSquaredLogError = other.MeanSquaredLogError;
            }
          }
          if (other.medianAbsoluteError_ != null) {
            if (medianAbsoluteError_ == null || other.MedianAbsoluteError != 0D) {
              MedianAbsoluteError = other.MedianAbsoluteError;
            }
          }
          if (other.rSquared_ != null) {
            if (rSquared_ == null || other.RSquared != 0D) {
              RSquared = other.RSquared;
            }
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                double? value = _single_meanAbsoluteError_codec.Read(input);
                if (meanAbsoluteError_ == null || value != 0D) {
                  MeanAbsoluteError = value;
                }
                break;
              }
              case 18: {
                double? value = _single_meanSquaredError_codec.Read(input);
                if (meanSquaredError_ == null || value != 0D) {
                  MeanSquaredError = value;
                }
                break;
              }
              case 26: {
                double? value = _single_meanSquaredLogError_codec.Read(input);
                if (meanSquaredLogError_ == null || value != 0D) {
                  MeanSquaredLogError = value;
                }
                break;
              }
              case 34: {
                double? value = _single_medianAbsoluteError_codec.Read(input);
                if (medianAbsoluteError_ == null || value != 0D) {
                  MedianAbsoluteError = value;
                }
                break;
              }
              case 42: {
                double? value = _single_rSquared_codec.Read(input);
                if (rSquared_ == null || value != 0D) {
                  RSquared = value;
                }
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                double? value = _single_meanAbsoluteError_codec.Read(ref input);
                if (meanAbsoluteError_ == null || value != 0D) {
                  MeanAbsoluteError = value;
                }
                break;
              }
              case 18: {
                double? value = _single_meanSquaredError_codec.Read(ref input);
                if (meanSquaredError_ == null || value != 0D) {
                  MeanSquaredError = value;
                }
                break;
              }
              case 26: {
                double? value = _single_meanSquaredLogError_codec.Read(ref input);
                if (meanSquaredLogError_ == null || value != 0D) {
                  MeanSquaredLogError = value;
                }
                break;
              }
              case 34: {
                double? value = _single_medianAbsoluteError_codec.Read(ref input);
                if (medianAbsoluteError_ == null || value != 0D) {
                  MedianAbsoluteError = value;
                }
                break;
              }
              case 42: {
                double? value = _single_rSquared_codec.Read(ref input);
                if (rSquared_ == null || value != 0D) {
                  RSquared = value;
                }
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Aggregate metrics for classification/classifier models. For multi-class
      /// models, the metrics are either macro-averaged or micro-averaged. When
      /// macro-averaged, the metrics are calculated for each label and then an
      /// unweighted average is taken of those values. When micro-averaged, the
      /// metric is calculated globally by counting the total number of correctly
      /// predicted rows.
      /// </summary>
      public sealed partial class AggregateClassificationMetrics : pb::IMessage<AggregateClassificationMetrics>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AggregateClassificationMetrics> _parser = new pb::MessageParser<AggregateClassificationMetrics>(() => new AggregateClassificationMetrics());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AggregateClassificationMetrics> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Bigquery.V2.Model.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AggregateClassificationMetrics() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AggregateClassificationMetrics(AggregateClassificationMetrics other) : this() {
          Precision = other.Precision;
          Recall = other.Recall;
          Accuracy = other.Accuracy;
          Threshold = other.Threshold;
          F1Score = other.F1Score;
          LogLoss = other.LogLoss;
          RocAuc = other.RocAuc;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AggregateClassificationMetrics Clone() {
          return new AggregateClassificationMetrics(this);
        }

        /// <summary>Field number for the "precision" field.</summary>
        public const int PrecisionFieldNumber = 1;
        private static readonly pb::FieldCodec<double?> _single_precision_codec = pb::FieldCodec.ForStructWrapper<double>(10);
        private double? precision_;
        /// <summary>
        /// Precision is the fraction of actual positive predictions that had
        /// positive actual labels. For multiclass this is a macro-averaged
        /// metric treating each class as a binary classifier.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? Precision {
          get { return precision_; }
          set {
            precision_ = value;
          }
        }


        /// <summary>Field number for the "recall" field.</summary>
        public const int RecallFieldNumber = 2;
        private static readonly pb::FieldCodec<double?> _single_recall_codec = pb::FieldCodec.ForStructWrapper<double>(18);
        private double? recall_;
        /// <summary>
        /// Recall is the fraction of actual positive labels that were given a
        /// positive prediction. For multiclass this is a macro-averaged metric.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? Recall {
          get { return recall_; }
          set {
            recall_ = value;
          }
        }


        /// <summary>Field number for the "accuracy" field.</summary>
        public const int AccuracyFieldNumber = 3;
        private static readonly pb::FieldCodec<double?> _single_accuracy_codec = pb::FieldCodec.ForStructWrapper<double>(26);
        private double? accuracy_;
        /// <summary>
        /// Accuracy is the fraction of predictions given the correct label. For
        /// multiclass this is a micro-averaged metric.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? Accuracy {
          get { return accuracy_; }
          set {
            accuracy_ = value;
          }
        }


        /// <summary>Field number for the "threshold" field.</summary>
        public const int ThresholdFieldNumber = 4;
        private static readonly pb::FieldCodec<double?> _single_threshold_codec = pb::FieldCodec.ForStructWrapper<double>(34);
        private double? threshold_;
        /// <summary>
        /// Threshold at which the metrics are computed. For binary
        /// classification models this is the positive class threshold.
        /// For multi-class classfication models this is the confidence
        /// threshold.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? Threshold {
          get { return threshold_; }
          set {
            threshold_ = value;
          }
        }


        /// <summary>Field number for the "f1_score" field.</summary>
        public const int F1ScoreFieldNumber = 5;
        private static readonly pb::FieldCodec<double?> _single_f1Score_codec = pb::FieldCodec.ForStructWrapper<double>(42);
        private double? f1Score_;
        /// <summary>
        /// The F1 score is an average of recall and precision. For multiclass
        /// this is a macro-averaged metric.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? F1Score {
          get { return f1Score_; }
          set {
            f1Score_ = value;
          }
        }


        /// <summary>Field number for the "log_loss" field.</summary>
        public const int LogLossFieldNumber = 6;
        private static readonly pb::FieldCodec<double?> _single_logLoss_codec = pb::FieldCodec.ForStructWrapper<double>(50);
        private double? logLoss_;
        /// <summary>
        /// Logarithmic Loss. For multiclass this is a macro-averaged metric.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? LogLoss {
          get { return logLoss_; }
          set {
            logLoss_ = value;
          }
        }


        /// <summary>Field number for the "roc_auc" field.</summary>
        public const int RocAucFieldNumber = 7;
        private static readonly pb::FieldCodec<double?> _single_rocAuc_codec = pb::FieldCodec.ForStructWrapper<double>(58);
        private double? rocAuc_;
        /// <summary>
        /// Area Under a ROC Curve. For multiclass this is a macro-averaged
        /// metric.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? RocAuc {
          get { return rocAuc_; }
          set {
            rocAuc_ = value;
          }
        }


        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AggregateClassificationMetrics);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AggregateClassificationMetrics other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Precision, other.Precision)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Recall, other.Recall)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Accuracy, other.Accuracy)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Threshold, other.Threshold)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(F1Score, other.F1Score)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(LogLoss, other.LogLoss)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(RocAuc, other.RocAuc)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (precision_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Precision);
          if (recall_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Recall);
          if (accuracy_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Accuracy);
          if (threshold_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Threshold);
          if (f1Score_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(F1Score);
          if (logLoss_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(LogLoss);
          if (rocAuc_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(RocAuc);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (precision_ != null) {
            _single_precision_codec.WriteTagAndValue(output, Precision);
          }
          if (recall_ != null) {
            _single_recall_codec.WriteTagAndValue(output, Recall);
          }
          if (accuracy_ != null) {
            _single_accuracy_codec.WriteTagAndValue(output, Accuracy);
          }
          if (threshold_ != null) {
            _single_threshold_codec.WriteTagAndValue(output, Threshold);
          }
          if (f1Score_ != null) {
            _single_f1Score_codec.WriteTagAndValue(output, F1Score);
          }
          if (logLoss_ != null) {
            _single_logLoss_codec.WriteTagAndValue(output, LogLoss);
          }
          if (rocAuc_ != null) {
            _single_rocAuc_codec.WriteTagAndValue(output, RocAuc);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (precision_ != null) {
            _single_precision_codec.WriteTagAndValue(ref output, Precision);
          }
          if (recall_ != null) {
            _single_recall_codec.WriteTagAndValue(ref output, Recall);
          }
          if (accuracy_ != null) {
            _single_accuracy_codec.WriteTagAndValue(ref output, Accuracy);
          }
          if (threshold_ != null) {
            _single_threshold_codec.WriteTagAndValue(ref output, Threshold);
          }
          if (f1Score_ != null) {
            _single_f1Score_codec.WriteTagAndValue(ref output, F1Score);
          }
          if (logLoss_ != null) {
            _single_logLoss_codec.WriteTagAndValue(ref output, LogLoss);
          }
          if (rocAuc_ != null) {
            _single_rocAuc_codec.WriteTagAndValue(ref output, RocAuc);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (precision_ != null) {
            size += _single_precision_codec.CalculateSizeWithTag(Precision);
          }
          if (recall_ != null) {
            size += _single_recall_codec.CalculateSizeWithTag(Recall);
          }
          if (accuracy_ != null) {
            size += _single_accuracy_codec.CalculateSizeWithTag(Accuracy);
          }
          if (threshold_ != null) {
            size += _single_threshold_codec.CalculateSizeWithTag(Threshold);
          }
          if (f1Score_ != null) {
            size += _single_f1Score_codec.CalculateSizeWithTag(F1Score);
          }
          if (logLoss_ != null) {
            size += _single_logLoss_codec.CalculateSizeWithTag(LogLoss);
          }
          if (rocAuc_ != null) {
            size += _single_rocAuc_codec.CalculateSizeWithTag(RocAuc);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AggregateClassificationMetrics other) {
          if (other == null) {
            return;
          }
          if (other.precision_ != null) {
            if (precision_ == null || other.Precision != 0D) {
              Precision = other.Precision;
            }
          }
          if (other.recall_ != null) {
            if (recall_ == null || other.Recall != 0D) {
              Recall = other.Recall;
            }
          }
          if (other.accuracy_ != null) {
            if (accuracy_ == null || other.Accuracy != 0D) {
              Accuracy = other.Accuracy;
            }
          }
          if (other.threshold_ != null) {
            if (threshold_ == null || other.Threshold != 0D) {
              Threshold = other.Threshold;
            }
          }
          if (other.f1Score_ != null) {
            if (f1Score_ == null || other.F1Score != 0D) {
              F1Score = other.F1Score;
            }
          }
          if (other.logLoss_ != null) {
            if (logLoss_ == null || other.LogLoss != 0D) {
              LogLoss = other.LogLoss;
            }
          }
          if (other.rocAuc_ != null) {
            if (rocAuc_ == null || other.RocAuc != 0D) {
              RocAuc = other.RocAuc;
            }
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                double? value = _single_precision_codec.Read(input);
                if (precision_ == null || value != 0D) {
                  Precision = value;
                }
                break;
              }
              case 18: {
                double? value = _single_recall_codec.Read(input);
                if (recall_ == null || value != 0D) {
                  Recall = value;
                }
                break;
              }
              case 26: {
                double? value = _single_accuracy_codec.Read(input);
                if (accuracy_ == null || value != 0D) {
                  Accuracy = value;
                }
                break;
              }
              case 34: {
                double? value = _single_threshold_codec.Read(input);
                if (threshold_ == null || value != 0D) {
                  Threshold = value;
                }
                break;
              }
              case 42: {
                double? value = _single_f1Score_codec.Read(input);
                if (f1Score_ == null || value != 0D) {
                  F1Score = value;
                }
                break;
              }
              case 50: {
                double? value = _single_logLoss_codec.Read(input);
                if (logLoss_ == null || value != 0D) {
                  LogLoss = value;
                }
                break;
              }
              case 58: {
                double? value = _single_rocAuc_codec.Read(input);
                if (rocAuc_ == null || value != 0D) {
                  RocAuc = value;
                }
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                double? value = _single_precision_codec.Read(ref input);
                if (precision_ == null || value != 0D) {
                  Precision = value;
                }
                break;
              }
              case 18: {
                double? value = _single_recall_codec.Read(ref input);
                if (recall_ == null || value != 0D) {
                  Recall = value;
                }
                break;
              }
              case 26: {
                double? value = _single_accuracy_codec.Read(ref input);
                if (accuracy_ == null || value != 0D) {
                  Accuracy = value;
                }
                break;
              }
              case 34: {
                double? value = _single_threshold_codec.Read(ref input);
                if (threshold_ == null || value != 0D) {
                  Threshold = value;
                }
                break;
              }
              case 42: {
                double? value = _single_f1Score_codec.Read(ref input);
                if (f1Score_ == null || value != 0D) {
                  F1Score = value;
                }
                break;
              }
              case 50: {
                double? value = _single_logLoss_codec.Read(ref input);
                if (logLoss_ == null || value != 0D) {
                  LogLoss = value;
                }
                break;
              }
              case 58: {
                double? value = _single_rocAuc_codec.Read(ref input);
                if (rocAuc_ == null || value != 0D) {
                  RocAuc = value;
                }
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Evaluation metrics for binary classification/classifier models.
      /// </summary>
      public sealed partial class BinaryClassificationMetrics : pb::IMessage<BinaryClassificationMetrics>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<BinaryClassificationMetrics> _parser = new pb::MessageParser<BinaryClassificationMetrics>(() => new BinaryClassificationMetrics());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BinaryClassificationMetrics> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Bigquery.V2.Model.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BinaryClassificationMetrics() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BinaryClassificationMetrics(BinaryClassificationMetrics other) : this() {
          aggregateClassificationMetrics_ = other.aggregateClassificationMetrics_ != null ? other.aggregateClassificationMetrics_.Clone() : null;
          binaryConfusionMatrixList_ = other.binaryConfusionMatrixList_.Clone();
          positiveLabel_ = other.positiveLabel_;
          negativeLabel_ = other.negativeLabel_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BinaryClassificationMetrics Clone() {
          return new BinaryClassificationMetrics(this);
        }

        /// <summary>Field number for the "aggregate_classification_metrics" field.</summary>
        public const int AggregateClassificationMetricsFieldNumber = 1;
        private global::Google.Cloud.Bigquery.V2.Model.Types.AggregateClassificationMetrics aggregateClassificationMetrics_;
        /// <summary>
        /// Aggregate classification metrics.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Bigquery.V2.Model.Types.AggregateClassificationMetrics AggregateClassificationMetrics {
          get { return aggregateClassificationMetrics_; }
          set {
            aggregateClassificationMetrics_ = value;
          }
        }

        /// <summary>Field number for the "binary_confusion_matrix_list" field.</summary>
        public const int BinaryConfusionMatrixListFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Google.Cloud.Bigquery.V2.Model.Types.BinaryClassificationMetrics.Types.BinaryConfusionMatrix> _repeated_binaryConfusionMatrixList_codec
            = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Bigquery.V2.Model.Types.BinaryClassificationMetrics.Types.BinaryConfusionMatrix.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.BinaryClassificationMetrics.Types.BinaryConfusionMatrix> binaryConfusionMatrixList_ = new pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.BinaryClassificationMetrics.Types.BinaryConfusionMatrix>();
        /// <summary>
        /// Binary confusion matrix at multiple thresholds.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.BinaryClassificationMetrics.Types.BinaryConfusionMatrix> BinaryConfusionMatrixList {
          get { return binaryConfusionMatrixList_; }
        }

        /// <summary>Field number for the "positive_label" field.</summary>
        public const int PositiveLabelFieldNumber = 3;
        private string positiveLabel_ = "";
        /// <summary>
        /// Label representing the positive class.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PositiveLabel {
          get { return positiveLabel_; }
          set {
            positiveLabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "negative_label" field.</summary>
        public const int NegativeLabelFieldNumber = 4;
        private string negativeLabel_ = "";
        /// <summary>
        /// Label representing the negative class.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string NegativeLabel {
          get { return negativeLabel_; }
          set {
            negativeLabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BinaryClassificationMetrics);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BinaryClassificationMetrics other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(AggregateClassificationMetrics, other.AggregateClassificationMetrics)) return false;
          if(!binaryConfusionMatrixList_.Equals(other.binaryConfusionMatrixList_)) return false;
          if (PositiveLabel != other.PositiveLabel) return false;
          if (NegativeLabel != other.NegativeLabel) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (aggregateClassificationMetrics_ != null) hash ^= AggregateClassificationMetrics.GetHashCode();
          hash ^= binaryConfusionMatrixList_.GetHashCode();
          if (PositiveLabel.Length != 0) hash ^= PositiveLabel.GetHashCode();
          if (NegativeLabel.Length != 0) hash ^= NegativeLabel.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (aggregateClassificationMetrics_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(AggregateClassificationMetrics);
          }
          binaryConfusionMatrixList_.WriteTo(output, _repeated_binaryConfusionMatrixList_codec);
          if (PositiveLabel.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(PositiveLabel);
          }
          if (NegativeLabel.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(NegativeLabel);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (aggregateClassificationMetrics_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(AggregateClassificationMetrics);
          }
          binaryConfusionMatrixList_.WriteTo(ref output, _repeated_binaryConfusionMatrixList_codec);
          if (PositiveLabel.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(PositiveLabel);
          }
          if (NegativeLabel.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(NegativeLabel);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (aggregateClassificationMetrics_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(AggregateClassificationMetrics);
          }
          size += binaryConfusionMatrixList_.CalculateSize(_repeated_binaryConfusionMatrixList_codec);
          if (PositiveLabel.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PositiveLabel);
          }
          if (NegativeLabel.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(NegativeLabel);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BinaryClassificationMetrics other) {
          if (other == null) {
            return;
          }
          if (other.aggregateClassificationMetrics_ != null) {
            if (aggregateClassificationMetrics_ == null) {
              AggregateClassificationMetrics = new global::Google.Cloud.Bigquery.V2.Model.Types.AggregateClassificationMetrics();
            }
            AggregateClassificationMetrics.MergeFrom(other.AggregateClassificationMetrics);
          }
          binaryConfusionMatrixList_.Add(other.binaryConfusionMatrixList_);
          if (other.PositiveLabel.Length != 0) {
            PositiveLabel = other.PositiveLabel;
          }
          if (other.NegativeLabel.Length != 0) {
            NegativeLabel = other.NegativeLabel;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (aggregateClassificationMetrics_ == null) {
                  AggregateClassificationMetrics = new global::Google.Cloud.Bigquery.V2.Model.Types.AggregateClassificationMetrics();
                }
                input.ReadMessage(AggregateClassificationMetrics);
                break;
              }
              case 18: {
                binaryConfusionMatrixList_.AddEntriesFrom(input, _repeated_binaryConfusionMatrixList_codec);
                break;
              }
              case 26: {
                PositiveLabel = input.ReadString();
                break;
              }
              case 34: {
                NegativeLabel = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (aggregateClassificationMetrics_ == null) {
                  AggregateClassificationMetrics = new global::Google.Cloud.Bigquery.V2.Model.Types.AggregateClassificationMetrics();
                }
                input.ReadMessage(AggregateClassificationMetrics);
                break;
              }
              case 18: {
                binaryConfusionMatrixList_.AddEntriesFrom(ref input, _repeated_binaryConfusionMatrixList_codec);
                break;
              }
              case 26: {
                PositiveLabel = input.ReadString();
                break;
              }
              case 34: {
                NegativeLabel = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the BinaryClassificationMetrics message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Confusion matrix for binary classification models.
          /// </summary>
          public sealed partial class BinaryConfusionMatrix : pb::IMessage<BinaryConfusionMatrix>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<BinaryConfusionMatrix> _parser = new pb::MessageParser<BinaryConfusionMatrix>(() => new BinaryConfusionMatrix());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<BinaryConfusionMatrix> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Google.Cloud.Bigquery.V2.Model.Types.BinaryClassificationMetrics.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public BinaryConfusionMatrix() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public BinaryConfusionMatrix(BinaryConfusionMatrix other) : this() {
              PositiveClassThreshold = other.PositiveClassThreshold;
              TruePositives = other.TruePositives;
              FalsePositives = other.FalsePositives;
              TrueNegatives = other.TrueNegatives;
              FalseNegatives = other.FalseNegatives;
              Precision = other.Precision;
              Recall = other.Recall;
              F1Score = other.F1Score;
              Accuracy = other.Accuracy;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public BinaryConfusionMatrix Clone() {
              return new BinaryConfusionMatrix(this);
            }

            /// <summary>Field number for the "positive_class_threshold" field.</summary>
            public const int PositiveClassThresholdFieldNumber = 1;
            private static readonly pb::FieldCodec<double?> _single_positiveClassThreshold_codec = pb::FieldCodec.ForStructWrapper<double>(10);
            private double? positiveClassThreshold_;
            /// <summary>
            /// Threshold value used when computing each of the following metric.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double? PositiveClassThreshold {
              get { return positiveClassThreshold_; }
              set {
                positiveClassThreshold_ = value;
              }
            }


            /// <summary>Field number for the "true_positives" field.</summary>
            public const int TruePositivesFieldNumber = 2;
            private static readonly pb::FieldCodec<long?> _single_truePositives_codec = pb::FieldCodec.ForStructWrapper<long>(18);
            private long? truePositives_;
            /// <summary>
            /// Number of true samples predicted as true.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long? TruePositives {
              get { return truePositives_; }
              set {
                truePositives_ = value;
              }
            }


            /// <summary>Field number for the "false_positives" field.</summary>
            public const int FalsePositivesFieldNumber = 3;
            private static readonly pb::FieldCodec<long?> _single_falsePositives_codec = pb::FieldCodec.ForStructWrapper<long>(26);
            private long? falsePositives_;
            /// <summary>
            /// Number of false samples predicted as true.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long? FalsePositives {
              get { return falsePositives_; }
              set {
                falsePositives_ = value;
              }
            }


            /// <summary>Field number for the "true_negatives" field.</summary>
            public const int TrueNegativesFieldNumber = 4;
            private static readonly pb::FieldCodec<long?> _single_trueNegatives_codec = pb::FieldCodec.ForStructWrapper<long>(34);
            private long? trueNegatives_;
            /// <summary>
            /// Number of true samples predicted as false.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long? TrueNegatives {
              get { return trueNegatives_; }
              set {
                trueNegatives_ = value;
              }
            }


            /// <summary>Field number for the "false_negatives" field.</summary>
            public const int FalseNegativesFieldNumber = 5;
            private static readonly pb::FieldCodec<long?> _single_falseNegatives_codec = pb::FieldCodec.ForStructWrapper<long>(42);
            private long? falseNegatives_;
            /// <summary>
            /// Number of false samples predicted as false.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long? FalseNegatives {
              get { return falseNegatives_; }
              set {
                falseNegatives_ = value;
              }
            }


            /// <summary>Field number for the "precision" field.</summary>
            public const int PrecisionFieldNumber = 6;
            private static readonly pb::FieldCodec<double?> _single_precision_codec = pb::FieldCodec.ForStructWrapper<double>(50);
            private double? precision_;
            /// <summary>
            /// The fraction of actual positive predictions that had positive actual
            /// labels.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double? Precision {
              get { return precision_; }
              set {
                precision_ = value;
              }
            }


            /// <summary>Field number for the "recall" field.</summary>
            public const int RecallFieldNumber = 7;
            private static readonly pb::FieldCodec<double?> _single_recall_codec = pb::FieldCodec.ForStructWrapper<double>(58);
            private double? recall_;
            /// <summary>
            /// The fraction of actual positive labels that were given a positive
            /// prediction.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double? Recall {
              get { return recall_; }
              set {
                recall_ = value;
              }
            }


            /// <summary>Field number for the "f1_score" field.</summary>
            public const int F1ScoreFieldNumber = 8;
            private static readonly pb::FieldCodec<double?> _single_f1Score_codec = pb::FieldCodec.ForStructWrapper<double>(66);
            private double? f1Score_;
            /// <summary>
            /// The equally weighted average of recall and precision.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double? F1Score {
              get { return f1Score_; }
              set {
                f1Score_ = value;
              }
            }


            /// <summary>Field number for the "accuracy" field.</summary>
            public const int AccuracyFieldNumber = 9;
            private static readonly pb::FieldCodec<double?> _single_accuracy_codec = pb::FieldCodec.ForStructWrapper<double>(74);
            private double? accuracy_;
            /// <summary>
            /// The fraction of predictions given the correct label.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double? Accuracy {
              get { return accuracy_; }
              set {
                accuracy_ = value;
              }
            }


            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as BinaryConfusionMatrix);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(BinaryConfusionMatrix other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(PositiveClassThreshold, other.PositiveClassThreshold)) return false;
              if (TruePositives != other.TruePositives) return false;
              if (FalsePositives != other.FalsePositives) return false;
              if (TrueNegatives != other.TrueNegatives) return false;
              if (FalseNegatives != other.FalseNegatives) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Precision, other.Precision)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Recall, other.Recall)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(F1Score, other.F1Score)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Accuracy, other.Accuracy)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (positiveClassThreshold_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(PositiveClassThreshold);
              if (truePositives_ != null) hash ^= TruePositives.GetHashCode();
              if (falsePositives_ != null) hash ^= FalsePositives.GetHashCode();
              if (trueNegatives_ != null) hash ^= TrueNegatives.GetHashCode();
              if (falseNegatives_ != null) hash ^= FalseNegatives.GetHashCode();
              if (precision_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Precision);
              if (recall_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Recall);
              if (f1Score_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(F1Score);
              if (accuracy_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Accuracy);
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (positiveClassThreshold_ != null) {
                _single_positiveClassThreshold_codec.WriteTagAndValue(output, PositiveClassThreshold);
              }
              if (truePositives_ != null) {
                _single_truePositives_codec.WriteTagAndValue(output, TruePositives);
              }
              if (falsePositives_ != null) {
                _single_falsePositives_codec.WriteTagAndValue(output, FalsePositives);
              }
              if (trueNegatives_ != null) {
                _single_trueNegatives_codec.WriteTagAndValue(output, TrueNegatives);
              }
              if (falseNegatives_ != null) {
                _single_falseNegatives_codec.WriteTagAndValue(output, FalseNegatives);
              }
              if (precision_ != null) {
                _single_precision_codec.WriteTagAndValue(output, Precision);
              }
              if (recall_ != null) {
                _single_recall_codec.WriteTagAndValue(output, Recall);
              }
              if (f1Score_ != null) {
                _single_f1Score_codec.WriteTagAndValue(output, F1Score);
              }
              if (accuracy_ != null) {
                _single_accuracy_codec.WriteTagAndValue(output, Accuracy);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (positiveClassThreshold_ != null) {
                _single_positiveClassThreshold_codec.WriteTagAndValue(ref output, PositiveClassThreshold);
              }
              if (truePositives_ != null) {
                _single_truePositives_codec.WriteTagAndValue(ref output, TruePositives);
              }
              if (falsePositives_ != null) {
                _single_falsePositives_codec.WriteTagAndValue(ref output, FalsePositives);
              }
              if (trueNegatives_ != null) {
                _single_trueNegatives_codec.WriteTagAndValue(ref output, TrueNegatives);
              }
              if (falseNegatives_ != null) {
                _single_falseNegatives_codec.WriteTagAndValue(ref output, FalseNegatives);
              }
              if (precision_ != null) {
                _single_precision_codec.WriteTagAndValue(ref output, Precision);
              }
              if (recall_ != null) {
                _single_recall_codec.WriteTagAndValue(ref output, Recall);
              }
              if (f1Score_ != null) {
                _single_f1Score_codec.WriteTagAndValue(ref output, F1Score);
              }
              if (accuracy_ != null) {
                _single_accuracy_codec.WriteTagAndValue(ref output, Accuracy);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (positiveClassThreshold_ != null) {
                size += _single_positiveClassThreshold_codec.CalculateSizeWithTag(PositiveClassThreshold);
              }
              if (truePositives_ != null) {
                size += _single_truePositives_codec.CalculateSizeWithTag(TruePositives);
              }
              if (falsePositives_ != null) {
                size += _single_falsePositives_codec.CalculateSizeWithTag(FalsePositives);
              }
              if (trueNegatives_ != null) {
                size += _single_trueNegatives_codec.CalculateSizeWithTag(TrueNegatives);
              }
              if (falseNegatives_ != null) {
                size += _single_falseNegatives_codec.CalculateSizeWithTag(FalseNegatives);
              }
              if (precision_ != null) {
                size += _single_precision_codec.CalculateSizeWithTag(Precision);
              }
              if (recall_ != null) {
                size += _single_recall_codec.CalculateSizeWithTag(Recall);
              }
              if (f1Score_ != null) {
                size += _single_f1Score_codec.CalculateSizeWithTag(F1Score);
              }
              if (accuracy_ != null) {
                size += _single_accuracy_codec.CalculateSizeWithTag(Accuracy);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(BinaryConfusionMatrix other) {
              if (other == null) {
                return;
              }
              if (other.positiveClassThreshold_ != null) {
                if (positiveClassThreshold_ == null || other.PositiveClassThreshold != 0D) {
                  PositiveClassThreshold = other.PositiveClassThreshold;
                }
              }
              if (other.truePositives_ != null) {
                if (truePositives_ == null || other.TruePositives != 0L) {
                  TruePositives = other.TruePositives;
                }
              }
              if (other.falsePositives_ != null) {
                if (falsePositives_ == null || other.FalsePositives != 0L) {
                  FalsePositives = other.FalsePositives;
                }
              }
              if (other.trueNegatives_ != null) {
                if (trueNegatives_ == null || other.TrueNegatives != 0L) {
                  TrueNegatives = other.TrueNegatives;
                }
              }
              if (other.falseNegatives_ != null) {
                if (falseNegatives_ == null || other.FalseNegatives != 0L) {
                  FalseNegatives = other.FalseNegatives;
                }
              }
              if (other.precision_ != null) {
                if (precision_ == null || other.Precision != 0D) {
                  Precision = other.Precision;
                }
              }
              if (other.recall_ != null) {
                if (recall_ == null || other.Recall != 0D) {
                  Recall = other.Recall;
                }
              }
              if (other.f1Score_ != null) {
                if (f1Score_ == null || other.F1Score != 0D) {
                  F1Score = other.F1Score;
                }
              }
              if (other.accuracy_ != null) {
                if (accuracy_ == null || other.Accuracy != 0D) {
                  Accuracy = other.Accuracy;
                }
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    double? value = _single_positiveClassThreshold_codec.Read(input);
                    if (positiveClassThreshold_ == null || value != 0D) {
                      PositiveClassThreshold = value;
                    }
                    break;
                  }
                  case 18: {
                    long? value = _single_truePositives_codec.Read(input);
                    if (truePositives_ == null || value != 0L) {
                      TruePositives = value;
                    }
                    break;
                  }
                  case 26: {
                    long? value = _single_falsePositives_codec.Read(input);
                    if (falsePositives_ == null || value != 0L) {
                      FalsePositives = value;
                    }
                    break;
                  }
                  case 34: {
                    long? value = _single_trueNegatives_codec.Read(input);
                    if (trueNegatives_ == null || value != 0L) {
                      TrueNegatives = value;
                    }
                    break;
                  }
                  case 42: {
                    long? value = _single_falseNegatives_codec.Read(input);
                    if (falseNegatives_ == null || value != 0L) {
                      FalseNegatives = value;
                    }
                    break;
                  }
                  case 50: {
                    double? value = _single_precision_codec.Read(input);
                    if (precision_ == null || value != 0D) {
                      Precision = value;
                    }
                    break;
                  }
                  case 58: {
                    double? value = _single_recall_codec.Read(input);
                    if (recall_ == null || value != 0D) {
                      Recall = value;
                    }
                    break;
                  }
                  case 66: {
                    double? value = _single_f1Score_codec.Read(input);
                    if (f1Score_ == null || value != 0D) {
                      F1Score = value;
                    }
                    break;
                  }
                  case 74: {
                    double? value = _single_accuracy_codec.Read(input);
                    if (accuracy_ == null || value != 0D) {
                      Accuracy = value;
                    }
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    double? value = _single_positiveClassThreshold_codec.Read(ref input);
                    if (positiveClassThreshold_ == null || value != 0D) {
                      PositiveClassThreshold = value;
                    }
                    break;
                  }
                  case 18: {
                    long? value = _single_truePositives_codec.Read(ref input);
                    if (truePositives_ == null || value != 0L) {
                      TruePositives = value;
                    }
                    break;
                  }
                  case 26: {
                    long? value = _single_falsePositives_codec.Read(ref input);
                    if (falsePositives_ == null || value != 0L) {
                      FalsePositives = value;
                    }
                    break;
                  }
                  case 34: {
                    long? value = _single_trueNegatives_codec.Read(ref input);
                    if (trueNegatives_ == null || value != 0L) {
                      TrueNegatives = value;
                    }
                    break;
                  }
                  case 42: {
                    long? value = _single_falseNegatives_codec.Read(ref input);
                    if (falseNegatives_ == null || value != 0L) {
                      FalseNegatives = value;
                    }
                    break;
                  }
                  case 50: {
                    double? value = _single_precision_codec.Read(ref input);
                    if (precision_ == null || value != 0D) {
                      Precision = value;
                    }
                    break;
                  }
                  case 58: {
                    double? value = _single_recall_codec.Read(ref input);
                    if (recall_ == null || value != 0D) {
                      Recall = value;
                    }
                    break;
                  }
                  case 66: {
                    double? value = _single_f1Score_codec.Read(ref input);
                    if (f1Score_ == null || value != 0D) {
                      F1Score = value;
                    }
                    break;
                  }
                  case 74: {
                    double? value = _single_accuracy_codec.Read(ref input);
                    if (accuracy_ == null || value != 0D) {
                      Accuracy = value;
                    }
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

      /// <summary>
      /// Evaluation metrics for multi-class classification/classifier models.
      /// </summary>
      public sealed partial class MultiClassClassificationMetrics : pb::IMessage<MultiClassClassificationMetrics>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<MultiClassClassificationMetrics> _parser = new pb::MessageParser<MultiClassClassificationMetrics>(() => new MultiClassClassificationMetrics());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MultiClassClassificationMetrics> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Bigquery.V2.Model.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MultiClassClassificationMetrics() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MultiClassClassificationMetrics(MultiClassClassificationMetrics other) : this() {
          aggregateClassificationMetrics_ = other.aggregateClassificationMetrics_ != null ? other.aggregateClassificationMetrics_.Clone() : null;
          confusionMatrixList_ = other.confusionMatrixList_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MultiClassClassificationMetrics Clone() {
          return new MultiClassClassificationMetrics(this);
        }

        /// <summary>Field number for the "aggregate_classification_metrics" field.</summary>
        public const int AggregateClassificationMetricsFieldNumber = 1;
        private global::Google.Cloud.Bigquery.V2.Model.Types.AggregateClassificationMetrics aggregateClassificationMetrics_;
        /// <summary>
        /// Aggregate classification metrics.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Bigquery.V2.Model.Types.AggregateClassificationMetrics AggregateClassificationMetrics {
          get { return aggregateClassificationMetrics_; }
          set {
            aggregateClassificationMetrics_ = value;
          }
        }

        /// <summary>Field number for the "confusion_matrix_list" field.</summary>
        public const int ConfusionMatrixListFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics.Types.ConfusionMatrix> _repeated_confusionMatrixList_codec
            = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics.Types.ConfusionMatrix.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics.Types.ConfusionMatrix> confusionMatrixList_ = new pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics.Types.ConfusionMatrix>();
        /// <summary>
        /// Confusion matrix at different thresholds.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics.Types.ConfusionMatrix> ConfusionMatrixList {
          get { return confusionMatrixList_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MultiClassClassificationMetrics);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MultiClassClassificationMetrics other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(AggregateClassificationMetrics, other.AggregateClassificationMetrics)) return false;
          if(!confusionMatrixList_.Equals(other.confusionMatrixList_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (aggregateClassificationMetrics_ != null) hash ^= AggregateClassificationMetrics.GetHashCode();
          hash ^= confusionMatrixList_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (aggregateClassificationMetrics_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(AggregateClassificationMetrics);
          }
          confusionMatrixList_.WriteTo(output, _repeated_confusionMatrixList_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (aggregateClassificationMetrics_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(AggregateClassificationMetrics);
          }
          confusionMatrixList_.WriteTo(ref output, _repeated_confusionMatrixList_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (aggregateClassificationMetrics_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(AggregateClassificationMetrics);
          }
          size += confusionMatrixList_.CalculateSize(_repeated_confusionMatrixList_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MultiClassClassificationMetrics other) {
          if (other == null) {
            return;
          }
          if (other.aggregateClassificationMetrics_ != null) {
            if (aggregateClassificationMetrics_ == null) {
              AggregateClassificationMetrics = new global::Google.Cloud.Bigquery.V2.Model.Types.AggregateClassificationMetrics();
            }
            AggregateClassificationMetrics.MergeFrom(other.AggregateClassificationMetrics);
          }
          confusionMatrixList_.Add(other.confusionMatrixList_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (aggregateClassificationMetrics_ == null) {
                  AggregateClassificationMetrics = new global::Google.Cloud.Bigquery.V2.Model.Types.AggregateClassificationMetrics();
                }
                input.ReadMessage(AggregateClassificationMetrics);
                break;
              }
              case 18: {
                confusionMatrixList_.AddEntriesFrom(input, _repeated_confusionMatrixList_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (aggregateClassificationMetrics_ == null) {
                  AggregateClassificationMetrics = new global::Google.Cloud.Bigquery.V2.Model.Types.AggregateClassificationMetrics();
                }
                input.ReadMessage(AggregateClassificationMetrics);
                break;
              }
              case 18: {
                confusionMatrixList_.AddEntriesFrom(ref input, _repeated_confusionMatrixList_codec);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the MultiClassClassificationMetrics message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Confusion matrix for multi-class classification models.
          /// </summary>
          public sealed partial class ConfusionMatrix : pb::IMessage<ConfusionMatrix>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<ConfusionMatrix> _parser = new pb::MessageParser<ConfusionMatrix>(() => new ConfusionMatrix());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<ConfusionMatrix> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ConfusionMatrix() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ConfusionMatrix(ConfusionMatrix other) : this() {
              ConfidenceThreshold = other.ConfidenceThreshold;
              rows_ = other.rows_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ConfusionMatrix Clone() {
              return new ConfusionMatrix(this);
            }

            /// <summary>Field number for the "confidence_threshold" field.</summary>
            public const int ConfidenceThresholdFieldNumber = 1;
            private static readonly pb::FieldCodec<double?> _single_confidenceThreshold_codec = pb::FieldCodec.ForStructWrapper<double>(10);
            private double? confidenceThreshold_;
            /// <summary>
            /// Confidence threshold used when computing the entries of the
            /// confusion matrix.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double? ConfidenceThreshold {
              get { return confidenceThreshold_; }
              set {
                confidenceThreshold_ = value;
              }
            }


            /// <summary>Field number for the "rows" field.</summary>
            public const int RowsFieldNumber = 2;
            private static readonly pb::FieldCodec<global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics.Types.ConfusionMatrix.Types.Row> _repeated_rows_codec
                = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics.Types.ConfusionMatrix.Types.Row.Parser);
            private readonly pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics.Types.ConfusionMatrix.Types.Row> rows_ = new pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics.Types.ConfusionMatrix.Types.Row>();
            /// <summary>
            /// One row per actual label.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics.Types.ConfusionMatrix.Types.Row> Rows {
              get { return rows_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as ConfusionMatrix);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(ConfusionMatrix other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ConfidenceThreshold, other.ConfidenceThreshold)) return false;
              if(!rows_.Equals(other.rows_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (confidenceThreshold_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ConfidenceThreshold);
              hash ^= rows_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (confidenceThreshold_ != null) {
                _single_confidenceThreshold_codec.WriteTagAndValue(output, ConfidenceThreshold);
              }
              rows_.WriteTo(output, _repeated_rows_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (confidenceThreshold_ != null) {
                _single_confidenceThreshold_codec.WriteTagAndValue(ref output, ConfidenceThreshold);
              }
              rows_.WriteTo(ref output, _repeated_rows_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (confidenceThreshold_ != null) {
                size += _single_confidenceThreshold_codec.CalculateSizeWithTag(ConfidenceThreshold);
              }
              size += rows_.CalculateSize(_repeated_rows_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(ConfusionMatrix other) {
              if (other == null) {
                return;
              }
              if (other.confidenceThreshold_ != null) {
                if (confidenceThreshold_ == null || other.ConfidenceThreshold != 0D) {
                  ConfidenceThreshold = other.ConfidenceThreshold;
                }
              }
              rows_.Add(other.rows_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    double? value = _single_confidenceThreshold_codec.Read(input);
                    if (confidenceThreshold_ == null || value != 0D) {
                      ConfidenceThreshold = value;
                    }
                    break;
                  }
                  case 18: {
                    rows_.AddEntriesFrom(input, _repeated_rows_codec);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    double? value = _single_confidenceThreshold_codec.Read(ref input);
                    if (confidenceThreshold_ == null || value != 0D) {
                      ConfidenceThreshold = value;
                    }
                    break;
                  }
                  case 18: {
                    rows_.AddEntriesFrom(ref input, _repeated_rows_codec);
                    break;
                  }
                }
              }
            }
            #endif

            #region Nested types
            /// <summary>Container for nested types declared in the ConfusionMatrix message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              /// <summary>
              /// A single entry in the confusion matrix.
              /// </summary>
              public sealed partial class Entry : pb::IMessage<Entry>
              #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  , pb::IBufferMessage
              #endif
              {
                private static readonly pb::MessageParser<Entry> _parser = new pb::MessageParser<Entry>(() => new Entry());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Entry> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics.Types.ConfusionMatrix.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Entry() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Entry(Entry other) : this() {
                  predictedLabel_ = other.predictedLabel_;
                  ItemCount = other.ItemCount;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Entry Clone() {
                  return new Entry(this);
                }

                /// <summary>Field number for the "predicted_label" field.</summary>
                public const int PredictedLabelFieldNumber = 1;
                private string predictedLabel_ = "";
                /// <summary>
                /// The predicted label. For confidence_threshold > 0, we will
                /// also add an entry indicating the number of items under the
                /// confidence threshold.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string PredictedLabel {
                  get { return predictedLabel_; }
                  set {
                    predictedLabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "item_count" field.</summary>
                public const int ItemCountFieldNumber = 2;
                private static readonly pb::FieldCodec<long?> _single_itemCount_codec = pb::FieldCodec.ForStructWrapper<long>(18);
                private long? itemCount_;
                /// <summary>
                /// Number of items being predicted as this label.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long? ItemCount {
                  get { return itemCount_; }
                  set {
                    itemCount_ = value;
                  }
                }


                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as Entry);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Entry other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (PredictedLabel != other.PredictedLabel) return false;
                  if (ItemCount != other.ItemCount) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (PredictedLabel.Length != 0) hash ^= PredictedLabel.GetHashCode();
                  if (itemCount_ != null) hash ^= ItemCount.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  output.WriteRawMessage(this);
                #else
                  if (PredictedLabel.Length != 0) {
                    output.WriteRawTag(10);
                    output.WriteString(PredictedLabel);
                  }
                  if (itemCount_ != null) {
                    _single_itemCount_codec.WriteTagAndValue(output, ItemCount);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
                  if (PredictedLabel.Length != 0) {
                    output.WriteRawTag(10);
                    output.WriteString(PredictedLabel);
                  }
                  if (itemCount_ != null) {
                    _single_itemCount_codec.WriteTagAndValue(ref output, ItemCount);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(ref output);
                  }
                }
                #endif

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (PredictedLabel.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(PredictedLabel);
                  }
                  if (itemCount_ != null) {
                    size += _single_itemCount_codec.CalculateSizeWithTag(ItemCount);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Entry other) {
                  if (other == null) {
                    return;
                  }
                  if (other.PredictedLabel.Length != 0) {
                    PredictedLabel = other.PredictedLabel;
                  }
                  if (other.itemCount_ != null) {
                    if (itemCount_ == null || other.ItemCount != 0L) {
                      ItemCount = other.ItemCount;
                    }
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  input.ReadRawMessage(this);
                #else
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        PredictedLabel = input.ReadString();
                        break;
                      }
                      case 18: {
                        long? value = _single_itemCount_codec.Read(input);
                        if (itemCount_ == null || value != 0L) {
                          ItemCount = value;
                        }
                        break;
                      }
                    }
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                      case 10: {
                        PredictedLabel = input.ReadString();
                        break;
                      }
                      case 18: {
                        long? value = _single_itemCount_codec.Read(ref input);
                        if (itemCount_ == null || value != 0L) {
                          ItemCount = value;
                        }
                        break;
                      }
                    }
                  }
                }
                #endif

              }

              /// <summary>
              /// A single row in the confusion matrix.
              /// </summary>
              public sealed partial class Row : pb::IMessage<Row>
              #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  , pb::IBufferMessage
              #endif
              {
                private static readonly pb::MessageParser<Row> _parser = new pb::MessageParser<Row>(() => new Row());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Row> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics.Types.ConfusionMatrix.Descriptor.NestedTypes[1]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Row() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Row(Row other) : this() {
                  actualLabel_ = other.actualLabel_;
                  entries_ = other.entries_.Clone();
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Row Clone() {
                  return new Row(this);
                }

                /// <summary>Field number for the "actual_label" field.</summary>
                public const int ActualLabelFieldNumber = 1;
                private string actualLabel_ = "";
                /// <summary>
                /// The original label of this row.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string ActualLabel {
                  get { return actualLabel_; }
                  set {
                    actualLabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "entries" field.</summary>
                public const int EntriesFieldNumber = 2;
                private static readonly pb::FieldCodec<global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics.Types.ConfusionMatrix.Types.Entry> _repeated_entries_codec
                    = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics.Types.ConfusionMatrix.Types.Entry.Parser);
                private readonly pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics.Types.ConfusionMatrix.Types.Entry> entries_ = new pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics.Types.ConfusionMatrix.Types.Entry>();
                /// <summary>
                /// Info describing predicted label distribution.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics.Types.ConfusionMatrix.Types.Entry> Entries {
                  get { return entries_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as Row);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Row other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (ActualLabel != other.ActualLabel) return false;
                  if(!entries_.Equals(other.entries_)) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (ActualLabel.Length != 0) hash ^= ActualLabel.GetHashCode();
                  hash ^= entries_.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  output.WriteRawMessage(this);
                #else
                  if (ActualLabel.Length != 0) {
                    output.WriteRawTag(10);
                    output.WriteString(ActualLabel);
                  }
                  entries_.WriteTo(output, _repeated_entries_codec);
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
                  if (ActualLabel.Length != 0) {
                    output.WriteRawTag(10);
                    output.WriteString(ActualLabel);
                  }
                  entries_.WriteTo(ref output, _repeated_entries_codec);
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(ref output);
                  }
                }
                #endif

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (ActualLabel.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(ActualLabel);
                  }
                  size += entries_.CalculateSize(_repeated_entries_codec);
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Row other) {
                  if (other == null) {
                    return;
                  }
                  if (other.ActualLabel.Length != 0) {
                    ActualLabel = other.ActualLabel;
                  }
                  entries_.Add(other.entries_);
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  input.ReadRawMessage(this);
                #else
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        ActualLabel = input.ReadString();
                        break;
                      }
                      case 18: {
                        entries_.AddEntriesFrom(input, _repeated_entries_codec);
                        break;
                      }
                    }
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                      case 10: {
                        ActualLabel = input.ReadString();
                        break;
                      }
                      case 18: {
                        entries_.AddEntriesFrom(ref input, _repeated_entries_codec);
                        break;
                      }
                    }
                  }
                }
                #endif

              }

            }
            #endregion

          }

        }
        #endregion

      }

      /// <summary>
      /// Evaluation metrics for clustering models.
      /// </summary>
      public sealed partial class ClusteringMetrics : pb::IMessage<ClusteringMetrics>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ClusteringMetrics> _parser = new pb::MessageParser<ClusteringMetrics>(() => new ClusteringMetrics());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClusteringMetrics> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Bigquery.V2.Model.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClusteringMetrics() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClusteringMetrics(ClusteringMetrics other) : this() {
          DaviesBouldinIndex = other.DaviesBouldinIndex;
          MeanSquaredDistance = other.MeanSquaredDistance;
          clusters_ = other.clusters_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClusteringMetrics Clone() {
          return new ClusteringMetrics(this);
        }

        /// <summary>Field number for the "davies_bouldin_index" field.</summary>
        public const int DaviesBouldinIndexFieldNumber = 1;
        private static readonly pb::FieldCodec<double?> _single_daviesBouldinIndex_codec = pb::FieldCodec.ForStructWrapper<double>(10);
        private double? daviesBouldinIndex_;
        /// <summary>
        /// Davies-Bouldin index.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? DaviesBouldinIndex {
          get { return daviesBouldinIndex_; }
          set {
            daviesBouldinIndex_ = value;
          }
        }


        /// <summary>Field number for the "mean_squared_distance" field.</summary>
        public const int MeanSquaredDistanceFieldNumber = 2;
        private static readonly pb::FieldCodec<double?> _single_meanSquaredDistance_codec = pb::FieldCodec.ForStructWrapper<double>(18);
        private double? meanSquaredDistance_;
        /// <summary>
        /// Mean of squared distances between each sample to its cluster centroid.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? MeanSquaredDistance {
          get { return meanSquaredDistance_; }
          set {
            meanSquaredDistance_ = value;
          }
        }


        /// <summary>Field number for the "clusters" field.</summary>
        public const int ClustersFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster> _repeated_clusters_codec
            = pb::FieldCodec.ForMessage(26, global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster> clusters_ = new pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster>();
        /// <summary>
        /// Information for all clusters.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster> Clusters {
          get { return clusters_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClusteringMetrics);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClusteringMetrics other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(DaviesBouldinIndex, other.DaviesBouldinIndex)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(MeanSquaredDistance, other.MeanSquaredDistance)) return false;
          if(!clusters_.Equals(other.clusters_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (daviesBouldinIndex_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(DaviesBouldinIndex);
          if (meanSquaredDistance_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(MeanSquaredDistance);
          hash ^= clusters_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (daviesBouldinIndex_ != null) {
            _single_daviesBouldinIndex_codec.WriteTagAndValue(output, DaviesBouldinIndex);
          }
          if (meanSquaredDistance_ != null) {
            _single_meanSquaredDistance_codec.WriteTagAndValue(output, MeanSquaredDistance);
          }
          clusters_.WriteTo(output, _repeated_clusters_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (daviesBouldinIndex_ != null) {
            _single_daviesBouldinIndex_codec.WriteTagAndValue(ref output, DaviesBouldinIndex);
          }
          if (meanSquaredDistance_ != null) {
            _single_meanSquaredDistance_codec.WriteTagAndValue(ref output, MeanSquaredDistance);
          }
          clusters_.WriteTo(ref output, _repeated_clusters_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (daviesBouldinIndex_ != null) {
            size += _single_daviesBouldinIndex_codec.CalculateSizeWithTag(DaviesBouldinIndex);
          }
          if (meanSquaredDistance_ != null) {
            size += _single_meanSquaredDistance_codec.CalculateSizeWithTag(MeanSquaredDistance);
          }
          size += clusters_.CalculateSize(_repeated_clusters_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClusteringMetrics other) {
          if (other == null) {
            return;
          }
          if (other.daviesBouldinIndex_ != null) {
            if (daviesBouldinIndex_ == null || other.DaviesBouldinIndex != 0D) {
              DaviesBouldinIndex = other.DaviesBouldinIndex;
            }
          }
          if (other.meanSquaredDistance_ != null) {
            if (meanSquaredDistance_ == null || other.MeanSquaredDistance != 0D) {
              MeanSquaredDistance = other.MeanSquaredDistance;
            }
          }
          clusters_.Add(other.clusters_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                double? value = _single_daviesBouldinIndex_codec.Read(input);
                if (daviesBouldinIndex_ == null || value != 0D) {
                  DaviesBouldinIndex = value;
                }
                break;
              }
              case 18: {
                double? value = _single_meanSquaredDistance_codec.Read(input);
                if (meanSquaredDistance_ == null || value != 0D) {
                  MeanSquaredDistance = value;
                }
                break;
              }
              case 26: {
                clusters_.AddEntriesFrom(input, _repeated_clusters_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                double? value = _single_daviesBouldinIndex_codec.Read(ref input);
                if (daviesBouldinIndex_ == null || value != 0D) {
                  DaviesBouldinIndex = value;
                }
                break;
              }
              case 18: {
                double? value = _single_meanSquaredDistance_codec.Read(ref input);
                if (meanSquaredDistance_ == null || value != 0D) {
                  MeanSquaredDistance = value;
                }
                break;
              }
              case 26: {
                clusters_.AddEntriesFrom(ref input, _repeated_clusters_codec);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the ClusteringMetrics message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Message containing the information about one cluster.
          /// </summary>
          public sealed partial class Cluster : pb::IMessage<Cluster>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Cluster> _parser = new pb::MessageParser<Cluster>(() => new Cluster());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Cluster> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Cluster() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Cluster(Cluster other) : this() {
              centroidId_ = other.centroidId_;
              featureValues_ = other.featureValues_.Clone();
              Count = other.Count;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Cluster Clone() {
              return new Cluster(this);
            }

            /// <summary>Field number for the "centroid_id" field.</summary>
            public const int CentroidIdFieldNumber = 1;
            private long centroidId_;
            /// <summary>
            /// Centroid id.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long CentroidId {
              get { return centroidId_; }
              set {
                centroidId_ = value;
              }
            }

            /// <summary>Field number for the "feature_values" field.</summary>
            public const int FeatureValuesFieldNumber = 2;
            private static readonly pb::FieldCodec<global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster.Types.FeatureValue> _repeated_featureValues_codec
                = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster.Types.FeatureValue.Parser);
            private readonly pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster.Types.FeatureValue> featureValues_ = new pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster.Types.FeatureValue>();
            /// <summary>
            /// Values of highly variant features for this cluster.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster.Types.FeatureValue> FeatureValues {
              get { return featureValues_; }
            }

            /// <summary>Field number for the "count" field.</summary>
            public const int CountFieldNumber = 3;
            private static readonly pb::FieldCodec<long?> _single_count_codec = pb::FieldCodec.ForStructWrapper<long>(26);
            private long? count_;
            /// <summary>
            /// Count of training data rows that were assigned to this cluster.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long? Count {
              get { return count_; }
              set {
                count_ = value;
              }
            }


            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Cluster);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Cluster other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (CentroidId != other.CentroidId) return false;
              if(!featureValues_.Equals(other.featureValues_)) return false;
              if (Count != other.Count) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (CentroidId != 0L) hash ^= CentroidId.GetHashCode();
              hash ^= featureValues_.GetHashCode();
              if (count_ != null) hash ^= Count.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (CentroidId != 0L) {
                output.WriteRawTag(8);
                output.WriteInt64(CentroidId);
              }
              featureValues_.WriteTo(output, _repeated_featureValues_codec);
              if (count_ != null) {
                _single_count_codec.WriteTagAndValue(output, Count);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (CentroidId != 0L) {
                output.WriteRawTag(8);
                output.WriteInt64(CentroidId);
              }
              featureValues_.WriteTo(ref output, _repeated_featureValues_codec);
              if (count_ != null) {
                _single_count_codec.WriteTagAndValue(ref output, Count);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (CentroidId != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(CentroidId);
              }
              size += featureValues_.CalculateSize(_repeated_featureValues_codec);
              if (count_ != null) {
                size += _single_count_codec.CalculateSizeWithTag(Count);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Cluster other) {
              if (other == null) {
                return;
              }
              if (other.CentroidId != 0L) {
                CentroidId = other.CentroidId;
              }
              featureValues_.Add(other.featureValues_);
              if (other.count_ != null) {
                if (count_ == null || other.Count != 0L) {
                  Count = other.Count;
                }
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    CentroidId = input.ReadInt64();
                    break;
                  }
                  case 18: {
                    featureValues_.AddEntriesFrom(input, _repeated_featureValues_codec);
                    break;
                  }
                  case 26: {
                    long? value = _single_count_codec.Read(input);
                    if (count_ == null || value != 0L) {
                      Count = value;
                    }
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    CentroidId = input.ReadInt64();
                    break;
                  }
                  case 18: {
                    featureValues_.AddEntriesFrom(ref input, _repeated_featureValues_codec);
                    break;
                  }
                  case 26: {
                    long? value = _single_count_codec.Read(ref input);
                    if (count_ == null || value != 0L) {
                      Count = value;
                    }
                    break;
                  }
                }
              }
            }
            #endif

            #region Nested types
            /// <summary>Container for nested types declared in the Cluster message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              /// <summary>
              /// Representative value of a single feature within the cluster.
              /// </summary>
              public sealed partial class FeatureValue : pb::IMessage<FeatureValue>
              #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  , pb::IBufferMessage
              #endif
              {
                private static readonly pb::MessageParser<FeatureValue> _parser = new pb::MessageParser<FeatureValue>(() => new FeatureValue());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<FeatureValue> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public FeatureValue() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public FeatureValue(FeatureValue other) : this() {
                  featureColumn_ = other.featureColumn_;
                  switch (other.ValueCase) {
                    case ValueOneofCase.NumericalValue:
                      NumericalValue = other.NumericalValue;
                      break;
                    case ValueOneofCase.CategoricalValue:
                      CategoricalValue = other.CategoricalValue.Clone();
                      break;
                  }

                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public FeatureValue Clone() {
                  return new FeatureValue(this);
                }

                /// <summary>Field number for the "feature_column" field.</summary>
                public const int FeatureColumnFieldNumber = 1;
                private string featureColumn_ = "";
                /// <summary>
                /// The feature column name.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string FeatureColumn {
                  get { return featureColumn_; }
                  set {
                    featureColumn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "numerical_value" field.</summary>
                public const int NumericalValueFieldNumber = 2;
                private static readonly pb::FieldCodec<double?> _oneof_numericalValue_codec = pb::FieldCodec.ForStructWrapper<double>(18);
                /// <summary>
                /// The numerical feature value. This is the centroid value for this
                /// feature.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public double? NumericalValue {
                  get { return valueCase_ == ValueOneofCase.NumericalValue ? (double?) value_ : (double?) null; }
                  set {
                    value_ = value;
                    valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.NumericalValue;
                  }
                }

                /// <summary>Field number for the "categorical_value" field.</summary>
                public const int CategoricalValueFieldNumber = 3;
                /// <summary>
                /// The categorical feature value.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster.Types.FeatureValue.Types.CategoricalValue CategoricalValue {
                  get { return valueCase_ == ValueOneofCase.CategoricalValue ? (global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster.Types.FeatureValue.Types.CategoricalValue) value_ : null; }
                  set {
                    value_ = value;
                    valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.CategoricalValue;
                  }
                }

                private object value_;
                /// <summary>Enum of possible cases for the "value" oneof.</summary>
                public enum ValueOneofCase {
                  None = 0,
                  NumericalValue = 2,
                  CategoricalValue = 3,
                }
                private ValueOneofCase valueCase_ = ValueOneofCase.None;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ValueOneofCase ValueCase {
                  get { return valueCase_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearValue() {
                  valueCase_ = ValueOneofCase.None;
                  value_ = null;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as FeatureValue);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(FeatureValue other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (FeatureColumn != other.FeatureColumn) return false;
                  if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(NumericalValue, other.NumericalValue)) return false;
                  if (!object.Equals(CategoricalValue, other.CategoricalValue)) return false;
                  if (ValueCase != other.ValueCase) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (FeatureColumn.Length != 0) hash ^= FeatureColumn.GetHashCode();
                  if (valueCase_ == ValueOneofCase.NumericalValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(NumericalValue);
                  if (valueCase_ == ValueOneofCase.CategoricalValue) hash ^= CategoricalValue.GetHashCode();
                  hash ^= (int) valueCase_;
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  output.WriteRawMessage(this);
                #else
                  if (FeatureColumn.Length != 0) {
                    output.WriteRawTag(10);
                    output.WriteString(FeatureColumn);
                  }
                  if (valueCase_ == ValueOneofCase.NumericalValue) {
                    _oneof_numericalValue_codec.WriteTagAndValue(output, (double?) value_);
                  }
                  if (valueCase_ == ValueOneofCase.CategoricalValue) {
                    output.WriteRawTag(26);
                    output.WriteMessage(CategoricalValue);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
                  if (FeatureColumn.Length != 0) {
                    output.WriteRawTag(10);
                    output.WriteString(FeatureColumn);
                  }
                  if (valueCase_ == ValueOneofCase.NumericalValue) {
                    _oneof_numericalValue_codec.WriteTagAndValue(ref output, (double?) value_);
                  }
                  if (valueCase_ == ValueOneofCase.CategoricalValue) {
                    output.WriteRawTag(26);
                    output.WriteMessage(CategoricalValue);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(ref output);
                  }
                }
                #endif

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (FeatureColumn.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(FeatureColumn);
                  }
                  if (valueCase_ == ValueOneofCase.NumericalValue) {
                    size += _oneof_numericalValue_codec.CalculateSizeWithTag(NumericalValue);
                  }
                  if (valueCase_ == ValueOneofCase.CategoricalValue) {
                    size += 1 + pb::CodedOutputStream.ComputeMessageSize(CategoricalValue);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(FeatureValue other) {
                  if (other == null) {
                    return;
                  }
                  if (other.FeatureColumn.Length != 0) {
                    FeatureColumn = other.FeatureColumn;
                  }
                  switch (other.ValueCase) {
                    case ValueOneofCase.NumericalValue:
                      NumericalValue = other.NumericalValue;
                      break;
                    case ValueOneofCase.CategoricalValue:
                      if (CategoricalValue == null) {
                        CategoricalValue = new global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster.Types.FeatureValue.Types.CategoricalValue();
                      }
                      CategoricalValue.MergeFrom(other.CategoricalValue);
                      break;
                  }

                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  input.ReadRawMessage(this);
                #else
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        FeatureColumn = input.ReadString();
                        break;
                      }
                      case 18: {
                        NumericalValue = _oneof_numericalValue_codec.Read(input);
                        break;
                      }
                      case 26: {
                        global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster.Types.FeatureValue.Types.CategoricalValue subBuilder = new global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster.Types.FeatureValue.Types.CategoricalValue();
                        if (valueCase_ == ValueOneofCase.CategoricalValue) {
                          subBuilder.MergeFrom(CategoricalValue);
                        }
                        input.ReadMessage(subBuilder);
                        CategoricalValue = subBuilder;
                        break;
                      }
                    }
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                      case 10: {
                        FeatureColumn = input.ReadString();
                        break;
                      }
                      case 18: {
                        NumericalValue = _oneof_numericalValue_codec.Read(ref input);
                        break;
                      }
                      case 26: {
                        global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster.Types.FeatureValue.Types.CategoricalValue subBuilder = new global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster.Types.FeatureValue.Types.CategoricalValue();
                        if (valueCase_ == ValueOneofCase.CategoricalValue) {
                          subBuilder.MergeFrom(CategoricalValue);
                        }
                        input.ReadMessage(subBuilder);
                        CategoricalValue = subBuilder;
                        break;
                      }
                    }
                  }
                }
                #endif

                #region Nested types
                /// <summary>Container for nested types declared in the FeatureValue message type.</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static partial class Types {
                  /// <summary>
                  /// Representative value of a categorical feature.
                  /// </summary>
                  public sealed partial class CategoricalValue : pb::IMessage<CategoricalValue>
                  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                      , pb::IBufferMessage
                  #endif
                  {
                    private static readonly pb::MessageParser<CategoricalValue> _parser = new pb::MessageParser<CategoricalValue>(() => new CategoricalValue());
                    private pb::UnknownFieldSet _unknownFields;
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public static pb::MessageParser<CategoricalValue> Parser { get { return _parser; } }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public static pbr::MessageDescriptor Descriptor {
                      get { return global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster.Types.FeatureValue.Descriptor.NestedTypes[0]; }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    pbr::MessageDescriptor pb::IMessage.Descriptor {
                      get { return Descriptor; }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public CategoricalValue() {
                      OnConstruction();
                    }

                    partial void OnConstruction();

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public CategoricalValue(CategoricalValue other) : this() {
                      categoryCounts_ = other.categoryCounts_.Clone();
                      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public CategoricalValue Clone() {
                      return new CategoricalValue(this);
                    }

                    /// <summary>Field number for the "category_counts" field.</summary>
                    public const int CategoryCountsFieldNumber = 1;
                    private static readonly pb::FieldCodec<global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster.Types.FeatureValue.Types.CategoricalValue.Types.CategoryCount> _repeated_categoryCounts_codec
                        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster.Types.FeatureValue.Types.CategoricalValue.Types.CategoryCount.Parser);
                    private readonly pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster.Types.FeatureValue.Types.CategoricalValue.Types.CategoryCount> categoryCounts_ = new pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster.Types.FeatureValue.Types.CategoricalValue.Types.CategoryCount>();
                    /// <summary>
                    /// Counts of all categories for the categorical feature. If there are
                    /// more than ten categories, we return top ten (by count) and return
                    /// one more CategoryCount with category "_OTHER_" and count as
                    /// aggregate counts of remaining categories.
                    /// </summary>
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster.Types.FeatureValue.Types.CategoricalValue.Types.CategoryCount> CategoryCounts {
                      get { return categoryCounts_; }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public override bool Equals(object other) {
                      return Equals(other as CategoricalValue);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public bool Equals(CategoricalValue other) {
                      if (ReferenceEquals(other, null)) {
                        return false;
                      }
                      if (ReferenceEquals(other, this)) {
                        return true;
                      }
                      if(!categoryCounts_.Equals(other.categoryCounts_)) return false;
                      return Equals(_unknownFields, other._unknownFields);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public override int GetHashCode() {
                      int hash = 1;
                      hash ^= categoryCounts_.GetHashCode();
                      if (_unknownFields != null) {
                        hash ^= _unknownFields.GetHashCode();
                      }
                      return hash;
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public override string ToString() {
                      return pb::JsonFormatter.ToDiagnosticString(this);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public void WriteTo(pb::CodedOutputStream output) {
                    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                      output.WriteRawMessage(this);
                    #else
                      categoryCounts_.WriteTo(output, _repeated_categoryCounts_codec);
                      if (_unknownFields != null) {
                        _unknownFields.WriteTo(output);
                      }
                    #endif
                    }

                    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
                      categoryCounts_.WriteTo(ref output, _repeated_categoryCounts_codec);
                      if (_unknownFields != null) {
                        _unknownFields.WriteTo(ref output);
                      }
                    }
                    #endif

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public int CalculateSize() {
                      int size = 0;
                      size += categoryCounts_.CalculateSize(_repeated_categoryCounts_codec);
                      if (_unknownFields != null) {
                        size += _unknownFields.CalculateSize();
                      }
                      return size;
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public void MergeFrom(CategoricalValue other) {
                      if (other == null) {
                        return;
                      }
                      categoryCounts_.Add(other.categoryCounts_);
                      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public void MergeFrom(pb::CodedInputStream input) {
                    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                      input.ReadRawMessage(this);
                    #else
                      uint tag;
                      while ((tag = input.ReadTag()) != 0) {
                        switch(tag) {
                          default:
                            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                            break;
                          case 10: {
                            categoryCounts_.AddEntriesFrom(input, _repeated_categoryCounts_codec);
                            break;
                          }
                        }
                      }
                    #endif
                    }

                    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
                      uint tag;
                      while ((tag = input.ReadTag()) != 0) {
                        switch(tag) {
                          default:
                            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                            break;
                          case 10: {
                            categoryCounts_.AddEntriesFrom(ref input, _repeated_categoryCounts_codec);
                            break;
                          }
                        }
                      }
                    }
                    #endif

                    #region Nested types
                    /// <summary>Container for nested types declared in the CategoricalValue message type.</summary>
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public static partial class Types {
                      /// <summary>
                      /// Represents the count of a single category within the cluster.
                      /// </summary>
                      public sealed partial class CategoryCount : pb::IMessage<CategoryCount>
                      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                          , pb::IBufferMessage
                      #endif
                      {
                        private static readonly pb::MessageParser<CategoryCount> _parser = new pb::MessageParser<CategoryCount>(() => new CategoryCount());
                        private pb::UnknownFieldSet _unknownFields;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pb::MessageParser<CategoryCount> Parser { get { return _parser; } }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pbr::MessageDescriptor Descriptor {
                          get { return global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics.Types.Cluster.Types.FeatureValue.Types.CategoricalValue.Descriptor.NestedTypes[0]; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        pbr::MessageDescriptor pb::IMessage.Descriptor {
                          get { return Descriptor; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CategoryCount() {
                          OnConstruction();
                        }

                        partial void OnConstruction();

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CategoryCount(CategoryCount other) : this() {
                          category_ = other.category_;
                          Count = other.Count;
                          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CategoryCount Clone() {
                          return new CategoryCount(this);
                        }

                        /// <summary>Field number for the "category" field.</summary>
                        public const int CategoryFieldNumber = 1;
                        private string category_ = "";
                        /// <summary>
                        /// The name of category.
                        /// </summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public string Category {
                          get { return category_; }
                          set {
                            category_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                          }
                        }

                        /// <summary>Field number for the "count" field.</summary>
                        public const int CountFieldNumber = 2;
                        private static readonly pb::FieldCodec<long?> _single_count_codec = pb::FieldCodec.ForStructWrapper<long>(18);
                        private long? count_;
                        /// <summary>
                        /// The count of training samples matching the category within the
                        /// cluster.
                        /// </summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public long? Count {
                          get { return count_; }
                          set {
                            count_ = value;
                          }
                        }


                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override bool Equals(object other) {
                          return Equals(other as CategoryCount);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool Equals(CategoryCount other) {
                          if (ReferenceEquals(other, null)) {
                            return false;
                          }
                          if (ReferenceEquals(other, this)) {
                            return true;
                          }
                          if (Category != other.Category) return false;
                          if (Count != other.Count) return false;
                          return Equals(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override int GetHashCode() {
                          int hash = 1;
                          if (Category.Length != 0) hash ^= Category.GetHashCode();
                          if (count_ != null) hash ^= Count.GetHashCode();
                          if (_unknownFields != null) {
                            hash ^= _unknownFields.GetHashCode();
                          }
                          return hash;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override string ToString() {
                          return pb::JsonFormatter.ToDiagnosticString(this);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void WriteTo(pb::CodedOutputStream output) {
                        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                          output.WriteRawMessage(this);
                        #else
                          if (Category.Length != 0) {
                            output.WriteRawTag(10);
                            output.WriteString(Category);
                          }
                          if (count_ != null) {
                            _single_count_codec.WriteTagAndValue(output, Count);
                          }
                          if (_unknownFields != null) {
                            _unknownFields.WriteTo(output);
                          }
                        #endif
                        }

                        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
                          if (Category.Length != 0) {
                            output.WriteRawTag(10);
                            output.WriteString(Category);
                          }
                          if (count_ != null) {
                            _single_count_codec.WriteTagAndValue(ref output, Count);
                          }
                          if (_unknownFields != null) {
                            _unknownFields.WriteTo(ref output);
                          }
                        }
                        #endif

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int CalculateSize() {
                          int size = 0;
                          if (Category.Length != 0) {
                            size += 1 + pb::CodedOutputStream.ComputeStringSize(Category);
                          }
                          if (count_ != null) {
                            size += _single_count_codec.CalculateSizeWithTag(Count);
                          }
                          if (_unknownFields != null) {
                            size += _unknownFields.CalculateSize();
                          }
                          return size;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(CategoryCount other) {
                          if (other == null) {
                            return;
                          }
                          if (other.Category.Length != 0) {
                            Category = other.Category;
                          }
                          if (other.count_ != null) {
                            if (count_ == null || other.Count != 0L) {
                              Count = other.Count;
                            }
                          }
                          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(pb::CodedInputStream input) {
                        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                          input.ReadRawMessage(this);
                        #else
                          uint tag;
                          while ((tag = input.ReadTag()) != 0) {
                            switch(tag) {
                              default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                              case 10: {
                                Category = input.ReadString();
                                break;
                              }
                              case 18: {
                                long? value = _single_count_codec.Read(input);
                                if (count_ == null || value != 0L) {
                                  Count = value;
                                }
                                break;
                              }
                            }
                          }
                        #endif
                        }

                        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
                          uint tag;
                          while ((tag = input.ReadTag()) != 0) {
                            switch(tag) {
                              default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                                break;
                              case 10: {
                                Category = input.ReadString();
                                break;
                              }
                              case 18: {
                                long? value = _single_count_codec.Read(ref input);
                                if (count_ == null || value != 0L) {
                                  Count = value;
                                }
                                break;
                              }
                            }
                          }
                        }
                        #endif

                      }

                    }
                    #endregion

                  }

                }
                #endregion

              }

            }
            #endregion

          }

        }
        #endregion

      }

      /// <summary>
      /// Evaluation metrics used by weighted-ALS models specified by
      /// feedback_type=implicit.
      /// </summary>
      public sealed partial class RankingMetrics : pb::IMessage<RankingMetrics>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<RankingMetrics> _parser = new pb::MessageParser<RankingMetrics>(() => new RankingMetrics());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RankingMetrics> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Bigquery.V2.Model.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RankingMetrics() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RankingMetrics(RankingMetrics other) : this() {
          MeanAveragePrecision = other.MeanAveragePrecision;
          MeanSquaredError = other.MeanSquaredError;
          NormalizedDiscountedCumulativeGain = other.NormalizedDiscountedCumulativeGain;
          AverageRank = other.AverageRank;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RankingMetrics Clone() {
          return new RankingMetrics(this);
        }

        /// <summary>Field number for the "mean_average_precision" field.</summary>
        public const int MeanAveragePrecisionFieldNumber = 1;
        private static readonly pb::FieldCodec<double?> _single_meanAveragePrecision_codec = pb::FieldCodec.ForStructWrapper<double>(10);
        private double? meanAveragePrecision_;
        /// <summary>
        /// Calculates a precision per user for all the items by ranking them and
        /// then averages all the precisions across all the users.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? MeanAveragePrecision {
          get { return meanAveragePrecision_; }
          set {
            meanAveragePrecision_ = value;
          }
        }


        /// <summary>Field number for the "mean_squared_error" field.</summary>
        public const int MeanSquaredErrorFieldNumber = 2;
        private static readonly pb::FieldCodec<double?> _single_meanSquaredError_codec = pb::FieldCodec.ForStructWrapper<double>(18);
        private double? meanSquaredError_;
        /// <summary>
        /// Similar to the mean squared error computed in regression and explicit
        /// recommendation models except instead of computing the rating directly,
        /// the output from evaluate is computed against a preference which is 1 or 0
        /// depending on if the rating exists or not.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? MeanSquaredError {
          get { return meanSquaredError_; }
          set {
            meanSquaredError_ = value;
          }
        }


        /// <summary>Field number for the "normalized_discounted_cumulative_gain" field.</summary>
        public const int NormalizedDiscountedCumulativeGainFieldNumber = 3;
        private static readonly pb::FieldCodec<double?> _single_normalizedDiscountedCumulativeGain_codec = pb::FieldCodec.ForStructWrapper<double>(26);
        private double? normalizedDiscountedCumulativeGain_;
        /// <summary>
        /// A metric to determine the goodness of a ranking calculated from the
        /// predicted confidence by comparing it to an ideal rank measured by the
        /// original ratings.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? NormalizedDiscountedCumulativeGain {
          get { return normalizedDiscountedCumulativeGain_; }
          set {
            normalizedDiscountedCumulativeGain_ = value;
          }
        }


        /// <summary>Field number for the "average_rank" field.</summary>
        public const int AverageRankFieldNumber = 4;
        private static readonly pb::FieldCodec<double?> _single_averageRank_codec = pb::FieldCodec.ForStructWrapper<double>(34);
        private double? averageRank_;
        /// <summary>
        /// Determines the goodness of a ranking by computing the percentile rank
        /// from the predicted confidence and dividing it by the original rank.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? AverageRank {
          get { return averageRank_; }
          set {
            averageRank_ = value;
          }
        }


        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RankingMetrics);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RankingMetrics other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(MeanAveragePrecision, other.MeanAveragePrecision)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(MeanSquaredError, other.MeanSquaredError)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(NormalizedDiscountedCumulativeGain, other.NormalizedDiscountedCumulativeGain)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AverageRank, other.AverageRank)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (meanAveragePrecision_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(MeanAveragePrecision);
          if (meanSquaredError_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(MeanSquaredError);
          if (normalizedDiscountedCumulativeGain_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(NormalizedDiscountedCumulativeGain);
          if (averageRank_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AverageRank);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (meanAveragePrecision_ != null) {
            _single_meanAveragePrecision_codec.WriteTagAndValue(output, MeanAveragePrecision);
          }
          if (meanSquaredError_ != null) {
            _single_meanSquaredError_codec.WriteTagAndValue(output, MeanSquaredError);
          }
          if (normalizedDiscountedCumulativeGain_ != null) {
            _single_normalizedDiscountedCumulativeGain_codec.WriteTagAndValue(output, NormalizedDiscountedCumulativeGain);
          }
          if (averageRank_ != null) {
            _single_averageRank_codec.WriteTagAndValue(output, AverageRank);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (meanAveragePrecision_ != null) {
            _single_meanAveragePrecision_codec.WriteTagAndValue(ref output, MeanAveragePrecision);
          }
          if (meanSquaredError_ != null) {
            _single_meanSquaredError_codec.WriteTagAndValue(ref output, MeanSquaredError);
          }
          if (normalizedDiscountedCumulativeGain_ != null) {
            _single_normalizedDiscountedCumulativeGain_codec.WriteTagAndValue(ref output, NormalizedDiscountedCumulativeGain);
          }
          if (averageRank_ != null) {
            _single_averageRank_codec.WriteTagAndValue(ref output, AverageRank);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (meanAveragePrecision_ != null) {
            size += _single_meanAveragePrecision_codec.CalculateSizeWithTag(MeanAveragePrecision);
          }
          if (meanSquaredError_ != null) {
            size += _single_meanSquaredError_codec.CalculateSizeWithTag(MeanSquaredError);
          }
          if (normalizedDiscountedCumulativeGain_ != null) {
            size += _single_normalizedDiscountedCumulativeGain_codec.CalculateSizeWithTag(NormalizedDiscountedCumulativeGain);
          }
          if (averageRank_ != null) {
            size += _single_averageRank_codec.CalculateSizeWithTag(AverageRank);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RankingMetrics other) {
          if (other == null) {
            return;
          }
          if (other.meanAveragePrecision_ != null) {
            if (meanAveragePrecision_ == null || other.MeanAveragePrecision != 0D) {
              MeanAveragePrecision = other.MeanAveragePrecision;
            }
          }
          if (other.meanSquaredError_ != null) {
            if (meanSquaredError_ == null || other.MeanSquaredError != 0D) {
              MeanSquaredError = other.MeanSquaredError;
            }
          }
          if (other.normalizedDiscountedCumulativeGain_ != null) {
            if (normalizedDiscountedCumulativeGain_ == null || other.NormalizedDiscountedCumulativeGain != 0D) {
              NormalizedDiscountedCumulativeGain = other.NormalizedDiscountedCumulativeGain;
            }
          }
          if (other.averageRank_ != null) {
            if (averageRank_ == null || other.AverageRank != 0D) {
              AverageRank = other.AverageRank;
            }
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                double? value = _single_meanAveragePrecision_codec.Read(input);
                if (meanAveragePrecision_ == null || value != 0D) {
                  MeanAveragePrecision = value;
                }
                break;
              }
              case 18: {
                double? value = _single_meanSquaredError_codec.Read(input);
                if (meanSquaredError_ == null || value != 0D) {
                  MeanSquaredError = value;
                }
                break;
              }
              case 26: {
                double? value = _single_normalizedDiscountedCumulativeGain_codec.Read(input);
                if (normalizedDiscountedCumulativeGain_ == null || value != 0D) {
                  NormalizedDiscountedCumulativeGain = value;
                }
                break;
              }
              case 34: {
                double? value = _single_averageRank_codec.Read(input);
                if (averageRank_ == null || value != 0D) {
                  AverageRank = value;
                }
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                double? value = _single_meanAveragePrecision_codec.Read(ref input);
                if (meanAveragePrecision_ == null || value != 0D) {
                  MeanAveragePrecision = value;
                }
                break;
              }
              case 18: {
                double? value = _single_meanSquaredError_codec.Read(ref input);
                if (meanSquaredError_ == null || value != 0D) {
                  MeanSquaredError = value;
                }
                break;
              }
              case 26: {
                double? value = _single_normalizedDiscountedCumulativeGain_codec.Read(ref input);
                if (normalizedDiscountedCumulativeGain_ == null || value != 0D) {
                  NormalizedDiscountedCumulativeGain = value;
                }
                break;
              }
              case 34: {
                double? value = _single_averageRank_codec.Read(ref input);
                if (averageRank_ == null || value != 0D) {
                  AverageRank = value;
                }
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Model evaluation metrics for ARIMA forecasting models.
      /// </summary>
      public sealed partial class ArimaForecastingMetrics : pb::IMessage<ArimaForecastingMetrics>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ArimaForecastingMetrics> _parser = new pb::MessageParser<ArimaForecastingMetrics>(() => new ArimaForecastingMetrics());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ArimaForecastingMetrics> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Bigquery.V2.Model.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ArimaForecastingMetrics() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ArimaForecastingMetrics(ArimaForecastingMetrics other) : this() {
          nonSeasonalOrder_ = other.nonSeasonalOrder_.Clone();
          arimaFittingMetrics_ = other.arimaFittingMetrics_.Clone();
          seasonalPeriods_ = other.seasonalPeriods_.Clone();
          hasDrift_ = other.hasDrift_.Clone();
          timeSeriesId_ = other.timeSeriesId_.Clone();
          arimaSingleModelForecastingMetrics_ = other.arimaSingleModelForecastingMetrics_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ArimaForecastingMetrics Clone() {
          return new ArimaForecastingMetrics(this);
        }

        /// <summary>Field number for the "non_seasonal_order" field.</summary>
        public const int NonSeasonalOrderFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Google.Cloud.Bigquery.V2.Model.Types.ArimaOrder> _repeated_nonSeasonalOrder_codec
            = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Bigquery.V2.Model.Types.ArimaOrder.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.ArimaOrder> nonSeasonalOrder_ = new pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.ArimaOrder>();
        /// <summary>
        /// Non-seasonal order.
        /// </summary>
        [global::System.ObsoleteAttribute]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.ArimaOrder> NonSeasonalOrder {
          get { return nonSeasonalOrder_; }
        }

        /// <summary>Field number for the "arima_fitting_metrics" field.</summary>
        public const int ArimaFittingMetricsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Google.Cloud.Bigquery.V2.Model.Types.ArimaFittingMetrics> _repeated_arimaFittingMetrics_codec
            = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Bigquery.V2.Model.Types.ArimaFittingMetrics.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.ArimaFittingMetrics> arimaFittingMetrics_ = new pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.ArimaFittingMetrics>();
        /// <summary>
        /// Arima model fitting metrics.
        /// </summary>
        [global::System.ObsoleteAttribute]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.ArimaFittingMetrics> ArimaFittingMetrics {
          get { return arimaFittingMetrics_; }
        }

        /// <summary>Field number for the "seasonal_periods" field.</summary>
        public const int SeasonalPeriodsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Google.Cloud.Bigquery.V2.Model.Types.SeasonalPeriod.Types.SeasonalPeriodType> _repeated_seasonalPeriods_codec
            = pb::FieldCodec.ForEnum(26, x => (int) x, x => (global::Google.Cloud.Bigquery.V2.Model.Types.SeasonalPeriod.Types.SeasonalPeriodType) x);
        private readonly pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.SeasonalPeriod.Types.SeasonalPeriodType> seasonalPeriods_ = new pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.SeasonalPeriod.Types.SeasonalPeriodType>();
        /// <summary>
        /// Seasonal periods. Repeated because multiple periods are supported for one
        /// time series.
        /// </summary>
        [global::System.ObsoleteAttribute]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.SeasonalPeriod.Types.SeasonalPeriodType> SeasonalPeriods {
          get { return seasonalPeriods_; }
        }

        /// <summary>Field number for the "has_drift" field.</summary>
        public const int HasDriftFieldNumber = 4;
        private static readonly pb::FieldCodec<bool> _repeated_hasDrift_codec
            = pb::FieldCodec.ForBool(34);
        private readonly pbc::RepeatedField<bool> hasDrift_ = new pbc::RepeatedField<bool>();
        /// <summary>
        /// Whether Arima model fitted with drift or not. It is always false when d
        /// is not 1.
        /// </summary>
        [global::System.ObsoleteAttribute]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<bool> HasDrift {
          get { return hasDrift_; }
        }

        /// <summary>Field number for the "time_series_id" field.</summary>
        public const int TimeSeriesIdFieldNumber = 5;
        private static readonly pb::FieldCodec<string> _repeated_timeSeriesId_codec
            = pb::FieldCodec.ForString(42);
        private readonly pbc::RepeatedField<string> timeSeriesId_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// Id to differentiate different time series for the large-scale case.
        /// </summary>
        [global::System.ObsoleteAttribute]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> TimeSeriesId {
          get { return timeSeriesId_; }
        }

        /// <summary>Field number for the "arima_single_model_forecasting_metrics" field.</summary>
        public const int ArimaSingleModelForecastingMetricsFieldNumber = 6;
        private static readonly pb::FieldCodec<global::Google.Cloud.Bigquery.V2.Model.Types.ArimaForecastingMetrics.Types.ArimaSingleModelForecastingMetrics> _repeated_arimaSingleModelForecastingMetrics_codec
            = pb::FieldCodec.ForMessage(50, global::Google.Cloud.Bigquery.V2.Model.Types.ArimaForecastingMetrics.Types.ArimaSingleModelForecastingMetrics.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.ArimaForecastingMetrics.Types.ArimaSingleModelForecastingMetrics> arimaSingleModelForecastingMetrics_ = new pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.ArimaForecastingMetrics.Types.ArimaSingleModelForecastingMetrics>();
        /// <summary>
        /// Repeated as there can be many metric sets (one for each model) in
        /// auto-arima and the large-scale case.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.ArimaForecastingMetrics.Types.ArimaSingleModelForecastingMetrics> ArimaSingleModelForecastingMetrics {
          get { return arimaSingleModelForecastingMetrics_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ArimaForecastingMetrics);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ArimaForecastingMetrics other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!nonSeasonalOrder_.Equals(other.nonSeasonalOrder_)) return false;
          if(!arimaFittingMetrics_.Equals(other.arimaFittingMetrics_)) return false;
          if(!seasonalPeriods_.Equals(other.seasonalPeriods_)) return false;
          if(!hasDrift_.Equals(other.hasDrift_)) return false;
          if(!timeSeriesId_.Equals(other.timeSeriesId_)) return false;
          if(!arimaSingleModelForecastingMetrics_.Equals(other.arimaSingleModelForecastingMetrics_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= nonSeasonalOrder_.GetHashCode();
          hash ^= arimaFittingMetrics_.GetHashCode();
          hash ^= seasonalPeriods_.GetHashCode();
          hash ^= hasDrift_.GetHashCode();
          hash ^= timeSeriesId_.GetHashCode();
          hash ^= arimaSingleModelForecastingMetrics_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          nonSeasonalOrder_.WriteTo(output, _repeated_nonSeasonalOrder_codec);
          arimaFittingMetrics_.WriteTo(output, _repeated_arimaFittingMetrics_codec);
          seasonalPeriods_.WriteTo(output, _repeated_seasonalPeriods_codec);
          hasDrift_.WriteTo(output, _repeated_hasDrift_codec);
          timeSeriesId_.WriteTo(output, _repeated_timeSeriesId_codec);
          arimaSingleModelForecastingMetrics_.WriteTo(output, _repeated_arimaSingleModelForecastingMetrics_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          nonSeasonalOrder_.WriteTo(ref output, _repeated_nonSeasonalOrder_codec);
          arimaFittingMetrics_.WriteTo(ref output, _repeated_arimaFittingMetrics_codec);
          seasonalPeriods_.WriteTo(ref output, _repeated_seasonalPeriods_codec);
          hasDrift_.WriteTo(ref output, _repeated_hasDrift_codec);
          timeSeriesId_.WriteTo(ref output, _repeated_timeSeriesId_codec);
          arimaSingleModelForecastingMetrics_.WriteTo(ref output, _repeated_arimaSingleModelForecastingMetrics_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += nonSeasonalOrder_.CalculateSize(_repeated_nonSeasonalOrder_codec);
          size += arimaFittingMetrics_.CalculateSize(_repeated_arimaFittingMetrics_codec);
          size += seasonalPeriods_.CalculateSize(_repeated_seasonalPeriods_codec);
          size += hasDrift_.CalculateSize(_repeated_hasDrift_codec);
          size += timeSeriesId_.CalculateSize(_repeated_timeSeriesId_codec);
          size += arimaSingleModelForecastingMetrics_.CalculateSize(_repeated_arimaSingleModelForecastingMetrics_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ArimaForecastingMetrics other) {
          if (other == null) {
            return;
          }
          nonSeasonalOrder_.Add(other.nonSeasonalOrder_);
          arimaFittingMetrics_.Add(other.arimaFittingMetrics_);
          seasonalPeriods_.Add(other.seasonalPeriods_);
          hasDrift_.Add(other.hasDrift_);
          timeSeriesId_.Add(other.timeSeriesId_);
          arimaSingleModelForecastingMetrics_.Add(other.arimaSingleModelForecastingMetrics_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                nonSeasonalOrder_.AddEntriesFrom(input, _repeated_nonSeasonalOrder_codec);
                break;
              }
              case 18: {
                arimaFittingMetrics_.AddEntriesFrom(input, _repeated_arimaFittingMetrics_codec);
                break;
              }
              case 26:
              case 24: {
                seasonalPeriods_.AddEntriesFrom(input, _repeated_seasonalPeriods_codec);
                break;
              }
              case 34:
              case 32: {
                hasDrift_.AddEntriesFrom(input, _repeated_hasDrift_codec);
                break;
              }
              case 42: {
                timeSeriesId_.AddEntriesFrom(input, _repeated_timeSeriesId_codec);
                break;
              }
              case 50: {
                arimaSingleModelForecastingMetrics_.AddEntriesFrom(input, _repeated_arimaSingleModelForecastingMetrics_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                nonSeasonalOrder_.AddEntriesFrom(ref input, _repeated_nonSeasonalOrder_codec);
                break;
              }
              case 18: {
                arimaFittingMetrics_.AddEntriesFrom(ref input, _repeated_arimaFittingMetrics_codec);
                break;
              }
              case 26:
              case 24: {
                seasonalPeriods_.AddEntriesFrom(ref input, _repeated_seasonalPeriods_codec);
                break;
              }
              case 34:
              case 32: {
                hasDrift_.AddEntriesFrom(ref input, _repeated_hasDrift_codec);
                break;
              }
              case 42: {
                timeSeriesId_.AddEntriesFrom(ref input, _repeated_timeSeriesId_codec);
                break;
              }
              case 50: {
                arimaSingleModelForecastingMetrics_.AddEntriesFrom(ref input, _repeated_arimaSingleModelForecastingMetrics_codec);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the ArimaForecastingMetrics message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Model evaluation metrics for a single ARIMA forecasting model.
          /// </summary>
          public sealed partial class ArimaSingleModelForecastingMetrics : pb::IMessage<ArimaSingleModelForecastingMetrics>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<ArimaSingleModelForecastingMetrics> _parser = new pb::MessageParser<ArimaSingleModelForecastingMetrics>(() => new ArimaSingleModelForecastingMetrics());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<ArimaSingleModelForecastingMetrics> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Google.Cloud.Bigquery.V2.Model.Types.ArimaForecastingMetrics.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ArimaSingleModelForecastingMetrics() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ArimaSingleModelForecastingMetrics(ArimaSingleModelForecastingMetrics other) : this() {
              nonSeasonalOrder_ = other.nonSeasonalOrder_ != null ? other.nonSeasonalOrder_.Clone() : null;
              arimaFittingMetrics_ = other.arimaFittingMetrics_ != null ? other.arimaFittingMetrics_.Clone() : null;
              hasDrift_ = other.hasDrift_;
              timeSeriesId_ = other.timeSeriesId_;
              timeSeriesIds_ = other.timeSeriesIds_.Clone();
              seasonalPeriods_ = other.seasonalPeriods_.Clone();
              HasHolidayEffect = other.HasHolidayEffect;
              HasSpikesAndDips = other.HasSpikesAndDips;
              HasStepChanges = other.HasStepChanges;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ArimaSingleModelForecastingMetrics Clone() {
              return new ArimaSingleModelForecastingMetrics(this);
            }

            /// <summary>Field number for the "non_seasonal_order" field.</summary>
            public const int NonSeasonalOrderFieldNumber = 1;
            private global::Google.Cloud.Bigquery.V2.Model.Types.ArimaOrder nonSeasonalOrder_;
            /// <summary>
            /// Non-seasonal order.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Google.Cloud.Bigquery.V2.Model.Types.ArimaOrder NonSeasonalOrder {
              get { return nonSeasonalOrder_; }
              set {
                nonSeasonalOrder_ = value;
              }
            }

            /// <summary>Field number for the "arima_fitting_metrics" field.</summary>
            public const int ArimaFittingMetricsFieldNumber = 2;
            private global::Google.Cloud.Bigquery.V2.Model.Types.ArimaFittingMetrics arimaFittingMetrics_;
            /// <summary>
            /// Arima fitting metrics.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Google.Cloud.Bigquery.V2.Model.Types.ArimaFittingMetrics ArimaFittingMetrics {
              get { return arimaFittingMetrics_; }
              set {
                arimaFittingMetrics_ = value;
              }
            }

            /// <summary>Field number for the "has_drift" field.</summary>
            public const int HasDriftFieldNumber = 3;
            private bool hasDrift_;
            /// <summary>
            /// Is arima model fitted with drift or not. It is always false when d
            /// is not 1.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasDrift {
              get { return hasDrift_; }
              set {
                hasDrift_ = value;
              }
            }

            /// <summary>Field number for the "time_series_id" field.</summary>
            public const int TimeSeriesIdFieldNumber = 4;
            private string timeSeriesId_ = "";
            /// <summary>
            /// The time_series_id value for this time series. It will be one of
            /// the unique values from the time_series_id_column specified during
            /// ARIMA model training. Only present when time_series_id_column
            /// training option was used.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string TimeSeriesId {
              get { return timeSeriesId_; }
              set {
                timeSeriesId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "time_series_ids" field.</summary>
            public const int TimeSeriesIdsFieldNumber = 9;
            private static readonly pb::FieldCodec<string> _repeated_timeSeriesIds_codec
                = pb::FieldCodec.ForString(74);
            private readonly pbc::RepeatedField<string> timeSeriesIds_ = new pbc::RepeatedField<string>();
            /// <summary>
            /// The tuple of time_series_ids identifying this time series. It will
            /// be one of the unique tuples of values present in the
            /// time_series_id_columns specified during ARIMA model training. Only
            /// present when time_series_id_columns training option was used and
            /// the order of values here are same as the order of
            /// time_series_id_columns.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<string> TimeSeriesIds {
              get { return timeSeriesIds_; }
            }

            /// <summary>Field number for the "seasonal_periods" field.</summary>
            public const int SeasonalPeriodsFieldNumber = 5;
            private static readonly pb::FieldCodec<global::Google.Cloud.Bigquery.V2.Model.Types.SeasonalPeriod.Types.SeasonalPeriodType> _repeated_seasonalPeriods_codec
                = pb::FieldCodec.ForEnum(42, x => (int) x, x => (global::Google.Cloud.Bigquery.V2.Model.Types.SeasonalPeriod.Types.SeasonalPeriodType) x);
            private readonly pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.SeasonalPeriod.Types.SeasonalPeriodType> seasonalPeriods_ = new pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.SeasonalPeriod.Types.SeasonalPeriodType>();
            /// <summary>
            /// Seasonal periods. Repeated because multiple periods are supported
            /// for one time series.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.SeasonalPeriod.Types.SeasonalPeriodType> SeasonalPeriods {
              get { return seasonalPeriods_; }
            }

            /// <summary>Field number for the "has_holiday_effect" field.</summary>
            public const int HasHolidayEffectFieldNumber = 6;
            private static readonly pb::FieldCodec<bool?> _single_hasHolidayEffect_codec = pb::FieldCodec.ForStructWrapper<bool>(50);
            private bool? hasHolidayEffect_;
            /// <summary>
            /// If true, holiday_effect is a part of time series decomposition result.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool? HasHolidayEffect {
              get { return hasHolidayEffect_; }
              set {
                hasHolidayEffect_ = value;
              }
            }


            /// <summary>Field number for the "has_spikes_and_dips" field.</summary>
            public const int HasSpikesAndDipsFieldNumber = 7;
            private static readonly pb::FieldCodec<bool?> _single_hasSpikesAndDips_codec = pb::FieldCodec.ForStructWrapper<bool>(58);
            private bool? hasSpikesAndDips_;
            /// <summary>
            /// If true, spikes_and_dips is a part of time series decomposition result.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool? HasSpikesAndDips {
              get { return hasSpikesAndDips_; }
              set {
                hasSpikesAndDips_ = value;
              }
            }


            /// <summary>Field number for the "has_step_changes" field.</summary>
            public const int HasStepChangesFieldNumber = 8;
            private static readonly pb::FieldCodec<bool?> _single_hasStepChanges_codec = pb::FieldCodec.ForStructWrapper<bool>(66);
            private bool? hasStepChanges_;
            /// <summary>
            /// If true, step_changes is a part of time series decomposition result.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool? HasStepChanges {
              get { return hasStepChanges_; }
              set {
                hasStepChanges_ = value;
              }
            }


            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as ArimaSingleModelForecastingMetrics);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(ArimaSingleModelForecastingMetrics other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(NonSeasonalOrder, other.NonSeasonalOrder)) return false;
              if (!object.Equals(ArimaFittingMetrics, other.ArimaFittingMetrics)) return false;
              if (HasDrift != other.HasDrift) return false;
              if (TimeSeriesId != other.TimeSeriesId) return false;
              if(!timeSeriesIds_.Equals(other.timeSeriesIds_)) return false;
              if(!seasonalPeriods_.Equals(other.seasonalPeriods_)) return false;
              if (HasHolidayEffect != other.HasHolidayEffect) return false;
              if (HasSpikesAndDips != other.HasSpikesAndDips) return false;
              if (HasStepChanges != other.HasStepChanges) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (nonSeasonalOrder_ != null) hash ^= NonSeasonalOrder.GetHashCode();
              if (arimaFittingMetrics_ != null) hash ^= ArimaFittingMetrics.GetHashCode();
              if (HasDrift != false) hash ^= HasDrift.GetHashCode();
              if (TimeSeriesId.Length != 0) hash ^= TimeSeriesId.GetHashCode();
              hash ^= timeSeriesIds_.GetHashCode();
              hash ^= seasonalPeriods_.GetHashCode();
              if (hasHolidayEffect_ != null) hash ^= HasHolidayEffect.GetHashCode();
              if (hasSpikesAndDips_ != null) hash ^= HasSpikesAndDips.GetHashCode();
              if (hasStepChanges_ != null) hash ^= HasStepChanges.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (nonSeasonalOrder_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(NonSeasonalOrder);
              }
              if (arimaFittingMetrics_ != null) {
                output.WriteRawTag(18);
                output.WriteMessage(ArimaFittingMetrics);
              }
              if (HasDrift != false) {
                output.WriteRawTag(24);
                output.WriteBool(HasDrift);
              }
              if (TimeSeriesId.Length != 0) {
                output.WriteRawTag(34);
                output.WriteString(TimeSeriesId);
              }
              seasonalPeriods_.WriteTo(output, _repeated_seasonalPeriods_codec);
              if (hasHolidayEffect_ != null) {
                _single_hasHolidayEffect_codec.WriteTagAndValue(output, HasHolidayEffect);
              }
              if (hasSpikesAndDips_ != null) {
                _single_hasSpikesAndDips_codec.WriteTagAndValue(output, HasSpikesAndDips);
              }
              if (hasStepChanges_ != null) {
                _single_hasStepChanges_codec.WriteTagAndValue(output, HasStepChanges);
              }
              timeSeriesIds_.WriteTo(output, _repeated_timeSeriesIds_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (nonSeasonalOrder_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(NonSeasonalOrder);
              }
              if (arimaFittingMetrics_ != null) {
                output.WriteRawTag(18);
                output.WriteMessage(ArimaFittingMetrics);
              }
              if (HasDrift != false) {
                output.WriteRawTag(24);
                output.WriteBool(HasDrift);
              }
              if (TimeSeriesId.Length != 0) {
                output.WriteRawTag(34);
                output.WriteString(TimeSeriesId);
              }
              seasonalPeriods_.WriteTo(ref output, _repeated_seasonalPeriods_codec);
              if (hasHolidayEffect_ != null) {
                _single_hasHolidayEffect_codec.WriteTagAndValue(ref output, HasHolidayEffect);
              }
              if (hasSpikesAndDips_ != null) {
                _single_hasSpikesAndDips_codec.WriteTagAndValue(ref output, HasSpikesAndDips);
              }
              if (hasStepChanges_ != null) {
                _single_hasStepChanges_codec.WriteTagAndValue(ref output, HasStepChanges);
              }
              timeSeriesIds_.WriteTo(ref output, _repeated_timeSeriesIds_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (nonSeasonalOrder_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(NonSeasonalOrder);
              }
              if (arimaFittingMetrics_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArimaFittingMetrics);
              }
              if (HasDrift != false) {
                size += 1 + 1;
              }
              if (TimeSeriesId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(TimeSeriesId);
              }
              size += timeSeriesIds_.CalculateSize(_repeated_timeSeriesIds_codec);
              size += seasonalPeriods_.CalculateSize(_repeated_seasonalPeriods_codec);
              if (hasHolidayEffect_ != null) {
                size += _single_hasHolidayEffect_codec.CalculateSizeWithTag(HasHolidayEffect);
              }
              if (hasSpikesAndDips_ != null) {
                size += _single_hasSpikesAndDips_codec.CalculateSizeWithTag(HasSpikesAndDips);
              }
              if (hasStepChanges_ != null) {
                size += _single_hasStepChanges_codec.CalculateSizeWithTag(HasStepChanges);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(ArimaSingleModelForecastingMetrics other) {
              if (other == null) {
                return;
              }
              if (other.nonSeasonalOrder_ != null) {
                if (nonSeasonalOrder_ == null) {
                  NonSeasonalOrder = new global::Google.Cloud.Bigquery.V2.Model.Types.ArimaOrder();
                }
                NonSeasonalOrder.MergeFrom(other.NonSeasonalOrder);
              }
              if (other.arimaFittingMetrics_ != null) {
                if (arimaFittingMetrics_ == null) {
                  ArimaFittingMetrics = new global::Google.Cloud.Bigquery.V2.Model.Types.ArimaFittingMetrics();
                }
                ArimaFittingMetrics.MergeFrom(other.ArimaFittingMetrics);
              }
              if (other.HasDrift != false) {
                HasDrift = other.HasDrift;
              }
              if (other.TimeSeriesId.Length != 0) {
                TimeSeriesId = other.TimeSeriesId;
              }
              timeSeriesIds_.Add(other.timeSeriesIds_);
              seasonalPeriods_.Add(other.seasonalPeriods_);
              if (other.hasHolidayEffect_ != null) {
                if (hasHolidayEffect_ == null || other.HasHolidayEffect != false) {
                  HasHolidayEffect = other.HasHolidayEffect;
                }
              }
              if (other.hasSpikesAndDips_ != null) {
                if (hasSpikesAndDips_ == null || other.HasSpikesAndDips != false) {
                  HasSpikesAndDips = other.HasSpikesAndDips;
                }
              }
              if (other.hasStepChanges_ != null) {
                if (hasStepChanges_ == null || other.HasStepChanges != false) {
                  HasStepChanges = other.HasStepChanges;
                }
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (nonSeasonalOrder_ == null) {
                      NonSeasonalOrder = new global::Google.Cloud.Bigquery.V2.Model.Types.ArimaOrder();
                    }
                    input.ReadMessage(NonSeasonalOrder);
                    break;
                  }
                  case 18: {
                    if (arimaFittingMetrics_ == null) {
                      ArimaFittingMetrics = new global::Google.Cloud.Bigquery.V2.Model.Types.ArimaFittingMetrics();
                    }
                    input.ReadMessage(ArimaFittingMetrics);
                    break;
                  }
                  case 24: {
                    HasDrift = input.ReadBool();
                    break;
                  }
                  case 34: {
                    TimeSeriesId = input.ReadString();
                    break;
                  }
                  case 42:
                  case 40: {
                    seasonalPeriods_.AddEntriesFrom(input, _repeated_seasonalPeriods_codec);
                    break;
                  }
                  case 50: {
                    bool? value = _single_hasHolidayEffect_codec.Read(input);
                    if (hasHolidayEffect_ == null || value != false) {
                      HasHolidayEffect = value;
                    }
                    break;
                  }
                  case 58: {
                    bool? value = _single_hasSpikesAndDips_codec.Read(input);
                    if (hasSpikesAndDips_ == null || value != false) {
                      HasSpikesAndDips = value;
                    }
                    break;
                  }
                  case 66: {
                    bool? value = _single_hasStepChanges_codec.Read(input);
                    if (hasStepChanges_ == null || value != false) {
                      HasStepChanges = value;
                    }
                    break;
                  }
                  case 74: {
                    timeSeriesIds_.AddEntriesFrom(input, _repeated_timeSeriesIds_codec);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    if (nonSeasonalOrder_ == null) {
                      NonSeasonalOrder = new global::Google.Cloud.Bigquery.V2.Model.Types.ArimaOrder();
                    }
                    input.ReadMessage(NonSeasonalOrder);
                    break;
                  }
                  case 18: {
                    if (arimaFittingMetrics_ == null) {
                      ArimaFittingMetrics = new global::Google.Cloud.Bigquery.V2.Model.Types.ArimaFittingMetrics();
                    }
                    input.ReadMessage(ArimaFittingMetrics);
                    break;
                  }
                  case 24: {
                    HasDrift = input.ReadBool();
                    break;
                  }
                  case 34: {
                    TimeSeriesId = input.ReadString();
                    break;
                  }
                  case 42:
                  case 40: {
                    seasonalPeriods_.AddEntriesFrom(ref input, _repeated_seasonalPeriods_codec);
                    break;
                  }
                  case 50: {
                    bool? value = _single_hasHolidayEffect_codec.Read(ref input);
                    if (hasHolidayEffect_ == null || value != false) {
                      HasHolidayEffect = value;
                    }
                    break;
                  }
                  case 58: {
                    bool? value = _single_hasSpikesAndDips_codec.Read(ref input);
                    if (hasSpikesAndDips_ == null || value != false) {
                      HasSpikesAndDips = value;
                    }
                    break;
                  }
                  case 66: {
                    bool? value = _single_hasStepChanges_codec.Read(ref input);
                    if (hasStepChanges_ == null || value != false) {
                      HasStepChanges = value;
                    }
                    break;
                  }
                  case 74: {
                    timeSeriesIds_.AddEntriesFrom(ref input, _repeated_timeSeriesIds_codec);
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

      /// <summary>
      /// Evaluation metrics of a model. These are either computed on all training
      /// data or just the eval data based on whether eval data was used during
      /// training. These are not present for imported models.
      /// </summary>
      public sealed partial class EvaluationMetrics : pb::IMessage<EvaluationMetrics>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<EvaluationMetrics> _parser = new pb::MessageParser<EvaluationMetrics>(() => new EvaluationMetrics());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EvaluationMetrics> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Bigquery.V2.Model.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EvaluationMetrics() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EvaluationMetrics(EvaluationMetrics other) : this() {
          switch (other.MetricsCase) {
            case MetricsOneofCase.RegressionMetrics:
              RegressionMetrics = other.RegressionMetrics.Clone();
              break;
            case MetricsOneofCase.BinaryClassificationMetrics:
              BinaryClassificationMetrics = other.BinaryClassificationMetrics.Clone();
              break;
            case MetricsOneofCase.MultiClassClassificationMetrics:
              MultiClassClassificationMetrics = other.MultiClassClassificationMetrics.Clone();
              break;
            case MetricsOneofCase.ClusteringMetrics:
              ClusteringMetrics = other.ClusteringMetrics.Clone();
              break;
            case MetricsOneofCase.RankingMetrics:
              RankingMetrics = other.RankingMetrics.Clone();
              break;
            case MetricsOneofCase.ArimaForecastingMetrics:
              ArimaForecastingMetrics = other.ArimaForecastingMetrics.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EvaluationMetrics Clone() {
          return new EvaluationMetrics(this);
        }

        /// <summary>Field number for the "regression_metrics" field.</summary>
        public const int RegressionMetricsFieldNumber = 1;
        /// <summary>
        /// Populated for regression models and explicit feedback type matrix
        /// factorization models.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Bigquery.V2.Model.Types.RegressionMetrics RegressionMetrics {
          get { return metricsCase_ == MetricsOneofCase.RegressionMetrics ? (global::Google.Cloud.Bigquery.V2.Model.Types.RegressionMetrics) metrics_ : null; }
          set {
            metrics_ = value;
            metricsCase_ = value == null ? MetricsOneofCase.None : MetricsOneofCase.RegressionMetrics;
          }
        }

        /// <summary>Field number for the "binary_classification_metrics" field.</summary>
        public const int BinaryClassificationMetricsFieldNumber = 2;
        /// <summary>
        /// Populated for binary classification/classifier models.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Bigquery.V2.Model.Types.BinaryClassificationMetrics BinaryClassificationMetrics {
          get { return metricsCase_ == MetricsOneofCase.BinaryClassificationMetrics ? (global::Google.Cloud.Bigquery.V2.Model.Types.BinaryClassificationMetrics) metrics_ : null; }
          set {
            metrics_ = value;
            metricsCase_ = value == null ? MetricsOneofCase.None : MetricsOneofCase.BinaryClassificationMetrics;
          }
        }

        /// <summary>Field number for the "multi_class_classification_metrics" field.</summary>
        public const int MultiClassClassificationMetricsFieldNumber = 3;
        /// <summary>
        /// Populated for multi-class classification/classifier models.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics MultiClassClassificationMetrics {
          get { return metricsCase_ == MetricsOneofCase.MultiClassClassificationMetrics ? (global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics) metrics_ : null; }
          set {
            metrics_ = value;
            metricsCase_ = value == null ? MetricsOneofCase.None : MetricsOneofCase.MultiClassClassificationMetrics;
          }
        }

        /// <summary>Field number for the "clustering_metrics" field.</summary>
        public const int ClusteringMetricsFieldNumber = 4;
        /// <summary>
        /// Populated for clustering models.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics ClusteringMetrics {
          get { return metricsCase_ == MetricsOneofCase.ClusteringMetrics ? (global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics) metrics_ : null; }
          set {
            metrics_ = value;
            metricsCase_ = value == null ? MetricsOneofCase.None : MetricsOneofCase.ClusteringMetrics;
          }
        }

        /// <summary>Field number for the "ranking_metrics" field.</summary>
        public const int RankingMetricsFieldNumber = 5;
        /// <summary>
        /// Populated for implicit feedback type matrix factorization models.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Bigquery.V2.Model.Types.RankingMetrics RankingMetrics {
          get { return metricsCase_ == MetricsOneofCase.RankingMetrics ? (global::Google.Cloud.Bigquery.V2.Model.Types.RankingMetrics) metrics_ : null; }
          set {
            metrics_ = value;
            metricsCase_ = value == null ? MetricsOneofCase.None : MetricsOneofCase.RankingMetrics;
          }
        }

        /// <summary>Field number for the "arima_forecasting_metrics" field.</summary>
        public const int ArimaForecastingMetricsFieldNumber = 6;
        /// <summary>
        /// Populated for ARIMA models.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Bigquery.V2.Model.Types.ArimaForecastingMetrics ArimaForecastingMetrics {
          get { return metricsCase_ == MetricsOneofCase.ArimaForecastingMetrics ? (global::Google.Cloud.Bigquery.V2.Model.Types.ArimaForecastingMetrics) metrics_ : null; }
          set {
            metrics_ = value;
            metricsCase_ = value == null ? MetricsOneofCase.None : MetricsOneofCase.ArimaForecastingMetrics;
          }
        }

        private object metrics_;
        /// <summary>Enum of possible cases for the "metrics" oneof.</summary>
        public enum MetricsOneofCase {
          None = 0,
          RegressionMetrics = 1,
          BinaryClassificationMetrics = 2,
          MultiClassClassificationMetrics = 3,
          ClusteringMetrics = 4,
          RankingMetrics = 5,
          ArimaForecastingMetrics = 6,
        }
        private MetricsOneofCase metricsCase_ = MetricsOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MetricsOneofCase MetricsCase {
          get { return metricsCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMetrics() {
          metricsCase_ = MetricsOneofCase.None;
          metrics_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EvaluationMetrics);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EvaluationMetrics other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(RegressionMetrics, other.RegressionMetrics)) return false;
          if (!object.Equals(BinaryClassificationMetrics, other.BinaryClassificationMetrics)) return false;
          if (!object.Equals(MultiClassClassificationMetrics, other.MultiClassClassificationMetrics)) return false;
          if (!object.Equals(ClusteringMetrics, other.ClusteringMetrics)) return false;
          if (!object.Equals(RankingMetrics, other.RankingMetrics)) return false;
          if (!object.Equals(ArimaForecastingMetrics, other.ArimaForecastingMetrics)) return false;
          if (MetricsCase != other.MetricsCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (metricsCase_ == MetricsOneofCase.RegressionMetrics) hash ^= RegressionMetrics.GetHashCode();
          if (metricsCase_ == MetricsOneofCase.BinaryClassificationMetrics) hash ^= BinaryClassificationMetrics.GetHashCode();
          if (metricsCase_ == MetricsOneofCase.MultiClassClassificationMetrics) hash ^= MultiClassClassificationMetrics.GetHashCode();
          if (metricsCase_ == MetricsOneofCase.ClusteringMetrics) hash ^= ClusteringMetrics.GetHashCode();
          if (metricsCase_ == MetricsOneofCase.RankingMetrics) hash ^= RankingMetrics.GetHashCode();
          if (metricsCase_ == MetricsOneofCase.ArimaForecastingMetrics) hash ^= ArimaForecastingMetrics.GetHashCode();
          hash ^= (int) metricsCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (metricsCase_ == MetricsOneofCase.RegressionMetrics) {
            output.WriteRawTag(10);
            output.WriteMessage(RegressionMetrics);
          }
          if (metricsCase_ == MetricsOneofCase.BinaryClassificationMetrics) {
            output.WriteRawTag(18);
            output.WriteMessage(BinaryClassificationMetrics);
          }
          if (metricsCase_ == MetricsOneofCase.MultiClassClassificationMetrics) {
            output.WriteRawTag(26);
            output.WriteMessage(MultiClassClassificationMetrics);
          }
          if (metricsCase_ == MetricsOneofCase.ClusteringMetrics) {
            output.WriteRawTag(34);
            output.WriteMessage(ClusteringMetrics);
          }
          if (metricsCase_ == MetricsOneofCase.RankingMetrics) {
            output.WriteRawTag(42);
            output.WriteMessage(RankingMetrics);
          }
          if (metricsCase_ == MetricsOneofCase.ArimaForecastingMetrics) {
            output.WriteRawTag(50);
            output.WriteMessage(ArimaForecastingMetrics);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (metricsCase_ == MetricsOneofCase.RegressionMetrics) {
            output.WriteRawTag(10);
            output.WriteMessage(RegressionMetrics);
          }
          if (metricsCase_ == MetricsOneofCase.BinaryClassificationMetrics) {
            output.WriteRawTag(18);
            output.WriteMessage(BinaryClassificationMetrics);
          }
          if (metricsCase_ == MetricsOneofCase.MultiClassClassificationMetrics) {
            output.WriteRawTag(26);
            output.WriteMessage(MultiClassClassificationMetrics);
          }
          if (metricsCase_ == MetricsOneofCase.ClusteringMetrics) {
            output.WriteRawTag(34);
            output.WriteMessage(ClusteringMetrics);
          }
          if (metricsCase_ == MetricsOneofCase.RankingMetrics) {
            output.WriteRawTag(42);
            output.WriteMessage(RankingMetrics);
          }
          if (metricsCase_ == MetricsOneofCase.ArimaForecastingMetrics) {
            output.WriteRawTag(50);
            output.WriteMessage(ArimaForecastingMetrics);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (metricsCase_ == MetricsOneofCase.RegressionMetrics) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegressionMetrics);
          }
          if (metricsCase_ == MetricsOneofCase.BinaryClassificationMetrics) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(BinaryClassificationMetrics);
          }
          if (metricsCase_ == MetricsOneofCase.MultiClassClassificationMetrics) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MultiClassClassificationMetrics);
          }
          if (metricsCase_ == MetricsOneofCase.ClusteringMetrics) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClusteringMetrics);
          }
          if (metricsCase_ == MetricsOneofCase.RankingMetrics) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RankingMetrics);
          }
          if (metricsCase_ == MetricsOneofCase.ArimaForecastingMetrics) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArimaForecastingMetrics);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EvaluationMetrics other) {
          if (other == null) {
            return;
          }
          switch (other.MetricsCase) {
            case MetricsOneofCase.RegressionMetrics:
              if (RegressionMetrics == null) {
                RegressionMetrics = new global::Google.Cloud.Bigquery.V2.Model.Types.RegressionMetrics();
              }
              RegressionMetrics.MergeFrom(other.RegressionMetrics);
              break;
            case MetricsOneofCase.BinaryClassificationMetrics:
              if (BinaryClassificationMetrics == null) {
                BinaryClassificationMetrics = new global::Google.Cloud.Bigquery.V2.Model.Types.BinaryClassificationMetrics();
              }
              BinaryClassificationMetrics.MergeFrom(other.BinaryClassificationMetrics);
              break;
            case MetricsOneofCase.MultiClassClassificationMetrics:
              if (MultiClassClassificationMetrics == null) {
                MultiClassClassificationMetrics = new global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics();
              }
              MultiClassClassificationMetrics.MergeFrom(other.MultiClassClassificationMetrics);
              break;
            case MetricsOneofCase.ClusteringMetrics:
              if (ClusteringMetrics == null) {
                ClusteringMetrics = new global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics();
              }
              ClusteringMetrics.MergeFrom(other.ClusteringMetrics);
              break;
            case MetricsOneofCase.RankingMetrics:
              if (RankingMetrics == null) {
                RankingMetrics = new global::Google.Cloud.Bigquery.V2.Model.Types.RankingMetrics();
              }
              RankingMetrics.MergeFrom(other.RankingMetrics);
              break;
            case MetricsOneofCase.ArimaForecastingMetrics:
              if (ArimaForecastingMetrics == null) {
                ArimaForecastingMetrics = new global::Google.Cloud.Bigquery.V2.Model.Types.ArimaForecastingMetrics();
              }
              ArimaForecastingMetrics.MergeFrom(other.ArimaForecastingMetrics);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::Google.Cloud.Bigquery.V2.Model.Types.RegressionMetrics subBuilder = new global::Google.Cloud.Bigquery.V2.Model.Types.RegressionMetrics();
                if (metricsCase_ == MetricsOneofCase.RegressionMetrics) {
                  subBuilder.MergeFrom(RegressionMetrics);
                }
                input.ReadMessage(subBuilder);
                RegressionMetrics = subBuilder;
                break;
              }
              case 18: {
                global::Google.Cloud.Bigquery.V2.Model.Types.BinaryClassificationMetrics subBuilder = new global::Google.Cloud.Bigquery.V2.Model.Types.BinaryClassificationMetrics();
                if (metricsCase_ == MetricsOneofCase.BinaryClassificationMetrics) {
                  subBuilder.MergeFrom(BinaryClassificationMetrics);
                }
                input.ReadMessage(subBuilder);
                BinaryClassificationMetrics = subBuilder;
                break;
              }
              case 26: {
                global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics subBuilder = new global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics();
                if (metricsCase_ == MetricsOneofCase.MultiClassClassificationMetrics) {
                  subBuilder.MergeFrom(MultiClassClassificationMetrics);
                }
                input.ReadMessage(subBuilder);
                MultiClassClassificationMetrics = subBuilder;
                break;
              }
              case 34: {
                global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics subBuilder = new global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics();
                if (metricsCase_ == MetricsOneofCase.ClusteringMetrics) {
                  subBuilder.MergeFrom(ClusteringMetrics);
                }
                input.ReadMessage(subBuilder);
                ClusteringMetrics = subBuilder;
                break;
              }
              case 42: {
                global::Google.Cloud.Bigquery.V2.Model.Types.RankingMetrics subBuilder = new global::Google.Cloud.Bigquery.V2.Model.Types.RankingMetrics();
                if (metricsCase_ == MetricsOneofCase.RankingMetrics) {
                  subBuilder.MergeFrom(RankingMetrics);
                }
                input.ReadMessage(subBuilder);
                RankingMetrics = subBuilder;
                break;
              }
              case 50: {
                global::Google.Cloud.Bigquery.V2.Model.Types.ArimaForecastingMetrics subBuilder = new global::Google.Cloud.Bigquery.V2.Model.Types.ArimaForecastingMetrics();
                if (metricsCase_ == MetricsOneofCase.ArimaForecastingMetrics) {
                  subBuilder.MergeFrom(ArimaForecastingMetrics);
                }
                input.ReadMessage(subBuilder);
                ArimaForecastingMetrics = subBuilder;
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                global::Google.Cloud.Bigquery.V2.Model.Types.RegressionMetrics subBuilder = new global::Google.Cloud.Bigquery.V2.Model.Types.RegressionMetrics();
                if (metricsCase_ == MetricsOneofCase.RegressionMetrics) {
                  subBuilder.MergeFrom(RegressionMetrics);
                }
                input.ReadMessage(subBuilder);
                RegressionMetrics = subBuilder;
                break;
              }
              case 18: {
                global::Google.Cloud.Bigquery.V2.Model.Types.BinaryClassificationMetrics subBuilder = new global::Google.Cloud.Bigquery.V2.Model.Types.BinaryClassificationMetrics();
                if (metricsCase_ == MetricsOneofCase.BinaryClassificationMetrics) {
                  subBuilder.MergeFrom(BinaryClassificationMetrics);
                }
                input.ReadMessage(subBuilder);
                BinaryClassificationMetrics = subBuilder;
                break;
              }
              case 26: {
                global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics subBuilder = new global::Google.Cloud.Bigquery.V2.Model.Types.MultiClassClassificationMetrics();
                if (metricsCase_ == MetricsOneofCase.MultiClassClassificationMetrics) {
                  subBuilder.MergeFrom(MultiClassClassificationMetrics);
                }
                input.ReadMessage(subBuilder);
                MultiClassClassificationMetrics = subBuilder;
                break;
              }
              case 34: {
                global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics subBuilder = new global::Google.Cloud.Bigquery.V2.Model.Types.ClusteringMetrics();
                if (metricsCase_ == MetricsOneofCase.ClusteringMetrics) {
                  subBuilder.MergeFrom(ClusteringMetrics);
                }
                input.ReadMessage(subBuilder);
                ClusteringMetrics = subBuilder;
                break;
              }
              case 42: {
                global::Google.Cloud.Bigquery.V2.Model.Types.RankingMetrics subBuilder = new global::Google.Cloud.Bigquery.V2.Model.Types.RankingMetrics();
                if (metricsCase_ == MetricsOneofCase.RankingMetrics) {
                  subBuilder.MergeFrom(RankingMetrics);
                }
                input.ReadMessage(subBuilder);
                RankingMetrics = subBuilder;
                break;
              }
              case 50: {
                global::Google.Cloud.Bigquery.V2.Model.Types.ArimaForecastingMetrics subBuilder = new global::Google.Cloud.Bigquery.V2.Model.Types.ArimaForecastingMetrics();
                if (metricsCase_ == MetricsOneofCase.ArimaForecastingMetrics) {
                  subBuilder.MergeFrom(ArimaForecastingMetrics);
                }
                input.ReadMessage(subBuilder);
                ArimaForecastingMetrics = subBuilder;
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Data split result. This contains references to the training and evaluation
      /// data tables that were used to train the model.
      /// </summary>
      public sealed partial class DataSplitResult : pb::IMessage<DataSplitResult>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<DataSplitResult> _parser = new pb::MessageParser<DataSplitResult>(() => new DataSplitResult());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DataSplitResult> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Bigquery.V2.Model.Descriptor.NestedTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DataSplitResult() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DataSplitResult(DataSplitResult other) : this() {
          trainingTable_ = other.trainingTable_ != null ? other.trainingTable_.Clone() : null;
          evaluationTable_ = other.evaluationTable_ != null ? other.evaluationTable_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DataSplitResult Clone() {
          return new DataSplitResult(this);
        }

        /// <summary>Field number for the "training_table" field.</summary>
        public const int TrainingTableFieldNumber = 1;
        private global::Google.Cloud.Bigquery.V2.TableReference trainingTable_;
        /// <summary>
        /// Table reference of the training data after split.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Bigquery.V2.TableReference TrainingTable {
          get { return trainingTable_; }
          set {
            trainingTable_ = value;
          }
        }

        /// <summary>Field number for the "evaluation_table" field.</summary>
        public const int EvaluationTableFieldNumber = 2;
        private global::Google.Cloud.Bigquery.V2.TableReference evaluationTable_;
        /// <summary>
        /// Table reference of the evaluation data after split.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Bigquery.V2.TableReference EvaluationTable {
          get { return evaluationTable_; }
          set {
            evaluationTable_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DataSplitResult);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DataSplitResult other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(TrainingTable, other.TrainingTable)) return false;
          if (!object.Equals(EvaluationTable, other.EvaluationTable)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (trainingTable_ != null) hash ^= TrainingTable.GetHashCode();
          if (evaluationTable_ != null) hash ^= EvaluationTable.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (trainingTable_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(TrainingTable);
          }
          if (evaluationTable_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(EvaluationTable);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (trainingTable_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(TrainingTable);
          }
          if (evaluationTable_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(EvaluationTable);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (trainingTable_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrainingTable);
          }
          if (evaluationTable_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EvaluationTable);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DataSplitResult other) {
          if (other == null) {
            return;
          }
          if (other.trainingTable_ != null) {
            if (trainingTable_ == null) {
              TrainingTable = new global::Google.Cloud.Bigquery.V2.TableReference();
            }
            TrainingTable.MergeFrom(other.TrainingTable);
          }
          if (other.evaluationTable_ != null) {
            if (evaluationTable_ == null) {
              EvaluationTable = new global::Google.Cloud.Bigquery.V2.TableReference();
            }
            EvaluationTable.MergeFrom(other.EvaluationTable);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (trainingTable_ == null) {
                  TrainingTable = new global::Google.Cloud.Bigquery.V2.TableReference();
                }
                input.ReadMessage(TrainingTable);
                break;
              }
              case 18: {
                if (evaluationTable_ == null) {
                  EvaluationTable = new global::Google.Cloud.Bigquery.V2.TableReference();
                }
                input.ReadMessage(EvaluationTable);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (trainingTable_ == null) {
                  TrainingTable = new global::Google.Cloud.Bigquery.V2.TableReference();
                }
                input.ReadMessage(TrainingTable);
                break;
              }
              case 18: {
                if (evaluationTable_ == null) {
                  EvaluationTable = new global::Google.Cloud.Bigquery.V2.TableReference();
                }
                input.ReadMessage(EvaluationTable);
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Arima order, can be used for both non-seasonal and seasonal parts.
      /// </summary>
      public sealed partial class ArimaOrder : pb::IMessage<ArimaOrder>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ArimaOrder> _parser = new pb::MessageParser<ArimaOrder>(() => new ArimaOrder());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ArimaOrder> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Bigquery.V2.Model.Descriptor.NestedTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ArimaOrder() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ArimaOrder(ArimaOrder other) : this() {
          p_ = other.p_;
          d_ = other.d_;
          q_ = other.q_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ArimaOrder Clone() {
          return new ArimaOrder(this);
        }

        /// <summary>Field number for the "p" field.</summary>
        public const int PFieldNumber = 1;
        private long p_;
        /// <summary>
        /// Order of the autoregressive part.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long P {
          get { return p_; }
          set {
            p_ = value;
          }
        }

        /// <summary>Field number for the "d" field.</summary>
        public const int DFieldNumber = 2;
        private long d_;
        /// <summary>
        /// Order of the differencing part.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long D {
          get { return d_; }
          set {
            d_ = value;
          }
        }

        /// <summary>Field number for the "q" field.</summary>
        public const int QFieldNumber = 3;
        private long q_;
        /// <summary>
        /// Order of the moving-average part.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Q {
          get { return q_; }
          set {
            q_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ArimaOrder);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ArimaOrder other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (P != other.P) return false;
          if (D != other.D) return false;
          if (Q != other.Q) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (P != 0L) hash ^= P.GetHashCode();
          if (D != 0L) hash ^= D.GetHashCode();
          if (Q != 0L) hash ^= Q.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (P != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(P);
          }
          if (D != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(D);
          }
          if (Q != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(Q);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (P != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(P);
          }
          if (D != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(D);
          }
          if (Q != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(Q);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (P != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(P);
          }
          if (D != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(D);
          }
          if (Q != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Q);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ArimaOrder other) {
          if (other == null) {
            return;
          }
          if (other.P != 0L) {
            P = other.P;
          }
          if (other.D != 0L) {
            D = other.D;
          }
          if (other.Q != 0L) {
            Q = other.Q;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                P = input.ReadInt64();
                break;
              }
              case 16: {
                D = input.ReadInt64();
                break;
              }
              case 24: {
                Q = input.ReadInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                P = input.ReadInt64();
                break;
              }
              case 16: {
                D = input.ReadInt64();
                break;
              }
              case 24: {
                Q = input.ReadInt64();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// ARIMA model fitting metrics.
      /// </summary>
      public sealed partial class ArimaFittingMetrics : pb::IMessage<ArimaFittingMetrics>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ArimaFittingMetrics> _parser = new pb::MessageParser<ArimaFittingMetrics>(() => new ArimaFittingMetrics());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ArimaFittingMetrics> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Bigquery.V2.Model.Descriptor.NestedTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ArimaFittingMetrics() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ArimaFittingMetrics(ArimaFittingMetrics other) : this() {
          logLikelihood_ = other.logLikelihood_;
          aic_ = other.aic_;
          variance_ = other.variance_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ArimaFittingMetrics Clone() {
          return new ArimaFittingMetrics(this);
        }

        /// <summary>Field number for the "log_likelihood" field.</summary>
        public const int LogLikelihoodFieldNumber = 1;
        private double logLikelihood_;
        /// <summary>
        /// Log-likelihood.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double LogLikelihood {
          get { return logLikelihood_; }
          set {
            logLikelihood_ = value;
          }
        }

        /// <summary>Field number for the "aic" field.</summary>
        public const int AicFieldNumber = 2;
        private double aic_;
        /// <summary>
        /// AIC.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Aic {
          get { return aic_; }
          set {
            aic_ = value;
          }
        }

        /// <summary>Field number for the "variance" field.</summary>
        public const int VarianceFieldNumber = 3;
        private double variance_;
        /// <summary>
        /// Variance.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Variance {
          get { return variance_; }
          set {
            variance_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ArimaFittingMetrics);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ArimaFittingMetrics other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LogLikelihood, other.LogLikelihood)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Aic, other.Aic)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Variance, other.Variance)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (LogLikelihood != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LogLikelihood);
          if (Aic != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Aic);
          if (Variance != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Variance);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (LogLikelihood != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(LogLikelihood);
          }
          if (Aic != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Aic);
          }
          if (Variance != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(Variance);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (LogLikelihood != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(LogLikelihood);
          }
          if (Aic != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Aic);
          }
          if (Variance != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(Variance);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (LogLikelihood != 0D) {
            size += 1 + 8;
          }
          if (Aic != 0D) {
            size += 1 + 8;
          }
          if (Variance != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ArimaFittingMetrics other) {
          if (other == null) {
            return;
          }
          if (other.LogLikelihood != 0D) {
            LogLikelihood = other.LogLikelihood;
          }
          if (other.Aic != 0D) {
            Aic = other.Aic;
          }
          if (other.Variance != 0D) {
            Variance = other.Variance;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                LogLikelihood = input.ReadDouble();
                break;
              }
              case 17: {
                Aic = input.ReadDouble();
                break;
              }
              case 25: {
                Variance = input.ReadDouble();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                LogLikelihood = input.ReadDouble();
                break;
              }
              case 17: {
                Aic = input.ReadDouble();
                break;
              }
              case 25: {
                Variance = input.ReadDouble();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Global explanations containing the top most important features
      /// after training.
      /// </summary>
      public sealed partial class GlobalExplanation : pb::IMessage<GlobalExplanation>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<GlobalExplanation> _parser = new pb::MessageParser<GlobalExplanation>(() => new GlobalExplanation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GlobalExplanation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Bigquery.V2.Model.Descriptor.NestedTypes[13]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GlobalExplanation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GlobalExplanation(GlobalExplanation other) : this() {
          explanations_ = other.explanations_.Clone();
          classLabel_ = other.classLabel_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GlobalExplanation Clone() {
          return new GlobalExplanation(this);
        }

        /// <summary>Field number for the "explanations" field.</summary>
        public const int ExplanationsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Google.Cloud.Bigquery.V2.Model.Types.GlobalExplanation.Types.Explanation> _repeated_explanations_codec
            = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Bigquery.V2.Model.Types.GlobalExplanation.Types.Explanation.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.GlobalExplanation.Types.Explanation> explanations_ = new pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.GlobalExplanation.Types.Explanation>();
        /// <summary>
        /// A list of the top global explanations. Sorted by absolute value of
        /// attribution in descending order.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.GlobalExplanation.Types.Explanation> Explanations {
          get { return explanations_; }
        }

        /// <summary>Field number for the "class_label" field.</summary>
        public const int ClassLabelFieldNumber = 2;
        private string classLabel_ = "";
        /// <summary>
        /// Class label for this set of global explanations. Will be empty/null for
        /// binary logistic and linear regression models. Sorted alphabetically in
        /// descending order.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ClassLabel {
          get { return classLabel_; }
          set {
            classLabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GlobalExplanation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GlobalExplanation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!explanations_.Equals(other.explanations_)) return false;
          if (ClassLabel != other.ClassLabel) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= explanations_.GetHashCode();
          if (ClassLabel.Length != 0) hash ^= ClassLabel.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          explanations_.WriteTo(output, _repeated_explanations_codec);
          if (ClassLabel.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ClassLabel);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          explanations_.WriteTo(ref output, _repeated_explanations_codec);
          if (ClassLabel.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ClassLabel);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += explanations_.CalculateSize(_repeated_explanations_codec);
          if (ClassLabel.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassLabel);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GlobalExplanation other) {
          if (other == null) {
            return;
          }
          explanations_.Add(other.explanations_);
          if (other.ClassLabel.Length != 0) {
            ClassLabel = other.ClassLabel;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                explanations_.AddEntriesFrom(input, _repeated_explanations_codec);
                break;
              }
              case 18: {
                ClassLabel = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                explanations_.AddEntriesFrom(ref input, _repeated_explanations_codec);
                break;
              }
              case 18: {
                ClassLabel = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the GlobalExplanation message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Explanation for a single feature.
          /// </summary>
          public sealed partial class Explanation : pb::IMessage<Explanation>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Explanation> _parser = new pb::MessageParser<Explanation>(() => new Explanation());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Explanation> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Google.Cloud.Bigquery.V2.Model.Types.GlobalExplanation.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Explanation() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Explanation(Explanation other) : this() {
              featureName_ = other.featureName_;
              Attribution = other.Attribution;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Explanation Clone() {
              return new Explanation(this);
            }

            /// <summary>Field number for the "feature_name" field.</summary>
            public const int FeatureNameFieldNumber = 1;
            private string featureName_ = "";
            /// <summary>
            /// Full name of the feature. For non-numerical features, will be
            /// formatted like &lt;column_name>.&lt;encoded_feature_name>. Overall size of
            /// feature name will always be truncated to first 120 characters.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string FeatureName {
              get { return featureName_; }
              set {
                featureName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "attribution" field.</summary>
            public const int AttributionFieldNumber = 2;
            private static readonly pb::FieldCodec<double?> _single_attribution_codec = pb::FieldCodec.ForStructWrapper<double>(18);
            private double? attribution_;
            /// <summary>
            /// Attribution of feature.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double? Attribution {
              get { return attribution_; }
              set {
                attribution_ = value;
              }
            }


            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Explanation);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Explanation other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (FeatureName != other.FeatureName) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Attribution, other.Attribution)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (FeatureName.Length != 0) hash ^= FeatureName.GetHashCode();
              if (attribution_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Attribution);
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (FeatureName.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(FeatureName);
              }
              if (attribution_ != null) {
                _single_attribution_codec.WriteTagAndValue(output, Attribution);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (FeatureName.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(FeatureName);
              }
              if (attribution_ != null) {
                _single_attribution_codec.WriteTagAndValue(ref output, Attribution);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (FeatureName.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(FeatureName);
              }
              if (attribution_ != null) {
                size += _single_attribution_codec.CalculateSizeWithTag(Attribution);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Explanation other) {
              if (other == null) {
                return;
              }
              if (other.FeatureName.Length != 0) {
                FeatureName = other.FeatureName;
              }
              if (other.attribution_ != null) {
                if (attribution_ == null || other.Attribution != 0D) {
                  Attribution = other.Attribution;
                }
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    FeatureName = input.ReadString();
                    break;
                  }
                  case 18: {
                    double? value = _single_attribution_codec.Read(input);
                    if (attribution_ == null || value != 0D) {
                      Attribution = value;
                    }
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    FeatureName = input.ReadString();
                    break;
                  }
                  case 18: {
                    double? value = _single_attribution_codec.Read(ref input);
                    if (attribution_ == null || value != 0D) {
                      Attribution = value;
                    }
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

      /// <summary>
      /// Information about a single training query run for the model.
      /// </summary>
      public sealed partial class TrainingRun : pb::IMessage<TrainingRun>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<TrainingRun> _parser = new pb::MessageParser<TrainingRun>(() => new TrainingRun());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TrainingRun> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Bigquery.V2.Model.Descriptor.NestedTypes[14]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TrainingRun() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TrainingRun(TrainingRun other) : this() {
          trainingOptions_ = other.trainingOptions_ != null ? other.trainingOptions_.Clone() : null;
          startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
          results_ = other.results_.Clone();
          evaluationMetrics_ = other.evaluationMetrics_ != null ? other.evaluationMetrics_.Clone() : null;
          dataSplitResult_ = other.dataSplitResult_ != null ? other.dataSplitResult_.Clone() : null;
          globalExplanations_ = other.globalExplanations_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TrainingRun Clone() {
          return new TrainingRun(this);
        }

        /// <summary>Field number for the "training_options" field.</summary>
        public const int TrainingOptionsFieldNumber = 1;
        private global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.TrainingOptions trainingOptions_;
        /// <summary>
        /// Options that were used for this training run, includes
        /// user specified and default options that were used.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.TrainingOptions TrainingOptions {
          get { return trainingOptions_; }
          set {
            trainingOptions_ = value;
          }
        }

        /// <summary>Field number for the "start_time" field.</summary>
        public const int StartTimeFieldNumber = 8;
        private global::Google.Protobuf.WellKnownTypes.Timestamp startTime_;
        /// <summary>
        /// The start time of this training run.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Timestamp StartTime {
          get { return startTime_; }
          set {
            startTime_ = value;
          }
        }

        /// <summary>Field number for the "results" field.</summary>
        public const int ResultsFieldNumber = 6;
        private static readonly pb::FieldCodec<global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult> _repeated_results_codec
            = pb::FieldCodec.ForMessage(50, global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult> results_ = new pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult>();
        /// <summary>
        /// Output of each iteration run, results.size() &lt;= max_iterations.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult> Results {
          get { return results_; }
        }

        /// <summary>Field number for the "evaluation_metrics" field.</summary>
        public const int EvaluationMetricsFieldNumber = 7;
        private global::Google.Cloud.Bigquery.V2.Model.Types.EvaluationMetrics evaluationMetrics_;
        /// <summary>
        /// The evaluation metrics over training/eval data that were computed at the
        /// end of training.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Bigquery.V2.Model.Types.EvaluationMetrics EvaluationMetrics {
          get { return evaluationMetrics_; }
          set {
            evaluationMetrics_ = value;
          }
        }

        /// <summary>Field number for the "data_split_result" field.</summary>
        public const int DataSplitResultFieldNumber = 9;
        private global::Google.Cloud.Bigquery.V2.Model.Types.DataSplitResult dataSplitResult_;
        /// <summary>
        /// Data split result of the training run. Only set when the input data is
        /// actually split.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Bigquery.V2.Model.Types.DataSplitResult DataSplitResult {
          get { return dataSplitResult_; }
          set {
            dataSplitResult_ = value;
          }
        }

        /// <summary>Field number for the "global_explanations" field.</summary>
        public const int GlobalExplanationsFieldNumber = 10;
        private static readonly pb::FieldCodec<global::Google.Cloud.Bigquery.V2.Model.Types.GlobalExplanation> _repeated_globalExplanations_codec
            = pb::FieldCodec.ForMessage(82, global::Google.Cloud.Bigquery.V2.Model.Types.GlobalExplanation.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.GlobalExplanation> globalExplanations_ = new pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.GlobalExplanation>();
        /// <summary>
        /// Global explanations for important features of the model. For multi-class
        /// models, there is one entry for each label class. For other models, there
        /// is only one entry in the list.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.GlobalExplanation> GlobalExplanations {
          get { return globalExplanations_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TrainingRun);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TrainingRun other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(TrainingOptions, other.TrainingOptions)) return false;
          if (!object.Equals(StartTime, other.StartTime)) return false;
          if(!results_.Equals(other.results_)) return false;
          if (!object.Equals(EvaluationMetrics, other.EvaluationMetrics)) return false;
          if (!object.Equals(DataSplitResult, other.DataSplitResult)) return false;
          if(!globalExplanations_.Equals(other.globalExplanations_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (trainingOptions_ != null) hash ^= TrainingOptions.GetHashCode();
          if (startTime_ != null) hash ^= StartTime.GetHashCode();
          hash ^= results_.GetHashCode();
          if (evaluationMetrics_ != null) hash ^= EvaluationMetrics.GetHashCode();
          if (dataSplitResult_ != null) hash ^= DataSplitResult.GetHashCode();
          hash ^= globalExplanations_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (trainingOptions_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(TrainingOptions);
          }
          results_.WriteTo(output, _repeated_results_codec);
          if (evaluationMetrics_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(EvaluationMetrics);
          }
          if (startTime_ != null) {
            output.WriteRawTag(66);
            output.WriteMessage(StartTime);
          }
          if (dataSplitResult_ != null) {
            output.WriteRawTag(74);
            output.WriteMessage(DataSplitResult);
          }
          globalExplanations_.WriteTo(output, _repeated_globalExplanations_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (trainingOptions_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(TrainingOptions);
          }
          results_.WriteTo(ref output, _repeated_results_codec);
          if (evaluationMetrics_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(EvaluationMetrics);
          }
          if (startTime_ != null) {
            output.WriteRawTag(66);
            output.WriteMessage(StartTime);
          }
          if (dataSplitResult_ != null) {
            output.WriteRawTag(74);
            output.WriteMessage(DataSplitResult);
          }
          globalExplanations_.WriteTo(ref output, _repeated_globalExplanations_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (trainingOptions_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrainingOptions);
          }
          if (startTime_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
          }
          size += results_.CalculateSize(_repeated_results_codec);
          if (evaluationMetrics_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EvaluationMetrics);
          }
          if (dataSplitResult_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataSplitResult);
          }
          size += globalExplanations_.CalculateSize(_repeated_globalExplanations_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TrainingRun other) {
          if (other == null) {
            return;
          }
          if (other.trainingOptions_ != null) {
            if (trainingOptions_ == null) {
              TrainingOptions = new global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.TrainingOptions();
            }
            TrainingOptions.MergeFrom(other.TrainingOptions);
          }
          if (other.startTime_ != null) {
            if (startTime_ == null) {
              StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            StartTime.MergeFrom(other.StartTime);
          }
          results_.Add(other.results_);
          if (other.evaluationMetrics_ != null) {
            if (evaluationMetrics_ == null) {
              EvaluationMetrics = new global::Google.Cloud.Bigquery.V2.Model.Types.EvaluationMetrics();
            }
            EvaluationMetrics.MergeFrom(other.EvaluationMetrics);
          }
          if (other.dataSplitResult_ != null) {
            if (dataSplitResult_ == null) {
              DataSplitResult = new global::Google.Cloud.Bigquery.V2.Model.Types.DataSplitResult();
            }
            DataSplitResult.MergeFrom(other.DataSplitResult);
          }
          globalExplanations_.Add(other.globalExplanations_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (trainingOptions_ == null) {
                  TrainingOptions = new global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.TrainingOptions();
                }
                input.ReadMessage(TrainingOptions);
                break;
              }
              case 50: {
                results_.AddEntriesFrom(input, _repeated_results_codec);
                break;
              }
              case 58: {
                if (evaluationMetrics_ == null) {
                  EvaluationMetrics = new global::Google.Cloud.Bigquery.V2.Model.Types.EvaluationMetrics();
                }
                input.ReadMessage(EvaluationMetrics);
                break;
              }
              case 66: {
                if (startTime_ == null) {
                  StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(StartTime);
                break;
              }
              case 74: {
                if (dataSplitResult_ == null) {
                  DataSplitResult = new global::Google.Cloud.Bigquery.V2.Model.Types.DataSplitResult();
                }
                input.ReadMessage(DataSplitResult);
                break;
              }
              case 82: {
                globalExplanations_.AddEntriesFrom(input, _repeated_globalExplanations_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (trainingOptions_ == null) {
                  TrainingOptions = new global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.TrainingOptions();
                }
                input.ReadMessage(TrainingOptions);
                break;
              }
              case 50: {
                results_.AddEntriesFrom(ref input, _repeated_results_codec);
                break;
              }
              case 58: {
                if (evaluationMetrics_ == null) {
                  EvaluationMetrics = new global::Google.Cloud.Bigquery.V2.Model.Types.EvaluationMetrics();
                }
                input.ReadMessage(EvaluationMetrics);
                break;
              }
              case 66: {
                if (startTime_ == null) {
                  StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(StartTime);
                break;
              }
              case 74: {
                if (dataSplitResult_ == null) {
                  DataSplitResult = new global::Google.Cloud.Bigquery.V2.Model.Types.DataSplitResult();
                }
                input.ReadMessage(DataSplitResult);
                break;
              }
              case 82: {
                globalExplanations_.AddEntriesFrom(ref input, _repeated_globalExplanations_codec);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the TrainingRun message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Options used in model training.
          /// </summary>
          public sealed partial class TrainingOptions : pb::IMessage<TrainingOptions>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<TrainingOptions> _parser = new pb::MessageParser<TrainingOptions>(() => new TrainingOptions());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<TrainingOptions> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TrainingOptions() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TrainingOptions(TrainingOptions other) : this() {
              maxIterations_ = other.maxIterations_;
              lossType_ = other.lossType_;
              learnRate_ = other.learnRate_;
              L1Regularization = other.L1Regularization;
              L2Regularization = other.L2Regularization;
              MinRelativeProgress = other.MinRelativeProgress;
              WarmStart = other.WarmStart;
              EarlyStop = other.EarlyStop;
              inputLabelColumns_ = other.inputLabelColumns_.Clone();
              dataSplitMethod_ = other.dataSplitMethod_;
              dataSplitEvalFraction_ = other.dataSplitEvalFraction_;
              dataSplitColumn_ = other.dataSplitColumn_;
              learnRateStrategy_ = other.learnRateStrategy_;
              initialLearnRate_ = other.initialLearnRate_;
              labelClassWeights_ = other.labelClassWeights_.Clone();
              userColumn_ = other.userColumn_;
              itemColumn_ = other.itemColumn_;
              distanceType_ = other.distanceType_;
              numClusters_ = other.numClusters_;
              modelUri_ = other.modelUri_;
              optimizationStrategy_ = other.optimizationStrategy_;
              hiddenUnits_ = other.hiddenUnits_.Clone();
              batchSize_ = other.batchSize_;
              Dropout = other.Dropout;
              maxTreeDepth_ = other.maxTreeDepth_;
              subsample_ = other.subsample_;
              MinSplitLoss = other.MinSplitLoss;
              numFactors_ = other.numFactors_;
              feedbackType_ = other.feedbackType_;
              WalsAlpha = other.WalsAlpha;
              kmeansInitializationMethod_ = other.kmeansInitializationMethod_;
              kmeansInitializationColumn_ = other.kmeansInitializationColumn_;
              timeSeriesTimestampColumn_ = other.timeSeriesTimestampColumn_;
              timeSeriesDataColumn_ = other.timeSeriesDataColumn_;
              autoArima_ = other.autoArima_;
              nonSeasonalOrder_ = other.nonSeasonalOrder_ != null ? other.nonSeasonalOrder_.Clone() : null;
              dataFrequency_ = other.dataFrequency_;
              includeDrift_ = other.includeDrift_;
              holidayRegion_ = other.holidayRegion_;
              timeSeriesIdColumn_ = other.timeSeriesIdColumn_;
              timeSeriesIdColumns_ = other.timeSeriesIdColumns_.Clone();
              horizon_ = other.horizon_;
              preserveInputStructs_ = other.preserveInputStructs_;
              autoArimaMaxOrder_ = other.autoArimaMaxOrder_;
              DecomposeTimeSeries = other.DecomposeTimeSeries;
              CleanSpikesAndDips = other.CleanSpikesAndDips;
              AdjustStepChanges = other.AdjustStepChanges;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TrainingOptions Clone() {
              return new TrainingOptions(this);
            }

            /// <summary>Field number for the "max_iterations" field.</summary>
            public const int MaxIterationsFieldNumber = 1;
            private long maxIterations_;
            /// <summary>
            /// The maximum number of iterations in training. Used only for iterative
            /// training algorithms.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long MaxIterations {
              get { return maxIterations_; }
              set {
                maxIterations_ = value;
              }
            }

            /// <summary>Field number for the "loss_type" field.</summary>
            public const int LossTypeFieldNumber = 2;
            private global::Google.Cloud.Bigquery.V2.Model.Types.LossType lossType_ = global::Google.Cloud.Bigquery.V2.Model.Types.LossType.Unspecified;
            /// <summary>
            /// Type of loss function used during training run.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Google.Cloud.Bigquery.V2.Model.Types.LossType LossType {
              get { return lossType_; }
              set {
                lossType_ = value;
              }
            }

            /// <summary>Field number for the "learn_rate" field.</summary>
            public const int LearnRateFieldNumber = 3;
            private double learnRate_;
            /// <summary>
            /// Learning rate in training. Used only for iterative training algorithms.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double LearnRate {
              get { return learnRate_; }
              set {
                learnRate_ = value;
              }
            }

            /// <summary>Field number for the "l1_regularization" field.</summary>
            public const int L1RegularizationFieldNumber = 4;
            private static readonly pb::FieldCodec<double?> _single_l1Regularization_codec = pb::FieldCodec.ForStructWrapper<double>(34);
            private double? l1Regularization_;
            /// <summary>
            /// L1 regularization coefficient.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double? L1Regularization {
              get { return l1Regularization_; }
              set {
                l1Regularization_ = value;
              }
            }


            /// <summary>Field number for the "l2_regularization" field.</summary>
            public const int L2RegularizationFieldNumber = 5;
            private static readonly pb::FieldCodec<double?> _single_l2Regularization_codec = pb::FieldCodec.ForStructWrapper<double>(42);
            private double? l2Regularization_;
            /// <summary>
            /// L2 regularization coefficient.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double? L2Regularization {
              get { return l2Regularization_; }
              set {
                l2Regularization_ = value;
              }
            }


            /// <summary>Field number for the "min_relative_progress" field.</summary>
            public const int MinRelativeProgressFieldNumber = 6;
            private static readonly pb::FieldCodec<double?> _single_minRelativeProgress_codec = pb::FieldCodec.ForStructWrapper<double>(50);
            private double? minRelativeProgress_;
            /// <summary>
            /// When early_stop is true, stops training when accuracy improvement is
            /// less than 'min_relative_progress'. Used only for iterative training
            /// algorithms.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double? MinRelativeProgress {
              get { return minRelativeProgress_; }
              set {
                minRelativeProgress_ = value;
              }
            }


            /// <summary>Field number for the "warm_start" field.</summary>
            public const int WarmStartFieldNumber = 7;
            private static readonly pb::FieldCodec<bool?> _single_warmStart_codec = pb::FieldCodec.ForStructWrapper<bool>(58);
            private bool? warmStart_;
            /// <summary>
            /// Whether to train a model from the last checkpoint.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool? WarmStart {
              get { return warmStart_; }
              set {
                warmStart_ = value;
              }
            }


            /// <summary>Field number for the "early_stop" field.</summary>
            public const int EarlyStopFieldNumber = 8;
            private static readonly pb::FieldCodec<bool?> _single_earlyStop_codec = pb::FieldCodec.ForStructWrapper<bool>(66);
            private bool? earlyStop_;
            /// <summary>
            /// Whether to stop early when the loss doesn't improve significantly
            /// any more (compared to min_relative_progress). Used only for iterative
            /// training algorithms.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool? EarlyStop {
              get { return earlyStop_; }
              set {
                earlyStop_ = value;
              }
            }


            /// <summary>Field number for the "input_label_columns" field.</summary>
            public const int InputLabelColumnsFieldNumber = 9;
            private static readonly pb::FieldCodec<string> _repeated_inputLabelColumns_codec
                = pb::FieldCodec.ForString(74);
            private readonly pbc::RepeatedField<string> inputLabelColumns_ = new pbc::RepeatedField<string>();
            /// <summary>
            /// Name of input label columns in training data.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<string> InputLabelColumns {
              get { return inputLabelColumns_; }
            }

            /// <summary>Field number for the "data_split_method" field.</summary>
            public const int DataSplitMethodFieldNumber = 10;
            private global::Google.Cloud.Bigquery.V2.Model.Types.DataSplitMethod dataSplitMethod_ = global::Google.Cloud.Bigquery.V2.Model.Types.DataSplitMethod.Unspecified;
            /// <summary>
            /// The data split type for training and evaluation, e.g. RANDOM.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Google.Cloud.Bigquery.V2.Model.Types.DataSplitMethod DataSplitMethod {
              get { return dataSplitMethod_; }
              set {
                dataSplitMethod_ = value;
              }
            }

            /// <summary>Field number for the "data_split_eval_fraction" field.</summary>
            public const int DataSplitEvalFractionFieldNumber = 11;
            private double dataSplitEvalFraction_;
            /// <summary>
            /// The fraction of evaluation data over the whole input data. The rest
            /// of data will be used as training data. The format should be double.
            /// Accurate to two decimal places.
            /// Default value is 0.2.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double DataSplitEvalFraction {
              get { return dataSplitEvalFraction_; }
              set {
                dataSplitEvalFraction_ = value;
              }
            }

            /// <summary>Field number for the "data_split_column" field.</summary>
            public const int DataSplitColumnFieldNumber = 12;
            private string dataSplitColumn_ = "";
            /// <summary>
            /// The column to split data with. This column won't be used as a
            /// feature.
            /// 1. When data_split_method is CUSTOM, the corresponding column should
            /// be boolean. The rows with true value tag are eval data, and the false
            /// are training data.
            /// 2. When data_split_method is SEQ, the first DATA_SPLIT_EVAL_FRACTION
            /// rows (from smallest to largest) in the corresponding column are used
            /// as training data, and the rest are eval data. It respects the order
            /// in Orderable data types:
            /// https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#data-type-properties
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string DataSplitColumn {
              get { return dataSplitColumn_; }
              set {
                dataSplitColumn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "learn_rate_strategy" field.</summary>
            public const int LearnRateStrategyFieldNumber = 13;
            private global::Google.Cloud.Bigquery.V2.Model.Types.LearnRateStrategy learnRateStrategy_ = global::Google.Cloud.Bigquery.V2.Model.Types.LearnRateStrategy.Unspecified;
            /// <summary>
            /// The strategy to determine learn rate for the current iteration.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Google.Cloud.Bigquery.V2.Model.Types.LearnRateStrategy LearnRateStrategy {
              get { return learnRateStrategy_; }
              set {
                learnRateStrategy_ = value;
              }
            }

            /// <summary>Field number for the "initial_learn_rate" field.</summary>
            public const int InitialLearnRateFieldNumber = 16;
            private double initialLearnRate_;
            /// <summary>
            /// Specifies the initial learning rate for the line search learn rate
            /// strategy.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double InitialLearnRate {
              get { return initialLearnRate_; }
              set {
                initialLearnRate_ = value;
              }
            }

            /// <summary>Field number for the "label_class_weights" field.</summary>
            public const int LabelClassWeightsFieldNumber = 17;
            private static readonly pbc::MapField<string, double>.Codec _map_labelClassWeights_codec
                = new pbc::MapField<string, double>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForDouble(17, 0D), 138);
            private readonly pbc::MapField<string, double> labelClassWeights_ = new pbc::MapField<string, double>();
            /// <summary>
            /// Weights associated with each label class, for rebalancing the
            /// training data. Only applicable for classification models.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::MapField<string, double> LabelClassWeights {
              get { return labelClassWeights_; }
            }

            /// <summary>Field number for the "user_column" field.</summary>
            public const int UserColumnFieldNumber = 18;
            private string userColumn_ = "";
            /// <summary>
            /// User column specified for matrix factorization models.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string UserColumn {
              get { return userColumn_; }
              set {
                userColumn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "item_column" field.</summary>
            public const int ItemColumnFieldNumber = 19;
            private string itemColumn_ = "";
            /// <summary>
            /// Item column specified for matrix factorization models.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string ItemColumn {
              get { return itemColumn_; }
              set {
                itemColumn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "distance_type" field.</summary>
            public const int DistanceTypeFieldNumber = 20;
            private global::Google.Cloud.Bigquery.V2.Model.Types.DistanceType distanceType_ = global::Google.Cloud.Bigquery.V2.Model.Types.DistanceType.Unspecified;
            /// <summary>
            /// Distance type for clustering models.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Google.Cloud.Bigquery.V2.Model.Types.DistanceType DistanceType {
              get { return distanceType_; }
              set {
                distanceType_ = value;
              }
            }

            /// <summary>Field number for the "num_clusters" field.</summary>
            public const int NumClustersFieldNumber = 21;
            private long numClusters_;
            /// <summary>
            /// Number of clusters for clustering models.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long NumClusters {
              get { return numClusters_; }
              set {
                numClusters_ = value;
              }
            }

            /// <summary>Field number for the "model_uri" field.</summary>
            public const int ModelUriFieldNumber = 22;
            private string modelUri_ = "";
            /// <summary>
            /// Google Cloud Storage URI from which the model was imported. Only
            /// applicable for imported models.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string ModelUri {
              get { return modelUri_; }
              set {
                modelUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "optimization_strategy" field.</summary>
            public const int OptimizationStrategyFieldNumber = 23;
            private global::Google.Cloud.Bigquery.V2.Model.Types.OptimizationStrategy optimizationStrategy_ = global::Google.Cloud.Bigquery.V2.Model.Types.OptimizationStrategy.Unspecified;
            /// <summary>
            /// Optimization strategy for training linear regression models.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Google.Cloud.Bigquery.V2.Model.Types.OptimizationStrategy OptimizationStrategy {
              get { return optimizationStrategy_; }
              set {
                optimizationStrategy_ = value;
              }
            }

            /// <summary>Field number for the "hidden_units" field.</summary>
            public const int HiddenUnitsFieldNumber = 24;
            private static readonly pb::FieldCodec<long> _repeated_hiddenUnits_codec
                = pb::FieldCodec.ForInt64(194);
            private readonly pbc::RepeatedField<long> hiddenUnits_ = new pbc::RepeatedField<long>();
            /// <summary>
            /// Hidden units for dnn models.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<long> HiddenUnits {
              get { return hiddenUnits_; }
            }

            /// <summary>Field number for the "batch_size" field.</summary>
            public const int BatchSizeFieldNumber = 25;
            private long batchSize_;
            /// <summary>
            /// Batch size for dnn models.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long BatchSize {
              get { return batchSize_; }
              set {
                batchSize_ = value;
              }
            }

            /// <summary>Field number for the "dropout" field.</summary>
            public const int DropoutFieldNumber = 26;
            private static readonly pb::FieldCodec<double?> _single_dropout_codec = pb::FieldCodec.ForStructWrapper<double>(210);
            private double? dropout_;
            /// <summary>
            /// Dropout probability for dnn models.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double? Dropout {
              get { return dropout_; }
              set {
                dropout_ = value;
              }
            }


            /// <summary>Field number for the "max_tree_depth" field.</summary>
            public const int MaxTreeDepthFieldNumber = 27;
            private long maxTreeDepth_;
            /// <summary>
            /// Maximum depth of a tree for boosted tree models.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long MaxTreeDepth {
              get { return maxTreeDepth_; }
              set {
                maxTreeDepth_ = value;
              }
            }

            /// <summary>Field number for the "subsample" field.</summary>
            public const int SubsampleFieldNumber = 28;
            private double subsample_;
            /// <summary>
            /// Subsample fraction of the training data to grow tree to prevent
            /// overfitting for boosted tree models.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double Subsample {
              get { return subsample_; }
              set {
                subsample_ = value;
              }
            }

            /// <summary>Field number for the "min_split_loss" field.</summary>
            public const int MinSplitLossFieldNumber = 29;
            private static readonly pb::FieldCodec<double?> _single_minSplitLoss_codec = pb::FieldCodec.ForStructWrapper<double>(234);
            private double? minSplitLoss_;
            /// <summary>
            /// Minimum split loss for boosted tree models.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double? MinSplitLoss {
              get { return minSplitLoss_; }
              set {
                minSplitLoss_ = value;
              }
            }


            /// <summary>Field number for the "num_factors" field.</summary>
            public const int NumFactorsFieldNumber = 30;
            private long numFactors_;
            /// <summary>
            /// Num factors specified for matrix factorization models.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long NumFactors {
              get { return numFactors_; }
              set {
                numFactors_ = value;
              }
            }

            /// <summary>Field number for the "feedback_type" field.</summary>
            public const int FeedbackTypeFieldNumber = 31;
            private global::Google.Cloud.Bigquery.V2.Model.Types.FeedbackType feedbackType_ = global::Google.Cloud.Bigquery.V2.Model.Types.FeedbackType.Unspecified;
            /// <summary>
            /// Feedback type that specifies which algorithm to run for matrix
            /// factorization.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Google.Cloud.Bigquery.V2.Model.Types.FeedbackType FeedbackType {
              get { return feedbackType_; }
              set {
                feedbackType_ = value;
              }
            }

            /// <summary>Field number for the "wals_alpha" field.</summary>
            public const int WalsAlphaFieldNumber = 32;
            private static readonly pb::FieldCodec<double?> _single_walsAlpha_codec = pb::FieldCodec.ForStructWrapper<double>(258);
            private double? walsAlpha_;
            /// <summary>
            /// Hyperparameter for matrix factoration when implicit feedback type is
            /// specified.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double? WalsAlpha {
              get { return walsAlpha_; }
              set {
                walsAlpha_ = value;
              }
            }


            /// <summary>Field number for the "kmeans_initialization_method" field.</summary>
            public const int KmeansInitializationMethodFieldNumber = 33;
            private global::Google.Cloud.Bigquery.V2.Model.Types.KmeansEnums.Types.KmeansInitializationMethod kmeansInitializationMethod_ = global::Google.Cloud.Bigquery.V2.Model.Types.KmeansEnums.Types.KmeansInitializationMethod.Unspecified;
            /// <summary>
            /// The method used to initialize the centroids for kmeans algorithm.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Google.Cloud.Bigquery.V2.Model.Types.KmeansEnums.Types.KmeansInitializationMethod KmeansInitializationMethod {
              get { return kmeansInitializationMethod_; }
              set {
                kmeansInitializationMethod_ = value;
              }
            }

            /// <summary>Field number for the "kmeans_initialization_column" field.</summary>
            public const int KmeansInitializationColumnFieldNumber = 34;
            private string kmeansInitializationColumn_ = "";
            /// <summary>
            /// The column used to provide the initial centroids for kmeans algorithm
            /// when kmeans_initialization_method is CUSTOM.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string KmeansInitializationColumn {
              get { return kmeansInitializationColumn_; }
              set {
                kmeansInitializationColumn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "time_series_timestamp_column" field.</summary>
            public const int TimeSeriesTimestampColumnFieldNumber = 35;
            private string timeSeriesTimestampColumn_ = "";
            /// <summary>
            /// Column to be designated as time series timestamp for ARIMA model.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string TimeSeriesTimestampColumn {
              get { return timeSeriesTimestampColumn_; }
              set {
                timeSeriesTimestampColumn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "time_series_data_column" field.</summary>
            public const int TimeSeriesDataColumnFieldNumber = 36;
            private string timeSeriesDataColumn_ = "";
            /// <summary>
            /// Column to be designated as time series data for ARIMA model.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string TimeSeriesDataColumn {
              get { return timeSeriesDataColumn_; }
              set {
                timeSeriesDataColumn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "auto_arima" field.</summary>
            public const int AutoArimaFieldNumber = 37;
            private bool autoArima_;
            /// <summary>
            /// Whether to enable auto ARIMA or not.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool AutoArima {
              get { return autoArima_; }
              set {
                autoArima_ = value;
              }
            }

            /// <summary>Field number for the "non_seasonal_order" field.</summary>
            public const int NonSeasonalOrderFieldNumber = 38;
            private global::Google.Cloud.Bigquery.V2.Model.Types.ArimaOrder nonSeasonalOrder_;
            /// <summary>
            /// A specification of the non-seasonal part of the ARIMA model: the three
            /// components (p, d, q) are the AR order, the degree of differencing, and
            /// the MA order.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Google.Cloud.Bigquery.V2.Model.Types.ArimaOrder NonSeasonalOrder {
              get { return nonSeasonalOrder_; }
              set {
                nonSeasonalOrder_ = value;
              }
            }

            /// <summary>Field number for the "data_frequency" field.</summary>
            public const int DataFrequencyFieldNumber = 39;
            private global::Google.Cloud.Bigquery.V2.Model.Types.DataFrequency dataFrequency_ = global::Google.Cloud.Bigquery.V2.Model.Types.DataFrequency.Unspecified;
            /// <summary>
            /// The data frequency of a time series.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Google.Cloud.Bigquery.V2.Model.Types.DataFrequency DataFrequency {
              get { return dataFrequency_; }
              set {
                dataFrequency_ = value;
              }
            }

            /// <summary>Field number for the "include_drift" field.</summary>
            public const int IncludeDriftFieldNumber = 41;
            private bool includeDrift_;
            /// <summary>
            /// Include drift when fitting an ARIMA model.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool IncludeDrift {
              get { return includeDrift_; }
              set {
                includeDrift_ = value;
              }
            }

            /// <summary>Field number for the "holiday_region" field.</summary>
            public const int HolidayRegionFieldNumber = 42;
            private global::Google.Cloud.Bigquery.V2.Model.Types.HolidayRegion holidayRegion_ = global::Google.Cloud.Bigquery.V2.Model.Types.HolidayRegion.Unspecified;
            /// <summary>
            /// The geographical region based on which the holidays are considered in
            /// time series modeling. If a valid value is specified, then holiday
            /// effects modeling is enabled.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Google.Cloud.Bigquery.V2.Model.Types.HolidayRegion HolidayRegion {
              get { return holidayRegion_; }
              set {
                holidayRegion_ = value;
              }
            }

            /// <summary>Field number for the "time_series_id_column" field.</summary>
            public const int TimeSeriesIdColumnFieldNumber = 43;
            private string timeSeriesIdColumn_ = "";
            /// <summary>
            /// The time series id column that was used during ARIMA model training.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string TimeSeriesIdColumn {
              get { return timeSeriesIdColumn_; }
              set {
                timeSeriesIdColumn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "time_series_id_columns" field.</summary>
            public const int TimeSeriesIdColumnsFieldNumber = 51;
            private static readonly pb::FieldCodec<string> _repeated_timeSeriesIdColumns_codec
                = pb::FieldCodec.ForString(410);
            private readonly pbc::RepeatedField<string> timeSeriesIdColumns_ = new pbc::RepeatedField<string>();
            /// <summary>
            /// The time series id columns that were used during ARIMA model training.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<string> TimeSeriesIdColumns {
              get { return timeSeriesIdColumns_; }
            }

            /// <summary>Field number for the "horizon" field.</summary>
            public const int HorizonFieldNumber = 44;
            private long horizon_;
            /// <summary>
            /// The number of periods ahead that need to be forecasted.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long Horizon {
              get { return horizon_; }
              set {
                horizon_ = value;
              }
            }

            /// <summary>Field number for the "preserve_input_structs" field.</summary>
            public const int PreserveInputStructsFieldNumber = 45;
            private bool preserveInputStructs_;
            /// <summary>
            /// Whether to preserve the input structs in output feature names.
            /// Suppose there is a struct A with field b.
            /// When false (default), the output feature name is A_b.
            /// When true, the output feature name is A.b.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool PreserveInputStructs {
              get { return preserveInputStructs_; }
              set {
                preserveInputStructs_ = value;
              }
            }

            /// <summary>Field number for the "auto_arima_max_order" field.</summary>
            public const int AutoArimaMaxOrderFieldNumber = 46;
            private long autoArimaMaxOrder_;
            /// <summary>
            /// The max value of non-seasonal p and q.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long AutoArimaMaxOrder {
              get { return autoArimaMaxOrder_; }
              set {
                autoArimaMaxOrder_ = value;
              }
            }

            /// <summary>Field number for the "decompose_time_series" field.</summary>
            public const int DecomposeTimeSeriesFieldNumber = 50;
            private static readonly pb::FieldCodec<bool?> _single_decomposeTimeSeries_codec = pb::FieldCodec.ForStructWrapper<bool>(402);
            private bool? decomposeTimeSeries_;
            /// <summary>
            /// If true, perform decompose time series and save the results.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool? DecomposeTimeSeries {
              get { return decomposeTimeSeries_; }
              set {
                decomposeTimeSeries_ = value;
              }
            }


            /// <summary>Field number for the "clean_spikes_and_dips" field.</summary>
            public const int CleanSpikesAndDipsFieldNumber = 52;
            private static readonly pb::FieldCodec<bool?> _single_cleanSpikesAndDips_codec = pb::FieldCodec.ForStructWrapper<bool>(418);
            private bool? cleanSpikesAndDips_;
            /// <summary>
            /// If true, clean spikes and dips in the input time series.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool? CleanSpikesAndDips {
              get { return cleanSpikesAndDips_; }
              set {
                cleanSpikesAndDips_ = value;
              }
            }


            /// <summary>Field number for the "adjust_step_changes" field.</summary>
            public const int AdjustStepChangesFieldNumber = 53;
            private static readonly pb::FieldCodec<bool?> _single_adjustStepChanges_codec = pb::FieldCodec.ForStructWrapper<bool>(426);
            private bool? adjustStepChanges_;
            /// <summary>
            /// If true, detect step changes and make data adjustment in the input time
            /// series.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool? AdjustStepChanges {
              get { return adjustStepChanges_; }
              set {
                adjustStepChanges_ = value;
              }
            }


            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as TrainingOptions);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(TrainingOptions other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (MaxIterations != other.MaxIterations) return false;
              if (LossType != other.LossType) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LearnRate, other.LearnRate)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(L1Regularization, other.L1Regularization)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(L2Regularization, other.L2Regularization)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(MinRelativeProgress, other.MinRelativeProgress)) return false;
              if (WarmStart != other.WarmStart) return false;
              if (EarlyStop != other.EarlyStop) return false;
              if(!inputLabelColumns_.Equals(other.inputLabelColumns_)) return false;
              if (DataSplitMethod != other.DataSplitMethod) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DataSplitEvalFraction, other.DataSplitEvalFraction)) return false;
              if (DataSplitColumn != other.DataSplitColumn) return false;
              if (LearnRateStrategy != other.LearnRateStrategy) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(InitialLearnRate, other.InitialLearnRate)) return false;
              if (!LabelClassWeights.Equals(other.LabelClassWeights)) return false;
              if (UserColumn != other.UserColumn) return false;
              if (ItemColumn != other.ItemColumn) return false;
              if (DistanceType != other.DistanceType) return false;
              if (NumClusters != other.NumClusters) return false;
              if (ModelUri != other.ModelUri) return false;
              if (OptimizationStrategy != other.OptimizationStrategy) return false;
              if(!hiddenUnits_.Equals(other.hiddenUnits_)) return false;
              if (BatchSize != other.BatchSize) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Dropout, other.Dropout)) return false;
              if (MaxTreeDepth != other.MaxTreeDepth) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Subsample, other.Subsample)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(MinSplitLoss, other.MinSplitLoss)) return false;
              if (NumFactors != other.NumFactors) return false;
              if (FeedbackType != other.FeedbackType) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(WalsAlpha, other.WalsAlpha)) return false;
              if (KmeansInitializationMethod != other.KmeansInitializationMethod) return false;
              if (KmeansInitializationColumn != other.KmeansInitializationColumn) return false;
              if (TimeSeriesTimestampColumn != other.TimeSeriesTimestampColumn) return false;
              if (TimeSeriesDataColumn != other.TimeSeriesDataColumn) return false;
              if (AutoArima != other.AutoArima) return false;
              if (!object.Equals(NonSeasonalOrder, other.NonSeasonalOrder)) return false;
              if (DataFrequency != other.DataFrequency) return false;
              if (IncludeDrift != other.IncludeDrift) return false;
              if (HolidayRegion != other.HolidayRegion) return false;
              if (TimeSeriesIdColumn != other.TimeSeriesIdColumn) return false;
              if(!timeSeriesIdColumns_.Equals(other.timeSeriesIdColumns_)) return false;
              if (Horizon != other.Horizon) return false;
              if (PreserveInputStructs != other.PreserveInputStructs) return false;
              if (AutoArimaMaxOrder != other.AutoArimaMaxOrder) return false;
              if (DecomposeTimeSeries != other.DecomposeTimeSeries) return false;
              if (CleanSpikesAndDips != other.CleanSpikesAndDips) return false;
              if (AdjustStepChanges != other.AdjustStepChanges) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (MaxIterations != 0L) hash ^= MaxIterations.GetHashCode();
              if (LossType != global::Google.Cloud.Bigquery.V2.Model.Types.LossType.Unspecified) hash ^= LossType.GetHashCode();
              if (LearnRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LearnRate);
              if (l1Regularization_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(L1Regularization);
              if (l2Regularization_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(L2Regularization);
              if (minRelativeProgress_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(MinRelativeProgress);
              if (warmStart_ != null) hash ^= WarmStart.GetHashCode();
              if (earlyStop_ != null) hash ^= EarlyStop.GetHashCode();
              hash ^= inputLabelColumns_.GetHashCode();
              if (DataSplitMethod != global::Google.Cloud.Bigquery.V2.Model.Types.DataSplitMethod.Unspecified) hash ^= DataSplitMethod.GetHashCode();
              if (DataSplitEvalFraction != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DataSplitEvalFraction);
              if (DataSplitColumn.Length != 0) hash ^= DataSplitColumn.GetHashCode();
              if (LearnRateStrategy != global::Google.Cloud.Bigquery.V2.Model.Types.LearnRateStrategy.Unspecified) hash ^= LearnRateStrategy.GetHashCode();
              if (InitialLearnRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(InitialLearnRate);
              hash ^= LabelClassWeights.GetHashCode();
              if (UserColumn.Length != 0) hash ^= UserColumn.GetHashCode();
              if (ItemColumn.Length != 0) hash ^= ItemColumn.GetHashCode();
              if (DistanceType != global::Google.Cloud.Bigquery.V2.Model.Types.DistanceType.Unspecified) hash ^= DistanceType.GetHashCode();
              if (NumClusters != 0L) hash ^= NumClusters.GetHashCode();
              if (ModelUri.Length != 0) hash ^= ModelUri.GetHashCode();
              if (OptimizationStrategy != global::Google.Cloud.Bigquery.V2.Model.Types.OptimizationStrategy.Unspecified) hash ^= OptimizationStrategy.GetHashCode();
              hash ^= hiddenUnits_.GetHashCode();
              if (BatchSize != 0L) hash ^= BatchSize.GetHashCode();
              if (dropout_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Dropout);
              if (MaxTreeDepth != 0L) hash ^= MaxTreeDepth.GetHashCode();
              if (Subsample != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Subsample);
              if (minSplitLoss_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(MinSplitLoss);
              if (NumFactors != 0L) hash ^= NumFactors.GetHashCode();
              if (FeedbackType != global::Google.Cloud.Bigquery.V2.Model.Types.FeedbackType.Unspecified) hash ^= FeedbackType.GetHashCode();
              if (walsAlpha_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(WalsAlpha);
              if (KmeansInitializationMethod != global::Google.Cloud.Bigquery.V2.Model.Types.KmeansEnums.Types.KmeansInitializationMethod.Unspecified) hash ^= KmeansInitializationMethod.GetHashCode();
              if (KmeansInitializationColumn.Length != 0) hash ^= KmeansInitializationColumn.GetHashCode();
              if (TimeSeriesTimestampColumn.Length != 0) hash ^= TimeSeriesTimestampColumn.GetHashCode();
              if (TimeSeriesDataColumn.Length != 0) hash ^= TimeSeriesDataColumn.GetHashCode();
              if (AutoArima != false) hash ^= AutoArima.GetHashCode();
              if (nonSeasonalOrder_ != null) hash ^= NonSeasonalOrder.GetHashCode();
              if (DataFrequency != global::Google.Cloud.Bigquery.V2.Model.Types.DataFrequency.Unspecified) hash ^= DataFrequency.GetHashCode();
              if (IncludeDrift != false) hash ^= IncludeDrift.GetHashCode();
              if (HolidayRegion != global::Google.Cloud.Bigquery.V2.Model.Types.HolidayRegion.Unspecified) hash ^= HolidayRegion.GetHashCode();
              if (TimeSeriesIdColumn.Length != 0) hash ^= TimeSeriesIdColumn.GetHashCode();
              hash ^= timeSeriesIdColumns_.GetHashCode();
              if (Horizon != 0L) hash ^= Horizon.GetHashCode();
              if (PreserveInputStructs != false) hash ^= PreserveInputStructs.GetHashCode();
              if (AutoArimaMaxOrder != 0L) hash ^= AutoArimaMaxOrder.GetHashCode();
              if (decomposeTimeSeries_ != null) hash ^= DecomposeTimeSeries.GetHashCode();
              if (cleanSpikesAndDips_ != null) hash ^= CleanSpikesAndDips.GetHashCode();
              if (adjustStepChanges_ != null) hash ^= AdjustStepChanges.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (MaxIterations != 0L) {
                output.WriteRawTag(8);
                output.WriteInt64(MaxIterations);
              }
              if (LossType != global::Google.Cloud.Bigquery.V2.Model.Types.LossType.Unspecified) {
                output.WriteRawTag(16);
                output.WriteEnum((int) LossType);
              }
              if (LearnRate != 0D) {
                output.WriteRawTag(25);
                output.WriteDouble(LearnRate);
              }
              if (l1Regularization_ != null) {
                _single_l1Regularization_codec.WriteTagAndValue(output, L1Regularization);
              }
              if (l2Regularization_ != null) {
                _single_l2Regularization_codec.WriteTagAndValue(output, L2Regularization);
              }
              if (minRelativeProgress_ != null) {
                _single_minRelativeProgress_codec.WriteTagAndValue(output, MinRelativeProgress);
              }
              if (warmStart_ != null) {
                _single_warmStart_codec.WriteTagAndValue(output, WarmStart);
              }
              if (earlyStop_ != null) {
                _single_earlyStop_codec.WriteTagAndValue(output, EarlyStop);
              }
              inputLabelColumns_.WriteTo(output, _repeated_inputLabelColumns_codec);
              if (DataSplitMethod != global::Google.Cloud.Bigquery.V2.Model.Types.DataSplitMethod.Unspecified) {
                output.WriteRawTag(80);
                output.WriteEnum((int) DataSplitMethod);
              }
              if (DataSplitEvalFraction != 0D) {
                output.WriteRawTag(89);
                output.WriteDouble(DataSplitEvalFraction);
              }
              if (DataSplitColumn.Length != 0) {
                output.WriteRawTag(98);
                output.WriteString(DataSplitColumn);
              }
              if (LearnRateStrategy != global::Google.Cloud.Bigquery.V2.Model.Types.LearnRateStrategy.Unspecified) {
                output.WriteRawTag(104);
                output.WriteEnum((int) LearnRateStrategy);
              }
              if (InitialLearnRate != 0D) {
                output.WriteRawTag(129, 1);
                output.WriteDouble(InitialLearnRate);
              }
              labelClassWeights_.WriteTo(output, _map_labelClassWeights_codec);
              if (UserColumn.Length != 0) {
                output.WriteRawTag(146, 1);
                output.WriteString(UserColumn);
              }
              if (ItemColumn.Length != 0) {
                output.WriteRawTag(154, 1);
                output.WriteString(ItemColumn);
              }
              if (DistanceType != global::Google.Cloud.Bigquery.V2.Model.Types.DistanceType.Unspecified) {
                output.WriteRawTag(160, 1);
                output.WriteEnum((int) DistanceType);
              }
              if (NumClusters != 0L) {
                output.WriteRawTag(168, 1);
                output.WriteInt64(NumClusters);
              }
              if (ModelUri.Length != 0) {
                output.WriteRawTag(178, 1);
                output.WriteString(ModelUri);
              }
              if (OptimizationStrategy != global::Google.Cloud.Bigquery.V2.Model.Types.OptimizationStrategy.Unspecified) {
                output.WriteRawTag(184, 1);
                output.WriteEnum((int) OptimizationStrategy);
              }
              hiddenUnits_.WriteTo(output, _repeated_hiddenUnits_codec);
              if (BatchSize != 0L) {
                output.WriteRawTag(200, 1);
                output.WriteInt64(BatchSize);
              }
              if (dropout_ != null) {
                _single_dropout_codec.WriteTagAndValue(output, Dropout);
              }
              if (MaxTreeDepth != 0L) {
                output.WriteRawTag(216, 1);
                output.WriteInt64(MaxTreeDepth);
              }
              if (Subsample != 0D) {
                output.WriteRawTag(225, 1);
                output.WriteDouble(Subsample);
              }
              if (minSplitLoss_ != null) {
                _single_minSplitLoss_codec.WriteTagAndValue(output, MinSplitLoss);
              }
              if (NumFactors != 0L) {
                output.WriteRawTag(240, 1);
                output.WriteInt64(NumFactors);
              }
              if (FeedbackType != global::Google.Cloud.Bigquery.V2.Model.Types.FeedbackType.Unspecified) {
                output.WriteRawTag(248, 1);
                output.WriteEnum((int) FeedbackType);
              }
              if (walsAlpha_ != null) {
                _single_walsAlpha_codec.WriteTagAndValue(output, WalsAlpha);
              }
              if (KmeansInitializationMethod != global::Google.Cloud.Bigquery.V2.Model.Types.KmeansEnums.Types.KmeansInitializationMethod.Unspecified) {
                output.WriteRawTag(136, 2);
                output.WriteEnum((int) KmeansInitializationMethod);
              }
              if (KmeansInitializationColumn.Length != 0) {
                output.WriteRawTag(146, 2);
                output.WriteString(KmeansInitializationColumn);
              }
              if (TimeSeriesTimestampColumn.Length != 0) {
                output.WriteRawTag(154, 2);
                output.WriteString(TimeSeriesTimestampColumn);
              }
              if (TimeSeriesDataColumn.Length != 0) {
                output.WriteRawTag(162, 2);
                output.WriteString(TimeSeriesDataColumn);
              }
              if (AutoArima != false) {
                output.WriteRawTag(168, 2);
                output.WriteBool(AutoArima);
              }
              if (nonSeasonalOrder_ != null) {
                output.WriteRawTag(178, 2);
                output.WriteMessage(NonSeasonalOrder);
              }
              if (DataFrequency != global::Google.Cloud.Bigquery.V2.Model.Types.DataFrequency.Unspecified) {
                output.WriteRawTag(184, 2);
                output.WriteEnum((int) DataFrequency);
              }
              if (IncludeDrift != false) {
                output.WriteRawTag(200, 2);
                output.WriteBool(IncludeDrift);
              }
              if (HolidayRegion != global::Google.Cloud.Bigquery.V2.Model.Types.HolidayRegion.Unspecified) {
                output.WriteRawTag(208, 2);
                output.WriteEnum((int) HolidayRegion);
              }
              if (TimeSeriesIdColumn.Length != 0) {
                output.WriteRawTag(218, 2);
                output.WriteString(TimeSeriesIdColumn);
              }
              if (Horizon != 0L) {
                output.WriteRawTag(224, 2);
                output.WriteInt64(Horizon);
              }
              if (PreserveInputStructs != false) {
                output.WriteRawTag(232, 2);
                output.WriteBool(PreserveInputStructs);
              }
              if (AutoArimaMaxOrder != 0L) {
                output.WriteRawTag(240, 2);
                output.WriteInt64(AutoArimaMaxOrder);
              }
              if (decomposeTimeSeries_ != null) {
                _single_decomposeTimeSeries_codec.WriteTagAndValue(output, DecomposeTimeSeries);
              }
              timeSeriesIdColumns_.WriteTo(output, _repeated_timeSeriesIdColumns_codec);
              if (cleanSpikesAndDips_ != null) {
                _single_cleanSpikesAndDips_codec.WriteTagAndValue(output, CleanSpikesAndDips);
              }
              if (adjustStepChanges_ != null) {
                _single_adjustStepChanges_codec.WriteTagAndValue(output, AdjustStepChanges);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (MaxIterations != 0L) {
                output.WriteRawTag(8);
                output.WriteInt64(MaxIterations);
              }
              if (LossType != global::Google.Cloud.Bigquery.V2.Model.Types.LossType.Unspecified) {
                output.WriteRawTag(16);
                output.WriteEnum((int) LossType);
              }
              if (LearnRate != 0D) {
                output.WriteRawTag(25);
                output.WriteDouble(LearnRate);
              }
              if (l1Regularization_ != null) {
                _single_l1Regularization_codec.WriteTagAndValue(ref output, L1Regularization);
              }
              if (l2Regularization_ != null) {
                _single_l2Regularization_codec.WriteTagAndValue(ref output, L2Regularization);
              }
              if (minRelativeProgress_ != null) {
                _single_minRelativeProgress_codec.WriteTagAndValue(ref output, MinRelativeProgress);
              }
              if (warmStart_ != null) {
                _single_warmStart_codec.WriteTagAndValue(ref output, WarmStart);
              }
              if (earlyStop_ != null) {
                _single_earlyStop_codec.WriteTagAndValue(ref output, EarlyStop);
              }
              inputLabelColumns_.WriteTo(ref output, _repeated_inputLabelColumns_codec);
              if (DataSplitMethod != global::Google.Cloud.Bigquery.V2.Model.Types.DataSplitMethod.Unspecified) {
                output.WriteRawTag(80);
                output.WriteEnum((int) DataSplitMethod);
              }
              if (DataSplitEvalFraction != 0D) {
                output.WriteRawTag(89);
                output.WriteDouble(DataSplitEvalFraction);
              }
              if (DataSplitColumn.Length != 0) {
                output.WriteRawTag(98);
                output.WriteString(DataSplitColumn);
              }
              if (LearnRateStrategy != global::Google.Cloud.Bigquery.V2.Model.Types.LearnRateStrategy.Unspecified) {
                output.WriteRawTag(104);
                output.WriteEnum((int) LearnRateStrategy);
              }
              if (InitialLearnRate != 0D) {
                output.WriteRawTag(129, 1);
                output.WriteDouble(InitialLearnRate);
              }
              labelClassWeights_.WriteTo(ref output, _map_labelClassWeights_codec);
              if (UserColumn.Length != 0) {
                output.WriteRawTag(146, 1);
                output.WriteString(UserColumn);
              }
              if (ItemColumn.Length != 0) {
                output.WriteRawTag(154, 1);
                output.WriteString(ItemColumn);
              }
              if (DistanceType != global::Google.Cloud.Bigquery.V2.Model.Types.DistanceType.Unspecified) {
                output.WriteRawTag(160, 1);
                output.WriteEnum((int) DistanceType);
              }
              if (NumClusters != 0L) {
                output.WriteRawTag(168, 1);
                output.WriteInt64(NumClusters);
              }
              if (ModelUri.Length != 0) {
                output.WriteRawTag(178, 1);
                output.WriteString(ModelUri);
              }
              if (OptimizationStrategy != global::Google.Cloud.Bigquery.V2.Model.Types.OptimizationStrategy.Unspecified) {
                output.WriteRawTag(184, 1);
                output.WriteEnum((int) OptimizationStrategy);
              }
              hiddenUnits_.WriteTo(ref output, _repeated_hiddenUnits_codec);
              if (BatchSize != 0L) {
                output.WriteRawTag(200, 1);
                output.WriteInt64(BatchSize);
              }
              if (dropout_ != null) {
                _single_dropout_codec.WriteTagAndValue(ref output, Dropout);
              }
              if (MaxTreeDepth != 0L) {
                output.WriteRawTag(216, 1);
                output.WriteInt64(MaxTreeDepth);
              }
              if (Subsample != 0D) {
                output.WriteRawTag(225, 1);
                output.WriteDouble(Subsample);
              }
              if (minSplitLoss_ != null) {
                _single_minSplitLoss_codec.WriteTagAndValue(ref output, MinSplitLoss);
              }
              if (NumFactors != 0L) {
                output.WriteRawTag(240, 1);
                output.WriteInt64(NumFactors);
              }
              if (FeedbackType != global::Google.Cloud.Bigquery.V2.Model.Types.FeedbackType.Unspecified) {
                output.WriteRawTag(248, 1);
                output.WriteEnum((int) FeedbackType);
              }
              if (walsAlpha_ != null) {
                _single_walsAlpha_codec.WriteTagAndValue(ref output, WalsAlpha);
              }
              if (KmeansInitializationMethod != global::Google.Cloud.Bigquery.V2.Model.Types.KmeansEnums.Types.KmeansInitializationMethod.Unspecified) {
                output.WriteRawTag(136, 2);
                output.WriteEnum((int) KmeansInitializationMethod);
              }
              if (KmeansInitializationColumn.Length != 0) {
                output.WriteRawTag(146, 2);
                output.WriteString(KmeansInitializationColumn);
              }
              if (TimeSeriesTimestampColumn.Length != 0) {
                output.WriteRawTag(154, 2);
                output.WriteString(TimeSeriesTimestampColumn);
              }
              if (TimeSeriesDataColumn.Length != 0) {
                output.WriteRawTag(162, 2);
                output.WriteString(TimeSeriesDataColumn);
              }
              if (AutoArima != false) {
                output.WriteRawTag(168, 2);
                output.WriteBool(AutoArima);
              }
              if (nonSeasonalOrder_ != null) {
                output.WriteRawTag(178, 2);
                output.WriteMessage(NonSeasonalOrder);
              }
              if (DataFrequency != global::Google.Cloud.Bigquery.V2.Model.Types.DataFrequency.Unspecified) {
                output.WriteRawTag(184, 2);
                output.WriteEnum((int) DataFrequency);
              }
              if (IncludeDrift != false) {
                output.WriteRawTag(200, 2);
                output.WriteBool(IncludeDrift);
              }
              if (HolidayRegion != global::Google.Cloud.Bigquery.V2.Model.Types.HolidayRegion.Unspecified) {
                output.WriteRawTag(208, 2);
                output.WriteEnum((int) HolidayRegion);
              }
              if (TimeSeriesIdColumn.Length != 0) {
                output.WriteRawTag(218, 2);
                output.WriteString(TimeSeriesIdColumn);
              }
              if (Horizon != 0L) {
                output.WriteRawTag(224, 2);
                output.WriteInt64(Horizon);
              }
              if (PreserveInputStructs != false) {
                output.WriteRawTag(232, 2);
                output.WriteBool(PreserveInputStructs);
              }
              if (AutoArimaMaxOrder != 0L) {
                output.WriteRawTag(240, 2);
                output.WriteInt64(AutoArimaMaxOrder);
              }
              if (decomposeTimeSeries_ != null) {
                _single_decomposeTimeSeries_codec.WriteTagAndValue(ref output, DecomposeTimeSeries);
              }
              timeSeriesIdColumns_.WriteTo(ref output, _repeated_timeSeriesIdColumns_codec);
              if (cleanSpikesAndDips_ != null) {
                _single_cleanSpikesAndDips_codec.WriteTagAndValue(ref output, CleanSpikesAndDips);
              }
              if (adjustStepChanges_ != null) {
                _single_adjustStepChanges_codec.WriteTagAndValue(ref output, AdjustStepChanges);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (MaxIterations != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxIterations);
              }
              if (LossType != global::Google.Cloud.Bigquery.V2.Model.Types.LossType.Unspecified) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LossType);
              }
              if (LearnRate != 0D) {
                size += 1 + 8;
              }
              if (l1Regularization_ != null) {
                size += _single_l1Regularization_codec.CalculateSizeWithTag(L1Regularization);
              }
              if (l2Regularization_ != null) {
                size += _single_l2Regularization_codec.CalculateSizeWithTag(L2Regularization);
              }
              if (minRelativeProgress_ != null) {
                size += _single_minRelativeProgress_codec.CalculateSizeWithTag(MinRelativeProgress);
              }
              if (warmStart_ != null) {
                size += _single_warmStart_codec.CalculateSizeWithTag(WarmStart);
              }
              if (earlyStop_ != null) {
                size += _single_earlyStop_codec.CalculateSizeWithTag(EarlyStop);
              }
              size += inputLabelColumns_.CalculateSize(_repeated_inputLabelColumns_codec);
              if (DataSplitMethod != global::Google.Cloud.Bigquery.V2.Model.Types.DataSplitMethod.Unspecified) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DataSplitMethod);
              }
              if (DataSplitEvalFraction != 0D) {
                size += 1 + 8;
              }
              if (DataSplitColumn.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(DataSplitColumn);
              }
              if (LearnRateStrategy != global::Google.Cloud.Bigquery.V2.Model.Types.LearnRateStrategy.Unspecified) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LearnRateStrategy);
              }
              if (InitialLearnRate != 0D) {
                size += 2 + 8;
              }
              size += labelClassWeights_.CalculateSize(_map_labelClassWeights_codec);
              if (UserColumn.Length != 0) {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(UserColumn);
              }
              if (ItemColumn.Length != 0) {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemColumn);
              }
              if (DistanceType != global::Google.Cloud.Bigquery.V2.Model.Types.DistanceType.Unspecified) {
                size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DistanceType);
              }
              if (NumClusters != 0L) {
                size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumClusters);
              }
              if (ModelUri.Length != 0) {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(ModelUri);
              }
              if (OptimizationStrategy != global::Google.Cloud.Bigquery.V2.Model.Types.OptimizationStrategy.Unspecified) {
                size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OptimizationStrategy);
              }
              size += hiddenUnits_.CalculateSize(_repeated_hiddenUnits_codec);
              if (BatchSize != 0L) {
                size += 2 + pb::CodedOutputStream.ComputeInt64Size(BatchSize);
              }
              if (dropout_ != null) {
                size += _single_dropout_codec.CalculateSizeWithTag(Dropout);
              }
              if (MaxTreeDepth != 0L) {
                size += 2 + pb::CodedOutputStream.ComputeInt64Size(MaxTreeDepth);
              }
              if (Subsample != 0D) {
                size += 2 + 8;
              }
              if (minSplitLoss_ != null) {
                size += _single_minSplitLoss_codec.CalculateSizeWithTag(MinSplitLoss);
              }
              if (NumFactors != 0L) {
                size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumFactors);
              }
              if (FeedbackType != global::Google.Cloud.Bigquery.V2.Model.Types.FeedbackType.Unspecified) {
                size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FeedbackType);
              }
              if (walsAlpha_ != null) {
                size += _single_walsAlpha_codec.CalculateSizeWithTag(WalsAlpha);
              }
              if (KmeansInitializationMethod != global::Google.Cloud.Bigquery.V2.Model.Types.KmeansEnums.Types.KmeansInitializationMethod.Unspecified) {
                size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) KmeansInitializationMethod);
              }
              if (KmeansInitializationColumn.Length != 0) {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(KmeansInitializationColumn);
              }
              if (TimeSeriesTimestampColumn.Length != 0) {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(TimeSeriesTimestampColumn);
              }
              if (TimeSeriesDataColumn.Length != 0) {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(TimeSeriesDataColumn);
              }
              if (AutoArima != false) {
                size += 2 + 1;
              }
              if (nonSeasonalOrder_ != null) {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(NonSeasonalOrder);
              }
              if (DataFrequency != global::Google.Cloud.Bigquery.V2.Model.Types.DataFrequency.Unspecified) {
                size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DataFrequency);
              }
              if (IncludeDrift != false) {
                size += 2 + 1;
              }
              if (HolidayRegion != global::Google.Cloud.Bigquery.V2.Model.Types.HolidayRegion.Unspecified) {
                size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HolidayRegion);
              }
              if (TimeSeriesIdColumn.Length != 0) {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(TimeSeriesIdColumn);
              }
              size += timeSeriesIdColumns_.CalculateSize(_repeated_timeSeriesIdColumns_codec);
              if (Horizon != 0L) {
                size += 2 + pb::CodedOutputStream.ComputeInt64Size(Horizon);
              }
              if (PreserveInputStructs != false) {
                size += 2 + 1;
              }
              if (AutoArimaMaxOrder != 0L) {
                size += 2 + pb::CodedOutputStream.ComputeInt64Size(AutoArimaMaxOrder);
              }
              if (decomposeTimeSeries_ != null) {
                size += _single_decomposeTimeSeries_codec.CalculateSizeWithTag(DecomposeTimeSeries);
              }
              if (cleanSpikesAndDips_ != null) {
                size += _single_cleanSpikesAndDips_codec.CalculateSizeWithTag(CleanSpikesAndDips);
              }
              if (adjustStepChanges_ != null) {
                size += _single_adjustStepChanges_codec.CalculateSizeWithTag(AdjustStepChanges);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(TrainingOptions other) {
              if (other == null) {
                return;
              }
              if (other.MaxIterations != 0L) {
                MaxIterations = other.MaxIterations;
              }
              if (other.LossType != global::Google.Cloud.Bigquery.V2.Model.Types.LossType.Unspecified) {
                LossType = other.LossType;
              }
              if (other.LearnRate != 0D) {
                LearnRate = other.LearnRate;
              }
              if (other.l1Regularization_ != null) {
                if (l1Regularization_ == null || other.L1Regularization != 0D) {
                  L1Regularization = other.L1Regularization;
                }
              }
              if (other.l2Regularization_ != null) {
                if (l2Regularization_ == null || other.L2Regularization != 0D) {
                  L2Regularization = other.L2Regularization;
                }
              }
              if (other.minRelativeProgress_ != null) {
                if (minRelativeProgress_ == null || other.MinRelativeProgress != 0D) {
                  MinRelativeProgress = other.MinRelativeProgress;
                }
              }
              if (other.warmStart_ != null) {
                if (warmStart_ == null || other.WarmStart != false) {
                  WarmStart = other.WarmStart;
                }
              }
              if (other.earlyStop_ != null) {
                if (earlyStop_ == null || other.EarlyStop != false) {
                  EarlyStop = other.EarlyStop;
                }
              }
              inputLabelColumns_.Add(other.inputLabelColumns_);
              if (other.DataSplitMethod != global::Google.Cloud.Bigquery.V2.Model.Types.DataSplitMethod.Unspecified) {
                DataSplitMethod = other.DataSplitMethod;
              }
              if (other.DataSplitEvalFraction != 0D) {
                DataSplitEvalFraction = other.DataSplitEvalFraction;
              }
              if (other.DataSplitColumn.Length != 0) {
                DataSplitColumn = other.DataSplitColumn;
              }
              if (other.LearnRateStrategy != global::Google.Cloud.Bigquery.V2.Model.Types.LearnRateStrategy.Unspecified) {
                LearnRateStrategy = other.LearnRateStrategy;
              }
              if (other.InitialLearnRate != 0D) {
                InitialLearnRate = other.InitialLearnRate;
              }
              labelClassWeights_.Add(other.labelClassWeights_);
              if (other.UserColumn.Length != 0) {
                UserColumn = other.UserColumn;
              }
              if (other.ItemColumn.Length != 0) {
                ItemColumn = other.ItemColumn;
              }
              if (other.DistanceType != global::Google.Cloud.Bigquery.V2.Model.Types.DistanceType.Unspecified) {
                DistanceType = other.DistanceType;
              }
              if (other.NumClusters != 0L) {
                NumClusters = other.NumClusters;
              }
              if (other.ModelUri.Length != 0) {
                ModelUri = other.ModelUri;
              }
              if (other.OptimizationStrategy != global::Google.Cloud.Bigquery.V2.Model.Types.OptimizationStrategy.Unspecified) {
                OptimizationStrategy = other.OptimizationStrategy;
              }
              hiddenUnits_.Add(other.hiddenUnits_);
              if (other.BatchSize != 0L) {
                BatchSize = other.BatchSize;
              }
              if (other.dropout_ != null) {
                if (dropout_ == null || other.Dropout != 0D) {
                  Dropout = other.Dropout;
                }
              }
              if (other.MaxTreeDepth != 0L) {
                MaxTreeDepth = other.MaxTreeDepth;
              }
              if (other.Subsample != 0D) {
                Subsample = other.Subsample;
              }
              if (other.minSplitLoss_ != null) {
                if (minSplitLoss_ == null || other.MinSplitLoss != 0D) {
                  MinSplitLoss = other.MinSplitLoss;
                }
              }
              if (other.NumFactors != 0L) {
                NumFactors = other.NumFactors;
              }
              if (other.FeedbackType != global::Google.Cloud.Bigquery.V2.Model.Types.FeedbackType.Unspecified) {
                FeedbackType = other.FeedbackType;
              }
              if (other.walsAlpha_ != null) {
                if (walsAlpha_ == null || other.WalsAlpha != 0D) {
                  WalsAlpha = other.WalsAlpha;
                }
              }
              if (other.KmeansInitializationMethod != global::Google.Cloud.Bigquery.V2.Model.Types.KmeansEnums.Types.KmeansInitializationMethod.Unspecified) {
                KmeansInitializationMethod = other.KmeansInitializationMethod;
              }
              if (other.KmeansInitializationColumn.Length != 0) {
                KmeansInitializationColumn = other.KmeansInitializationColumn;
              }
              if (other.TimeSeriesTimestampColumn.Length != 0) {
                TimeSeriesTimestampColumn = other.TimeSeriesTimestampColumn;
              }
              if (other.TimeSeriesDataColumn.Length != 0) {
                TimeSeriesDataColumn = other.TimeSeriesDataColumn;
              }
              if (other.AutoArima != false) {
                AutoArima = other.AutoArima;
              }
              if (other.nonSeasonalOrder_ != null) {
                if (nonSeasonalOrder_ == null) {
                  NonSeasonalOrder = new global::Google.Cloud.Bigquery.V2.Model.Types.ArimaOrder();
                }
                NonSeasonalOrder.MergeFrom(other.NonSeasonalOrder);
              }
              if (other.DataFrequency != global::Google.Cloud.Bigquery.V2.Model.Types.DataFrequency.Unspecified) {
                DataFrequency = other.DataFrequency;
              }
              if (other.IncludeDrift != false) {
                IncludeDrift = other.IncludeDrift;
              }
              if (other.HolidayRegion != global::Google.Cloud.Bigquery.V2.Model.Types.HolidayRegion.Unspecified) {
                HolidayRegion = other.HolidayRegion;
              }
              if (other.TimeSeriesIdColumn.Length != 0) {
                TimeSeriesIdColumn = other.TimeSeriesIdColumn;
              }
              timeSeriesIdColumns_.Add(other.timeSeriesIdColumns_);
              if (other.Horizon != 0L) {
                Horizon = other.Horizon;
              }
              if (other.PreserveInputStructs != false) {
                PreserveInputStructs = other.PreserveInputStructs;
              }
              if (other.AutoArimaMaxOrder != 0L) {
                AutoArimaMaxOrder = other.AutoArimaMaxOrder;
              }
              if (other.decomposeTimeSeries_ != null) {
                if (decomposeTimeSeries_ == null || other.DecomposeTimeSeries != false) {
                  DecomposeTimeSeries = other.DecomposeTimeSeries;
                }
              }
              if (other.cleanSpikesAndDips_ != null) {
                if (cleanSpikesAndDips_ == null || other.CleanSpikesAndDips != false) {
                  CleanSpikesAndDips = other.CleanSpikesAndDips;
                }
              }
              if (other.adjustStepChanges_ != null) {
                if (adjustStepChanges_ == null || other.AdjustStepChanges != false) {
                  AdjustStepChanges = other.AdjustStepChanges;
                }
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    MaxIterations = input.ReadInt64();
                    break;
                  }
                  case 16: {
                    LossType = (global::Google.Cloud.Bigquery.V2.Model.Types.LossType) input.ReadEnum();
                    break;
                  }
                  case 25: {
                    LearnRate = input.ReadDouble();
                    break;
                  }
                  case 34: {
                    double? value = _single_l1Regularization_codec.Read(input);
                    if (l1Regularization_ == null || value != 0D) {
                      L1Regularization = value;
                    }
                    break;
                  }
                  case 42: {
                    double? value = _single_l2Regularization_codec.Read(input);
                    if (l2Regularization_ == null || value != 0D) {
                      L2Regularization = value;
                    }
                    break;
                  }
                  case 50: {
                    double? value = _single_minRelativeProgress_codec.Read(input);
                    if (minRelativeProgress_ == null || value != 0D) {
                      MinRelativeProgress = value;
                    }
                    break;
                  }
                  case 58: {
                    bool? value = _single_warmStart_codec.Read(input);
                    if (warmStart_ == null || value != false) {
                      WarmStart = value;
                    }
                    break;
                  }
                  case 66: {
                    bool? value = _single_earlyStop_codec.Read(input);
                    if (earlyStop_ == null || value != false) {
                      EarlyStop = value;
                    }
                    break;
                  }
                  case 74: {
                    inputLabelColumns_.AddEntriesFrom(input, _repeated_inputLabelColumns_codec);
                    break;
                  }
                  case 80: {
                    DataSplitMethod = (global::Google.Cloud.Bigquery.V2.Model.Types.DataSplitMethod) input.ReadEnum();
                    break;
                  }
                  case 89: {
                    DataSplitEvalFraction = input.ReadDouble();
                    break;
                  }
                  case 98: {
                    DataSplitColumn = input.ReadString();
                    break;
                  }
                  case 104: {
                    LearnRateStrategy = (global::Google.Cloud.Bigquery.V2.Model.Types.LearnRateStrategy) input.ReadEnum();
                    break;
                  }
                  case 129: {
                    InitialLearnRate = input.ReadDouble();
                    break;
                  }
                  case 138: {
                    labelClassWeights_.AddEntriesFrom(input, _map_labelClassWeights_codec);
                    break;
                  }
                  case 146: {
                    UserColumn = input.ReadString();
                    break;
                  }
                  case 154: {
                    ItemColumn = input.ReadString();
                    break;
                  }
                  case 160: {
                    DistanceType = (global::Google.Cloud.Bigquery.V2.Model.Types.DistanceType) input.ReadEnum();
                    break;
                  }
                  case 168: {
                    NumClusters = input.ReadInt64();
                    break;
                  }
                  case 178: {
                    ModelUri = input.ReadString();
                    break;
                  }
                  case 184: {
                    OptimizationStrategy = (global::Google.Cloud.Bigquery.V2.Model.Types.OptimizationStrategy) input.ReadEnum();
                    break;
                  }
                  case 194:
                  case 192: {
                    hiddenUnits_.AddEntriesFrom(input, _repeated_hiddenUnits_codec);
                    break;
                  }
                  case 200: {
                    BatchSize = input.ReadInt64();
                    break;
                  }
                  case 210: {
                    double? value = _single_dropout_codec.Read(input);
                    if (dropout_ == null || value != 0D) {
                      Dropout = value;
                    }
                    break;
                  }
                  case 216: {
                    MaxTreeDepth = input.ReadInt64();
                    break;
                  }
                  case 225: {
                    Subsample = input.ReadDouble();
                    break;
                  }
                  case 234: {
                    double? value = _single_minSplitLoss_codec.Read(input);
                    if (minSplitLoss_ == null || value != 0D) {
                      MinSplitLoss = value;
                    }
                    break;
                  }
                  case 240: {
                    NumFactors = input.ReadInt64();
                    break;
                  }
                  case 248: {
                    FeedbackType = (global::Google.Cloud.Bigquery.V2.Model.Types.FeedbackType) input.ReadEnum();
                    break;
                  }
                  case 258: {
                    double? value = _single_walsAlpha_codec.Read(input);
                    if (walsAlpha_ == null || value != 0D) {
                      WalsAlpha = value;
                    }
                    break;
                  }
                  case 264: {
                    KmeansInitializationMethod = (global::Google.Cloud.Bigquery.V2.Model.Types.KmeansEnums.Types.KmeansInitializationMethod) input.ReadEnum();
                    break;
                  }
                  case 274: {
                    KmeansInitializationColumn = input.ReadString();
                    break;
                  }
                  case 282: {
                    TimeSeriesTimestampColumn = input.ReadString();
                    break;
                  }
                  case 290: {
                    TimeSeriesDataColumn = input.ReadString();
                    break;
                  }
                  case 296: {
                    AutoArima = input.ReadBool();
                    break;
                  }
                  case 306: {
                    if (nonSeasonalOrder_ == null) {
                      NonSeasonalOrder = new global::Google.Cloud.Bigquery.V2.Model.Types.ArimaOrder();
                    }
                    input.ReadMessage(NonSeasonalOrder);
                    break;
                  }
                  case 312: {
                    DataFrequency = (global::Google.Cloud.Bigquery.V2.Model.Types.DataFrequency) input.ReadEnum();
                    break;
                  }
                  case 328: {
                    IncludeDrift = input.ReadBool();
                    break;
                  }
                  case 336: {
                    HolidayRegion = (global::Google.Cloud.Bigquery.V2.Model.Types.HolidayRegion) input.ReadEnum();
                    break;
                  }
                  case 346: {
                    TimeSeriesIdColumn = input.ReadString();
                    break;
                  }
                  case 352: {
                    Horizon = input.ReadInt64();
                    break;
                  }
                  case 360: {
                    PreserveInputStructs = input.ReadBool();
                    break;
                  }
                  case 368: {
                    AutoArimaMaxOrder = input.ReadInt64();
                    break;
                  }
                  case 402: {
                    bool? value = _single_decomposeTimeSeries_codec.Read(input);
                    if (decomposeTimeSeries_ == null || value != false) {
                      DecomposeTimeSeries = value;
                    }
                    break;
                  }
                  case 410: {
                    timeSeriesIdColumns_.AddEntriesFrom(input, _repeated_timeSeriesIdColumns_codec);
                    break;
                  }
                  case 418: {
                    bool? value = _single_cleanSpikesAndDips_codec.Read(input);
                    if (cleanSpikesAndDips_ == null || value != false) {
                      CleanSpikesAndDips = value;
                    }
                    break;
                  }
                  case 426: {
                    bool? value = _single_adjustStepChanges_codec.Read(input);
                    if (adjustStepChanges_ == null || value != false) {
                      AdjustStepChanges = value;
                    }
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    MaxIterations = input.ReadInt64();
                    break;
                  }
                  case 16: {
                    LossType = (global::Google.Cloud.Bigquery.V2.Model.Types.LossType) input.ReadEnum();
                    break;
                  }
                  case 25: {
                    LearnRate = input.ReadDouble();
                    break;
                  }
                  case 34: {
                    double? value = _single_l1Regularization_codec.Read(ref input);
                    if (l1Regularization_ == null || value != 0D) {
                      L1Regularization = value;
                    }
                    break;
                  }
                  case 42: {
                    double? value = _single_l2Regularization_codec.Read(ref input);
                    if (l2Regularization_ == null || value != 0D) {
                      L2Regularization = value;
                    }
                    break;
                  }
                  case 50: {
                    double? value = _single_minRelativeProgress_codec.Read(ref input);
                    if (minRelativeProgress_ == null || value != 0D) {
                      MinRelativeProgress = value;
                    }
                    break;
                  }
                  case 58: {
                    bool? value = _single_warmStart_codec.Read(ref input);
                    if (warmStart_ == null || value != false) {
                      WarmStart = value;
                    }
                    break;
                  }
                  case 66: {
                    bool? value = _single_earlyStop_codec.Read(ref input);
                    if (earlyStop_ == null || value != false) {
                      EarlyStop = value;
                    }
                    break;
                  }
                  case 74: {
                    inputLabelColumns_.AddEntriesFrom(ref input, _repeated_inputLabelColumns_codec);
                    break;
                  }
                  case 80: {
                    DataSplitMethod = (global::Google.Cloud.Bigquery.V2.Model.Types.DataSplitMethod) input.ReadEnum();
                    break;
                  }
                  case 89: {
                    DataSplitEvalFraction = input.ReadDouble();
                    break;
                  }
                  case 98: {
                    DataSplitColumn = input.ReadString();
                    break;
                  }
                  case 104: {
                    LearnRateStrategy = (global::Google.Cloud.Bigquery.V2.Model.Types.LearnRateStrategy) input.ReadEnum();
                    break;
                  }
                  case 129: {
                    InitialLearnRate = input.ReadDouble();
                    break;
                  }
                  case 138: {
                    labelClassWeights_.AddEntriesFrom(ref input, _map_labelClassWeights_codec);
                    break;
                  }
                  case 146: {
                    UserColumn = input.ReadString();
                    break;
                  }
                  case 154: {
                    ItemColumn = input.ReadString();
                    break;
                  }
                  case 160: {
                    DistanceType = (global::Google.Cloud.Bigquery.V2.Model.Types.DistanceType) input.ReadEnum();
                    break;
                  }
                  case 168: {
                    NumClusters = input.ReadInt64();
                    break;
                  }
                  case 178: {
                    ModelUri = input.ReadString();
                    break;
                  }
                  case 184: {
                    OptimizationStrategy = (global::Google.Cloud.Bigquery.V2.Model.Types.OptimizationStrategy) input.ReadEnum();
                    break;
                  }
                  case 194:
                  case 192: {
                    hiddenUnits_.AddEntriesFrom(ref input, _repeated_hiddenUnits_codec);
                    break;
                  }
                  case 200: {
                    BatchSize = input.ReadInt64();
                    break;
                  }
                  case 210: {
                    double? value = _single_dropout_codec.Read(ref input);
                    if (dropout_ == null || value != 0D) {
                      Dropout = value;
                    }
                    break;
                  }
                  case 216: {
                    MaxTreeDepth = input.ReadInt64();
                    break;
                  }
                  case 225: {
                    Subsample = input.ReadDouble();
                    break;
                  }
                  case 234: {
                    double? value = _single_minSplitLoss_codec.Read(ref input);
                    if (minSplitLoss_ == null || value != 0D) {
                      MinSplitLoss = value;
                    }
                    break;
                  }
                  case 240: {
                    NumFactors = input.ReadInt64();
                    break;
                  }
                  case 248: {
                    FeedbackType = (global::Google.Cloud.Bigquery.V2.Model.Types.FeedbackType) input.ReadEnum();
                    break;
                  }
                  case 258: {
                    double? value = _single_walsAlpha_codec.Read(ref input);
                    if (walsAlpha_ == null || value != 0D) {
                      WalsAlpha = value;
                    }
                    break;
                  }
                  case 264: {
                    KmeansInitializationMethod = (global::Google.Cloud.Bigquery.V2.Model.Types.KmeansEnums.Types.KmeansInitializationMethod) input.ReadEnum();
                    break;
                  }
                  case 274: {
                    KmeansInitializationColumn = input.ReadString();
                    break;
                  }
                  case 282: {
                    TimeSeriesTimestampColumn = input.ReadString();
                    break;
                  }
                  case 290: {
                    TimeSeriesDataColumn = input.ReadString();
                    break;
                  }
                  case 296: {
                    AutoArima = input.ReadBool();
                    break;
                  }
                  case 306: {
                    if (nonSeasonalOrder_ == null) {
                      NonSeasonalOrder = new global::Google.Cloud.Bigquery.V2.Model.Types.ArimaOrder();
                    }
                    input.ReadMessage(NonSeasonalOrder);
                    break;
                  }
                  case 312: {
                    DataFrequency = (global::Google.Cloud.Bigquery.V2.Model.Types.DataFrequency) input.ReadEnum();
                    break;
                  }
                  case 328: {
                    IncludeDrift = input.ReadBool();
                    break;
                  }
                  case 336: {
                    HolidayRegion = (global::Google.Cloud.Bigquery.V2.Model.Types.HolidayRegion) input.ReadEnum();
                    break;
                  }
                  case 346: {
                    TimeSeriesIdColumn = input.ReadString();
                    break;
                  }
                  case 352: {
                    Horizon = input.ReadInt64();
                    break;
                  }
                  case 360: {
                    PreserveInputStructs = input.ReadBool();
                    break;
                  }
                  case 368: {
                    AutoArimaMaxOrder = input.ReadInt64();
                    break;
                  }
                  case 402: {
                    bool? value = _single_decomposeTimeSeries_codec.Read(ref input);
                    if (decomposeTimeSeries_ == null || value != false) {
                      DecomposeTimeSeries = value;
                    }
                    break;
                  }
                  case 410: {
                    timeSeriesIdColumns_.AddEntriesFrom(ref input, _repeated_timeSeriesIdColumns_codec);
                    break;
                  }
                  case 418: {
                    bool? value = _single_cleanSpikesAndDips_codec.Read(ref input);
                    if (cleanSpikesAndDips_ == null || value != false) {
                      CleanSpikesAndDips = value;
                    }
                    break;
                  }
                  case 426: {
                    bool? value = _single_adjustStepChanges_codec.Read(ref input);
                    if (adjustStepChanges_ == null || value != false) {
                      AdjustStepChanges = value;
                    }
                    break;
                  }
                }
              }
            }
            #endif

          }

          /// <summary>
          /// Information about a single iteration of the training run.
          /// </summary>
          public sealed partial class IterationResult : pb::IMessage<IterationResult>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<IterationResult> _parser = new pb::MessageParser<IterationResult>(() => new IterationResult());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<IterationResult> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public IterationResult() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public IterationResult(IterationResult other) : this() {
              Index = other.Index;
              DurationMs = other.DurationMs;
              TrainingLoss = other.TrainingLoss;
              EvalLoss = other.EvalLoss;
              learnRate_ = other.learnRate_;
              clusterInfos_ = other.clusterInfos_.Clone();
              arimaResult_ = other.arimaResult_ != null ? other.arimaResult_.Clone() : null;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public IterationResult Clone() {
              return new IterationResult(this);
            }

            /// <summary>Field number for the "index" field.</summary>
            public const int IndexFieldNumber = 1;
            private static readonly pb::FieldCodec<int?> _single_index_codec = pb::FieldCodec.ForStructWrapper<int>(10);
            private int? index_;
            /// <summary>
            /// Index of the iteration, 0 based.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int? Index {
              get { return index_; }
              set {
                index_ = value;
              }
            }


            /// <summary>Field number for the "duration_ms" field.</summary>
            public const int DurationMsFieldNumber = 4;
            private static readonly pb::FieldCodec<long?> _single_durationMs_codec = pb::FieldCodec.ForStructWrapper<long>(34);
            private long? durationMs_;
            /// <summary>
            /// Time taken to run the iteration in milliseconds.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long? DurationMs {
              get { return durationMs_; }
              set {
                durationMs_ = value;
              }
            }


            /// <summary>Field number for the "training_loss" field.</summary>
            public const int TrainingLossFieldNumber = 5;
            private static readonly pb::FieldCodec<double?> _single_trainingLoss_codec = pb::FieldCodec.ForStructWrapper<double>(42);
            private double? trainingLoss_;
            /// <summary>
            /// Loss computed on the training data at the end of iteration.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double? TrainingLoss {
              get { return trainingLoss_; }
              set {
                trainingLoss_ = value;
              }
            }


            /// <summary>Field number for the "eval_loss" field.</summary>
            public const int EvalLossFieldNumber = 6;
            private static readonly pb::FieldCodec<double?> _single_evalLoss_codec = pb::FieldCodec.ForStructWrapper<double>(50);
            private double? evalLoss_;
            /// <summary>
            /// Loss computed on the eval data at the end of iteration.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double? EvalLoss {
              get { return evalLoss_; }
              set {
                evalLoss_ = value;
              }
            }


            /// <summary>Field number for the "learn_rate" field.</summary>
            public const int LearnRateFieldNumber = 7;
            private double learnRate_;
            /// <summary>
            /// Learn rate used for this iteration.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double LearnRate {
              get { return learnRate_; }
              set {
                learnRate_ = value;
              }
            }

            /// <summary>Field number for the "cluster_infos" field.</summary>
            public const int ClusterInfosFieldNumber = 8;
            private static readonly pb::FieldCodec<global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Types.ClusterInfo> _repeated_clusterInfos_codec
                = pb::FieldCodec.ForMessage(66, global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Types.ClusterInfo.Parser);
            private readonly pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Types.ClusterInfo> clusterInfos_ = new pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Types.ClusterInfo>();
            /// <summary>
            /// Information about top clusters for clustering models.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Types.ClusterInfo> ClusterInfos {
              get { return clusterInfos_; }
            }

            /// <summary>Field number for the "arima_result" field.</summary>
            public const int ArimaResultFieldNumber = 9;
            private global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Types.ArimaResult arimaResult_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Types.ArimaResult ArimaResult {
              get { return arimaResult_; }
              set {
                arimaResult_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as IterationResult);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(IterationResult other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Index != other.Index) return false;
              if (DurationMs != other.DurationMs) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(TrainingLoss, other.TrainingLoss)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(EvalLoss, other.EvalLoss)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LearnRate, other.LearnRate)) return false;
              if(!clusterInfos_.Equals(other.clusterInfos_)) return false;
              if (!object.Equals(ArimaResult, other.ArimaResult)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (index_ != null) hash ^= Index.GetHashCode();
              if (durationMs_ != null) hash ^= DurationMs.GetHashCode();
              if (trainingLoss_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(TrainingLoss);
              if (evalLoss_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(EvalLoss);
              if (LearnRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LearnRate);
              hash ^= clusterInfos_.GetHashCode();
              if (arimaResult_ != null) hash ^= ArimaResult.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (index_ != null) {
                _single_index_codec.WriteTagAndValue(output, Index);
              }
              if (durationMs_ != null) {
                _single_durationMs_codec.WriteTagAndValue(output, DurationMs);
              }
              if (trainingLoss_ != null) {
                _single_trainingLoss_codec.WriteTagAndValue(output, TrainingLoss);
              }
              if (evalLoss_ != null) {
                _single_evalLoss_codec.WriteTagAndValue(output, EvalLoss);
              }
              if (LearnRate != 0D) {
                output.WriteRawTag(57);
                output.WriteDouble(LearnRate);
              }
              clusterInfos_.WriteTo(output, _repeated_clusterInfos_codec);
              if (arimaResult_ != null) {
                output.WriteRawTag(74);
                output.WriteMessage(ArimaResult);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (index_ != null) {
                _single_index_codec.WriteTagAndValue(ref output, Index);
              }
              if (durationMs_ != null) {
                _single_durationMs_codec.WriteTagAndValue(ref output, DurationMs);
              }
              if (trainingLoss_ != null) {
                _single_trainingLoss_codec.WriteTagAndValue(ref output, TrainingLoss);
              }
              if (evalLoss_ != null) {
                _single_evalLoss_codec.WriteTagAndValue(ref output, EvalLoss);
              }
              if (LearnRate != 0D) {
                output.WriteRawTag(57);
                output.WriteDouble(LearnRate);
              }
              clusterInfos_.WriteTo(ref output, _repeated_clusterInfos_codec);
              if (arimaResult_ != null) {
                output.WriteRawTag(74);
                output.WriteMessage(ArimaResult);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (index_ != null) {
                size += _single_index_codec.CalculateSizeWithTag(Index);
              }
              if (durationMs_ != null) {
                size += _single_durationMs_codec.CalculateSizeWithTag(DurationMs);
              }
              if (trainingLoss_ != null) {
                size += _single_trainingLoss_codec.CalculateSizeWithTag(TrainingLoss);
              }
              if (evalLoss_ != null) {
                size += _single_evalLoss_codec.CalculateSizeWithTag(EvalLoss);
              }
              if (LearnRate != 0D) {
                size += 1 + 8;
              }
              size += clusterInfos_.CalculateSize(_repeated_clusterInfos_codec);
              if (arimaResult_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArimaResult);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(IterationResult other) {
              if (other == null) {
                return;
              }
              if (other.index_ != null) {
                if (index_ == null || other.Index != 0) {
                  Index = other.Index;
                }
              }
              if (other.durationMs_ != null) {
                if (durationMs_ == null || other.DurationMs != 0L) {
                  DurationMs = other.DurationMs;
                }
              }
              if (other.trainingLoss_ != null) {
                if (trainingLoss_ == null || other.TrainingLoss != 0D) {
                  TrainingLoss = other.TrainingLoss;
                }
              }
              if (other.evalLoss_ != null) {
                if (evalLoss_ == null || other.EvalLoss != 0D) {
                  EvalLoss = other.EvalLoss;
                }
              }
              if (other.LearnRate != 0D) {
                LearnRate = other.LearnRate;
              }
              clusterInfos_.Add(other.clusterInfos_);
              if (other.arimaResult_ != null) {
                if (arimaResult_ == null) {
                  ArimaResult = new global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Types.ArimaResult();
                }
                ArimaResult.MergeFrom(other.ArimaResult);
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    int? value = _single_index_codec.Read(input);
                    if (index_ == null || value != 0) {
                      Index = value;
                    }
                    break;
                  }
                  case 34: {
                    long? value = _single_durationMs_codec.Read(input);
                    if (durationMs_ == null || value != 0L) {
                      DurationMs = value;
                    }
                    break;
                  }
                  case 42: {
                    double? value = _single_trainingLoss_codec.Read(input);
                    if (trainingLoss_ == null || value != 0D) {
                      TrainingLoss = value;
                    }
                    break;
                  }
                  case 50: {
                    double? value = _single_evalLoss_codec.Read(input);
                    if (evalLoss_ == null || value != 0D) {
                      EvalLoss = value;
                    }
                    break;
                  }
                  case 57: {
                    LearnRate = input.ReadDouble();
                    break;
                  }
                  case 66: {
                    clusterInfos_.AddEntriesFrom(input, _repeated_clusterInfos_codec);
                    break;
                  }
                  case 74: {
                    if (arimaResult_ == null) {
                      ArimaResult = new global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Types.ArimaResult();
                    }
                    input.ReadMessage(ArimaResult);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    int? value = _single_index_codec.Read(ref input);
                    if (index_ == null || value != 0) {
                      Index = value;
                    }
                    break;
                  }
                  case 34: {
                    long? value = _single_durationMs_codec.Read(ref input);
                    if (durationMs_ == null || value != 0L) {
                      DurationMs = value;
                    }
                    break;
                  }
                  case 42: {
                    double? value = _single_trainingLoss_codec.Read(ref input);
                    if (trainingLoss_ == null || value != 0D) {
                      TrainingLoss = value;
                    }
                    break;
                  }
                  case 50: {
                    double? value = _single_evalLoss_codec.Read(ref input);
                    if (evalLoss_ == null || value != 0D) {
                      EvalLoss = value;
                    }
                    break;
                  }
                  case 57: {
                    LearnRate = input.ReadDouble();
                    break;
                  }
                  case 66: {
                    clusterInfos_.AddEntriesFrom(ref input, _repeated_clusterInfos_codec);
                    break;
                  }
                  case 74: {
                    if (arimaResult_ == null) {
                      ArimaResult = new global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Types.ArimaResult();
                    }
                    input.ReadMessage(ArimaResult);
                    break;
                  }
                }
              }
            }
            #endif

            #region Nested types
            /// <summary>Container for nested types declared in the IterationResult message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              /// <summary>
              /// Information about a single cluster for clustering model.
              /// </summary>
              public sealed partial class ClusterInfo : pb::IMessage<ClusterInfo>
              #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  , pb::IBufferMessage
              #endif
              {
                private static readonly pb::MessageParser<ClusterInfo> _parser = new pb::MessageParser<ClusterInfo>(() => new ClusterInfo());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<ClusterInfo> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ClusterInfo() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ClusterInfo(ClusterInfo other) : this() {
                  centroidId_ = other.centroidId_;
                  ClusterRadius = other.ClusterRadius;
                  ClusterSize = other.ClusterSize;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ClusterInfo Clone() {
                  return new ClusterInfo(this);
                }

                /// <summary>Field number for the "centroid_id" field.</summary>
                public const int CentroidIdFieldNumber = 1;
                private long centroidId_;
                /// <summary>
                /// Centroid id.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long CentroidId {
                  get { return centroidId_; }
                  set {
                    centroidId_ = value;
                  }
                }

                /// <summary>Field number for the "cluster_radius" field.</summary>
                public const int ClusterRadiusFieldNumber = 2;
                private static readonly pb::FieldCodec<double?> _single_clusterRadius_codec = pb::FieldCodec.ForStructWrapper<double>(18);
                private double? clusterRadius_;
                /// <summary>
                /// Cluster radius, the average distance from centroid
                /// to each point assigned to the cluster.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public double? ClusterRadius {
                  get { return clusterRadius_; }
                  set {
                    clusterRadius_ = value;
                  }
                }


                /// <summary>Field number for the "cluster_size" field.</summary>
                public const int ClusterSizeFieldNumber = 3;
                private static readonly pb::FieldCodec<long?> _single_clusterSize_codec = pb::FieldCodec.ForStructWrapper<long>(26);
                private long? clusterSize_;
                /// <summary>
                /// Cluster size, the total number of points assigned to the cluster.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long? ClusterSize {
                  get { return clusterSize_; }
                  set {
                    clusterSize_ = value;
                  }
                }


                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as ClusterInfo);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(ClusterInfo other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (CentroidId != other.CentroidId) return false;
                  if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ClusterRadius, other.ClusterRadius)) return false;
                  if (ClusterSize != other.ClusterSize) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (CentroidId != 0L) hash ^= CentroidId.GetHashCode();
                  if (clusterRadius_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ClusterRadius);
                  if (clusterSize_ != null) hash ^= ClusterSize.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  output.WriteRawMessage(this);
                #else
                  if (CentroidId != 0L) {
                    output.WriteRawTag(8);
                    output.WriteInt64(CentroidId);
                  }
                  if (clusterRadius_ != null) {
                    _single_clusterRadius_codec.WriteTagAndValue(output, ClusterRadius);
                  }
                  if (clusterSize_ != null) {
                    _single_clusterSize_codec.WriteTagAndValue(output, ClusterSize);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
                  if (CentroidId != 0L) {
                    output.WriteRawTag(8);
                    output.WriteInt64(CentroidId);
                  }
                  if (clusterRadius_ != null) {
                    _single_clusterRadius_codec.WriteTagAndValue(ref output, ClusterRadius);
                  }
                  if (clusterSize_ != null) {
                    _single_clusterSize_codec.WriteTagAndValue(ref output, ClusterSize);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(ref output);
                  }
                }
                #endif

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (CentroidId != 0L) {
                    size += 1 + pb::CodedOutputStream.ComputeInt64Size(CentroidId);
                  }
                  if (clusterRadius_ != null) {
                    size += _single_clusterRadius_codec.CalculateSizeWithTag(ClusterRadius);
                  }
                  if (clusterSize_ != null) {
                    size += _single_clusterSize_codec.CalculateSizeWithTag(ClusterSize);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(ClusterInfo other) {
                  if (other == null) {
                    return;
                  }
                  if (other.CentroidId != 0L) {
                    CentroidId = other.CentroidId;
                  }
                  if (other.clusterRadius_ != null) {
                    if (clusterRadius_ == null || other.ClusterRadius != 0D) {
                      ClusterRadius = other.ClusterRadius;
                    }
                  }
                  if (other.clusterSize_ != null) {
                    if (clusterSize_ == null || other.ClusterSize != 0L) {
                      ClusterSize = other.ClusterSize;
                    }
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  input.ReadRawMessage(this);
                #else
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 8: {
                        CentroidId = input.ReadInt64();
                        break;
                      }
                      case 18: {
                        double? value = _single_clusterRadius_codec.Read(input);
                        if (clusterRadius_ == null || value != 0D) {
                          ClusterRadius = value;
                        }
                        break;
                      }
                      case 26: {
                        long? value = _single_clusterSize_codec.Read(input);
                        if (clusterSize_ == null || value != 0L) {
                          ClusterSize = value;
                        }
                        break;
                      }
                    }
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                      case 8: {
                        CentroidId = input.ReadInt64();
                        break;
                      }
                      case 18: {
                        double? value = _single_clusterRadius_codec.Read(ref input);
                        if (clusterRadius_ == null || value != 0D) {
                          ClusterRadius = value;
                        }
                        break;
                      }
                      case 26: {
                        long? value = _single_clusterSize_codec.Read(ref input);
                        if (clusterSize_ == null || value != 0L) {
                          ClusterSize = value;
                        }
                        break;
                      }
                    }
                  }
                }
                #endif

              }

              /// <summary>
              /// (Auto-)arima fitting result. Wrap everything in ArimaResult for easier
              /// refactoring if we want to use model-specific iteration results.
              /// </summary>
              public sealed partial class ArimaResult : pb::IMessage<ArimaResult>
              #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  , pb::IBufferMessage
              #endif
              {
                private static readonly pb::MessageParser<ArimaResult> _parser = new pb::MessageParser<ArimaResult>(() => new ArimaResult());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<ArimaResult> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Descriptor.NestedTypes[1]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ArimaResult() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ArimaResult(ArimaResult other) : this() {
                  arimaModelInfo_ = other.arimaModelInfo_.Clone();
                  seasonalPeriods_ = other.seasonalPeriods_.Clone();
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ArimaResult Clone() {
                  return new ArimaResult(this);
                }

                /// <summary>Field number for the "arima_model_info" field.</summary>
                public const int ArimaModelInfoFieldNumber = 1;
                private static readonly pb::FieldCodec<global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Types.ArimaResult.Types.ArimaModelInfo> _repeated_arimaModelInfo_codec
                    = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Types.ArimaResult.Types.ArimaModelInfo.Parser);
                private readonly pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Types.ArimaResult.Types.ArimaModelInfo> arimaModelInfo_ = new pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Types.ArimaResult.Types.ArimaModelInfo>();
                /// <summary>
                /// This message is repeated because there are multiple arima models
                /// fitted in auto-arima. For non-auto-arima model, its size is one.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Types.ArimaResult.Types.ArimaModelInfo> ArimaModelInfo {
                  get { return arimaModelInfo_; }
                }

                /// <summary>Field number for the "seasonal_periods" field.</summary>
                public const int SeasonalPeriodsFieldNumber = 2;
                private static readonly pb::FieldCodec<global::Google.Cloud.Bigquery.V2.Model.Types.SeasonalPeriod.Types.SeasonalPeriodType> _repeated_seasonalPeriods_codec
                    = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::Google.Cloud.Bigquery.V2.Model.Types.SeasonalPeriod.Types.SeasonalPeriodType) x);
                private readonly pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.SeasonalPeriod.Types.SeasonalPeriodType> seasonalPeriods_ = new pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.SeasonalPeriod.Types.SeasonalPeriodType>();
                /// <summary>
                /// Seasonal periods. Repeated because multiple periods are supported for
                /// one time series.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.SeasonalPeriod.Types.SeasonalPeriodType> SeasonalPeriods {
                  get { return seasonalPeriods_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as ArimaResult);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(ArimaResult other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if(!arimaModelInfo_.Equals(other.arimaModelInfo_)) return false;
                  if(!seasonalPeriods_.Equals(other.seasonalPeriods_)) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  hash ^= arimaModelInfo_.GetHashCode();
                  hash ^= seasonalPeriods_.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  output.WriteRawMessage(this);
                #else
                  arimaModelInfo_.WriteTo(output, _repeated_arimaModelInfo_codec);
                  seasonalPeriods_.WriteTo(output, _repeated_seasonalPeriods_codec);
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
                  arimaModelInfo_.WriteTo(ref output, _repeated_arimaModelInfo_codec);
                  seasonalPeriods_.WriteTo(ref output, _repeated_seasonalPeriods_codec);
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(ref output);
                  }
                }
                #endif

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  size += arimaModelInfo_.CalculateSize(_repeated_arimaModelInfo_codec);
                  size += seasonalPeriods_.CalculateSize(_repeated_seasonalPeriods_codec);
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(ArimaResult other) {
                  if (other == null) {
                    return;
                  }
                  arimaModelInfo_.Add(other.arimaModelInfo_);
                  seasonalPeriods_.Add(other.seasonalPeriods_);
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  input.ReadRawMessage(this);
                #else
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        arimaModelInfo_.AddEntriesFrom(input, _repeated_arimaModelInfo_codec);
                        break;
                      }
                      case 18:
                      case 16: {
                        seasonalPeriods_.AddEntriesFrom(input, _repeated_seasonalPeriods_codec);
                        break;
                      }
                    }
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                      case 10: {
                        arimaModelInfo_.AddEntriesFrom(ref input, _repeated_arimaModelInfo_codec);
                        break;
                      }
                      case 18:
                      case 16: {
                        seasonalPeriods_.AddEntriesFrom(ref input, _repeated_seasonalPeriods_codec);
                        break;
                      }
                    }
                  }
                }
                #endif

                #region Nested types
                /// <summary>Container for nested types declared in the ArimaResult message type.</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static partial class Types {
                  /// <summary>
                  /// Arima coefficients.
                  /// </summary>
                  public sealed partial class ArimaCoefficients : pb::IMessage<ArimaCoefficients>
                  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                      , pb::IBufferMessage
                  #endif
                  {
                    private static readonly pb::MessageParser<ArimaCoefficients> _parser = new pb::MessageParser<ArimaCoefficients>(() => new ArimaCoefficients());
                    private pb::UnknownFieldSet _unknownFields;
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public static pb::MessageParser<ArimaCoefficients> Parser { get { return _parser; } }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public static pbr::MessageDescriptor Descriptor {
                      get { return global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Types.ArimaResult.Descriptor.NestedTypes[0]; }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    pbr::MessageDescriptor pb::IMessage.Descriptor {
                      get { return Descriptor; }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public ArimaCoefficients() {
                      OnConstruction();
                    }

                    partial void OnConstruction();

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public ArimaCoefficients(ArimaCoefficients other) : this() {
                      autoRegressiveCoefficients_ = other.autoRegressiveCoefficients_.Clone();
                      movingAverageCoefficients_ = other.movingAverageCoefficients_.Clone();
                      interceptCoefficient_ = other.interceptCoefficient_;
                      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public ArimaCoefficients Clone() {
                      return new ArimaCoefficients(this);
                    }

                    /// <summary>Field number for the "auto_regressive_coefficients" field.</summary>
                    public const int AutoRegressiveCoefficientsFieldNumber = 1;
                    private static readonly pb::FieldCodec<double> _repeated_autoRegressiveCoefficients_codec
                        = pb::FieldCodec.ForDouble(10);
                    private readonly pbc::RepeatedField<double> autoRegressiveCoefficients_ = new pbc::RepeatedField<double>();
                    /// <summary>
                    /// Auto-regressive coefficients, an array of double.
                    /// </summary>
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public pbc::RepeatedField<double> AutoRegressiveCoefficients {
                      get { return autoRegressiveCoefficients_; }
                    }

                    /// <summary>Field number for the "moving_average_coefficients" field.</summary>
                    public const int MovingAverageCoefficientsFieldNumber = 2;
                    private static readonly pb::FieldCodec<double> _repeated_movingAverageCoefficients_codec
                        = pb::FieldCodec.ForDouble(18);
                    private readonly pbc::RepeatedField<double> movingAverageCoefficients_ = new pbc::RepeatedField<double>();
                    /// <summary>
                    /// Moving-average coefficients, an array of double.
                    /// </summary>
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public pbc::RepeatedField<double> MovingAverageCoefficients {
                      get { return movingAverageCoefficients_; }
                    }

                    /// <summary>Field number for the "intercept_coefficient" field.</summary>
                    public const int InterceptCoefficientFieldNumber = 3;
                    private double interceptCoefficient_;
                    /// <summary>
                    /// Intercept coefficient, just a double not an array.
                    /// </summary>
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public double InterceptCoefficient {
                      get { return interceptCoefficient_; }
                      set {
                        interceptCoefficient_ = value;
                      }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public override bool Equals(object other) {
                      return Equals(other as ArimaCoefficients);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public bool Equals(ArimaCoefficients other) {
                      if (ReferenceEquals(other, null)) {
                        return false;
                      }
                      if (ReferenceEquals(other, this)) {
                        return true;
                      }
                      if(!autoRegressiveCoefficients_.Equals(other.autoRegressiveCoefficients_)) return false;
                      if(!movingAverageCoefficients_.Equals(other.movingAverageCoefficients_)) return false;
                      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(InterceptCoefficient, other.InterceptCoefficient)) return false;
                      return Equals(_unknownFields, other._unknownFields);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public override int GetHashCode() {
                      int hash = 1;
                      hash ^= autoRegressiveCoefficients_.GetHashCode();
                      hash ^= movingAverageCoefficients_.GetHashCode();
                      if (InterceptCoefficient != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(InterceptCoefficient);
                      if (_unknownFields != null) {
                        hash ^= _unknownFields.GetHashCode();
                      }
                      return hash;
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public override string ToString() {
                      return pb::JsonFormatter.ToDiagnosticString(this);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public void WriteTo(pb::CodedOutputStream output) {
                    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                      output.WriteRawMessage(this);
                    #else
                      autoRegressiveCoefficients_.WriteTo(output, _repeated_autoRegressiveCoefficients_codec);
                      movingAverageCoefficients_.WriteTo(output, _repeated_movingAverageCoefficients_codec);
                      if (InterceptCoefficient != 0D) {
                        output.WriteRawTag(25);
                        output.WriteDouble(InterceptCoefficient);
                      }
                      if (_unknownFields != null) {
                        _unknownFields.WriteTo(output);
                      }
                    #endif
                    }

                    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
                      autoRegressiveCoefficients_.WriteTo(ref output, _repeated_autoRegressiveCoefficients_codec);
                      movingAverageCoefficients_.WriteTo(ref output, _repeated_movingAverageCoefficients_codec);
                      if (InterceptCoefficient != 0D) {
                        output.WriteRawTag(25);
                        output.WriteDouble(InterceptCoefficient);
                      }
                      if (_unknownFields != null) {
                        _unknownFields.WriteTo(ref output);
                      }
                    }
                    #endif

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public int CalculateSize() {
                      int size = 0;
                      size += autoRegressiveCoefficients_.CalculateSize(_repeated_autoRegressiveCoefficients_codec);
                      size += movingAverageCoefficients_.CalculateSize(_repeated_movingAverageCoefficients_codec);
                      if (InterceptCoefficient != 0D) {
                        size += 1 + 8;
                      }
                      if (_unknownFields != null) {
                        size += _unknownFields.CalculateSize();
                      }
                      return size;
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public void MergeFrom(ArimaCoefficients other) {
                      if (other == null) {
                        return;
                      }
                      autoRegressiveCoefficients_.Add(other.autoRegressiveCoefficients_);
                      movingAverageCoefficients_.Add(other.movingAverageCoefficients_);
                      if (other.InterceptCoefficient != 0D) {
                        InterceptCoefficient = other.InterceptCoefficient;
                      }
                      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public void MergeFrom(pb::CodedInputStream input) {
                    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                      input.ReadRawMessage(this);
                    #else
                      uint tag;
                      while ((tag = input.ReadTag()) != 0) {
                        switch(tag) {
                          default:
                            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                            break;
                          case 10:
                          case 9: {
                            autoRegressiveCoefficients_.AddEntriesFrom(input, _repeated_autoRegressiveCoefficients_codec);
                            break;
                          }
                          case 18:
                          case 17: {
                            movingAverageCoefficients_.AddEntriesFrom(input, _repeated_movingAverageCoefficients_codec);
                            break;
                          }
                          case 25: {
                            InterceptCoefficient = input.ReadDouble();
                            break;
                          }
                        }
                      }
                    #endif
                    }

                    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
                      uint tag;
                      while ((tag = input.ReadTag()) != 0) {
                        switch(tag) {
                          default:
                            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                            break;
                          case 10:
                          case 9: {
                            autoRegressiveCoefficients_.AddEntriesFrom(ref input, _repeated_autoRegressiveCoefficients_codec);
                            break;
                          }
                          case 18:
                          case 17: {
                            movingAverageCoefficients_.AddEntriesFrom(ref input, _repeated_movingAverageCoefficients_codec);
                            break;
                          }
                          case 25: {
                            InterceptCoefficient = input.ReadDouble();
                            break;
                          }
                        }
                      }
                    }
                    #endif

                  }

                  /// <summary>
                  /// Arima model information.
                  /// </summary>
                  public sealed partial class ArimaModelInfo : pb::IMessage<ArimaModelInfo>
                  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                      , pb::IBufferMessage
                  #endif
                  {
                    private static readonly pb::MessageParser<ArimaModelInfo> _parser = new pb::MessageParser<ArimaModelInfo>(() => new ArimaModelInfo());
                    private pb::UnknownFieldSet _unknownFields;
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public static pb::MessageParser<ArimaModelInfo> Parser { get { return _parser; } }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public static pbr::MessageDescriptor Descriptor {
                      get { return global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Types.ArimaResult.Descriptor.NestedTypes[1]; }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    pbr::MessageDescriptor pb::IMessage.Descriptor {
                      get { return Descriptor; }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public ArimaModelInfo() {
                      OnConstruction();
                    }

                    partial void OnConstruction();

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public ArimaModelInfo(ArimaModelInfo other) : this() {
                      nonSeasonalOrder_ = other.nonSeasonalOrder_ != null ? other.nonSeasonalOrder_.Clone() : null;
                      arimaCoefficients_ = other.arimaCoefficients_ != null ? other.arimaCoefficients_.Clone() : null;
                      arimaFittingMetrics_ = other.arimaFittingMetrics_ != null ? other.arimaFittingMetrics_.Clone() : null;
                      hasDrift_ = other.hasDrift_;
                      timeSeriesId_ = other.timeSeriesId_;
                      timeSeriesIds_ = other.timeSeriesIds_.Clone();
                      seasonalPeriods_ = other.seasonalPeriods_.Clone();
                      HasHolidayEffect = other.HasHolidayEffect;
                      HasSpikesAndDips = other.HasSpikesAndDips;
                      HasStepChanges = other.HasStepChanges;
                      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public ArimaModelInfo Clone() {
                      return new ArimaModelInfo(this);
                    }

                    /// <summary>Field number for the "non_seasonal_order" field.</summary>
                    public const int NonSeasonalOrderFieldNumber = 1;
                    private global::Google.Cloud.Bigquery.V2.Model.Types.ArimaOrder nonSeasonalOrder_;
                    /// <summary>
                    /// Non-seasonal order.
                    /// </summary>
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public global::Google.Cloud.Bigquery.V2.Model.Types.ArimaOrder NonSeasonalOrder {
                      get { return nonSeasonalOrder_; }
                      set {
                        nonSeasonalOrder_ = value;
                      }
                    }

                    /// <summary>Field number for the "arima_coefficients" field.</summary>
                    public const int ArimaCoefficientsFieldNumber = 2;
                    private global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Types.ArimaResult.Types.ArimaCoefficients arimaCoefficients_;
                    /// <summary>
                    /// Arima coefficients.
                    /// </summary>
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Types.ArimaResult.Types.ArimaCoefficients ArimaCoefficients {
                      get { return arimaCoefficients_; }
                      set {
                        arimaCoefficients_ = value;
                      }
                    }

                    /// <summary>Field number for the "arima_fitting_metrics" field.</summary>
                    public const int ArimaFittingMetricsFieldNumber = 3;
                    private global::Google.Cloud.Bigquery.V2.Model.Types.ArimaFittingMetrics arimaFittingMetrics_;
                    /// <summary>
                    /// Arima fitting metrics.
                    /// </summary>
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public global::Google.Cloud.Bigquery.V2.Model.Types.ArimaFittingMetrics ArimaFittingMetrics {
                      get { return arimaFittingMetrics_; }
                      set {
                        arimaFittingMetrics_ = value;
                      }
                    }

                    /// <summary>Field number for the "has_drift" field.</summary>
                    public const int HasDriftFieldNumber = 4;
                    private bool hasDrift_;
                    /// <summary>
                    /// Whether Arima model fitted with drift or not. It is always false
                    /// when d is not 1.
                    /// </summary>
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public bool HasDrift {
                      get { return hasDrift_; }
                      set {
                        hasDrift_ = value;
                      }
                    }

                    /// <summary>Field number for the "time_series_id" field.</summary>
                    public const int TimeSeriesIdFieldNumber = 5;
                    private string timeSeriesId_ = "";
                    /// <summary>
                    /// The time_series_id value for this time series. It will be one of
                    /// the unique values from the time_series_id_column specified during
                    /// ARIMA model training. Only present when time_series_id_column
                    /// training option was used.
                    /// </summary>
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public string TimeSeriesId {
                      get { return timeSeriesId_; }
                      set {
                        timeSeriesId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                      }
                    }

                    /// <summary>Field number for the "time_series_ids" field.</summary>
                    public const int TimeSeriesIdsFieldNumber = 10;
                    private static readonly pb::FieldCodec<string> _repeated_timeSeriesIds_codec
                        = pb::FieldCodec.ForString(82);
                    private readonly pbc::RepeatedField<string> timeSeriesIds_ = new pbc::RepeatedField<string>();
                    /// <summary>
                    /// The tuple of time_series_ids identifying this time series. It will
                    /// be one of the unique tuples of values present in the
                    /// time_series_id_columns specified during ARIMA model training. Only
                    /// present when time_series_id_columns training option was used and
                    /// the order of values here are same as the order of
                    /// time_series_id_columns.
                    /// </summary>
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public pbc::RepeatedField<string> TimeSeriesIds {
                      get { return timeSeriesIds_; }
                    }

                    /// <summary>Field number for the "seasonal_periods" field.</summary>
                    public const int SeasonalPeriodsFieldNumber = 6;
                    private static readonly pb::FieldCodec<global::Google.Cloud.Bigquery.V2.Model.Types.SeasonalPeriod.Types.SeasonalPeriodType> _repeated_seasonalPeriods_codec
                        = pb::FieldCodec.ForEnum(50, x => (int) x, x => (global::Google.Cloud.Bigquery.V2.Model.Types.SeasonalPeriod.Types.SeasonalPeriodType) x);
                    private readonly pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.SeasonalPeriod.Types.SeasonalPeriodType> seasonalPeriods_ = new pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.SeasonalPeriod.Types.SeasonalPeriodType>();
                    /// <summary>
                    /// Seasonal periods. Repeated because multiple periods are supported
                    /// for one time series.
                    /// </summary>
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model.Types.SeasonalPeriod.Types.SeasonalPeriodType> SeasonalPeriods {
                      get { return seasonalPeriods_; }
                    }

                    /// <summary>Field number for the "has_holiday_effect" field.</summary>
                    public const int HasHolidayEffectFieldNumber = 7;
                    private static readonly pb::FieldCodec<bool?> _single_hasHolidayEffect_codec = pb::FieldCodec.ForStructWrapper<bool>(58);
                    private bool? hasHolidayEffect_;
                    /// <summary>
                    /// If true, holiday_effect is a part of time series decomposition
                    /// result.
                    /// </summary>
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public bool? HasHolidayEffect {
                      get { return hasHolidayEffect_; }
                      set {
                        hasHolidayEffect_ = value;
                      }
                    }


                    /// <summary>Field number for the "has_spikes_and_dips" field.</summary>
                    public const int HasSpikesAndDipsFieldNumber = 8;
                    private static readonly pb::FieldCodec<bool?> _single_hasSpikesAndDips_codec = pb::FieldCodec.ForStructWrapper<bool>(66);
                    private bool? hasSpikesAndDips_;
                    /// <summary>
                    /// If true, spikes_and_dips is a part of time series decomposition
                    /// result.
                    /// </summary>
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public bool? HasSpikesAndDips {
                      get { return hasSpikesAndDips_; }
                      set {
                        hasSpikesAndDips_ = value;
                      }
                    }


                    /// <summary>Field number for the "has_step_changes" field.</summary>
                    public const int HasStepChangesFieldNumber = 9;
                    private static readonly pb::FieldCodec<bool?> _single_hasStepChanges_codec = pb::FieldCodec.ForStructWrapper<bool>(74);
                    private bool? hasStepChanges_;
                    /// <summary>
                    /// If true, step_changes is a part of time series decomposition
                    /// result.
                    /// </summary>
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public bool? HasStepChanges {
                      get { return hasStepChanges_; }
                      set {
                        hasStepChanges_ = value;
                      }
                    }


                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public override bool Equals(object other) {
                      return Equals(other as ArimaModelInfo);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public bool Equals(ArimaModelInfo other) {
                      if (ReferenceEquals(other, null)) {
                        return false;
                      }
                      if (ReferenceEquals(other, this)) {
                        return true;
                      }
                      if (!object.Equals(NonSeasonalOrder, other.NonSeasonalOrder)) return false;
                      if (!object.Equals(ArimaCoefficients, other.ArimaCoefficients)) return false;
                      if (!object.Equals(ArimaFittingMetrics, other.ArimaFittingMetrics)) return false;
                      if (HasDrift != other.HasDrift) return false;
                      if (TimeSeriesId != other.TimeSeriesId) return false;
                      if(!timeSeriesIds_.Equals(other.timeSeriesIds_)) return false;
                      if(!seasonalPeriods_.Equals(other.seasonalPeriods_)) return false;
                      if (HasHolidayEffect != other.HasHolidayEffect) return false;
                      if (HasSpikesAndDips != other.HasSpikesAndDips) return false;
                      if (HasStepChanges != other.HasStepChanges) return false;
                      return Equals(_unknownFields, other._unknownFields);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public override int GetHashCode() {
                      int hash = 1;
                      if (nonSeasonalOrder_ != null) hash ^= NonSeasonalOrder.GetHashCode();
                      if (arimaCoefficients_ != null) hash ^= ArimaCoefficients.GetHashCode();
                      if (arimaFittingMetrics_ != null) hash ^= ArimaFittingMetrics.GetHashCode();
                      if (HasDrift != false) hash ^= HasDrift.GetHashCode();
                      if (TimeSeriesId.Length != 0) hash ^= TimeSeriesId.GetHashCode();
                      hash ^= timeSeriesIds_.GetHashCode();
                      hash ^= seasonalPeriods_.GetHashCode();
                      if (hasHolidayEffect_ != null) hash ^= HasHolidayEffect.GetHashCode();
                      if (hasSpikesAndDips_ != null) hash ^= HasSpikesAndDips.GetHashCode();
                      if (hasStepChanges_ != null) hash ^= HasStepChanges.GetHashCode();
                      if (_unknownFields != null) {
                        hash ^= _unknownFields.GetHashCode();
                      }
                      return hash;
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public override string ToString() {
                      return pb::JsonFormatter.ToDiagnosticString(this);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public void WriteTo(pb::CodedOutputStream output) {
                    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                      output.WriteRawMessage(this);
                    #else
                      if (nonSeasonalOrder_ != null) {
                        output.WriteRawTag(10);
                        output.WriteMessage(NonSeasonalOrder);
                      }
                      if (arimaCoefficients_ != null) {
                        output.WriteRawTag(18);
                        output.WriteMessage(ArimaCoefficients);
                      }
                      if (arimaFittingMetrics_ != null) {
                        output.WriteRawTag(26);
                        output.WriteMessage(ArimaFittingMetrics);
                      }
                      if (HasDrift != false) {
                        output.WriteRawTag(32);
                        output.WriteBool(HasDrift);
                      }
                      if (TimeSeriesId.Length != 0) {
                        output.WriteRawTag(42);
                        output.WriteString(TimeSeriesId);
                      }
                      seasonalPeriods_.WriteTo(output, _repeated_seasonalPeriods_codec);
                      if (hasHolidayEffect_ != null) {
                        _single_hasHolidayEffect_codec.WriteTagAndValue(output, HasHolidayEffect);
                      }
                      if (hasSpikesAndDips_ != null) {
                        _single_hasSpikesAndDips_codec.WriteTagAndValue(output, HasSpikesAndDips);
                      }
                      if (hasStepChanges_ != null) {
                        _single_hasStepChanges_codec.WriteTagAndValue(output, HasStepChanges);
                      }
                      timeSeriesIds_.WriteTo(output, _repeated_timeSeriesIds_codec);
                      if (_unknownFields != null) {
                        _unknownFields.WriteTo(output);
                      }
                    #endif
                    }

                    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
                      if (nonSeasonalOrder_ != null) {
                        output.WriteRawTag(10);
                        output.WriteMessage(NonSeasonalOrder);
                      }
                      if (arimaCoefficients_ != null) {
                        output.WriteRawTag(18);
                        output.WriteMessage(ArimaCoefficients);
                      }
                      if (arimaFittingMetrics_ != null) {
                        output.WriteRawTag(26);
                        output.WriteMessage(ArimaFittingMetrics);
                      }
                      if (HasDrift != false) {
                        output.WriteRawTag(32);
                        output.WriteBool(HasDrift);
                      }
                      if (TimeSeriesId.Length != 0) {
                        output.WriteRawTag(42);
                        output.WriteString(TimeSeriesId);
                      }
                      seasonalPeriods_.WriteTo(ref output, _repeated_seasonalPeriods_codec);
                      if (hasHolidayEffect_ != null) {
                        _single_hasHolidayEffect_codec.WriteTagAndValue(ref output, HasHolidayEffect);
                      }
                      if (hasSpikesAndDips_ != null) {
                        _single_hasSpikesAndDips_codec.WriteTagAndValue(ref output, HasSpikesAndDips);
                      }
                      if (hasStepChanges_ != null) {
                        _single_hasStepChanges_codec.WriteTagAndValue(ref output, HasStepChanges);
                      }
                      timeSeriesIds_.WriteTo(ref output, _repeated_timeSeriesIds_codec);
                      if (_unknownFields != null) {
                        _unknownFields.WriteTo(ref output);
                      }
                    }
                    #endif

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public int CalculateSize() {
                      int size = 0;
                      if (nonSeasonalOrder_ != null) {
                        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NonSeasonalOrder);
                      }
                      if (arimaCoefficients_ != null) {
                        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArimaCoefficients);
                      }
                      if (arimaFittingMetrics_ != null) {
                        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArimaFittingMetrics);
                      }
                      if (HasDrift != false) {
                        size += 1 + 1;
                      }
                      if (TimeSeriesId.Length != 0) {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(TimeSeriesId);
                      }
                      size += timeSeriesIds_.CalculateSize(_repeated_timeSeriesIds_codec);
                      size += seasonalPeriods_.CalculateSize(_repeated_seasonalPeriods_codec);
                      if (hasHolidayEffect_ != null) {
                        size += _single_hasHolidayEffect_codec.CalculateSizeWithTag(HasHolidayEffect);
                      }
                      if (hasSpikesAndDips_ != null) {
                        size += _single_hasSpikesAndDips_codec.CalculateSizeWithTag(HasSpikesAndDips);
                      }
                      if (hasStepChanges_ != null) {
                        size += _single_hasStepChanges_codec.CalculateSizeWithTag(HasStepChanges);
                      }
                      if (_unknownFields != null) {
                        size += _unknownFields.CalculateSize();
                      }
                      return size;
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public void MergeFrom(ArimaModelInfo other) {
                      if (other == null) {
                        return;
                      }
                      if (other.nonSeasonalOrder_ != null) {
                        if (nonSeasonalOrder_ == null) {
                          NonSeasonalOrder = new global::Google.Cloud.Bigquery.V2.Model.Types.ArimaOrder();
                        }
                        NonSeasonalOrder.MergeFrom(other.NonSeasonalOrder);
                      }
                      if (other.arimaCoefficients_ != null) {
                        if (arimaCoefficients_ == null) {
                          ArimaCoefficients = new global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Types.ArimaResult.Types.ArimaCoefficients();
                        }
                        ArimaCoefficients.MergeFrom(other.ArimaCoefficients);
                      }
                      if (other.arimaFittingMetrics_ != null) {
                        if (arimaFittingMetrics_ == null) {
                          ArimaFittingMetrics = new global::Google.Cloud.Bigquery.V2.Model.Types.ArimaFittingMetrics();
                        }
                        ArimaFittingMetrics.MergeFrom(other.ArimaFittingMetrics);
                      }
                      if (other.HasDrift != false) {
                        HasDrift = other.HasDrift;
                      }
                      if (other.TimeSeriesId.Length != 0) {
                        TimeSeriesId = other.TimeSeriesId;
                      }
                      timeSeriesIds_.Add(other.timeSeriesIds_);
                      seasonalPeriods_.Add(other.seasonalPeriods_);
                      if (other.hasHolidayEffect_ != null) {
                        if (hasHolidayEffect_ == null || other.HasHolidayEffect != false) {
                          HasHolidayEffect = other.HasHolidayEffect;
                        }
                      }
                      if (other.hasSpikesAndDips_ != null) {
                        if (hasSpikesAndDips_ == null || other.HasSpikesAndDips != false) {
                          HasSpikesAndDips = other.HasSpikesAndDips;
                        }
                      }
                      if (other.hasStepChanges_ != null) {
                        if (hasStepChanges_ == null || other.HasStepChanges != false) {
                          HasStepChanges = other.HasStepChanges;
                        }
                      }
                      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public void MergeFrom(pb::CodedInputStream input) {
                    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                      input.ReadRawMessage(this);
                    #else
                      uint tag;
                      while ((tag = input.ReadTag()) != 0) {
                        switch(tag) {
                          default:
                            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                            break;
                          case 10: {
                            if (nonSeasonalOrder_ == null) {
                              NonSeasonalOrder = new global::Google.Cloud.Bigquery.V2.Model.Types.ArimaOrder();
                            }
                            input.ReadMessage(NonSeasonalOrder);
                            break;
                          }
                          case 18: {
                            if (arimaCoefficients_ == null) {
                              ArimaCoefficients = new global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Types.ArimaResult.Types.ArimaCoefficients();
                            }
                            input.ReadMessage(ArimaCoefficients);
                            break;
                          }
                          case 26: {
                            if (arimaFittingMetrics_ == null) {
                              ArimaFittingMetrics = new global::Google.Cloud.Bigquery.V2.Model.Types.ArimaFittingMetrics();
                            }
                            input.ReadMessage(ArimaFittingMetrics);
                            break;
                          }
                          case 32: {
                            HasDrift = input.ReadBool();
                            break;
                          }
                          case 42: {
                            TimeSeriesId = input.ReadString();
                            break;
                          }
                          case 50:
                          case 48: {
                            seasonalPeriods_.AddEntriesFrom(input, _repeated_seasonalPeriods_codec);
                            break;
                          }
                          case 58: {
                            bool? value = _single_hasHolidayEffect_codec.Read(input);
                            if (hasHolidayEffect_ == null || value != false) {
                              HasHolidayEffect = value;
                            }
                            break;
                          }
                          case 66: {
                            bool? value = _single_hasSpikesAndDips_codec.Read(input);
                            if (hasSpikesAndDips_ == null || value != false) {
                              HasSpikesAndDips = value;
                            }
                            break;
                          }
                          case 74: {
                            bool? value = _single_hasStepChanges_codec.Read(input);
                            if (hasStepChanges_ == null || value != false) {
                              HasStepChanges = value;
                            }
                            break;
                          }
                          case 82: {
                            timeSeriesIds_.AddEntriesFrom(input, _repeated_timeSeriesIds_codec);
                            break;
                          }
                        }
                      }
                    #endif
                    }

                    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
                      uint tag;
                      while ((tag = input.ReadTag()) != 0) {
                        switch(tag) {
                          default:
                            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                            break;
                          case 10: {
                            if (nonSeasonalOrder_ == null) {
                              NonSeasonalOrder = new global::Google.Cloud.Bigquery.V2.Model.Types.ArimaOrder();
                            }
                            input.ReadMessage(NonSeasonalOrder);
                            break;
                          }
                          case 18: {
                            if (arimaCoefficients_ == null) {
                              ArimaCoefficients = new global::Google.Cloud.Bigquery.V2.Model.Types.TrainingRun.Types.IterationResult.Types.ArimaResult.Types.ArimaCoefficients();
                            }
                            input.ReadMessage(ArimaCoefficients);
                            break;
                          }
                          case 26: {
                            if (arimaFittingMetrics_ == null) {
                              ArimaFittingMetrics = new global::Google.Cloud.Bigquery.V2.Model.Types.ArimaFittingMetrics();
                            }
                            input.ReadMessage(ArimaFittingMetrics);
                            break;
                          }
                          case 32: {
                            HasDrift = input.ReadBool();
                            break;
                          }
                          case 42: {
                            TimeSeriesId = input.ReadString();
                            break;
                          }
                          case 50:
                          case 48: {
                            seasonalPeriods_.AddEntriesFrom(ref input, _repeated_seasonalPeriods_codec);
                            break;
                          }
                          case 58: {
                            bool? value = _single_hasHolidayEffect_codec.Read(ref input);
                            if (hasHolidayEffect_ == null || value != false) {
                              HasHolidayEffect = value;
                            }
                            break;
                          }
                          case 66: {
                            bool? value = _single_hasSpikesAndDips_codec.Read(ref input);
                            if (hasSpikesAndDips_ == null || value != false) {
                              HasSpikesAndDips = value;
                            }
                            break;
                          }
                          case 74: {
                            bool? value = _single_hasStepChanges_codec.Read(ref input);
                            if (hasStepChanges_ == null || value != false) {
                              HasStepChanges = value;
                            }
                            break;
                          }
                          case 82: {
                            timeSeriesIds_.AddEntriesFrom(ref input, _repeated_timeSeriesIds_codec);
                            break;
                          }
                        }
                      }
                    }
                    #endif

                  }

                }
                #endregion

              }

            }
            #endregion

          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class GetModelRequest : pb::IMessage<GetModelRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetModelRequest> _parser = new pb::MessageParser<GetModelRequest>(() => new GetModelRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetModelRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Bigquery.V2.ModelReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetModelRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetModelRequest(GetModelRequest other) : this() {
      projectId_ = other.projectId_;
      datasetId_ = other.datasetId_;
      modelId_ = other.modelId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetModelRequest Clone() {
      return new GetModelRequest(this);
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private string projectId_ = "";
    /// <summary>
    /// Required. Project ID of the requested model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dataset_id" field.</summary>
    public const int DatasetIdFieldNumber = 2;
    private string datasetId_ = "";
    /// <summary>
    /// Required. Dataset ID of the requested model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatasetId {
      get { return datasetId_; }
      set {
        datasetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_id" field.</summary>
    public const int ModelIdFieldNumber = 3;
    private string modelId_ = "";
    /// <summary>
    /// Required. Model ID of the requested model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelId {
      get { return modelId_; }
      set {
        modelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetModelRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetModelRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (DatasetId != other.DatasetId) return false;
      if (ModelId != other.ModelId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (DatasetId.Length != 0) hash ^= DatasetId.GetHashCode();
      if (ModelId.Length != 0) hash ^= ModelId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ProjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectId);
      }
      if (DatasetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatasetId);
      }
      if (ModelId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ModelId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ProjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectId);
      }
      if (DatasetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatasetId);
      }
      if (ModelId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ModelId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (DatasetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatasetId);
      }
      if (ModelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetModelRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.DatasetId.Length != 0) {
        DatasetId = other.DatasetId;
      }
      if (other.ModelId.Length != 0) {
        ModelId = other.ModelId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProjectId = input.ReadString();
            break;
          }
          case 18: {
            DatasetId = input.ReadString();
            break;
          }
          case 26: {
            ModelId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ProjectId = input.ReadString();
            break;
          }
          case 18: {
            DatasetId = input.ReadString();
            break;
          }
          case 26: {
            ModelId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PatchModelRequest : pb::IMessage<PatchModelRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PatchModelRequest> _parser = new pb::MessageParser<PatchModelRequest>(() => new PatchModelRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PatchModelRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Bigquery.V2.ModelReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PatchModelRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PatchModelRequest(PatchModelRequest other) : this() {
      projectId_ = other.projectId_;
      datasetId_ = other.datasetId_;
      modelId_ = other.modelId_;
      model_ = other.model_ != null ? other.model_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PatchModelRequest Clone() {
      return new PatchModelRequest(this);
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private string projectId_ = "";
    /// <summary>
    /// Required. Project ID of the model to patch.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dataset_id" field.</summary>
    public const int DatasetIdFieldNumber = 2;
    private string datasetId_ = "";
    /// <summary>
    /// Required. Dataset ID of the model to patch.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatasetId {
      get { return datasetId_; }
      set {
        datasetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_id" field.</summary>
    public const int ModelIdFieldNumber = 3;
    private string modelId_ = "";
    /// <summary>
    /// Required. Model ID of the model to patch.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelId {
      get { return modelId_; }
      set {
        modelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 4;
    private global::Google.Cloud.Bigquery.V2.Model model_;
    /// <summary>
    /// Required. Patched model.
    /// Follows RFC5789 patch semantics. Missing fields are not updated.
    /// To clear a field, explicitly set to default value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Bigquery.V2.Model Model {
      get { return model_; }
      set {
        model_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PatchModelRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PatchModelRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (DatasetId != other.DatasetId) return false;
      if (ModelId != other.ModelId) return false;
      if (!object.Equals(Model, other.Model)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (DatasetId.Length != 0) hash ^= DatasetId.GetHashCode();
      if (ModelId.Length != 0) hash ^= ModelId.GetHashCode();
      if (model_ != null) hash ^= Model.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ProjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectId);
      }
      if (DatasetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatasetId);
      }
      if (ModelId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ModelId);
      }
      if (model_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Model);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ProjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectId);
      }
      if (DatasetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatasetId);
      }
      if (ModelId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ModelId);
      }
      if (model_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Model);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (DatasetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatasetId);
      }
      if (ModelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelId);
      }
      if (model_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Model);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PatchModelRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.DatasetId.Length != 0) {
        DatasetId = other.DatasetId;
      }
      if (other.ModelId.Length != 0) {
        ModelId = other.ModelId;
      }
      if (other.model_ != null) {
        if (model_ == null) {
          Model = new global::Google.Cloud.Bigquery.V2.Model();
        }
        Model.MergeFrom(other.Model);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProjectId = input.ReadString();
            break;
          }
          case 18: {
            DatasetId = input.ReadString();
            break;
          }
          case 26: {
            ModelId = input.ReadString();
            break;
          }
          case 34: {
            if (model_ == null) {
              Model = new global::Google.Cloud.Bigquery.V2.Model();
            }
            input.ReadMessage(Model);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ProjectId = input.ReadString();
            break;
          }
          case 18: {
            DatasetId = input.ReadString();
            break;
          }
          case 26: {
            ModelId = input.ReadString();
            break;
          }
          case 34: {
            if (model_ == null) {
              Model = new global::Google.Cloud.Bigquery.V2.Model();
            }
            input.ReadMessage(Model);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DeleteModelRequest : pb::IMessage<DeleteModelRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeleteModelRequest> _parser = new pb::MessageParser<DeleteModelRequest>(() => new DeleteModelRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteModelRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Bigquery.V2.ModelReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteModelRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteModelRequest(DeleteModelRequest other) : this() {
      projectId_ = other.projectId_;
      datasetId_ = other.datasetId_;
      modelId_ = other.modelId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteModelRequest Clone() {
      return new DeleteModelRequest(this);
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private string projectId_ = "";
    /// <summary>
    /// Required. Project ID of the model to delete.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dataset_id" field.</summary>
    public const int DatasetIdFieldNumber = 2;
    private string datasetId_ = "";
    /// <summary>
    /// Required. Dataset ID of the model to delete.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatasetId {
      get { return datasetId_; }
      set {
        datasetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_id" field.</summary>
    public const int ModelIdFieldNumber = 3;
    private string modelId_ = "";
    /// <summary>
    /// Required. Model ID of the model to delete.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelId {
      get { return modelId_; }
      set {
        modelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteModelRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteModelRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (DatasetId != other.DatasetId) return false;
      if (ModelId != other.ModelId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (DatasetId.Length != 0) hash ^= DatasetId.GetHashCode();
      if (ModelId.Length != 0) hash ^= ModelId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ProjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectId);
      }
      if (DatasetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatasetId);
      }
      if (ModelId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ModelId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ProjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectId);
      }
      if (DatasetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatasetId);
      }
      if (ModelId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ModelId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (DatasetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatasetId);
      }
      if (ModelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteModelRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.DatasetId.Length != 0) {
        DatasetId = other.DatasetId;
      }
      if (other.ModelId.Length != 0) {
        ModelId = other.ModelId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProjectId = input.ReadString();
            break;
          }
          case 18: {
            DatasetId = input.ReadString();
            break;
          }
          case 26: {
            ModelId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ProjectId = input.ReadString();
            break;
          }
          case 18: {
            DatasetId = input.ReadString();
            break;
          }
          case 26: {
            ModelId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ListModelsRequest : pb::IMessage<ListModelsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListModelsRequest> _parser = new pb::MessageParser<ListModelsRequest>(() => new ListModelsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListModelsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Bigquery.V2.ModelReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListModelsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListModelsRequest(ListModelsRequest other) : this() {
      projectId_ = other.projectId_;
      datasetId_ = other.datasetId_;
      MaxResults = other.MaxResults;
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListModelsRequest Clone() {
      return new ListModelsRequest(this);
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private string projectId_ = "";
    /// <summary>
    /// Required. Project ID of the models to list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dataset_id" field.</summary>
    public const int DatasetIdFieldNumber = 2;
    private string datasetId_ = "";
    /// <summary>
    /// Required. Dataset ID of the models to list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatasetId {
      get { return datasetId_; }
      set {
        datasetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "max_results" field.</summary>
    public const int MaxResultsFieldNumber = 3;
    private static readonly pb::FieldCodec<uint?> _single_maxResults_codec = pb::FieldCodec.ForStructWrapper<uint>(26);
    private uint? maxResults_;
    /// <summary>
    /// The maximum number of results to return in a single response page.
    /// Leverage the page tokens to iterate through the entire collection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? MaxResults {
      get { return maxResults_; }
      set {
        maxResults_ = value;
      }
    }


    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 4;
    private string pageToken_ = "";
    /// <summary>
    /// Page token, returned by a previous call to request the next page of
    /// results
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListModelsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListModelsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (DatasetId != other.DatasetId) return false;
      if (MaxResults != other.MaxResults) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (DatasetId.Length != 0) hash ^= DatasetId.GetHashCode();
      if (maxResults_ != null) hash ^= MaxResults.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ProjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectId);
      }
      if (DatasetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatasetId);
      }
      if (maxResults_ != null) {
        _single_maxResults_codec.WriteTagAndValue(output, MaxResults);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ProjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectId);
      }
      if (DatasetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatasetId);
      }
      if (maxResults_ != null) {
        _single_maxResults_codec.WriteTagAndValue(ref output, MaxResults);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (DatasetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatasetId);
      }
      if (maxResults_ != null) {
        size += _single_maxResults_codec.CalculateSizeWithTag(MaxResults);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListModelsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.DatasetId.Length != 0) {
        DatasetId = other.DatasetId;
      }
      if (other.maxResults_ != null) {
        if (maxResults_ == null || other.MaxResults != 0) {
          MaxResults = other.MaxResults;
        }
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProjectId = input.ReadString();
            break;
          }
          case 18: {
            DatasetId = input.ReadString();
            break;
          }
          case 26: {
            uint? value = _single_maxResults_codec.Read(input);
            if (maxResults_ == null || value != 0) {
              MaxResults = value;
            }
            break;
          }
          case 34: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ProjectId = input.ReadString();
            break;
          }
          case 18: {
            DatasetId = input.ReadString();
            break;
          }
          case 26: {
            uint? value = _single_maxResults_codec.Read(ref input);
            if (maxResults_ == null || value != 0) {
              MaxResults = value;
            }
            break;
          }
          case 34: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ListModelsResponse : pb::IMessage<ListModelsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListModelsResponse> _parser = new pb::MessageParser<ListModelsResponse>(() => new ListModelsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListModelsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Bigquery.V2.ModelReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListModelsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListModelsResponse(ListModelsResponse other) : this() {
      models_ = other.models_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListModelsResponse Clone() {
      return new ListModelsResponse(this);
    }

    /// <summary>Field number for the "models" field.</summary>
    public const int ModelsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Bigquery.V2.Model> _repeated_models_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Bigquery.V2.Model.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model> models_ = new pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model>();
    /// <summary>
    /// Models in the requested dataset. Only the following fields are populated:
    /// model_reference, model_type, creation_time, last_modified_time and
    /// labels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Bigquery.V2.Model> Models {
      get { return models_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// A token to request the next page of results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListModelsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListModelsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!models_.Equals(other.models_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= models_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      models_.WriteTo(output, _repeated_models_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      models_.WriteTo(ref output, _repeated_models_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += models_.CalculateSize(_repeated_models_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListModelsResponse other) {
      if (other == null) {
        return;
      }
      models_.Add(other.models_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            models_.AddEntriesFrom(input, _repeated_models_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            models_.AddEntriesFrom(ref input, _repeated_models_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
