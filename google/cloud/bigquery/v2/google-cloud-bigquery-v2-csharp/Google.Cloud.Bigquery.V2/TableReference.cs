// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/bigquery/v2/table_reference.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Bigquery.V2 {

  /// <summary>Holder for reflection information generated from google/cloud/bigquery/v2/table_reference.proto</summary>
  public static partial class TableReferenceReflection {

    #region Descriptor
    /// <summary>File descriptor for google/cloud/bigquery/v2/table_reference.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TableReferenceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci5nb29nbGUvY2xvdWQvYmlncXVlcnkvdjIvdGFibGVfcmVmZXJlbmNlLnBy",
            "b3RvEhhnb29nbGUuY2xvdWQuYmlncXVlcnkudjIaH2dvb2dsZS9hcGkvZmll",
            "bGRfYmVoYXZpb3IucHJvdG8aHGdvb2dsZS9hcGkvYW5ub3RhdGlvbnMucHJv",
            "dG8itwEKDlRhYmxlUmVmZXJlbmNlEhcKCnByb2plY3RfaWQYASABKAlCA+BB",
            "AhIXCgpkYXRhc2V0X2lkGAIgASgJQgPgQQISFQoIdGFibGVfaWQYAyABKAlC",
            "A+BBAhIeChZwcm9qZWN0X2lkX2FsdGVybmF0aXZlGAQgAygJEh4KFmRhdGFz",
            "ZXRfaWRfYWx0ZXJuYXRpdmUYBSADKAkSHAoUdGFibGVfaWRfYWx0ZXJuYXRp",
            "dmUYBiADKAlCdQocY29tLmdvb2dsZS5jbG91ZC5iaWdxdWVyeS52MkITVGFi",
            "bGVSZWZlcmVuY2VQcm90b1pAZ29vZ2xlLmdvbGFuZy5vcmcvZ2VucHJvdG8v",
            "Z29vZ2xlYXBpcy9jbG91ZC9iaWdxdWVyeS92MjtiaWdxdWVyeWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.V2.TableReference), global::Google.Cloud.Bigquery.V2.TableReference.Parser, new[]{ "ProjectId", "DatasetId", "TableId", "ProjectIdAlternative", "DatasetIdAlternative", "TableIdAlternative" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TableReference : pb::IMessage<TableReference>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TableReference> _parser = new pb::MessageParser<TableReference>(() => new TableReference());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TableReference> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Bigquery.V2.TableReferenceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableReference() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableReference(TableReference other) : this() {
      projectId_ = other.projectId_;
      datasetId_ = other.datasetId_;
      tableId_ = other.tableId_;
      projectIdAlternative_ = other.projectIdAlternative_.Clone();
      datasetIdAlternative_ = other.datasetIdAlternative_.Clone();
      tableIdAlternative_ = other.tableIdAlternative_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableReference Clone() {
      return new TableReference(this);
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private string projectId_ = "";
    /// <summary>
    /// Required. The ID of the project containing this table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dataset_id" field.</summary>
    public const int DatasetIdFieldNumber = 2;
    private string datasetId_ = "";
    /// <summary>
    /// Required. The ID of the dataset containing this table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatasetId {
      get { return datasetId_; }
      set {
        datasetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "table_id" field.</summary>
    public const int TableIdFieldNumber = 3;
    private string tableId_ = "";
    /// <summary>
    /// Required. The ID of the table. The ID must contain only
    /// letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum
    /// length is 1,024 characters.  Certain operations allow
    /// suffixing of the table ID with a partition decorator, such as
    /// `sample_table$20190123`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableId {
      get { return tableId_; }
      set {
        tableId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "project_id_alternative" field.</summary>
    public const int ProjectIdAlternativeFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_projectIdAlternative_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> projectIdAlternative_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The alternative field that will be used when ESF is not able to translate
    /// the received data to the project_id field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ProjectIdAlternative {
      get { return projectIdAlternative_; }
    }

    /// <summary>Field number for the "dataset_id_alternative" field.</summary>
    public const int DatasetIdAlternativeFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_datasetIdAlternative_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> datasetIdAlternative_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The alternative field that will be used when ESF is not able to translate
    /// the received data to the project_id field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DatasetIdAlternative {
      get { return datasetIdAlternative_; }
    }

    /// <summary>Field number for the "table_id_alternative" field.</summary>
    public const int TableIdAlternativeFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_tableIdAlternative_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> tableIdAlternative_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The alternative field that will be used when ESF is not able to translate
    /// the received data to the project_id field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TableIdAlternative {
      get { return tableIdAlternative_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TableReference);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TableReference other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (DatasetId != other.DatasetId) return false;
      if (TableId != other.TableId) return false;
      if(!projectIdAlternative_.Equals(other.projectIdAlternative_)) return false;
      if(!datasetIdAlternative_.Equals(other.datasetIdAlternative_)) return false;
      if(!tableIdAlternative_.Equals(other.tableIdAlternative_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (DatasetId.Length != 0) hash ^= DatasetId.GetHashCode();
      if (TableId.Length != 0) hash ^= TableId.GetHashCode();
      hash ^= projectIdAlternative_.GetHashCode();
      hash ^= datasetIdAlternative_.GetHashCode();
      hash ^= tableIdAlternative_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ProjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectId);
      }
      if (DatasetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatasetId);
      }
      if (TableId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TableId);
      }
      projectIdAlternative_.WriteTo(output, _repeated_projectIdAlternative_codec);
      datasetIdAlternative_.WriteTo(output, _repeated_datasetIdAlternative_codec);
      tableIdAlternative_.WriteTo(output, _repeated_tableIdAlternative_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ProjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectId);
      }
      if (DatasetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatasetId);
      }
      if (TableId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TableId);
      }
      projectIdAlternative_.WriteTo(ref output, _repeated_projectIdAlternative_codec);
      datasetIdAlternative_.WriteTo(ref output, _repeated_datasetIdAlternative_codec);
      tableIdAlternative_.WriteTo(ref output, _repeated_tableIdAlternative_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (DatasetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatasetId);
      }
      if (TableId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableId);
      }
      size += projectIdAlternative_.CalculateSize(_repeated_projectIdAlternative_codec);
      size += datasetIdAlternative_.CalculateSize(_repeated_datasetIdAlternative_codec);
      size += tableIdAlternative_.CalculateSize(_repeated_tableIdAlternative_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TableReference other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.DatasetId.Length != 0) {
        DatasetId = other.DatasetId;
      }
      if (other.TableId.Length != 0) {
        TableId = other.TableId;
      }
      projectIdAlternative_.Add(other.projectIdAlternative_);
      datasetIdAlternative_.Add(other.datasetIdAlternative_);
      tableIdAlternative_.Add(other.tableIdAlternative_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProjectId = input.ReadString();
            break;
          }
          case 18: {
            DatasetId = input.ReadString();
            break;
          }
          case 26: {
            TableId = input.ReadString();
            break;
          }
          case 34: {
            projectIdAlternative_.AddEntriesFrom(input, _repeated_projectIdAlternative_codec);
            break;
          }
          case 42: {
            datasetIdAlternative_.AddEntriesFrom(input, _repeated_datasetIdAlternative_codec);
            break;
          }
          case 50: {
            tableIdAlternative_.AddEntriesFrom(input, _repeated_tableIdAlternative_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ProjectId = input.ReadString();
            break;
          }
          case 18: {
            DatasetId = input.ReadString();
            break;
          }
          case 26: {
            TableId = input.ReadString();
            break;
          }
          case 34: {
            projectIdAlternative_.AddEntriesFrom(ref input, _repeated_projectIdAlternative_codec);
            break;
          }
          case 42: {
            datasetIdAlternative_.AddEntriesFrom(ref input, _repeated_datasetIdAlternative_codec);
            break;
          }
          case 50: {
            tableIdAlternative_.AddEntriesFrom(ref input, _repeated_tableIdAlternative_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
