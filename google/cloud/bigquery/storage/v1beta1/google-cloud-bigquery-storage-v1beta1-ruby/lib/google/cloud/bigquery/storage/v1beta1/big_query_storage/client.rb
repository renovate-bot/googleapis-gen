# frozen_string_literal: true

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/cloud/errors"
require "google/cloud/bigquery/storage/v1beta1/storage_pb"

module Google
  module Cloud
    module Bigquery
      module Storage
        module V1beta1
          module BigQueryStorage
            ##
            # Client for the BigQueryStorage service.
            #
            # BigQuery storage API.
            #
            # The BigQuery storage API can be used to read data stored in BigQuery.
            #
            class Client
              include Paths

              # @private
              attr_reader :big_query_storage_stub

              ##
              # Configure the BigQueryStorage Client class.
              #
              # See {::Google::Cloud::Bigquery::Storage::V1beta1::BigQueryStorage::Client::Configuration}
              # for a description of the configuration fields.
              #
              # @example
              #
              #   # Modify the configuration for all BigQueryStorage clients
              #   ::Google::Cloud::Bigquery::Storage::V1beta1::BigQueryStorage::Client.configure do |config|
              #     config.timeout = 10.0
              #   end
              #
              # @yield [config] Configure the Client client.
              # @yieldparam config [Client::Configuration]
              #
              # @return [Client::Configuration]
              #
              def self.configure
                @configure ||= begin
                  namespace = ["Google", "Cloud", "Bigquery", "Storage", "V1beta1"]
                  parent_config = while namespace.any?
                                    parent_name = namespace.join "::"
                                    parent_const = const_get parent_name
                                    break parent_const.configure if parent_const.respond_to? :configure
                                    namespace.pop
                                  end
                  default_config = Client::Configuration.new parent_config

                  default_config
                end
                yield @configure if block_given?
                @configure
              end

              ##
              # Configure the BigQueryStorage Client instance.
              #
              # The configuration is set to the derived mode, meaning that values can be changed,
              # but structural changes (adding new fields, etc.) are not allowed. Structural changes
              # should be made on {Client.configure}.
              #
              # See {::Google::Cloud::Bigquery::Storage::V1beta1::BigQueryStorage::Client::Configuration}
              # for a description of the configuration fields.
              #
              # @yield [config] Configure the Client client.
              # @yieldparam config [Client::Configuration]
              #
              # @return [Client::Configuration]
              #
              def configure
                yield @config if block_given?
                @config
              end

              ##
              # Create a new BigQueryStorage client object.
              #
              # @example
              #
              #   # Create a client using the default configuration
              #   client = ::Google::Cloud::Bigquery::Storage::V1beta1::BigQueryStorage::Client.new
              #
              #   # Create a client using a custom configuration
              #   client = ::Google::Cloud::Bigquery::Storage::V1beta1::BigQueryStorage::Client.new do |config|
              #     config.timeout = 10.0
              #   end
              #
              # @yield [config] Configure the BigQueryStorage client.
              # @yieldparam config [Client::Configuration]
              #
              def initialize
                # These require statements are intentionally placed here to initialize
                # the gRPC module only when it's required.
                # See https://github.com/googleapis/toolkit/issues/446
                require "gapic/grpc"
                require "google/cloud/bigquery/storage/v1beta1/storage_services_pb"

                # Create the configuration object
                @config = Configuration.new Client.configure

                # Yield the configuration if needed
                yield @config if block_given?

                # Create credentials
                credentials = @config.credentials
                # Use self-signed JWT if the endpoint is unchanged from default,
                # but only if the default endpoint does not have a region prefix.
                enable_self_signed_jwt = @config.endpoint == Client.configure.endpoint &&
                                         !@config.endpoint.split(".").first.include?("-")
                credentials ||= Credentials.default scope: @config.scope,
                                                    enable_self_signed_jwt: enable_self_signed_jwt
                if credentials.is_a?(::String) || credentials.is_a?(::Hash)
                  credentials = Credentials.new credentials, scope: @config.scope
                end
                @quota_project_id = @config.quota_project
                @quota_project_id ||= credentials.quota_project_id if credentials.respond_to? :quota_project_id

                @big_query_storage_stub = ::Gapic::ServiceStub.new(
                  ::Google::Cloud::Bigquery::Storage::V1beta1::BigQueryStorage::Stub,
                  credentials:  credentials,
                  endpoint:     @config.endpoint,
                  channel_args: @config.channel_args,
                  interceptors: @config.interceptors
                )
              end

              # Service calls

              ##
              # Creates a new read session. A read session divides the contents of a
              # BigQuery table into one or more streams, which can then be used to read
              # data from the table. The read session also specifies properties of the
              # data to be read, such as a list of columns or a push-down filter describing
              # the rows to be returned.
              #
              # A particular row can be read by at most one stream. When the caller has
              # reached the end of each stream in the session, then all the data in the
              # table has been read.
              #
              # Read sessions automatically expire 24 hours after they are created and do
              # not require manual clean-up by the caller.
              #
              # @overload create_read_session(request, options = nil)
              #   Pass arguments to `create_read_session` via a request object, either of type
              #   {::Google::Cloud::Bigquery::Storage::V1beta1::CreateReadSessionRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::Bigquery::Storage::V1beta1::CreateReadSessionRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload create_read_session(table_reference: nil, parent: nil, table_modifiers: nil, requested_streams: nil, read_options: nil, format: nil, sharding_strategy: nil)
              #   Pass arguments to `create_read_session` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param table_reference [::Google::Cloud::Bigquery::Storage::V1beta1::TableReference, ::Hash]
              #     Required. Reference to the table to read.
              #   @param parent [::String]
              #     Required. String of the form `projects/{project_id}` indicating the
              #     project this ReadSession is associated with. This is the project that will
              #     be billed for usage.
              #   @param table_modifiers [::Google::Cloud::Bigquery::Storage::V1beta1::TableModifiers, ::Hash]
              #     Any modifiers to the Table (e.g. snapshot timestamp).
              #   @param requested_streams [::Integer]
              #     Initial number of streams. If unset or 0, we will
              #     provide a value of streams so as to produce reasonable throughput. Must be
              #     non-negative. The number of streams may be lower than the requested number,
              #     depending on the amount parallelism that is reasonable for the table and
              #     the maximum amount of parallelism allowed by the system.
              #
              #     Streams must be read starting from offset 0.
              #   @param read_options [::Google::Cloud::Bigquery::Storage::V1beta1::TableReadOptions, ::Hash]
              #     Read options for this session (e.g. column selection, filters).
              #   @param format [::Google::Cloud::Bigquery::Storage::V1beta1::DataFormat]
              #     Data output format. Currently default to Avro.
              #   @param sharding_strategy [::Google::Cloud::Bigquery::Storage::V1beta1::ShardingStrategy]
              #     The strategy to use for distributing data among multiple streams. Currently
              #     defaults to liquid sharding.
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Google::Cloud::Bigquery::Storage::V1beta1::ReadSession]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Google::Cloud::Bigquery::Storage::V1beta1::ReadSession]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              def create_read_session request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Bigquery::Storage::V1beta1::CreateReadSessionRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.create_read_session.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Bigquery::Storage::V1beta1::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.table_reference&.project_id
                  header_params["table_reference.project_id"] = request.table_reference.project_id
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.create_read_session.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.create_read_session.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @big_query_storage_stub.call_rpc :create_read_session, request, options: options do |response, operation|
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Reads rows from the table in the format prescribed by the read session.
              # Each response contains one or more table rows, up to a maximum of 10 MiB
              # per response; read requests which attempt to read individual rows larger
              # than this will fail.
              #
              # Each request also returns a set of stream statistics reflecting the
              # estimated total number of rows in the read stream. This number is computed
              # based on the total table size and the number of active streams in the read
              # session, and may change as other streams continue to read data.
              #
              # @overload read_rows(request, options = nil)
              #   Pass arguments to `read_rows` via a request object, either of type
              #   {::Google::Cloud::Bigquery::Storage::V1beta1::ReadRowsRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::Bigquery::Storage::V1beta1::ReadRowsRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload read_rows(read_position: nil)
              #   Pass arguments to `read_rows` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param read_position [::Google::Cloud::Bigquery::Storage::V1beta1::StreamPosition, ::Hash]
              #     Required. Identifier of the position in the stream to start reading from.
              #     The offset requested must be less than the last row read from ReadRows.
              #     Requesting a larger offset is undefined.
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Enumerable<::Google::Cloud::Bigquery::Storage::V1beta1::ReadRowsResponse>]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Enumerable<::Google::Cloud::Bigquery::Storage::V1beta1::ReadRowsResponse>]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              def read_rows request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Bigquery::Storage::V1beta1::ReadRowsRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.read_rows.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Bigquery::Storage::V1beta1::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.read_position&.stream&.name
                  header_params["read_position.stream.name"] = request.read_position.stream.name
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.read_rows.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.read_rows.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @big_query_storage_stub.call_rpc :read_rows, request, options: options do |response, operation|
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Creates additional streams for a ReadSession. This API can be used to
              # dynamically adjust the parallelism of a batch processing task upwards by
              # adding additional workers.
              #
              # @overload batch_create_read_session_streams(request, options = nil)
              #   Pass arguments to `batch_create_read_session_streams` via a request object, either of type
              #   {::Google::Cloud::Bigquery::Storage::V1beta1::BatchCreateReadSessionStreamsRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::Bigquery::Storage::V1beta1::BatchCreateReadSessionStreamsRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload batch_create_read_session_streams(session: nil, requested_streams: nil)
              #   Pass arguments to `batch_create_read_session_streams` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param session [::Google::Cloud::Bigquery::Storage::V1beta1::ReadSession, ::Hash]
              #     Required. Must be a non-expired session obtained from a call to
              #     CreateReadSession. Only the name field needs to be set.
              #   @param requested_streams [::Integer]
              #     Required. Number of new streams requested. Must be positive.
              #     Number of added streams may be less than this, see CreateReadSessionRequest
              #     for more information.
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Google::Cloud::Bigquery::Storage::V1beta1::BatchCreateReadSessionStreamsResponse]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Google::Cloud::Bigquery::Storage::V1beta1::BatchCreateReadSessionStreamsResponse]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              def batch_create_read_session_streams request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Bigquery::Storage::V1beta1::BatchCreateReadSessionStreamsRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.batch_create_read_session_streams.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Bigquery::Storage::V1beta1::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.session&.name
                  header_params["session.name"] = request.session.name
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.batch_create_read_session_streams.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.batch_create_read_session_streams.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @big_query_storage_stub.call_rpc :batch_create_read_session_streams, request, options: options do |response, operation|
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Triggers the graceful termination of a single stream in a ReadSession. This
              # API can be used to dynamically adjust the parallelism of a batch processing
              # task downwards without losing data.
              #
              # This API does not delete the stream -- it remains visible in the
              # ReadSession, and any data processed by the stream is not released to other
              # streams. However, no additional data will be assigned to the stream once
              # this call completes. Callers must continue reading data on the stream until
              # the end of the stream is reached so that data which has already been
              # assigned to the stream will be processed.
              #
              # This method will return an error if there are no other live streams
              # in the Session, or if SplitReadStream() has been called on the given
              # Stream.
              #
              # @overload finalize_stream(request, options = nil)
              #   Pass arguments to `finalize_stream` via a request object, either of type
              #   {::Google::Cloud::Bigquery::Storage::V1beta1::FinalizeStreamRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::Bigquery::Storage::V1beta1::FinalizeStreamRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload finalize_stream(stream: nil)
              #   Pass arguments to `finalize_stream` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param stream [::Google::Cloud::Bigquery::Storage::V1beta1::Stream, ::Hash]
              #     Required. Stream to finalize.
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Google::Protobuf::Empty]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Google::Protobuf::Empty]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              def finalize_stream request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Bigquery::Storage::V1beta1::FinalizeStreamRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.finalize_stream.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Bigquery::Storage::V1beta1::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.stream&.name
                  header_params["stream.name"] = request.stream.name
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.finalize_stream.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.finalize_stream.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @big_query_storage_stub.call_rpc :finalize_stream, request, options: options do |response, operation|
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Splits a given read stream into two Streams. These streams are referred to
              # as the primary and the residual of the split. The original stream can still
              # be read from in the same manner as before. Both of the returned streams can
              # also be read from, and the total rows return by both child streams will be
              # the same as the rows read from the original stream.
              #
              # Moreover, the two child streams will be allocated back to back in the
              # original Stream. Concretely, it is guaranteed that for streams Original,
              # Primary, and Residual, that Original[0-j] = Primary[0-j] and
              # Original[j-n] = Residual[0-m] once the streams have been read to
              # completion.
              #
              # This method is guaranteed to be idempotent.
              #
              # @overload split_read_stream(request, options = nil)
              #   Pass arguments to `split_read_stream` via a request object, either of type
              #   {::Google::Cloud::Bigquery::Storage::V1beta1::SplitReadStreamRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::Bigquery::Storage::V1beta1::SplitReadStreamRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload split_read_stream(original_stream: nil, fraction: nil)
              #   Pass arguments to `split_read_stream` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param original_stream [::Google::Cloud::Bigquery::Storage::V1beta1::Stream, ::Hash]
              #     Required. Stream to split.
              #   @param fraction [::Float]
              #     A value in the range (0.0, 1.0) that specifies the fractional point at
              #     which the original stream should be split. The actual split point is
              #     evaluated on pre-filtered rows, so if a filter is provided, then there is
              #     no guarantee that the division of the rows between the new child streams
              #     will be proportional to this fractional value. Additionally, because the
              #     server-side unit for assigning data is collections of rows, this fraction
              #     will always map to to a data storage boundary on the server side.
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Google::Cloud::Bigquery::Storage::V1beta1::SplitReadStreamResponse]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Google::Cloud::Bigquery::Storage::V1beta1::SplitReadStreamResponse]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              def split_read_stream request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Bigquery::Storage::V1beta1::SplitReadStreamRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.split_read_stream.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Bigquery::Storage::V1beta1::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.original_stream&.name
                  header_params["original_stream.name"] = request.original_stream.name
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.split_read_stream.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.split_read_stream.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @big_query_storage_stub.call_rpc :split_read_stream, request, options: options do |response, operation|
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Configuration class for the BigQueryStorage API.
              #
              # This class represents the configuration for BigQueryStorage,
              # providing control over timeouts, retry behavior, logging, transport
              # parameters, and other low-level controls. Certain parameters can also be
              # applied individually to specific RPCs. See
              # {::Google::Cloud::Bigquery::Storage::V1beta1::BigQueryStorage::Client::Configuration::Rpcs}
              # for a list of RPCs that can be configured independently.
              #
              # Configuration can be applied globally to all clients, or to a single client
              # on construction.
              #
              # @example
              #
              #   # Modify the global config, setting the timeout for
              #   # create_read_session to 20 seconds,
              #   # and all remaining timeouts to 10 seconds.
              #   ::Google::Cloud::Bigquery::Storage::V1beta1::BigQueryStorage::Client.configure do |config|
              #     config.timeout = 10.0
              #     config.rpcs.create_read_session.timeout = 20.0
              #   end
              #
              #   # Apply the above configuration only to a new client.
              #   client = ::Google::Cloud::Bigquery::Storage::V1beta1::BigQueryStorage::Client.new do |config|
              #     config.timeout = 10.0
              #     config.rpcs.create_read_session.timeout = 20.0
              #   end
              #
              # @!attribute [rw] endpoint
              #   The hostname or hostname:port of the service endpoint.
              #   Defaults to `"bigquerystorage.googleapis.com"`.
              #   @return [::String]
              # @!attribute [rw] credentials
              #   Credentials to send with calls. You may provide any of the following types:
              #    *  (`String`) The path to a service account key file in JSON format
              #    *  (`Hash`) A service account key as a Hash
              #    *  (`Google::Auth::Credentials`) A googleauth credentials object
              #       (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
              #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
              #       (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
              #    *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
              #    *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
              #    *  (`nil`) indicating no credentials
              #   @return [::Object]
              # @!attribute [rw] scope
              #   The OAuth scopes
              #   @return [::Array<::String>]
              # @!attribute [rw] lib_name
              #   The library name as recorded in instrumentation and logging
              #   @return [::String]
              # @!attribute [rw] lib_version
              #   The library version as recorded in instrumentation and logging
              #   @return [::String]
              # @!attribute [rw] channel_args
              #   Extra parameters passed to the gRPC channel. Note: this is ignored if a
              #   `GRPC::Core::Channel` object is provided as the credential.
              #   @return [::Hash]
              # @!attribute [rw] interceptors
              #   An array of interceptors that are run before calls are executed.
              #   @return [::Array<::GRPC::ClientInterceptor>]
              # @!attribute [rw] timeout
              #   The call timeout in seconds.
              #   @return [::Numeric]
              # @!attribute [rw] metadata
              #   Additional gRPC headers to be sent with the call.
              #   @return [::Hash{::Symbol=>::String}]
              # @!attribute [rw] retry_policy
              #   The retry policy. The value is a hash with the following keys:
              #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
              #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
              #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
              #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
              #       trigger a retry.
              #   @return [::Hash]
              # @!attribute [rw] quota_project
              #   A separate project against which to charge quota.
              #   @return [::String]
              #
              class Configuration
                extend ::Gapic::Config

                config_attr :endpoint,      "bigquerystorage.googleapis.com", ::String
                config_attr :credentials,   nil do |value|
                  allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
                  allowed += [::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials] if defined? ::GRPC
                  allowed.any? { |klass| klass === value }
                end
                config_attr :scope,         nil, ::String, ::Array, nil
                config_attr :lib_name,      nil, ::String, nil
                config_attr :lib_version,   nil, ::String, nil
                config_attr(:channel_args,  { "grpc.service_config_disable_resolution" => 1 }, ::Hash, nil)
                config_attr :interceptors,  nil, ::Array, nil
                config_attr :timeout,       nil, ::Numeric, nil
                config_attr :metadata,      nil, ::Hash, nil
                config_attr :retry_policy,  nil, ::Hash, ::Proc, nil
                config_attr :quota_project, nil, ::String, nil

                # @private
                def initialize parent_config = nil
                  @parent_config = parent_config unless parent_config.nil?

                  yield self if block_given?
                end

                ##
                # Configurations for individual RPCs
                # @return [Rpcs]
                #
                def rpcs
                  @rpcs ||= begin
                    parent_rpcs = nil
                    parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config.respond_to?(:rpcs)
                    Rpcs.new parent_rpcs
                  end
                end

                ##
                # Configuration RPC class for the BigQueryStorage API.
                #
                # Includes fields providing the configuration for each RPC in this service.
                # Each configuration object is of type `Gapic::Config::Method` and includes
                # the following configuration fields:
                #
                #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
                #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
                #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
                #     include the following keys:
                #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
                #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
                #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
                #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
                #         trigger a retry.
                #
                class Rpcs
                  ##
                  # RPC-specific configuration for `create_read_session`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :create_read_session
                  ##
                  # RPC-specific configuration for `read_rows`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :read_rows
                  ##
                  # RPC-specific configuration for `batch_create_read_session_streams`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :batch_create_read_session_streams
                  ##
                  # RPC-specific configuration for `finalize_stream`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :finalize_stream
                  ##
                  # RPC-specific configuration for `split_read_stream`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :split_read_stream

                  # @private
                  def initialize parent_rpcs = nil
                    create_read_session_config = parent_rpcs.create_read_session if parent_rpcs.respond_to? :create_read_session
                    @create_read_session = ::Gapic::Config::Method.new create_read_session_config
                    read_rows_config = parent_rpcs.read_rows if parent_rpcs.respond_to? :read_rows
                    @read_rows = ::Gapic::Config::Method.new read_rows_config
                    batch_create_read_session_streams_config = parent_rpcs.batch_create_read_session_streams if parent_rpcs.respond_to? :batch_create_read_session_streams
                    @batch_create_read_session_streams = ::Gapic::Config::Method.new batch_create_read_session_streams_config
                    finalize_stream_config = parent_rpcs.finalize_stream if parent_rpcs.respond_to? :finalize_stream
                    @finalize_stream = ::Gapic::Config::Method.new finalize_stream_config
                    split_read_stream_config = parent_rpcs.split_read_stream if parent_rpcs.respond_to? :split_read_stream
                    @split_read_stream = ::Gapic::Config::Method.new split_read_stream_config

                    yield self if block_given?
                  end
                end
              end
            end
          end
        end
      end
    end
  end
end
