<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/bigquery/storage/v1beta1/storage.proto

namespace Google\Cloud\Bigquery\Storage\V1beta1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Progress information for a given Stream.
 *
 * Generated from protobuf message <code>google.cloud.bigquery.storage.v1beta1.StreamStatus</code>
 */
class StreamStatus extends \Google\Protobuf\Internal\Message
{
    /**
     * Number of estimated rows in the current stream. May change over time as
     * different readers in the stream progress at rates which are relatively fast
     * or slow.
     *
     * Generated from protobuf field <code>int64 estimated_row_count = 1;</code>
     */
    protected $estimated_row_count = 0;
    /**
     * A value in the range [0.0, 1.0] that represents the fraction of rows
     * assigned to this stream that have been processed by the server. In the
     * presence of read filters, the server may process more rows than it returns,
     * so this value reflects progress through the pre-filtering rows.
     * This value is only populated for sessions created through the BALANCED
     * sharding strategy.
     *
     * Generated from protobuf field <code>float fraction_consumed = 2;</code>
     */
    protected $fraction_consumed = 0.0;
    /**
     * Represents the progress of the current stream.
     *
     * Generated from protobuf field <code>.google.cloud.bigquery.storage.v1beta1.Progress progress = 4;</code>
     */
    protected $progress = null;
    /**
     * Whether this stream can be split. For sessions that use the LIQUID sharding
     * strategy, this value is always false. For BALANCED sessions, this value is
     * false when enough data have been read such that no more splits are possible
     * at that point or beyond. For small tables or streams that are the result of
     * a chain of splits, this value may never be true.
     *
     * Generated from protobuf field <code>bool is_splittable = 3;</code>
     */
    protected $is_splittable = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $estimated_row_count
     *           Number of estimated rows in the current stream. May change over time as
     *           different readers in the stream progress at rates which are relatively fast
     *           or slow.
     *     @type float $fraction_consumed
     *           A value in the range [0.0, 1.0] that represents the fraction of rows
     *           assigned to this stream that have been processed by the server. In the
     *           presence of read filters, the server may process more rows than it returns,
     *           so this value reflects progress through the pre-filtering rows.
     *           This value is only populated for sessions created through the BALANCED
     *           sharding strategy.
     *     @type \Google\Cloud\Bigquery\Storage\V1beta1\Progress $progress
     *           Represents the progress of the current stream.
     *     @type bool $is_splittable
     *           Whether this stream can be split. For sessions that use the LIQUID sharding
     *           strategy, this value is always false. For BALANCED sessions, this value is
     *           false when enough data have been read such that no more splits are possible
     *           at that point or beyond. For small tables or streams that are the result of
     *           a chain of splits, this value may never be true.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Bigquery\Storage\V1Beta1\Storage::initOnce();
        parent::__construct($data);
    }

    /**
     * Number of estimated rows in the current stream. May change over time as
     * different readers in the stream progress at rates which are relatively fast
     * or slow.
     *
     * Generated from protobuf field <code>int64 estimated_row_count = 1;</code>
     * @return int|string
     */
    public function getEstimatedRowCount()
    {
        return $this->estimated_row_count;
    }

    /**
     * Number of estimated rows in the current stream. May change over time as
     * different readers in the stream progress at rates which are relatively fast
     * or slow.
     *
     * Generated from protobuf field <code>int64 estimated_row_count = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setEstimatedRowCount($var)
    {
        GPBUtil::checkInt64($var);
        $this->estimated_row_count = $var;

        return $this;
    }

    /**
     * A value in the range [0.0, 1.0] that represents the fraction of rows
     * assigned to this stream that have been processed by the server. In the
     * presence of read filters, the server may process more rows than it returns,
     * so this value reflects progress through the pre-filtering rows.
     * This value is only populated for sessions created through the BALANCED
     * sharding strategy.
     *
     * Generated from protobuf field <code>float fraction_consumed = 2;</code>
     * @return float
     */
    public function getFractionConsumed()
    {
        return $this->fraction_consumed;
    }

    /**
     * A value in the range [0.0, 1.0] that represents the fraction of rows
     * assigned to this stream that have been processed by the server. In the
     * presence of read filters, the server may process more rows than it returns,
     * so this value reflects progress through the pre-filtering rows.
     * This value is only populated for sessions created through the BALANCED
     * sharding strategy.
     *
     * Generated from protobuf field <code>float fraction_consumed = 2;</code>
     * @param float $var
     * @return $this
     */
    public function setFractionConsumed($var)
    {
        GPBUtil::checkFloat($var);
        $this->fraction_consumed = $var;

        return $this;
    }

    /**
     * Represents the progress of the current stream.
     *
     * Generated from protobuf field <code>.google.cloud.bigquery.storage.v1beta1.Progress progress = 4;</code>
     * @return \Google\Cloud\Bigquery\Storage\V1beta1\Progress|null
     */
    public function getProgress()
    {
        return $this->progress;
    }

    public function hasProgress()
    {
        return isset($this->progress);
    }

    public function clearProgress()
    {
        unset($this->progress);
    }

    /**
     * Represents the progress of the current stream.
     *
     * Generated from protobuf field <code>.google.cloud.bigquery.storage.v1beta1.Progress progress = 4;</code>
     * @param \Google\Cloud\Bigquery\Storage\V1beta1\Progress $var
     * @return $this
     */
    public function setProgress($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Bigquery\Storage\V1beta1\Progress::class);
        $this->progress = $var;

        return $this;
    }

    /**
     * Whether this stream can be split. For sessions that use the LIQUID sharding
     * strategy, this value is always false. For BALANCED sessions, this value is
     * false when enough data have been read such that no more splits are possible
     * at that point or beyond. For small tables or streams that are the result of
     * a chain of splits, this value may never be true.
     *
     * Generated from protobuf field <code>bool is_splittable = 3;</code>
     * @return bool
     */
    public function getIsSplittable()
    {
        return $this->is_splittable;
    }

    /**
     * Whether this stream can be split. For sessions that use the LIQUID sharding
     * strategy, this value is always false. For BALANCED sessions, this value is
     * false when enough data have been read such that no more splits are possible
     * at that point or beyond. For small tables or streams that are the result of
     * a chain of splits, this value may never be true.
     *
     * Generated from protobuf field <code>bool is_splittable = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setIsSplittable($var)
    {
        GPBUtil::checkBool($var);
        $this->is_splittable = $var;

        return $this;
    }

}

