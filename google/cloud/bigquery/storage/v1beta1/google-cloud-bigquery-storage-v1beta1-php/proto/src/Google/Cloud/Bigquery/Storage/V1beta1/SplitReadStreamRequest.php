<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/bigquery/storage/v1beta1/storage.proto

namespace Google\Cloud\Bigquery\Storage\V1beta1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Request information for `SplitReadStream`.
 *
 * Generated from protobuf message <code>google.cloud.bigquery.storage.v1beta1.SplitReadStreamRequest</code>
 */
class SplitReadStreamRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Required. Stream to split.
     *
     * Generated from protobuf field <code>.google.cloud.bigquery.storage.v1beta1.Stream original_stream = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    protected $original_stream = null;
    /**
     * A value in the range (0.0, 1.0) that specifies the fractional point at
     * which the original stream should be split. The actual split point is
     * evaluated on pre-filtered rows, so if a filter is provided, then there is
     * no guarantee that the division of the rows between the new child streams
     * will be proportional to this fractional value. Additionally, because the
     * server-side unit for assigning data is collections of rows, this fraction
     * will always map to to a data storage boundary on the server side.
     *
     * Generated from protobuf field <code>float fraction = 2;</code>
     */
    protected $fraction = 0.0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Cloud\Bigquery\Storage\V1beta1\Stream $original_stream
     *           Required. Stream to split.
     *     @type float $fraction
     *           A value in the range (0.0, 1.0) that specifies the fractional point at
     *           which the original stream should be split. The actual split point is
     *           evaluated on pre-filtered rows, so if a filter is provided, then there is
     *           no guarantee that the division of the rows between the new child streams
     *           will be proportional to this fractional value. Additionally, because the
     *           server-side unit for assigning data is collections of rows, this fraction
     *           will always map to to a data storage boundary on the server side.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Bigquery\Storage\V1Beta1\Storage::initOnce();
        parent::__construct($data);
    }

    /**
     * Required. Stream to split.
     *
     * Generated from protobuf field <code>.google.cloud.bigquery.storage.v1beta1.Stream original_stream = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return \Google\Cloud\Bigquery\Storage\V1beta1\Stream|null
     */
    public function getOriginalStream()
    {
        return $this->original_stream;
    }

    public function hasOriginalStream()
    {
        return isset($this->original_stream);
    }

    public function clearOriginalStream()
    {
        unset($this->original_stream);
    }

    /**
     * Required. Stream to split.
     *
     * Generated from protobuf field <code>.google.cloud.bigquery.storage.v1beta1.Stream original_stream = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param \Google\Cloud\Bigquery\Storage\V1beta1\Stream $var
     * @return $this
     */
    public function setOriginalStream($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Bigquery\Storage\V1beta1\Stream::class);
        $this->original_stream = $var;

        return $this;
    }

    /**
     * A value in the range (0.0, 1.0) that specifies the fractional point at
     * which the original stream should be split. The actual split point is
     * evaluated on pre-filtered rows, so if a filter is provided, then there is
     * no guarantee that the division of the rows between the new child streams
     * will be proportional to this fractional value. Additionally, because the
     * server-side unit for assigning data is collections of rows, this fraction
     * will always map to to a data storage boundary on the server side.
     *
     * Generated from protobuf field <code>float fraction = 2;</code>
     * @return float
     */
    public function getFraction()
    {
        return $this->fraction;
    }

    /**
     * A value in the range (0.0, 1.0) that specifies the fractional point at
     * which the original stream should be split. The actual split point is
     * evaluated on pre-filtered rows, so if a filter is provided, then there is
     * no guarantee that the division of the rows between the new child streams
     * will be proportional to this fractional value. Additionally, because the
     * server-side unit for assigning data is collections of rows, this fraction
     * will always map to to a data storage boundary on the server side.
     *
     * Generated from protobuf field <code>float fraction = 2;</code>
     * @param float $var
     * @return $this
     */
    public function setFraction($var)
    {
        GPBUtil::checkFloat($var);
        $this->fraction = $var;

        return $this;
    }

}

