// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/tasks/v2beta2/queue.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Tasks.V2Beta2 {

  /// <summary>Holder for reflection information generated from google/cloud/tasks/v2beta2/queue.proto</summary>
  public static partial class QueueReflection {

    #region Descriptor
    /// <summary>File descriptor for google/cloud/tasks/v2beta2/queue.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QueueReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZnb29nbGUvY2xvdWQvdGFza3MvdjJiZXRhMi9xdWV1ZS5wcm90bxIaZ29v",
            "Z2xlLmNsb3VkLnRhc2tzLnYyYmV0YTIaH2dvb2dsZS9hcGkvZmllbGRfYmVo",
            "YXZpb3IucHJvdG8aGWdvb2dsZS9hcGkvcmVzb3VyY2UucHJvdG8aJ2dvb2ds",
            "ZS9jbG91ZC90YXNrcy92MmJldGEyL3RhcmdldC5wcm90bxoeZ29vZ2xlL3By",
            "b3RvYnVmL2R1cmF0aW9uLnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0",
            "YW1wLnByb3RvGhxnb29nbGUvYXBpL2Fubm90YXRpb25zLnByb3RvItoFCgVR",
            "dWV1ZRIMCgRuYW1lGAEgASgJElEKFmFwcF9lbmdpbmVfaHR0cF90YXJnZXQY",
            "AyABKAsyLy5nb29nbGUuY2xvdWQudGFza3MudjJiZXRhMi5BcHBFbmdpbmVI",
            "dHRwVGFyZ2V0SAASPQoLcHVsbF90YXJnZXQYBCABKAsyJi5nb29nbGUuY2xv",
            "dWQudGFza3MudjJiZXRhMi5QdWxsVGFyZ2V0SAASOwoLcmF0ZV9saW1pdHMY",
            "BSABKAsyJi5nb29nbGUuY2xvdWQudGFza3MudjJiZXRhMi5SYXRlTGltaXRz",
            "Ej0KDHJldHJ5X2NvbmZpZxgGIAEoCzInLmdvb2dsZS5jbG91ZC50YXNrcy52",
            "MmJldGEyLlJldHJ5Q29uZmlnEjYKBXN0YXRlGAcgASgOMicuZ29vZ2xlLmNs",
            "b3VkLnRhc2tzLnYyYmV0YTIuUXVldWUuU3RhdGUSLgoKcHVyZ2VfdGltZRgI",
            "IAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASKwoIdGFza190dGwY",
            "CSABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24SMAoNdG9tYnN0b25l",
            "X3R0bBgKIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbhI6CgVzdGF0",
            "cxgQIAEoCzImLmdvb2dsZS5jbG91ZC50YXNrcy52MmJldGEyLlF1ZXVlU3Rh",
            "dHNCA+BBAyJFCgVTdGF0ZRIVChFTVEFURV9VTlNQRUNJRklFRBAAEgsKB1JV",
            "Tk5JTkcQARIKCgZQQVVTRUQQAhIMCghESVNBQkxFRBADOlzqQVkKH2Nsb3Vk",
            "dGFza3MuZ29vZ2xlYXBpcy5jb20vUXVldWUSNnByb2plY3RzL3twcm9qZWN0",
            "fS9sb2NhdGlvbnMve2xvY2F0aW9ufS9xdWV1ZXMve3F1ZXVlfUINCgt0YXJn",
            "ZXRfdHlwZSJrCgpSYXRlTGltaXRzEicKH21heF90YXNrc19kaXNwYXRjaGVk",
            "X3Blcl9zZWNvbmQYASABKAESFgoObWF4X2J1cnN0X3NpemUYAiABKAUSHAoU",
            "bWF4X2NvbmN1cnJlbnRfdGFza3MYAyABKAUigQIKC1JldHJ5Q29uZmlnEhYK",
            "DG1heF9hdHRlbXB0cxgBIAEoBUgAEhwKEnVubGltaXRlZF9hdHRlbXB0cxgC",
            "IAEoCEgAEjUKEm1heF9yZXRyeV9kdXJhdGlvbhgDIAEoCzIZLmdvb2dsZS5w",
            "cm90b2J1Zi5EdXJhdGlvbhIuCgttaW5fYmFja29mZhgEIAEoCzIZLmdvb2ds",
            "ZS5wcm90b2J1Zi5EdXJhdGlvbhIuCgttYXhfYmFja29mZhgFIAEoCzIZLmdv",
            "b2dsZS5wcm90b2J1Zi5EdXJhdGlvbhIVCg1tYXhfZG91YmxpbmdzGAYgASgF",
            "Qg4KDG51bV9hdHRlbXB0cyLoAQoKUXVldWVTdGF0cxIYCgt0YXNrc19jb3Vu",
            "dBgBIAEoA0ID4EEDEkYKHW9sZGVzdF9lc3RpbWF0ZWRfYXJyaXZhbF90aW1l",
            "GAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEID4EEDEicKGmV4",
            "ZWN1dGVkX2xhc3RfbWludXRlX2NvdW50GAMgASgDQgPgQQMSKAobY29uY3Vy",
            "cmVudF9kaXNwYXRjaGVzX2NvdW50GAQgASgDQgPgQQMSJQoYZWZmZWN0aXZl",
            "X2V4ZWN1dGlvbl9yYXRlGAUgASgBQgPgQQNCbwoeY29tLmdvb2dsZS5jbG91",
            "ZC50YXNrcy52MmJldGEyQgpRdWV1ZVByb3RvUAFaP2dvb2dsZS5nb2xhbmcu",
            "b3JnL2dlbnByb3RvL2dvb2dsZWFwaXMvY2xvdWQvdGFza3MvdjJiZXRhMjt0",
            "YXNrc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Api.ResourceReflection.Descriptor, global::Google.Cloud.Tasks.V2Beta2.TargetReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Tasks.V2Beta2.Queue), global::Google.Cloud.Tasks.V2Beta2.Queue.Parser, new[]{ "Name", "AppEngineHttpTarget", "PullTarget", "RateLimits", "RetryConfig", "State", "PurgeTime", "TaskTtl", "TombstoneTtl", "Stats" }, new[]{ "TargetType" }, new[]{ typeof(global::Google.Cloud.Tasks.V2Beta2.Queue.Types.State) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Tasks.V2Beta2.RateLimits), global::Google.Cloud.Tasks.V2Beta2.RateLimits.Parser, new[]{ "MaxTasksDispatchedPerSecond", "MaxBurstSize", "MaxConcurrentTasks" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Tasks.V2Beta2.RetryConfig), global::Google.Cloud.Tasks.V2Beta2.RetryConfig.Parser, new[]{ "MaxAttempts", "UnlimitedAttempts", "MaxRetryDuration", "MinBackoff", "MaxBackoff", "MaxDoublings" }, new[]{ "NumAttempts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Tasks.V2Beta2.QueueStats), global::Google.Cloud.Tasks.V2Beta2.QueueStats.Parser, new[]{ "TasksCount", "OldestEstimatedArrivalTime", "ExecutedLastMinuteCount", "ConcurrentDispatchesCount", "EffectiveExecutionRate" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A queue is a container of related tasks. Queues are configured to manage
  /// how those tasks are dispatched. Configurable properties include rate limits,
  /// retry options, target types, and others.
  /// </summary>
  public sealed partial class Queue : pb::IMessage<Queue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Queue> _parser = new pb::MessageParser<Queue>(() => new Queue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Queue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Tasks.V2Beta2.QueueReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Queue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Queue(Queue other) : this() {
      name_ = other.name_;
      rateLimits_ = other.rateLimits_ != null ? other.rateLimits_.Clone() : null;
      retryConfig_ = other.retryConfig_ != null ? other.retryConfig_.Clone() : null;
      state_ = other.state_;
      purgeTime_ = other.purgeTime_ != null ? other.purgeTime_.Clone() : null;
      taskTtl_ = other.taskTtl_ != null ? other.taskTtl_.Clone() : null;
      tombstoneTtl_ = other.tombstoneTtl_ != null ? other.tombstoneTtl_.Clone() : null;
      stats_ = other.stats_ != null ? other.stats_.Clone() : null;
      switch (other.TargetTypeCase) {
        case TargetTypeOneofCase.AppEngineHttpTarget:
          AppEngineHttpTarget = other.AppEngineHttpTarget.Clone();
          break;
        case TargetTypeOneofCase.PullTarget:
          PullTarget = other.PullTarget.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Queue Clone() {
      return new Queue(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Caller-specified and required in [CreateQueue][google.cloud.tasks.v2beta2.CloudTasks.CreateQueue],
    /// after which it becomes output only.
    ///
    /// The queue name.
    ///
    /// The queue name must have the following format:
    /// `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID`
    ///
    /// * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]),
    ///    hyphens (-), colons (:), or periods (.).
    ///    For more information, see
    ///    [Identifying
    ///    projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects)
    /// * `LOCATION_ID` is the canonical ID for the queue's location.
    ///    The list of available locations can be obtained by calling
    ///    [ListLocations][google.cloud.location.Locations.ListLocations].
    ///    For more information, see https://cloud.google.com/about/locations/.
    /// * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or
    ///   hyphens (-). The maximum length is 100 characters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "app_engine_http_target" field.</summary>
    public const int AppEngineHttpTargetFieldNumber = 3;
    /// <summary>
    /// App Engine HTTP target.
    ///
    /// An App Engine queue is a queue that has an [AppEngineHttpTarget][google.cloud.tasks.v2beta2.AppEngineHttpTarget].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Tasks.V2Beta2.AppEngineHttpTarget AppEngineHttpTarget {
      get { return targetTypeCase_ == TargetTypeOneofCase.AppEngineHttpTarget ? (global::Google.Cloud.Tasks.V2Beta2.AppEngineHttpTarget) targetType_ : null; }
      set {
        targetType_ = value;
        targetTypeCase_ = value == null ? TargetTypeOneofCase.None : TargetTypeOneofCase.AppEngineHttpTarget;
      }
    }

    /// <summary>Field number for the "pull_target" field.</summary>
    public const int PullTargetFieldNumber = 4;
    /// <summary>
    /// Pull target.
    ///
    /// A pull queue is a queue that has a [PullTarget][google.cloud.tasks.v2beta2.PullTarget].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Tasks.V2Beta2.PullTarget PullTarget {
      get { return targetTypeCase_ == TargetTypeOneofCase.PullTarget ? (global::Google.Cloud.Tasks.V2Beta2.PullTarget) targetType_ : null; }
      set {
        targetType_ = value;
        targetTypeCase_ = value == null ? TargetTypeOneofCase.None : TargetTypeOneofCase.PullTarget;
      }
    }

    /// <summary>Field number for the "rate_limits" field.</summary>
    public const int RateLimitsFieldNumber = 5;
    private global::Google.Cloud.Tasks.V2Beta2.RateLimits rateLimits_;
    /// <summary>
    /// Rate limits for task dispatches.
    ///
    /// [rate_limits][google.cloud.tasks.v2beta2.Queue.rate_limits] and
    /// [retry_config][google.cloud.tasks.v2beta2.Queue.retry_config] are related because they both
    /// control task attempts however they control how tasks are
    /// attempted in different ways:
    ///
    /// * [rate_limits][google.cloud.tasks.v2beta2.Queue.rate_limits] controls the total rate of
    ///   dispatches from a queue (i.e. all traffic dispatched from the
    ///   queue, regardless of whether the dispatch is from a first
    ///   attempt or a retry).
    /// * [retry_config][google.cloud.tasks.v2beta2.Queue.retry_config] controls what happens to
    ///   particular a task after its first attempt fails. That is,
    ///   [retry_config][google.cloud.tasks.v2beta2.Queue.retry_config] controls task retries (the
    ///   second attempt, third attempt, etc).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Tasks.V2Beta2.RateLimits RateLimits {
      get { return rateLimits_; }
      set {
        rateLimits_ = value;
      }
    }

    /// <summary>Field number for the "retry_config" field.</summary>
    public const int RetryConfigFieldNumber = 6;
    private global::Google.Cloud.Tasks.V2Beta2.RetryConfig retryConfig_;
    /// <summary>
    /// Settings that determine the retry behavior.
    ///
    /// * For tasks created using Cloud Tasks: the queue-level retry settings
    ///   apply to all tasks in the queue that were created using Cloud Tasks.
    ///   Retry settings cannot be set on individual tasks.
    /// * For tasks created using the App Engine SDK: the queue-level retry
    ///   settings apply to all tasks in the queue which do not have retry settings
    ///   explicitly set on the task and were created by the App Engine SDK. See
    ///   [App Engine
    ///   documentation](https://cloud.google.com/appengine/docs/standard/python/taskqueue/push/retrying-tasks).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Tasks.V2Beta2.RetryConfig RetryConfig {
      get { return retryConfig_; }
      set {
        retryConfig_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 7;
    private global::Google.Cloud.Tasks.V2Beta2.Queue.Types.State state_ = global::Google.Cloud.Tasks.V2Beta2.Queue.Types.State.Unspecified;
    /// <summary>
    /// Output only. The state of the queue.
    ///
    /// `state` can only be changed by calling
    /// [PauseQueue][google.cloud.tasks.v2beta2.CloudTasks.PauseQueue],
    /// [ResumeQueue][google.cloud.tasks.v2beta2.CloudTasks.ResumeQueue], or uploading
    /// [queue.yaml/xml](https://cloud.google.com/appengine/docs/python/config/queueref).
    /// [UpdateQueue][google.cloud.tasks.v2beta2.CloudTasks.UpdateQueue] cannot be used to change `state`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Tasks.V2Beta2.Queue.Types.State State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "purge_time" field.</summary>
    public const int PurgeTimeFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp purgeTime_;
    /// <summary>
    /// Output only. The last time this queue was purged.
    ///
    /// All tasks that were [created][google.cloud.tasks.v2beta2.Task.create_time] before this time
    /// were purged.
    ///
    /// A queue can be purged using [PurgeQueue][google.cloud.tasks.v2beta2.CloudTasks.PurgeQueue], the
    /// [App Engine Task Queue SDK, or the Cloud
    /// Console](https://cloud.google.com/appengine/docs/standard/python/taskqueue/push/deleting-tasks-and-queues#purging_all_tasks_from_a_queue).
    ///
    /// Purge time will be truncated to the nearest microsecond. Purge
    /// time will be unset if the queue has never been purged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp PurgeTime {
      get { return purgeTime_; }
      set {
        purgeTime_ = value;
      }
    }

    /// <summary>Field number for the "task_ttl" field.</summary>
    public const int TaskTtlFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Duration taskTtl_;
    /// <summary>
    /// The maximum amount of time that a task will be retained in
    /// this queue.
    ///
    /// Queues created by Cloud Tasks have a default `task_ttl` of 31 days.
    /// After a task has lived for `task_ttl`, the task will be deleted
    /// regardless of whether it was dispatched or not.
    ///
    /// The `task_ttl` for queues created via queue.yaml/xml is equal to the
    /// maximum duration because there is a
    /// [storage quota](https://cloud.google.com/appengine/quotas#Task_Queue) for
    /// these queues. To view the maximum valid duration, see the documentation for
    /// [Duration][google.protobuf.Duration].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration TaskTtl {
      get { return taskTtl_; }
      set {
        taskTtl_ = value;
      }
    }

    /// <summary>Field number for the "tombstone_ttl" field.</summary>
    public const int TombstoneTtlFieldNumber = 10;
    private global::Google.Protobuf.WellKnownTypes.Duration tombstoneTtl_;
    /// <summary>
    /// The task tombstone time to live (TTL).
    ///
    /// After a task is deleted or completed, the task's tombstone is
    /// retained for the length of time specified by `tombstone_ttl`.
    /// The tombstone is used by task de-duplication; another task with the same
    /// name can't be created until the tombstone has expired. For more information
    /// about task de-duplication, see the documentation for
    /// [CreateTaskRequest][google.cloud.tasks.v2beta2.CreateTaskRequest.task].
    ///
    /// Queues created by Cloud Tasks have a default `tombstone_ttl` of 1 hour.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration TombstoneTtl {
      get { return tombstoneTtl_; }
      set {
        tombstoneTtl_ = value;
      }
    }

    /// <summary>Field number for the "stats" field.</summary>
    public const int StatsFieldNumber = 16;
    private global::Google.Cloud.Tasks.V2Beta2.QueueStats stats_;
    /// <summary>
    /// Output only. The realtime, informational statistics for a queue. In order
    /// to receive the statistics the caller should include this field in the
    /// FieldMask.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Tasks.V2Beta2.QueueStats Stats {
      get { return stats_; }
      set {
        stats_ = value;
      }
    }

    private object targetType_;
    /// <summary>Enum of possible cases for the "target_type" oneof.</summary>
    public enum TargetTypeOneofCase {
      None = 0,
      AppEngineHttpTarget = 3,
      PullTarget = 4,
    }
    private TargetTypeOneofCase targetTypeCase_ = TargetTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetTypeOneofCase TargetTypeCase {
      get { return targetTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetType() {
      targetTypeCase_ = TargetTypeOneofCase.None;
      targetType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Queue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Queue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(AppEngineHttpTarget, other.AppEngineHttpTarget)) return false;
      if (!object.Equals(PullTarget, other.PullTarget)) return false;
      if (!object.Equals(RateLimits, other.RateLimits)) return false;
      if (!object.Equals(RetryConfig, other.RetryConfig)) return false;
      if (State != other.State) return false;
      if (!object.Equals(PurgeTime, other.PurgeTime)) return false;
      if (!object.Equals(TaskTtl, other.TaskTtl)) return false;
      if (!object.Equals(TombstoneTtl, other.TombstoneTtl)) return false;
      if (!object.Equals(Stats, other.Stats)) return false;
      if (TargetTypeCase != other.TargetTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (targetTypeCase_ == TargetTypeOneofCase.AppEngineHttpTarget) hash ^= AppEngineHttpTarget.GetHashCode();
      if (targetTypeCase_ == TargetTypeOneofCase.PullTarget) hash ^= PullTarget.GetHashCode();
      if (rateLimits_ != null) hash ^= RateLimits.GetHashCode();
      if (retryConfig_ != null) hash ^= RetryConfig.GetHashCode();
      if (State != global::Google.Cloud.Tasks.V2Beta2.Queue.Types.State.Unspecified) hash ^= State.GetHashCode();
      if (purgeTime_ != null) hash ^= PurgeTime.GetHashCode();
      if (taskTtl_ != null) hash ^= TaskTtl.GetHashCode();
      if (tombstoneTtl_ != null) hash ^= TombstoneTtl.GetHashCode();
      if (stats_ != null) hash ^= Stats.GetHashCode();
      hash ^= (int) targetTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (targetTypeCase_ == TargetTypeOneofCase.AppEngineHttpTarget) {
        output.WriteRawTag(26);
        output.WriteMessage(AppEngineHttpTarget);
      }
      if (targetTypeCase_ == TargetTypeOneofCase.PullTarget) {
        output.WriteRawTag(34);
        output.WriteMessage(PullTarget);
      }
      if (rateLimits_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(RateLimits);
      }
      if (retryConfig_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(RetryConfig);
      }
      if (State != global::Google.Cloud.Tasks.V2Beta2.Queue.Types.State.Unspecified) {
        output.WriteRawTag(56);
        output.WriteEnum((int) State);
      }
      if (purgeTime_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(PurgeTime);
      }
      if (taskTtl_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(TaskTtl);
      }
      if (tombstoneTtl_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(TombstoneTtl);
      }
      if (stats_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Stats);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (targetTypeCase_ == TargetTypeOneofCase.AppEngineHttpTarget) {
        output.WriteRawTag(26);
        output.WriteMessage(AppEngineHttpTarget);
      }
      if (targetTypeCase_ == TargetTypeOneofCase.PullTarget) {
        output.WriteRawTag(34);
        output.WriteMessage(PullTarget);
      }
      if (rateLimits_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(RateLimits);
      }
      if (retryConfig_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(RetryConfig);
      }
      if (State != global::Google.Cloud.Tasks.V2Beta2.Queue.Types.State.Unspecified) {
        output.WriteRawTag(56);
        output.WriteEnum((int) State);
      }
      if (purgeTime_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(PurgeTime);
      }
      if (taskTtl_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(TaskTtl);
      }
      if (tombstoneTtl_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(TombstoneTtl);
      }
      if (stats_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Stats);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (targetTypeCase_ == TargetTypeOneofCase.AppEngineHttpTarget) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AppEngineHttpTarget);
      }
      if (targetTypeCase_ == TargetTypeOneofCase.PullTarget) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PullTarget);
      }
      if (rateLimits_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RateLimits);
      }
      if (retryConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RetryConfig);
      }
      if (State != global::Google.Cloud.Tasks.V2Beta2.Queue.Types.State.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (purgeTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PurgeTime);
      }
      if (taskTtl_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TaskTtl);
      }
      if (tombstoneTtl_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TombstoneTtl);
      }
      if (stats_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Stats);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Queue other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.rateLimits_ != null) {
        if (rateLimits_ == null) {
          RateLimits = new global::Google.Cloud.Tasks.V2Beta2.RateLimits();
        }
        RateLimits.MergeFrom(other.RateLimits);
      }
      if (other.retryConfig_ != null) {
        if (retryConfig_ == null) {
          RetryConfig = new global::Google.Cloud.Tasks.V2Beta2.RetryConfig();
        }
        RetryConfig.MergeFrom(other.RetryConfig);
      }
      if (other.State != global::Google.Cloud.Tasks.V2Beta2.Queue.Types.State.Unspecified) {
        State = other.State;
      }
      if (other.purgeTime_ != null) {
        if (purgeTime_ == null) {
          PurgeTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        PurgeTime.MergeFrom(other.PurgeTime);
      }
      if (other.taskTtl_ != null) {
        if (taskTtl_ == null) {
          TaskTtl = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        TaskTtl.MergeFrom(other.TaskTtl);
      }
      if (other.tombstoneTtl_ != null) {
        if (tombstoneTtl_ == null) {
          TombstoneTtl = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        TombstoneTtl.MergeFrom(other.TombstoneTtl);
      }
      if (other.stats_ != null) {
        if (stats_ == null) {
          Stats = new global::Google.Cloud.Tasks.V2Beta2.QueueStats();
        }
        Stats.MergeFrom(other.Stats);
      }
      switch (other.TargetTypeCase) {
        case TargetTypeOneofCase.AppEngineHttpTarget:
          if (AppEngineHttpTarget == null) {
            AppEngineHttpTarget = new global::Google.Cloud.Tasks.V2Beta2.AppEngineHttpTarget();
          }
          AppEngineHttpTarget.MergeFrom(other.AppEngineHttpTarget);
          break;
        case TargetTypeOneofCase.PullTarget:
          if (PullTarget == null) {
            PullTarget = new global::Google.Cloud.Tasks.V2Beta2.PullTarget();
          }
          PullTarget.MergeFrom(other.PullTarget);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            global::Google.Cloud.Tasks.V2Beta2.AppEngineHttpTarget subBuilder = new global::Google.Cloud.Tasks.V2Beta2.AppEngineHttpTarget();
            if (targetTypeCase_ == TargetTypeOneofCase.AppEngineHttpTarget) {
              subBuilder.MergeFrom(AppEngineHttpTarget);
            }
            input.ReadMessage(subBuilder);
            AppEngineHttpTarget = subBuilder;
            break;
          }
          case 34: {
            global::Google.Cloud.Tasks.V2Beta2.PullTarget subBuilder = new global::Google.Cloud.Tasks.V2Beta2.PullTarget();
            if (targetTypeCase_ == TargetTypeOneofCase.PullTarget) {
              subBuilder.MergeFrom(PullTarget);
            }
            input.ReadMessage(subBuilder);
            PullTarget = subBuilder;
            break;
          }
          case 42: {
            if (rateLimits_ == null) {
              RateLimits = new global::Google.Cloud.Tasks.V2Beta2.RateLimits();
            }
            input.ReadMessage(RateLimits);
            break;
          }
          case 50: {
            if (retryConfig_ == null) {
              RetryConfig = new global::Google.Cloud.Tasks.V2Beta2.RetryConfig();
            }
            input.ReadMessage(RetryConfig);
            break;
          }
          case 56: {
            State = (global::Google.Cloud.Tasks.V2Beta2.Queue.Types.State) input.ReadEnum();
            break;
          }
          case 66: {
            if (purgeTime_ == null) {
              PurgeTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PurgeTime);
            break;
          }
          case 74: {
            if (taskTtl_ == null) {
              TaskTtl = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(TaskTtl);
            break;
          }
          case 82: {
            if (tombstoneTtl_ == null) {
              TombstoneTtl = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(TombstoneTtl);
            break;
          }
          case 130: {
            if (stats_ == null) {
              Stats = new global::Google.Cloud.Tasks.V2Beta2.QueueStats();
            }
            input.ReadMessage(Stats);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            global::Google.Cloud.Tasks.V2Beta2.AppEngineHttpTarget subBuilder = new global::Google.Cloud.Tasks.V2Beta2.AppEngineHttpTarget();
            if (targetTypeCase_ == TargetTypeOneofCase.AppEngineHttpTarget) {
              subBuilder.MergeFrom(AppEngineHttpTarget);
            }
            input.ReadMessage(subBuilder);
            AppEngineHttpTarget = subBuilder;
            break;
          }
          case 34: {
            global::Google.Cloud.Tasks.V2Beta2.PullTarget subBuilder = new global::Google.Cloud.Tasks.V2Beta2.PullTarget();
            if (targetTypeCase_ == TargetTypeOneofCase.PullTarget) {
              subBuilder.MergeFrom(PullTarget);
            }
            input.ReadMessage(subBuilder);
            PullTarget = subBuilder;
            break;
          }
          case 42: {
            if (rateLimits_ == null) {
              RateLimits = new global::Google.Cloud.Tasks.V2Beta2.RateLimits();
            }
            input.ReadMessage(RateLimits);
            break;
          }
          case 50: {
            if (retryConfig_ == null) {
              RetryConfig = new global::Google.Cloud.Tasks.V2Beta2.RetryConfig();
            }
            input.ReadMessage(RetryConfig);
            break;
          }
          case 56: {
            State = (global::Google.Cloud.Tasks.V2Beta2.Queue.Types.State) input.ReadEnum();
            break;
          }
          case 66: {
            if (purgeTime_ == null) {
              PurgeTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PurgeTime);
            break;
          }
          case 74: {
            if (taskTtl_ == null) {
              TaskTtl = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(TaskTtl);
            break;
          }
          case 82: {
            if (tombstoneTtl_ == null) {
              TombstoneTtl = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(TombstoneTtl);
            break;
          }
          case 130: {
            if (stats_ == null) {
              Stats = new global::Google.Cloud.Tasks.V2Beta2.QueueStats();
            }
            input.ReadMessage(Stats);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Queue message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// State of the queue.
      /// </summary>
      public enum State {
        /// <summary>
        /// Unspecified state.
        /// </summary>
        [pbr::OriginalName("STATE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// The queue is running. Tasks can be dispatched.
        ///
        /// If the queue was created using Cloud Tasks and the queue has
        /// had no activity (method calls or task dispatches) for 30 days,
        /// the queue may take a few minutes to re-activate. Some method
        /// calls may return [NOT_FOUND][google.rpc.Code.NOT_FOUND] and
        /// tasks may not be dispatched for a few minutes until the queue
        /// has been re-activated.
        /// </summary>
        [pbr::OriginalName("RUNNING")] Running = 1,
        /// <summary>
        /// Tasks are paused by the user. If the queue is paused then Cloud
        /// Tasks will stop delivering tasks from it, but more tasks can
        /// still be added to it by the user. When a pull queue is paused,
        /// all [LeaseTasks][google.cloud.tasks.v2beta2.CloudTasks.LeaseTasks] calls will return a
        /// [FAILED_PRECONDITION][google.rpc.Code.FAILED_PRECONDITION].
        /// </summary>
        [pbr::OriginalName("PAUSED")] Paused = 2,
        /// <summary>
        /// The queue is disabled.
        ///
        /// A queue becomes `DISABLED` when
        /// [queue.yaml](https://cloud.google.com/appengine/docs/python/config/queueref)
        /// or
        /// [queue.xml](https://cloud.google.com/appengine/docs/standard/java/config/queueref)
        /// is uploaded which does not contain the queue. You cannot directly disable
        /// a queue.
        ///
        /// When a queue is disabled, tasks can still be added to a queue
        /// but the tasks are not dispatched and
        /// [LeaseTasks][google.cloud.tasks.v2beta2.CloudTasks.LeaseTasks] calls return a
        /// `FAILED_PRECONDITION` error.
        ///
        /// To permanently delete this queue and all of its tasks, call
        /// [DeleteQueue][google.cloud.tasks.v2beta2.CloudTasks.DeleteQueue].
        /// </summary>
        [pbr::OriginalName("DISABLED")] Disabled = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// Rate limits.
  ///
  /// This message determines the maximum rate that tasks can be dispatched by a
  /// queue, regardless of whether the dispatch is a first task attempt or a retry.
  ///
  /// Note: The debugging command, [RunTask][google.cloud.tasks.v2beta2.CloudTasks.RunTask], will run a task
  /// even if the queue has reached its [RateLimits][google.cloud.tasks.v2beta2.RateLimits].
  /// </summary>
  public sealed partial class RateLimits : pb::IMessage<RateLimits>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RateLimits> _parser = new pb::MessageParser<RateLimits>(() => new RateLimits());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RateLimits> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Tasks.V2Beta2.QueueReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateLimits() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateLimits(RateLimits other) : this() {
      maxTasksDispatchedPerSecond_ = other.maxTasksDispatchedPerSecond_;
      maxBurstSize_ = other.maxBurstSize_;
      maxConcurrentTasks_ = other.maxConcurrentTasks_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateLimits Clone() {
      return new RateLimits(this);
    }

    /// <summary>Field number for the "max_tasks_dispatched_per_second" field.</summary>
    public const int MaxTasksDispatchedPerSecondFieldNumber = 1;
    private double maxTasksDispatchedPerSecond_;
    /// <summary>
    /// The maximum rate at which tasks are dispatched from this queue.
    ///
    /// If unspecified when the queue is created, Cloud Tasks will pick the
    /// default.
    ///
    /// * For [App Engine queues][google.cloud.tasks.v2beta2.AppEngineHttpTarget], the maximum allowed value
    ///   is 500.
    /// * This field is output only   for [pull queues][google.cloud.tasks.v2beta2.PullTarget]. In addition to the
    ///   `max_tasks_dispatched_per_second` limit, a maximum of 10 QPS of
    ///   [LeaseTasks][google.cloud.tasks.v2beta2.CloudTasks.LeaseTasks] requests are allowed per pull queue.
    ///
    /// This field has the same meaning as
    /// [rate in
    /// queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#rate).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxTasksDispatchedPerSecond {
      get { return maxTasksDispatchedPerSecond_; }
      set {
        maxTasksDispatchedPerSecond_ = value;
      }
    }

    /// <summary>Field number for the "max_burst_size" field.</summary>
    public const int MaxBurstSizeFieldNumber = 2;
    private int maxBurstSize_;
    /// <summary>
    /// The max burst size.
    ///
    /// Max burst size limits how fast tasks in queue are processed when
    /// many tasks are in the queue and the rate is high. This field
    /// allows the queue to have a high rate so processing starts shortly
    /// after a task is enqueued, but still limits resource usage when
    /// many tasks are enqueued in a short period of time.
    ///
    /// The [token bucket](https://wikipedia.org/wiki/Token_Bucket)
    /// algorithm is used to control the rate of task dispatches. Each
    /// queue has a token bucket that holds tokens, up to the maximum
    /// specified by `max_burst_size`. Each time a task is dispatched, a
    /// token is removed from the bucket. Tasks will be dispatched until
    /// the queue's bucket runs out of tokens. The bucket will be
    /// continuously refilled with new tokens based on
    /// [max_dispatches_per_second][RateLimits.max_dispatches_per_second].
    ///
    /// The default value of `max_burst_size` is picked by Cloud Tasks
    /// based on the value of
    /// [max_dispatches_per_second][RateLimits.max_dispatches_per_second].
    ///
    /// The maximum value of `max_burst_size` is 500.
    ///
    /// For App Engine queues that were created or updated using
    /// `queue.yaml/xml`, `max_burst_size` is equal to
    /// [bucket_size](https://cloud.google.com/appengine/docs/standard/python/config/queueref#bucket_size).
    /// If
    /// [UpdateQueue][google.cloud.tasks.v2beta2.CloudTasks.UpdateQueue] is called on a queue without
    /// explicitly setting a value for `max_burst_size`,
    /// `max_burst_size` value will get updated if
    /// [UpdateQueue][google.cloud.tasks.v2beta2.CloudTasks.UpdateQueue] is updating
    /// [max_dispatches_per_second][RateLimits.max_dispatches_per_second].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxBurstSize {
      get { return maxBurstSize_; }
      set {
        maxBurstSize_ = value;
      }
    }

    /// <summary>Field number for the "max_concurrent_tasks" field.</summary>
    public const int MaxConcurrentTasksFieldNumber = 3;
    private int maxConcurrentTasks_;
    /// <summary>
    /// The maximum number of concurrent tasks that Cloud Tasks allows
    /// to be dispatched for this queue. After this threshold has been
    /// reached, Cloud Tasks stops dispatching tasks until the number of
    /// concurrent requests decreases.
    ///
    /// If unspecified when the queue is created, Cloud Tasks will pick the
    /// default.
    ///
    /// The maximum allowed value is 5,000.
    ///
    /// This field is output only for
    /// [pull queues][google.cloud.tasks.v2beta2.PullTarget] and always -1, which indicates no limit. No other
    /// queue types can have `max_concurrent_tasks` set to -1.
    ///
    /// This field has the same meaning as
    /// [max_concurrent_requests in
    /// queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#max_concurrent_requests).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxConcurrentTasks {
      get { return maxConcurrentTasks_; }
      set {
        maxConcurrentTasks_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RateLimits);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RateLimits other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxTasksDispatchedPerSecond, other.MaxTasksDispatchedPerSecond)) return false;
      if (MaxBurstSize != other.MaxBurstSize) return false;
      if (MaxConcurrentTasks != other.MaxConcurrentTasks) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxTasksDispatchedPerSecond != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxTasksDispatchedPerSecond);
      if (MaxBurstSize != 0) hash ^= MaxBurstSize.GetHashCode();
      if (MaxConcurrentTasks != 0) hash ^= MaxConcurrentTasks.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MaxTasksDispatchedPerSecond != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(MaxTasksDispatchedPerSecond);
      }
      if (MaxBurstSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxBurstSize);
      }
      if (MaxConcurrentTasks != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxConcurrentTasks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MaxTasksDispatchedPerSecond != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(MaxTasksDispatchedPerSecond);
      }
      if (MaxBurstSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxBurstSize);
      }
      if (MaxConcurrentTasks != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxConcurrentTasks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxTasksDispatchedPerSecond != 0D) {
        size += 1 + 8;
      }
      if (MaxBurstSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxBurstSize);
      }
      if (MaxConcurrentTasks != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxConcurrentTasks);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RateLimits other) {
      if (other == null) {
        return;
      }
      if (other.MaxTasksDispatchedPerSecond != 0D) {
        MaxTasksDispatchedPerSecond = other.MaxTasksDispatchedPerSecond;
      }
      if (other.MaxBurstSize != 0) {
        MaxBurstSize = other.MaxBurstSize;
      }
      if (other.MaxConcurrentTasks != 0) {
        MaxConcurrentTasks = other.MaxConcurrentTasks;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            MaxTasksDispatchedPerSecond = input.ReadDouble();
            break;
          }
          case 16: {
            MaxBurstSize = input.ReadInt32();
            break;
          }
          case 24: {
            MaxConcurrentTasks = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            MaxTasksDispatchedPerSecond = input.ReadDouble();
            break;
          }
          case 16: {
            MaxBurstSize = input.ReadInt32();
            break;
          }
          case 24: {
            MaxConcurrentTasks = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Retry config.
  ///
  /// These settings determine how a failed task attempt is retried.
  /// </summary>
  public sealed partial class RetryConfig : pb::IMessage<RetryConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RetryConfig> _parser = new pb::MessageParser<RetryConfig>(() => new RetryConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RetryConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Tasks.V2Beta2.QueueReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetryConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetryConfig(RetryConfig other) : this() {
      maxRetryDuration_ = other.maxRetryDuration_ != null ? other.maxRetryDuration_.Clone() : null;
      minBackoff_ = other.minBackoff_ != null ? other.minBackoff_.Clone() : null;
      maxBackoff_ = other.maxBackoff_ != null ? other.maxBackoff_.Clone() : null;
      maxDoublings_ = other.maxDoublings_;
      switch (other.NumAttemptsCase) {
        case NumAttemptsOneofCase.MaxAttempts:
          MaxAttempts = other.MaxAttempts;
          break;
        case NumAttemptsOneofCase.UnlimitedAttempts:
          UnlimitedAttempts = other.UnlimitedAttempts;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetryConfig Clone() {
      return new RetryConfig(this);
    }

    /// <summary>Field number for the "max_attempts" field.</summary>
    public const int MaxAttemptsFieldNumber = 1;
    /// <summary>
    /// The maximum number of attempts for a task.
    ///
    /// Cloud Tasks will attempt the task `max_attempts` times (that
    /// is, if the first attempt fails, then there will be
    /// `max_attempts - 1` retries).  Must be > 0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxAttempts {
      get { return numAttemptsCase_ == NumAttemptsOneofCase.MaxAttempts ? (int) numAttempts_ : 0; }
      set {
        numAttempts_ = value;
        numAttemptsCase_ = NumAttemptsOneofCase.MaxAttempts;
      }
    }

    /// <summary>Field number for the "unlimited_attempts" field.</summary>
    public const int UnlimitedAttemptsFieldNumber = 2;
    /// <summary>
    /// If true, then the number of attempts is unlimited.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UnlimitedAttempts {
      get { return numAttemptsCase_ == NumAttemptsOneofCase.UnlimitedAttempts ? (bool) numAttempts_ : false; }
      set {
        numAttempts_ = value;
        numAttemptsCase_ = NumAttemptsOneofCase.UnlimitedAttempts;
      }
    }

    /// <summary>Field number for the "max_retry_duration" field.</summary>
    public const int MaxRetryDurationFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Duration maxRetryDuration_;
    /// <summary>
    /// If positive, `max_retry_duration` specifies the time limit for
    /// retrying a failed task, measured from when the task was first
    /// attempted. Once `max_retry_duration` time has passed *and* the
    /// task has been attempted [max_attempts][google.cloud.tasks.v2beta2.RetryConfig.max_attempts]
    /// times, no further attempts will be made and the task will be
    /// deleted.
    ///
    /// If zero, then the task age is unlimited.
    ///
    /// If unspecified when the queue is created, Cloud Tasks will pick the
    /// default.
    ///
    /// This field is output only for [pull queues][google.cloud.tasks.v2beta2.PullTarget].
    ///
    /// `max_retry_duration` will be truncated to the nearest second.
    ///
    /// This field has the same meaning as
    /// [task_age_limit in
    /// queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration MaxRetryDuration {
      get { return maxRetryDuration_; }
      set {
        maxRetryDuration_ = value;
      }
    }

    /// <summary>Field number for the "min_backoff" field.</summary>
    public const int MinBackoffFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Duration minBackoff_;
    /// <summary>
    /// A task will be [scheduled][google.cloud.tasks.v2beta2.Task.schedule_time] for retry between
    /// [min_backoff][google.cloud.tasks.v2beta2.RetryConfig.min_backoff] and
    /// [max_backoff][google.cloud.tasks.v2beta2.RetryConfig.max_backoff] duration after it fails,
    /// if the queue's [RetryConfig][google.cloud.tasks.v2beta2.RetryConfig] specifies that the task should be
    /// retried.
    ///
    /// If unspecified when the queue is created, Cloud Tasks will pick the
    /// default.
    ///
    /// This field is output only for [pull queues][google.cloud.tasks.v2beta2.PullTarget].
    ///
    /// `min_backoff` will be truncated to the nearest second.
    ///
    /// This field has the same meaning as
    /// [min_backoff_seconds in
    /// queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration MinBackoff {
      get { return minBackoff_; }
      set {
        minBackoff_ = value;
      }
    }

    /// <summary>Field number for the "max_backoff" field.</summary>
    public const int MaxBackoffFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Duration maxBackoff_;
    /// <summary>
    /// A task will be [scheduled][google.cloud.tasks.v2beta2.Task.schedule_time] for retry between
    /// [min_backoff][google.cloud.tasks.v2beta2.RetryConfig.min_backoff] and
    /// [max_backoff][google.cloud.tasks.v2beta2.RetryConfig.max_backoff] duration after it fails,
    /// if the queue's [RetryConfig][google.cloud.tasks.v2beta2.RetryConfig] specifies that the task should be
    /// retried.
    ///
    /// If unspecified when the queue is created, Cloud Tasks will pick the
    /// default.
    ///
    /// This field is output only for [pull queues][google.cloud.tasks.v2beta2.PullTarget].
    ///
    /// `max_backoff` will be truncated to the nearest second.
    ///
    /// This field has the same meaning as
    /// [max_backoff_seconds in
    /// queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration MaxBackoff {
      get { return maxBackoff_; }
      set {
        maxBackoff_ = value;
      }
    }

    /// <summary>Field number for the "max_doublings" field.</summary>
    public const int MaxDoublingsFieldNumber = 6;
    private int maxDoublings_;
    /// <summary>
    /// The time between retries will double `max_doublings` times.
    ///
    /// A task's retry interval starts at
    /// [min_backoff][google.cloud.tasks.v2beta2.RetryConfig.min_backoff], then doubles
    /// `max_doublings` times, then increases linearly, and finally
    /// retries at intervals of
    /// [max_backoff][google.cloud.tasks.v2beta2.RetryConfig.max_backoff] up to
    /// [max_attempts][google.cloud.tasks.v2beta2.RetryConfig.max_attempts] times.
    ///
    /// For example, if [min_backoff][google.cloud.tasks.v2beta2.RetryConfig.min_backoff] is 10s,
    /// [max_backoff][google.cloud.tasks.v2beta2.RetryConfig.max_backoff] is 300s, and
    /// `max_doublings` is 3, then the a task will first be retried in
    /// 10s. The retry interval will double three times, and then
    /// increase linearly by 2^3 * 10s.  Finally, the task will retry at
    /// intervals of [max_backoff][google.cloud.tasks.v2beta2.RetryConfig.max_backoff] until the
    /// task has been attempted [max_attempts][google.cloud.tasks.v2beta2.RetryConfig.max_attempts]
    /// times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s,
    /// 240s, 300s, 300s, ....
    ///
    /// If unspecified when the queue is created, Cloud Tasks will pick the
    /// default.
    ///
    /// This field is output only for [pull queues][google.cloud.tasks.v2beta2.PullTarget].
    ///
    /// This field has the same meaning as
    /// [max_doublings in
    /// queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxDoublings {
      get { return maxDoublings_; }
      set {
        maxDoublings_ = value;
      }
    }

    private object numAttempts_;
    /// <summary>Enum of possible cases for the "num_attempts" oneof.</summary>
    public enum NumAttemptsOneofCase {
      None = 0,
      MaxAttempts = 1,
      UnlimitedAttempts = 2,
    }
    private NumAttemptsOneofCase numAttemptsCase_ = NumAttemptsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NumAttemptsOneofCase NumAttemptsCase {
      get { return numAttemptsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNumAttempts() {
      numAttemptsCase_ = NumAttemptsOneofCase.None;
      numAttempts_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RetryConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RetryConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxAttempts != other.MaxAttempts) return false;
      if (UnlimitedAttempts != other.UnlimitedAttempts) return false;
      if (!object.Equals(MaxRetryDuration, other.MaxRetryDuration)) return false;
      if (!object.Equals(MinBackoff, other.MinBackoff)) return false;
      if (!object.Equals(MaxBackoff, other.MaxBackoff)) return false;
      if (MaxDoublings != other.MaxDoublings) return false;
      if (NumAttemptsCase != other.NumAttemptsCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (numAttemptsCase_ == NumAttemptsOneofCase.MaxAttempts) hash ^= MaxAttempts.GetHashCode();
      if (numAttemptsCase_ == NumAttemptsOneofCase.UnlimitedAttempts) hash ^= UnlimitedAttempts.GetHashCode();
      if (maxRetryDuration_ != null) hash ^= MaxRetryDuration.GetHashCode();
      if (minBackoff_ != null) hash ^= MinBackoff.GetHashCode();
      if (maxBackoff_ != null) hash ^= MaxBackoff.GetHashCode();
      if (MaxDoublings != 0) hash ^= MaxDoublings.GetHashCode();
      hash ^= (int) numAttemptsCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (numAttemptsCase_ == NumAttemptsOneofCase.MaxAttempts) {
        output.WriteRawTag(8);
        output.WriteInt32(MaxAttempts);
      }
      if (numAttemptsCase_ == NumAttemptsOneofCase.UnlimitedAttempts) {
        output.WriteRawTag(16);
        output.WriteBool(UnlimitedAttempts);
      }
      if (maxRetryDuration_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MaxRetryDuration);
      }
      if (minBackoff_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MinBackoff);
      }
      if (maxBackoff_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(MaxBackoff);
      }
      if (MaxDoublings != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxDoublings);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (numAttemptsCase_ == NumAttemptsOneofCase.MaxAttempts) {
        output.WriteRawTag(8);
        output.WriteInt32(MaxAttempts);
      }
      if (numAttemptsCase_ == NumAttemptsOneofCase.UnlimitedAttempts) {
        output.WriteRawTag(16);
        output.WriteBool(UnlimitedAttempts);
      }
      if (maxRetryDuration_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MaxRetryDuration);
      }
      if (minBackoff_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MinBackoff);
      }
      if (maxBackoff_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(MaxBackoff);
      }
      if (MaxDoublings != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxDoublings);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (numAttemptsCase_ == NumAttemptsOneofCase.MaxAttempts) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxAttempts);
      }
      if (numAttemptsCase_ == NumAttemptsOneofCase.UnlimitedAttempts) {
        size += 1 + 1;
      }
      if (maxRetryDuration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxRetryDuration);
      }
      if (minBackoff_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinBackoff);
      }
      if (maxBackoff_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxBackoff);
      }
      if (MaxDoublings != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxDoublings);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RetryConfig other) {
      if (other == null) {
        return;
      }
      if (other.maxRetryDuration_ != null) {
        if (maxRetryDuration_ == null) {
          MaxRetryDuration = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        MaxRetryDuration.MergeFrom(other.MaxRetryDuration);
      }
      if (other.minBackoff_ != null) {
        if (minBackoff_ == null) {
          MinBackoff = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        MinBackoff.MergeFrom(other.MinBackoff);
      }
      if (other.maxBackoff_ != null) {
        if (maxBackoff_ == null) {
          MaxBackoff = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        MaxBackoff.MergeFrom(other.MaxBackoff);
      }
      if (other.MaxDoublings != 0) {
        MaxDoublings = other.MaxDoublings;
      }
      switch (other.NumAttemptsCase) {
        case NumAttemptsOneofCase.MaxAttempts:
          MaxAttempts = other.MaxAttempts;
          break;
        case NumAttemptsOneofCase.UnlimitedAttempts:
          UnlimitedAttempts = other.UnlimitedAttempts;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaxAttempts = input.ReadInt32();
            break;
          }
          case 16: {
            UnlimitedAttempts = input.ReadBool();
            break;
          }
          case 26: {
            if (maxRetryDuration_ == null) {
              MaxRetryDuration = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(MaxRetryDuration);
            break;
          }
          case 34: {
            if (minBackoff_ == null) {
              MinBackoff = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(MinBackoff);
            break;
          }
          case 42: {
            if (maxBackoff_ == null) {
              MaxBackoff = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(MaxBackoff);
            break;
          }
          case 48: {
            MaxDoublings = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MaxAttempts = input.ReadInt32();
            break;
          }
          case 16: {
            UnlimitedAttempts = input.ReadBool();
            break;
          }
          case 26: {
            if (maxRetryDuration_ == null) {
              MaxRetryDuration = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(MaxRetryDuration);
            break;
          }
          case 34: {
            if (minBackoff_ == null) {
              MinBackoff = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(MinBackoff);
            break;
          }
          case 42: {
            if (maxBackoff_ == null) {
              MaxBackoff = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(MaxBackoff);
            break;
          }
          case 48: {
            MaxDoublings = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Statistics for a queue.
  /// </summary>
  public sealed partial class QueueStats : pb::IMessage<QueueStats>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<QueueStats> _parser = new pb::MessageParser<QueueStats>(() => new QueueStats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueueStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Tasks.V2Beta2.QueueReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueueStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueueStats(QueueStats other) : this() {
      tasksCount_ = other.tasksCount_;
      oldestEstimatedArrivalTime_ = other.oldestEstimatedArrivalTime_ != null ? other.oldestEstimatedArrivalTime_.Clone() : null;
      executedLastMinuteCount_ = other.executedLastMinuteCount_;
      concurrentDispatchesCount_ = other.concurrentDispatchesCount_;
      effectiveExecutionRate_ = other.effectiveExecutionRate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueueStats Clone() {
      return new QueueStats(this);
    }

    /// <summary>Field number for the "tasks_count" field.</summary>
    public const int TasksCountFieldNumber = 1;
    private long tasksCount_;
    /// <summary>
    /// Output only. An estimation of the number of tasks in the queue, that is, the tasks in
    /// the queue that haven't been executed, the tasks in the queue which the
    /// queue has dispatched but has not yet received a reply for, and the failed
    /// tasks that the queue is retrying.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TasksCount {
      get { return tasksCount_; }
      set {
        tasksCount_ = value;
      }
    }

    /// <summary>Field number for the "oldest_estimated_arrival_time" field.</summary>
    public const int OldestEstimatedArrivalTimeFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp oldestEstimatedArrivalTime_;
    /// <summary>
    /// Output only. An estimation of the nearest time in the future where a task in the queue
    /// is scheduled to be executed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp OldestEstimatedArrivalTime {
      get { return oldestEstimatedArrivalTime_; }
      set {
        oldestEstimatedArrivalTime_ = value;
      }
    }

    /// <summary>Field number for the "executed_last_minute_count" field.</summary>
    public const int ExecutedLastMinuteCountFieldNumber = 3;
    private long executedLastMinuteCount_;
    /// <summary>
    /// Output only. The number of tasks that the queue has dispatched and received a reply for
    /// during the last minute. This variable counts both successful and
    /// non-successful executions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExecutedLastMinuteCount {
      get { return executedLastMinuteCount_; }
      set {
        executedLastMinuteCount_ = value;
      }
    }

    /// <summary>Field number for the "concurrent_dispatches_count" field.</summary>
    public const int ConcurrentDispatchesCountFieldNumber = 4;
    private long concurrentDispatchesCount_;
    /// <summary>
    /// Output only. The number of requests that the queue has dispatched but has not received
    /// a reply for yet.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ConcurrentDispatchesCount {
      get { return concurrentDispatchesCount_; }
      set {
        concurrentDispatchesCount_ = value;
      }
    }

    /// <summary>Field number for the "effective_execution_rate" field.</summary>
    public const int EffectiveExecutionRateFieldNumber = 5;
    private double effectiveExecutionRate_;
    /// <summary>
    /// Output only. The current maximum number of tasks per second executed by the queue.
    /// The maximum value of this variable is controlled by the RateLimits of the
    /// Queue. However, this value could be less to avoid overloading the endpoints
    /// tasks in the queue are targeting.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EffectiveExecutionRate {
      get { return effectiveExecutionRate_; }
      set {
        effectiveExecutionRate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueueStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueueStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TasksCount != other.TasksCount) return false;
      if (!object.Equals(OldestEstimatedArrivalTime, other.OldestEstimatedArrivalTime)) return false;
      if (ExecutedLastMinuteCount != other.ExecutedLastMinuteCount) return false;
      if (ConcurrentDispatchesCount != other.ConcurrentDispatchesCount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EffectiveExecutionRate, other.EffectiveExecutionRate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TasksCount != 0L) hash ^= TasksCount.GetHashCode();
      if (oldestEstimatedArrivalTime_ != null) hash ^= OldestEstimatedArrivalTime.GetHashCode();
      if (ExecutedLastMinuteCount != 0L) hash ^= ExecutedLastMinuteCount.GetHashCode();
      if (ConcurrentDispatchesCount != 0L) hash ^= ConcurrentDispatchesCount.GetHashCode();
      if (EffectiveExecutionRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EffectiveExecutionRate);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TasksCount != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TasksCount);
      }
      if (oldestEstimatedArrivalTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OldestEstimatedArrivalTime);
      }
      if (ExecutedLastMinuteCount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ExecutedLastMinuteCount);
      }
      if (ConcurrentDispatchesCount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ConcurrentDispatchesCount);
      }
      if (EffectiveExecutionRate != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(EffectiveExecutionRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TasksCount != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TasksCount);
      }
      if (oldestEstimatedArrivalTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OldestEstimatedArrivalTime);
      }
      if (ExecutedLastMinuteCount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ExecutedLastMinuteCount);
      }
      if (ConcurrentDispatchesCount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ConcurrentDispatchesCount);
      }
      if (EffectiveExecutionRate != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(EffectiveExecutionRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TasksCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TasksCount);
      }
      if (oldestEstimatedArrivalTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OldestEstimatedArrivalTime);
      }
      if (ExecutedLastMinuteCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExecutedLastMinuteCount);
      }
      if (ConcurrentDispatchesCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConcurrentDispatchesCount);
      }
      if (EffectiveExecutionRate != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueueStats other) {
      if (other == null) {
        return;
      }
      if (other.TasksCount != 0L) {
        TasksCount = other.TasksCount;
      }
      if (other.oldestEstimatedArrivalTime_ != null) {
        if (oldestEstimatedArrivalTime_ == null) {
          OldestEstimatedArrivalTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        OldestEstimatedArrivalTime.MergeFrom(other.OldestEstimatedArrivalTime);
      }
      if (other.ExecutedLastMinuteCount != 0L) {
        ExecutedLastMinuteCount = other.ExecutedLastMinuteCount;
      }
      if (other.ConcurrentDispatchesCount != 0L) {
        ConcurrentDispatchesCount = other.ConcurrentDispatchesCount;
      }
      if (other.EffectiveExecutionRate != 0D) {
        EffectiveExecutionRate = other.EffectiveExecutionRate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TasksCount = input.ReadInt64();
            break;
          }
          case 18: {
            if (oldestEstimatedArrivalTime_ == null) {
              OldestEstimatedArrivalTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(OldestEstimatedArrivalTime);
            break;
          }
          case 24: {
            ExecutedLastMinuteCount = input.ReadInt64();
            break;
          }
          case 32: {
            ConcurrentDispatchesCount = input.ReadInt64();
            break;
          }
          case 41: {
            EffectiveExecutionRate = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TasksCount = input.ReadInt64();
            break;
          }
          case 18: {
            if (oldestEstimatedArrivalTime_ == null) {
              OldestEstimatedArrivalTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(OldestEstimatedArrivalTime);
            break;
          }
          case 24: {
            ExecutedLastMinuteCount = input.ReadInt64();
            break;
          }
          case 32: {
            ConcurrentDispatchesCount = input.ReadInt64();
            break;
          }
          case 41: {
            EffectiveExecutionRate = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
