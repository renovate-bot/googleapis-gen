// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/gaming/v1/game_server_deployments_service.proto
// </auto-generated>
// Original file comments:
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Gaming.V1 {
  /// <summary>
  /// The game server deployment is used to control the deployment of Agones
  /// fleets.
  /// </summary>
  public static partial class GameServerDeploymentsService
  {
    static readonly string __ServiceName = "google.cloud.gaming.v1.GameServerDeploymentsService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Google.Cloud.Gaming.V1.ListGameServerDeploymentsRequest> __Marshaller_google_cloud_gaming_v1_ListGameServerDeploymentsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Gaming.V1.ListGameServerDeploymentsRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Gaming.V1.ListGameServerDeploymentsResponse> __Marshaller_google_cloud_gaming_v1_ListGameServerDeploymentsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Gaming.V1.ListGameServerDeploymentsResponse.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Gaming.V1.GetGameServerDeploymentRequest> __Marshaller_google_cloud_gaming_v1_GetGameServerDeploymentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Gaming.V1.GetGameServerDeploymentRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Gaming.V1.GameServerDeployment> __Marshaller_google_cloud_gaming_v1_GameServerDeployment = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Gaming.V1.GameServerDeployment.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Gaming.V1.CreateGameServerDeploymentRequest> __Marshaller_google_cloud_gaming_v1_CreateGameServerDeploymentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Gaming.V1.CreateGameServerDeploymentRequest.Parser));
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Gaming.V1.DeleteGameServerDeploymentRequest> __Marshaller_google_cloud_gaming_v1_DeleteGameServerDeploymentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Gaming.V1.DeleteGameServerDeploymentRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Gaming.V1.UpdateGameServerDeploymentRequest> __Marshaller_google_cloud_gaming_v1_UpdateGameServerDeploymentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Gaming.V1.UpdateGameServerDeploymentRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Gaming.V1.GetGameServerDeploymentRolloutRequest> __Marshaller_google_cloud_gaming_v1_GetGameServerDeploymentRolloutRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Gaming.V1.GetGameServerDeploymentRolloutRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Gaming.V1.GameServerDeploymentRollout> __Marshaller_google_cloud_gaming_v1_GameServerDeploymentRollout = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Gaming.V1.GameServerDeploymentRollout.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Gaming.V1.UpdateGameServerDeploymentRolloutRequest> __Marshaller_google_cloud_gaming_v1_UpdateGameServerDeploymentRolloutRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Gaming.V1.UpdateGameServerDeploymentRolloutRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Gaming.V1.PreviewGameServerDeploymentRolloutRequest> __Marshaller_google_cloud_gaming_v1_PreviewGameServerDeploymentRolloutRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Gaming.V1.PreviewGameServerDeploymentRolloutRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Gaming.V1.PreviewGameServerDeploymentRolloutResponse> __Marshaller_google_cloud_gaming_v1_PreviewGameServerDeploymentRolloutResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Gaming.V1.PreviewGameServerDeploymentRolloutResponse.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Gaming.V1.FetchDeploymentStateRequest> __Marshaller_google_cloud_gaming_v1_FetchDeploymentStateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Gaming.V1.FetchDeploymentStateRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Gaming.V1.FetchDeploymentStateResponse> __Marshaller_google_cloud_gaming_v1_FetchDeploymentStateResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Gaming.V1.FetchDeploymentStateResponse.Parser));

    static readonly grpc::Method<global::Google.Cloud.Gaming.V1.ListGameServerDeploymentsRequest, global::Google.Cloud.Gaming.V1.ListGameServerDeploymentsResponse> __Method_ListGameServerDeployments = new grpc::Method<global::Google.Cloud.Gaming.V1.ListGameServerDeploymentsRequest, global::Google.Cloud.Gaming.V1.ListGameServerDeploymentsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListGameServerDeployments",
        __Marshaller_google_cloud_gaming_v1_ListGameServerDeploymentsRequest,
        __Marshaller_google_cloud_gaming_v1_ListGameServerDeploymentsResponse);

    static readonly grpc::Method<global::Google.Cloud.Gaming.V1.GetGameServerDeploymentRequest, global::Google.Cloud.Gaming.V1.GameServerDeployment> __Method_GetGameServerDeployment = new grpc::Method<global::Google.Cloud.Gaming.V1.GetGameServerDeploymentRequest, global::Google.Cloud.Gaming.V1.GameServerDeployment>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGameServerDeployment",
        __Marshaller_google_cloud_gaming_v1_GetGameServerDeploymentRequest,
        __Marshaller_google_cloud_gaming_v1_GameServerDeployment);

    static readonly grpc::Method<global::Google.Cloud.Gaming.V1.CreateGameServerDeploymentRequest, global::Google.LongRunning.Operation> __Method_CreateGameServerDeployment = new grpc::Method<global::Google.Cloud.Gaming.V1.CreateGameServerDeploymentRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateGameServerDeployment",
        __Marshaller_google_cloud_gaming_v1_CreateGameServerDeploymentRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Cloud.Gaming.V1.DeleteGameServerDeploymentRequest, global::Google.LongRunning.Operation> __Method_DeleteGameServerDeployment = new grpc::Method<global::Google.Cloud.Gaming.V1.DeleteGameServerDeploymentRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteGameServerDeployment",
        __Marshaller_google_cloud_gaming_v1_DeleteGameServerDeploymentRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Cloud.Gaming.V1.UpdateGameServerDeploymentRequest, global::Google.LongRunning.Operation> __Method_UpdateGameServerDeployment = new grpc::Method<global::Google.Cloud.Gaming.V1.UpdateGameServerDeploymentRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateGameServerDeployment",
        __Marshaller_google_cloud_gaming_v1_UpdateGameServerDeploymentRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Cloud.Gaming.V1.GetGameServerDeploymentRolloutRequest, global::Google.Cloud.Gaming.V1.GameServerDeploymentRollout> __Method_GetGameServerDeploymentRollout = new grpc::Method<global::Google.Cloud.Gaming.V1.GetGameServerDeploymentRolloutRequest, global::Google.Cloud.Gaming.V1.GameServerDeploymentRollout>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGameServerDeploymentRollout",
        __Marshaller_google_cloud_gaming_v1_GetGameServerDeploymentRolloutRequest,
        __Marshaller_google_cloud_gaming_v1_GameServerDeploymentRollout);

    static readonly grpc::Method<global::Google.Cloud.Gaming.V1.UpdateGameServerDeploymentRolloutRequest, global::Google.LongRunning.Operation> __Method_UpdateGameServerDeploymentRollout = new grpc::Method<global::Google.Cloud.Gaming.V1.UpdateGameServerDeploymentRolloutRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateGameServerDeploymentRollout",
        __Marshaller_google_cloud_gaming_v1_UpdateGameServerDeploymentRolloutRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Cloud.Gaming.V1.PreviewGameServerDeploymentRolloutRequest, global::Google.Cloud.Gaming.V1.PreviewGameServerDeploymentRolloutResponse> __Method_PreviewGameServerDeploymentRollout = new grpc::Method<global::Google.Cloud.Gaming.V1.PreviewGameServerDeploymentRolloutRequest, global::Google.Cloud.Gaming.V1.PreviewGameServerDeploymentRolloutResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PreviewGameServerDeploymentRollout",
        __Marshaller_google_cloud_gaming_v1_PreviewGameServerDeploymentRolloutRequest,
        __Marshaller_google_cloud_gaming_v1_PreviewGameServerDeploymentRolloutResponse);

    static readonly grpc::Method<global::Google.Cloud.Gaming.V1.FetchDeploymentStateRequest, global::Google.Cloud.Gaming.V1.FetchDeploymentStateResponse> __Method_FetchDeploymentState = new grpc::Method<global::Google.Cloud.Gaming.V1.FetchDeploymentStateRequest, global::Google.Cloud.Gaming.V1.FetchDeploymentStateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FetchDeploymentState",
        __Marshaller_google_cloud_gaming_v1_FetchDeploymentStateRequest,
        __Marshaller_google_cloud_gaming_v1_FetchDeploymentStateResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Gaming.V1.GameServerDeploymentsServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of GameServerDeploymentsService</summary>
    [grpc::BindServiceMethod(typeof(GameServerDeploymentsService), "BindService")]
    public abstract partial class GameServerDeploymentsServiceBase
    {
      /// <summary>
      /// Lists game server deployments in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Gaming.V1.ListGameServerDeploymentsResponse> ListGameServerDeployments(global::Google.Cloud.Gaming.V1.ListGameServerDeploymentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets details of a single game server deployment.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Gaming.V1.GameServerDeployment> GetGameServerDeployment(global::Google.Cloud.Gaming.V1.GetGameServerDeploymentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new game server deployment in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateGameServerDeployment(global::Google.Cloud.Gaming.V1.CreateGameServerDeploymentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a single game server deployment.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteGameServerDeployment(global::Google.Cloud.Gaming.V1.DeleteGameServerDeploymentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patches a game server deployment.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateGameServerDeployment(global::Google.Cloud.Gaming.V1.UpdateGameServerDeploymentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets details a single game server deployment rollout.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Gaming.V1.GameServerDeploymentRollout> GetGameServerDeploymentRollout(global::Google.Cloud.Gaming.V1.GetGameServerDeploymentRolloutRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patches a single game server deployment rollout.
      /// The method will not return an error if the update does not affect any
      /// existing realms. For example - if the default_game_server_config is changed
      /// but all existing realms use the override, that is valid. Similarly, if a
      /// non existing realm is explicitly called out in game_server_config_overrides
      /// field, that will also not result in an error.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateGameServerDeploymentRollout(global::Google.Cloud.Gaming.V1.UpdateGameServerDeploymentRolloutRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Previews the game server deployment rollout. This API does not mutate the
      /// rollout resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Gaming.V1.PreviewGameServerDeploymentRolloutResponse> PreviewGameServerDeploymentRollout(global::Google.Cloud.Gaming.V1.PreviewGameServerDeploymentRolloutRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves information about the current state of the game server
      /// deployment. Gathers all the Agones fleets and Agones autoscalers,
      /// including fleets running an older version of the game server deployment.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Gaming.V1.FetchDeploymentStateResponse> FetchDeploymentState(global::Google.Cloud.Gaming.V1.FetchDeploymentStateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GameServerDeploymentsService</summary>
    public partial class GameServerDeploymentsServiceClient : grpc::ClientBase<GameServerDeploymentsServiceClient>
    {
      /// <summary>Creates a new client for GameServerDeploymentsService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GameServerDeploymentsServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GameServerDeploymentsService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GameServerDeploymentsServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GameServerDeploymentsServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GameServerDeploymentsServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Lists game server deployments in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Gaming.V1.ListGameServerDeploymentsResponse ListGameServerDeployments(global::Google.Cloud.Gaming.V1.ListGameServerDeploymentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListGameServerDeployments(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists game server deployments in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Gaming.V1.ListGameServerDeploymentsResponse ListGameServerDeployments(global::Google.Cloud.Gaming.V1.ListGameServerDeploymentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListGameServerDeployments, null, options, request);
      }
      /// <summary>
      /// Lists game server deployments in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Gaming.V1.ListGameServerDeploymentsResponse> ListGameServerDeploymentsAsync(global::Google.Cloud.Gaming.V1.ListGameServerDeploymentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListGameServerDeploymentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists game server deployments in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Gaming.V1.ListGameServerDeploymentsResponse> ListGameServerDeploymentsAsync(global::Google.Cloud.Gaming.V1.ListGameServerDeploymentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListGameServerDeployments, null, options, request);
      }
      /// <summary>
      /// Gets details of a single game server deployment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Gaming.V1.GameServerDeployment GetGameServerDeployment(global::Google.Cloud.Gaming.V1.GetGameServerDeploymentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGameServerDeployment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a single game server deployment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Gaming.V1.GameServerDeployment GetGameServerDeployment(global::Google.Cloud.Gaming.V1.GetGameServerDeploymentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetGameServerDeployment, null, options, request);
      }
      /// <summary>
      /// Gets details of a single game server deployment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Gaming.V1.GameServerDeployment> GetGameServerDeploymentAsync(global::Google.Cloud.Gaming.V1.GetGameServerDeploymentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGameServerDeploymentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a single game server deployment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Gaming.V1.GameServerDeployment> GetGameServerDeploymentAsync(global::Google.Cloud.Gaming.V1.GetGameServerDeploymentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetGameServerDeployment, null, options, request);
      }
      /// <summary>
      /// Creates a new game server deployment in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation CreateGameServerDeployment(global::Google.Cloud.Gaming.V1.CreateGameServerDeploymentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateGameServerDeployment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new game server deployment in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation CreateGameServerDeployment(global::Google.Cloud.Gaming.V1.CreateGameServerDeploymentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateGameServerDeployment, null, options, request);
      }
      /// <summary>
      /// Creates a new game server deployment in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateGameServerDeploymentAsync(global::Google.Cloud.Gaming.V1.CreateGameServerDeploymentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateGameServerDeploymentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new game server deployment in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateGameServerDeploymentAsync(global::Google.Cloud.Gaming.V1.CreateGameServerDeploymentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateGameServerDeployment, null, options, request);
      }
      /// <summary>
      /// Deletes a single game server deployment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation DeleteGameServerDeployment(global::Google.Cloud.Gaming.V1.DeleteGameServerDeploymentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGameServerDeployment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a single game server deployment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation DeleteGameServerDeployment(global::Google.Cloud.Gaming.V1.DeleteGameServerDeploymentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteGameServerDeployment, null, options, request);
      }
      /// <summary>
      /// Deletes a single game server deployment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteGameServerDeploymentAsync(global::Google.Cloud.Gaming.V1.DeleteGameServerDeploymentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGameServerDeploymentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a single game server deployment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteGameServerDeploymentAsync(global::Google.Cloud.Gaming.V1.DeleteGameServerDeploymentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteGameServerDeployment, null, options, request);
      }
      /// <summary>
      /// Patches a game server deployment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation UpdateGameServerDeployment(global::Google.Cloud.Gaming.V1.UpdateGameServerDeploymentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGameServerDeployment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches a game server deployment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation UpdateGameServerDeployment(global::Google.Cloud.Gaming.V1.UpdateGameServerDeploymentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateGameServerDeployment, null, options, request);
      }
      /// <summary>
      /// Patches a game server deployment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateGameServerDeploymentAsync(global::Google.Cloud.Gaming.V1.UpdateGameServerDeploymentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGameServerDeploymentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches a game server deployment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateGameServerDeploymentAsync(global::Google.Cloud.Gaming.V1.UpdateGameServerDeploymentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateGameServerDeployment, null, options, request);
      }
      /// <summary>
      /// Gets details a single game server deployment rollout.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Gaming.V1.GameServerDeploymentRollout GetGameServerDeploymentRollout(global::Google.Cloud.Gaming.V1.GetGameServerDeploymentRolloutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGameServerDeploymentRollout(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details a single game server deployment rollout.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Gaming.V1.GameServerDeploymentRollout GetGameServerDeploymentRollout(global::Google.Cloud.Gaming.V1.GetGameServerDeploymentRolloutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetGameServerDeploymentRollout, null, options, request);
      }
      /// <summary>
      /// Gets details a single game server deployment rollout.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Gaming.V1.GameServerDeploymentRollout> GetGameServerDeploymentRolloutAsync(global::Google.Cloud.Gaming.V1.GetGameServerDeploymentRolloutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGameServerDeploymentRolloutAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details a single game server deployment rollout.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Gaming.V1.GameServerDeploymentRollout> GetGameServerDeploymentRolloutAsync(global::Google.Cloud.Gaming.V1.GetGameServerDeploymentRolloutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetGameServerDeploymentRollout, null, options, request);
      }
      /// <summary>
      /// Patches a single game server deployment rollout.
      /// The method will not return an error if the update does not affect any
      /// existing realms. For example - if the default_game_server_config is changed
      /// but all existing realms use the override, that is valid. Similarly, if a
      /// non existing realm is explicitly called out in game_server_config_overrides
      /// field, that will also not result in an error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation UpdateGameServerDeploymentRollout(global::Google.Cloud.Gaming.V1.UpdateGameServerDeploymentRolloutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGameServerDeploymentRollout(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches a single game server deployment rollout.
      /// The method will not return an error if the update does not affect any
      /// existing realms. For example - if the default_game_server_config is changed
      /// but all existing realms use the override, that is valid. Similarly, if a
      /// non existing realm is explicitly called out in game_server_config_overrides
      /// field, that will also not result in an error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation UpdateGameServerDeploymentRollout(global::Google.Cloud.Gaming.V1.UpdateGameServerDeploymentRolloutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateGameServerDeploymentRollout, null, options, request);
      }
      /// <summary>
      /// Patches a single game server deployment rollout.
      /// The method will not return an error if the update does not affect any
      /// existing realms. For example - if the default_game_server_config is changed
      /// but all existing realms use the override, that is valid. Similarly, if a
      /// non existing realm is explicitly called out in game_server_config_overrides
      /// field, that will also not result in an error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateGameServerDeploymentRolloutAsync(global::Google.Cloud.Gaming.V1.UpdateGameServerDeploymentRolloutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGameServerDeploymentRolloutAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches a single game server deployment rollout.
      /// The method will not return an error if the update does not affect any
      /// existing realms. For example - if the default_game_server_config is changed
      /// but all existing realms use the override, that is valid. Similarly, if a
      /// non existing realm is explicitly called out in game_server_config_overrides
      /// field, that will also not result in an error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateGameServerDeploymentRolloutAsync(global::Google.Cloud.Gaming.V1.UpdateGameServerDeploymentRolloutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateGameServerDeploymentRollout, null, options, request);
      }
      /// <summary>
      /// Previews the game server deployment rollout. This API does not mutate the
      /// rollout resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Gaming.V1.PreviewGameServerDeploymentRolloutResponse PreviewGameServerDeploymentRollout(global::Google.Cloud.Gaming.V1.PreviewGameServerDeploymentRolloutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PreviewGameServerDeploymentRollout(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Previews the game server deployment rollout. This API does not mutate the
      /// rollout resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Gaming.V1.PreviewGameServerDeploymentRolloutResponse PreviewGameServerDeploymentRollout(global::Google.Cloud.Gaming.V1.PreviewGameServerDeploymentRolloutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PreviewGameServerDeploymentRollout, null, options, request);
      }
      /// <summary>
      /// Previews the game server deployment rollout. This API does not mutate the
      /// rollout resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Gaming.V1.PreviewGameServerDeploymentRolloutResponse> PreviewGameServerDeploymentRolloutAsync(global::Google.Cloud.Gaming.V1.PreviewGameServerDeploymentRolloutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PreviewGameServerDeploymentRolloutAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Previews the game server deployment rollout. This API does not mutate the
      /// rollout resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Gaming.V1.PreviewGameServerDeploymentRolloutResponse> PreviewGameServerDeploymentRolloutAsync(global::Google.Cloud.Gaming.V1.PreviewGameServerDeploymentRolloutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PreviewGameServerDeploymentRollout, null, options, request);
      }
      /// <summary>
      /// Retrieves information about the current state of the game server
      /// deployment. Gathers all the Agones fleets and Agones autoscalers,
      /// including fleets running an older version of the game server deployment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Gaming.V1.FetchDeploymentStateResponse FetchDeploymentState(global::Google.Cloud.Gaming.V1.FetchDeploymentStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchDeploymentState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves information about the current state of the game server
      /// deployment. Gathers all the Agones fleets and Agones autoscalers,
      /// including fleets running an older version of the game server deployment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Gaming.V1.FetchDeploymentStateResponse FetchDeploymentState(global::Google.Cloud.Gaming.V1.FetchDeploymentStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FetchDeploymentState, null, options, request);
      }
      /// <summary>
      /// Retrieves information about the current state of the game server
      /// deployment. Gathers all the Agones fleets and Agones autoscalers,
      /// including fleets running an older version of the game server deployment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Gaming.V1.FetchDeploymentStateResponse> FetchDeploymentStateAsync(global::Google.Cloud.Gaming.V1.FetchDeploymentStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchDeploymentStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves information about the current state of the game server
      /// deployment. Gathers all the Agones fleets and Agones autoscalers,
      /// including fleets running an older version of the game server deployment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Gaming.V1.FetchDeploymentStateResponse> FetchDeploymentStateAsync(global::Google.Cloud.Gaming.V1.FetchDeploymentStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FetchDeploymentState, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GameServerDeploymentsServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GameServerDeploymentsServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GameServerDeploymentsServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListGameServerDeployments, serviceImpl.ListGameServerDeployments)
          .AddMethod(__Method_GetGameServerDeployment, serviceImpl.GetGameServerDeployment)
          .AddMethod(__Method_CreateGameServerDeployment, serviceImpl.CreateGameServerDeployment)
          .AddMethod(__Method_DeleteGameServerDeployment, serviceImpl.DeleteGameServerDeployment)
          .AddMethod(__Method_UpdateGameServerDeployment, serviceImpl.UpdateGameServerDeployment)
          .AddMethod(__Method_GetGameServerDeploymentRollout, serviceImpl.GetGameServerDeploymentRollout)
          .AddMethod(__Method_UpdateGameServerDeploymentRollout, serviceImpl.UpdateGameServerDeploymentRollout)
          .AddMethod(__Method_PreviewGameServerDeploymentRollout, serviceImpl.PreviewGameServerDeploymentRollout)
          .AddMethod(__Method_FetchDeploymentState, serviceImpl.FetchDeploymentState).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GameServerDeploymentsServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListGameServerDeployments, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Gaming.V1.ListGameServerDeploymentsRequest, global::Google.Cloud.Gaming.V1.ListGameServerDeploymentsResponse>(serviceImpl.ListGameServerDeployments));
      serviceBinder.AddMethod(__Method_GetGameServerDeployment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Gaming.V1.GetGameServerDeploymentRequest, global::Google.Cloud.Gaming.V1.GameServerDeployment>(serviceImpl.GetGameServerDeployment));
      serviceBinder.AddMethod(__Method_CreateGameServerDeployment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Gaming.V1.CreateGameServerDeploymentRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateGameServerDeployment));
      serviceBinder.AddMethod(__Method_DeleteGameServerDeployment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Gaming.V1.DeleteGameServerDeploymentRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteGameServerDeployment));
      serviceBinder.AddMethod(__Method_UpdateGameServerDeployment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Gaming.V1.UpdateGameServerDeploymentRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateGameServerDeployment));
      serviceBinder.AddMethod(__Method_GetGameServerDeploymentRollout, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Gaming.V1.GetGameServerDeploymentRolloutRequest, global::Google.Cloud.Gaming.V1.GameServerDeploymentRollout>(serviceImpl.GetGameServerDeploymentRollout));
      serviceBinder.AddMethod(__Method_UpdateGameServerDeploymentRollout, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Gaming.V1.UpdateGameServerDeploymentRolloutRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateGameServerDeploymentRollout));
      serviceBinder.AddMethod(__Method_PreviewGameServerDeploymentRollout, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Gaming.V1.PreviewGameServerDeploymentRolloutRequest, global::Google.Cloud.Gaming.V1.PreviewGameServerDeploymentRolloutResponse>(serviceImpl.PreviewGameServerDeploymentRollout));
      serviceBinder.AddMethod(__Method_FetchDeploymentState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Gaming.V1.FetchDeploymentStateRequest, global::Google.Cloud.Gaming.V1.FetchDeploymentStateResponse>(serviceImpl.FetchDeploymentState));
    }

  }
}
#endregion
