// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/gaming/v1/game_server_clusters_service.proto
// </auto-generated>
// Original file comments:
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Gaming.V1 {
  /// <summary>
  /// The game server cluster maps to Kubernetes clusters running Agones and is
  /// used to manage fleets within clusters.
  /// </summary>
  public static partial class GameServerClustersService
  {
    static readonly string __ServiceName = "google.cloud.gaming.v1.GameServerClustersService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Gaming.V1.ListGameServerClustersRequest> __Marshaller_google_cloud_gaming_v1_ListGameServerClustersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Gaming.V1.ListGameServerClustersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Gaming.V1.ListGameServerClustersResponse> __Marshaller_google_cloud_gaming_v1_ListGameServerClustersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Gaming.V1.ListGameServerClustersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Gaming.V1.GetGameServerClusterRequest> __Marshaller_google_cloud_gaming_v1_GetGameServerClusterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Gaming.V1.GetGameServerClusterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Gaming.V1.GameServerCluster> __Marshaller_google_cloud_gaming_v1_GameServerCluster = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Gaming.V1.GameServerCluster.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Gaming.V1.CreateGameServerClusterRequest> __Marshaller_google_cloud_gaming_v1_CreateGameServerClusterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Gaming.V1.CreateGameServerClusterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Gaming.V1.PreviewCreateGameServerClusterRequest> __Marshaller_google_cloud_gaming_v1_PreviewCreateGameServerClusterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Gaming.V1.PreviewCreateGameServerClusterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Gaming.V1.PreviewCreateGameServerClusterResponse> __Marshaller_google_cloud_gaming_v1_PreviewCreateGameServerClusterResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Gaming.V1.PreviewCreateGameServerClusterResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Gaming.V1.DeleteGameServerClusterRequest> __Marshaller_google_cloud_gaming_v1_DeleteGameServerClusterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Gaming.V1.DeleteGameServerClusterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Gaming.V1.PreviewDeleteGameServerClusterRequest> __Marshaller_google_cloud_gaming_v1_PreviewDeleteGameServerClusterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Gaming.V1.PreviewDeleteGameServerClusterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Gaming.V1.PreviewDeleteGameServerClusterResponse> __Marshaller_google_cloud_gaming_v1_PreviewDeleteGameServerClusterResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Gaming.V1.PreviewDeleteGameServerClusterResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Gaming.V1.UpdateGameServerClusterRequest> __Marshaller_google_cloud_gaming_v1_UpdateGameServerClusterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Gaming.V1.UpdateGameServerClusterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Gaming.V1.PreviewUpdateGameServerClusterRequest> __Marshaller_google_cloud_gaming_v1_PreviewUpdateGameServerClusterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Gaming.V1.PreviewUpdateGameServerClusterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Gaming.V1.PreviewUpdateGameServerClusterResponse> __Marshaller_google_cloud_gaming_v1_PreviewUpdateGameServerClusterResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Gaming.V1.PreviewUpdateGameServerClusterResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Gaming.V1.ListGameServerClustersRequest, global::Google.Cloud.Gaming.V1.ListGameServerClustersResponse> __Method_ListGameServerClusters = new grpc::Method<global::Google.Cloud.Gaming.V1.ListGameServerClustersRequest, global::Google.Cloud.Gaming.V1.ListGameServerClustersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListGameServerClusters",
        __Marshaller_google_cloud_gaming_v1_ListGameServerClustersRequest,
        __Marshaller_google_cloud_gaming_v1_ListGameServerClustersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Gaming.V1.GetGameServerClusterRequest, global::Google.Cloud.Gaming.V1.GameServerCluster> __Method_GetGameServerCluster = new grpc::Method<global::Google.Cloud.Gaming.V1.GetGameServerClusterRequest, global::Google.Cloud.Gaming.V1.GameServerCluster>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGameServerCluster",
        __Marshaller_google_cloud_gaming_v1_GetGameServerClusterRequest,
        __Marshaller_google_cloud_gaming_v1_GameServerCluster);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Gaming.V1.CreateGameServerClusterRequest, global::Google.LongRunning.Operation> __Method_CreateGameServerCluster = new grpc::Method<global::Google.Cloud.Gaming.V1.CreateGameServerClusterRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateGameServerCluster",
        __Marshaller_google_cloud_gaming_v1_CreateGameServerClusterRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Gaming.V1.PreviewCreateGameServerClusterRequest, global::Google.Cloud.Gaming.V1.PreviewCreateGameServerClusterResponse> __Method_PreviewCreateGameServerCluster = new grpc::Method<global::Google.Cloud.Gaming.V1.PreviewCreateGameServerClusterRequest, global::Google.Cloud.Gaming.V1.PreviewCreateGameServerClusterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PreviewCreateGameServerCluster",
        __Marshaller_google_cloud_gaming_v1_PreviewCreateGameServerClusterRequest,
        __Marshaller_google_cloud_gaming_v1_PreviewCreateGameServerClusterResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Gaming.V1.DeleteGameServerClusterRequest, global::Google.LongRunning.Operation> __Method_DeleteGameServerCluster = new grpc::Method<global::Google.Cloud.Gaming.V1.DeleteGameServerClusterRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteGameServerCluster",
        __Marshaller_google_cloud_gaming_v1_DeleteGameServerClusterRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Gaming.V1.PreviewDeleteGameServerClusterRequest, global::Google.Cloud.Gaming.V1.PreviewDeleteGameServerClusterResponse> __Method_PreviewDeleteGameServerCluster = new grpc::Method<global::Google.Cloud.Gaming.V1.PreviewDeleteGameServerClusterRequest, global::Google.Cloud.Gaming.V1.PreviewDeleteGameServerClusterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PreviewDeleteGameServerCluster",
        __Marshaller_google_cloud_gaming_v1_PreviewDeleteGameServerClusterRequest,
        __Marshaller_google_cloud_gaming_v1_PreviewDeleteGameServerClusterResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Gaming.V1.UpdateGameServerClusterRequest, global::Google.LongRunning.Operation> __Method_UpdateGameServerCluster = new grpc::Method<global::Google.Cloud.Gaming.V1.UpdateGameServerClusterRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateGameServerCluster",
        __Marshaller_google_cloud_gaming_v1_UpdateGameServerClusterRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Gaming.V1.PreviewUpdateGameServerClusterRequest, global::Google.Cloud.Gaming.V1.PreviewUpdateGameServerClusterResponse> __Method_PreviewUpdateGameServerCluster = new grpc::Method<global::Google.Cloud.Gaming.V1.PreviewUpdateGameServerClusterRequest, global::Google.Cloud.Gaming.V1.PreviewUpdateGameServerClusterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PreviewUpdateGameServerCluster",
        __Marshaller_google_cloud_gaming_v1_PreviewUpdateGameServerClusterRequest,
        __Marshaller_google_cloud_gaming_v1_PreviewUpdateGameServerClusterResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Gaming.V1.GameServerClustersServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of GameServerClustersService</summary>
    [grpc::BindServiceMethod(typeof(GameServerClustersService), "BindService")]
    public abstract partial class GameServerClustersServiceBase
    {
      /// <summary>
      /// Lists game server clusters in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Gaming.V1.ListGameServerClustersResponse> ListGameServerClusters(global::Google.Cloud.Gaming.V1.ListGameServerClustersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets details of a single game server cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Gaming.V1.GameServerCluster> GetGameServerCluster(global::Google.Cloud.Gaming.V1.GetGameServerClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new game server cluster in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateGameServerCluster(global::Google.Cloud.Gaming.V1.CreateGameServerClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Previews creation of a new game server cluster in a given project and
      /// location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Gaming.V1.PreviewCreateGameServerClusterResponse> PreviewCreateGameServerCluster(global::Google.Cloud.Gaming.V1.PreviewCreateGameServerClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a single game server cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteGameServerCluster(global::Google.Cloud.Gaming.V1.DeleteGameServerClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Previews deletion of a single game server cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Gaming.V1.PreviewDeleteGameServerClusterResponse> PreviewDeleteGameServerCluster(global::Google.Cloud.Gaming.V1.PreviewDeleteGameServerClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patches a single game server cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateGameServerCluster(global::Google.Cloud.Gaming.V1.UpdateGameServerClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Previews updating a GameServerCluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Gaming.V1.PreviewUpdateGameServerClusterResponse> PreviewUpdateGameServerCluster(global::Google.Cloud.Gaming.V1.PreviewUpdateGameServerClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GameServerClustersService</summary>
    public partial class GameServerClustersServiceClient : grpc::ClientBase<GameServerClustersServiceClient>
    {
      /// <summary>Creates a new client for GameServerClustersService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public GameServerClustersServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GameServerClustersService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public GameServerClustersServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected GameServerClustersServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected GameServerClustersServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Lists game server clusters in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Gaming.V1.ListGameServerClustersResponse ListGameServerClusters(global::Google.Cloud.Gaming.V1.ListGameServerClustersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListGameServerClusters(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists game server clusters in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Gaming.V1.ListGameServerClustersResponse ListGameServerClusters(global::Google.Cloud.Gaming.V1.ListGameServerClustersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListGameServerClusters, null, options, request);
      }
      /// <summary>
      /// Lists game server clusters in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Gaming.V1.ListGameServerClustersResponse> ListGameServerClustersAsync(global::Google.Cloud.Gaming.V1.ListGameServerClustersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListGameServerClustersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists game server clusters in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Gaming.V1.ListGameServerClustersResponse> ListGameServerClustersAsync(global::Google.Cloud.Gaming.V1.ListGameServerClustersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListGameServerClusters, null, options, request);
      }
      /// <summary>
      /// Gets details of a single game server cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Gaming.V1.GameServerCluster GetGameServerCluster(global::Google.Cloud.Gaming.V1.GetGameServerClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGameServerCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a single game server cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Gaming.V1.GameServerCluster GetGameServerCluster(global::Google.Cloud.Gaming.V1.GetGameServerClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetGameServerCluster, null, options, request);
      }
      /// <summary>
      /// Gets details of a single game server cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Gaming.V1.GameServerCluster> GetGameServerClusterAsync(global::Google.Cloud.Gaming.V1.GetGameServerClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGameServerClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a single game server cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Gaming.V1.GameServerCluster> GetGameServerClusterAsync(global::Google.Cloud.Gaming.V1.GetGameServerClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetGameServerCluster, null, options, request);
      }
      /// <summary>
      /// Creates a new game server cluster in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateGameServerCluster(global::Google.Cloud.Gaming.V1.CreateGameServerClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateGameServerCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new game server cluster in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateGameServerCluster(global::Google.Cloud.Gaming.V1.CreateGameServerClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateGameServerCluster, null, options, request);
      }
      /// <summary>
      /// Creates a new game server cluster in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateGameServerClusterAsync(global::Google.Cloud.Gaming.V1.CreateGameServerClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateGameServerClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new game server cluster in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateGameServerClusterAsync(global::Google.Cloud.Gaming.V1.CreateGameServerClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateGameServerCluster, null, options, request);
      }
      /// <summary>
      /// Previews creation of a new game server cluster in a given project and
      /// location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Gaming.V1.PreviewCreateGameServerClusterResponse PreviewCreateGameServerCluster(global::Google.Cloud.Gaming.V1.PreviewCreateGameServerClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PreviewCreateGameServerCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Previews creation of a new game server cluster in a given project and
      /// location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Gaming.V1.PreviewCreateGameServerClusterResponse PreviewCreateGameServerCluster(global::Google.Cloud.Gaming.V1.PreviewCreateGameServerClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PreviewCreateGameServerCluster, null, options, request);
      }
      /// <summary>
      /// Previews creation of a new game server cluster in a given project and
      /// location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Gaming.V1.PreviewCreateGameServerClusterResponse> PreviewCreateGameServerClusterAsync(global::Google.Cloud.Gaming.V1.PreviewCreateGameServerClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PreviewCreateGameServerClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Previews creation of a new game server cluster in a given project and
      /// location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Gaming.V1.PreviewCreateGameServerClusterResponse> PreviewCreateGameServerClusterAsync(global::Google.Cloud.Gaming.V1.PreviewCreateGameServerClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PreviewCreateGameServerCluster, null, options, request);
      }
      /// <summary>
      /// Deletes a single game server cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteGameServerCluster(global::Google.Cloud.Gaming.V1.DeleteGameServerClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGameServerCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a single game server cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteGameServerCluster(global::Google.Cloud.Gaming.V1.DeleteGameServerClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteGameServerCluster, null, options, request);
      }
      /// <summary>
      /// Deletes a single game server cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteGameServerClusterAsync(global::Google.Cloud.Gaming.V1.DeleteGameServerClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGameServerClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a single game server cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteGameServerClusterAsync(global::Google.Cloud.Gaming.V1.DeleteGameServerClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteGameServerCluster, null, options, request);
      }
      /// <summary>
      /// Previews deletion of a single game server cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Gaming.V1.PreviewDeleteGameServerClusterResponse PreviewDeleteGameServerCluster(global::Google.Cloud.Gaming.V1.PreviewDeleteGameServerClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PreviewDeleteGameServerCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Previews deletion of a single game server cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Gaming.V1.PreviewDeleteGameServerClusterResponse PreviewDeleteGameServerCluster(global::Google.Cloud.Gaming.V1.PreviewDeleteGameServerClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PreviewDeleteGameServerCluster, null, options, request);
      }
      /// <summary>
      /// Previews deletion of a single game server cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Gaming.V1.PreviewDeleteGameServerClusterResponse> PreviewDeleteGameServerClusterAsync(global::Google.Cloud.Gaming.V1.PreviewDeleteGameServerClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PreviewDeleteGameServerClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Previews deletion of a single game server cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Gaming.V1.PreviewDeleteGameServerClusterResponse> PreviewDeleteGameServerClusterAsync(global::Google.Cloud.Gaming.V1.PreviewDeleteGameServerClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PreviewDeleteGameServerCluster, null, options, request);
      }
      /// <summary>
      /// Patches a single game server cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateGameServerCluster(global::Google.Cloud.Gaming.V1.UpdateGameServerClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGameServerCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches a single game server cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateGameServerCluster(global::Google.Cloud.Gaming.V1.UpdateGameServerClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateGameServerCluster, null, options, request);
      }
      /// <summary>
      /// Patches a single game server cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateGameServerClusterAsync(global::Google.Cloud.Gaming.V1.UpdateGameServerClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGameServerClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches a single game server cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateGameServerClusterAsync(global::Google.Cloud.Gaming.V1.UpdateGameServerClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateGameServerCluster, null, options, request);
      }
      /// <summary>
      /// Previews updating a GameServerCluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Gaming.V1.PreviewUpdateGameServerClusterResponse PreviewUpdateGameServerCluster(global::Google.Cloud.Gaming.V1.PreviewUpdateGameServerClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PreviewUpdateGameServerCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Previews updating a GameServerCluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Gaming.V1.PreviewUpdateGameServerClusterResponse PreviewUpdateGameServerCluster(global::Google.Cloud.Gaming.V1.PreviewUpdateGameServerClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PreviewUpdateGameServerCluster, null, options, request);
      }
      /// <summary>
      /// Previews updating a GameServerCluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Gaming.V1.PreviewUpdateGameServerClusterResponse> PreviewUpdateGameServerClusterAsync(global::Google.Cloud.Gaming.V1.PreviewUpdateGameServerClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PreviewUpdateGameServerClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Previews updating a GameServerCluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Gaming.V1.PreviewUpdateGameServerClusterResponse> PreviewUpdateGameServerClusterAsync(global::Google.Cloud.Gaming.V1.PreviewUpdateGameServerClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PreviewUpdateGameServerCluster, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override GameServerClustersServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GameServerClustersServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(GameServerClustersServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListGameServerClusters, serviceImpl.ListGameServerClusters)
          .AddMethod(__Method_GetGameServerCluster, serviceImpl.GetGameServerCluster)
          .AddMethod(__Method_CreateGameServerCluster, serviceImpl.CreateGameServerCluster)
          .AddMethod(__Method_PreviewCreateGameServerCluster, serviceImpl.PreviewCreateGameServerCluster)
          .AddMethod(__Method_DeleteGameServerCluster, serviceImpl.DeleteGameServerCluster)
          .AddMethod(__Method_PreviewDeleteGameServerCluster, serviceImpl.PreviewDeleteGameServerCluster)
          .AddMethod(__Method_UpdateGameServerCluster, serviceImpl.UpdateGameServerCluster)
          .AddMethod(__Method_PreviewUpdateGameServerCluster, serviceImpl.PreviewUpdateGameServerCluster).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GameServerClustersServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListGameServerClusters, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Gaming.V1.ListGameServerClustersRequest, global::Google.Cloud.Gaming.V1.ListGameServerClustersResponse>(serviceImpl.ListGameServerClusters));
      serviceBinder.AddMethod(__Method_GetGameServerCluster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Gaming.V1.GetGameServerClusterRequest, global::Google.Cloud.Gaming.V1.GameServerCluster>(serviceImpl.GetGameServerCluster));
      serviceBinder.AddMethod(__Method_CreateGameServerCluster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Gaming.V1.CreateGameServerClusterRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateGameServerCluster));
      serviceBinder.AddMethod(__Method_PreviewCreateGameServerCluster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Gaming.V1.PreviewCreateGameServerClusterRequest, global::Google.Cloud.Gaming.V1.PreviewCreateGameServerClusterResponse>(serviceImpl.PreviewCreateGameServerCluster));
      serviceBinder.AddMethod(__Method_DeleteGameServerCluster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Gaming.V1.DeleteGameServerClusterRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteGameServerCluster));
      serviceBinder.AddMethod(__Method_PreviewDeleteGameServerCluster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Gaming.V1.PreviewDeleteGameServerClusterRequest, global::Google.Cloud.Gaming.V1.PreviewDeleteGameServerClusterResponse>(serviceImpl.PreviewDeleteGameServerCluster));
      serviceBinder.AddMethod(__Method_UpdateGameServerCluster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Gaming.V1.UpdateGameServerClusterRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateGameServerCluster));
      serviceBinder.AddMethod(__Method_PreviewUpdateGameServerCluster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Gaming.V1.PreviewUpdateGameServerClusterRequest, global::Google.Cloud.Gaming.V1.PreviewUpdateGameServerClusterResponse>(serviceImpl.PreviewUpdateGameServerCluster));
    }

  }
}
#endregion
