// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/security/privateca/v1beta1/service.proto
// </auto-generated>
// Original file comments:
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Security.PrivateCA.V1Beta1 {
  /// <summary>
  /// [Certificate Authority Service][google.cloud.security.privateca.v1beta1.CertificateAuthorityService] manages private
  /// certificate authorities and issued certificates.
  /// </summary>
  public static partial class CertificateAuthorityService
  {
    static readonly string __ServiceName = "google.cloud.security.privateca.v1beta1.CertificateAuthorityService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1Beta1.CreateCertificateRequest> __Marshaller_google_cloud_security_privateca_v1beta1_CreateCertificateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1Beta1.CreateCertificateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate> __Marshaller_google_cloud_security_privateca_v1beta1_Certificate = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1Beta1.GetCertificateRequest> __Marshaller_google_cloud_security_privateca_v1beta1_GetCertificateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1Beta1.GetCertificateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificatesRequest> __Marshaller_google_cloud_security_privateca_v1beta1_ListCertificatesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificatesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificatesResponse> __Marshaller_google_cloud_security_privateca_v1beta1_ListCertificatesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificatesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1Beta1.RevokeCertificateRequest> __Marshaller_google_cloud_security_privateca_v1beta1_RevokeCertificateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1Beta1.RevokeCertificateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1Beta1.UpdateCertificateRequest> __Marshaller_google_cloud_security_privateca_v1beta1_UpdateCertificateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1Beta1.UpdateCertificateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1Beta1.ActivateCertificateAuthorityRequest> __Marshaller_google_cloud_security_privateca_v1beta1_ActivateCertificateAuthorityRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1Beta1.ActivateCertificateAuthorityRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1Beta1.CreateCertificateAuthorityRequest> __Marshaller_google_cloud_security_privateca_v1beta1_CreateCertificateAuthorityRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1Beta1.CreateCertificateAuthorityRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1Beta1.DisableCertificateAuthorityRequest> __Marshaller_google_cloud_security_privateca_v1beta1_DisableCertificateAuthorityRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1Beta1.DisableCertificateAuthorityRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1Beta1.EnableCertificateAuthorityRequest> __Marshaller_google_cloud_security_privateca_v1beta1_EnableCertificateAuthorityRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1Beta1.EnableCertificateAuthorityRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1Beta1.FetchCertificateAuthorityCsrRequest> __Marshaller_google_cloud_security_privateca_v1beta1_FetchCertificateAuthorityCsrRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1Beta1.FetchCertificateAuthorityCsrRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1Beta1.FetchCertificateAuthorityCsrResponse> __Marshaller_google_cloud_security_privateca_v1beta1_FetchCertificateAuthorityCsrResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1Beta1.FetchCertificateAuthorityCsrResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1Beta1.GetCertificateAuthorityRequest> __Marshaller_google_cloud_security_privateca_v1beta1_GetCertificateAuthorityRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1Beta1.GetCertificateAuthorityRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1Beta1.CertificateAuthority> __Marshaller_google_cloud_security_privateca_v1beta1_CertificateAuthority = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1Beta1.CertificateAuthority.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateAuthoritiesRequest> __Marshaller_google_cloud_security_privateca_v1beta1_ListCertificateAuthoritiesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateAuthoritiesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateAuthoritiesResponse> __Marshaller_google_cloud_security_privateca_v1beta1_ListCertificateAuthoritiesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateAuthoritiesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1Beta1.RestoreCertificateAuthorityRequest> __Marshaller_google_cloud_security_privateca_v1beta1_RestoreCertificateAuthorityRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1Beta1.RestoreCertificateAuthorityRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1Beta1.ScheduleDeleteCertificateAuthorityRequest> __Marshaller_google_cloud_security_privateca_v1beta1_ScheduleDeleteCertificateAuthorityRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1Beta1.ScheduleDeleteCertificateAuthorityRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1Beta1.UpdateCertificateAuthorityRequest> __Marshaller_google_cloud_security_privateca_v1beta1_UpdateCertificateAuthorityRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1Beta1.UpdateCertificateAuthorityRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1Beta1.GetCertificateRevocationListRequest> __Marshaller_google_cloud_security_privateca_v1beta1_GetCertificateRevocationListRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1Beta1.GetCertificateRevocationListRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1Beta1.CertificateRevocationList> __Marshaller_google_cloud_security_privateca_v1beta1_CertificateRevocationList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1Beta1.CertificateRevocationList.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateRevocationListsRequest> __Marshaller_google_cloud_security_privateca_v1beta1_ListCertificateRevocationListsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateRevocationListsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateRevocationListsResponse> __Marshaller_google_cloud_security_privateca_v1beta1_ListCertificateRevocationListsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateRevocationListsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1Beta1.UpdateCertificateRevocationListRequest> __Marshaller_google_cloud_security_privateca_v1beta1_UpdateCertificateRevocationListRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1Beta1.UpdateCertificateRevocationListRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1Beta1.GetReusableConfigRequest> __Marshaller_google_cloud_security_privateca_v1beta1_GetReusableConfigRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1Beta1.GetReusableConfigRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1Beta1.ReusableConfig> __Marshaller_google_cloud_security_privateca_v1beta1_ReusableConfig = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1Beta1.ReusableConfig.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListReusableConfigsRequest> __Marshaller_google_cloud_security_privateca_v1beta1_ListReusableConfigsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1Beta1.ListReusableConfigsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListReusableConfigsResponse> __Marshaller_google_cloud_security_privateca_v1beta1_ListReusableConfigsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1Beta1.ListReusableConfigsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.CreateCertificateRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate> __Method_CreateCertificate = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.CreateCertificateRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCertificate",
        __Marshaller_google_cloud_security_privateca_v1beta1_CreateCertificateRequest,
        __Marshaller_google_cloud_security_privateca_v1beta1_Certificate);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.GetCertificateRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate> __Method_GetCertificate = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.GetCertificateRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCertificate",
        __Marshaller_google_cloud_security_privateca_v1beta1_GetCertificateRequest,
        __Marshaller_google_cloud_security_privateca_v1beta1_Certificate);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificatesRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificatesResponse> __Method_ListCertificates = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificatesRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificatesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCertificates",
        __Marshaller_google_cloud_security_privateca_v1beta1_ListCertificatesRequest,
        __Marshaller_google_cloud_security_privateca_v1beta1_ListCertificatesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.RevokeCertificateRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate> __Method_RevokeCertificate = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.RevokeCertificateRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RevokeCertificate",
        __Marshaller_google_cloud_security_privateca_v1beta1_RevokeCertificateRequest,
        __Marshaller_google_cloud_security_privateca_v1beta1_Certificate);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.UpdateCertificateRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate> __Method_UpdateCertificate = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.UpdateCertificateRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCertificate",
        __Marshaller_google_cloud_security_privateca_v1beta1_UpdateCertificateRequest,
        __Marshaller_google_cloud_security_privateca_v1beta1_Certificate);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.ActivateCertificateAuthorityRequest, global::Google.LongRunning.Operation> __Method_ActivateCertificateAuthority = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.ActivateCertificateAuthorityRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ActivateCertificateAuthority",
        __Marshaller_google_cloud_security_privateca_v1beta1_ActivateCertificateAuthorityRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.CreateCertificateAuthorityRequest, global::Google.LongRunning.Operation> __Method_CreateCertificateAuthority = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.CreateCertificateAuthorityRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCertificateAuthority",
        __Marshaller_google_cloud_security_privateca_v1beta1_CreateCertificateAuthorityRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.DisableCertificateAuthorityRequest, global::Google.LongRunning.Operation> __Method_DisableCertificateAuthority = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.DisableCertificateAuthorityRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DisableCertificateAuthority",
        __Marshaller_google_cloud_security_privateca_v1beta1_DisableCertificateAuthorityRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.EnableCertificateAuthorityRequest, global::Google.LongRunning.Operation> __Method_EnableCertificateAuthority = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.EnableCertificateAuthorityRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EnableCertificateAuthority",
        __Marshaller_google_cloud_security_privateca_v1beta1_EnableCertificateAuthorityRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.FetchCertificateAuthorityCsrRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.FetchCertificateAuthorityCsrResponse> __Method_FetchCertificateAuthorityCsr = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.FetchCertificateAuthorityCsrRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.FetchCertificateAuthorityCsrResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FetchCertificateAuthorityCsr",
        __Marshaller_google_cloud_security_privateca_v1beta1_FetchCertificateAuthorityCsrRequest,
        __Marshaller_google_cloud_security_privateca_v1beta1_FetchCertificateAuthorityCsrResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.GetCertificateAuthorityRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.CertificateAuthority> __Method_GetCertificateAuthority = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.GetCertificateAuthorityRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.CertificateAuthority>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCertificateAuthority",
        __Marshaller_google_cloud_security_privateca_v1beta1_GetCertificateAuthorityRequest,
        __Marshaller_google_cloud_security_privateca_v1beta1_CertificateAuthority);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateAuthoritiesRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateAuthoritiesResponse> __Method_ListCertificateAuthorities = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateAuthoritiesRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateAuthoritiesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCertificateAuthorities",
        __Marshaller_google_cloud_security_privateca_v1beta1_ListCertificateAuthoritiesRequest,
        __Marshaller_google_cloud_security_privateca_v1beta1_ListCertificateAuthoritiesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.RestoreCertificateAuthorityRequest, global::Google.LongRunning.Operation> __Method_RestoreCertificateAuthority = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.RestoreCertificateAuthorityRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RestoreCertificateAuthority",
        __Marshaller_google_cloud_security_privateca_v1beta1_RestoreCertificateAuthorityRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.ScheduleDeleteCertificateAuthorityRequest, global::Google.LongRunning.Operation> __Method_ScheduleDeleteCertificateAuthority = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.ScheduleDeleteCertificateAuthorityRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ScheduleDeleteCertificateAuthority",
        __Marshaller_google_cloud_security_privateca_v1beta1_ScheduleDeleteCertificateAuthorityRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.UpdateCertificateAuthorityRequest, global::Google.LongRunning.Operation> __Method_UpdateCertificateAuthority = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.UpdateCertificateAuthorityRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCertificateAuthority",
        __Marshaller_google_cloud_security_privateca_v1beta1_UpdateCertificateAuthorityRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.GetCertificateRevocationListRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.CertificateRevocationList> __Method_GetCertificateRevocationList = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.GetCertificateRevocationListRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.CertificateRevocationList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCertificateRevocationList",
        __Marshaller_google_cloud_security_privateca_v1beta1_GetCertificateRevocationListRequest,
        __Marshaller_google_cloud_security_privateca_v1beta1_CertificateRevocationList);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateRevocationListsRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateRevocationListsResponse> __Method_ListCertificateRevocationLists = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateRevocationListsRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateRevocationListsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCertificateRevocationLists",
        __Marshaller_google_cloud_security_privateca_v1beta1_ListCertificateRevocationListsRequest,
        __Marshaller_google_cloud_security_privateca_v1beta1_ListCertificateRevocationListsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.UpdateCertificateRevocationListRequest, global::Google.LongRunning.Operation> __Method_UpdateCertificateRevocationList = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.UpdateCertificateRevocationListRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCertificateRevocationList",
        __Marshaller_google_cloud_security_privateca_v1beta1_UpdateCertificateRevocationListRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.GetReusableConfigRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.ReusableConfig> __Method_GetReusableConfig = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.GetReusableConfigRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.ReusableConfig>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetReusableConfig",
        __Marshaller_google_cloud_security_privateca_v1beta1_GetReusableConfigRequest,
        __Marshaller_google_cloud_security_privateca_v1beta1_ReusableConfig);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListReusableConfigsRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.ListReusableConfigsResponse> __Method_ListReusableConfigs = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListReusableConfigsRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.ListReusableConfigsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListReusableConfigs",
        __Marshaller_google_cloud_security_privateca_v1beta1_ListReusableConfigsRequest,
        __Marshaller_google_cloud_security_privateca_v1beta1_ListReusableConfigsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Security.PrivateCA.V1Beta1.ServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CertificateAuthorityService</summary>
    [grpc::BindServiceMethod(typeof(CertificateAuthorityService), "BindService")]
    public abstract partial class CertificateAuthorityServiceBase
    {
      /// <summary>
      /// Create a new [Certificate][google.cloud.security.privateca.v1beta1.Certificate] in a given Project, Location from a particular
      /// [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate> CreateCertificate(global::Google.Cloud.Security.PrivateCA.V1Beta1.CreateCertificateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a [Certificate][google.cloud.security.privateca.v1beta1.Certificate].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate> GetCertificate(global::Google.Cloud.Security.PrivateCA.V1Beta1.GetCertificateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists [Certificates][google.cloud.security.privateca.v1beta1.Certificate].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificatesResponse> ListCertificates(global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificatesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Revoke a [Certificate][google.cloud.security.privateca.v1beta1.Certificate].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate> RevokeCertificate(global::Google.Cloud.Security.PrivateCA.V1Beta1.RevokeCertificateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update a [Certificate][google.cloud.security.privateca.v1beta1.Certificate]. Currently, the only field you can update is the
      /// [labels][google.cloud.security.privateca.v1beta1.Certificate.labels] field.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate> UpdateCertificate(global::Google.Cloud.Security.PrivateCA.V1Beta1.UpdateCertificateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Activate a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] that is in state
      /// [PENDING_ACTIVATION][google.cloud.security.privateca.v1beta1.CertificateAuthority.State.PENDING_ACTIVATION] and is
      /// of type [SUBORDINATE][google.cloud.security.privateca.v1beta1.CertificateAuthority.Type.SUBORDINATE]. After the
      /// parent Certificate Authority signs a certificate signing request from
      /// [FetchCertificateAuthorityCsr][google.cloud.security.privateca.v1beta1.CertificateAuthorityService.FetchCertificateAuthorityCsr], this method can complete the activation
      /// process.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> ActivateCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1Beta1.ActivateCertificateAuthorityRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a new [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] in a given Project and Location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1Beta1.CreateCertificateAuthorityRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Disable a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DisableCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1Beta1.DisableCertificateAuthorityRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Enable a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> EnableCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1Beta1.EnableCertificateAuthorityRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Fetch a certificate signing request (CSR) from a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority]
      /// that is in state
      /// [PENDING_ACTIVATION][google.cloud.security.privateca.v1beta1.CertificateAuthority.State.PENDING_ACTIVATION] and is
      /// of type [SUBORDINATE][google.cloud.security.privateca.v1beta1.CertificateAuthority.Type.SUBORDINATE]. The CSR must
      /// then be signed by the desired parent Certificate Authority, which could be
      /// another [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] resource, or could be an on-prem
      /// certificate authority. See also [ActivateCertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthorityService.ActivateCertificateAuthority].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Security.PrivateCA.V1Beta1.FetchCertificateAuthorityCsrResponse> FetchCertificateAuthorityCsr(global::Google.Cloud.Security.PrivateCA.V1Beta1.FetchCertificateAuthorityCsrRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Security.PrivateCA.V1Beta1.CertificateAuthority> GetCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1Beta1.GetCertificateAuthorityRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists [CertificateAuthorities][google.cloud.security.privateca.v1beta1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateAuthoritiesResponse> ListCertificateAuthorities(global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateAuthoritiesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Restore a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] that is scheduled for deletion.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> RestoreCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1Beta1.RestoreCertificateAuthorityRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Schedule a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] for deletion.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> ScheduleDeleteCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1Beta1.ScheduleDeleteCertificateAuthorityRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1Beta1.UpdateCertificateAuthorityRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a [CertificateRevocationList][google.cloud.security.privateca.v1beta1.CertificateRevocationList].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Security.PrivateCA.V1Beta1.CertificateRevocationList> GetCertificateRevocationList(global::Google.Cloud.Security.PrivateCA.V1Beta1.GetCertificateRevocationListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists [CertificateRevocationLists][google.cloud.security.privateca.v1beta1.CertificateRevocationList].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateRevocationListsResponse> ListCertificateRevocationLists(global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateRevocationListsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update a [CertificateRevocationList][google.cloud.security.privateca.v1beta1.CertificateRevocationList].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateCertificateRevocationList(global::Google.Cloud.Security.PrivateCA.V1Beta1.UpdateCertificateRevocationListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a [ReusableConfig][google.cloud.security.privateca.v1beta1.ReusableConfig].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Security.PrivateCA.V1Beta1.ReusableConfig> GetReusableConfig(global::Google.Cloud.Security.PrivateCA.V1Beta1.GetReusableConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists [ReusableConfigs][google.cloud.security.privateca.v1beta1.ReusableConfig].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListReusableConfigsResponse> ListReusableConfigs(global::Google.Cloud.Security.PrivateCA.V1Beta1.ListReusableConfigsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CertificateAuthorityService</summary>
    public partial class CertificateAuthorityServiceClient : grpc::ClientBase<CertificateAuthorityServiceClient>
    {
      /// <summary>Creates a new client for CertificateAuthorityService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public CertificateAuthorityServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CertificateAuthorityService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public CertificateAuthorityServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected CertificateAuthorityServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected CertificateAuthorityServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create a new [Certificate][google.cloud.security.privateca.v1beta1.Certificate] in a given Project, Location from a particular
      /// [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate CreateCertificate(global::Google.Cloud.Security.PrivateCA.V1Beta1.CreateCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCertificate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new [Certificate][google.cloud.security.privateca.v1beta1.Certificate] in a given Project, Location from a particular
      /// [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate CreateCertificate(global::Google.Cloud.Security.PrivateCA.V1Beta1.CreateCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCertificate, null, options, request);
      }
      /// <summary>
      /// Create a new [Certificate][google.cloud.security.privateca.v1beta1.Certificate] in a given Project, Location from a particular
      /// [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate> CreateCertificateAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.CreateCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCertificateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new [Certificate][google.cloud.security.privateca.v1beta1.Certificate] in a given Project, Location from a particular
      /// [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate> CreateCertificateAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.CreateCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCertificate, null, options, request);
      }
      /// <summary>
      /// Returns a [Certificate][google.cloud.security.privateca.v1beta1.Certificate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate GetCertificate(global::Google.Cloud.Security.PrivateCA.V1Beta1.GetCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCertificate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a [Certificate][google.cloud.security.privateca.v1beta1.Certificate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate GetCertificate(global::Google.Cloud.Security.PrivateCA.V1Beta1.GetCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCertificate, null, options, request);
      }
      /// <summary>
      /// Returns a [Certificate][google.cloud.security.privateca.v1beta1.Certificate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate> GetCertificateAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.GetCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCertificateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a [Certificate][google.cloud.security.privateca.v1beta1.Certificate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate> GetCertificateAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.GetCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCertificate, null, options, request);
      }
      /// <summary>
      /// Lists [Certificates][google.cloud.security.privateca.v1beta1.Certificate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificatesResponse ListCertificates(global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCertificates(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists [Certificates][google.cloud.security.privateca.v1beta1.Certificate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificatesResponse ListCertificates(global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCertificates, null, options, request);
      }
      /// <summary>
      /// Lists [Certificates][google.cloud.security.privateca.v1beta1.Certificate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificatesResponse> ListCertificatesAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCertificatesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists [Certificates][google.cloud.security.privateca.v1beta1.Certificate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificatesResponse> ListCertificatesAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCertificates, null, options, request);
      }
      /// <summary>
      /// Revoke a [Certificate][google.cloud.security.privateca.v1beta1.Certificate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate RevokeCertificate(global::Google.Cloud.Security.PrivateCA.V1Beta1.RevokeCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RevokeCertificate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Revoke a [Certificate][google.cloud.security.privateca.v1beta1.Certificate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate RevokeCertificate(global::Google.Cloud.Security.PrivateCA.V1Beta1.RevokeCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RevokeCertificate, null, options, request);
      }
      /// <summary>
      /// Revoke a [Certificate][google.cloud.security.privateca.v1beta1.Certificate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate> RevokeCertificateAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.RevokeCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RevokeCertificateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Revoke a [Certificate][google.cloud.security.privateca.v1beta1.Certificate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate> RevokeCertificateAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.RevokeCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RevokeCertificate, null, options, request);
      }
      /// <summary>
      /// Update a [Certificate][google.cloud.security.privateca.v1beta1.Certificate]. Currently, the only field you can update is the
      /// [labels][google.cloud.security.privateca.v1beta1.Certificate.labels] field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate UpdateCertificate(global::Google.Cloud.Security.PrivateCA.V1Beta1.UpdateCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCertificate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a [Certificate][google.cloud.security.privateca.v1beta1.Certificate]. Currently, the only field you can update is the
      /// [labels][google.cloud.security.privateca.v1beta1.Certificate.labels] field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate UpdateCertificate(global::Google.Cloud.Security.PrivateCA.V1Beta1.UpdateCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCertificate, null, options, request);
      }
      /// <summary>
      /// Update a [Certificate][google.cloud.security.privateca.v1beta1.Certificate]. Currently, the only field you can update is the
      /// [labels][google.cloud.security.privateca.v1beta1.Certificate.labels] field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate> UpdateCertificateAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.UpdateCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCertificateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a [Certificate][google.cloud.security.privateca.v1beta1.Certificate]. Currently, the only field you can update is the
      /// [labels][google.cloud.security.privateca.v1beta1.Certificate.labels] field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate> UpdateCertificateAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.UpdateCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCertificate, null, options, request);
      }
      /// <summary>
      /// Activate a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] that is in state
      /// [PENDING_ACTIVATION][google.cloud.security.privateca.v1beta1.CertificateAuthority.State.PENDING_ACTIVATION] and is
      /// of type [SUBORDINATE][google.cloud.security.privateca.v1beta1.CertificateAuthority.Type.SUBORDINATE]. After the
      /// parent Certificate Authority signs a certificate signing request from
      /// [FetchCertificateAuthorityCsr][google.cloud.security.privateca.v1beta1.CertificateAuthorityService.FetchCertificateAuthorityCsr], this method can complete the activation
      /// process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation ActivateCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1Beta1.ActivateCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActivateCertificateAuthority(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Activate a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] that is in state
      /// [PENDING_ACTIVATION][google.cloud.security.privateca.v1beta1.CertificateAuthority.State.PENDING_ACTIVATION] and is
      /// of type [SUBORDINATE][google.cloud.security.privateca.v1beta1.CertificateAuthority.Type.SUBORDINATE]. After the
      /// parent Certificate Authority signs a certificate signing request from
      /// [FetchCertificateAuthorityCsr][google.cloud.security.privateca.v1beta1.CertificateAuthorityService.FetchCertificateAuthorityCsr], this method can complete the activation
      /// process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation ActivateCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1Beta1.ActivateCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ActivateCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Activate a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] that is in state
      /// [PENDING_ACTIVATION][google.cloud.security.privateca.v1beta1.CertificateAuthority.State.PENDING_ACTIVATION] and is
      /// of type [SUBORDINATE][google.cloud.security.privateca.v1beta1.CertificateAuthority.Type.SUBORDINATE]. After the
      /// parent Certificate Authority signs a certificate signing request from
      /// [FetchCertificateAuthorityCsr][google.cloud.security.privateca.v1beta1.CertificateAuthorityService.FetchCertificateAuthorityCsr], this method can complete the activation
      /// process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ActivateCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.ActivateCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActivateCertificateAuthorityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Activate a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] that is in state
      /// [PENDING_ACTIVATION][google.cloud.security.privateca.v1beta1.CertificateAuthority.State.PENDING_ACTIVATION] and is
      /// of type [SUBORDINATE][google.cloud.security.privateca.v1beta1.CertificateAuthority.Type.SUBORDINATE]. After the
      /// parent Certificate Authority signs a certificate signing request from
      /// [FetchCertificateAuthorityCsr][google.cloud.security.privateca.v1beta1.CertificateAuthorityService.FetchCertificateAuthorityCsr], this method can complete the activation
      /// process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ActivateCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.ActivateCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ActivateCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Create a new [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] in a given Project and Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1Beta1.CreateCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCertificateAuthority(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] in a given Project and Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1Beta1.CreateCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Create a new [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] in a given Project and Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.CreateCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCertificateAuthorityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] in a given Project and Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.CreateCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Disable a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DisableCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1Beta1.DisableCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DisableCertificateAuthority(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Disable a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DisableCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1Beta1.DisableCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DisableCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Disable a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DisableCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.DisableCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DisableCertificateAuthorityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Disable a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DisableCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.DisableCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DisableCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Enable a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation EnableCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1Beta1.EnableCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EnableCertificateAuthority(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enable a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation EnableCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1Beta1.EnableCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EnableCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Enable a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> EnableCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.EnableCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EnableCertificateAuthorityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enable a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> EnableCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.EnableCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EnableCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Fetch a certificate signing request (CSR) from a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority]
      /// that is in state
      /// [PENDING_ACTIVATION][google.cloud.security.privateca.v1beta1.CertificateAuthority.State.PENDING_ACTIVATION] and is
      /// of type [SUBORDINATE][google.cloud.security.privateca.v1beta1.CertificateAuthority.Type.SUBORDINATE]. The CSR must
      /// then be signed by the desired parent Certificate Authority, which could be
      /// another [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] resource, or could be an on-prem
      /// certificate authority. See also [ActivateCertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthorityService.ActivateCertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1Beta1.FetchCertificateAuthorityCsrResponse FetchCertificateAuthorityCsr(global::Google.Cloud.Security.PrivateCA.V1Beta1.FetchCertificateAuthorityCsrRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchCertificateAuthorityCsr(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Fetch a certificate signing request (CSR) from a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority]
      /// that is in state
      /// [PENDING_ACTIVATION][google.cloud.security.privateca.v1beta1.CertificateAuthority.State.PENDING_ACTIVATION] and is
      /// of type [SUBORDINATE][google.cloud.security.privateca.v1beta1.CertificateAuthority.Type.SUBORDINATE]. The CSR must
      /// then be signed by the desired parent Certificate Authority, which could be
      /// another [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] resource, or could be an on-prem
      /// certificate authority. See also [ActivateCertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthorityService.ActivateCertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1Beta1.FetchCertificateAuthorityCsrResponse FetchCertificateAuthorityCsr(global::Google.Cloud.Security.PrivateCA.V1Beta1.FetchCertificateAuthorityCsrRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FetchCertificateAuthorityCsr, null, options, request);
      }
      /// <summary>
      /// Fetch a certificate signing request (CSR) from a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority]
      /// that is in state
      /// [PENDING_ACTIVATION][google.cloud.security.privateca.v1beta1.CertificateAuthority.State.PENDING_ACTIVATION] and is
      /// of type [SUBORDINATE][google.cloud.security.privateca.v1beta1.CertificateAuthority.Type.SUBORDINATE]. The CSR must
      /// then be signed by the desired parent Certificate Authority, which could be
      /// another [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] resource, or could be an on-prem
      /// certificate authority. See also [ActivateCertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthorityService.ActivateCertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1Beta1.FetchCertificateAuthorityCsrResponse> FetchCertificateAuthorityCsrAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.FetchCertificateAuthorityCsrRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchCertificateAuthorityCsrAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Fetch a certificate signing request (CSR) from a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority]
      /// that is in state
      /// [PENDING_ACTIVATION][google.cloud.security.privateca.v1beta1.CertificateAuthority.State.PENDING_ACTIVATION] and is
      /// of type [SUBORDINATE][google.cloud.security.privateca.v1beta1.CertificateAuthority.Type.SUBORDINATE]. The CSR must
      /// then be signed by the desired parent Certificate Authority, which could be
      /// another [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] resource, or could be an on-prem
      /// certificate authority. See also [ActivateCertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthorityService.ActivateCertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1Beta1.FetchCertificateAuthorityCsrResponse> FetchCertificateAuthorityCsrAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.FetchCertificateAuthorityCsrRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FetchCertificateAuthorityCsr, null, options, request);
      }
      /// <summary>
      /// Returns a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1Beta1.CertificateAuthority GetCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1Beta1.GetCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCertificateAuthority(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1Beta1.CertificateAuthority GetCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1Beta1.GetCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Returns a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1Beta1.CertificateAuthority> GetCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.GetCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCertificateAuthorityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1Beta1.CertificateAuthority> GetCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.GetCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Lists [CertificateAuthorities][google.cloud.security.privateca.v1beta1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateAuthoritiesResponse ListCertificateAuthorities(global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateAuthoritiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCertificateAuthorities(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists [CertificateAuthorities][google.cloud.security.privateca.v1beta1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateAuthoritiesResponse ListCertificateAuthorities(global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateAuthoritiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCertificateAuthorities, null, options, request);
      }
      /// <summary>
      /// Lists [CertificateAuthorities][google.cloud.security.privateca.v1beta1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateAuthoritiesResponse> ListCertificateAuthoritiesAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateAuthoritiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCertificateAuthoritiesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists [CertificateAuthorities][google.cloud.security.privateca.v1beta1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateAuthoritiesResponse> ListCertificateAuthoritiesAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateAuthoritiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCertificateAuthorities, null, options, request);
      }
      /// <summary>
      /// Restore a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] that is scheduled for deletion.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation RestoreCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1Beta1.RestoreCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RestoreCertificateAuthority(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Restore a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] that is scheduled for deletion.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation RestoreCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1Beta1.RestoreCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RestoreCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Restore a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] that is scheduled for deletion.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> RestoreCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.RestoreCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RestoreCertificateAuthorityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Restore a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] that is scheduled for deletion.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> RestoreCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.RestoreCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RestoreCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Schedule a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] for deletion.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation ScheduleDeleteCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1Beta1.ScheduleDeleteCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScheduleDeleteCertificateAuthority(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Schedule a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] for deletion.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation ScheduleDeleteCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1Beta1.ScheduleDeleteCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ScheduleDeleteCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Schedule a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] for deletion.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ScheduleDeleteCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.ScheduleDeleteCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScheduleDeleteCertificateAuthorityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Schedule a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority] for deletion.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ScheduleDeleteCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.ScheduleDeleteCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ScheduleDeleteCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Update a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1Beta1.UpdateCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCertificateAuthority(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1Beta1.UpdateCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Update a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.UpdateCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCertificateAuthorityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a [CertificateAuthority][google.cloud.security.privateca.v1beta1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.UpdateCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Returns a [CertificateRevocationList][google.cloud.security.privateca.v1beta1.CertificateRevocationList].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1Beta1.CertificateRevocationList GetCertificateRevocationList(global::Google.Cloud.Security.PrivateCA.V1Beta1.GetCertificateRevocationListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCertificateRevocationList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a [CertificateRevocationList][google.cloud.security.privateca.v1beta1.CertificateRevocationList].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1Beta1.CertificateRevocationList GetCertificateRevocationList(global::Google.Cloud.Security.PrivateCA.V1Beta1.GetCertificateRevocationListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCertificateRevocationList, null, options, request);
      }
      /// <summary>
      /// Returns a [CertificateRevocationList][google.cloud.security.privateca.v1beta1.CertificateRevocationList].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1Beta1.CertificateRevocationList> GetCertificateRevocationListAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.GetCertificateRevocationListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCertificateRevocationListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a [CertificateRevocationList][google.cloud.security.privateca.v1beta1.CertificateRevocationList].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1Beta1.CertificateRevocationList> GetCertificateRevocationListAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.GetCertificateRevocationListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCertificateRevocationList, null, options, request);
      }
      /// <summary>
      /// Lists [CertificateRevocationLists][google.cloud.security.privateca.v1beta1.CertificateRevocationList].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateRevocationListsResponse ListCertificateRevocationLists(global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateRevocationListsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCertificateRevocationLists(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists [CertificateRevocationLists][google.cloud.security.privateca.v1beta1.CertificateRevocationList].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateRevocationListsResponse ListCertificateRevocationLists(global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateRevocationListsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCertificateRevocationLists, null, options, request);
      }
      /// <summary>
      /// Lists [CertificateRevocationLists][google.cloud.security.privateca.v1beta1.CertificateRevocationList].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateRevocationListsResponse> ListCertificateRevocationListsAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateRevocationListsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCertificateRevocationListsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists [CertificateRevocationLists][google.cloud.security.privateca.v1beta1.CertificateRevocationList].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateRevocationListsResponse> ListCertificateRevocationListsAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateRevocationListsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCertificateRevocationLists, null, options, request);
      }
      /// <summary>
      /// Update a [CertificateRevocationList][google.cloud.security.privateca.v1beta1.CertificateRevocationList].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateCertificateRevocationList(global::Google.Cloud.Security.PrivateCA.V1Beta1.UpdateCertificateRevocationListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCertificateRevocationList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a [CertificateRevocationList][google.cloud.security.privateca.v1beta1.CertificateRevocationList].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateCertificateRevocationList(global::Google.Cloud.Security.PrivateCA.V1Beta1.UpdateCertificateRevocationListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCertificateRevocationList, null, options, request);
      }
      /// <summary>
      /// Update a [CertificateRevocationList][google.cloud.security.privateca.v1beta1.CertificateRevocationList].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateCertificateRevocationListAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.UpdateCertificateRevocationListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCertificateRevocationListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a [CertificateRevocationList][google.cloud.security.privateca.v1beta1.CertificateRevocationList].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateCertificateRevocationListAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.UpdateCertificateRevocationListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCertificateRevocationList, null, options, request);
      }
      /// <summary>
      /// Returns a [ReusableConfig][google.cloud.security.privateca.v1beta1.ReusableConfig].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1Beta1.ReusableConfig GetReusableConfig(global::Google.Cloud.Security.PrivateCA.V1Beta1.GetReusableConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetReusableConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a [ReusableConfig][google.cloud.security.privateca.v1beta1.ReusableConfig].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1Beta1.ReusableConfig GetReusableConfig(global::Google.Cloud.Security.PrivateCA.V1Beta1.GetReusableConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetReusableConfig, null, options, request);
      }
      /// <summary>
      /// Returns a [ReusableConfig][google.cloud.security.privateca.v1beta1.ReusableConfig].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1Beta1.ReusableConfig> GetReusableConfigAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.GetReusableConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetReusableConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a [ReusableConfig][google.cloud.security.privateca.v1beta1.ReusableConfig].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1Beta1.ReusableConfig> GetReusableConfigAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.GetReusableConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetReusableConfig, null, options, request);
      }
      /// <summary>
      /// Lists [ReusableConfigs][google.cloud.security.privateca.v1beta1.ReusableConfig].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1Beta1.ListReusableConfigsResponse ListReusableConfigs(global::Google.Cloud.Security.PrivateCA.V1Beta1.ListReusableConfigsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListReusableConfigs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists [ReusableConfigs][google.cloud.security.privateca.v1beta1.ReusableConfig].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1Beta1.ListReusableConfigsResponse ListReusableConfigs(global::Google.Cloud.Security.PrivateCA.V1Beta1.ListReusableConfigsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListReusableConfigs, null, options, request);
      }
      /// <summary>
      /// Lists [ReusableConfigs][google.cloud.security.privateca.v1beta1.ReusableConfig].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListReusableConfigsResponse> ListReusableConfigsAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.ListReusableConfigsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListReusableConfigsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists [ReusableConfigs][google.cloud.security.privateca.v1beta1.ReusableConfig].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListReusableConfigsResponse> ListReusableConfigsAsync(global::Google.Cloud.Security.PrivateCA.V1Beta1.ListReusableConfigsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListReusableConfigs, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override CertificateAuthorityServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CertificateAuthorityServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(CertificateAuthorityServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateCertificate, serviceImpl.CreateCertificate)
          .AddMethod(__Method_GetCertificate, serviceImpl.GetCertificate)
          .AddMethod(__Method_ListCertificates, serviceImpl.ListCertificates)
          .AddMethod(__Method_RevokeCertificate, serviceImpl.RevokeCertificate)
          .AddMethod(__Method_UpdateCertificate, serviceImpl.UpdateCertificate)
          .AddMethod(__Method_ActivateCertificateAuthority, serviceImpl.ActivateCertificateAuthority)
          .AddMethod(__Method_CreateCertificateAuthority, serviceImpl.CreateCertificateAuthority)
          .AddMethod(__Method_DisableCertificateAuthority, serviceImpl.DisableCertificateAuthority)
          .AddMethod(__Method_EnableCertificateAuthority, serviceImpl.EnableCertificateAuthority)
          .AddMethod(__Method_FetchCertificateAuthorityCsr, serviceImpl.FetchCertificateAuthorityCsr)
          .AddMethod(__Method_GetCertificateAuthority, serviceImpl.GetCertificateAuthority)
          .AddMethod(__Method_ListCertificateAuthorities, serviceImpl.ListCertificateAuthorities)
          .AddMethod(__Method_RestoreCertificateAuthority, serviceImpl.RestoreCertificateAuthority)
          .AddMethod(__Method_ScheduleDeleteCertificateAuthority, serviceImpl.ScheduleDeleteCertificateAuthority)
          .AddMethod(__Method_UpdateCertificateAuthority, serviceImpl.UpdateCertificateAuthority)
          .AddMethod(__Method_GetCertificateRevocationList, serviceImpl.GetCertificateRevocationList)
          .AddMethod(__Method_ListCertificateRevocationLists, serviceImpl.ListCertificateRevocationLists)
          .AddMethod(__Method_UpdateCertificateRevocationList, serviceImpl.UpdateCertificateRevocationList)
          .AddMethod(__Method_GetReusableConfig, serviceImpl.GetReusableConfig)
          .AddMethod(__Method_ListReusableConfigs, serviceImpl.ListReusableConfigs).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CertificateAuthorityServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateCertificate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1Beta1.CreateCertificateRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate>(serviceImpl.CreateCertificate));
      serviceBinder.AddMethod(__Method_GetCertificate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1Beta1.GetCertificateRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate>(serviceImpl.GetCertificate));
      serviceBinder.AddMethod(__Method_ListCertificates, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificatesRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificatesResponse>(serviceImpl.ListCertificates));
      serviceBinder.AddMethod(__Method_RevokeCertificate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1Beta1.RevokeCertificateRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate>(serviceImpl.RevokeCertificate));
      serviceBinder.AddMethod(__Method_UpdateCertificate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1Beta1.UpdateCertificateRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.Certificate>(serviceImpl.UpdateCertificate));
      serviceBinder.AddMethod(__Method_ActivateCertificateAuthority, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1Beta1.ActivateCertificateAuthorityRequest, global::Google.LongRunning.Operation>(serviceImpl.ActivateCertificateAuthority));
      serviceBinder.AddMethod(__Method_CreateCertificateAuthority, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1Beta1.CreateCertificateAuthorityRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateCertificateAuthority));
      serviceBinder.AddMethod(__Method_DisableCertificateAuthority, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1Beta1.DisableCertificateAuthorityRequest, global::Google.LongRunning.Operation>(serviceImpl.DisableCertificateAuthority));
      serviceBinder.AddMethod(__Method_EnableCertificateAuthority, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1Beta1.EnableCertificateAuthorityRequest, global::Google.LongRunning.Operation>(serviceImpl.EnableCertificateAuthority));
      serviceBinder.AddMethod(__Method_FetchCertificateAuthorityCsr, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1Beta1.FetchCertificateAuthorityCsrRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.FetchCertificateAuthorityCsrResponse>(serviceImpl.FetchCertificateAuthorityCsr));
      serviceBinder.AddMethod(__Method_GetCertificateAuthority, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1Beta1.GetCertificateAuthorityRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.CertificateAuthority>(serviceImpl.GetCertificateAuthority));
      serviceBinder.AddMethod(__Method_ListCertificateAuthorities, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateAuthoritiesRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateAuthoritiesResponse>(serviceImpl.ListCertificateAuthorities));
      serviceBinder.AddMethod(__Method_RestoreCertificateAuthority, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1Beta1.RestoreCertificateAuthorityRequest, global::Google.LongRunning.Operation>(serviceImpl.RestoreCertificateAuthority));
      serviceBinder.AddMethod(__Method_ScheduleDeleteCertificateAuthority, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1Beta1.ScheduleDeleteCertificateAuthorityRequest, global::Google.LongRunning.Operation>(serviceImpl.ScheduleDeleteCertificateAuthority));
      serviceBinder.AddMethod(__Method_UpdateCertificateAuthority, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1Beta1.UpdateCertificateAuthorityRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateCertificateAuthority));
      serviceBinder.AddMethod(__Method_GetCertificateRevocationList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1Beta1.GetCertificateRevocationListRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.CertificateRevocationList>(serviceImpl.GetCertificateRevocationList));
      serviceBinder.AddMethod(__Method_ListCertificateRevocationLists, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateRevocationListsRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.ListCertificateRevocationListsResponse>(serviceImpl.ListCertificateRevocationLists));
      serviceBinder.AddMethod(__Method_UpdateCertificateRevocationList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1Beta1.UpdateCertificateRevocationListRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateCertificateRevocationList));
      serviceBinder.AddMethod(__Method_GetReusableConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1Beta1.GetReusableConfigRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.ReusableConfig>(serviceImpl.GetReusableConfig));
      serviceBinder.AddMethod(__Method_ListReusableConfigs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1Beta1.ListReusableConfigsRequest, global::Google.Cloud.Security.PrivateCA.V1Beta1.ListReusableConfigsResponse>(serviceImpl.ListReusableConfigs));
    }

  }
}
#endregion
