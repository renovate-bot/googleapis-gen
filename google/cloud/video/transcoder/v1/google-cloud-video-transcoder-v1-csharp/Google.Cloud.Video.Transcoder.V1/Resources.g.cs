// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/video/transcoder/v1/resources.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Video.Transcoder.V1 {

  /// <summary>Holder for reflection information generated from google/cloud/video/transcoder/v1/resources.proto</summary>
  public static partial class ResourcesReflection {

    #region Descriptor
    /// <summary>File descriptor for google/cloud/video/transcoder/v1/resources.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ResourcesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjBnb29nbGUvY2xvdWQvdmlkZW8vdHJhbnNjb2Rlci92MS9yZXNvdXJjZXMu",
            "cHJvdG8SIGdvb2dsZS5jbG91ZC52aWRlby50cmFuc2NvZGVyLnYxGh9nb29n",
            "bGUvYXBpL2ZpZWxkX2JlaGF2aW9yLnByb3RvGhlnb29nbGUvYXBpL3Jlc291",
            "cmNlLnByb3RvGh5nb29nbGUvcHJvdG9idWYvZHVyYXRpb24ucHJvdG8aH2dv",
            "b2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8aF2dvb2dsZS9ycGMvc3Rh",
            "dHVzLnByb3RvIqMFCgNKb2ISDAoEbmFtZRgBIAEoCRIWCglpbnB1dF91cmkY",
            "AiABKAlCA+BBBBIXCgpvdXRwdXRfdXJpGAMgASgJQgPgQQQSGgoLdGVtcGxh",
            "dGVfaWQYBCABKAlCA+BBBEgAEj0KBmNvbmZpZxgFIAEoCzIrLmdvb2dsZS5j",
            "bG91ZC52aWRlby50cmFuc2NvZGVyLnYxLkpvYkNvbmZpZ0gAEkkKBXN0YXRl",
            "GAggASgOMjUuZ29vZ2xlLmNsb3VkLnZpZGVvLnRyYW5zY29kZXIudjEuSm9i",
            "LlByb2Nlc3NpbmdTdGF0ZUID4EEDEjQKC2NyZWF0ZV90aW1lGAwgASgLMhou",
            "Z29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEID4EEDEjMKCnN0YXJ0X3RpbWUY",
            "DSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQMSMQoIZW5k",
            "X3RpbWUYDiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQMS",
            "IQoZdHRsX2FmdGVyX2NvbXBsZXRpb25fZGF5cxgPIAEoBRImCgVlcnJvchgR",
            "IAEoCzISLmdvb2dsZS5ycGMuU3RhdHVzQgPgQQMiaAoPUHJvY2Vzc2luZ1N0",
            "YXRlEiAKHFBST0NFU1NJTkdfU1RBVEVfVU5TUEVDSUZJRUQQABILCgdQRU5E",
            "SU5HEAESCwoHUlVOTklORxACEg0KCVNVQ0NFRURFRBADEgoKBkZBSUxFRBAE",
            "OlbqQVMKHXRyYW5zY29kZXIuZ29vZ2xlYXBpcy5jb20vSm9iEjJwcm9qZWN0",
            "cy97cHJvamVjdH0vbG9jYXRpb25zL3tsb2NhdGlvbn0vam9icy97am9ifUIM",
            "Cgpqb2JfY29uZmlnIskBCgtKb2JUZW1wbGF0ZRIMCgRuYW1lGAEgASgJEjsK",
            "BmNvbmZpZxgCIAEoCzIrLmdvb2dsZS5jbG91ZC52aWRlby50cmFuc2NvZGVy",
            "LnYxLkpvYkNvbmZpZzpv6kFsCiV0cmFuc2NvZGVyLmdvb2dsZWFwaXMuY29t",
            "L0pvYlRlbXBsYXRlEkNwcm9qZWN0cy97cHJvamVjdH0vbG9jYXRpb25zL3ts",
            "b2NhdGlvbn0vam9iVGVtcGxhdGVzL3tqb2JfdGVtcGxhdGV9IqAFCglKb2JD",
            "b25maWcSNwoGaW5wdXRzGAEgAygLMicuZ29vZ2xlLmNsb3VkLnZpZGVvLnRy",
            "YW5zY29kZXIudjEuSW5wdXQSPQoJZWRpdF9saXN0GAIgAygLMiouZ29vZ2xl",
            "LmNsb3VkLnZpZGVvLnRyYW5zY29kZXIudjEuRWRpdEF0b20STgoSZWxlbWVu",
            "dGFyeV9zdHJlYW1zGAMgAygLMjIuZ29vZ2xlLmNsb3VkLnZpZGVvLnRyYW5z",
            "Y29kZXIudjEuRWxlbWVudGFyeVN0cmVhbRJACgttdXhfc3RyZWFtcxgEIAMo",
            "CzIrLmdvb2dsZS5jbG91ZC52aWRlby50cmFuc2NvZGVyLnYxLk11eFN0cmVh",
            "bRI9CgltYW5pZmVzdHMYBSADKAsyKi5nb29nbGUuY2xvdWQudmlkZW8udHJh",
            "bnNjb2Rlci52MS5NYW5pZmVzdBI4CgZvdXRwdXQYBiABKAsyKC5nb29nbGUu",
            "Y2xvdWQudmlkZW8udHJhbnNjb2Rlci52MS5PdXRwdXQSPAoJYWRfYnJlYWtz",
            "GAcgAygLMikuZ29vZ2xlLmNsb3VkLnZpZGVvLnRyYW5zY29kZXIudjEuQWRC",
            "cmVhaxJPChJwdWJzdWJfZGVzdGluYXRpb24YCCABKAsyMy5nb29nbGUuY2xv",
            "dWQudmlkZW8udHJhbnNjb2Rlci52MS5QdWJzdWJEZXN0aW5hdGlvbhJECg1z",
            "cHJpdGVfc2hlZXRzGAkgAygLMi0uZ29vZ2xlLmNsb3VkLnZpZGVvLnRyYW5z",
            "Y29kZXIudjEuU3ByaXRlU2hlZXQSOwoIb3ZlcmxheXMYCiADKAsyKS5nb29n",
            "bGUuY2xvdWQudmlkZW8udHJhbnNjb2Rlci52MS5PdmVybGF5InYKBUlucHV0",
            "EgsKA2tleRgBIAEoCRILCgN1cmkYAiABKAkSUwoUcHJlcHJvY2Vzc2luZ19j",
            "b25maWcYAyABKAsyNS5nb29nbGUuY2xvdWQudmlkZW8udHJhbnNjb2Rlci52",
            "MS5QcmVwcm9jZXNzaW5nQ29uZmlnIhUKBk91dHB1dBILCgN1cmkYASABKAki",
            "kQEKCEVkaXRBdG9tEgsKA2tleRgBIAEoCRIOCgZpbnB1dHMYAiADKAkSMgoP",
            "ZW5kX3RpbWVfb2Zmc2V0GAMgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0",
            "aW9uEjQKEXN0YXJ0X3RpbWVfb2Zmc2V0GAQgASgLMhkuZ29vZ2xlLnByb3Rv",
            "YnVmLkR1cmF0aW9uIj8KB0FkQnJlYWsSNAoRc3RhcnRfdGltZV9vZmZzZXQY",
            "ASABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24ihwIKEEVsZW1lbnRh",
            "cnlTdHJlYW0SCwoDa2V5GAQgASgJEkUKDHZpZGVvX3N0cmVhbRgBIAEoCzIt",
            "Lmdvb2dsZS5jbG91ZC52aWRlby50cmFuc2NvZGVyLnYxLlZpZGVvU3RyZWFt",
            "SAASRQoMYXVkaW9fc3RyZWFtGAIgASgLMi0uZ29vZ2xlLmNsb3VkLnZpZGVv",
            "LnRyYW5zY29kZXIudjEuQXVkaW9TdHJlYW1IABJDCgt0ZXh0X3N0cmVhbRgD",
            "IAEoCzIsLmdvb2dsZS5jbG91ZC52aWRlby50cmFuc2NvZGVyLnYxLlRleHRT",
            "dHJlYW1IAEITChFlbGVtZW50YXJ5X3N0cmVhbSLpAQoJTXV4U3RyZWFtEgsK",
            "A2tleRgBIAEoCRIRCglmaWxlX25hbWUYAiABKAkSEQoJY29udGFpbmVyGAMg",
            "ASgJEhoKEmVsZW1lbnRhcnlfc3RyZWFtcxgEIAMoCRJLChBzZWdtZW50X3Nl",
            "dHRpbmdzGAUgASgLMjEuZ29vZ2xlLmNsb3VkLnZpZGVvLnRyYW5zY29kZXIu",
            "djEuU2VnbWVudFNldHRpbmdzEkAKCmVuY3J5cHRpb24YBiABKAsyLC5nb29n",
            "bGUuY2xvdWQudmlkZW8udHJhbnNjb2Rlci52MS5FbmNyeXB0aW9uIsUBCghN",
            "YW5pZmVzdBIRCglmaWxlX25hbWUYASABKAkSSgoEdHlwZRgCIAEoDjI3Lmdv",
            "b2dsZS5jbG91ZC52aWRlby50cmFuc2NvZGVyLnYxLk1hbmlmZXN0Lk1hbmlm",
            "ZXN0VHlwZUID4EECEhgKC211eF9zdHJlYW1zGAMgAygJQgPgQQIiQAoMTWFu",
            "aWZlc3RUeXBlEh0KGU1BTklGRVNUX1RZUEVfVU5TUEVDSUZJRUQQABIHCgNI",
            "TFMQARIICgREQVNIEAIiIgoRUHVic3ViRGVzdGluYXRpb24SDQoFdG9waWMY",
            "ASABKAki/QIKC1Nwcml0ZVNoZWV0Eg4KBmZvcm1hdBgBIAEoCRIYCgtmaWxl",
            "X3ByZWZpeBgCIAEoCUID4EECEiAKE3Nwcml0ZV93aWR0aF9waXhlbHMYAyAB",
            "KAVCA+BBAhIhChRzcHJpdGVfaGVpZ2h0X3BpeGVscxgEIAEoBUID4EECEhQK",
            "DGNvbHVtbl9jb3VudBgFIAEoBRIRCglyb3dfY291bnQYBiABKAUSNAoRc3Rh",
            "cnRfdGltZV9vZmZzZXQYByABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRp",
            "b24SMgoPZW5kX3RpbWVfb2Zmc2V0GAggASgLMhkuZ29vZ2xlLnByb3RvYnVm",
            "LkR1cmF0aW9uEhUKC3RvdGFsX2NvdW50GAkgASgFSAASLQoIaW50ZXJ2YWwY",
            "CiABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb25IABIPCgdxdWFsaXR5",
            "GAsgASgFQhUKE2V4dHJhY3Rpb25fc3RyYXRlZ3kiiwkKB092ZXJsYXkSPgoF",
            "aW1hZ2UYASABKAsyLy5nb29nbGUuY2xvdWQudmlkZW8udHJhbnNjb2Rlci52",
            "MS5PdmVybGF5LkltYWdlEkcKCmFuaW1hdGlvbnMYAiADKAsyMy5nb29nbGUu",
            "Y2xvdWQudmlkZW8udHJhbnNjb2Rlci52MS5PdmVybGF5LkFuaW1hdGlvbhos",
            "ChROb3JtYWxpemVkQ29vcmRpbmF0ZRIJCgF4GAEgASgBEgkKAXkYAiABKAEa",
            "fAoFSW1hZ2USEAoDdXJpGAEgASgJQgPgQQISUgoKcmVzb2x1dGlvbhgCIAEo",
            "CzI+Lmdvb2dsZS5jbG91ZC52aWRlby50cmFuc2NvZGVyLnYxLk92ZXJsYXku",
            "Tm9ybWFsaXplZENvb3JkaW5hdGUSDQoFYWxwaGEYAyABKAEakwEKD0FuaW1h",
            "dGlvblN0YXRpYxJKCgJ4eRgBIAEoCzI+Lmdvb2dsZS5jbG91ZC52aWRlby50",
            "cmFuc2NvZGVyLnYxLk92ZXJsYXkuTm9ybWFsaXplZENvb3JkaW5hdGUSNAoR",
            "c3RhcnRfdGltZV9vZmZzZXQYAiABKAsyGS5nb29nbGUucHJvdG9idWYuRHVy",
            "YXRpb24akQIKDUFuaW1hdGlvbkZhZGUSSgoJZmFkZV90eXBlGAEgASgOMjIu",
            "Z29vZ2xlLmNsb3VkLnZpZGVvLnRyYW5zY29kZXIudjEuT3ZlcmxheS5GYWRl",
            "VHlwZUID4EECEkoKAnh5GAIgASgLMj4uZ29vZ2xlLmNsb3VkLnZpZGVvLnRy",
            "YW5zY29kZXIudjEuT3ZlcmxheS5Ob3JtYWxpemVkQ29vcmRpbmF0ZRI0ChFz",
            "dGFydF90aW1lX29mZnNldBgDIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJh",
            "dGlvbhIyCg9lbmRfdGltZV9vZmZzZXQYBCABKAsyGS5nb29nbGUucHJvdG9i",
            "dWYuRHVyYXRpb24aRAoMQW5pbWF0aW9uRW5kEjQKEXN0YXJ0X3RpbWVfb2Zm",
            "c2V0GAEgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uGpgCCglBbmlt",
            "YXRpb24SVQoQYW5pbWF0aW9uX3N0YXRpYxgBIAEoCzI5Lmdvb2dsZS5jbG91",
            "ZC52aWRlby50cmFuc2NvZGVyLnYxLk92ZXJsYXkuQW5pbWF0aW9uU3RhdGlj",
            "SAASUQoOYW5pbWF0aW9uX2ZhZGUYAiABKAsyNy5nb29nbGUuY2xvdWQudmlk",
            "ZW8udHJhbnNjb2Rlci52MS5PdmVybGF5LkFuaW1hdGlvbkZhZGVIABJPCg1h",
            "bmltYXRpb25fZW5kGAMgASgLMjYuZ29vZ2xlLmNsb3VkLnZpZGVvLnRyYW5z",
            "Y29kZXIudjEuT3ZlcmxheS5BbmltYXRpb25FbmRIAEIQCg5hbmltYXRpb25f",
            "dHlwZSJACghGYWRlVHlwZRIZChVGQURFX1RZUEVfVU5TUEVDSUZJRUQQABIL",
            "CgdGQURFX0lOEAESDAoIRkFERV9PVVQQAiL0BgoTUHJlcHJvY2Vzc2luZ0Nv",
            "bmZpZxJKCgVjb2xvchgBIAEoCzI7Lmdvb2dsZS5jbG91ZC52aWRlby50cmFu",
            "c2NvZGVyLnYxLlByZXByb2Nlc3NpbmdDb25maWcuQ29sb3ISTgoHZGVub2lz",
            "ZRgCIAEoCzI9Lmdvb2dsZS5jbG91ZC52aWRlby50cmFuc2NvZGVyLnYxLlBy",
            "ZXByb2Nlc3NpbmdDb25maWcuRGVub2lzZRJOCgdkZWJsb2NrGAMgASgLMj0u",
            "Z29vZ2xlLmNsb3VkLnZpZGVvLnRyYW5zY29kZXIudjEuUHJlcHJvY2Vzc2lu",
            "Z0NvbmZpZy5EZWJsb2NrEkoKBWF1ZGlvGAQgASgLMjsuZ29vZ2xlLmNsb3Vk",
            "LnZpZGVvLnRyYW5zY29kZXIudjEuUHJlcHJvY2Vzc2luZ0NvbmZpZy5BdWRp",
            "bxJICgRjcm9wGAUgASgLMjouZ29vZ2xlLmNsb3VkLnZpZGVvLnRyYW5zY29k",
            "ZXIudjEuUHJlcHJvY2Vzc2luZ0NvbmZpZy5Dcm9wEkYKA3BhZBgGIAEoCzI5",
            "Lmdvb2dsZS5jbG91ZC52aWRlby50cmFuc2NvZGVyLnYxLlByZXByb2Nlc3Np",
            "bmdDb25maWcuUGFkGkEKBUNvbG9yEhIKCnNhdHVyYXRpb24YASABKAESEAoI",
            "Y29udHJhc3QYAiABKAESEgoKYnJpZ2h0bmVzcxgDIAEoARopCgdEZW5vaXNl",
            "EhAKCHN0cmVuZ3RoGAEgASgBEgwKBHR1bmUYAiABKAkaLAoHRGVibG9jaxIQ",
            "CghzdHJlbmd0aBgBIAEoARIPCgdlbmFibGVkGAIgASgIGjwKBUF1ZGlvEgwK",
            "BGx1ZnMYASABKAESEgoKaGlnaF9ib29zdBgCIAEoCBIRCglsb3dfYm9vc3QY",
            "AyABKAgaXAoEQ3JvcBISCgp0b3BfcGl4ZWxzGAEgASgFEhUKDWJvdHRvbV9w",
            "aXhlbHMYAiABKAUSEwoLbGVmdF9waXhlbHMYAyABKAUSFAoMcmlnaHRfcGl4",
            "ZWxzGAQgASgFGlsKA1BhZBISCgp0b3BfcGl4ZWxzGAEgASgFEhUKDWJvdHRv",
            "bV9waXhlbHMYAiABKAUSEwoLbGVmdF9waXhlbHMYAyABKAUSFAoMcmlnaHRf",
            "cGl4ZWxzGAQgASgFIpUMCgtWaWRlb1N0cmVhbRJPCgRoMjY0GAEgASgLMj8u",
            "Z29vZ2xlLmNsb3VkLnZpZGVvLnRyYW5zY29kZXIudjEuVmlkZW9TdHJlYW0u",
            "SDI2NENvZGVjU2V0dGluZ3NIABJPCgRoMjY1GAIgASgLMj8uZ29vZ2xlLmNs",
            "b3VkLnZpZGVvLnRyYW5zY29kZXIudjEuVmlkZW9TdHJlYW0uSDI2NUNvZGVj",
            "U2V0dGluZ3NIABJNCgN2cDkYAyABKAsyPi5nb29nbGUuY2xvdWQudmlkZW8u",
            "dHJhbnNjb2Rlci52MS5WaWRlb1N0cmVhbS5WcDlDb2RlY1NldHRpbmdzSAAa",
            "+QMKEUgyNjRDb2RlY1NldHRpbmdzEhQKDHdpZHRoX3BpeGVscxgBIAEoBRIV",
            "Cg1oZWlnaHRfcGl4ZWxzGAIgASgFEhcKCmZyYW1lX3JhdGUYAyABKAFCA+BB",
            "AhIYCgtiaXRyYXRlX2JwcxgEIAEoBUID4EECEhQKDHBpeGVsX2Zvcm1hdBgF",
            "IAEoCRIZChFyYXRlX2NvbnRyb2xfbW9kZRgGIAEoCRIRCgljcmZfbGV2ZWwY",
            "ByABKAUSFgoOYWxsb3dfb3Blbl9nb3AYCCABKAgSGQoPZ29wX2ZyYW1lX2Nv",
            "dW50GAkgASgFSAASMQoMZ29wX2R1cmF0aW9uGAogASgLMhkuZ29vZ2xlLnBy",
            "b3RvYnVmLkR1cmF0aW9uSAASFwoPZW5hYmxlX3R3b19wYXNzGAsgASgIEhUK",
            "DXZidl9zaXplX2JpdHMYDCABKAUSGQoRdmJ2X2Z1bGxuZXNzX2JpdHMYDSAB",
            "KAUSFQoNZW50cm9weV9jb2RlchgOIAEoCRIRCgliX3B5cmFtaWQYDyABKAgS",
            "FQoNYl9mcmFtZV9jb3VudBgQIAEoBRITCgthcV9zdHJlbmd0aBgRIAEoARIP",
            "Cgdwcm9maWxlGBIgASgJEgwKBHR1bmUYEyABKAkSDgoGcHJlc2V0GBQgASgJ",
            "QgoKCGdvcF9tb2RlGuIDChFIMjY1Q29kZWNTZXR0aW5ncxIUCgx3aWR0aF9w",
            "aXhlbHMYASABKAUSFQoNaGVpZ2h0X3BpeGVscxgCIAEoBRIXCgpmcmFtZV9y",
            "YXRlGAMgASgBQgPgQQISGAoLYml0cmF0ZV9icHMYBCABKAVCA+BBAhIUCgxw",
            "aXhlbF9mb3JtYXQYBSABKAkSGQoRcmF0ZV9jb250cm9sX21vZGUYBiABKAkS",
            "EQoJY3JmX2xldmVsGAcgASgFEhYKDmFsbG93X29wZW5fZ29wGAggASgIEhkK",
            "D2dvcF9mcmFtZV9jb3VudBgJIAEoBUgAEjEKDGdvcF9kdXJhdGlvbhgKIAEo",
            "CzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbkgAEhcKD2VuYWJsZV90d29f",
            "cGFzcxgLIAEoCBIVCg12YnZfc2l6ZV9iaXRzGAwgASgFEhkKEXZidl9mdWxs",
            "bmVzc19iaXRzGA0gASgFEhEKCWJfcHlyYW1pZBgOIAEoCBIVCg1iX2ZyYW1l",
            "X2NvdW50GA8gASgFEhMKC2FxX3N0cmVuZ3RoGBAgASgBEg8KB3Byb2ZpbGUY",
            "ESABKAkSDAoEdHVuZRgSIAEoCRIOCgZwcmVzZXQYEyABKAlCCgoIZ29wX21v",
            "ZGUaoQIKEFZwOUNvZGVjU2V0dGluZ3MSFAoMd2lkdGhfcGl4ZWxzGAEgASgF",
            "EhUKDWhlaWdodF9waXhlbHMYAiABKAUSFwoKZnJhbWVfcmF0ZRgDIAEoAUID",
            "4EECEhgKC2JpdHJhdGVfYnBzGAQgASgFQgPgQQISFAoMcGl4ZWxfZm9ybWF0",
            "GAUgASgJEhkKEXJhdGVfY29udHJvbF9tb2RlGAYgASgJEhEKCWNyZl9sZXZl",
            "bBgHIAEoBRIZCg9nb3BfZnJhbWVfY291bnQYCCABKAVIABIxCgxnb3BfZHVy",
            "YXRpb24YCSABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb25IABIPCgdw",
            "cm9maWxlGAogASgJQgoKCGdvcF9tb2RlQhAKDmNvZGVjX3NldHRpbmdzIvEC",
            "CgtBdWRpb1N0cmVhbRINCgVjb2RlYxgBIAEoCRIYCgtiaXRyYXRlX2JwcxgC",
            "IAEoBUID4EECEhUKDWNoYW5uZWxfY291bnQYAyABKAUSFgoOY2hhbm5lbF9s",
            "YXlvdXQYBCADKAkSSwoHbWFwcGluZxgFIAMoCzI6Lmdvb2dsZS5jbG91ZC52",
            "aWRlby50cmFuc2NvZGVyLnYxLkF1ZGlvU3RyZWFtLkF1ZGlvTWFwcGluZxIZ",
            "ChFzYW1wbGVfcmF0ZV9oZXJ0ehgGIAEoBRqhAQoMQXVkaW9NYXBwaW5nEhUK",
            "CGF0b21fa2V5GAEgASgJQgPgQQISFgoJaW5wdXRfa2V5GAIgASgJQgPgQQIS",
            "GAoLaW5wdXRfdHJhY2sYAyABKAVCA+BBAhIaCg1pbnB1dF9jaGFubmVsGAQg",
            "ASgFQgPgQQISGwoOb3V0cHV0X2NoYW5uZWwYBSABKAVCA+BBAhIPCgdnYWlu",
            "X2RiGAYgASgBIr4BCgpUZXh0U3RyZWFtEg0KBWNvZGVjGAEgASgJEkkKB21h",
            "cHBpbmcYAyADKAsyOC5nb29nbGUuY2xvdWQudmlkZW8udHJhbnNjb2Rlci52",
            "MS5UZXh0U3RyZWFtLlRleHRNYXBwaW5nGlYKC1RleHRNYXBwaW5nEhUKCGF0",
            "b21fa2V5GAEgASgJQgPgQQISFgoJaW5wdXRfa2V5GAIgASgJQgPgQQISGAoL",
            "aW5wdXRfdHJhY2sYAyABKAVCA+BBAiJoCg9TZWdtZW50U2V0dGluZ3MSMwoQ",
            "c2VnbWVudF9kdXJhdGlvbhgBIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJh",
            "dGlvbhIgChNpbmRpdmlkdWFsX3NlZ21lbnRzGAMgASgIQgPgQQIi3QMKCkVu",
            "Y3J5cHRpb24SEAoDa2V5GAEgASgJQgPgQQISDwoCaXYYAiABKAlCA+BBAhJQ",
            "CgdhZXNfMTI4GAMgASgLMj0uZ29vZ2xlLmNsb3VkLnZpZGVvLnRyYW5zY29k",
            "ZXIudjEuRW5jcnlwdGlvbi5BZXMxMjhFbmNyeXB0aW9uSAASVgoKc2FtcGxl",
            "X2FlcxgEIAEoCzJALmdvb2dsZS5jbG91ZC52aWRlby50cmFuc2NvZGVyLnYx",
            "LkVuY3J5cHRpb24uU2FtcGxlQWVzRW5jcnlwdGlvbkgAElYKCW1wZWdfY2Vu",
            "YxgFIAEoCzJBLmdvb2dsZS5jbG91ZC52aWRlby50cmFuc2NvZGVyLnYxLkVu",
            "Y3J5cHRpb24uTXBlZ0NvbW1vbkVuY3J5cHRpb25IABooChBBZXMxMjhFbmNy",
            "eXB0aW9uEhQKB2tleV91cmkYASABKAlCA+BBAhorChNTYW1wbGVBZXNFbmNy",
            "eXB0aW9uEhQKB2tleV91cmkYASABKAlCA+BBAhpAChRNcGVnQ29tbW9uRW5j",
            "cnlwdGlvbhITCgZrZXlfaWQYASABKAlCA+BBAhITCgZzY2hlbWUYAiABKAlC",
            "A+BBAkIRCg9lbmNyeXB0aW9uX21vZGVChAEKJGNvbS5nb29nbGUuY2xvdWQu",
            "dmlkZW8udHJhbnNjb2Rlci52MUIOUmVzb3VyY2VzUHJvdG9QAVpKZ29vZ2xl",
            "LmdvbGFuZy5vcmcvZ2VucHJvdG8vZ29vZ2xlYXBpcy9jbG91ZC92aWRlby90",
            "cmFuc2NvZGVyL3YxO3RyYW5zY29kZXJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Api.ResourceReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Rpc.StatusReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.Job), global::Google.Cloud.Video.Transcoder.V1.Job.Parser, new[]{ "Name", "InputUri", "OutputUri", "TemplateId", "Config", "State", "CreateTime", "StartTime", "EndTime", "TtlAfterCompletionDays", "Error" }, new[]{ "JobConfig" }, new[]{ typeof(global::Google.Cloud.Video.Transcoder.V1.Job.Types.ProcessingState) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.JobTemplate), global::Google.Cloud.Video.Transcoder.V1.JobTemplate.Parser, new[]{ "Name", "Config" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.JobConfig), global::Google.Cloud.Video.Transcoder.V1.JobConfig.Parser, new[]{ "Inputs", "EditList", "ElementaryStreams", "MuxStreams", "Manifests", "Output", "AdBreaks", "PubsubDestination", "SpriteSheets", "Overlays" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.Input), global::Google.Cloud.Video.Transcoder.V1.Input.Parser, new[]{ "Key", "Uri", "PreprocessingConfig" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.Output), global::Google.Cloud.Video.Transcoder.V1.Output.Parser, new[]{ "Uri" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.EditAtom), global::Google.Cloud.Video.Transcoder.V1.EditAtom.Parser, new[]{ "Key", "Inputs", "EndTimeOffset", "StartTimeOffset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.AdBreak), global::Google.Cloud.Video.Transcoder.V1.AdBreak.Parser, new[]{ "StartTimeOffset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.ElementaryStream), global::Google.Cloud.Video.Transcoder.V1.ElementaryStream.Parser, new[]{ "Key", "VideoStream", "AudioStream", "TextStream" }, new[]{ "ElementaryStream" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.MuxStream), global::Google.Cloud.Video.Transcoder.V1.MuxStream.Parser, new[]{ "Key", "FileName", "Container", "ElementaryStreams", "SegmentSettings", "Encryption" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.Manifest), global::Google.Cloud.Video.Transcoder.V1.Manifest.Parser, new[]{ "FileName", "Type", "MuxStreams" }, null, new[]{ typeof(global::Google.Cloud.Video.Transcoder.V1.Manifest.Types.ManifestType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.PubsubDestination), global::Google.Cloud.Video.Transcoder.V1.PubsubDestination.Parser, new[]{ "Topic" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.SpriteSheet), global::Google.Cloud.Video.Transcoder.V1.SpriteSheet.Parser, new[]{ "Format", "FilePrefix", "SpriteWidthPixels", "SpriteHeightPixels", "ColumnCount", "RowCount", "StartTimeOffset", "EndTimeOffset", "TotalCount", "Interval", "Quality" }, new[]{ "ExtractionStrategy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.Overlay), global::Google.Cloud.Video.Transcoder.V1.Overlay.Parser, new[]{ "Image", "Animations" }, null, new[]{ typeof(global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.FadeType) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.NormalizedCoordinate), global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.NormalizedCoordinate.Parser, new[]{ "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.Image), global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.Image.Parser, new[]{ "Uri", "Resolution", "Alpha" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.AnimationStatic), global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.AnimationStatic.Parser, new[]{ "Xy", "StartTimeOffset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.AnimationFade), global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.AnimationFade.Parser, new[]{ "FadeType", "Xy", "StartTimeOffset", "EndTimeOffset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.AnimationEnd), global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.AnimationEnd.Parser, new[]{ "StartTimeOffset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.Animation), global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.Animation.Parser, new[]{ "AnimationStatic", "AnimationFade", "AnimationEnd" }, new[]{ "AnimationType" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig), global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Parser, new[]{ "Color", "Denoise", "Deblock", "Audio", "Crop", "Pad" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Color), global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Color.Parser, new[]{ "Saturation", "Contrast", "Brightness" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Denoise), global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Denoise.Parser, new[]{ "Strength", "Tune" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Deblock), global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Deblock.Parser, new[]{ "Strength", "Enabled" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Audio), global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Audio.Parser, new[]{ "Lufs", "HighBoost", "LowBoost" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Crop), global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Crop.Parser, new[]{ "TopPixels", "BottomPixels", "LeftPixels", "RightPixels" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Pad), global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Pad.Parser, new[]{ "TopPixels", "BottomPixels", "LeftPixels", "RightPixels" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.VideoStream), global::Google.Cloud.Video.Transcoder.V1.VideoStream.Parser, new[]{ "H264", "H265", "Vp9" }, new[]{ "CodecSettings" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.VideoStream.Types.H264CodecSettings), global::Google.Cloud.Video.Transcoder.V1.VideoStream.Types.H264CodecSettings.Parser, new[]{ "WidthPixels", "HeightPixels", "FrameRate", "BitrateBps", "PixelFormat", "RateControlMode", "CrfLevel", "AllowOpenGop", "GopFrameCount", "GopDuration", "EnableTwoPass", "VbvSizeBits", "VbvFullnessBits", "EntropyCoder", "BPyramid", "BFrameCount", "AqStrength", "Profile", "Tune", "Preset" }, new[]{ "GopMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.VideoStream.Types.H265CodecSettings), global::Google.Cloud.Video.Transcoder.V1.VideoStream.Types.H265CodecSettings.Parser, new[]{ "WidthPixels", "HeightPixels", "FrameRate", "BitrateBps", "PixelFormat", "RateControlMode", "CrfLevel", "AllowOpenGop", "GopFrameCount", "GopDuration", "EnableTwoPass", "VbvSizeBits", "VbvFullnessBits", "BPyramid", "BFrameCount", "AqStrength", "Profile", "Tune", "Preset" }, new[]{ "GopMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.VideoStream.Types.Vp9CodecSettings), global::Google.Cloud.Video.Transcoder.V1.VideoStream.Types.Vp9CodecSettings.Parser, new[]{ "WidthPixels", "HeightPixels", "FrameRate", "BitrateBps", "PixelFormat", "RateControlMode", "CrfLevel", "GopFrameCount", "GopDuration", "Profile" }, new[]{ "GopMode" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.AudioStream), global::Google.Cloud.Video.Transcoder.V1.AudioStream.Parser, new[]{ "Codec", "BitrateBps", "ChannelCount", "ChannelLayout", "Mapping", "SampleRateHertz" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.AudioStream.Types.AudioMapping), global::Google.Cloud.Video.Transcoder.V1.AudioStream.Types.AudioMapping.Parser, new[]{ "AtomKey", "InputKey", "InputTrack", "InputChannel", "OutputChannel", "GainDb" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.TextStream), global::Google.Cloud.Video.Transcoder.V1.TextStream.Parser, new[]{ "Codec", "Mapping" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.TextStream.Types.TextMapping), global::Google.Cloud.Video.Transcoder.V1.TextStream.Types.TextMapping.Parser, new[]{ "AtomKey", "InputKey", "InputTrack" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.SegmentSettings), global::Google.Cloud.Video.Transcoder.V1.SegmentSettings.Parser, new[]{ "SegmentDuration", "IndividualSegments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.Encryption), global::Google.Cloud.Video.Transcoder.V1.Encryption.Parser, new[]{ "Key", "Iv", "Aes128", "SampleAes", "MpegCenc" }, new[]{ "EncryptionMode" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.Encryption.Types.Aes128Encryption), global::Google.Cloud.Video.Transcoder.V1.Encryption.Types.Aes128Encryption.Parser, new[]{ "KeyUri" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.Encryption.Types.SampleAesEncryption), global::Google.Cloud.Video.Transcoder.V1.Encryption.Types.SampleAesEncryption.Parser, new[]{ "KeyUri" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Video.Transcoder.V1.Encryption.Types.MpegCommonEncryption), global::Google.Cloud.Video.Transcoder.V1.Encryption.Types.MpegCommonEncryption.Parser, new[]{ "KeyId", "Scheme" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Transcoding job resource.
  /// </summary>
  public sealed partial class Job : pb::IMessage<Job>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Job> _parser = new pb::MessageParser<Job>(() => new Job());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Job> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Video.Transcoder.V1.ResourcesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Job() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Job(Job other) : this() {
      name_ = other.name_;
      inputUri_ = other.inputUri_;
      outputUri_ = other.outputUri_;
      state_ = other.state_;
      createTime_ = other.createTime_ != null ? other.createTime_.Clone() : null;
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      ttlAfterCompletionDays_ = other.ttlAfterCompletionDays_;
      error_ = other.error_ != null ? other.error_.Clone() : null;
      switch (other.JobConfigCase) {
        case JobConfigOneofCase.TemplateId:
          TemplateId = other.TemplateId;
          break;
        case JobConfigOneofCase.Config:
          Config = other.Config.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Job Clone() {
      return new Job(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The resource name of the job.
    /// Format: `projects/{project}/locations/{location}/jobs/{job}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "input_uri" field.</summary>
    public const int InputUriFieldNumber = 2;
    private string inputUri_ = "";
    /// <summary>
    /// Input only. Specify the `input_uri` to populate empty `uri` fields in each element of
    /// `Job.config.inputs` or `JobTemplate.config.inputs` when using template.
    /// URI of the media. Input files must be at least 5 seconds in duration and
    /// stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InputUri {
      get { return inputUri_; }
      set {
        inputUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "output_uri" field.</summary>
    public const int OutputUriFieldNumber = 3;
    private string outputUri_ = "";
    /// <summary>
    /// Input only. Specify the `output_uri` to populate an empty `Job.config.output.uri` or
    /// `JobTemplate.config.output.uri` when using template.
    /// URI for the output file(s). For example, `gs://my-bucket/outputs/`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OutputUri {
      get { return outputUri_; }
      set {
        outputUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "template_id" field.</summary>
    public const int TemplateIdFieldNumber = 4;
    /// <summary>
    /// Input only. Specify the `template_id` to use for populating `Job.config`. The default
    /// is `preset/web-hd`.
    ///
    /// Preset Transcoder templates:
    /// - `preset/{preset_id}`
    ///
    /// - User defined JobTemplate:
    ///   `{job_template_id}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TemplateId {
      get { return jobConfigCase_ == JobConfigOneofCase.TemplateId ? (string) jobConfig_ : ""; }
      set {
        jobConfig_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        jobConfigCase_ = JobConfigOneofCase.TemplateId;
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 5;
    /// <summary>
    /// The configuration for this job.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Video.Transcoder.V1.JobConfig Config {
      get { return jobConfigCase_ == JobConfigOneofCase.Config ? (global::Google.Cloud.Video.Transcoder.V1.JobConfig) jobConfig_ : null; }
      set {
        jobConfig_ = value;
        jobConfigCase_ = value == null ? JobConfigOneofCase.None : JobConfigOneofCase.Config;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 8;
    private global::Google.Cloud.Video.Transcoder.V1.Job.Types.ProcessingState state_ = global::Google.Cloud.Video.Transcoder.V1.Job.Types.ProcessingState.Unspecified;
    /// <summary>
    /// Output only. The current state of the job.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Video.Transcoder.V1.Job.Types.ProcessingState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 12;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// Output only. The time the job was created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 13;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startTime_;
    /// <summary>
    /// Output only. The time the transcoding started.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 14;
    private global::Google.Protobuf.WellKnownTypes.Timestamp endTime_;
    /// <summary>
    /// Output only. The time the transcoding finished.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "ttl_after_completion_days" field.</summary>
    public const int TtlAfterCompletionDaysFieldNumber = 15;
    private int ttlAfterCompletionDays_;
    /// <summary>
    /// Job time to live value in days, which will be effective after job
    /// completion. Job should be deleted automatically after the given TTL. Enter
    /// a value between 1 and 90. The default is 30.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TtlAfterCompletionDays {
      get { return ttlAfterCompletionDays_; }
      set {
        ttlAfterCompletionDays_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 17;
    private global::Google.Rpc.Status error_;
    /// <summary>
    /// Output only. An error object that describes the reason for the failure.
    /// This property is always present when `state` is `FAILED`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Rpc.Status Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private object jobConfig_;
    /// <summary>Enum of possible cases for the "job_config" oneof.</summary>
    public enum JobConfigOneofCase {
      None = 0,
      TemplateId = 4,
      Config = 5,
    }
    private JobConfigOneofCase jobConfigCase_ = JobConfigOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobConfigOneofCase JobConfigCase {
      get { return jobConfigCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearJobConfig() {
      jobConfigCase_ = JobConfigOneofCase.None;
      jobConfig_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Job);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Job other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (InputUri != other.InputUri) return false;
      if (OutputUri != other.OutputUri) return false;
      if (TemplateId != other.TemplateId) return false;
      if (!object.Equals(Config, other.Config)) return false;
      if (State != other.State) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      if (TtlAfterCompletionDays != other.TtlAfterCompletionDays) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (JobConfigCase != other.JobConfigCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (InputUri.Length != 0) hash ^= InputUri.GetHashCode();
      if (OutputUri.Length != 0) hash ^= OutputUri.GetHashCode();
      if (jobConfigCase_ == JobConfigOneofCase.TemplateId) hash ^= TemplateId.GetHashCode();
      if (jobConfigCase_ == JobConfigOneofCase.Config) hash ^= Config.GetHashCode();
      if (State != global::Google.Cloud.Video.Transcoder.V1.Job.Types.ProcessingState.Unspecified) hash ^= State.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      if (TtlAfterCompletionDays != 0) hash ^= TtlAfterCompletionDays.GetHashCode();
      if (error_ != null) hash ^= Error.GetHashCode();
      hash ^= (int) jobConfigCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (InputUri.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InputUri);
      }
      if (OutputUri.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OutputUri);
      }
      if (jobConfigCase_ == JobConfigOneofCase.TemplateId) {
        output.WriteRawTag(34);
        output.WriteString(TemplateId);
      }
      if (jobConfigCase_ == JobConfigOneofCase.Config) {
        output.WriteRawTag(42);
        output.WriteMessage(Config);
      }
      if (State != global::Google.Cloud.Video.Transcoder.V1.Job.Types.ProcessingState.Unspecified) {
        output.WriteRawTag(64);
        output.WriteEnum((int) State);
      }
      if (createTime_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(CreateTime);
      }
      if (startTime_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(EndTime);
      }
      if (TtlAfterCompletionDays != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(TtlAfterCompletionDays);
      }
      if (error_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (InputUri.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InputUri);
      }
      if (OutputUri.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OutputUri);
      }
      if (jobConfigCase_ == JobConfigOneofCase.TemplateId) {
        output.WriteRawTag(34);
        output.WriteString(TemplateId);
      }
      if (jobConfigCase_ == JobConfigOneofCase.Config) {
        output.WriteRawTag(42);
        output.WriteMessage(Config);
      }
      if (State != global::Google.Cloud.Video.Transcoder.V1.Job.Types.ProcessingState.Unspecified) {
        output.WriteRawTag(64);
        output.WriteEnum((int) State);
      }
      if (createTime_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(CreateTime);
      }
      if (startTime_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(EndTime);
      }
      if (TtlAfterCompletionDays != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(TtlAfterCompletionDays);
      }
      if (error_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (InputUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InputUri);
      }
      if (OutputUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OutputUri);
      }
      if (jobConfigCase_ == JobConfigOneofCase.TemplateId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TemplateId);
      }
      if (jobConfigCase_ == JobConfigOneofCase.Config) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (State != global::Google.Cloud.Video.Transcoder.V1.Job.Types.ProcessingState.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      if (TtlAfterCompletionDays != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TtlAfterCompletionDays);
      }
      if (error_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Job other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.InputUri.Length != 0) {
        InputUri = other.InputUri;
      }
      if (other.OutputUri.Length != 0) {
        OutputUri = other.OutputUri;
      }
      if (other.State != global::Google.Cloud.Video.Transcoder.V1.Job.Types.ProcessingState.Unspecified) {
        State = other.State;
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      if (other.TtlAfterCompletionDays != 0) {
        TtlAfterCompletionDays = other.TtlAfterCompletionDays;
      }
      if (other.error_ != null) {
        if (error_ == null) {
          Error = new global::Google.Rpc.Status();
        }
        Error.MergeFrom(other.Error);
      }
      switch (other.JobConfigCase) {
        case JobConfigOneofCase.TemplateId:
          TemplateId = other.TemplateId;
          break;
        case JobConfigOneofCase.Config:
          if (Config == null) {
            Config = new global::Google.Cloud.Video.Transcoder.V1.JobConfig();
          }
          Config.MergeFrom(other.Config);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            InputUri = input.ReadString();
            break;
          }
          case 26: {
            OutputUri = input.ReadString();
            break;
          }
          case 34: {
            TemplateId = input.ReadString();
            break;
          }
          case 42: {
            global::Google.Cloud.Video.Transcoder.V1.JobConfig subBuilder = new global::Google.Cloud.Video.Transcoder.V1.JobConfig();
            if (jobConfigCase_ == JobConfigOneofCase.Config) {
              subBuilder.MergeFrom(Config);
            }
            input.ReadMessage(subBuilder);
            Config = subBuilder;
            break;
          }
          case 64: {
            State = (global::Google.Cloud.Video.Transcoder.V1.Job.Types.ProcessingState) input.ReadEnum();
            break;
          }
          case 98: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 106: {
            if (startTime_ == null) {
              StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 114: {
            if (endTime_ == null) {
              EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 120: {
            TtlAfterCompletionDays = input.ReadInt32();
            break;
          }
          case 138: {
            if (error_ == null) {
              Error = new global::Google.Rpc.Status();
            }
            input.ReadMessage(Error);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            InputUri = input.ReadString();
            break;
          }
          case 26: {
            OutputUri = input.ReadString();
            break;
          }
          case 34: {
            TemplateId = input.ReadString();
            break;
          }
          case 42: {
            global::Google.Cloud.Video.Transcoder.V1.JobConfig subBuilder = new global::Google.Cloud.Video.Transcoder.V1.JobConfig();
            if (jobConfigCase_ == JobConfigOneofCase.Config) {
              subBuilder.MergeFrom(Config);
            }
            input.ReadMessage(subBuilder);
            Config = subBuilder;
            break;
          }
          case 64: {
            State = (global::Google.Cloud.Video.Transcoder.V1.Job.Types.ProcessingState) input.ReadEnum();
            break;
          }
          case 98: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 106: {
            if (startTime_ == null) {
              StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 114: {
            if (endTime_ == null) {
              EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 120: {
            TtlAfterCompletionDays = input.ReadInt32();
            break;
          }
          case 138: {
            if (error_ == null) {
              Error = new global::Google.Rpc.Status();
            }
            input.ReadMessage(Error);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Job message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The current state of the job.
      /// </summary>
      public enum ProcessingState {
        /// <summary>
        /// The processing state is not specified.
        /// </summary>
        [pbr::OriginalName("PROCESSING_STATE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// The job is enqueued and will be picked up for processing soon.
        /// </summary>
        [pbr::OriginalName("PENDING")] Pending = 1,
        /// <summary>
        /// The job is being processed.
        /// </summary>
        [pbr::OriginalName("RUNNING")] Running = 2,
        /// <summary>
        /// The job has been completed successfully.
        /// </summary>
        [pbr::OriginalName("SUCCEEDED")] Succeeded = 3,
        /// <summary>
        /// The job has failed. For additional information, see `failure_reason` and
        /// `failure_details`
        /// </summary>
        [pbr::OriginalName("FAILED")] Failed = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// Transcoding job template resource.
  /// </summary>
  public sealed partial class JobTemplate : pb::IMessage<JobTemplate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JobTemplate> _parser = new pb::MessageParser<JobTemplate>(() => new JobTemplate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JobTemplate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Video.Transcoder.V1.ResourcesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobTemplate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobTemplate(JobTemplate other) : this() {
      name_ = other.name_;
      config_ = other.config_ != null ? other.config_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobTemplate Clone() {
      return new JobTemplate(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The resource name of the job template.
    /// Format:
    /// `projects/{project}/locations/{location}/jobTemplates/{job_template}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 2;
    private global::Google.Cloud.Video.Transcoder.V1.JobConfig config_;
    /// <summary>
    /// The configuration for this template.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Video.Transcoder.V1.JobConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JobTemplate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JobTemplate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Config, other.Config)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (config_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Config);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (config_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Config);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JobTemplate other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          Config = new global::Google.Cloud.Video.Transcoder.V1.JobConfig();
        }
        Config.MergeFrom(other.Config);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (config_ == null) {
              Config = new global::Google.Cloud.Video.Transcoder.V1.JobConfig();
            }
            input.ReadMessage(Config);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (config_ == null) {
              Config = new global::Google.Cloud.Video.Transcoder.V1.JobConfig();
            }
            input.ReadMessage(Config);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Job configuration
  /// </summary>
  public sealed partial class JobConfig : pb::IMessage<JobConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JobConfig> _parser = new pb::MessageParser<JobConfig>(() => new JobConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JobConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Video.Transcoder.V1.ResourcesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobConfig(JobConfig other) : this() {
      inputs_ = other.inputs_.Clone();
      editList_ = other.editList_.Clone();
      elementaryStreams_ = other.elementaryStreams_.Clone();
      muxStreams_ = other.muxStreams_.Clone();
      manifests_ = other.manifests_.Clone();
      output_ = other.output_ != null ? other.output_.Clone() : null;
      adBreaks_ = other.adBreaks_.Clone();
      pubsubDestination_ = other.pubsubDestination_ != null ? other.pubsubDestination_.Clone() : null;
      spriteSheets_ = other.spriteSheets_.Clone();
      overlays_ = other.overlays_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobConfig Clone() {
      return new JobConfig(this);
    }

    /// <summary>Field number for the "inputs" field.</summary>
    public const int InputsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Video.Transcoder.V1.Input> _repeated_inputs_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Video.Transcoder.V1.Input.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.Input> inputs_ = new pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.Input>();
    /// <summary>
    /// List of input assets stored in Cloud Storage.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.Input> Inputs {
      get { return inputs_; }
    }

    /// <summary>Field number for the "edit_list" field.</summary>
    public const int EditListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Cloud.Video.Transcoder.V1.EditAtom> _repeated_editList_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Video.Transcoder.V1.EditAtom.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.EditAtom> editList_ = new pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.EditAtom>();
    /// <summary>
    /// List of `Edit atom`s. Defines the ultimate timeline of the resulting
    /// file or manifest.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.EditAtom> EditList {
      get { return editList_; }
    }

    /// <summary>Field number for the "elementary_streams" field.</summary>
    public const int ElementaryStreamsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.Video.Transcoder.V1.ElementaryStream> _repeated_elementaryStreams_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Cloud.Video.Transcoder.V1.ElementaryStream.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.ElementaryStream> elementaryStreams_ = new pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.ElementaryStream>();
    /// <summary>
    /// List of elementary streams.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.ElementaryStream> ElementaryStreams {
      get { return elementaryStreams_; }
    }

    /// <summary>Field number for the "mux_streams" field.</summary>
    public const int MuxStreamsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Google.Cloud.Video.Transcoder.V1.MuxStream> _repeated_muxStreams_codec
        = pb::FieldCodec.ForMessage(34, global::Google.Cloud.Video.Transcoder.V1.MuxStream.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.MuxStream> muxStreams_ = new pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.MuxStream>();
    /// <summary>
    /// List of multiplexing settings for output streams.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.MuxStream> MuxStreams {
      get { return muxStreams_; }
    }

    /// <summary>Field number for the "manifests" field.</summary>
    public const int ManifestsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Google.Cloud.Video.Transcoder.V1.Manifest> _repeated_manifests_codec
        = pb::FieldCodec.ForMessage(42, global::Google.Cloud.Video.Transcoder.V1.Manifest.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.Manifest> manifests_ = new pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.Manifest>();
    /// <summary>
    /// List of output manifests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.Manifest> Manifests {
      get { return manifests_; }
    }

    /// <summary>Field number for the "output" field.</summary>
    public const int OutputFieldNumber = 6;
    private global::Google.Cloud.Video.Transcoder.V1.Output output_;
    /// <summary>
    /// Output configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Video.Transcoder.V1.Output Output {
      get { return output_; }
      set {
        output_ = value;
      }
    }

    /// <summary>Field number for the "ad_breaks" field.</summary>
    public const int AdBreaksFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Google.Cloud.Video.Transcoder.V1.AdBreak> _repeated_adBreaks_codec
        = pb::FieldCodec.ForMessage(58, global::Google.Cloud.Video.Transcoder.V1.AdBreak.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.AdBreak> adBreaks_ = new pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.AdBreak>();
    /// <summary>
    /// List of ad breaks. Specifies where to insert ad break tags in the output
    /// manifests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.AdBreak> AdBreaks {
      get { return adBreaks_; }
    }

    /// <summary>Field number for the "pubsub_destination" field.</summary>
    public const int PubsubDestinationFieldNumber = 8;
    private global::Google.Cloud.Video.Transcoder.V1.PubsubDestination pubsubDestination_;
    /// <summary>
    /// Destination on Pub/Sub.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Video.Transcoder.V1.PubsubDestination PubsubDestination {
      get { return pubsubDestination_; }
      set {
        pubsubDestination_ = value;
      }
    }

    /// <summary>Field number for the "sprite_sheets" field.</summary>
    public const int SpriteSheetsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Google.Cloud.Video.Transcoder.V1.SpriteSheet> _repeated_spriteSheets_codec
        = pb::FieldCodec.ForMessage(74, global::Google.Cloud.Video.Transcoder.V1.SpriteSheet.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.SpriteSheet> spriteSheets_ = new pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.SpriteSheet>();
    /// <summary>
    /// List of output sprite sheets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.SpriteSheet> SpriteSheets {
      get { return spriteSheets_; }
    }

    /// <summary>Field number for the "overlays" field.</summary>
    public const int OverlaysFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Google.Cloud.Video.Transcoder.V1.Overlay> _repeated_overlays_codec
        = pb::FieldCodec.ForMessage(82, global::Google.Cloud.Video.Transcoder.V1.Overlay.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.Overlay> overlays_ = new pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.Overlay>();
    /// <summary>
    /// List of overlays on the output video, in descending Z-order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.Overlay> Overlays {
      get { return overlays_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JobConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JobConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!inputs_.Equals(other.inputs_)) return false;
      if(!editList_.Equals(other.editList_)) return false;
      if(!elementaryStreams_.Equals(other.elementaryStreams_)) return false;
      if(!muxStreams_.Equals(other.muxStreams_)) return false;
      if(!manifests_.Equals(other.manifests_)) return false;
      if (!object.Equals(Output, other.Output)) return false;
      if(!adBreaks_.Equals(other.adBreaks_)) return false;
      if (!object.Equals(PubsubDestination, other.PubsubDestination)) return false;
      if(!spriteSheets_.Equals(other.spriteSheets_)) return false;
      if(!overlays_.Equals(other.overlays_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= inputs_.GetHashCode();
      hash ^= editList_.GetHashCode();
      hash ^= elementaryStreams_.GetHashCode();
      hash ^= muxStreams_.GetHashCode();
      hash ^= manifests_.GetHashCode();
      if (output_ != null) hash ^= Output.GetHashCode();
      hash ^= adBreaks_.GetHashCode();
      if (pubsubDestination_ != null) hash ^= PubsubDestination.GetHashCode();
      hash ^= spriteSheets_.GetHashCode();
      hash ^= overlays_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      inputs_.WriteTo(output, _repeated_inputs_codec);
      editList_.WriteTo(output, _repeated_editList_codec);
      elementaryStreams_.WriteTo(output, _repeated_elementaryStreams_codec);
      muxStreams_.WriteTo(output, _repeated_muxStreams_codec);
      manifests_.WriteTo(output, _repeated_manifests_codec);
      if (output_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Output);
      }
      adBreaks_.WriteTo(output, _repeated_adBreaks_codec);
      if (pubsubDestination_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(PubsubDestination);
      }
      spriteSheets_.WriteTo(output, _repeated_spriteSheets_codec);
      overlays_.WriteTo(output, _repeated_overlays_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      inputs_.WriteTo(ref output, _repeated_inputs_codec);
      editList_.WriteTo(ref output, _repeated_editList_codec);
      elementaryStreams_.WriteTo(ref output, _repeated_elementaryStreams_codec);
      muxStreams_.WriteTo(ref output, _repeated_muxStreams_codec);
      manifests_.WriteTo(ref output, _repeated_manifests_codec);
      if (output_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Output);
      }
      adBreaks_.WriteTo(ref output, _repeated_adBreaks_codec);
      if (pubsubDestination_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(PubsubDestination);
      }
      spriteSheets_.WriteTo(ref output, _repeated_spriteSheets_codec);
      overlays_.WriteTo(ref output, _repeated_overlays_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += inputs_.CalculateSize(_repeated_inputs_codec);
      size += editList_.CalculateSize(_repeated_editList_codec);
      size += elementaryStreams_.CalculateSize(_repeated_elementaryStreams_codec);
      size += muxStreams_.CalculateSize(_repeated_muxStreams_codec);
      size += manifests_.CalculateSize(_repeated_manifests_codec);
      if (output_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Output);
      }
      size += adBreaks_.CalculateSize(_repeated_adBreaks_codec);
      if (pubsubDestination_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PubsubDestination);
      }
      size += spriteSheets_.CalculateSize(_repeated_spriteSheets_codec);
      size += overlays_.CalculateSize(_repeated_overlays_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JobConfig other) {
      if (other == null) {
        return;
      }
      inputs_.Add(other.inputs_);
      editList_.Add(other.editList_);
      elementaryStreams_.Add(other.elementaryStreams_);
      muxStreams_.Add(other.muxStreams_);
      manifests_.Add(other.manifests_);
      if (other.output_ != null) {
        if (output_ == null) {
          Output = new global::Google.Cloud.Video.Transcoder.V1.Output();
        }
        Output.MergeFrom(other.Output);
      }
      adBreaks_.Add(other.adBreaks_);
      if (other.pubsubDestination_ != null) {
        if (pubsubDestination_ == null) {
          PubsubDestination = new global::Google.Cloud.Video.Transcoder.V1.PubsubDestination();
        }
        PubsubDestination.MergeFrom(other.PubsubDestination);
      }
      spriteSheets_.Add(other.spriteSheets_);
      overlays_.Add(other.overlays_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            inputs_.AddEntriesFrom(input, _repeated_inputs_codec);
            break;
          }
          case 18: {
            editList_.AddEntriesFrom(input, _repeated_editList_codec);
            break;
          }
          case 26: {
            elementaryStreams_.AddEntriesFrom(input, _repeated_elementaryStreams_codec);
            break;
          }
          case 34: {
            muxStreams_.AddEntriesFrom(input, _repeated_muxStreams_codec);
            break;
          }
          case 42: {
            manifests_.AddEntriesFrom(input, _repeated_manifests_codec);
            break;
          }
          case 50: {
            if (output_ == null) {
              Output = new global::Google.Cloud.Video.Transcoder.V1.Output();
            }
            input.ReadMessage(Output);
            break;
          }
          case 58: {
            adBreaks_.AddEntriesFrom(input, _repeated_adBreaks_codec);
            break;
          }
          case 66: {
            if (pubsubDestination_ == null) {
              PubsubDestination = new global::Google.Cloud.Video.Transcoder.V1.PubsubDestination();
            }
            input.ReadMessage(PubsubDestination);
            break;
          }
          case 74: {
            spriteSheets_.AddEntriesFrom(input, _repeated_spriteSheets_codec);
            break;
          }
          case 82: {
            overlays_.AddEntriesFrom(input, _repeated_overlays_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            inputs_.AddEntriesFrom(ref input, _repeated_inputs_codec);
            break;
          }
          case 18: {
            editList_.AddEntriesFrom(ref input, _repeated_editList_codec);
            break;
          }
          case 26: {
            elementaryStreams_.AddEntriesFrom(ref input, _repeated_elementaryStreams_codec);
            break;
          }
          case 34: {
            muxStreams_.AddEntriesFrom(ref input, _repeated_muxStreams_codec);
            break;
          }
          case 42: {
            manifests_.AddEntriesFrom(ref input, _repeated_manifests_codec);
            break;
          }
          case 50: {
            if (output_ == null) {
              Output = new global::Google.Cloud.Video.Transcoder.V1.Output();
            }
            input.ReadMessage(Output);
            break;
          }
          case 58: {
            adBreaks_.AddEntriesFrom(ref input, _repeated_adBreaks_codec);
            break;
          }
          case 66: {
            if (pubsubDestination_ == null) {
              PubsubDestination = new global::Google.Cloud.Video.Transcoder.V1.PubsubDestination();
            }
            input.ReadMessage(PubsubDestination);
            break;
          }
          case 74: {
            spriteSheets_.AddEntriesFrom(ref input, _repeated_spriteSheets_codec);
            break;
          }
          case 82: {
            overlays_.AddEntriesFrom(ref input, _repeated_overlays_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Input asset.
  /// </summary>
  public sealed partial class Input : pb::IMessage<Input>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Input> _parser = new pb::MessageParser<Input>(() => new Input());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Input> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Video.Transcoder.V1.ResourcesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Input() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Input(Input other) : this() {
      key_ = other.key_;
      uri_ = other.uri_;
      preprocessingConfig_ = other.preprocessingConfig_ != null ? other.preprocessingConfig_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Input Clone() {
      return new Input(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    /// <summary>
    /// A unique key for this input. Must be specified when using advanced
    /// mapping and edit lists.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uri" field.</summary>
    public const int UriFieldNumber = 2;
    private string uri_ = "";
    /// <summary>
    /// URI of the media. Input files must be at least 5 seconds in duration and
    /// stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`).
    /// If empty, the value will be populated from `Job.input_uri`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uri {
      get { return uri_; }
      set {
        uri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "preprocessing_config" field.</summary>
    public const int PreprocessingConfigFieldNumber = 3;
    private global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig preprocessingConfig_;
    /// <summary>
    /// Preprocessing configurations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig PreprocessingConfig {
      get { return preprocessingConfig_; }
      set {
        preprocessingConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Input);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Input other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Uri != other.Uri) return false;
      if (!object.Equals(PreprocessingConfig, other.PreprocessingConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Uri.Length != 0) hash ^= Uri.GetHashCode();
      if (preprocessingConfig_ != null) hash ^= PreprocessingConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Uri.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uri);
      }
      if (preprocessingConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PreprocessingConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Uri.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uri);
      }
      if (preprocessingConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PreprocessingConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Uri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uri);
      }
      if (preprocessingConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PreprocessingConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Input other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Uri.Length != 0) {
        Uri = other.Uri;
      }
      if (other.preprocessingConfig_ != null) {
        if (preprocessingConfig_ == null) {
          PreprocessingConfig = new global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig();
        }
        PreprocessingConfig.MergeFrom(other.PreprocessingConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Uri = input.ReadString();
            break;
          }
          case 26: {
            if (preprocessingConfig_ == null) {
              PreprocessingConfig = new global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig();
            }
            input.ReadMessage(PreprocessingConfig);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Uri = input.ReadString();
            break;
          }
          case 26: {
            if (preprocessingConfig_ == null) {
              PreprocessingConfig = new global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig();
            }
            input.ReadMessage(PreprocessingConfig);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Location of output file(s) in a Cloud Storage bucket.
  /// </summary>
  public sealed partial class Output : pb::IMessage<Output>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Output> _parser = new pb::MessageParser<Output>(() => new Output());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Output> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Video.Transcoder.V1.ResourcesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Output() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Output(Output other) : this() {
      uri_ = other.uri_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Output Clone() {
      return new Output(this);
    }

    /// <summary>Field number for the "uri" field.</summary>
    public const int UriFieldNumber = 1;
    private string uri_ = "";
    /// <summary>
    /// URI for the output file(s). For example, `gs://my-bucket/outputs/`.
    /// If empty the value is populated from `Job.output_uri`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uri {
      get { return uri_; }
      set {
        uri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Output);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Output other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uri != other.Uri) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uri.Length != 0) hash ^= Uri.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Uri.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uri);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Uri.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uri);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uri);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Output other) {
      if (other == null) {
        return;
      }
      if (other.Uri.Length != 0) {
        Uri = other.Uri;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uri = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Uri = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Edit atom.
  /// </summary>
  public sealed partial class EditAtom : pb::IMessage<EditAtom>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EditAtom> _parser = new pb::MessageParser<EditAtom>(() => new EditAtom());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EditAtom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Video.Transcoder.V1.ResourcesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditAtom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditAtom(EditAtom other) : this() {
      key_ = other.key_;
      inputs_ = other.inputs_.Clone();
      endTimeOffset_ = other.endTimeOffset_ != null ? other.endTimeOffset_.Clone() : null;
      startTimeOffset_ = other.startTimeOffset_ != null ? other.startTimeOffset_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditAtom Clone() {
      return new EditAtom(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    /// <summary>
    /// A unique key for this atom. Must be specified when using advanced
    /// mapping.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "inputs" field.</summary>
    public const int InputsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_inputs_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> inputs_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of `Input.key`s identifying files that should be used in this atom.
    /// The listed `inputs` must have the same timeline.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Inputs {
      get { return inputs_; }
    }

    /// <summary>Field number for the "end_time_offset" field.</summary>
    public const int EndTimeOffsetFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Duration endTimeOffset_;
    /// <summary>
    /// End time in seconds for the atom, relative to the input file timeline.
    /// When `end_time_offset` is not specified, the `inputs` are used until
    /// the end of the atom.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration EndTimeOffset {
      get { return endTimeOffset_; }
      set {
        endTimeOffset_ = value;
      }
    }

    /// <summary>Field number for the "start_time_offset" field.</summary>
    public const int StartTimeOffsetFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Duration startTimeOffset_;
    /// <summary>
    /// Start time in seconds for the atom, relative to the input file timeline.
    /// The default is `0s`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration StartTimeOffset {
      get { return startTimeOffset_; }
      set {
        startTimeOffset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EditAtom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EditAtom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if(!inputs_.Equals(other.inputs_)) return false;
      if (!object.Equals(EndTimeOffset, other.EndTimeOffset)) return false;
      if (!object.Equals(StartTimeOffset, other.StartTimeOffset)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      hash ^= inputs_.GetHashCode();
      if (endTimeOffset_ != null) hash ^= EndTimeOffset.GetHashCode();
      if (startTimeOffset_ != null) hash ^= StartTimeOffset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      inputs_.WriteTo(output, _repeated_inputs_codec);
      if (endTimeOffset_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EndTimeOffset);
      }
      if (startTimeOffset_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(StartTimeOffset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      inputs_.WriteTo(ref output, _repeated_inputs_codec);
      if (endTimeOffset_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EndTimeOffset);
      }
      if (startTimeOffset_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(StartTimeOffset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      size += inputs_.CalculateSize(_repeated_inputs_codec);
      if (endTimeOffset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTimeOffset);
      }
      if (startTimeOffset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTimeOffset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EditAtom other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      inputs_.Add(other.inputs_);
      if (other.endTimeOffset_ != null) {
        if (endTimeOffset_ == null) {
          EndTimeOffset = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        EndTimeOffset.MergeFrom(other.EndTimeOffset);
      }
      if (other.startTimeOffset_ != null) {
        if (startTimeOffset_ == null) {
          StartTimeOffset = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        StartTimeOffset.MergeFrom(other.StartTimeOffset);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            inputs_.AddEntriesFrom(input, _repeated_inputs_codec);
            break;
          }
          case 26: {
            if (endTimeOffset_ == null) {
              EndTimeOffset = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(EndTimeOffset);
            break;
          }
          case 34: {
            if (startTimeOffset_ == null) {
              StartTimeOffset = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(StartTimeOffset);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            inputs_.AddEntriesFrom(ref input, _repeated_inputs_codec);
            break;
          }
          case 26: {
            if (endTimeOffset_ == null) {
              EndTimeOffset = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(EndTimeOffset);
            break;
          }
          case 34: {
            if (startTimeOffset_ == null) {
              StartTimeOffset = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(StartTimeOffset);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Ad break.
  /// </summary>
  public sealed partial class AdBreak : pb::IMessage<AdBreak>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AdBreak> _parser = new pb::MessageParser<AdBreak>(() => new AdBreak());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdBreak> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Video.Transcoder.V1.ResourcesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdBreak() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdBreak(AdBreak other) : this() {
      startTimeOffset_ = other.startTimeOffset_ != null ? other.startTimeOffset_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdBreak Clone() {
      return new AdBreak(this);
    }

    /// <summary>Field number for the "start_time_offset" field.</summary>
    public const int StartTimeOffsetFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Duration startTimeOffset_;
    /// <summary>
    /// Start time in seconds for the ad break, relative to the output file
    /// timeline. The default is `0s`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration StartTimeOffset {
      get { return startTimeOffset_; }
      set {
        startTimeOffset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdBreak);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdBreak other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StartTimeOffset, other.StartTimeOffset)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (startTimeOffset_ != null) hash ^= StartTimeOffset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (startTimeOffset_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartTimeOffset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (startTimeOffset_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartTimeOffset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (startTimeOffset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTimeOffset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdBreak other) {
      if (other == null) {
        return;
      }
      if (other.startTimeOffset_ != null) {
        if (startTimeOffset_ == null) {
          StartTimeOffset = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        StartTimeOffset.MergeFrom(other.StartTimeOffset);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (startTimeOffset_ == null) {
              StartTimeOffset = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(StartTimeOffset);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (startTimeOffset_ == null) {
              StartTimeOffset = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(StartTimeOffset);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Encoding of an input file such as an audio, video, or text track.
  /// Elementary streams must be packaged before
  /// mapping and sharing between different output formats.
  /// </summary>
  public sealed partial class ElementaryStream : pb::IMessage<ElementaryStream>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ElementaryStream> _parser = new pb::MessageParser<ElementaryStream>(() => new ElementaryStream());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ElementaryStream> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Video.Transcoder.V1.ResourcesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementaryStream() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementaryStream(ElementaryStream other) : this() {
      key_ = other.key_;
      switch (other.ElementaryStreamCase) {
        case ElementaryStreamOneofCase.VideoStream:
          VideoStream = other.VideoStream.Clone();
          break;
        case ElementaryStreamOneofCase.AudioStream:
          AudioStream = other.AudioStream.Clone();
          break;
        case ElementaryStreamOneofCase.TextStream:
          TextStream = other.TextStream.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementaryStream Clone() {
      return new ElementaryStream(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 4;
    private string key_ = "";
    /// <summary>
    /// A unique key for this elementary stream.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "video_stream" field.</summary>
    public const int VideoStreamFieldNumber = 1;
    /// <summary>
    /// Encoding of a video stream.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Video.Transcoder.V1.VideoStream VideoStream {
      get { return elementaryStreamCase_ == ElementaryStreamOneofCase.VideoStream ? (global::Google.Cloud.Video.Transcoder.V1.VideoStream) elementaryStream_ : null; }
      set {
        elementaryStream_ = value;
        elementaryStreamCase_ = value == null ? ElementaryStreamOneofCase.None : ElementaryStreamOneofCase.VideoStream;
      }
    }

    /// <summary>Field number for the "audio_stream" field.</summary>
    public const int AudioStreamFieldNumber = 2;
    /// <summary>
    /// Encoding of an audio stream.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Video.Transcoder.V1.AudioStream AudioStream {
      get { return elementaryStreamCase_ == ElementaryStreamOneofCase.AudioStream ? (global::Google.Cloud.Video.Transcoder.V1.AudioStream) elementaryStream_ : null; }
      set {
        elementaryStream_ = value;
        elementaryStreamCase_ = value == null ? ElementaryStreamOneofCase.None : ElementaryStreamOneofCase.AudioStream;
      }
    }

    /// <summary>Field number for the "text_stream" field.</summary>
    public const int TextStreamFieldNumber = 3;
    /// <summary>
    /// Encoding of a text stream. For example, closed captions or subtitles.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Video.Transcoder.V1.TextStream TextStream {
      get { return elementaryStreamCase_ == ElementaryStreamOneofCase.TextStream ? (global::Google.Cloud.Video.Transcoder.V1.TextStream) elementaryStream_ : null; }
      set {
        elementaryStream_ = value;
        elementaryStreamCase_ = value == null ? ElementaryStreamOneofCase.None : ElementaryStreamOneofCase.TextStream;
      }
    }

    private object elementaryStream_;
    /// <summary>Enum of possible cases for the "elementary_stream" oneof.</summary>
    public enum ElementaryStreamOneofCase {
      None = 0,
      VideoStream = 1,
      AudioStream = 2,
      TextStream = 3,
    }
    private ElementaryStreamOneofCase elementaryStreamCase_ = ElementaryStreamOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementaryStreamOneofCase ElementaryStreamCase {
      get { return elementaryStreamCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearElementaryStream() {
      elementaryStreamCase_ = ElementaryStreamOneofCase.None;
      elementaryStream_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ElementaryStream);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ElementaryStream other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (!object.Equals(VideoStream, other.VideoStream)) return false;
      if (!object.Equals(AudioStream, other.AudioStream)) return false;
      if (!object.Equals(TextStream, other.TextStream)) return false;
      if (ElementaryStreamCase != other.ElementaryStreamCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (elementaryStreamCase_ == ElementaryStreamOneofCase.VideoStream) hash ^= VideoStream.GetHashCode();
      if (elementaryStreamCase_ == ElementaryStreamOneofCase.AudioStream) hash ^= AudioStream.GetHashCode();
      if (elementaryStreamCase_ == ElementaryStreamOneofCase.TextStream) hash ^= TextStream.GetHashCode();
      hash ^= (int) elementaryStreamCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (elementaryStreamCase_ == ElementaryStreamOneofCase.VideoStream) {
        output.WriteRawTag(10);
        output.WriteMessage(VideoStream);
      }
      if (elementaryStreamCase_ == ElementaryStreamOneofCase.AudioStream) {
        output.WriteRawTag(18);
        output.WriteMessage(AudioStream);
      }
      if (elementaryStreamCase_ == ElementaryStreamOneofCase.TextStream) {
        output.WriteRawTag(26);
        output.WriteMessage(TextStream);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (elementaryStreamCase_ == ElementaryStreamOneofCase.VideoStream) {
        output.WriteRawTag(10);
        output.WriteMessage(VideoStream);
      }
      if (elementaryStreamCase_ == ElementaryStreamOneofCase.AudioStream) {
        output.WriteRawTag(18);
        output.WriteMessage(AudioStream);
      }
      if (elementaryStreamCase_ == ElementaryStreamOneofCase.TextStream) {
        output.WriteRawTag(26);
        output.WriteMessage(TextStream);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (elementaryStreamCase_ == ElementaryStreamOneofCase.VideoStream) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VideoStream);
      }
      if (elementaryStreamCase_ == ElementaryStreamOneofCase.AudioStream) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AudioStream);
      }
      if (elementaryStreamCase_ == ElementaryStreamOneofCase.TextStream) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TextStream);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ElementaryStream other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      switch (other.ElementaryStreamCase) {
        case ElementaryStreamOneofCase.VideoStream:
          if (VideoStream == null) {
            VideoStream = new global::Google.Cloud.Video.Transcoder.V1.VideoStream();
          }
          VideoStream.MergeFrom(other.VideoStream);
          break;
        case ElementaryStreamOneofCase.AudioStream:
          if (AudioStream == null) {
            AudioStream = new global::Google.Cloud.Video.Transcoder.V1.AudioStream();
          }
          AudioStream.MergeFrom(other.AudioStream);
          break;
        case ElementaryStreamOneofCase.TextStream:
          if (TextStream == null) {
            TextStream = new global::Google.Cloud.Video.Transcoder.V1.TextStream();
          }
          TextStream.MergeFrom(other.TextStream);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Google.Cloud.Video.Transcoder.V1.VideoStream subBuilder = new global::Google.Cloud.Video.Transcoder.V1.VideoStream();
            if (elementaryStreamCase_ == ElementaryStreamOneofCase.VideoStream) {
              subBuilder.MergeFrom(VideoStream);
            }
            input.ReadMessage(subBuilder);
            VideoStream = subBuilder;
            break;
          }
          case 18: {
            global::Google.Cloud.Video.Transcoder.V1.AudioStream subBuilder = new global::Google.Cloud.Video.Transcoder.V1.AudioStream();
            if (elementaryStreamCase_ == ElementaryStreamOneofCase.AudioStream) {
              subBuilder.MergeFrom(AudioStream);
            }
            input.ReadMessage(subBuilder);
            AudioStream = subBuilder;
            break;
          }
          case 26: {
            global::Google.Cloud.Video.Transcoder.V1.TextStream subBuilder = new global::Google.Cloud.Video.Transcoder.V1.TextStream();
            if (elementaryStreamCase_ == ElementaryStreamOneofCase.TextStream) {
              subBuilder.MergeFrom(TextStream);
            }
            input.ReadMessage(subBuilder);
            TextStream = subBuilder;
            break;
          }
          case 34: {
            Key = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Google.Cloud.Video.Transcoder.V1.VideoStream subBuilder = new global::Google.Cloud.Video.Transcoder.V1.VideoStream();
            if (elementaryStreamCase_ == ElementaryStreamOneofCase.VideoStream) {
              subBuilder.MergeFrom(VideoStream);
            }
            input.ReadMessage(subBuilder);
            VideoStream = subBuilder;
            break;
          }
          case 18: {
            global::Google.Cloud.Video.Transcoder.V1.AudioStream subBuilder = new global::Google.Cloud.Video.Transcoder.V1.AudioStream();
            if (elementaryStreamCase_ == ElementaryStreamOneofCase.AudioStream) {
              subBuilder.MergeFrom(AudioStream);
            }
            input.ReadMessage(subBuilder);
            AudioStream = subBuilder;
            break;
          }
          case 26: {
            global::Google.Cloud.Video.Transcoder.V1.TextStream subBuilder = new global::Google.Cloud.Video.Transcoder.V1.TextStream();
            if (elementaryStreamCase_ == ElementaryStreamOneofCase.TextStream) {
              subBuilder.MergeFrom(TextStream);
            }
            input.ReadMessage(subBuilder);
            TextStream = subBuilder;
            break;
          }
          case 34: {
            Key = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Multiplexing settings for output stream.
  /// </summary>
  public sealed partial class MuxStream : pb::IMessage<MuxStream>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MuxStream> _parser = new pb::MessageParser<MuxStream>(() => new MuxStream());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MuxStream> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Video.Transcoder.V1.ResourcesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MuxStream() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MuxStream(MuxStream other) : this() {
      key_ = other.key_;
      fileName_ = other.fileName_;
      container_ = other.container_;
      elementaryStreams_ = other.elementaryStreams_.Clone();
      segmentSettings_ = other.segmentSettings_ != null ? other.segmentSettings_.Clone() : null;
      encryption_ = other.encryption_ != null ? other.encryption_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MuxStream Clone() {
      return new MuxStream(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    /// <summary>
    /// A unique key for this multiplexed stream. HLS media manifests will be
    /// named `MuxStream.key` with the `".m3u8"` extension suffix.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "file_name" field.</summary>
    public const int FileNameFieldNumber = 2;
    private string fileName_ = "";
    /// <summary>
    /// The name of the generated file. The default is `MuxStream.key` with the
    /// extension suffix corresponding to the `MuxStream.container`.
    ///
    /// Individual segments also have an incremental 10-digit zero-padded suffix
    /// starting from 0 before the extension, such as `"mux_stream0000000123.ts"`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "container" field.</summary>
    public const int ContainerFieldNumber = 3;
    private string container_ = "";
    /// <summary>
    /// The container format. The default is `"mp4"`
    ///
    /// Supported container formats:
    /// - 'ts'
    /// - 'fmp4'- the corresponding file extension is `".m4s"`
    /// - 'mp4'
    /// - 'vtt'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Container {
      get { return container_; }
      set {
        container_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "elementary_streams" field.</summary>
    public const int ElementaryStreamsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_elementaryStreams_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> elementaryStreams_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of `ElementaryStream.key`s multiplexed in this stream.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ElementaryStreams {
      get { return elementaryStreams_; }
    }

    /// <summary>Field number for the "segment_settings" field.</summary>
    public const int SegmentSettingsFieldNumber = 5;
    private global::Google.Cloud.Video.Transcoder.V1.SegmentSettings segmentSettings_;
    /// <summary>
    /// Segment settings for `"ts"`, `"fmp4"` and `"vtt"`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Video.Transcoder.V1.SegmentSettings SegmentSettings {
      get { return segmentSettings_; }
      set {
        segmentSettings_ = value;
      }
    }

    /// <summary>Field number for the "encryption" field.</summary>
    public const int EncryptionFieldNumber = 6;
    private global::Google.Cloud.Video.Transcoder.V1.Encryption encryption_;
    /// <summary>
    /// Encryption settings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Video.Transcoder.V1.Encryption Encryption {
      get { return encryption_; }
      set {
        encryption_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MuxStream);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MuxStream other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (FileName != other.FileName) return false;
      if (Container != other.Container) return false;
      if(!elementaryStreams_.Equals(other.elementaryStreams_)) return false;
      if (!object.Equals(SegmentSettings, other.SegmentSettings)) return false;
      if (!object.Equals(Encryption, other.Encryption)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (Container.Length != 0) hash ^= Container.GetHashCode();
      hash ^= elementaryStreams_.GetHashCode();
      if (segmentSettings_ != null) hash ^= SegmentSettings.GetHashCode();
      if (encryption_ != null) hash ^= Encryption.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FileName);
      }
      if (Container.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Container);
      }
      elementaryStreams_.WriteTo(output, _repeated_elementaryStreams_codec);
      if (segmentSettings_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SegmentSettings);
      }
      if (encryption_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Encryption);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FileName);
      }
      if (Container.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Container);
      }
      elementaryStreams_.WriteTo(ref output, _repeated_elementaryStreams_codec);
      if (segmentSettings_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SegmentSettings);
      }
      if (encryption_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Encryption);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (Container.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Container);
      }
      size += elementaryStreams_.CalculateSize(_repeated_elementaryStreams_codec);
      if (segmentSettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SegmentSettings);
      }
      if (encryption_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Encryption);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MuxStream other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      if (other.Container.Length != 0) {
        Container = other.Container;
      }
      elementaryStreams_.Add(other.elementaryStreams_);
      if (other.segmentSettings_ != null) {
        if (segmentSettings_ == null) {
          SegmentSettings = new global::Google.Cloud.Video.Transcoder.V1.SegmentSettings();
        }
        SegmentSettings.MergeFrom(other.SegmentSettings);
      }
      if (other.encryption_ != null) {
        if (encryption_ == null) {
          Encryption = new global::Google.Cloud.Video.Transcoder.V1.Encryption();
        }
        Encryption.MergeFrom(other.Encryption);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            FileName = input.ReadString();
            break;
          }
          case 26: {
            Container = input.ReadString();
            break;
          }
          case 34: {
            elementaryStreams_.AddEntriesFrom(input, _repeated_elementaryStreams_codec);
            break;
          }
          case 42: {
            if (segmentSettings_ == null) {
              SegmentSettings = new global::Google.Cloud.Video.Transcoder.V1.SegmentSettings();
            }
            input.ReadMessage(SegmentSettings);
            break;
          }
          case 50: {
            if (encryption_ == null) {
              Encryption = new global::Google.Cloud.Video.Transcoder.V1.Encryption();
            }
            input.ReadMessage(Encryption);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            FileName = input.ReadString();
            break;
          }
          case 26: {
            Container = input.ReadString();
            break;
          }
          case 34: {
            elementaryStreams_.AddEntriesFrom(ref input, _repeated_elementaryStreams_codec);
            break;
          }
          case 42: {
            if (segmentSettings_ == null) {
              SegmentSettings = new global::Google.Cloud.Video.Transcoder.V1.SegmentSettings();
            }
            input.ReadMessage(SegmentSettings);
            break;
          }
          case 50: {
            if (encryption_ == null) {
              Encryption = new global::Google.Cloud.Video.Transcoder.V1.Encryption();
            }
            input.ReadMessage(Encryption);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Manifest configuration.
  /// </summary>
  public sealed partial class Manifest : pb::IMessage<Manifest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Manifest> _parser = new pb::MessageParser<Manifest>(() => new Manifest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Manifest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Video.Transcoder.V1.ResourcesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Manifest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Manifest(Manifest other) : this() {
      fileName_ = other.fileName_;
      type_ = other.type_;
      muxStreams_ = other.muxStreams_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Manifest Clone() {
      return new Manifest(this);
    }

    /// <summary>Field number for the "file_name" field.</summary>
    public const int FileNameFieldNumber = 1;
    private string fileName_ = "";
    /// <summary>
    /// The name of the generated file. The default is `"manifest"` with the
    /// extension suffix corresponding to the `Manifest.type`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Google.Cloud.Video.Transcoder.V1.Manifest.Types.ManifestType type_ = global::Google.Cloud.Video.Transcoder.V1.Manifest.Types.ManifestType.Unspecified;
    /// <summary>
    /// Required. Type of the manifest, can be "HLS" or "DASH".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Video.Transcoder.V1.Manifest.Types.ManifestType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "mux_streams" field.</summary>
    public const int MuxStreamsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_muxStreams_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> muxStreams_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Required. List of user given `MuxStream.key`s that should appear in this manifest.
    ///
    /// When `Manifest.type` is `HLS`, a media manifest with name `MuxStream.key`
    /// and `.m3u8` extension is generated for each element of the
    /// `Manifest.mux_streams`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> MuxStreams {
      get { return muxStreams_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Manifest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Manifest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FileName != other.FileName) return false;
      if (Type != other.Type) return false;
      if(!muxStreams_.Equals(other.muxStreams_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (Type != global::Google.Cloud.Video.Transcoder.V1.Manifest.Types.ManifestType.Unspecified) hash ^= Type.GetHashCode();
      hash ^= muxStreams_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FileName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FileName);
      }
      if (Type != global::Google.Cloud.Video.Transcoder.V1.Manifest.Types.ManifestType.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      muxStreams_.WriteTo(output, _repeated_muxStreams_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FileName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FileName);
      }
      if (Type != global::Google.Cloud.Video.Transcoder.V1.Manifest.Types.ManifestType.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      muxStreams_.WriteTo(ref output, _repeated_muxStreams_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (Type != global::Google.Cloud.Video.Transcoder.V1.Manifest.Types.ManifestType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += muxStreams_.CalculateSize(_repeated_muxStreams_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Manifest other) {
      if (other == null) {
        return;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      if (other.Type != global::Google.Cloud.Video.Transcoder.V1.Manifest.Types.ManifestType.Unspecified) {
        Type = other.Type;
      }
      muxStreams_.Add(other.muxStreams_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FileName = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::Google.Cloud.Video.Transcoder.V1.Manifest.Types.ManifestType) input.ReadEnum();
            break;
          }
          case 26: {
            muxStreams_.AddEntriesFrom(input, _repeated_muxStreams_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FileName = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::Google.Cloud.Video.Transcoder.V1.Manifest.Types.ManifestType) input.ReadEnum();
            break;
          }
          case 26: {
            muxStreams_.AddEntriesFrom(ref input, _repeated_muxStreams_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Manifest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The manifest type can be either `"HLS"` or `"DASH"`.
      /// </summary>
      public enum ManifestType {
        /// <summary>
        /// The manifest type is not specified.
        /// </summary>
        [pbr::OriginalName("MANIFEST_TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Create `"HLS"` manifest. The corresponding file extension is `".m3u8"`.
        /// </summary>
        [pbr::OriginalName("HLS")] Hls = 1,
        /// <summary>
        /// Create `"DASH"` manifest. The corresponding file extension is `".mpd"`.
        /// </summary>
        [pbr::OriginalName("DASH")] Dash = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// A Pub/Sub destination.
  /// </summary>
  public sealed partial class PubsubDestination : pb::IMessage<PubsubDestination>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PubsubDestination> _parser = new pb::MessageParser<PubsubDestination>(() => new PubsubDestination());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PubsubDestination> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Video.Transcoder.V1.ResourcesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PubsubDestination() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PubsubDestination(PubsubDestination other) : this() {
      topic_ = other.topic_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PubsubDestination Clone() {
      return new PubsubDestination(this);
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 1;
    private string topic_ = "";
    /// <summary>
    /// The name of the Pub/Sub topic to publish job completion notification
    /// to. For example: `projects/{project}/topics/{topic}`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PubsubDestination);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PubsubDestination other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Topic != other.Topic) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Topic.Length != 0) hash ^= Topic.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Topic.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Topic);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Topic.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Topic);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Topic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PubsubDestination other) {
      if (other == null) {
        return;
      }
      if (other.Topic.Length != 0) {
        Topic = other.Topic;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Topic = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Topic = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Sprite sheet configuration.
  /// </summary>
  public sealed partial class SpriteSheet : pb::IMessage<SpriteSheet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpriteSheet> _parser = new pb::MessageParser<SpriteSheet>(() => new SpriteSheet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpriteSheet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Video.Transcoder.V1.ResourcesReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpriteSheet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpriteSheet(SpriteSheet other) : this() {
      format_ = other.format_;
      filePrefix_ = other.filePrefix_;
      spriteWidthPixels_ = other.spriteWidthPixels_;
      spriteHeightPixels_ = other.spriteHeightPixels_;
      columnCount_ = other.columnCount_;
      rowCount_ = other.rowCount_;
      startTimeOffset_ = other.startTimeOffset_ != null ? other.startTimeOffset_.Clone() : null;
      endTimeOffset_ = other.endTimeOffset_ != null ? other.endTimeOffset_.Clone() : null;
      quality_ = other.quality_;
      switch (other.ExtractionStrategyCase) {
        case ExtractionStrategyOneofCase.TotalCount:
          TotalCount = other.TotalCount;
          break;
        case ExtractionStrategyOneofCase.Interval:
          Interval = other.Interval.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpriteSheet Clone() {
      return new SpriteSheet(this);
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 1;
    private string format_ = "";
    /// <summary>
    /// Format type. The default is `"jpeg"`.
    ///
    /// Supported formats:
    /// - 'jpeg'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Format {
      get { return format_; }
      set {
        format_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "file_prefix" field.</summary>
    public const int FilePrefixFieldNumber = 2;
    private string filePrefix_ = "";
    /// <summary>
    /// Required. File name prefix for the generated sprite sheets.
    ///
    /// Each sprite sheet has an incremental 10-digit zero-padded suffix starting
    /// from 0 before the extension, such as `"sprite_sheet0000000123.jpeg"`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FilePrefix {
      get { return filePrefix_; }
      set {
        filePrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sprite_width_pixels" field.</summary>
    public const int SpriteWidthPixelsFieldNumber = 3;
    private int spriteWidthPixels_;
    /// <summary>
    /// Required. The width of sprite in pixels. Must be an even integer. To preserve the
    /// source aspect ratio, set the [SpriteSheet.sprite_width_pixels][google.cloud.video.transcoder.v1.SpriteSheet.sprite_width_pixels] field or
    /// the [SpriteSheet.sprite_height_pixels][google.cloud.video.transcoder.v1.SpriteSheet.sprite_height_pixels] field, but not both (the API will
    /// automatically calculate the missing field).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpriteWidthPixels {
      get { return spriteWidthPixels_; }
      set {
        spriteWidthPixels_ = value;
      }
    }

    /// <summary>Field number for the "sprite_height_pixels" field.</summary>
    public const int SpriteHeightPixelsFieldNumber = 4;
    private int spriteHeightPixels_;
    /// <summary>
    /// Required. The height of sprite in pixels. Must be an even integer. To preserve the
    /// source aspect ratio, set the [SpriteSheet.sprite_height_pixels][google.cloud.video.transcoder.v1.SpriteSheet.sprite_height_pixels] field or
    /// the [SpriteSheet.sprite_width_pixels][google.cloud.video.transcoder.v1.SpriteSheet.sprite_width_pixels] field, but not both (the API will
    /// automatically calculate the missing field).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpriteHeightPixels {
      get { return spriteHeightPixels_; }
      set {
        spriteHeightPixels_ = value;
      }
    }

    /// <summary>Field number for the "column_count" field.</summary>
    public const int ColumnCountFieldNumber = 5;
    private int columnCount_;
    /// <summary>
    /// The maximum number of sprites per row in a sprite sheet. The default is 0,
    /// which indicates no maximum limit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ColumnCount {
      get { return columnCount_; }
      set {
        columnCount_ = value;
      }
    }

    /// <summary>Field number for the "row_count" field.</summary>
    public const int RowCountFieldNumber = 6;
    private int rowCount_;
    /// <summary>
    /// The maximum number of rows per sprite sheet. When the sprite sheet is full,
    /// a new sprite sheet is created. The default is 0, which indicates no maximum
    /// limit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RowCount {
      get { return rowCount_; }
      set {
        rowCount_ = value;
      }
    }

    /// <summary>Field number for the "start_time_offset" field.</summary>
    public const int StartTimeOffsetFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Duration startTimeOffset_;
    /// <summary>
    /// Start time in seconds, relative to the output file timeline. Determines the
    /// first sprite to pick. The default is `0s`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration StartTimeOffset {
      get { return startTimeOffset_; }
      set {
        startTimeOffset_ = value;
      }
    }

    /// <summary>Field number for the "end_time_offset" field.</summary>
    public const int EndTimeOffsetFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Duration endTimeOffset_;
    /// <summary>
    /// End time in seconds, relative to the output file timeline. When
    /// `end_time_offset` is not specified, the sprites are generated until the end
    /// of the output file.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration EndTimeOffset {
      get { return endTimeOffset_; }
      set {
        endTimeOffset_ = value;
      }
    }

    /// <summary>Field number for the "total_count" field.</summary>
    public const int TotalCountFieldNumber = 9;
    /// <summary>
    /// Total number of sprites. Create the specified number of sprites
    /// distributed evenly across the timeline of the output media. The default
    /// is 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalCount {
      get { return extractionStrategyCase_ == ExtractionStrategyOneofCase.TotalCount ? (int) extractionStrategy_ : 0; }
      set {
        extractionStrategy_ = value;
        extractionStrategyCase_ = ExtractionStrategyOneofCase.TotalCount;
      }
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 10;
    /// <summary>
    /// Starting from `0s`, create sprites at regular intervals. Specify the
    /// interval value in seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration Interval {
      get { return extractionStrategyCase_ == ExtractionStrategyOneofCase.Interval ? (global::Google.Protobuf.WellKnownTypes.Duration) extractionStrategy_ : null; }
      set {
        extractionStrategy_ = value;
        extractionStrategyCase_ = value == null ? ExtractionStrategyOneofCase.None : ExtractionStrategyOneofCase.Interval;
      }
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 11;
    private int quality_;
    /// <summary>
    /// The quality of the generated sprite sheet. Enter a value between 1
    /// and 100, where 1 is the lowest quality and 100 is the highest quality.
    /// The default is 100. A high quality value corresponds to a low image data
    /// compression ratio.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    private object extractionStrategy_;
    /// <summary>Enum of possible cases for the "extraction_strategy" oneof.</summary>
    public enum ExtractionStrategyOneofCase {
      None = 0,
      TotalCount = 9,
      Interval = 10,
    }
    private ExtractionStrategyOneofCase extractionStrategyCase_ = ExtractionStrategyOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtractionStrategyOneofCase ExtractionStrategyCase {
      get { return extractionStrategyCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExtractionStrategy() {
      extractionStrategyCase_ = ExtractionStrategyOneofCase.None;
      extractionStrategy_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpriteSheet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpriteSheet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Format != other.Format) return false;
      if (FilePrefix != other.FilePrefix) return false;
      if (SpriteWidthPixels != other.SpriteWidthPixels) return false;
      if (SpriteHeightPixels != other.SpriteHeightPixels) return false;
      if (ColumnCount != other.ColumnCount) return false;
      if (RowCount != other.RowCount) return false;
      if (!object.Equals(StartTimeOffset, other.StartTimeOffset)) return false;
      if (!object.Equals(EndTimeOffset, other.EndTimeOffset)) return false;
      if (TotalCount != other.TotalCount) return false;
      if (!object.Equals(Interval, other.Interval)) return false;
      if (Quality != other.Quality) return false;
      if (ExtractionStrategyCase != other.ExtractionStrategyCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Format.Length != 0) hash ^= Format.GetHashCode();
      if (FilePrefix.Length != 0) hash ^= FilePrefix.GetHashCode();
      if (SpriteWidthPixels != 0) hash ^= SpriteWidthPixels.GetHashCode();
      if (SpriteHeightPixels != 0) hash ^= SpriteHeightPixels.GetHashCode();
      if (ColumnCount != 0) hash ^= ColumnCount.GetHashCode();
      if (RowCount != 0) hash ^= RowCount.GetHashCode();
      if (startTimeOffset_ != null) hash ^= StartTimeOffset.GetHashCode();
      if (endTimeOffset_ != null) hash ^= EndTimeOffset.GetHashCode();
      if (extractionStrategyCase_ == ExtractionStrategyOneofCase.TotalCount) hash ^= TotalCount.GetHashCode();
      if (extractionStrategyCase_ == ExtractionStrategyOneofCase.Interval) hash ^= Interval.GetHashCode();
      if (Quality != 0) hash ^= Quality.GetHashCode();
      hash ^= (int) extractionStrategyCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Format.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Format);
      }
      if (FilePrefix.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FilePrefix);
      }
      if (SpriteWidthPixels != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SpriteWidthPixels);
      }
      if (SpriteHeightPixels != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SpriteHeightPixels);
      }
      if (ColumnCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ColumnCount);
      }
      if (RowCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RowCount);
      }
      if (startTimeOffset_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(StartTimeOffset);
      }
      if (endTimeOffset_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(EndTimeOffset);
      }
      if (extractionStrategyCase_ == ExtractionStrategyOneofCase.TotalCount) {
        output.WriteRawTag(72);
        output.WriteInt32(TotalCount);
      }
      if (extractionStrategyCase_ == ExtractionStrategyOneofCase.Interval) {
        output.WriteRawTag(82);
        output.WriteMessage(Interval);
      }
      if (Quality != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Quality);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Format.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Format);
      }
      if (FilePrefix.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FilePrefix);
      }
      if (SpriteWidthPixels != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SpriteWidthPixels);
      }
      if (SpriteHeightPixels != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SpriteHeightPixels);
      }
      if (ColumnCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ColumnCount);
      }
      if (RowCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RowCount);
      }
      if (startTimeOffset_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(StartTimeOffset);
      }
      if (endTimeOffset_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(EndTimeOffset);
      }
      if (extractionStrategyCase_ == ExtractionStrategyOneofCase.TotalCount) {
        output.WriteRawTag(72);
        output.WriteInt32(TotalCount);
      }
      if (extractionStrategyCase_ == ExtractionStrategyOneofCase.Interval) {
        output.WriteRawTag(82);
        output.WriteMessage(Interval);
      }
      if (Quality != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Quality);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Format.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Format);
      }
      if (FilePrefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FilePrefix);
      }
      if (SpriteWidthPixels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpriteWidthPixels);
      }
      if (SpriteHeightPixels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpriteHeightPixels);
      }
      if (ColumnCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColumnCount);
      }
      if (RowCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RowCount);
      }
      if (startTimeOffset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTimeOffset);
      }
      if (endTimeOffset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTimeOffset);
      }
      if (extractionStrategyCase_ == ExtractionStrategyOneofCase.TotalCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalCount);
      }
      if (extractionStrategyCase_ == ExtractionStrategyOneofCase.Interval) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Interval);
      }
      if (Quality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quality);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpriteSheet other) {
      if (other == null) {
        return;
      }
      if (other.Format.Length != 0) {
        Format = other.Format;
      }
      if (other.FilePrefix.Length != 0) {
        FilePrefix = other.FilePrefix;
      }
      if (other.SpriteWidthPixels != 0) {
        SpriteWidthPixels = other.SpriteWidthPixels;
      }
      if (other.SpriteHeightPixels != 0) {
        SpriteHeightPixels = other.SpriteHeightPixels;
      }
      if (other.ColumnCount != 0) {
        ColumnCount = other.ColumnCount;
      }
      if (other.RowCount != 0) {
        RowCount = other.RowCount;
      }
      if (other.startTimeOffset_ != null) {
        if (startTimeOffset_ == null) {
          StartTimeOffset = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        StartTimeOffset.MergeFrom(other.StartTimeOffset);
      }
      if (other.endTimeOffset_ != null) {
        if (endTimeOffset_ == null) {
          EndTimeOffset = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        EndTimeOffset.MergeFrom(other.EndTimeOffset);
      }
      if (other.Quality != 0) {
        Quality = other.Quality;
      }
      switch (other.ExtractionStrategyCase) {
        case ExtractionStrategyOneofCase.TotalCount:
          TotalCount = other.TotalCount;
          break;
        case ExtractionStrategyOneofCase.Interval:
          if (Interval == null) {
            Interval = new global::Google.Protobuf.WellKnownTypes.Duration();
          }
          Interval.MergeFrom(other.Interval);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Format = input.ReadString();
            break;
          }
          case 18: {
            FilePrefix = input.ReadString();
            break;
          }
          case 24: {
            SpriteWidthPixels = input.ReadInt32();
            break;
          }
          case 32: {
            SpriteHeightPixels = input.ReadInt32();
            break;
          }
          case 40: {
            ColumnCount = input.ReadInt32();
            break;
          }
          case 48: {
            RowCount = input.ReadInt32();
            break;
          }
          case 58: {
            if (startTimeOffset_ == null) {
              StartTimeOffset = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(StartTimeOffset);
            break;
          }
          case 66: {
            if (endTimeOffset_ == null) {
              EndTimeOffset = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(EndTimeOffset);
            break;
          }
          case 72: {
            TotalCount = input.ReadInt32();
            break;
          }
          case 82: {
            global::Google.Protobuf.WellKnownTypes.Duration subBuilder = new global::Google.Protobuf.WellKnownTypes.Duration();
            if (extractionStrategyCase_ == ExtractionStrategyOneofCase.Interval) {
              subBuilder.MergeFrom(Interval);
            }
            input.ReadMessage(subBuilder);
            Interval = subBuilder;
            break;
          }
          case 88: {
            Quality = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Format = input.ReadString();
            break;
          }
          case 18: {
            FilePrefix = input.ReadString();
            break;
          }
          case 24: {
            SpriteWidthPixels = input.ReadInt32();
            break;
          }
          case 32: {
            SpriteHeightPixels = input.ReadInt32();
            break;
          }
          case 40: {
            ColumnCount = input.ReadInt32();
            break;
          }
          case 48: {
            RowCount = input.ReadInt32();
            break;
          }
          case 58: {
            if (startTimeOffset_ == null) {
              StartTimeOffset = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(StartTimeOffset);
            break;
          }
          case 66: {
            if (endTimeOffset_ == null) {
              EndTimeOffset = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(EndTimeOffset);
            break;
          }
          case 72: {
            TotalCount = input.ReadInt32();
            break;
          }
          case 82: {
            global::Google.Protobuf.WellKnownTypes.Duration subBuilder = new global::Google.Protobuf.WellKnownTypes.Duration();
            if (extractionStrategyCase_ == ExtractionStrategyOneofCase.Interval) {
              subBuilder.MergeFrom(Interval);
            }
            input.ReadMessage(subBuilder);
            Interval = subBuilder;
            break;
          }
          case 88: {
            Quality = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Overlay configuration.
  /// </summary>
  public sealed partial class Overlay : pb::IMessage<Overlay>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Overlay> _parser = new pb::MessageParser<Overlay>(() => new Overlay());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Overlay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Video.Transcoder.V1.ResourcesReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Overlay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Overlay(Overlay other) : this() {
      image_ = other.image_ != null ? other.image_.Clone() : null;
      animations_ = other.animations_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Overlay Clone() {
      return new Overlay(this);
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 1;
    private global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.Image image_;
    /// <summary>
    /// Image overlay.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.Image Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    /// <summary>Field number for the "animations" field.</summary>
    public const int AnimationsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.Animation> _repeated_animations_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.Animation.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.Animation> animations_ = new pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.Animation>();
    /// <summary>
    /// List of Animations. The list should be chronological, without any time
    /// overlap.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.Animation> Animations {
      get { return animations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Overlay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Overlay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Image, other.Image)) return false;
      if(!animations_.Equals(other.animations_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (image_ != null) hash ^= Image.GetHashCode();
      hash ^= animations_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (image_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Image);
      }
      animations_.WriteTo(output, _repeated_animations_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (image_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Image);
      }
      animations_.WriteTo(ref output, _repeated_animations_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      size += animations_.CalculateSize(_repeated_animations_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Overlay other) {
      if (other == null) {
        return;
      }
      if (other.image_ != null) {
        if (image_ == null) {
          Image = new global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.Image();
        }
        Image.MergeFrom(other.Image);
      }
      animations_.Add(other.animations_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (image_ == null) {
              Image = new global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.Image();
            }
            input.ReadMessage(Image);
            break;
          }
          case 18: {
            animations_.AddEntriesFrom(input, _repeated_animations_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (image_ == null) {
              Image = new global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.Image();
            }
            input.ReadMessage(Image);
            break;
          }
          case 18: {
            animations_.AddEntriesFrom(ref input, _repeated_animations_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Overlay message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Fade type for the overlay: `FADE_IN` or `FADE_OUT`.
      /// </summary>
      public enum FadeType {
        /// <summary>
        /// The fade type is not specified.
        /// </summary>
        [pbr::OriginalName("FADE_TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Fade the overlay object into view.
        /// </summary>
        [pbr::OriginalName("FADE_IN")] FadeIn = 1,
        /// <summary>
        /// Fade the overlay object out of view.
        /// </summary>
        [pbr::OriginalName("FADE_OUT")] FadeOut = 2,
      }

      /// <summary>
      /// 2D normalized coordinates. Default: `{0.0, 0.0}`
      /// </summary>
      public sealed partial class NormalizedCoordinate : pb::IMessage<NormalizedCoordinate>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<NormalizedCoordinate> _parser = new pb::MessageParser<NormalizedCoordinate>(() => new NormalizedCoordinate());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NormalizedCoordinate> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Video.Transcoder.V1.Overlay.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NormalizedCoordinate() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NormalizedCoordinate(NormalizedCoordinate other) : this() {
          x_ = other.x_;
          y_ = other.y_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NormalizedCoordinate Clone() {
          return new NormalizedCoordinate(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private double x_;
        /// <summary>
        /// Normalized x coordinate.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private double y_;
        /// <summary>
        /// Normalized y coordinate.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as NormalizedCoordinate);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(NormalizedCoordinate other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (X != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
          if (Y != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (X != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(X);
          }
          if (Y != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Y);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (X != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(X);
          }
          if (Y != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Y);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (X != 0D) {
            size += 1 + 8;
          }
          if (Y != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(NormalizedCoordinate other) {
          if (other == null) {
            return;
          }
          if (other.X != 0D) {
            X = other.X;
          }
          if (other.Y != 0D) {
            Y = other.Y;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                X = input.ReadDouble();
                break;
              }
              case 17: {
                Y = input.ReadDouble();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                X = input.ReadDouble();
                break;
              }
              case 17: {
                Y = input.ReadDouble();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Overlaid jpeg image.
      /// </summary>
      public sealed partial class Image : pb::IMessage<Image>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Image> _parser = new pb::MessageParser<Image>(() => new Image());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Image> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Video.Transcoder.V1.Overlay.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Image() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Image(Image other) : this() {
          uri_ = other.uri_;
          resolution_ = other.resolution_ != null ? other.resolution_.Clone() : null;
          alpha_ = other.alpha_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Image Clone() {
          return new Image(this);
        }

        /// <summary>Field number for the "uri" field.</summary>
        public const int UriFieldNumber = 1;
        private string uri_ = "";
        /// <summary>
        /// Required. URI of the JPEG image in Cloud Storage. For example,
        /// `gs://bucket/inputs/image.jpeg`. JPEG is the only supported image type.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Uri {
          get { return uri_; }
          set {
            uri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "resolution" field.</summary>
        public const int ResolutionFieldNumber = 2;
        private global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.NormalizedCoordinate resolution_;
        /// <summary>
        /// Normalized image resolution, based on output video resolution. Valid
        /// values: `0.0`–`1.0`. To respect the original image aspect ratio, set
        /// either `x` or `y` to `0.0`. To use the original image resolution, set
        /// both `x` and `y` to `0.0`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.NormalizedCoordinate Resolution {
          get { return resolution_; }
          set {
            resolution_ = value;
          }
        }

        /// <summary>Field number for the "alpha" field.</summary>
        public const int AlphaFieldNumber = 3;
        private double alpha_;
        /// <summary>
        /// Target image opacity. Valid values are from  `1.0` (solid, default) to
        /// `0.0` (transparent), exclusive. Set this to a value greater than `0.0`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Alpha {
          get { return alpha_; }
          set {
            alpha_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Image);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Image other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Uri != other.Uri) return false;
          if (!object.Equals(Resolution, other.Resolution)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Alpha, other.Alpha)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Uri.Length != 0) hash ^= Uri.GetHashCode();
          if (resolution_ != null) hash ^= Resolution.GetHashCode();
          if (Alpha != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Alpha);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Uri.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Uri);
          }
          if (resolution_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Resolution);
          }
          if (Alpha != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(Alpha);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Uri.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Uri);
          }
          if (resolution_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Resolution);
          }
          if (Alpha != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(Alpha);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Uri.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Uri);
          }
          if (resolution_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resolution);
          }
          if (Alpha != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Image other) {
          if (other == null) {
            return;
          }
          if (other.Uri.Length != 0) {
            Uri = other.Uri;
          }
          if (other.resolution_ != null) {
            if (resolution_ == null) {
              Resolution = new global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.NormalizedCoordinate();
            }
            Resolution.MergeFrom(other.Resolution);
          }
          if (other.Alpha != 0D) {
            Alpha = other.Alpha;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Uri = input.ReadString();
                break;
              }
              case 18: {
                if (resolution_ == null) {
                  Resolution = new global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.NormalizedCoordinate();
                }
                input.ReadMessage(Resolution);
                break;
              }
              case 25: {
                Alpha = input.ReadDouble();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Uri = input.ReadString();
                break;
              }
              case 18: {
                if (resolution_ == null) {
                  Resolution = new global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.NormalizedCoordinate();
                }
                input.ReadMessage(Resolution);
                break;
              }
              case 25: {
                Alpha = input.ReadDouble();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Display static overlay object.
      /// </summary>
      public sealed partial class AnimationStatic : pb::IMessage<AnimationStatic>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AnimationStatic> _parser = new pb::MessageParser<AnimationStatic>(() => new AnimationStatic());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AnimationStatic> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Video.Transcoder.V1.Overlay.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnimationStatic() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnimationStatic(AnimationStatic other) : this() {
          xy_ = other.xy_ != null ? other.xy_.Clone() : null;
          startTimeOffset_ = other.startTimeOffset_ != null ? other.startTimeOffset_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnimationStatic Clone() {
          return new AnimationStatic(this);
        }

        /// <summary>Field number for the "xy" field.</summary>
        public const int XyFieldNumber = 1;
        private global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.NormalizedCoordinate xy_;
        /// <summary>
        /// Normalized coordinates based on output video resolution. Valid
        /// values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay
        /// object. For example, use the x and y coordinates {0,0} to position the
        /// top-left corner of the overlay animation in the top-left corner of the
        /// output video.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.NormalizedCoordinate Xy {
          get { return xy_; }
          set {
            xy_ = value;
          }
        }

        /// <summary>Field number for the "start_time_offset" field.</summary>
        public const int StartTimeOffsetFieldNumber = 2;
        private global::Google.Protobuf.WellKnownTypes.Duration startTimeOffset_;
        /// <summary>
        /// The time to start displaying the overlay object, in seconds. Default: 0
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Duration StartTimeOffset {
          get { return startTimeOffset_; }
          set {
            startTimeOffset_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AnimationStatic);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AnimationStatic other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Xy, other.Xy)) return false;
          if (!object.Equals(StartTimeOffset, other.StartTimeOffset)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (xy_ != null) hash ^= Xy.GetHashCode();
          if (startTimeOffset_ != null) hash ^= StartTimeOffset.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (xy_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Xy);
          }
          if (startTimeOffset_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(StartTimeOffset);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (xy_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Xy);
          }
          if (startTimeOffset_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(StartTimeOffset);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (xy_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Xy);
          }
          if (startTimeOffset_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTimeOffset);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AnimationStatic other) {
          if (other == null) {
            return;
          }
          if (other.xy_ != null) {
            if (xy_ == null) {
              Xy = new global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.NormalizedCoordinate();
            }
            Xy.MergeFrom(other.Xy);
          }
          if (other.startTimeOffset_ != null) {
            if (startTimeOffset_ == null) {
              StartTimeOffset = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            StartTimeOffset.MergeFrom(other.StartTimeOffset);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (xy_ == null) {
                  Xy = new global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.NormalizedCoordinate();
                }
                input.ReadMessage(Xy);
                break;
              }
              case 18: {
                if (startTimeOffset_ == null) {
                  StartTimeOffset = new global::Google.Protobuf.WellKnownTypes.Duration();
                }
                input.ReadMessage(StartTimeOffset);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (xy_ == null) {
                  Xy = new global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.NormalizedCoordinate();
                }
                input.ReadMessage(Xy);
                break;
              }
              case 18: {
                if (startTimeOffset_ == null) {
                  StartTimeOffset = new global::Google.Protobuf.WellKnownTypes.Duration();
                }
                input.ReadMessage(StartTimeOffset);
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Display overlay object with fade animation.
      /// </summary>
      public sealed partial class AnimationFade : pb::IMessage<AnimationFade>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AnimationFade> _parser = new pb::MessageParser<AnimationFade>(() => new AnimationFade());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AnimationFade> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Video.Transcoder.V1.Overlay.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnimationFade() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnimationFade(AnimationFade other) : this() {
          fadeType_ = other.fadeType_;
          xy_ = other.xy_ != null ? other.xy_.Clone() : null;
          startTimeOffset_ = other.startTimeOffset_ != null ? other.startTimeOffset_.Clone() : null;
          endTimeOffset_ = other.endTimeOffset_ != null ? other.endTimeOffset_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnimationFade Clone() {
          return new AnimationFade(this);
        }

        /// <summary>Field number for the "fade_type" field.</summary>
        public const int FadeTypeFieldNumber = 1;
        private global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.FadeType fadeType_ = global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.FadeType.Unspecified;
        /// <summary>
        /// Required. Type of fade animation: `FADE_IN` or `FADE_OUT`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.FadeType FadeType {
          get { return fadeType_; }
          set {
            fadeType_ = value;
          }
        }

        /// <summary>Field number for the "xy" field.</summary>
        public const int XyFieldNumber = 2;
        private global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.NormalizedCoordinate xy_;
        /// <summary>
        /// Normalized coordinates based on output video resolution. Valid
        /// values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay
        /// object. For example, use the x and y coordinates {0,0} to position the
        /// top-left corner of the overlay animation in the top-left corner of the
        /// output video.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.NormalizedCoordinate Xy {
          get { return xy_; }
          set {
            xy_ = value;
          }
        }

        /// <summary>Field number for the "start_time_offset" field.</summary>
        public const int StartTimeOffsetFieldNumber = 3;
        private global::Google.Protobuf.WellKnownTypes.Duration startTimeOffset_;
        /// <summary>
        /// The time to start the fade animation, in seconds. Default: 0
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Duration StartTimeOffset {
          get { return startTimeOffset_; }
          set {
            startTimeOffset_ = value;
          }
        }

        /// <summary>Field number for the "end_time_offset" field.</summary>
        public const int EndTimeOffsetFieldNumber = 4;
        private global::Google.Protobuf.WellKnownTypes.Duration endTimeOffset_;
        /// <summary>
        /// The time to end the fade animation, in seconds. Default:
        /// `start_time_offset` + 1s
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Duration EndTimeOffset {
          get { return endTimeOffset_; }
          set {
            endTimeOffset_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AnimationFade);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AnimationFade other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FadeType != other.FadeType) return false;
          if (!object.Equals(Xy, other.Xy)) return false;
          if (!object.Equals(StartTimeOffset, other.StartTimeOffset)) return false;
          if (!object.Equals(EndTimeOffset, other.EndTimeOffset)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (FadeType != global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.FadeType.Unspecified) hash ^= FadeType.GetHashCode();
          if (xy_ != null) hash ^= Xy.GetHashCode();
          if (startTimeOffset_ != null) hash ^= StartTimeOffset.GetHashCode();
          if (endTimeOffset_ != null) hash ^= EndTimeOffset.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (FadeType != global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.FadeType.Unspecified) {
            output.WriteRawTag(8);
            output.WriteEnum((int) FadeType);
          }
          if (xy_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Xy);
          }
          if (startTimeOffset_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(StartTimeOffset);
          }
          if (endTimeOffset_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(EndTimeOffset);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (FadeType != global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.FadeType.Unspecified) {
            output.WriteRawTag(8);
            output.WriteEnum((int) FadeType);
          }
          if (xy_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Xy);
          }
          if (startTimeOffset_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(StartTimeOffset);
          }
          if (endTimeOffset_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(EndTimeOffset);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (FadeType != global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.FadeType.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FadeType);
          }
          if (xy_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Xy);
          }
          if (startTimeOffset_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTimeOffset);
          }
          if (endTimeOffset_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTimeOffset);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AnimationFade other) {
          if (other == null) {
            return;
          }
          if (other.FadeType != global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.FadeType.Unspecified) {
            FadeType = other.FadeType;
          }
          if (other.xy_ != null) {
            if (xy_ == null) {
              Xy = new global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.NormalizedCoordinate();
            }
            Xy.MergeFrom(other.Xy);
          }
          if (other.startTimeOffset_ != null) {
            if (startTimeOffset_ == null) {
              StartTimeOffset = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            StartTimeOffset.MergeFrom(other.StartTimeOffset);
          }
          if (other.endTimeOffset_ != null) {
            if (endTimeOffset_ == null) {
              EndTimeOffset = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            EndTimeOffset.MergeFrom(other.EndTimeOffset);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                FadeType = (global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.FadeType) input.ReadEnum();
                break;
              }
              case 18: {
                if (xy_ == null) {
                  Xy = new global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.NormalizedCoordinate();
                }
                input.ReadMessage(Xy);
                break;
              }
              case 26: {
                if (startTimeOffset_ == null) {
                  StartTimeOffset = new global::Google.Protobuf.WellKnownTypes.Duration();
                }
                input.ReadMessage(StartTimeOffset);
                break;
              }
              case 34: {
                if (endTimeOffset_ == null) {
                  EndTimeOffset = new global::Google.Protobuf.WellKnownTypes.Duration();
                }
                input.ReadMessage(EndTimeOffset);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                FadeType = (global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.FadeType) input.ReadEnum();
                break;
              }
              case 18: {
                if (xy_ == null) {
                  Xy = new global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.NormalizedCoordinate();
                }
                input.ReadMessage(Xy);
                break;
              }
              case 26: {
                if (startTimeOffset_ == null) {
                  StartTimeOffset = new global::Google.Protobuf.WellKnownTypes.Duration();
                }
                input.ReadMessage(StartTimeOffset);
                break;
              }
              case 34: {
                if (endTimeOffset_ == null) {
                  EndTimeOffset = new global::Google.Protobuf.WellKnownTypes.Duration();
                }
                input.ReadMessage(EndTimeOffset);
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// End previous overlay animation from the video. Without AnimationEnd, the
      /// overlay object will keep the state of previous animation until the end of
      /// the video.
      /// </summary>
      public sealed partial class AnimationEnd : pb::IMessage<AnimationEnd>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AnimationEnd> _parser = new pb::MessageParser<AnimationEnd>(() => new AnimationEnd());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AnimationEnd> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Video.Transcoder.V1.Overlay.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnimationEnd() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnimationEnd(AnimationEnd other) : this() {
          startTimeOffset_ = other.startTimeOffset_ != null ? other.startTimeOffset_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnimationEnd Clone() {
          return new AnimationEnd(this);
        }

        /// <summary>Field number for the "start_time_offset" field.</summary>
        public const int StartTimeOffsetFieldNumber = 1;
        private global::Google.Protobuf.WellKnownTypes.Duration startTimeOffset_;
        /// <summary>
        /// The time to end overlay object, in seconds. Default: 0
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Duration StartTimeOffset {
          get { return startTimeOffset_; }
          set {
            startTimeOffset_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AnimationEnd);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AnimationEnd other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(StartTimeOffset, other.StartTimeOffset)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (startTimeOffset_ != null) hash ^= StartTimeOffset.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (startTimeOffset_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(StartTimeOffset);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (startTimeOffset_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(StartTimeOffset);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (startTimeOffset_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTimeOffset);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AnimationEnd other) {
          if (other == null) {
            return;
          }
          if (other.startTimeOffset_ != null) {
            if (startTimeOffset_ == null) {
              StartTimeOffset = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            StartTimeOffset.MergeFrom(other.StartTimeOffset);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (startTimeOffset_ == null) {
                  StartTimeOffset = new global::Google.Protobuf.WellKnownTypes.Duration();
                }
                input.ReadMessage(StartTimeOffset);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (startTimeOffset_ == null) {
                  StartTimeOffset = new global::Google.Protobuf.WellKnownTypes.Duration();
                }
                input.ReadMessage(StartTimeOffset);
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Animation types.
      /// </summary>
      public sealed partial class Animation : pb::IMessage<Animation>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Animation> _parser = new pb::MessageParser<Animation>(() => new Animation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Animation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Video.Transcoder.V1.Overlay.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Animation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Animation(Animation other) : this() {
          switch (other.AnimationTypeCase) {
            case AnimationTypeOneofCase.AnimationStatic:
              AnimationStatic = other.AnimationStatic.Clone();
              break;
            case AnimationTypeOneofCase.AnimationFade:
              AnimationFade = other.AnimationFade.Clone();
              break;
            case AnimationTypeOneofCase.AnimationEnd:
              AnimationEnd = other.AnimationEnd.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Animation Clone() {
          return new Animation(this);
        }

        /// <summary>Field number for the "animation_static" field.</summary>
        public const int AnimationStaticFieldNumber = 1;
        /// <summary>
        /// Display static overlay object.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.AnimationStatic AnimationStatic {
          get { return animationTypeCase_ == AnimationTypeOneofCase.AnimationStatic ? (global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.AnimationStatic) animationType_ : null; }
          set {
            animationType_ = value;
            animationTypeCase_ = value == null ? AnimationTypeOneofCase.None : AnimationTypeOneofCase.AnimationStatic;
          }
        }

        /// <summary>Field number for the "animation_fade" field.</summary>
        public const int AnimationFadeFieldNumber = 2;
        /// <summary>
        /// Display overlay object with fade animation.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.AnimationFade AnimationFade {
          get { return animationTypeCase_ == AnimationTypeOneofCase.AnimationFade ? (global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.AnimationFade) animationType_ : null; }
          set {
            animationType_ = value;
            animationTypeCase_ = value == null ? AnimationTypeOneofCase.None : AnimationTypeOneofCase.AnimationFade;
          }
        }

        /// <summary>Field number for the "animation_end" field.</summary>
        public const int AnimationEndFieldNumber = 3;
        /// <summary>
        /// End previous animation.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.AnimationEnd AnimationEnd {
          get { return animationTypeCase_ == AnimationTypeOneofCase.AnimationEnd ? (global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.AnimationEnd) animationType_ : null; }
          set {
            animationType_ = value;
            animationTypeCase_ = value == null ? AnimationTypeOneofCase.None : AnimationTypeOneofCase.AnimationEnd;
          }
        }

        private object animationType_;
        /// <summary>Enum of possible cases for the "animation_type" oneof.</summary>
        public enum AnimationTypeOneofCase {
          None = 0,
          AnimationStatic = 1,
          AnimationFade = 2,
          AnimationEnd = 3,
        }
        private AnimationTypeOneofCase animationTypeCase_ = AnimationTypeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnimationTypeOneofCase AnimationTypeCase {
          get { return animationTypeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAnimationType() {
          animationTypeCase_ = AnimationTypeOneofCase.None;
          animationType_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Animation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Animation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(AnimationStatic, other.AnimationStatic)) return false;
          if (!object.Equals(AnimationFade, other.AnimationFade)) return false;
          if (!object.Equals(AnimationEnd, other.AnimationEnd)) return false;
          if (AnimationTypeCase != other.AnimationTypeCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (animationTypeCase_ == AnimationTypeOneofCase.AnimationStatic) hash ^= AnimationStatic.GetHashCode();
          if (animationTypeCase_ == AnimationTypeOneofCase.AnimationFade) hash ^= AnimationFade.GetHashCode();
          if (animationTypeCase_ == AnimationTypeOneofCase.AnimationEnd) hash ^= AnimationEnd.GetHashCode();
          hash ^= (int) animationTypeCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (animationTypeCase_ == AnimationTypeOneofCase.AnimationStatic) {
            output.WriteRawTag(10);
            output.WriteMessage(AnimationStatic);
          }
          if (animationTypeCase_ == AnimationTypeOneofCase.AnimationFade) {
            output.WriteRawTag(18);
            output.WriteMessage(AnimationFade);
          }
          if (animationTypeCase_ == AnimationTypeOneofCase.AnimationEnd) {
            output.WriteRawTag(26);
            output.WriteMessage(AnimationEnd);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (animationTypeCase_ == AnimationTypeOneofCase.AnimationStatic) {
            output.WriteRawTag(10);
            output.WriteMessage(AnimationStatic);
          }
          if (animationTypeCase_ == AnimationTypeOneofCase.AnimationFade) {
            output.WriteRawTag(18);
            output.WriteMessage(AnimationFade);
          }
          if (animationTypeCase_ == AnimationTypeOneofCase.AnimationEnd) {
            output.WriteRawTag(26);
            output.WriteMessage(AnimationEnd);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (animationTypeCase_ == AnimationTypeOneofCase.AnimationStatic) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(AnimationStatic);
          }
          if (animationTypeCase_ == AnimationTypeOneofCase.AnimationFade) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(AnimationFade);
          }
          if (animationTypeCase_ == AnimationTypeOneofCase.AnimationEnd) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(AnimationEnd);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Animation other) {
          if (other == null) {
            return;
          }
          switch (other.AnimationTypeCase) {
            case AnimationTypeOneofCase.AnimationStatic:
              if (AnimationStatic == null) {
                AnimationStatic = new global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.AnimationStatic();
              }
              AnimationStatic.MergeFrom(other.AnimationStatic);
              break;
            case AnimationTypeOneofCase.AnimationFade:
              if (AnimationFade == null) {
                AnimationFade = new global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.AnimationFade();
              }
              AnimationFade.MergeFrom(other.AnimationFade);
              break;
            case AnimationTypeOneofCase.AnimationEnd:
              if (AnimationEnd == null) {
                AnimationEnd = new global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.AnimationEnd();
              }
              AnimationEnd.MergeFrom(other.AnimationEnd);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.AnimationStatic subBuilder = new global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.AnimationStatic();
                if (animationTypeCase_ == AnimationTypeOneofCase.AnimationStatic) {
                  subBuilder.MergeFrom(AnimationStatic);
                }
                input.ReadMessage(subBuilder);
                AnimationStatic = subBuilder;
                break;
              }
              case 18: {
                global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.AnimationFade subBuilder = new global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.AnimationFade();
                if (animationTypeCase_ == AnimationTypeOneofCase.AnimationFade) {
                  subBuilder.MergeFrom(AnimationFade);
                }
                input.ReadMessage(subBuilder);
                AnimationFade = subBuilder;
                break;
              }
              case 26: {
                global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.AnimationEnd subBuilder = new global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.AnimationEnd();
                if (animationTypeCase_ == AnimationTypeOneofCase.AnimationEnd) {
                  subBuilder.MergeFrom(AnimationEnd);
                }
                input.ReadMessage(subBuilder);
                AnimationEnd = subBuilder;
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.AnimationStatic subBuilder = new global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.AnimationStatic();
                if (animationTypeCase_ == AnimationTypeOneofCase.AnimationStatic) {
                  subBuilder.MergeFrom(AnimationStatic);
                }
                input.ReadMessage(subBuilder);
                AnimationStatic = subBuilder;
                break;
              }
              case 18: {
                global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.AnimationFade subBuilder = new global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.AnimationFade();
                if (animationTypeCase_ == AnimationTypeOneofCase.AnimationFade) {
                  subBuilder.MergeFrom(AnimationFade);
                }
                input.ReadMessage(subBuilder);
                AnimationFade = subBuilder;
                break;
              }
              case 26: {
                global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.AnimationEnd subBuilder = new global::Google.Cloud.Video.Transcoder.V1.Overlay.Types.AnimationEnd();
                if (animationTypeCase_ == AnimationTypeOneofCase.AnimationEnd) {
                  subBuilder.MergeFrom(AnimationEnd);
                }
                input.ReadMessage(subBuilder);
                AnimationEnd = subBuilder;
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// Preprocessing configurations.
  /// </summary>
  public sealed partial class PreprocessingConfig : pb::IMessage<PreprocessingConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PreprocessingConfig> _parser = new pb::MessageParser<PreprocessingConfig>(() => new PreprocessingConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PreprocessingConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Video.Transcoder.V1.ResourcesReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreprocessingConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreprocessingConfig(PreprocessingConfig other) : this() {
      color_ = other.color_ != null ? other.color_.Clone() : null;
      denoise_ = other.denoise_ != null ? other.denoise_.Clone() : null;
      deblock_ = other.deblock_ != null ? other.deblock_.Clone() : null;
      audio_ = other.audio_ != null ? other.audio_.Clone() : null;
      crop_ = other.crop_ != null ? other.crop_.Clone() : null;
      pad_ = other.pad_ != null ? other.pad_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreprocessingConfig Clone() {
      return new PreprocessingConfig(this);
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 1;
    private global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Color color_;
    /// <summary>
    /// Color preprocessing configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "denoise" field.</summary>
    public const int DenoiseFieldNumber = 2;
    private global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Denoise denoise_;
    /// <summary>
    /// Denoise preprocessing configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Denoise Denoise {
      get { return denoise_; }
      set {
        denoise_ = value;
      }
    }

    /// <summary>Field number for the "deblock" field.</summary>
    public const int DeblockFieldNumber = 3;
    private global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Deblock deblock_;
    /// <summary>
    /// Deblock preprocessing configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Deblock Deblock {
      get { return deblock_; }
      set {
        deblock_ = value;
      }
    }

    /// <summary>Field number for the "audio" field.</summary>
    public const int AudioFieldNumber = 4;
    private global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Audio audio_;
    /// <summary>
    /// Audio preprocessing configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Audio Audio {
      get { return audio_; }
      set {
        audio_ = value;
      }
    }

    /// <summary>Field number for the "crop" field.</summary>
    public const int CropFieldNumber = 5;
    private global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Crop crop_;
    /// <summary>
    /// Specify the video cropping configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Crop Crop {
      get { return crop_; }
      set {
        crop_ = value;
      }
    }

    /// <summary>Field number for the "pad" field.</summary>
    public const int PadFieldNumber = 6;
    private global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Pad pad_;
    /// <summary>
    /// Specify the video pad filter configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Pad Pad {
      get { return pad_; }
      set {
        pad_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PreprocessingConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PreprocessingConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Color, other.Color)) return false;
      if (!object.Equals(Denoise, other.Denoise)) return false;
      if (!object.Equals(Deblock, other.Deblock)) return false;
      if (!object.Equals(Audio, other.Audio)) return false;
      if (!object.Equals(Crop, other.Crop)) return false;
      if (!object.Equals(Pad, other.Pad)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (color_ != null) hash ^= Color.GetHashCode();
      if (denoise_ != null) hash ^= Denoise.GetHashCode();
      if (deblock_ != null) hash ^= Deblock.GetHashCode();
      if (audio_ != null) hash ^= Audio.GetHashCode();
      if (crop_ != null) hash ^= Crop.GetHashCode();
      if (pad_ != null) hash ^= Pad.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (color_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Color);
      }
      if (denoise_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Denoise);
      }
      if (deblock_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Deblock);
      }
      if (audio_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Audio);
      }
      if (crop_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Crop);
      }
      if (pad_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Pad);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (color_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Color);
      }
      if (denoise_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Denoise);
      }
      if (deblock_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Deblock);
      }
      if (audio_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Audio);
      }
      if (crop_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Crop);
      }
      if (pad_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Pad);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (denoise_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Denoise);
      }
      if (deblock_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deblock);
      }
      if (audio_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Audio);
      }
      if (crop_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Crop);
      }
      if (pad_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pad);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PreprocessingConfig other) {
      if (other == null) {
        return;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          Color = new global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Color();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.denoise_ != null) {
        if (denoise_ == null) {
          Denoise = new global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Denoise();
        }
        Denoise.MergeFrom(other.Denoise);
      }
      if (other.deblock_ != null) {
        if (deblock_ == null) {
          Deblock = new global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Deblock();
        }
        Deblock.MergeFrom(other.Deblock);
      }
      if (other.audio_ != null) {
        if (audio_ == null) {
          Audio = new global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Audio();
        }
        Audio.MergeFrom(other.Audio);
      }
      if (other.crop_ != null) {
        if (crop_ == null) {
          Crop = new global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Crop();
        }
        Crop.MergeFrom(other.Crop);
      }
      if (other.pad_ != null) {
        if (pad_ == null) {
          Pad = new global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Pad();
        }
        Pad.MergeFrom(other.Pad);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (color_ == null) {
              Color = new global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Color();
            }
            input.ReadMessage(Color);
            break;
          }
          case 18: {
            if (denoise_ == null) {
              Denoise = new global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Denoise();
            }
            input.ReadMessage(Denoise);
            break;
          }
          case 26: {
            if (deblock_ == null) {
              Deblock = new global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Deblock();
            }
            input.ReadMessage(Deblock);
            break;
          }
          case 34: {
            if (audio_ == null) {
              Audio = new global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Audio();
            }
            input.ReadMessage(Audio);
            break;
          }
          case 42: {
            if (crop_ == null) {
              Crop = new global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Crop();
            }
            input.ReadMessage(Crop);
            break;
          }
          case 50: {
            if (pad_ == null) {
              Pad = new global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Pad();
            }
            input.ReadMessage(Pad);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (color_ == null) {
              Color = new global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Color();
            }
            input.ReadMessage(Color);
            break;
          }
          case 18: {
            if (denoise_ == null) {
              Denoise = new global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Denoise();
            }
            input.ReadMessage(Denoise);
            break;
          }
          case 26: {
            if (deblock_ == null) {
              Deblock = new global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Deblock();
            }
            input.ReadMessage(Deblock);
            break;
          }
          case 34: {
            if (audio_ == null) {
              Audio = new global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Audio();
            }
            input.ReadMessage(Audio);
            break;
          }
          case 42: {
            if (crop_ == null) {
              Crop = new global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Crop();
            }
            input.ReadMessage(Crop);
            break;
          }
          case 50: {
            if (pad_ == null) {
              Pad = new global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Types.Pad();
            }
            input.ReadMessage(Pad);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the PreprocessingConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Color preprocessing configuration.
      /// </summary>
      public sealed partial class Color : pb::IMessage<Color>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Color> _parser = new pb::MessageParser<Color>(() => new Color());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Color> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Color() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Color(Color other) : this() {
          saturation_ = other.saturation_;
          contrast_ = other.contrast_;
          brightness_ = other.brightness_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Color Clone() {
          return new Color(this);
        }

        /// <summary>Field number for the "saturation" field.</summary>
        public const int SaturationFieldNumber = 1;
        private double saturation_;
        /// <summary>
        /// Control color saturation of the video. Enter a value between -1 and 1,
        /// where -1 is fully desaturated and 1 is maximum saturation. 0 is no
        /// change. The default is 0.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Saturation {
          get { return saturation_; }
          set {
            saturation_ = value;
          }
        }

        /// <summary>Field number for the "contrast" field.</summary>
        public const int ContrastFieldNumber = 2;
        private double contrast_;
        /// <summary>
        /// Control black and white contrast of the video. Enter a value between -1
        /// and 1, where -1 is minimum contrast and 1 is maximum contrast. 0 is no
        /// change. The default is 0.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Contrast {
          get { return contrast_; }
          set {
            contrast_ = value;
          }
        }

        /// <summary>Field number for the "brightness" field.</summary>
        public const int BrightnessFieldNumber = 3;
        private double brightness_;
        /// <summary>
        /// Control brightness of the video. Enter a value between -1 and 1, where -1
        /// is minimum brightness and 1 is maximum brightness. 0 is no change. The
        /// default is 0.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Brightness {
          get { return brightness_; }
          set {
            brightness_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Color);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Color other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Saturation, other.Saturation)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Contrast, other.Contrast)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Brightness, other.Brightness)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Saturation != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Saturation);
          if (Contrast != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Contrast);
          if (Brightness != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Brightness);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Saturation != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Saturation);
          }
          if (Contrast != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Contrast);
          }
          if (Brightness != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(Brightness);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Saturation != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Saturation);
          }
          if (Contrast != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Contrast);
          }
          if (Brightness != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(Brightness);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Saturation != 0D) {
            size += 1 + 8;
          }
          if (Contrast != 0D) {
            size += 1 + 8;
          }
          if (Brightness != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Color other) {
          if (other == null) {
            return;
          }
          if (other.Saturation != 0D) {
            Saturation = other.Saturation;
          }
          if (other.Contrast != 0D) {
            Contrast = other.Contrast;
          }
          if (other.Brightness != 0D) {
            Brightness = other.Brightness;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                Saturation = input.ReadDouble();
                break;
              }
              case 17: {
                Contrast = input.ReadDouble();
                break;
              }
              case 25: {
                Brightness = input.ReadDouble();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                Saturation = input.ReadDouble();
                break;
              }
              case 17: {
                Contrast = input.ReadDouble();
                break;
              }
              case 25: {
                Brightness = input.ReadDouble();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Denoise preprocessing configuration.
      /// </summary>
      public sealed partial class Denoise : pb::IMessage<Denoise>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Denoise> _parser = new pb::MessageParser<Denoise>(() => new Denoise());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Denoise> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Denoise() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Denoise(Denoise other) : this() {
          strength_ = other.strength_;
          tune_ = other.tune_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Denoise Clone() {
          return new Denoise(this);
        }

        /// <summary>Field number for the "strength" field.</summary>
        public const int StrengthFieldNumber = 1;
        private double strength_;
        /// <summary>
        /// Set strength of the denoise. Enter a value between 0 and 1. The higher
        /// the value, the smoother the image. 0 is no denoising. The default is 0.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Strength {
          get { return strength_; }
          set {
            strength_ = value;
          }
        }

        /// <summary>Field number for the "tune" field.</summary>
        public const int TuneFieldNumber = 2;
        private string tune_ = "";
        /// <summary>
        /// Set the denoiser mode. The default is `"standard"`.
        ///
        /// Supported denoiser modes:
        /// - 'standard'
        /// - 'grain'
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Tune {
          get { return tune_; }
          set {
            tune_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Denoise);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Denoise other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Strength, other.Strength)) return false;
          if (Tune != other.Tune) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Strength != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Strength);
          if (Tune.Length != 0) hash ^= Tune.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Strength != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Strength);
          }
          if (Tune.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Tune);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Strength != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Strength);
          }
          if (Tune.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Tune);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Strength != 0D) {
            size += 1 + 8;
          }
          if (Tune.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Tune);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Denoise other) {
          if (other == null) {
            return;
          }
          if (other.Strength != 0D) {
            Strength = other.Strength;
          }
          if (other.Tune.Length != 0) {
            Tune = other.Tune;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                Strength = input.ReadDouble();
                break;
              }
              case 18: {
                Tune = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                Strength = input.ReadDouble();
                break;
              }
              case 18: {
                Tune = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Deblock preprocessing configuration.
      /// </summary>
      public sealed partial class Deblock : pb::IMessage<Deblock>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Deblock> _parser = new pb::MessageParser<Deblock>(() => new Deblock());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Deblock> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Deblock() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Deblock(Deblock other) : this() {
          strength_ = other.strength_;
          enabled_ = other.enabled_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Deblock Clone() {
          return new Deblock(this);
        }

        /// <summary>Field number for the "strength" field.</summary>
        public const int StrengthFieldNumber = 1;
        private double strength_;
        /// <summary>
        /// Set strength of the deblocker. Enter a value between 0 and 1. The higher
        /// the value, the stronger the block removal. 0 is no deblocking. The
        /// default is 0.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Strength {
          get { return strength_; }
          set {
            strength_ = value;
          }
        }

        /// <summary>Field number for the "enabled" field.</summary>
        public const int EnabledFieldNumber = 2;
        private bool enabled_;
        /// <summary>
        /// Enable deblocker. The default is `false`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Enabled {
          get { return enabled_; }
          set {
            enabled_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Deblock);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Deblock other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Strength, other.Strength)) return false;
          if (Enabled != other.Enabled) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Strength != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Strength);
          if (Enabled != false) hash ^= Enabled.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Strength != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Strength);
          }
          if (Enabled != false) {
            output.WriteRawTag(16);
            output.WriteBool(Enabled);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Strength != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Strength);
          }
          if (Enabled != false) {
            output.WriteRawTag(16);
            output.WriteBool(Enabled);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Strength != 0D) {
            size += 1 + 8;
          }
          if (Enabled != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Deblock other) {
          if (other == null) {
            return;
          }
          if (other.Strength != 0D) {
            Strength = other.Strength;
          }
          if (other.Enabled != false) {
            Enabled = other.Enabled;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                Strength = input.ReadDouble();
                break;
              }
              case 16: {
                Enabled = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                Strength = input.ReadDouble();
                break;
              }
              case 16: {
                Enabled = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Audio preprocessing configuration.
      /// </summary>
      public sealed partial class Audio : pb::IMessage<Audio>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Audio> _parser = new pb::MessageParser<Audio>(() => new Audio());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Audio> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Audio() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Audio(Audio other) : this() {
          lufs_ = other.lufs_;
          highBoost_ = other.highBoost_;
          lowBoost_ = other.lowBoost_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Audio Clone() {
          return new Audio(this);
        }

        /// <summary>Field number for the "lufs" field.</summary>
        public const int LufsFieldNumber = 1;
        private double lufs_;
        /// <summary>
        /// Specify audio loudness normalization in loudness units relative to full
        /// scale (LUFS). Enter a value between -24 and 0 (the default), where:
        ///
        /// *   -24 is the Advanced Television Systems Committee (ATSC A/85) standard
        /// *   -23 is the EU R128 broadcast standard
        /// *   -19 is the prior standard for online mono audio
        /// *   -18 is the ReplayGain standard
        /// *   -16 is the prior standard for stereo audio
        /// *   -14 is the new online audio standard recommended by Spotify, as well
        ///     as Amazon Echo
        /// *   0 disables normalization
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Lufs {
          get { return lufs_; }
          set {
            lufs_ = value;
          }
        }

        /// <summary>Field number for the "high_boost" field.</summary>
        public const int HighBoostFieldNumber = 2;
        private bool highBoost_;
        /// <summary>
        /// Enable boosting high frequency components. The default is `false`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HighBoost {
          get { return highBoost_; }
          set {
            highBoost_ = value;
          }
        }

        /// <summary>Field number for the "low_boost" field.</summary>
        public const int LowBoostFieldNumber = 3;
        private bool lowBoost_;
        /// <summary>
        /// Enable boosting low frequency components. The default is `false`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool LowBoost {
          get { return lowBoost_; }
          set {
            lowBoost_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Audio);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Audio other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lufs, other.Lufs)) return false;
          if (HighBoost != other.HighBoost) return false;
          if (LowBoost != other.LowBoost) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Lufs != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lufs);
          if (HighBoost != false) hash ^= HighBoost.GetHashCode();
          if (LowBoost != false) hash ^= LowBoost.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Lufs != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Lufs);
          }
          if (HighBoost != false) {
            output.WriteRawTag(16);
            output.WriteBool(HighBoost);
          }
          if (LowBoost != false) {
            output.WriteRawTag(24);
            output.WriteBool(LowBoost);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Lufs != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Lufs);
          }
          if (HighBoost != false) {
            output.WriteRawTag(16);
            output.WriteBool(HighBoost);
          }
          if (LowBoost != false) {
            output.WriteRawTag(24);
            output.WriteBool(LowBoost);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Lufs != 0D) {
            size += 1 + 8;
          }
          if (HighBoost != false) {
            size += 1 + 1;
          }
          if (LowBoost != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Audio other) {
          if (other == null) {
            return;
          }
          if (other.Lufs != 0D) {
            Lufs = other.Lufs;
          }
          if (other.HighBoost != false) {
            HighBoost = other.HighBoost;
          }
          if (other.LowBoost != false) {
            LowBoost = other.LowBoost;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                Lufs = input.ReadDouble();
                break;
              }
              case 16: {
                HighBoost = input.ReadBool();
                break;
              }
              case 24: {
                LowBoost = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                Lufs = input.ReadDouble();
                break;
              }
              case 16: {
                HighBoost = input.ReadBool();
                break;
              }
              case 24: {
                LowBoost = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Video cropping configuration for the input video. The cropped input video
      /// is scaled to match the output resolution.
      /// </summary>
      public sealed partial class Crop : pb::IMessage<Crop>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Crop> _parser = new pb::MessageParser<Crop>(() => new Crop());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Crop> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Crop() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Crop(Crop other) : this() {
          topPixels_ = other.topPixels_;
          bottomPixels_ = other.bottomPixels_;
          leftPixels_ = other.leftPixels_;
          rightPixels_ = other.rightPixels_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Crop Clone() {
          return new Crop(this);
        }

        /// <summary>Field number for the "top_pixels" field.</summary>
        public const int TopPixelsFieldNumber = 1;
        private int topPixels_;
        /// <summary>
        /// The number of pixels to crop from the top. The default is 0.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TopPixels {
          get { return topPixels_; }
          set {
            topPixels_ = value;
          }
        }

        /// <summary>Field number for the "bottom_pixels" field.</summary>
        public const int BottomPixelsFieldNumber = 2;
        private int bottomPixels_;
        /// <summary>
        /// The number of pixels to crop from the bottom. The default is 0.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BottomPixels {
          get { return bottomPixels_; }
          set {
            bottomPixels_ = value;
          }
        }

        /// <summary>Field number for the "left_pixels" field.</summary>
        public const int LeftPixelsFieldNumber = 3;
        private int leftPixels_;
        /// <summary>
        /// The number of pixels to crop from the left. The default is 0.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int LeftPixels {
          get { return leftPixels_; }
          set {
            leftPixels_ = value;
          }
        }

        /// <summary>Field number for the "right_pixels" field.</summary>
        public const int RightPixelsFieldNumber = 4;
        private int rightPixels_;
        /// <summary>
        /// The number of pixels to crop from the right. The default is 0.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RightPixels {
          get { return rightPixels_; }
          set {
            rightPixels_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Crop);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Crop other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TopPixels != other.TopPixels) return false;
          if (BottomPixels != other.BottomPixels) return false;
          if (LeftPixels != other.LeftPixels) return false;
          if (RightPixels != other.RightPixels) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (TopPixels != 0) hash ^= TopPixels.GetHashCode();
          if (BottomPixels != 0) hash ^= BottomPixels.GetHashCode();
          if (LeftPixels != 0) hash ^= LeftPixels.GetHashCode();
          if (RightPixels != 0) hash ^= RightPixels.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (TopPixels != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(TopPixels);
          }
          if (BottomPixels != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(BottomPixels);
          }
          if (LeftPixels != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(LeftPixels);
          }
          if (RightPixels != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(RightPixels);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (TopPixels != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(TopPixels);
          }
          if (BottomPixels != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(BottomPixels);
          }
          if (LeftPixels != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(LeftPixels);
          }
          if (RightPixels != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(RightPixels);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (TopPixels != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TopPixels);
          }
          if (BottomPixels != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(BottomPixels);
          }
          if (LeftPixels != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftPixels);
          }
          if (RightPixels != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(RightPixels);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Crop other) {
          if (other == null) {
            return;
          }
          if (other.TopPixels != 0) {
            TopPixels = other.TopPixels;
          }
          if (other.BottomPixels != 0) {
            BottomPixels = other.BottomPixels;
          }
          if (other.LeftPixels != 0) {
            LeftPixels = other.LeftPixels;
          }
          if (other.RightPixels != 0) {
            RightPixels = other.RightPixels;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                TopPixels = input.ReadInt32();
                break;
              }
              case 16: {
                BottomPixels = input.ReadInt32();
                break;
              }
              case 24: {
                LeftPixels = input.ReadInt32();
                break;
              }
              case 32: {
                RightPixels = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                TopPixels = input.ReadInt32();
                break;
              }
              case 16: {
                BottomPixels = input.ReadInt32();
                break;
              }
              case 24: {
                LeftPixels = input.ReadInt32();
                break;
              }
              case 32: {
                RightPixels = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Pad filter configuration for the input video. The padded input video
      /// is scaled after padding with black to match the output resolution.
      /// </summary>
      public sealed partial class Pad : pb::IMessage<Pad>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Pad> _parser = new pb::MessageParser<Pad>(() => new Pad());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Pad> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Video.Transcoder.V1.PreprocessingConfig.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Pad() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Pad(Pad other) : this() {
          topPixels_ = other.topPixels_;
          bottomPixels_ = other.bottomPixels_;
          leftPixels_ = other.leftPixels_;
          rightPixels_ = other.rightPixels_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Pad Clone() {
          return new Pad(this);
        }

        /// <summary>Field number for the "top_pixels" field.</summary>
        public const int TopPixelsFieldNumber = 1;
        private int topPixels_;
        /// <summary>
        /// The number of pixels to add to the top. The default is 0.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TopPixels {
          get { return topPixels_; }
          set {
            topPixels_ = value;
          }
        }

        /// <summary>Field number for the "bottom_pixels" field.</summary>
        public const int BottomPixelsFieldNumber = 2;
        private int bottomPixels_;
        /// <summary>
        /// The number of pixels to add to the bottom. The default is 0.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BottomPixels {
          get { return bottomPixels_; }
          set {
            bottomPixels_ = value;
          }
        }

        /// <summary>Field number for the "left_pixels" field.</summary>
        public const int LeftPixelsFieldNumber = 3;
        private int leftPixels_;
        /// <summary>
        /// The number of pixels to add to the left. The default is 0.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int LeftPixels {
          get { return leftPixels_; }
          set {
            leftPixels_ = value;
          }
        }

        /// <summary>Field number for the "right_pixels" field.</summary>
        public const int RightPixelsFieldNumber = 4;
        private int rightPixels_;
        /// <summary>
        /// The number of pixels to add to the right. The default is 0.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RightPixels {
          get { return rightPixels_; }
          set {
            rightPixels_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Pad);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Pad other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TopPixels != other.TopPixels) return false;
          if (BottomPixels != other.BottomPixels) return false;
          if (LeftPixels != other.LeftPixels) return false;
          if (RightPixels != other.RightPixels) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (TopPixels != 0) hash ^= TopPixels.GetHashCode();
          if (BottomPixels != 0) hash ^= BottomPixels.GetHashCode();
          if (LeftPixels != 0) hash ^= LeftPixels.GetHashCode();
          if (RightPixels != 0) hash ^= RightPixels.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (TopPixels != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(TopPixels);
          }
          if (BottomPixels != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(BottomPixels);
          }
          if (LeftPixels != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(LeftPixels);
          }
          if (RightPixels != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(RightPixels);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (TopPixels != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(TopPixels);
          }
          if (BottomPixels != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(BottomPixels);
          }
          if (LeftPixels != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(LeftPixels);
          }
          if (RightPixels != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(RightPixels);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (TopPixels != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TopPixels);
          }
          if (BottomPixels != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(BottomPixels);
          }
          if (LeftPixels != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftPixels);
          }
          if (RightPixels != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(RightPixels);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Pad other) {
          if (other == null) {
            return;
          }
          if (other.TopPixels != 0) {
            TopPixels = other.TopPixels;
          }
          if (other.BottomPixels != 0) {
            BottomPixels = other.BottomPixels;
          }
          if (other.LeftPixels != 0) {
            LeftPixels = other.LeftPixels;
          }
          if (other.RightPixels != 0) {
            RightPixels = other.RightPixels;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                TopPixels = input.ReadInt32();
                break;
              }
              case 16: {
                BottomPixels = input.ReadInt32();
                break;
              }
              case 24: {
                LeftPixels = input.ReadInt32();
                break;
              }
              case 32: {
                RightPixels = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                TopPixels = input.ReadInt32();
                break;
              }
              case 16: {
                BottomPixels = input.ReadInt32();
                break;
              }
              case 24: {
                LeftPixels = input.ReadInt32();
                break;
              }
              case 32: {
                RightPixels = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// Video stream resource.
  /// </summary>
  public sealed partial class VideoStream : pb::IMessage<VideoStream>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VideoStream> _parser = new pb::MessageParser<VideoStream>(() => new VideoStream());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoStream> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Video.Transcoder.V1.ResourcesReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoStream() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoStream(VideoStream other) : this() {
      switch (other.CodecSettingsCase) {
        case CodecSettingsOneofCase.H264:
          H264 = other.H264.Clone();
          break;
        case CodecSettingsOneofCase.H265:
          H265 = other.H265.Clone();
          break;
        case CodecSettingsOneofCase.Vp9:
          Vp9 = other.Vp9.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoStream Clone() {
      return new VideoStream(this);
    }

    /// <summary>Field number for the "h264" field.</summary>
    public const int H264FieldNumber = 1;
    /// <summary>
    /// H264 codec settings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Video.Transcoder.V1.VideoStream.Types.H264CodecSettings H264 {
      get { return codecSettingsCase_ == CodecSettingsOneofCase.H264 ? (global::Google.Cloud.Video.Transcoder.V1.VideoStream.Types.H264CodecSettings) codecSettings_ : null; }
      set {
        codecSettings_ = value;
        codecSettingsCase_ = value == null ? CodecSettingsOneofCase.None : CodecSettingsOneofCase.H264;
      }
    }

    /// <summary>Field number for the "h265" field.</summary>
    public const int H265FieldNumber = 2;
    /// <summary>
    /// H265 codec settings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Video.Transcoder.V1.VideoStream.Types.H265CodecSettings H265 {
      get { return codecSettingsCase_ == CodecSettingsOneofCase.H265 ? (global::Google.Cloud.Video.Transcoder.V1.VideoStream.Types.H265CodecSettings) codecSettings_ : null; }
      set {
        codecSettings_ = value;
        codecSettingsCase_ = value == null ? CodecSettingsOneofCase.None : CodecSettingsOneofCase.H265;
      }
    }

    /// <summary>Field number for the "vp9" field.</summary>
    public const int Vp9FieldNumber = 3;
    /// <summary>
    /// VP9 codec settings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Video.Transcoder.V1.VideoStream.Types.Vp9CodecSettings Vp9 {
      get { return codecSettingsCase_ == CodecSettingsOneofCase.Vp9 ? (global::Google.Cloud.Video.Transcoder.V1.VideoStream.Types.Vp9CodecSettings) codecSettings_ : null; }
      set {
        codecSettings_ = value;
        codecSettingsCase_ = value == null ? CodecSettingsOneofCase.None : CodecSettingsOneofCase.Vp9;
      }
    }

    private object codecSettings_;
    /// <summary>Enum of possible cases for the "codec_settings" oneof.</summary>
    public enum CodecSettingsOneofCase {
      None = 0,
      H264 = 1,
      H265 = 2,
      Vp9 = 3,
    }
    private CodecSettingsOneofCase codecSettingsCase_ = CodecSettingsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CodecSettingsOneofCase CodecSettingsCase {
      get { return codecSettingsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCodecSettings() {
      codecSettingsCase_ = CodecSettingsOneofCase.None;
      codecSettings_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VideoStream);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VideoStream other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(H264, other.H264)) return false;
      if (!object.Equals(H265, other.H265)) return false;
      if (!object.Equals(Vp9, other.Vp9)) return false;
      if (CodecSettingsCase != other.CodecSettingsCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (codecSettingsCase_ == CodecSettingsOneofCase.H264) hash ^= H264.GetHashCode();
      if (codecSettingsCase_ == CodecSettingsOneofCase.H265) hash ^= H265.GetHashCode();
      if (codecSettingsCase_ == CodecSettingsOneofCase.Vp9) hash ^= Vp9.GetHashCode();
      hash ^= (int) codecSettingsCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (codecSettingsCase_ == CodecSettingsOneofCase.H264) {
        output.WriteRawTag(10);
        output.WriteMessage(H264);
      }
      if (codecSettingsCase_ == CodecSettingsOneofCase.H265) {
        output.WriteRawTag(18);
        output.WriteMessage(H265);
      }
      if (codecSettingsCase_ == CodecSettingsOneofCase.Vp9) {
        output.WriteRawTag(26);
        output.WriteMessage(Vp9);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (codecSettingsCase_ == CodecSettingsOneofCase.H264) {
        output.WriteRawTag(10);
        output.WriteMessage(H264);
      }
      if (codecSettingsCase_ == CodecSettingsOneofCase.H265) {
        output.WriteRawTag(18);
        output.WriteMessage(H265);
      }
      if (codecSettingsCase_ == CodecSettingsOneofCase.Vp9) {
        output.WriteRawTag(26);
        output.WriteMessage(Vp9);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (codecSettingsCase_ == CodecSettingsOneofCase.H264) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(H264);
      }
      if (codecSettingsCase_ == CodecSettingsOneofCase.H265) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(H265);
      }
      if (codecSettingsCase_ == CodecSettingsOneofCase.Vp9) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vp9);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VideoStream other) {
      if (other == null) {
        return;
      }
      switch (other.CodecSettingsCase) {
        case CodecSettingsOneofCase.H264:
          if (H264 == null) {
            H264 = new global::Google.Cloud.Video.Transcoder.V1.VideoStream.Types.H264CodecSettings();
          }
          H264.MergeFrom(other.H264);
          break;
        case CodecSettingsOneofCase.H265:
          if (H265 == null) {
            H265 = new global::Google.Cloud.Video.Transcoder.V1.VideoStream.Types.H265CodecSettings();
          }
          H265.MergeFrom(other.H265);
          break;
        case CodecSettingsOneofCase.Vp9:
          if (Vp9 == null) {
            Vp9 = new global::Google.Cloud.Video.Transcoder.V1.VideoStream.Types.Vp9CodecSettings();
          }
          Vp9.MergeFrom(other.Vp9);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Google.Cloud.Video.Transcoder.V1.VideoStream.Types.H264CodecSettings subBuilder = new global::Google.Cloud.Video.Transcoder.V1.VideoStream.Types.H264CodecSettings();
            if (codecSettingsCase_ == CodecSettingsOneofCase.H264) {
              subBuilder.MergeFrom(H264);
            }
            input.ReadMessage(subBuilder);
            H264 = subBuilder;
            break;
          }
          case 18: {
            global::Google.Cloud.Video.Transcoder.V1.VideoStream.Types.H265CodecSettings subBuilder = new global::Google.Cloud.Video.Transcoder.V1.VideoStream.Types.H265CodecSettings();
            if (codecSettingsCase_ == CodecSettingsOneofCase.H265) {
              subBuilder.MergeFrom(H265);
            }
            input.ReadMessage(subBuilder);
            H265 = subBuilder;
            break;
          }
          case 26: {
            global::Google.Cloud.Video.Transcoder.V1.VideoStream.Types.Vp9CodecSettings subBuilder = new global::Google.Cloud.Video.Transcoder.V1.VideoStream.Types.Vp9CodecSettings();
            if (codecSettingsCase_ == CodecSettingsOneofCase.Vp9) {
              subBuilder.MergeFrom(Vp9);
            }
            input.ReadMessage(subBuilder);
            Vp9 = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Google.Cloud.Video.Transcoder.V1.VideoStream.Types.H264CodecSettings subBuilder = new global::Google.Cloud.Video.Transcoder.V1.VideoStream.Types.H264CodecSettings();
            if (codecSettingsCase_ == CodecSettingsOneofCase.H264) {
              subBuilder.MergeFrom(H264);
            }
            input.ReadMessage(subBuilder);
            H264 = subBuilder;
            break;
          }
          case 18: {
            global::Google.Cloud.Video.Transcoder.V1.VideoStream.Types.H265CodecSettings subBuilder = new global::Google.Cloud.Video.Transcoder.V1.VideoStream.Types.H265CodecSettings();
            if (codecSettingsCase_ == CodecSettingsOneofCase.H265) {
              subBuilder.MergeFrom(H265);
            }
            input.ReadMessage(subBuilder);
            H265 = subBuilder;
            break;
          }
          case 26: {
            global::Google.Cloud.Video.Transcoder.V1.VideoStream.Types.Vp9CodecSettings subBuilder = new global::Google.Cloud.Video.Transcoder.V1.VideoStream.Types.Vp9CodecSettings();
            if (codecSettingsCase_ == CodecSettingsOneofCase.Vp9) {
              subBuilder.MergeFrom(Vp9);
            }
            input.ReadMessage(subBuilder);
            Vp9 = subBuilder;
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the VideoStream message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// H264 codec settings.
      /// </summary>
      public sealed partial class H264CodecSettings : pb::IMessage<H264CodecSettings>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<H264CodecSettings> _parser = new pb::MessageParser<H264CodecSettings>(() => new H264CodecSettings());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<H264CodecSettings> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Video.Transcoder.V1.VideoStream.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public H264CodecSettings() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public H264CodecSettings(H264CodecSettings other) : this() {
          widthPixels_ = other.widthPixels_;
          heightPixels_ = other.heightPixels_;
          frameRate_ = other.frameRate_;
          bitrateBps_ = other.bitrateBps_;
          pixelFormat_ = other.pixelFormat_;
          rateControlMode_ = other.rateControlMode_;
          crfLevel_ = other.crfLevel_;
          allowOpenGop_ = other.allowOpenGop_;
          enableTwoPass_ = other.enableTwoPass_;
          vbvSizeBits_ = other.vbvSizeBits_;
          vbvFullnessBits_ = other.vbvFullnessBits_;
          entropyCoder_ = other.entropyCoder_;
          bPyramid_ = other.bPyramid_;
          bFrameCount_ = other.bFrameCount_;
          aqStrength_ = other.aqStrength_;
          profile_ = other.profile_;
          tune_ = other.tune_;
          preset_ = other.preset_;
          switch (other.GopModeCase) {
            case GopModeOneofCase.GopFrameCount:
              GopFrameCount = other.GopFrameCount;
              break;
            case GopModeOneofCase.GopDuration:
              GopDuration = other.GopDuration.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public H264CodecSettings Clone() {
          return new H264CodecSettings(this);
        }

        /// <summary>Field number for the "width_pixels" field.</summary>
        public const int WidthPixelsFieldNumber = 1;
        private int widthPixels_;
        /// <summary>
        /// The width of the video in pixels. Must be an even integer.
        /// When not specified, the width is adjusted to match the specified height
        /// and input aspect ratio. If both are omitted, the input width is used.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int WidthPixels {
          get { return widthPixels_; }
          set {
            widthPixels_ = value;
          }
        }

        /// <summary>Field number for the "height_pixels" field.</summary>
        public const int HeightPixelsFieldNumber = 2;
        private int heightPixels_;
        /// <summary>
        /// The height of the video in pixels. Must be an even integer.
        /// When not specified, the height is adjusted to match the specified width
        /// and input aspect ratio. If both are omitted, the input height is used.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int HeightPixels {
          get { return heightPixels_; }
          set {
            heightPixels_ = value;
          }
        }

        /// <summary>Field number for the "frame_rate" field.</summary>
        public const int FrameRateFieldNumber = 3;
        private double frameRate_;
        /// <summary>
        /// Required. The target video frame rate in frames per second (FPS). Must be less than
        /// or equal to 120. Will default to the input frame rate if larger than the
        /// input frame rate. The API will generate an output FPS that is divisible
        /// by the input FPS, and smaller or equal to the target FPS. See
        /// [Calculating frame
        /// rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for
        /// more information.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double FrameRate {
          get { return frameRate_; }
          set {
            frameRate_ = value;
          }
        }

        /// <summary>Field number for the "bitrate_bps" field.</summary>
        public const int BitrateBpsFieldNumber = 4;
        private int bitrateBps_;
        /// <summary>
        /// Required. The video bitrate in bits per second. Must be between 1 and
        /// 1,000,000,000.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BitrateBps {
          get { return bitrateBps_; }
          set {
            bitrateBps_ = value;
          }
        }

        /// <summary>Field number for the "pixel_format" field.</summary>
        public const int PixelFormatFieldNumber = 5;
        private string pixelFormat_ = "";
        /// <summary>
        /// Pixel format to use. The default is `"yuv420p"`.
        ///
        /// Supported pixel formats:
        /// - 'yuv420p' pixel format.
        /// - 'yuv422p' pixel format.
        /// - 'yuv444p' pixel format.
        /// - 'yuv420p10' 10-bit HDR pixel format.
        /// - 'yuv422p10' 10-bit HDR pixel format.
        /// - 'yuv444p10' 10-bit HDR pixel format.
        /// - 'yuv420p12' 12-bit HDR pixel format.
        /// - 'yuv422p12' 12-bit HDR pixel format.
        /// - 'yuv444p12' 12-bit HDR pixel format.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PixelFormat {
          get { return pixelFormat_; }
          set {
            pixelFormat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "rate_control_mode" field.</summary>
        public const int RateControlModeFieldNumber = 6;
        private string rateControlMode_ = "";
        /// <summary>
        /// Specify the `rate_control_mode`. The default is `"vbr"`.
        ///
        /// Supported rate control modes:
        /// - 'vbr' - variable bitrate
        /// - 'crf' - constant rate factor
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RateControlMode {
          get { return rateControlMode_; }
          set {
            rateControlMode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "crf_level" field.</summary>
        public const int CrfLevelFieldNumber = 7;
        private int crfLevel_;
        /// <summary>
        /// Target CRF level. Must be between 10 and 36, where 10 is the highest
        /// quality and 36 is the most efficient compression. The default is 21.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CrfLevel {
          get { return crfLevel_; }
          set {
            crfLevel_ = value;
          }
        }

        /// <summary>Field number for the "allow_open_gop" field.</summary>
        public const int AllowOpenGopFieldNumber = 8;
        private bool allowOpenGop_;
        /// <summary>
        /// Specifies whether an open Group of Pictures (GOP) structure should be
        /// allowed or not. The default is `false`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool AllowOpenGop {
          get { return allowOpenGop_; }
          set {
            allowOpenGop_ = value;
          }
        }

        /// <summary>Field number for the "gop_frame_count" field.</summary>
        public const int GopFrameCountFieldNumber = 9;
        /// <summary>
        /// Select the GOP size based on the specified frame count. Must be greater
        /// than zero.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int GopFrameCount {
          get { return gopModeCase_ == GopModeOneofCase.GopFrameCount ? (int) gopMode_ : 0; }
          set {
            gopMode_ = value;
            gopModeCase_ = GopModeOneofCase.GopFrameCount;
          }
        }

        /// <summary>Field number for the "gop_duration" field.</summary>
        public const int GopDurationFieldNumber = 10;
        /// <summary>
        /// Select the GOP size based on the specified duration. The default is
        /// `"3s"`. Note that `gopDuration` must be less than or equal to
        /// [`segmentDuration`](#SegmentSettings), and
        /// [`segmentDuration`](#SegmentSettings) must be divisible by
        /// `gopDuration`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Duration GopDuration {
          get { return gopModeCase_ == GopModeOneofCase.GopDuration ? (global::Google.Protobuf.WellKnownTypes.Duration) gopMode_ : null; }
          set {
            gopMode_ = value;
            gopModeCase_ = value == null ? GopModeOneofCase.None : GopModeOneofCase.GopDuration;
          }
        }

        /// <summary>Field number for the "enable_two_pass" field.</summary>
        public const int EnableTwoPassFieldNumber = 11;
        private bool enableTwoPass_;
        /// <summary>
        /// Use two-pass encoding strategy to achieve better video quality.
        /// `VideoStream.rate_control_mode` must be `"vbr"`. The default is `false`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool EnableTwoPass {
          get { return enableTwoPass_; }
          set {
            enableTwoPass_ = value;
          }
        }

        /// <summary>Field number for the "vbv_size_bits" field.</summary>
        public const int VbvSizeBitsFieldNumber = 12;
        private int vbvSizeBits_;
        /// <summary>
        /// Size of the Video Buffering Verifier (VBV) buffer in bits. Must be
        /// greater than zero. The default is equal to `VideoStream.bitrate_bps`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int VbvSizeBits {
          get { return vbvSizeBits_; }
          set {
            vbvSizeBits_ = value;
          }
        }

        /// <summary>Field number for the "vbv_fullness_bits" field.</summary>
        public const int VbvFullnessBitsFieldNumber = 13;
        private int vbvFullnessBits_;
        /// <summary>
        /// Initial fullness of the Video Buffering Verifier (VBV) buffer in bits.
        /// Must be greater than zero. The default is equal to 90% of
        /// `VideoStream.vbv_size_bits`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int VbvFullnessBits {
          get { return vbvFullnessBits_; }
          set {
            vbvFullnessBits_ = value;
          }
        }

        /// <summary>Field number for the "entropy_coder" field.</summary>
        public const int EntropyCoderFieldNumber = 14;
        private string entropyCoder_ = "";
        /// <summary>
        /// The entropy coder to use. The default is `"cabac"`.
        ///
        /// Supported entropy coders:
        /// - 'cavlc'
        /// - 'cabac'
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EntropyCoder {
          get { return entropyCoder_; }
          set {
            entropyCoder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "b_pyramid" field.</summary>
        public const int BPyramidFieldNumber = 15;
        private bool bPyramid_;
        /// <summary>
        /// Allow B-pyramid for reference frame selection. This may not be supported
        /// on all decoders. The default is `false`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool BPyramid {
          get { return bPyramid_; }
          set {
            bPyramid_ = value;
          }
        }

        /// <summary>Field number for the "b_frame_count" field.</summary>
        public const int BFrameCountFieldNumber = 16;
        private int bFrameCount_;
        /// <summary>
        /// The number of consecutive B-frames. Must be greater than or equal to
        /// zero. Must be less than `VideoStream.gop_frame_count` if set. The default
        /// is 0.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BFrameCount {
          get { return bFrameCount_; }
          set {
            bFrameCount_ = value;
          }
        }

        /// <summary>Field number for the "aq_strength" field.</summary>
        public const int AqStrengthFieldNumber = 17;
        private double aqStrength_;
        /// <summary>
        /// Specify the intensity of the adaptive quantizer (AQ). Must be between 0
        /// and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A
        /// higher value equals a lower bitrate but smoother image. The default is 0.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double AqStrength {
          get { return aqStrength_; }
          set {
            aqStrength_ = value;
          }
        }

        /// <summary>Field number for the "profile" field.</summary>
        public const int ProfileFieldNumber = 18;
        private string profile_ = "";
        /// <summary>
        /// Enforces the specified codec profile. The following profiles are
        /// supported:
        ///
        /// *   `baseline`
        /// *   `main`
        /// *   `high` (default)
        ///
        /// The available options are
        /// [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Profile){:
        /// class="external" }. Note that certain values for this field may cause the
        /// transcoder to override other fields you set in the `H264CodecSettings`
        /// message.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Profile {
          get { return profile_; }
          set {
            profile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "tune" field.</summary>
        public const int TuneFieldNumber = 19;
        private string tune_ = "";
        /// <summary>
        /// Enforces the specified codec tune. The available options are
        /// [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune){:
        /// class="external" }. Note that certain values for this field may cause the
        /// transcoder to override other fields you set in the `H264CodecSettings`
        /// message.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Tune {
          get { return tune_; }
          set {
            tune_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "preset" field.</summary>
        public const int PresetFieldNumber = 20;
        private string preset_ = "";
        /// <summary>
        /// Enforces the specified codec preset. The default is `veryfast`. The
        /// available options are
        /// [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Preset){:
        /// class="external" }. Note that certain values for this field may cause the
        /// transcoder to override other fields you set in the `H264CodecSettings`
        /// message.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Preset {
          get { return preset_; }
          set {
            preset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        private object gopMode_;
        /// <summary>Enum of possible cases for the "gop_mode" oneof.</summary>
        public enum GopModeOneofCase {
          None = 0,
          GopFrameCount = 9,
          GopDuration = 10,
        }
        private GopModeOneofCase gopModeCase_ = GopModeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GopModeOneofCase GopModeCase {
          get { return gopModeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGopMode() {
          gopModeCase_ = GopModeOneofCase.None;
          gopMode_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as H264CodecSettings);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(H264CodecSettings other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (WidthPixels != other.WidthPixels) return false;
          if (HeightPixels != other.HeightPixels) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FrameRate, other.FrameRate)) return false;
          if (BitrateBps != other.BitrateBps) return false;
          if (PixelFormat != other.PixelFormat) return false;
          if (RateControlMode != other.RateControlMode) return false;
          if (CrfLevel != other.CrfLevel) return false;
          if (AllowOpenGop != other.AllowOpenGop) return false;
          if (GopFrameCount != other.GopFrameCount) return false;
          if (!object.Equals(GopDuration, other.GopDuration)) return false;
          if (EnableTwoPass != other.EnableTwoPass) return false;
          if (VbvSizeBits != other.VbvSizeBits) return false;
          if (VbvFullnessBits != other.VbvFullnessBits) return false;
          if (EntropyCoder != other.EntropyCoder) return false;
          if (BPyramid != other.BPyramid) return false;
          if (BFrameCount != other.BFrameCount) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AqStrength, other.AqStrength)) return false;
          if (Profile != other.Profile) return false;
          if (Tune != other.Tune) return false;
          if (Preset != other.Preset) return false;
          if (GopModeCase != other.GopModeCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (WidthPixels != 0) hash ^= WidthPixels.GetHashCode();
          if (HeightPixels != 0) hash ^= HeightPixels.GetHashCode();
          if (FrameRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FrameRate);
          if (BitrateBps != 0) hash ^= BitrateBps.GetHashCode();
          if (PixelFormat.Length != 0) hash ^= PixelFormat.GetHashCode();
          if (RateControlMode.Length != 0) hash ^= RateControlMode.GetHashCode();
          if (CrfLevel != 0) hash ^= CrfLevel.GetHashCode();
          if (AllowOpenGop != false) hash ^= AllowOpenGop.GetHashCode();
          if (gopModeCase_ == GopModeOneofCase.GopFrameCount) hash ^= GopFrameCount.GetHashCode();
          if (gopModeCase_ == GopModeOneofCase.GopDuration) hash ^= GopDuration.GetHashCode();
          if (EnableTwoPass != false) hash ^= EnableTwoPass.GetHashCode();
          if (VbvSizeBits != 0) hash ^= VbvSizeBits.GetHashCode();
          if (VbvFullnessBits != 0) hash ^= VbvFullnessBits.GetHashCode();
          if (EntropyCoder.Length != 0) hash ^= EntropyCoder.GetHashCode();
          if (BPyramid != false) hash ^= BPyramid.GetHashCode();
          if (BFrameCount != 0) hash ^= BFrameCount.GetHashCode();
          if (AqStrength != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AqStrength);
          if (Profile.Length != 0) hash ^= Profile.GetHashCode();
          if (Tune.Length != 0) hash ^= Tune.GetHashCode();
          if (Preset.Length != 0) hash ^= Preset.GetHashCode();
          hash ^= (int) gopModeCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (WidthPixels != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(WidthPixels);
          }
          if (HeightPixels != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(HeightPixels);
          }
          if (FrameRate != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(FrameRate);
          }
          if (BitrateBps != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(BitrateBps);
          }
          if (PixelFormat.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(PixelFormat);
          }
          if (RateControlMode.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(RateControlMode);
          }
          if (CrfLevel != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(CrfLevel);
          }
          if (AllowOpenGop != false) {
            output.WriteRawTag(64);
            output.WriteBool(AllowOpenGop);
          }
          if (gopModeCase_ == GopModeOneofCase.GopFrameCount) {
            output.WriteRawTag(72);
            output.WriteInt32(GopFrameCount);
          }
          if (gopModeCase_ == GopModeOneofCase.GopDuration) {
            output.WriteRawTag(82);
            output.WriteMessage(GopDuration);
          }
          if (EnableTwoPass != false) {
            output.WriteRawTag(88);
            output.WriteBool(EnableTwoPass);
          }
          if (VbvSizeBits != 0) {
            output.WriteRawTag(96);
            output.WriteInt32(VbvSizeBits);
          }
          if (VbvFullnessBits != 0) {
            output.WriteRawTag(104);
            output.WriteInt32(VbvFullnessBits);
          }
          if (EntropyCoder.Length != 0) {
            output.WriteRawTag(114);
            output.WriteString(EntropyCoder);
          }
          if (BPyramid != false) {
            output.WriteRawTag(120);
            output.WriteBool(BPyramid);
          }
          if (BFrameCount != 0) {
            output.WriteRawTag(128, 1);
            output.WriteInt32(BFrameCount);
          }
          if (AqStrength != 0D) {
            output.WriteRawTag(137, 1);
            output.WriteDouble(AqStrength);
          }
          if (Profile.Length != 0) {
            output.WriteRawTag(146, 1);
            output.WriteString(Profile);
          }
          if (Tune.Length != 0) {
            output.WriteRawTag(154, 1);
            output.WriteString(Tune);
          }
          if (Preset.Length != 0) {
            output.WriteRawTag(162, 1);
            output.WriteString(Preset);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (WidthPixels != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(WidthPixels);
          }
          if (HeightPixels != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(HeightPixels);
          }
          if (FrameRate != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(FrameRate);
          }
          if (BitrateBps != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(BitrateBps);
          }
          if (PixelFormat.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(PixelFormat);
          }
          if (RateControlMode.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(RateControlMode);
          }
          if (CrfLevel != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(CrfLevel);
          }
          if (AllowOpenGop != false) {
            output.WriteRawTag(64);
            output.WriteBool(AllowOpenGop);
          }
          if (gopModeCase_ == GopModeOneofCase.GopFrameCount) {
            output.WriteRawTag(72);
            output.WriteInt32(GopFrameCount);
          }
          if (gopModeCase_ == GopModeOneofCase.GopDuration) {
            output.WriteRawTag(82);
            output.WriteMessage(GopDuration);
          }
          if (EnableTwoPass != false) {
            output.WriteRawTag(88);
            output.WriteBool(EnableTwoPass);
          }
          if (VbvSizeBits != 0) {
            output.WriteRawTag(96);
            output.WriteInt32(VbvSizeBits);
          }
          if (VbvFullnessBits != 0) {
            output.WriteRawTag(104);
            output.WriteInt32(VbvFullnessBits);
          }
          if (EntropyCoder.Length != 0) {
            output.WriteRawTag(114);
            output.WriteString(EntropyCoder);
          }
          if (BPyramid != false) {
            output.WriteRawTag(120);
            output.WriteBool(BPyramid);
          }
          if (BFrameCount != 0) {
            output.WriteRawTag(128, 1);
            output.WriteInt32(BFrameCount);
          }
          if (AqStrength != 0D) {
            output.WriteRawTag(137, 1);
            output.WriteDouble(AqStrength);
          }
          if (Profile.Length != 0) {
            output.WriteRawTag(146, 1);
            output.WriteString(Profile);
          }
          if (Tune.Length != 0) {
            output.WriteRawTag(154, 1);
            output.WriteString(Tune);
          }
          if (Preset.Length != 0) {
            output.WriteRawTag(162, 1);
            output.WriteString(Preset);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (WidthPixels != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(WidthPixels);
          }
          if (HeightPixels != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeightPixels);
          }
          if (FrameRate != 0D) {
            size += 1 + 8;
          }
          if (BitrateBps != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(BitrateBps);
          }
          if (PixelFormat.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PixelFormat);
          }
          if (RateControlMode.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RateControlMode);
          }
          if (CrfLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CrfLevel);
          }
          if (AllowOpenGop != false) {
            size += 1 + 1;
          }
          if (gopModeCase_ == GopModeOneofCase.GopFrameCount) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(GopFrameCount);
          }
          if (gopModeCase_ == GopModeOneofCase.GopDuration) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(GopDuration);
          }
          if (EnableTwoPass != false) {
            size += 1 + 1;
          }
          if (VbvSizeBits != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(VbvSizeBits);
          }
          if (VbvFullnessBits != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(VbvFullnessBits);
          }
          if (EntropyCoder.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(EntropyCoder);
          }
          if (BPyramid != false) {
            size += 1 + 1;
          }
          if (BFrameCount != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(BFrameCount);
          }
          if (AqStrength != 0D) {
            size += 2 + 8;
          }
          if (Profile.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(Profile);
          }
          if (Tune.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(Tune);
          }
          if (Preset.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(Preset);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(H264CodecSettings other) {
          if (other == null) {
            return;
          }
          if (other.WidthPixels != 0) {
            WidthPixels = other.WidthPixels;
          }
          if (other.HeightPixels != 0) {
            HeightPixels = other.HeightPixels;
          }
          if (other.FrameRate != 0D) {
            FrameRate = other.FrameRate;
          }
          if (other.BitrateBps != 0) {
            BitrateBps = other.BitrateBps;
          }
          if (other.PixelFormat.Length != 0) {
            PixelFormat = other.PixelFormat;
          }
          if (other.RateControlMode.Length != 0) {
            RateControlMode = other.RateControlMode;
          }
          if (other.CrfLevel != 0) {
            CrfLevel = other.CrfLevel;
          }
          if (other.AllowOpenGop != false) {
            AllowOpenGop = other.AllowOpenGop;
          }
          if (other.EnableTwoPass != false) {
            EnableTwoPass = other.EnableTwoPass;
          }
          if (other.VbvSizeBits != 0) {
            VbvSizeBits = other.VbvSizeBits;
          }
          if (other.VbvFullnessBits != 0) {
            VbvFullnessBits = other.VbvFullnessBits;
          }
          if (other.EntropyCoder.Length != 0) {
            EntropyCoder = other.EntropyCoder;
          }
          if (other.BPyramid != false) {
            BPyramid = other.BPyramid;
          }
          if (other.BFrameCount != 0) {
            BFrameCount = other.BFrameCount;
          }
          if (other.AqStrength != 0D) {
            AqStrength = other.AqStrength;
          }
          if (other.Profile.Length != 0) {
            Profile = other.Profile;
          }
          if (other.Tune.Length != 0) {
            Tune = other.Tune;
          }
          if (other.Preset.Length != 0) {
            Preset = other.Preset;
          }
          switch (other.GopModeCase) {
            case GopModeOneofCase.GopFrameCount:
              GopFrameCount = other.GopFrameCount;
              break;
            case GopModeOneofCase.GopDuration:
              if (GopDuration == null) {
                GopDuration = new global::Google.Protobuf.WellKnownTypes.Duration();
              }
              GopDuration.MergeFrom(other.GopDuration);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                WidthPixels = input.ReadInt32();
                break;
              }
              case 16: {
                HeightPixels = input.ReadInt32();
                break;
              }
              case 25: {
                FrameRate = input.ReadDouble();
                break;
              }
              case 32: {
                BitrateBps = input.ReadInt32();
                break;
              }
              case 42: {
                PixelFormat = input.ReadString();
                break;
              }
              case 50: {
                RateControlMode = input.ReadString();
                break;
              }
              case 56: {
                CrfLevel = input.ReadInt32();
                break;
              }
              case 64: {
                AllowOpenGop = input.ReadBool();
                break;
              }
              case 72: {
                GopFrameCount = input.ReadInt32();
                break;
              }
              case 82: {
                global::Google.Protobuf.WellKnownTypes.Duration subBuilder = new global::Google.Protobuf.WellKnownTypes.Duration();
                if (gopModeCase_ == GopModeOneofCase.GopDuration) {
                  subBuilder.MergeFrom(GopDuration);
                }
                input.ReadMessage(subBuilder);
                GopDuration = subBuilder;
                break;
              }
              case 88: {
                EnableTwoPass = input.ReadBool();
                break;
              }
              case 96: {
                VbvSizeBits = input.ReadInt32();
                break;
              }
              case 104: {
                VbvFullnessBits = input.ReadInt32();
                break;
              }
              case 114: {
                EntropyCoder = input.ReadString();
                break;
              }
              case 120: {
                BPyramid = input.ReadBool();
                break;
              }
              case 128: {
                BFrameCount = input.ReadInt32();
                break;
              }
              case 137: {
                AqStrength = input.ReadDouble();
                break;
              }
              case 146: {
                Profile = input.ReadString();
                break;
              }
              case 154: {
                Tune = input.ReadString();
                break;
              }
              case 162: {
                Preset = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                WidthPixels = input.ReadInt32();
                break;
              }
              case 16: {
                HeightPixels = input.ReadInt32();
                break;
              }
              case 25: {
                FrameRate = input.ReadDouble();
                break;
              }
              case 32: {
                BitrateBps = input.ReadInt32();
                break;
              }
              case 42: {
                PixelFormat = input.ReadString();
                break;
              }
              case 50: {
                RateControlMode = input.ReadString();
                break;
              }
              case 56: {
                CrfLevel = input.ReadInt32();
                break;
              }
              case 64: {
                AllowOpenGop = input.ReadBool();
                break;
              }
              case 72: {
                GopFrameCount = input.ReadInt32();
                break;
              }
              case 82: {
                global::Google.Protobuf.WellKnownTypes.Duration subBuilder = new global::Google.Protobuf.WellKnownTypes.Duration();
                if (gopModeCase_ == GopModeOneofCase.GopDuration) {
                  subBuilder.MergeFrom(GopDuration);
                }
                input.ReadMessage(subBuilder);
                GopDuration = subBuilder;
                break;
              }
              case 88: {
                EnableTwoPass = input.ReadBool();
                break;
              }
              case 96: {
                VbvSizeBits = input.ReadInt32();
                break;
              }
              case 104: {
                VbvFullnessBits = input.ReadInt32();
                break;
              }
              case 114: {
                EntropyCoder = input.ReadString();
                break;
              }
              case 120: {
                BPyramid = input.ReadBool();
                break;
              }
              case 128: {
                BFrameCount = input.ReadInt32();
                break;
              }
              case 137: {
                AqStrength = input.ReadDouble();
                break;
              }
              case 146: {
                Profile = input.ReadString();
                break;
              }
              case 154: {
                Tune = input.ReadString();
                break;
              }
              case 162: {
                Preset = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// H265 codec settings.
      /// </summary>
      public sealed partial class H265CodecSettings : pb::IMessage<H265CodecSettings>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<H265CodecSettings> _parser = new pb::MessageParser<H265CodecSettings>(() => new H265CodecSettings());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<H265CodecSettings> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Video.Transcoder.V1.VideoStream.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public H265CodecSettings() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public H265CodecSettings(H265CodecSettings other) : this() {
          widthPixels_ = other.widthPixels_;
          heightPixels_ = other.heightPixels_;
          frameRate_ = other.frameRate_;
          bitrateBps_ = other.bitrateBps_;
          pixelFormat_ = other.pixelFormat_;
          rateControlMode_ = other.rateControlMode_;
          crfLevel_ = other.crfLevel_;
          allowOpenGop_ = other.allowOpenGop_;
          enableTwoPass_ = other.enableTwoPass_;
          vbvSizeBits_ = other.vbvSizeBits_;
          vbvFullnessBits_ = other.vbvFullnessBits_;
          bPyramid_ = other.bPyramid_;
          bFrameCount_ = other.bFrameCount_;
          aqStrength_ = other.aqStrength_;
          profile_ = other.profile_;
          tune_ = other.tune_;
          preset_ = other.preset_;
          switch (other.GopModeCase) {
            case GopModeOneofCase.GopFrameCount:
              GopFrameCount = other.GopFrameCount;
              break;
            case GopModeOneofCase.GopDuration:
              GopDuration = other.GopDuration.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public H265CodecSettings Clone() {
          return new H265CodecSettings(this);
        }

        /// <summary>Field number for the "width_pixels" field.</summary>
        public const int WidthPixelsFieldNumber = 1;
        private int widthPixels_;
        /// <summary>
        /// The width of the video in pixels. Must be an even integer.
        /// When not specified, the width is adjusted to match the specified height
        /// and input aspect ratio. If both are omitted, the input width is used.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int WidthPixels {
          get { return widthPixels_; }
          set {
            widthPixels_ = value;
          }
        }

        /// <summary>Field number for the "height_pixels" field.</summary>
        public const int HeightPixelsFieldNumber = 2;
        private int heightPixels_;
        /// <summary>
        /// The height of the video in pixels. Must be an even integer.
        /// When not specified, the height is adjusted to match the specified width
        /// and input aspect ratio. If both are omitted, the input height is used.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int HeightPixels {
          get { return heightPixels_; }
          set {
            heightPixels_ = value;
          }
        }

        /// <summary>Field number for the "frame_rate" field.</summary>
        public const int FrameRateFieldNumber = 3;
        private double frameRate_;
        /// <summary>
        /// Required. The target video frame rate in frames per second (FPS). Must be less than
        /// or equal to 120. Will default to the input frame rate if larger than the
        /// input frame rate. The API will generate an output FPS that is divisible
        /// by the input FPS, and smaller or equal to the target FPS. See
        /// [Calculating frame
        /// rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for
        /// more information.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double FrameRate {
          get { return frameRate_; }
          set {
            frameRate_ = value;
          }
        }

        /// <summary>Field number for the "bitrate_bps" field.</summary>
        public const int BitrateBpsFieldNumber = 4;
        private int bitrateBps_;
        /// <summary>
        /// Required. The video bitrate in bits per second. Must be between 1 and
        /// 1,000,000,000.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BitrateBps {
          get { return bitrateBps_; }
          set {
            bitrateBps_ = value;
          }
        }

        /// <summary>Field number for the "pixel_format" field.</summary>
        public const int PixelFormatFieldNumber = 5;
        private string pixelFormat_ = "";
        /// <summary>
        /// Pixel format to use. The default is `"yuv420p"`.
        ///
        /// Supported pixel formats:
        /// - 'yuv420p' pixel format.
        /// - 'yuv422p' pixel format.
        /// - 'yuv444p' pixel format.
        /// - 'yuv420p10' 10-bit HDR pixel format.
        /// - 'yuv422p10' 10-bit HDR pixel format.
        /// - 'yuv444p10' 10-bit HDR pixel format.
        /// - 'yuv420p12' 12-bit HDR pixel format.
        /// - 'yuv422p12' 12-bit HDR pixel format.
        /// - 'yuv444p12' 12-bit HDR pixel format.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PixelFormat {
          get { return pixelFormat_; }
          set {
            pixelFormat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "rate_control_mode" field.</summary>
        public const int RateControlModeFieldNumber = 6;
        private string rateControlMode_ = "";
        /// <summary>
        /// Specify the `rate_control_mode`. The default is `"vbr"`.
        ///
        /// Supported rate control modes:
        /// - 'vbr' - variable bitrate
        /// - 'crf' - constant rate factor
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RateControlMode {
          get { return rateControlMode_; }
          set {
            rateControlMode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "crf_level" field.</summary>
        public const int CrfLevelFieldNumber = 7;
        private int crfLevel_;
        /// <summary>
        /// Target CRF level. Must be between 10 and 36, where 10 is the highest
        /// quality and 36 is the most efficient compression. The default is 21.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CrfLevel {
          get { return crfLevel_; }
          set {
            crfLevel_ = value;
          }
        }

        /// <summary>Field number for the "allow_open_gop" field.</summary>
        public const int AllowOpenGopFieldNumber = 8;
        private bool allowOpenGop_;
        /// <summary>
        /// Specifies whether an open Group of Pictures (GOP) structure should be
        /// allowed or not. The default is `false`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool AllowOpenGop {
          get { return allowOpenGop_; }
          set {
            allowOpenGop_ = value;
          }
        }

        /// <summary>Field number for the "gop_frame_count" field.</summary>
        public const int GopFrameCountFieldNumber = 9;
        /// <summary>
        /// Select the GOP size based on the specified frame count. Must be greater
        /// than zero.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int GopFrameCount {
          get { return gopModeCase_ == GopModeOneofCase.GopFrameCount ? (int) gopMode_ : 0; }
          set {
            gopMode_ = value;
            gopModeCase_ = GopModeOneofCase.GopFrameCount;
          }
        }

        /// <summary>Field number for the "gop_duration" field.</summary>
        public const int GopDurationFieldNumber = 10;
        /// <summary>
        /// Select the GOP size based on the specified duration. The default is
        /// `"3s"`. Note that `gopDuration` must be less than or equal to
        /// [`segmentDuration`](#SegmentSettings), and
        /// [`segmentDuration`](#SegmentSettings) must be divisible by
        /// `gopDuration`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Duration GopDuration {
          get { return gopModeCase_ == GopModeOneofCase.GopDuration ? (global::Google.Protobuf.WellKnownTypes.Duration) gopMode_ : null; }
          set {
            gopMode_ = value;
            gopModeCase_ = value == null ? GopModeOneofCase.None : GopModeOneofCase.GopDuration;
          }
        }

        /// <summary>Field number for the "enable_two_pass" field.</summary>
        public const int EnableTwoPassFieldNumber = 11;
        private bool enableTwoPass_;
        /// <summary>
        /// Use two-pass encoding strategy to achieve better video quality.
        /// `VideoStream.rate_control_mode` must be `"vbr"`. The default is `false`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool EnableTwoPass {
          get { return enableTwoPass_; }
          set {
            enableTwoPass_ = value;
          }
        }

        /// <summary>Field number for the "vbv_size_bits" field.</summary>
        public const int VbvSizeBitsFieldNumber = 12;
        private int vbvSizeBits_;
        /// <summary>
        /// Size of the Video Buffering Verifier (VBV) buffer in bits. Must be
        /// greater than zero. The default is equal to `VideoStream.bitrate_bps`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int VbvSizeBits {
          get { return vbvSizeBits_; }
          set {
            vbvSizeBits_ = value;
          }
        }

        /// <summary>Field number for the "vbv_fullness_bits" field.</summary>
        public const int VbvFullnessBitsFieldNumber = 13;
        private int vbvFullnessBits_;
        /// <summary>
        /// Initial fullness of the Video Buffering Verifier (VBV) buffer in bits.
        /// Must be greater than zero. The default is equal to 90% of
        /// `VideoStream.vbv_size_bits`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int VbvFullnessBits {
          get { return vbvFullnessBits_; }
          set {
            vbvFullnessBits_ = value;
          }
        }

        /// <summary>Field number for the "b_pyramid" field.</summary>
        public const int BPyramidFieldNumber = 14;
        private bool bPyramid_;
        /// <summary>
        /// Allow B-pyramid for reference frame selection. This may not be supported
        /// on all decoders. The default is `false`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool BPyramid {
          get { return bPyramid_; }
          set {
            bPyramid_ = value;
          }
        }

        /// <summary>Field number for the "b_frame_count" field.</summary>
        public const int BFrameCountFieldNumber = 15;
        private int bFrameCount_;
        /// <summary>
        /// The number of consecutive B-frames. Must be greater than or equal to
        /// zero. Must be less than `VideoStream.gop_frame_count` if set. The default
        /// is 0.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BFrameCount {
          get { return bFrameCount_; }
          set {
            bFrameCount_ = value;
          }
        }

        /// <summary>Field number for the "aq_strength" field.</summary>
        public const int AqStrengthFieldNumber = 16;
        private double aqStrength_;
        /// <summary>
        /// Specify the intensity of the adaptive quantizer (AQ). Must be between 0
        /// and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A
        /// higher value equals a lower bitrate but smoother image. The default is 0.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double AqStrength {
          get { return aqStrength_; }
          set {
            aqStrength_ = value;
          }
        }

        /// <summary>Field number for the "profile" field.</summary>
        public const int ProfileFieldNumber = 17;
        private string profile_ = "";
        /// <summary>
        /// Enforces the specified codec profile. The following profiles are
        /// supported:
        ///
        /// 8bit profiles
        /// *   `main` (default)
        /// *   `main-intra`
        /// *   `mainstillpicture`
        ///
        /// 10bit profiles
        /// *   `main10` (default)
        /// *   `main10-intra`
        /// *   `main422-10`
        /// *   `main422-10-intra`
        /// *   `main444-10`
        /// *   `main444-10-intra`
        ///
        /// 12bit profiles
        /// *   `main12` (default)
        /// *   `main12-intra`
        /// *   `main422-12`
        /// *   `main422-12-intra`
        /// *   `main444-12`
        /// *   `main444-12-intra`
        ///
        /// The available options are
        /// [FFmpeg-compatible](https://x265.readthedocs.io/){:
        /// class="external" }. Note that certain values for this field may cause the
        /// transcoder to override other fields you set in the `H265CodecSettings`
        /// message.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Profile {
          get { return profile_; }
          set {
            profile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "tune" field.</summary>
        public const int TuneFieldNumber = 18;
        private string tune_ = "";
        /// <summary>
        /// Enforces the specified codec tune. The available options are
        /// [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265){:
        /// class="external" }. Note that certain values for this field may cause the
        /// transcoder to override other fields you set in the `H265CodecSettings`
        /// message.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Tune {
          get { return tune_; }
          set {
            tune_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "preset" field.</summary>
        public const int PresetFieldNumber = 19;
        private string preset_ = "";
        /// <summary>
        /// Enforces the specified codec preset. The default is `veryfast`. The
        /// available options are
        /// [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265){:
        /// class="external" }. Note that certain values for this field may cause the
        /// transcoder to override other fields you set in the `H265CodecSettings`
        /// message.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Preset {
          get { return preset_; }
          set {
            preset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        private object gopMode_;
        /// <summary>Enum of possible cases for the "gop_mode" oneof.</summary>
        public enum GopModeOneofCase {
          None = 0,
          GopFrameCount = 9,
          GopDuration = 10,
        }
        private GopModeOneofCase gopModeCase_ = GopModeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GopModeOneofCase GopModeCase {
          get { return gopModeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGopMode() {
          gopModeCase_ = GopModeOneofCase.None;
          gopMode_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as H265CodecSettings);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(H265CodecSettings other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (WidthPixels != other.WidthPixels) return false;
          if (HeightPixels != other.HeightPixels) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FrameRate, other.FrameRate)) return false;
          if (BitrateBps != other.BitrateBps) return false;
          if (PixelFormat != other.PixelFormat) return false;
          if (RateControlMode != other.RateControlMode) return false;
          if (CrfLevel != other.CrfLevel) return false;
          if (AllowOpenGop != other.AllowOpenGop) return false;
          if (GopFrameCount != other.GopFrameCount) return false;
          if (!object.Equals(GopDuration, other.GopDuration)) return false;
          if (EnableTwoPass != other.EnableTwoPass) return false;
          if (VbvSizeBits != other.VbvSizeBits) return false;
          if (VbvFullnessBits != other.VbvFullnessBits) return false;
          if (BPyramid != other.BPyramid) return false;
          if (BFrameCount != other.BFrameCount) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AqStrength, other.AqStrength)) return false;
          if (Profile != other.Profile) return false;
          if (Tune != other.Tune) return false;
          if (Preset != other.Preset) return false;
          if (GopModeCase != other.GopModeCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (WidthPixels != 0) hash ^= WidthPixels.GetHashCode();
          if (HeightPixels != 0) hash ^= HeightPixels.GetHashCode();
          if (FrameRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FrameRate);
          if (BitrateBps != 0) hash ^= BitrateBps.GetHashCode();
          if (PixelFormat.Length != 0) hash ^= PixelFormat.GetHashCode();
          if (RateControlMode.Length != 0) hash ^= RateControlMode.GetHashCode();
          if (CrfLevel != 0) hash ^= CrfLevel.GetHashCode();
          if (AllowOpenGop != false) hash ^= AllowOpenGop.GetHashCode();
          if (gopModeCase_ == GopModeOneofCase.GopFrameCount) hash ^= GopFrameCount.GetHashCode();
          if (gopModeCase_ == GopModeOneofCase.GopDuration) hash ^= GopDuration.GetHashCode();
          if (EnableTwoPass != false) hash ^= EnableTwoPass.GetHashCode();
          if (VbvSizeBits != 0) hash ^= VbvSizeBits.GetHashCode();
          if (VbvFullnessBits != 0) hash ^= VbvFullnessBits.GetHashCode();
          if (BPyramid != false) hash ^= BPyramid.GetHashCode();
          if (BFrameCount != 0) hash ^= BFrameCount.GetHashCode();
          if (AqStrength != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AqStrength);
          if (Profile.Length != 0) hash ^= Profile.GetHashCode();
          if (Tune.Length != 0) hash ^= Tune.GetHashCode();
          if (Preset.Length != 0) hash ^= Preset.GetHashCode();
          hash ^= (int) gopModeCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (WidthPixels != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(WidthPixels);
          }
          if (HeightPixels != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(HeightPixels);
          }
          if (FrameRate != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(FrameRate);
          }
          if (BitrateBps != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(BitrateBps);
          }
          if (PixelFormat.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(PixelFormat);
          }
          if (RateControlMode.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(RateControlMode);
          }
          if (CrfLevel != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(CrfLevel);
          }
          if (AllowOpenGop != false) {
            output.WriteRawTag(64);
            output.WriteBool(AllowOpenGop);
          }
          if (gopModeCase_ == GopModeOneofCase.GopFrameCount) {
            output.WriteRawTag(72);
            output.WriteInt32(GopFrameCount);
          }
          if (gopModeCase_ == GopModeOneofCase.GopDuration) {
            output.WriteRawTag(82);
            output.WriteMessage(GopDuration);
          }
          if (EnableTwoPass != false) {
            output.WriteRawTag(88);
            output.WriteBool(EnableTwoPass);
          }
          if (VbvSizeBits != 0) {
            output.WriteRawTag(96);
            output.WriteInt32(VbvSizeBits);
          }
          if (VbvFullnessBits != 0) {
            output.WriteRawTag(104);
            output.WriteInt32(VbvFullnessBits);
          }
          if (BPyramid != false) {
            output.WriteRawTag(112);
            output.WriteBool(BPyramid);
          }
          if (BFrameCount != 0) {
            output.WriteRawTag(120);
            output.WriteInt32(BFrameCount);
          }
          if (AqStrength != 0D) {
            output.WriteRawTag(129, 1);
            output.WriteDouble(AqStrength);
          }
          if (Profile.Length != 0) {
            output.WriteRawTag(138, 1);
            output.WriteString(Profile);
          }
          if (Tune.Length != 0) {
            output.WriteRawTag(146, 1);
            output.WriteString(Tune);
          }
          if (Preset.Length != 0) {
            output.WriteRawTag(154, 1);
            output.WriteString(Preset);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (WidthPixels != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(WidthPixels);
          }
          if (HeightPixels != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(HeightPixels);
          }
          if (FrameRate != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(FrameRate);
          }
          if (BitrateBps != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(BitrateBps);
          }
          if (PixelFormat.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(PixelFormat);
          }
          if (RateControlMode.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(RateControlMode);
          }
          if (CrfLevel != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(CrfLevel);
          }
          if (AllowOpenGop != false) {
            output.WriteRawTag(64);
            output.WriteBool(AllowOpenGop);
          }
          if (gopModeCase_ == GopModeOneofCase.GopFrameCount) {
            output.WriteRawTag(72);
            output.WriteInt32(GopFrameCount);
          }
          if (gopModeCase_ == GopModeOneofCase.GopDuration) {
            output.WriteRawTag(82);
            output.WriteMessage(GopDuration);
          }
          if (EnableTwoPass != false) {
            output.WriteRawTag(88);
            output.WriteBool(EnableTwoPass);
          }
          if (VbvSizeBits != 0) {
            output.WriteRawTag(96);
            output.WriteInt32(VbvSizeBits);
          }
          if (VbvFullnessBits != 0) {
            output.WriteRawTag(104);
            output.WriteInt32(VbvFullnessBits);
          }
          if (BPyramid != false) {
            output.WriteRawTag(112);
            output.WriteBool(BPyramid);
          }
          if (BFrameCount != 0) {
            output.WriteRawTag(120);
            output.WriteInt32(BFrameCount);
          }
          if (AqStrength != 0D) {
            output.WriteRawTag(129, 1);
            output.WriteDouble(AqStrength);
          }
          if (Profile.Length != 0) {
            output.WriteRawTag(138, 1);
            output.WriteString(Profile);
          }
          if (Tune.Length != 0) {
            output.WriteRawTag(146, 1);
            output.WriteString(Tune);
          }
          if (Preset.Length != 0) {
            output.WriteRawTag(154, 1);
            output.WriteString(Preset);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (WidthPixels != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(WidthPixels);
          }
          if (HeightPixels != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeightPixels);
          }
          if (FrameRate != 0D) {
            size += 1 + 8;
          }
          if (BitrateBps != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(BitrateBps);
          }
          if (PixelFormat.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PixelFormat);
          }
          if (RateControlMode.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RateControlMode);
          }
          if (CrfLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CrfLevel);
          }
          if (AllowOpenGop != false) {
            size += 1 + 1;
          }
          if (gopModeCase_ == GopModeOneofCase.GopFrameCount) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(GopFrameCount);
          }
          if (gopModeCase_ == GopModeOneofCase.GopDuration) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(GopDuration);
          }
          if (EnableTwoPass != false) {
            size += 1 + 1;
          }
          if (VbvSizeBits != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(VbvSizeBits);
          }
          if (VbvFullnessBits != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(VbvFullnessBits);
          }
          if (BPyramid != false) {
            size += 1 + 1;
          }
          if (BFrameCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(BFrameCount);
          }
          if (AqStrength != 0D) {
            size += 2 + 8;
          }
          if (Profile.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(Profile);
          }
          if (Tune.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(Tune);
          }
          if (Preset.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(Preset);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(H265CodecSettings other) {
          if (other == null) {
            return;
          }
          if (other.WidthPixels != 0) {
            WidthPixels = other.WidthPixels;
          }
          if (other.HeightPixels != 0) {
            HeightPixels = other.HeightPixels;
          }
          if (other.FrameRate != 0D) {
            FrameRate = other.FrameRate;
          }
          if (other.BitrateBps != 0) {
            BitrateBps = other.BitrateBps;
          }
          if (other.PixelFormat.Length != 0) {
            PixelFormat = other.PixelFormat;
          }
          if (other.RateControlMode.Length != 0) {
            RateControlMode = other.RateControlMode;
          }
          if (other.CrfLevel != 0) {
            CrfLevel = other.CrfLevel;
          }
          if (other.AllowOpenGop != false) {
            AllowOpenGop = other.AllowOpenGop;
          }
          if (other.EnableTwoPass != false) {
            EnableTwoPass = other.EnableTwoPass;
          }
          if (other.VbvSizeBits != 0) {
            VbvSizeBits = other.VbvSizeBits;
          }
          if (other.VbvFullnessBits != 0) {
            VbvFullnessBits = other.VbvFullnessBits;
          }
          if (other.BPyramid != false) {
            BPyramid = other.BPyramid;
          }
          if (other.BFrameCount != 0) {
            BFrameCount = other.BFrameCount;
          }
          if (other.AqStrength != 0D) {
            AqStrength = other.AqStrength;
          }
          if (other.Profile.Length != 0) {
            Profile = other.Profile;
          }
          if (other.Tune.Length != 0) {
            Tune = other.Tune;
          }
          if (other.Preset.Length != 0) {
            Preset = other.Preset;
          }
          switch (other.GopModeCase) {
            case GopModeOneofCase.GopFrameCount:
              GopFrameCount = other.GopFrameCount;
              break;
            case GopModeOneofCase.GopDuration:
              if (GopDuration == null) {
                GopDuration = new global::Google.Protobuf.WellKnownTypes.Duration();
              }
              GopDuration.MergeFrom(other.GopDuration);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                WidthPixels = input.ReadInt32();
                break;
              }
              case 16: {
                HeightPixels = input.ReadInt32();
                break;
              }
              case 25: {
                FrameRate = input.ReadDouble();
                break;
              }
              case 32: {
                BitrateBps = input.ReadInt32();
                break;
              }
              case 42: {
                PixelFormat = input.ReadString();
                break;
              }
              case 50: {
                RateControlMode = input.ReadString();
                break;
              }
              case 56: {
                CrfLevel = input.ReadInt32();
                break;
              }
              case 64: {
                AllowOpenGop = input.ReadBool();
                break;
              }
              case 72: {
                GopFrameCount = input.ReadInt32();
                break;
              }
              case 82: {
                global::Google.Protobuf.WellKnownTypes.Duration subBuilder = new global::Google.Protobuf.WellKnownTypes.Duration();
                if (gopModeCase_ == GopModeOneofCase.GopDuration) {
                  subBuilder.MergeFrom(GopDuration);
                }
                input.ReadMessage(subBuilder);
                GopDuration = subBuilder;
                break;
              }
              case 88: {
                EnableTwoPass = input.ReadBool();
                break;
              }
              case 96: {
                VbvSizeBits = input.ReadInt32();
                break;
              }
              case 104: {
                VbvFullnessBits = input.ReadInt32();
                break;
              }
              case 112: {
                BPyramid = input.ReadBool();
                break;
              }
              case 120: {
                BFrameCount = input.ReadInt32();
                break;
              }
              case 129: {
                AqStrength = input.ReadDouble();
                break;
              }
              case 138: {
                Profile = input.ReadString();
                break;
              }
              case 146: {
                Tune = input.ReadString();
                break;
              }
              case 154: {
                Preset = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                WidthPixels = input.ReadInt32();
                break;
              }
              case 16: {
                HeightPixels = input.ReadInt32();
                break;
              }
              case 25: {
                FrameRate = input.ReadDouble();
                break;
              }
              case 32: {
                BitrateBps = input.ReadInt32();
                break;
              }
              case 42: {
                PixelFormat = input.ReadString();
                break;
              }
              case 50: {
                RateControlMode = input.ReadString();
                break;
              }
              case 56: {
                CrfLevel = input.ReadInt32();
                break;
              }
              case 64: {
                AllowOpenGop = input.ReadBool();
                break;
              }
              case 72: {
                GopFrameCount = input.ReadInt32();
                break;
              }
              case 82: {
                global::Google.Protobuf.WellKnownTypes.Duration subBuilder = new global::Google.Protobuf.WellKnownTypes.Duration();
                if (gopModeCase_ == GopModeOneofCase.GopDuration) {
                  subBuilder.MergeFrom(GopDuration);
                }
                input.ReadMessage(subBuilder);
                GopDuration = subBuilder;
                break;
              }
              case 88: {
                EnableTwoPass = input.ReadBool();
                break;
              }
              case 96: {
                VbvSizeBits = input.ReadInt32();
                break;
              }
              case 104: {
                VbvFullnessBits = input.ReadInt32();
                break;
              }
              case 112: {
                BPyramid = input.ReadBool();
                break;
              }
              case 120: {
                BFrameCount = input.ReadInt32();
                break;
              }
              case 129: {
                AqStrength = input.ReadDouble();
                break;
              }
              case 138: {
                Profile = input.ReadString();
                break;
              }
              case 146: {
                Tune = input.ReadString();
                break;
              }
              case 154: {
                Preset = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// VP9 codec settings.
      /// </summary>
      public sealed partial class Vp9CodecSettings : pb::IMessage<Vp9CodecSettings>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Vp9CodecSettings> _parser = new pb::MessageParser<Vp9CodecSettings>(() => new Vp9CodecSettings());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Vp9CodecSettings> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Video.Transcoder.V1.VideoStream.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Vp9CodecSettings() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Vp9CodecSettings(Vp9CodecSettings other) : this() {
          widthPixels_ = other.widthPixels_;
          heightPixels_ = other.heightPixels_;
          frameRate_ = other.frameRate_;
          bitrateBps_ = other.bitrateBps_;
          pixelFormat_ = other.pixelFormat_;
          rateControlMode_ = other.rateControlMode_;
          crfLevel_ = other.crfLevel_;
          profile_ = other.profile_;
          switch (other.GopModeCase) {
            case GopModeOneofCase.GopFrameCount:
              GopFrameCount = other.GopFrameCount;
              break;
            case GopModeOneofCase.GopDuration:
              GopDuration = other.GopDuration.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Vp9CodecSettings Clone() {
          return new Vp9CodecSettings(this);
        }

        /// <summary>Field number for the "width_pixels" field.</summary>
        public const int WidthPixelsFieldNumber = 1;
        private int widthPixels_;
        /// <summary>
        /// The width of the video in pixels. Must be an even integer.
        /// When not specified, the width is adjusted to match the specified height
        /// and input aspect ratio. If both are omitted, the input width is used.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int WidthPixels {
          get { return widthPixels_; }
          set {
            widthPixels_ = value;
          }
        }

        /// <summary>Field number for the "height_pixels" field.</summary>
        public const int HeightPixelsFieldNumber = 2;
        private int heightPixels_;
        /// <summary>
        /// The height of the video in pixels. Must be an even integer.
        /// When not specified, the height is adjusted to match the specified width
        /// and input aspect ratio. If both are omitted, the input height is used.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int HeightPixels {
          get { return heightPixels_; }
          set {
            heightPixels_ = value;
          }
        }

        /// <summary>Field number for the "frame_rate" field.</summary>
        public const int FrameRateFieldNumber = 3;
        private double frameRate_;
        /// <summary>
        /// Required. The target video frame rate in frames per second (FPS). Must be less than
        /// or equal to 120. Will default to the input frame rate if larger than the
        /// input frame rate. The API will generate an output FPS that is divisible
        /// by the input FPS, and smaller or equal to the target FPS. See
        /// [Calculating frame
        /// rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for
        /// more information.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double FrameRate {
          get { return frameRate_; }
          set {
            frameRate_ = value;
          }
        }

        /// <summary>Field number for the "bitrate_bps" field.</summary>
        public const int BitrateBpsFieldNumber = 4;
        private int bitrateBps_;
        /// <summary>
        /// Required. The video bitrate in bits per second. Must be between 1 and
        /// 1,000,000,000.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BitrateBps {
          get { return bitrateBps_; }
          set {
            bitrateBps_ = value;
          }
        }

        /// <summary>Field number for the "pixel_format" field.</summary>
        public const int PixelFormatFieldNumber = 5;
        private string pixelFormat_ = "";
        /// <summary>
        /// Pixel format to use. The default is `"yuv420p"`.
        ///
        /// Supported pixel formats:
        /// - 'yuv420p' pixel format.
        /// - 'yuv422p' pixel format.
        /// - 'yuv444p' pixel format.
        /// - 'yuv420p10' 10-bit HDR pixel format.
        /// - 'yuv422p10' 10-bit HDR pixel format.
        /// - 'yuv444p10' 10-bit HDR pixel format.
        /// - 'yuv420p12' 12-bit HDR pixel format.
        /// - 'yuv422p12' 12-bit HDR pixel format.
        /// - 'yuv444p12' 12-bit HDR pixel format.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PixelFormat {
          get { return pixelFormat_; }
          set {
            pixelFormat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "rate_control_mode" field.</summary>
        public const int RateControlModeFieldNumber = 6;
        private string rateControlMode_ = "";
        /// <summary>
        /// Specify the `rate_control_mode`. The default is `"vbr"`.
        ///
        /// Supported rate control modes:
        /// - 'vbr' - variable bitrate
        /// - 'crf' - constant rate factor
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RateControlMode {
          get { return rateControlMode_; }
          set {
            rateControlMode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "crf_level" field.</summary>
        public const int CrfLevelFieldNumber = 7;
        private int crfLevel_;
        /// <summary>
        /// Target CRF level. Must be between 10 and 36, where 10 is the highest
        /// quality and 36 is the most efficient compression. The default is 21.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CrfLevel {
          get { return crfLevel_; }
          set {
            crfLevel_ = value;
          }
        }

        /// <summary>Field number for the "gop_frame_count" field.</summary>
        public const int GopFrameCountFieldNumber = 8;
        /// <summary>
        /// Select the GOP size based on the specified frame count. Must be greater
        /// than zero.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int GopFrameCount {
          get { return gopModeCase_ == GopModeOneofCase.GopFrameCount ? (int) gopMode_ : 0; }
          set {
            gopMode_ = value;
            gopModeCase_ = GopModeOneofCase.GopFrameCount;
          }
        }

        /// <summary>Field number for the "gop_duration" field.</summary>
        public const int GopDurationFieldNumber = 9;
        /// <summary>
        /// Select the GOP size based on the specified duration. The default is
        /// `"3s"`. Note that `gopDuration` must be less than or equal to
        /// [`segmentDuration`](#SegmentSettings), and
        /// [`segmentDuration`](#SegmentSettings) must be divisible by
        /// `gopDuration`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Duration GopDuration {
          get { return gopModeCase_ == GopModeOneofCase.GopDuration ? (global::Google.Protobuf.WellKnownTypes.Duration) gopMode_ : null; }
          set {
            gopMode_ = value;
            gopModeCase_ = value == null ? GopModeOneofCase.None : GopModeOneofCase.GopDuration;
          }
        }

        /// <summary>Field number for the "profile" field.</summary>
        public const int ProfileFieldNumber = 10;
        private string profile_ = "";
        /// <summary>
        /// Enforces the specified codec profile. The following profiles are
        /// supported:
        ///
        /// *   `profile0` (default)
        /// *   `profile1`
        /// *   `profile2`
        /// *   `profile3`
        ///
        /// The available options are
        /// [WebM-compatible](https://www.webmproject.org/vp9/profiles/){:
        /// class="external" }. Note that certain values for this field may cause the
        /// transcoder to override other fields you set in the `Vp9CodecSettings`
        /// message.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Profile {
          get { return profile_; }
          set {
            profile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        private object gopMode_;
        /// <summary>Enum of possible cases for the "gop_mode" oneof.</summary>
        public enum GopModeOneofCase {
          None = 0,
          GopFrameCount = 8,
          GopDuration = 9,
        }
        private GopModeOneofCase gopModeCase_ = GopModeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GopModeOneofCase GopModeCase {
          get { return gopModeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGopMode() {
          gopModeCase_ = GopModeOneofCase.None;
          gopMode_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Vp9CodecSettings);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Vp9CodecSettings other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (WidthPixels != other.WidthPixels) return false;
          if (HeightPixels != other.HeightPixels) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FrameRate, other.FrameRate)) return false;
          if (BitrateBps != other.BitrateBps) return false;
          if (PixelFormat != other.PixelFormat) return false;
          if (RateControlMode != other.RateControlMode) return false;
          if (CrfLevel != other.CrfLevel) return false;
          if (GopFrameCount != other.GopFrameCount) return false;
          if (!object.Equals(GopDuration, other.GopDuration)) return false;
          if (Profile != other.Profile) return false;
          if (GopModeCase != other.GopModeCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (WidthPixels != 0) hash ^= WidthPixels.GetHashCode();
          if (HeightPixels != 0) hash ^= HeightPixels.GetHashCode();
          if (FrameRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FrameRate);
          if (BitrateBps != 0) hash ^= BitrateBps.GetHashCode();
          if (PixelFormat.Length != 0) hash ^= PixelFormat.GetHashCode();
          if (RateControlMode.Length != 0) hash ^= RateControlMode.GetHashCode();
          if (CrfLevel != 0) hash ^= CrfLevel.GetHashCode();
          if (gopModeCase_ == GopModeOneofCase.GopFrameCount) hash ^= GopFrameCount.GetHashCode();
          if (gopModeCase_ == GopModeOneofCase.GopDuration) hash ^= GopDuration.GetHashCode();
          if (Profile.Length != 0) hash ^= Profile.GetHashCode();
          hash ^= (int) gopModeCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (WidthPixels != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(WidthPixels);
          }
          if (HeightPixels != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(HeightPixels);
          }
          if (FrameRate != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(FrameRate);
          }
          if (BitrateBps != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(BitrateBps);
          }
          if (PixelFormat.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(PixelFormat);
          }
          if (RateControlMode.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(RateControlMode);
          }
          if (CrfLevel != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(CrfLevel);
          }
          if (gopModeCase_ == GopModeOneofCase.GopFrameCount) {
            output.WriteRawTag(64);
            output.WriteInt32(GopFrameCount);
          }
          if (gopModeCase_ == GopModeOneofCase.GopDuration) {
            output.WriteRawTag(74);
            output.WriteMessage(GopDuration);
          }
          if (Profile.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(Profile);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (WidthPixels != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(WidthPixels);
          }
          if (HeightPixels != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(HeightPixels);
          }
          if (FrameRate != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(FrameRate);
          }
          if (BitrateBps != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(BitrateBps);
          }
          if (PixelFormat.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(PixelFormat);
          }
          if (RateControlMode.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(RateControlMode);
          }
          if (CrfLevel != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(CrfLevel);
          }
          if (gopModeCase_ == GopModeOneofCase.GopFrameCount) {
            output.WriteRawTag(64);
            output.WriteInt32(GopFrameCount);
          }
          if (gopModeCase_ == GopModeOneofCase.GopDuration) {
            output.WriteRawTag(74);
            output.WriteMessage(GopDuration);
          }
          if (Profile.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(Profile);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (WidthPixels != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(WidthPixels);
          }
          if (HeightPixels != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeightPixels);
          }
          if (FrameRate != 0D) {
            size += 1 + 8;
          }
          if (BitrateBps != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(BitrateBps);
          }
          if (PixelFormat.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PixelFormat);
          }
          if (RateControlMode.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RateControlMode);
          }
          if (CrfLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CrfLevel);
          }
          if (gopModeCase_ == GopModeOneofCase.GopFrameCount) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(GopFrameCount);
          }
          if (gopModeCase_ == GopModeOneofCase.GopDuration) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(GopDuration);
          }
          if (Profile.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Profile);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Vp9CodecSettings other) {
          if (other == null) {
            return;
          }
          if (other.WidthPixels != 0) {
            WidthPixels = other.WidthPixels;
          }
          if (other.HeightPixels != 0) {
            HeightPixels = other.HeightPixels;
          }
          if (other.FrameRate != 0D) {
            FrameRate = other.FrameRate;
          }
          if (other.BitrateBps != 0) {
            BitrateBps = other.BitrateBps;
          }
          if (other.PixelFormat.Length != 0) {
            PixelFormat = other.PixelFormat;
          }
          if (other.RateControlMode.Length != 0) {
            RateControlMode = other.RateControlMode;
          }
          if (other.CrfLevel != 0) {
            CrfLevel = other.CrfLevel;
          }
          if (other.Profile.Length != 0) {
            Profile = other.Profile;
          }
          switch (other.GopModeCase) {
            case GopModeOneofCase.GopFrameCount:
              GopFrameCount = other.GopFrameCount;
              break;
            case GopModeOneofCase.GopDuration:
              if (GopDuration == null) {
                GopDuration = new global::Google.Protobuf.WellKnownTypes.Duration();
              }
              GopDuration.MergeFrom(other.GopDuration);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                WidthPixels = input.ReadInt32();
                break;
              }
              case 16: {
                HeightPixels = input.ReadInt32();
                break;
              }
              case 25: {
                FrameRate = input.ReadDouble();
                break;
              }
              case 32: {
                BitrateBps = input.ReadInt32();
                break;
              }
              case 42: {
                PixelFormat = input.ReadString();
                break;
              }
              case 50: {
                RateControlMode = input.ReadString();
                break;
              }
              case 56: {
                CrfLevel = input.ReadInt32();
                break;
              }
              case 64: {
                GopFrameCount = input.ReadInt32();
                break;
              }
              case 74: {
                global::Google.Protobuf.WellKnownTypes.Duration subBuilder = new global::Google.Protobuf.WellKnownTypes.Duration();
                if (gopModeCase_ == GopModeOneofCase.GopDuration) {
                  subBuilder.MergeFrom(GopDuration);
                }
                input.ReadMessage(subBuilder);
                GopDuration = subBuilder;
                break;
              }
              case 82: {
                Profile = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                WidthPixels = input.ReadInt32();
                break;
              }
              case 16: {
                HeightPixels = input.ReadInt32();
                break;
              }
              case 25: {
                FrameRate = input.ReadDouble();
                break;
              }
              case 32: {
                BitrateBps = input.ReadInt32();
                break;
              }
              case 42: {
                PixelFormat = input.ReadString();
                break;
              }
              case 50: {
                RateControlMode = input.ReadString();
                break;
              }
              case 56: {
                CrfLevel = input.ReadInt32();
                break;
              }
              case 64: {
                GopFrameCount = input.ReadInt32();
                break;
              }
              case 74: {
                global::Google.Protobuf.WellKnownTypes.Duration subBuilder = new global::Google.Protobuf.WellKnownTypes.Duration();
                if (gopModeCase_ == GopModeOneofCase.GopDuration) {
                  subBuilder.MergeFrom(GopDuration);
                }
                input.ReadMessage(subBuilder);
                GopDuration = subBuilder;
                break;
              }
              case 82: {
                Profile = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// Audio stream resource.
  /// </summary>
  public sealed partial class AudioStream : pb::IMessage<AudioStream>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AudioStream> _parser = new pb::MessageParser<AudioStream>(() => new AudioStream());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AudioStream> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Video.Transcoder.V1.ResourcesReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioStream() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioStream(AudioStream other) : this() {
      codec_ = other.codec_;
      bitrateBps_ = other.bitrateBps_;
      channelCount_ = other.channelCount_;
      channelLayout_ = other.channelLayout_.Clone();
      mapping_ = other.mapping_.Clone();
      sampleRateHertz_ = other.sampleRateHertz_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioStream Clone() {
      return new AudioStream(this);
    }

    /// <summary>Field number for the "codec" field.</summary>
    public const int CodecFieldNumber = 1;
    private string codec_ = "";
    /// <summary>
    /// The codec for this audio stream. The default is `"aac"`.
    ///
    /// Supported audio codecs:
    /// - 'aac'
    /// - 'aac-he'
    /// - 'aac-he-v2'
    /// - 'mp3'
    /// - 'ac3'
    /// - 'eac3'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Codec {
      get { return codec_; }
      set {
        codec_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bitrate_bps" field.</summary>
    public const int BitrateBpsFieldNumber = 2;
    private int bitrateBps_;
    /// <summary>
    /// Required. Audio bitrate in bits per second. Must be between 1 and 10,000,000.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BitrateBps {
      get { return bitrateBps_; }
      set {
        bitrateBps_ = value;
      }
    }

    /// <summary>Field number for the "channel_count" field.</summary>
    public const int ChannelCountFieldNumber = 3;
    private int channelCount_;
    /// <summary>
    /// Number of audio channels. Must be between 1 and 6. The default is 2.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChannelCount {
      get { return channelCount_; }
      set {
        channelCount_ = value;
      }
    }

    /// <summary>Field number for the "channel_layout" field.</summary>
    public const int ChannelLayoutFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_channelLayout_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> channelLayout_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// A list of channel names specifying layout of the audio channels.
    /// This only affects the metadata embedded in the container headers, if
    /// supported by the specified format. The default is `["fl", "fr"]`.
    ///
    /// Supported channel names:
    /// - 'fl' - Front left channel
    /// - 'fr' - Front right channel
    /// - 'sl' - Side left channel
    /// - 'sr' - Side right channel
    /// - 'fc' - Front center channel
    /// - 'lfe' - Low frequency
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ChannelLayout {
      get { return channelLayout_; }
    }

    /// <summary>Field number for the "mapping" field.</summary>
    public const int MappingFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Google.Cloud.Video.Transcoder.V1.AudioStream.Types.AudioMapping> _repeated_mapping_codec
        = pb::FieldCodec.ForMessage(42, global::Google.Cloud.Video.Transcoder.V1.AudioStream.Types.AudioMapping.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.AudioStream.Types.AudioMapping> mapping_ = new pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.AudioStream.Types.AudioMapping>();
    /// <summary>
    /// The mapping for the `Job.edit_list` atoms with audio `EditAtom.inputs`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.AudioStream.Types.AudioMapping> Mapping {
      get { return mapping_; }
    }

    /// <summary>Field number for the "sample_rate_hertz" field.</summary>
    public const int SampleRateHertzFieldNumber = 6;
    private int sampleRateHertz_;
    /// <summary>
    /// The audio sample rate in Hertz. The default is 48000 Hertz.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SampleRateHertz {
      get { return sampleRateHertz_; }
      set {
        sampleRateHertz_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AudioStream);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AudioStream other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Codec != other.Codec) return false;
      if (BitrateBps != other.BitrateBps) return false;
      if (ChannelCount != other.ChannelCount) return false;
      if(!channelLayout_.Equals(other.channelLayout_)) return false;
      if(!mapping_.Equals(other.mapping_)) return false;
      if (SampleRateHertz != other.SampleRateHertz) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Codec.Length != 0) hash ^= Codec.GetHashCode();
      if (BitrateBps != 0) hash ^= BitrateBps.GetHashCode();
      if (ChannelCount != 0) hash ^= ChannelCount.GetHashCode();
      hash ^= channelLayout_.GetHashCode();
      hash ^= mapping_.GetHashCode();
      if (SampleRateHertz != 0) hash ^= SampleRateHertz.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Codec.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Codec);
      }
      if (BitrateBps != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BitrateBps);
      }
      if (ChannelCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChannelCount);
      }
      channelLayout_.WriteTo(output, _repeated_channelLayout_codec);
      mapping_.WriteTo(output, _repeated_mapping_codec);
      if (SampleRateHertz != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SampleRateHertz);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Codec.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Codec);
      }
      if (BitrateBps != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BitrateBps);
      }
      if (ChannelCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChannelCount);
      }
      channelLayout_.WriteTo(ref output, _repeated_channelLayout_codec);
      mapping_.WriteTo(ref output, _repeated_mapping_codec);
      if (SampleRateHertz != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SampleRateHertz);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Codec.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Codec);
      }
      if (BitrateBps != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BitrateBps);
      }
      if (ChannelCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChannelCount);
      }
      size += channelLayout_.CalculateSize(_repeated_channelLayout_codec);
      size += mapping_.CalculateSize(_repeated_mapping_codec);
      if (SampleRateHertz != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SampleRateHertz);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AudioStream other) {
      if (other == null) {
        return;
      }
      if (other.Codec.Length != 0) {
        Codec = other.Codec;
      }
      if (other.BitrateBps != 0) {
        BitrateBps = other.BitrateBps;
      }
      if (other.ChannelCount != 0) {
        ChannelCount = other.ChannelCount;
      }
      channelLayout_.Add(other.channelLayout_);
      mapping_.Add(other.mapping_);
      if (other.SampleRateHertz != 0) {
        SampleRateHertz = other.SampleRateHertz;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Codec = input.ReadString();
            break;
          }
          case 16: {
            BitrateBps = input.ReadInt32();
            break;
          }
          case 24: {
            ChannelCount = input.ReadInt32();
            break;
          }
          case 34: {
            channelLayout_.AddEntriesFrom(input, _repeated_channelLayout_codec);
            break;
          }
          case 42: {
            mapping_.AddEntriesFrom(input, _repeated_mapping_codec);
            break;
          }
          case 48: {
            SampleRateHertz = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Codec = input.ReadString();
            break;
          }
          case 16: {
            BitrateBps = input.ReadInt32();
            break;
          }
          case 24: {
            ChannelCount = input.ReadInt32();
            break;
          }
          case 34: {
            channelLayout_.AddEntriesFrom(ref input, _repeated_channelLayout_codec);
            break;
          }
          case 42: {
            mapping_.AddEntriesFrom(ref input, _repeated_mapping_codec);
            break;
          }
          case 48: {
            SampleRateHertz = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the AudioStream message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The mapping for the `Job.edit_list` atoms with audio `EditAtom.inputs`.
      /// </summary>
      public sealed partial class AudioMapping : pb::IMessage<AudioMapping>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AudioMapping> _parser = new pb::MessageParser<AudioMapping>(() => new AudioMapping());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AudioMapping> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Video.Transcoder.V1.AudioStream.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AudioMapping() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AudioMapping(AudioMapping other) : this() {
          atomKey_ = other.atomKey_;
          inputKey_ = other.inputKey_;
          inputTrack_ = other.inputTrack_;
          inputChannel_ = other.inputChannel_;
          outputChannel_ = other.outputChannel_;
          gainDb_ = other.gainDb_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AudioMapping Clone() {
          return new AudioMapping(this);
        }

        /// <summary>Field number for the "atom_key" field.</summary>
        public const int AtomKeyFieldNumber = 1;
        private string atomKey_ = "";
        /// <summary>
        /// Required. The `EditAtom.key` that references the atom with audio inputs in the
        /// `Job.edit_list`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AtomKey {
          get { return atomKey_; }
          set {
            atomKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "input_key" field.</summary>
        public const int InputKeyFieldNumber = 2;
        private string inputKey_ = "";
        /// <summary>
        /// Required. The `Input.key` that identifies the input file.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string InputKey {
          get { return inputKey_; }
          set {
            inputKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "input_track" field.</summary>
        public const int InputTrackFieldNumber = 3;
        private int inputTrack_;
        /// <summary>
        /// Required. The zero-based index of the track in the input file.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int InputTrack {
          get { return inputTrack_; }
          set {
            inputTrack_ = value;
          }
        }

        /// <summary>Field number for the "input_channel" field.</summary>
        public const int InputChannelFieldNumber = 4;
        private int inputChannel_;
        /// <summary>
        /// Required. The zero-based index of the channel in the input audio stream.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int InputChannel {
          get { return inputChannel_; }
          set {
            inputChannel_ = value;
          }
        }

        /// <summary>Field number for the "output_channel" field.</summary>
        public const int OutputChannelFieldNumber = 5;
        private int outputChannel_;
        /// <summary>
        /// Required. The zero-based index of the channel in the output audio stream.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int OutputChannel {
          get { return outputChannel_; }
          set {
            outputChannel_ = value;
          }
        }

        /// <summary>Field number for the "gain_db" field.</summary>
        public const int GainDbFieldNumber = 6;
        private double gainDb_;
        /// <summary>
        /// Audio volume control in dB. Negative values decrease volume,
        /// positive values increase. The default is 0.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double GainDb {
          get { return gainDb_; }
          set {
            gainDb_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AudioMapping);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AudioMapping other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AtomKey != other.AtomKey) return false;
          if (InputKey != other.InputKey) return false;
          if (InputTrack != other.InputTrack) return false;
          if (InputChannel != other.InputChannel) return false;
          if (OutputChannel != other.OutputChannel) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GainDb, other.GainDb)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (AtomKey.Length != 0) hash ^= AtomKey.GetHashCode();
          if (InputKey.Length != 0) hash ^= InputKey.GetHashCode();
          if (InputTrack != 0) hash ^= InputTrack.GetHashCode();
          if (InputChannel != 0) hash ^= InputChannel.GetHashCode();
          if (OutputChannel != 0) hash ^= OutputChannel.GetHashCode();
          if (GainDb != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GainDb);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (AtomKey.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(AtomKey);
          }
          if (InputKey.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(InputKey);
          }
          if (InputTrack != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(InputTrack);
          }
          if (InputChannel != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(InputChannel);
          }
          if (OutputChannel != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(OutputChannel);
          }
          if (GainDb != 0D) {
            output.WriteRawTag(49);
            output.WriteDouble(GainDb);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (AtomKey.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(AtomKey);
          }
          if (InputKey.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(InputKey);
          }
          if (InputTrack != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(InputTrack);
          }
          if (InputChannel != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(InputChannel);
          }
          if (OutputChannel != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(OutputChannel);
          }
          if (GainDb != 0D) {
            output.WriteRawTag(49);
            output.WriteDouble(GainDb);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (AtomKey.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AtomKey);
          }
          if (InputKey.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(InputKey);
          }
          if (InputTrack != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(InputTrack);
          }
          if (InputChannel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(InputChannel);
          }
          if (OutputChannel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutputChannel);
          }
          if (GainDb != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AudioMapping other) {
          if (other == null) {
            return;
          }
          if (other.AtomKey.Length != 0) {
            AtomKey = other.AtomKey;
          }
          if (other.InputKey.Length != 0) {
            InputKey = other.InputKey;
          }
          if (other.InputTrack != 0) {
            InputTrack = other.InputTrack;
          }
          if (other.InputChannel != 0) {
            InputChannel = other.InputChannel;
          }
          if (other.OutputChannel != 0) {
            OutputChannel = other.OutputChannel;
          }
          if (other.GainDb != 0D) {
            GainDb = other.GainDb;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                AtomKey = input.ReadString();
                break;
              }
              case 18: {
                InputKey = input.ReadString();
                break;
              }
              case 24: {
                InputTrack = input.ReadInt32();
                break;
              }
              case 32: {
                InputChannel = input.ReadInt32();
                break;
              }
              case 40: {
                OutputChannel = input.ReadInt32();
                break;
              }
              case 49: {
                GainDb = input.ReadDouble();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                AtomKey = input.ReadString();
                break;
              }
              case 18: {
                InputKey = input.ReadString();
                break;
              }
              case 24: {
                InputTrack = input.ReadInt32();
                break;
              }
              case 32: {
                InputChannel = input.ReadInt32();
                break;
              }
              case 40: {
                OutputChannel = input.ReadInt32();
                break;
              }
              case 49: {
                GainDb = input.ReadDouble();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// Encoding of a text stream. For example, closed captions or subtitles.
  /// </summary>
  public sealed partial class TextStream : pb::IMessage<TextStream>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TextStream> _parser = new pb::MessageParser<TextStream>(() => new TextStream());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextStream> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Video.Transcoder.V1.ResourcesReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextStream() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextStream(TextStream other) : this() {
      codec_ = other.codec_;
      mapping_ = other.mapping_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextStream Clone() {
      return new TextStream(this);
    }

    /// <summary>Field number for the "codec" field.</summary>
    public const int CodecFieldNumber = 1;
    private string codec_ = "";
    /// <summary>
    /// The codec for this text stream. The default is `"webvtt"`.
    ///
    /// Supported text codecs:
    /// - 'srt'
    /// - 'ttml'
    /// - 'cea608'
    /// - 'cea708'
    /// - 'webvtt'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Codec {
      get { return codec_; }
      set {
        codec_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mapping" field.</summary>
    public const int MappingFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.Video.Transcoder.V1.TextStream.Types.TextMapping> _repeated_mapping_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Cloud.Video.Transcoder.V1.TextStream.Types.TextMapping.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.TextStream.Types.TextMapping> mapping_ = new pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.TextStream.Types.TextMapping>();
    /// <summary>
    /// The mapping for the `Job.edit_list` atoms with text `EditAtom.inputs`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Video.Transcoder.V1.TextStream.Types.TextMapping> Mapping {
      get { return mapping_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextStream);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextStream other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Codec != other.Codec) return false;
      if(!mapping_.Equals(other.mapping_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Codec.Length != 0) hash ^= Codec.GetHashCode();
      hash ^= mapping_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Codec.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Codec);
      }
      mapping_.WriteTo(output, _repeated_mapping_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Codec.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Codec);
      }
      mapping_.WriteTo(ref output, _repeated_mapping_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Codec.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Codec);
      }
      size += mapping_.CalculateSize(_repeated_mapping_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextStream other) {
      if (other == null) {
        return;
      }
      if (other.Codec.Length != 0) {
        Codec = other.Codec;
      }
      mapping_.Add(other.mapping_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Codec = input.ReadString();
            break;
          }
          case 26: {
            mapping_.AddEntriesFrom(input, _repeated_mapping_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Codec = input.ReadString();
            break;
          }
          case 26: {
            mapping_.AddEntriesFrom(ref input, _repeated_mapping_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the TextStream message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The mapping for the `Job.edit_list` atoms with text `EditAtom.inputs`.
      /// </summary>
      public sealed partial class TextMapping : pb::IMessage<TextMapping>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<TextMapping> _parser = new pb::MessageParser<TextMapping>(() => new TextMapping());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TextMapping> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Video.Transcoder.V1.TextStream.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TextMapping() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TextMapping(TextMapping other) : this() {
          atomKey_ = other.atomKey_;
          inputKey_ = other.inputKey_;
          inputTrack_ = other.inputTrack_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TextMapping Clone() {
          return new TextMapping(this);
        }

        /// <summary>Field number for the "atom_key" field.</summary>
        public const int AtomKeyFieldNumber = 1;
        private string atomKey_ = "";
        /// <summary>
        /// Required. The `EditAtom.key` that references atom with text inputs in the
        /// `Job.edit_list`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AtomKey {
          get { return atomKey_; }
          set {
            atomKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "input_key" field.</summary>
        public const int InputKeyFieldNumber = 2;
        private string inputKey_ = "";
        /// <summary>
        /// Required. The `Input.key` that identifies the input file.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string InputKey {
          get { return inputKey_; }
          set {
            inputKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "input_track" field.</summary>
        public const int InputTrackFieldNumber = 3;
        private int inputTrack_;
        /// <summary>
        /// Required. The zero-based index of the track in the input file.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int InputTrack {
          get { return inputTrack_; }
          set {
            inputTrack_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TextMapping);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TextMapping other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AtomKey != other.AtomKey) return false;
          if (InputKey != other.InputKey) return false;
          if (InputTrack != other.InputTrack) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (AtomKey.Length != 0) hash ^= AtomKey.GetHashCode();
          if (InputKey.Length != 0) hash ^= InputKey.GetHashCode();
          if (InputTrack != 0) hash ^= InputTrack.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (AtomKey.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(AtomKey);
          }
          if (InputKey.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(InputKey);
          }
          if (InputTrack != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(InputTrack);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (AtomKey.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(AtomKey);
          }
          if (InputKey.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(InputKey);
          }
          if (InputTrack != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(InputTrack);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (AtomKey.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AtomKey);
          }
          if (InputKey.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(InputKey);
          }
          if (InputTrack != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(InputTrack);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TextMapping other) {
          if (other == null) {
            return;
          }
          if (other.AtomKey.Length != 0) {
            AtomKey = other.AtomKey;
          }
          if (other.InputKey.Length != 0) {
            InputKey = other.InputKey;
          }
          if (other.InputTrack != 0) {
            InputTrack = other.InputTrack;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                AtomKey = input.ReadString();
                break;
              }
              case 18: {
                InputKey = input.ReadString();
                break;
              }
              case 24: {
                InputTrack = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                AtomKey = input.ReadString();
                break;
              }
              case 18: {
                InputKey = input.ReadString();
                break;
              }
              case 24: {
                InputTrack = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// Segment settings for `"ts"`, `"fmp4"` and `"vtt"`.
  /// </summary>
  public sealed partial class SegmentSettings : pb::IMessage<SegmentSettings>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SegmentSettings> _parser = new pb::MessageParser<SegmentSettings>(() => new SegmentSettings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SegmentSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Video.Transcoder.V1.ResourcesReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentSettings(SegmentSettings other) : this() {
      segmentDuration_ = other.segmentDuration_ != null ? other.segmentDuration_.Clone() : null;
      individualSegments_ = other.individualSegments_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentSettings Clone() {
      return new SegmentSettings(this);
    }

    /// <summary>Field number for the "segment_duration" field.</summary>
    public const int SegmentDurationFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Duration segmentDuration_;
    /// <summary>
    /// Duration of the segments in seconds. The default is `"6.0s"`. Note that
    /// `segmentDuration` must be greater than or equal to
    /// [`gopDuration`](#videostream), and `segmentDuration` must be divisible by
    /// [`gopDuration`](#videostream).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration SegmentDuration {
      get { return segmentDuration_; }
      set {
        segmentDuration_ = value;
      }
    }

    /// <summary>Field number for the "individual_segments" field.</summary>
    public const int IndividualSegmentsFieldNumber = 3;
    private bool individualSegments_;
    /// <summary>
    /// Required. Create an individual segment file. The default is `false`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IndividualSegments {
      get { return individualSegments_; }
      set {
        individualSegments_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SegmentSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SegmentSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SegmentDuration, other.SegmentDuration)) return false;
      if (IndividualSegments != other.IndividualSegments) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (segmentDuration_ != null) hash ^= SegmentDuration.GetHashCode();
      if (IndividualSegments != false) hash ^= IndividualSegments.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (segmentDuration_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SegmentDuration);
      }
      if (IndividualSegments != false) {
        output.WriteRawTag(24);
        output.WriteBool(IndividualSegments);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (segmentDuration_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SegmentDuration);
      }
      if (IndividualSegments != false) {
        output.WriteRawTag(24);
        output.WriteBool(IndividualSegments);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (segmentDuration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SegmentDuration);
      }
      if (IndividualSegments != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SegmentSettings other) {
      if (other == null) {
        return;
      }
      if (other.segmentDuration_ != null) {
        if (segmentDuration_ == null) {
          SegmentDuration = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        SegmentDuration.MergeFrom(other.SegmentDuration);
      }
      if (other.IndividualSegments != false) {
        IndividualSegments = other.IndividualSegments;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (segmentDuration_ == null) {
              SegmentDuration = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(SegmentDuration);
            break;
          }
          case 24: {
            IndividualSegments = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (segmentDuration_ == null) {
              SegmentDuration = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(SegmentDuration);
            break;
          }
          case 24: {
            IndividualSegments = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Encryption settings.
  /// </summary>
  public sealed partial class Encryption : pb::IMessage<Encryption>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Encryption> _parser = new pb::MessageParser<Encryption>(() => new Encryption());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Encryption> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Video.Transcoder.V1.ResourcesReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Encryption() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Encryption(Encryption other) : this() {
      key_ = other.key_;
      iv_ = other.iv_;
      switch (other.EncryptionModeCase) {
        case EncryptionModeOneofCase.Aes128:
          Aes128 = other.Aes128.Clone();
          break;
        case EncryptionModeOneofCase.SampleAes:
          SampleAes = other.SampleAes.Clone();
          break;
        case EncryptionModeOneofCase.MpegCenc:
          MpegCenc = other.MpegCenc.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Encryption Clone() {
      return new Encryption(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    /// <summary>
    /// Required. 128 bit encryption key represented as lowercase hexadecimal digits.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "iv" field.</summary>
    public const int IvFieldNumber = 2;
    private string iv_ = "";
    /// <summary>
    /// Required. 128 bit Initialization Vector (IV) represented as lowercase hexadecimal
    /// digits.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Iv {
      get { return iv_; }
      set {
        iv_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "aes_128" field.</summary>
    public const int Aes128FieldNumber = 3;
    /// <summary>
    /// Configuration for AES-128 encryption.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Video.Transcoder.V1.Encryption.Types.Aes128Encryption Aes128 {
      get { return encryptionModeCase_ == EncryptionModeOneofCase.Aes128 ? (global::Google.Cloud.Video.Transcoder.V1.Encryption.Types.Aes128Encryption) encryptionMode_ : null; }
      set {
        encryptionMode_ = value;
        encryptionModeCase_ = value == null ? EncryptionModeOneofCase.None : EncryptionModeOneofCase.Aes128;
      }
    }

    /// <summary>Field number for the "sample_aes" field.</summary>
    public const int SampleAesFieldNumber = 4;
    /// <summary>
    /// Configuration for SAMPLE-AES encryption.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Video.Transcoder.V1.Encryption.Types.SampleAesEncryption SampleAes {
      get { return encryptionModeCase_ == EncryptionModeOneofCase.SampleAes ? (global::Google.Cloud.Video.Transcoder.V1.Encryption.Types.SampleAesEncryption) encryptionMode_ : null; }
      set {
        encryptionMode_ = value;
        encryptionModeCase_ = value == null ? EncryptionModeOneofCase.None : EncryptionModeOneofCase.SampleAes;
      }
    }

    /// <summary>Field number for the "mpeg_cenc" field.</summary>
    public const int MpegCencFieldNumber = 5;
    /// <summary>
    /// Configuration for MPEG Common Encryption (MPEG-CENC).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Video.Transcoder.V1.Encryption.Types.MpegCommonEncryption MpegCenc {
      get { return encryptionModeCase_ == EncryptionModeOneofCase.MpegCenc ? (global::Google.Cloud.Video.Transcoder.V1.Encryption.Types.MpegCommonEncryption) encryptionMode_ : null; }
      set {
        encryptionMode_ = value;
        encryptionModeCase_ = value == null ? EncryptionModeOneofCase.None : EncryptionModeOneofCase.MpegCenc;
      }
    }

    private object encryptionMode_;
    /// <summary>Enum of possible cases for the "encryption_mode" oneof.</summary>
    public enum EncryptionModeOneofCase {
      None = 0,
      Aes128 = 3,
      SampleAes = 4,
      MpegCenc = 5,
    }
    private EncryptionModeOneofCase encryptionModeCase_ = EncryptionModeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncryptionModeOneofCase EncryptionModeCase {
      get { return encryptionModeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEncryptionMode() {
      encryptionModeCase_ = EncryptionModeOneofCase.None;
      encryptionMode_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Encryption);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Encryption other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Iv != other.Iv) return false;
      if (!object.Equals(Aes128, other.Aes128)) return false;
      if (!object.Equals(SampleAes, other.SampleAes)) return false;
      if (!object.Equals(MpegCenc, other.MpegCenc)) return false;
      if (EncryptionModeCase != other.EncryptionModeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Iv.Length != 0) hash ^= Iv.GetHashCode();
      if (encryptionModeCase_ == EncryptionModeOneofCase.Aes128) hash ^= Aes128.GetHashCode();
      if (encryptionModeCase_ == EncryptionModeOneofCase.SampleAes) hash ^= SampleAes.GetHashCode();
      if (encryptionModeCase_ == EncryptionModeOneofCase.MpegCenc) hash ^= MpegCenc.GetHashCode();
      hash ^= (int) encryptionModeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Iv.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Iv);
      }
      if (encryptionModeCase_ == EncryptionModeOneofCase.Aes128) {
        output.WriteRawTag(26);
        output.WriteMessage(Aes128);
      }
      if (encryptionModeCase_ == EncryptionModeOneofCase.SampleAes) {
        output.WriteRawTag(34);
        output.WriteMessage(SampleAes);
      }
      if (encryptionModeCase_ == EncryptionModeOneofCase.MpegCenc) {
        output.WriteRawTag(42);
        output.WriteMessage(MpegCenc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Iv.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Iv);
      }
      if (encryptionModeCase_ == EncryptionModeOneofCase.Aes128) {
        output.WriteRawTag(26);
        output.WriteMessage(Aes128);
      }
      if (encryptionModeCase_ == EncryptionModeOneofCase.SampleAes) {
        output.WriteRawTag(34);
        output.WriteMessage(SampleAes);
      }
      if (encryptionModeCase_ == EncryptionModeOneofCase.MpegCenc) {
        output.WriteRawTag(42);
        output.WriteMessage(MpegCenc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Iv.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Iv);
      }
      if (encryptionModeCase_ == EncryptionModeOneofCase.Aes128) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Aes128);
      }
      if (encryptionModeCase_ == EncryptionModeOneofCase.SampleAes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SampleAes);
      }
      if (encryptionModeCase_ == EncryptionModeOneofCase.MpegCenc) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MpegCenc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Encryption other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Iv.Length != 0) {
        Iv = other.Iv;
      }
      switch (other.EncryptionModeCase) {
        case EncryptionModeOneofCase.Aes128:
          if (Aes128 == null) {
            Aes128 = new global::Google.Cloud.Video.Transcoder.V1.Encryption.Types.Aes128Encryption();
          }
          Aes128.MergeFrom(other.Aes128);
          break;
        case EncryptionModeOneofCase.SampleAes:
          if (SampleAes == null) {
            SampleAes = new global::Google.Cloud.Video.Transcoder.V1.Encryption.Types.SampleAesEncryption();
          }
          SampleAes.MergeFrom(other.SampleAes);
          break;
        case EncryptionModeOneofCase.MpegCenc:
          if (MpegCenc == null) {
            MpegCenc = new global::Google.Cloud.Video.Transcoder.V1.Encryption.Types.MpegCommonEncryption();
          }
          MpegCenc.MergeFrom(other.MpegCenc);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Iv = input.ReadString();
            break;
          }
          case 26: {
            global::Google.Cloud.Video.Transcoder.V1.Encryption.Types.Aes128Encryption subBuilder = new global::Google.Cloud.Video.Transcoder.V1.Encryption.Types.Aes128Encryption();
            if (encryptionModeCase_ == EncryptionModeOneofCase.Aes128) {
              subBuilder.MergeFrom(Aes128);
            }
            input.ReadMessage(subBuilder);
            Aes128 = subBuilder;
            break;
          }
          case 34: {
            global::Google.Cloud.Video.Transcoder.V1.Encryption.Types.SampleAesEncryption subBuilder = new global::Google.Cloud.Video.Transcoder.V1.Encryption.Types.SampleAesEncryption();
            if (encryptionModeCase_ == EncryptionModeOneofCase.SampleAes) {
              subBuilder.MergeFrom(SampleAes);
            }
            input.ReadMessage(subBuilder);
            SampleAes = subBuilder;
            break;
          }
          case 42: {
            global::Google.Cloud.Video.Transcoder.V1.Encryption.Types.MpegCommonEncryption subBuilder = new global::Google.Cloud.Video.Transcoder.V1.Encryption.Types.MpegCommonEncryption();
            if (encryptionModeCase_ == EncryptionModeOneofCase.MpegCenc) {
              subBuilder.MergeFrom(MpegCenc);
            }
            input.ReadMessage(subBuilder);
            MpegCenc = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Iv = input.ReadString();
            break;
          }
          case 26: {
            global::Google.Cloud.Video.Transcoder.V1.Encryption.Types.Aes128Encryption subBuilder = new global::Google.Cloud.Video.Transcoder.V1.Encryption.Types.Aes128Encryption();
            if (encryptionModeCase_ == EncryptionModeOneofCase.Aes128) {
              subBuilder.MergeFrom(Aes128);
            }
            input.ReadMessage(subBuilder);
            Aes128 = subBuilder;
            break;
          }
          case 34: {
            global::Google.Cloud.Video.Transcoder.V1.Encryption.Types.SampleAesEncryption subBuilder = new global::Google.Cloud.Video.Transcoder.V1.Encryption.Types.SampleAesEncryption();
            if (encryptionModeCase_ == EncryptionModeOneofCase.SampleAes) {
              subBuilder.MergeFrom(SampleAes);
            }
            input.ReadMessage(subBuilder);
            SampleAes = subBuilder;
            break;
          }
          case 42: {
            global::Google.Cloud.Video.Transcoder.V1.Encryption.Types.MpegCommonEncryption subBuilder = new global::Google.Cloud.Video.Transcoder.V1.Encryption.Types.MpegCommonEncryption();
            if (encryptionModeCase_ == EncryptionModeOneofCase.MpegCenc) {
              subBuilder.MergeFrom(MpegCenc);
            }
            input.ReadMessage(subBuilder);
            MpegCenc = subBuilder;
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Encryption message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Configuration for AES-128 encryption.
      /// </summary>
      public sealed partial class Aes128Encryption : pb::IMessage<Aes128Encryption>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Aes128Encryption> _parser = new pb::MessageParser<Aes128Encryption>(() => new Aes128Encryption());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Aes128Encryption> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Video.Transcoder.V1.Encryption.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Aes128Encryption() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Aes128Encryption(Aes128Encryption other) : this() {
          keyUri_ = other.keyUri_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Aes128Encryption Clone() {
          return new Aes128Encryption(this);
        }

        /// <summary>Field number for the "key_uri" field.</summary>
        public const int KeyUriFieldNumber = 1;
        private string keyUri_ = "";
        /// <summary>
        /// Required. URI of the key delivery service. This URI is inserted into the M3U8
        /// header.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string KeyUri {
          get { return keyUri_; }
          set {
            keyUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Aes128Encryption);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Aes128Encryption other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (KeyUri != other.KeyUri) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (KeyUri.Length != 0) hash ^= KeyUri.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (KeyUri.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(KeyUri);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (KeyUri.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(KeyUri);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (KeyUri.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyUri);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Aes128Encryption other) {
          if (other == null) {
            return;
          }
          if (other.KeyUri.Length != 0) {
            KeyUri = other.KeyUri;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                KeyUri = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                KeyUri = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Configuration for SAMPLE-AES encryption.
      /// </summary>
      public sealed partial class SampleAesEncryption : pb::IMessage<SampleAesEncryption>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<SampleAesEncryption> _parser = new pb::MessageParser<SampleAesEncryption>(() => new SampleAesEncryption());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SampleAesEncryption> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Video.Transcoder.V1.Encryption.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SampleAesEncryption() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SampleAesEncryption(SampleAesEncryption other) : this() {
          keyUri_ = other.keyUri_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SampleAesEncryption Clone() {
          return new SampleAesEncryption(this);
        }

        /// <summary>Field number for the "key_uri" field.</summary>
        public const int KeyUriFieldNumber = 1;
        private string keyUri_ = "";
        /// <summary>
        /// Required. URI of the key delivery service. This URI is inserted into the M3U8
        /// header.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string KeyUri {
          get { return keyUri_; }
          set {
            keyUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SampleAesEncryption);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SampleAesEncryption other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (KeyUri != other.KeyUri) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (KeyUri.Length != 0) hash ^= KeyUri.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (KeyUri.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(KeyUri);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (KeyUri.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(KeyUri);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (KeyUri.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyUri);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SampleAesEncryption other) {
          if (other == null) {
            return;
          }
          if (other.KeyUri.Length != 0) {
            KeyUri = other.KeyUri;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                KeyUri = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                KeyUri = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Configuration for MPEG Common Encryption (MPEG-CENC).
      /// </summary>
      public sealed partial class MpegCommonEncryption : pb::IMessage<MpegCommonEncryption>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<MpegCommonEncryption> _parser = new pb::MessageParser<MpegCommonEncryption>(() => new MpegCommonEncryption());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MpegCommonEncryption> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Video.Transcoder.V1.Encryption.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MpegCommonEncryption() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MpegCommonEncryption(MpegCommonEncryption other) : this() {
          keyId_ = other.keyId_;
          scheme_ = other.scheme_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MpegCommonEncryption Clone() {
          return new MpegCommonEncryption(this);
        }

        /// <summary>Field number for the "key_id" field.</summary>
        public const int KeyIdFieldNumber = 1;
        private string keyId_ = "";
        /// <summary>
        /// Required. 128 bit Key ID represented as lowercase hexadecimal digits for use with
        /// common encryption.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string KeyId {
          get { return keyId_; }
          set {
            keyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "scheme" field.</summary>
        public const int SchemeFieldNumber = 2;
        private string scheme_ = "";
        /// <summary>
        /// Required. Specify the encryption scheme.
        ///
        /// Supported encryption schemes:
        /// - 'cenc'
        /// - 'cbcs'
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Scheme {
          get { return scheme_; }
          set {
            scheme_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MpegCommonEncryption);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MpegCommonEncryption other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (KeyId != other.KeyId) return false;
          if (Scheme != other.Scheme) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (KeyId.Length != 0) hash ^= KeyId.GetHashCode();
          if (Scheme.Length != 0) hash ^= Scheme.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (KeyId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(KeyId);
          }
          if (Scheme.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Scheme);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (KeyId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(KeyId);
          }
          if (Scheme.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Scheme);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (KeyId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyId);
          }
          if (Scheme.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Scheme);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MpegCommonEncryption other) {
          if (other == null) {
            return;
          }
          if (other.KeyId.Length != 0) {
            KeyId = other.KeyId;
          }
          if (other.Scheme.Length != 0) {
            Scheme = other.Scheme;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                KeyId = input.ReadString();
                break;
              }
              case 18: {
                Scheme = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                KeyId = input.ReadString();
                break;
              }
              case 18: {
                Scheme = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
