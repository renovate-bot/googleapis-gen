<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/video/livestream/v1/resources.proto

namespace Google\Cloud\Video\Livestream\V1\Input;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The information for an input stream.
 *
 * Generated from protobuf message <code>google.cloud.video.livestream.v1.Input.StreamInfo</code>
 */
class StreamInfo extends \Google\Protobuf\Internal\Message
{
    /**
     * The time that the current input stream is accepted and the connection is
     * established. This timestamp is updated when reconnections occur.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp last_establish_time = 1;</code>
     */
    protected $last_establish_time = null;
    /**
     * Video codec used in the input stream.
     *
     * Generated from protobuf field <code>string video_codec = 2;</code>
     */
    protected $video_codec = '';
    /**
     * Audio codec used in the input stream.
     *
     * Generated from protobuf field <code>string audio_codec = 3;</code>
     */
    protected $audio_codec = '';
    /**
     * The width of the input video in pixels.
     *
     * Generated from protobuf field <code>int32 width_pixels = 4;</code>
     */
    protected $width_pixels = 0;
    /**
     * The height of the input video in pixels.
     *
     * Generated from protobuf field <code>int32 height_pixels = 5;</code>
     */
    protected $height_pixels = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Protobuf\Timestamp $last_establish_time
     *           The time that the current input stream is accepted and the connection is
     *           established. This timestamp is updated when reconnections occur.
     *     @type string $video_codec
     *           Video codec used in the input stream.
     *     @type string $audio_codec
     *           Audio codec used in the input stream.
     *     @type int $width_pixels
     *           The width of the input video in pixels.
     *     @type int $height_pixels
     *           The height of the input video in pixels.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Video\Livestream\V1\Resources::initOnce();
        parent::__construct($data);
    }

    /**
     * The time that the current input stream is accepted and the connection is
     * established. This timestamp is updated when reconnections occur.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp last_establish_time = 1;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getLastEstablishTime()
    {
        return $this->last_establish_time;
    }

    public function hasLastEstablishTime()
    {
        return isset($this->last_establish_time);
    }

    public function clearLastEstablishTime()
    {
        unset($this->last_establish_time);
    }

    /**
     * The time that the current input stream is accepted and the connection is
     * established. This timestamp is updated when reconnections occur.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp last_establish_time = 1;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setLastEstablishTime($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->last_establish_time = $var;

        return $this;
    }

    /**
     * Video codec used in the input stream.
     *
     * Generated from protobuf field <code>string video_codec = 2;</code>
     * @return string
     */
    public function getVideoCodec()
    {
        return $this->video_codec;
    }

    /**
     * Video codec used in the input stream.
     *
     * Generated from protobuf field <code>string video_codec = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setVideoCodec($var)
    {
        GPBUtil::checkString($var, True);
        $this->video_codec = $var;

        return $this;
    }

    /**
     * Audio codec used in the input stream.
     *
     * Generated from protobuf field <code>string audio_codec = 3;</code>
     * @return string
     */
    public function getAudioCodec()
    {
        return $this->audio_codec;
    }

    /**
     * Audio codec used in the input stream.
     *
     * Generated from protobuf field <code>string audio_codec = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setAudioCodec($var)
    {
        GPBUtil::checkString($var, True);
        $this->audio_codec = $var;

        return $this;
    }

    /**
     * The width of the input video in pixels.
     *
     * Generated from protobuf field <code>int32 width_pixels = 4;</code>
     * @return int
     */
    public function getWidthPixels()
    {
        return $this->width_pixels;
    }

    /**
     * The width of the input video in pixels.
     *
     * Generated from protobuf field <code>int32 width_pixels = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setWidthPixels($var)
    {
        GPBUtil::checkInt32($var);
        $this->width_pixels = $var;

        return $this;
    }

    /**
     * The height of the input video in pixels.
     *
     * Generated from protobuf field <code>int32 height_pixels = 5;</code>
     * @return int
     */
    public function getHeightPixels()
    {
        return $this->height_pixels;
    }

    /**
     * The height of the input video in pixels.
     *
     * Generated from protobuf field <code>int32 height_pixels = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setHeightPixels($var)
    {
        GPBUtil::checkInt32($var);
        $this->height_pixels = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(StreamInfo::class, \Google\Cloud\Video\Livestream\V1\Input_StreamInfo::class);

