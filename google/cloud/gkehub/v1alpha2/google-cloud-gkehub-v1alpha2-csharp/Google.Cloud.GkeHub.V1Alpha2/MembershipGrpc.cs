// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/gkehub/v1alpha2/membership.proto
// </auto-generated>
// Original file comments:
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.GkeHub.V1Alpha2 {
  /// <summary>
  /// The GKE Hub service handles the registration of many Kubernetes
  /// clusters to Google Cloud, represented with the [Membership][google.cloud.gkehub.v1alpha2.Membership] resource.
  ///
  /// GKE Hub is currently only available in the global region.
  ///
  /// **Membership management may be non-trivial:** it is recommended to use one
  /// of the Google-provided client libraries or tools where possible when working
  /// with Membership resources.
  /// </summary>
  public static partial class GkeHub
  {
    static readonly string __ServiceName = "google.cloud.gkehub.v1alpha2.GkeHub";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Google.Cloud.GkeHub.V1Alpha2.ListMembershipsRequest> __Marshaller_google_cloud_gkehub_v1alpha2_ListMembershipsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeHub.V1Alpha2.ListMembershipsRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.GkeHub.V1Alpha2.ListMembershipsResponse> __Marshaller_google_cloud_gkehub_v1alpha2_ListMembershipsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeHub.V1Alpha2.ListMembershipsResponse.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.GkeHub.V1Alpha2.GetMembershipRequest> __Marshaller_google_cloud_gkehub_v1alpha2_GetMembershipRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeHub.V1Alpha2.GetMembershipRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.GkeHub.V1Alpha2.Membership> __Marshaller_google_cloud_gkehub_v1alpha2_Membership = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeHub.V1Alpha2.Membership.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.GkeHub.V1Alpha2.CreateMembershipRequest> __Marshaller_google_cloud_gkehub_v1alpha2_CreateMembershipRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeHub.V1Alpha2.CreateMembershipRequest.Parser));
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.GkeHub.V1Alpha2.DeleteMembershipRequest> __Marshaller_google_cloud_gkehub_v1alpha2_DeleteMembershipRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeHub.V1Alpha2.DeleteMembershipRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.GkeHub.V1Alpha2.UpdateMembershipRequest> __Marshaller_google_cloud_gkehub_v1alpha2_UpdateMembershipRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeHub.V1Alpha2.UpdateMembershipRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.GkeHub.V1Alpha2.GenerateConnectManifestRequest> __Marshaller_google_cloud_gkehub_v1alpha2_GenerateConnectManifestRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeHub.V1Alpha2.GenerateConnectManifestRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.GkeHub.V1Alpha2.GenerateConnectManifestResponse> __Marshaller_google_cloud_gkehub_v1alpha2_GenerateConnectManifestResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeHub.V1Alpha2.GenerateConnectManifestResponse.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.GkeHub.V1Alpha2.InitializeHubRequest> __Marshaller_google_cloud_gkehub_v1alpha2_InitializeHubRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeHub.V1Alpha2.InitializeHubRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.GkeHub.V1Alpha2.InitializeHubResponse> __Marshaller_google_cloud_gkehub_v1alpha2_InitializeHubResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeHub.V1Alpha2.InitializeHubResponse.Parser));

    static readonly grpc::Method<global::Google.Cloud.GkeHub.V1Alpha2.ListMembershipsRequest, global::Google.Cloud.GkeHub.V1Alpha2.ListMembershipsResponse> __Method_ListMemberships = new grpc::Method<global::Google.Cloud.GkeHub.V1Alpha2.ListMembershipsRequest, global::Google.Cloud.GkeHub.V1Alpha2.ListMembershipsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListMemberships",
        __Marshaller_google_cloud_gkehub_v1alpha2_ListMembershipsRequest,
        __Marshaller_google_cloud_gkehub_v1alpha2_ListMembershipsResponse);

    static readonly grpc::Method<global::Google.Cloud.GkeHub.V1Alpha2.GetMembershipRequest, global::Google.Cloud.GkeHub.V1Alpha2.Membership> __Method_GetMembership = new grpc::Method<global::Google.Cloud.GkeHub.V1Alpha2.GetMembershipRequest, global::Google.Cloud.GkeHub.V1Alpha2.Membership>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMembership",
        __Marshaller_google_cloud_gkehub_v1alpha2_GetMembershipRequest,
        __Marshaller_google_cloud_gkehub_v1alpha2_Membership);

    static readonly grpc::Method<global::Google.Cloud.GkeHub.V1Alpha2.CreateMembershipRequest, global::Google.LongRunning.Operation> __Method_CreateMembership = new grpc::Method<global::Google.Cloud.GkeHub.V1Alpha2.CreateMembershipRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateMembership",
        __Marshaller_google_cloud_gkehub_v1alpha2_CreateMembershipRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Cloud.GkeHub.V1Alpha2.DeleteMembershipRequest, global::Google.LongRunning.Operation> __Method_DeleteMembership = new grpc::Method<global::Google.Cloud.GkeHub.V1Alpha2.DeleteMembershipRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteMembership",
        __Marshaller_google_cloud_gkehub_v1alpha2_DeleteMembershipRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Cloud.GkeHub.V1Alpha2.UpdateMembershipRequest, global::Google.LongRunning.Operation> __Method_UpdateMembership = new grpc::Method<global::Google.Cloud.GkeHub.V1Alpha2.UpdateMembershipRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateMembership",
        __Marshaller_google_cloud_gkehub_v1alpha2_UpdateMembershipRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Cloud.GkeHub.V1Alpha2.GenerateConnectManifestRequest, global::Google.Cloud.GkeHub.V1Alpha2.GenerateConnectManifestResponse> __Method_GenerateConnectManifest = new grpc::Method<global::Google.Cloud.GkeHub.V1Alpha2.GenerateConnectManifestRequest, global::Google.Cloud.GkeHub.V1Alpha2.GenerateConnectManifestResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateConnectManifest",
        __Marshaller_google_cloud_gkehub_v1alpha2_GenerateConnectManifestRequest,
        __Marshaller_google_cloud_gkehub_v1alpha2_GenerateConnectManifestResponse);

    static readonly grpc::Method<global::Google.Cloud.GkeHub.V1Alpha2.InitializeHubRequest, global::Google.Cloud.GkeHub.V1Alpha2.InitializeHubResponse> __Method_InitializeHub = new grpc::Method<global::Google.Cloud.GkeHub.V1Alpha2.InitializeHubRequest, global::Google.Cloud.GkeHub.V1Alpha2.InitializeHubResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InitializeHub",
        __Marshaller_google_cloud_gkehub_v1alpha2_InitializeHubRequest,
        __Marshaller_google_cloud_gkehub_v1alpha2_InitializeHubResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.GkeHub.V1Alpha2.MembershipReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of GkeHub</summary>
    [grpc::BindServiceMethod(typeof(GkeHub), "BindService")]
    public abstract partial class GkeHubBase
    {
      /// <summary>
      /// Lists Memberships in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeHub.V1Alpha2.ListMembershipsResponse> ListMemberships(global::Google.Cloud.GkeHub.V1Alpha2.ListMembershipsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the details of a Membership.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeHub.V1Alpha2.Membership> GetMembership(global::Google.Cloud.GkeHub.V1Alpha2.GetMembershipRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new Membership.
      ///
      /// **This is currently only supported for GKE clusters on Google Cloud**.
      /// To register other clusters, follow the instructions at
      /// https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateMembership(global::Google.Cloud.GkeHub.V1Alpha2.CreateMembershipRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Removes a Membership.
      ///
      /// **This is currently only supported for GKE clusters on Google Cloud**.
      /// To unregister other clusters, follow the instructions at
      /// https://cloud.google.com/anthos/multicluster-management/connect/unregistering-a-cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteMembership(global::Google.Cloud.GkeHub.V1Alpha2.DeleteMembershipRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an existing Membership.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateMembership(global::Google.Cloud.GkeHub.V1Alpha2.UpdateMembershipRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Generates the manifest for deployment of the GKE connect agent.
      ///
      /// **This method is used internally by Google-provided libraries.**
      /// Most clients should not need to call this method directly.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeHub.V1Alpha2.GenerateConnectManifestResponse> GenerateConnectManifest(global::Google.Cloud.GkeHub.V1Alpha2.GenerateConnectManifestRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Initializes the Hub in this project, which includes creating the default
      /// Hub Service Account and the Hub Workload Identity Pool. Initialization is
      /// optional, and happens automatically when the first Membership is created.
      ///
      /// InitializeHub should be called when the first Membership cannot be
      /// registered without these resources. A common example is granting the Hub
      /// Service Account access to another project, which requires the account to
      /// exist first.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeHub.V1Alpha2.InitializeHubResponse> InitializeHub(global::Google.Cloud.GkeHub.V1Alpha2.InitializeHubRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GkeHub</summary>
    public partial class GkeHubClient : grpc::ClientBase<GkeHubClient>
    {
      /// <summary>Creates a new client for GkeHub</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GkeHubClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GkeHub that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GkeHubClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GkeHubClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GkeHubClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Lists Memberships in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.GkeHub.V1Alpha2.ListMembershipsResponse ListMemberships(global::Google.Cloud.GkeHub.V1Alpha2.ListMembershipsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListMemberships(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists Memberships in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.GkeHub.V1Alpha2.ListMembershipsResponse ListMemberships(global::Google.Cloud.GkeHub.V1Alpha2.ListMembershipsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListMemberships, null, options, request);
      }
      /// <summary>
      /// Lists Memberships in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeHub.V1Alpha2.ListMembershipsResponse> ListMembershipsAsync(global::Google.Cloud.GkeHub.V1Alpha2.ListMembershipsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListMembershipsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists Memberships in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeHub.V1Alpha2.ListMembershipsResponse> ListMembershipsAsync(global::Google.Cloud.GkeHub.V1Alpha2.ListMembershipsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListMemberships, null, options, request);
      }
      /// <summary>
      /// Gets the details of a Membership.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.GkeHub.V1Alpha2.Membership GetMembership(global::Google.Cloud.GkeHub.V1Alpha2.GetMembershipRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMembership(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the details of a Membership.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.GkeHub.V1Alpha2.Membership GetMembership(global::Google.Cloud.GkeHub.V1Alpha2.GetMembershipRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMembership, null, options, request);
      }
      /// <summary>
      /// Gets the details of a Membership.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeHub.V1Alpha2.Membership> GetMembershipAsync(global::Google.Cloud.GkeHub.V1Alpha2.GetMembershipRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMembershipAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the details of a Membership.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeHub.V1Alpha2.Membership> GetMembershipAsync(global::Google.Cloud.GkeHub.V1Alpha2.GetMembershipRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMembership, null, options, request);
      }
      /// <summary>
      /// Creates a new Membership.
      ///
      /// **This is currently only supported for GKE clusters on Google Cloud**.
      /// To register other clusters, follow the instructions at
      /// https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation CreateMembership(global::Google.Cloud.GkeHub.V1Alpha2.CreateMembershipRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMembership(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new Membership.
      ///
      /// **This is currently only supported for GKE clusters on Google Cloud**.
      /// To register other clusters, follow the instructions at
      /// https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation CreateMembership(global::Google.Cloud.GkeHub.V1Alpha2.CreateMembershipRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateMembership, null, options, request);
      }
      /// <summary>
      /// Creates a new Membership.
      ///
      /// **This is currently only supported for GKE clusters on Google Cloud**.
      /// To register other clusters, follow the instructions at
      /// https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateMembershipAsync(global::Google.Cloud.GkeHub.V1Alpha2.CreateMembershipRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMembershipAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new Membership.
      ///
      /// **This is currently only supported for GKE clusters on Google Cloud**.
      /// To register other clusters, follow the instructions at
      /// https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateMembershipAsync(global::Google.Cloud.GkeHub.V1Alpha2.CreateMembershipRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateMembership, null, options, request);
      }
      /// <summary>
      /// Removes a Membership.
      ///
      /// **This is currently only supported for GKE clusters on Google Cloud**.
      /// To unregister other clusters, follow the instructions at
      /// https://cloud.google.com/anthos/multicluster-management/connect/unregistering-a-cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation DeleteMembership(global::Google.Cloud.GkeHub.V1Alpha2.DeleteMembershipRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteMembership(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes a Membership.
      ///
      /// **This is currently only supported for GKE clusters on Google Cloud**.
      /// To unregister other clusters, follow the instructions at
      /// https://cloud.google.com/anthos/multicluster-management/connect/unregistering-a-cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation DeleteMembership(global::Google.Cloud.GkeHub.V1Alpha2.DeleteMembershipRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteMembership, null, options, request);
      }
      /// <summary>
      /// Removes a Membership.
      ///
      /// **This is currently only supported for GKE clusters on Google Cloud**.
      /// To unregister other clusters, follow the instructions at
      /// https://cloud.google.com/anthos/multicluster-management/connect/unregistering-a-cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteMembershipAsync(global::Google.Cloud.GkeHub.V1Alpha2.DeleteMembershipRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteMembershipAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes a Membership.
      ///
      /// **This is currently only supported for GKE clusters on Google Cloud**.
      /// To unregister other clusters, follow the instructions at
      /// https://cloud.google.com/anthos/multicluster-management/connect/unregistering-a-cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteMembershipAsync(global::Google.Cloud.GkeHub.V1Alpha2.DeleteMembershipRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteMembership, null, options, request);
      }
      /// <summary>
      /// Updates an existing Membership.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation UpdateMembership(global::Google.Cloud.GkeHub.V1Alpha2.UpdateMembershipRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateMembership(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing Membership.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation UpdateMembership(global::Google.Cloud.GkeHub.V1Alpha2.UpdateMembershipRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateMembership, null, options, request);
      }
      /// <summary>
      /// Updates an existing Membership.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateMembershipAsync(global::Google.Cloud.GkeHub.V1Alpha2.UpdateMembershipRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateMembershipAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing Membership.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateMembershipAsync(global::Google.Cloud.GkeHub.V1Alpha2.UpdateMembershipRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateMembership, null, options, request);
      }
      /// <summary>
      /// Generates the manifest for deployment of the GKE connect agent.
      ///
      /// **This method is used internally by Google-provided libraries.**
      /// Most clients should not need to call this method directly.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.GkeHub.V1Alpha2.GenerateConnectManifestResponse GenerateConnectManifest(global::Google.Cloud.GkeHub.V1Alpha2.GenerateConnectManifestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateConnectManifest(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generates the manifest for deployment of the GKE connect agent.
      ///
      /// **This method is used internally by Google-provided libraries.**
      /// Most clients should not need to call this method directly.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.GkeHub.V1Alpha2.GenerateConnectManifestResponse GenerateConnectManifest(global::Google.Cloud.GkeHub.V1Alpha2.GenerateConnectManifestRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateConnectManifest, null, options, request);
      }
      /// <summary>
      /// Generates the manifest for deployment of the GKE connect agent.
      ///
      /// **This method is used internally by Google-provided libraries.**
      /// Most clients should not need to call this method directly.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeHub.V1Alpha2.GenerateConnectManifestResponse> GenerateConnectManifestAsync(global::Google.Cloud.GkeHub.V1Alpha2.GenerateConnectManifestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateConnectManifestAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generates the manifest for deployment of the GKE connect agent.
      ///
      /// **This method is used internally by Google-provided libraries.**
      /// Most clients should not need to call this method directly.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeHub.V1Alpha2.GenerateConnectManifestResponse> GenerateConnectManifestAsync(global::Google.Cloud.GkeHub.V1Alpha2.GenerateConnectManifestRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateConnectManifest, null, options, request);
      }
      /// <summary>
      /// Initializes the Hub in this project, which includes creating the default
      /// Hub Service Account and the Hub Workload Identity Pool. Initialization is
      /// optional, and happens automatically when the first Membership is created.
      ///
      /// InitializeHub should be called when the first Membership cannot be
      /// registered without these resources. A common example is granting the Hub
      /// Service Account access to another project, which requires the account to
      /// exist first.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.GkeHub.V1Alpha2.InitializeHubResponse InitializeHub(global::Google.Cloud.GkeHub.V1Alpha2.InitializeHubRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InitializeHub(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Initializes the Hub in this project, which includes creating the default
      /// Hub Service Account and the Hub Workload Identity Pool. Initialization is
      /// optional, and happens automatically when the first Membership is created.
      ///
      /// InitializeHub should be called when the first Membership cannot be
      /// registered without these resources. A common example is granting the Hub
      /// Service Account access to another project, which requires the account to
      /// exist first.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.GkeHub.V1Alpha2.InitializeHubResponse InitializeHub(global::Google.Cloud.GkeHub.V1Alpha2.InitializeHubRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InitializeHub, null, options, request);
      }
      /// <summary>
      /// Initializes the Hub in this project, which includes creating the default
      /// Hub Service Account and the Hub Workload Identity Pool. Initialization is
      /// optional, and happens automatically when the first Membership is created.
      ///
      /// InitializeHub should be called when the first Membership cannot be
      /// registered without these resources. A common example is granting the Hub
      /// Service Account access to another project, which requires the account to
      /// exist first.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeHub.V1Alpha2.InitializeHubResponse> InitializeHubAsync(global::Google.Cloud.GkeHub.V1Alpha2.InitializeHubRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InitializeHubAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Initializes the Hub in this project, which includes creating the default
      /// Hub Service Account and the Hub Workload Identity Pool. Initialization is
      /// optional, and happens automatically when the first Membership is created.
      ///
      /// InitializeHub should be called when the first Membership cannot be
      /// registered without these resources. A common example is granting the Hub
      /// Service Account access to another project, which requires the account to
      /// exist first.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeHub.V1Alpha2.InitializeHubResponse> InitializeHubAsync(global::Google.Cloud.GkeHub.V1Alpha2.InitializeHubRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InitializeHub, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GkeHubClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GkeHubClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GkeHubBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListMemberships, serviceImpl.ListMemberships)
          .AddMethod(__Method_GetMembership, serviceImpl.GetMembership)
          .AddMethod(__Method_CreateMembership, serviceImpl.CreateMembership)
          .AddMethod(__Method_DeleteMembership, serviceImpl.DeleteMembership)
          .AddMethod(__Method_UpdateMembership, serviceImpl.UpdateMembership)
          .AddMethod(__Method_GenerateConnectManifest, serviceImpl.GenerateConnectManifest)
          .AddMethod(__Method_InitializeHub, serviceImpl.InitializeHub).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GkeHubBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListMemberships, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeHub.V1Alpha2.ListMembershipsRequest, global::Google.Cloud.GkeHub.V1Alpha2.ListMembershipsResponse>(serviceImpl.ListMemberships));
      serviceBinder.AddMethod(__Method_GetMembership, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeHub.V1Alpha2.GetMembershipRequest, global::Google.Cloud.GkeHub.V1Alpha2.Membership>(serviceImpl.GetMembership));
      serviceBinder.AddMethod(__Method_CreateMembership, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeHub.V1Alpha2.CreateMembershipRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateMembership));
      serviceBinder.AddMethod(__Method_DeleteMembership, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeHub.V1Alpha2.DeleteMembershipRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteMembership));
      serviceBinder.AddMethod(__Method_UpdateMembership, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeHub.V1Alpha2.UpdateMembershipRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateMembership));
      serviceBinder.AddMethod(__Method_GenerateConnectManifest, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeHub.V1Alpha2.GenerateConnectManifestRequest, global::Google.Cloud.GkeHub.V1Alpha2.GenerateConnectManifestResponse>(serviceImpl.GenerateConnectManifest));
      serviceBinder.AddMethod(__Method_InitializeHub, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeHub.V1Alpha2.InitializeHubRequest, global::Google.Cloud.GkeHub.V1Alpha2.InitializeHubResponse>(serviceImpl.InitializeHub));
    }

  }
}
#endregion
