// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/asset/v1/asset_service.proto
// </auto-generated>
// Original file comments:
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Asset.V1 {
  /// <summary>
  /// Asset service definition.
  /// </summary>
  public static partial class AssetService
  {
    static readonly string __ServiceName = "google.cloud.asset.v1.AssetService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Google.Cloud.Asset.V1.ExportAssetsRequest> __Marshaller_google_cloud_asset_v1_ExportAssetsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Asset.V1.ExportAssetsRequest.Parser));
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Asset.V1.ListAssetsRequest> __Marshaller_google_cloud_asset_v1_ListAssetsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Asset.V1.ListAssetsRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Asset.V1.ListAssetsResponse> __Marshaller_google_cloud_asset_v1_ListAssetsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Asset.V1.ListAssetsResponse.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Asset.V1.BatchGetAssetsHistoryRequest> __Marshaller_google_cloud_asset_v1_BatchGetAssetsHistoryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Asset.V1.BatchGetAssetsHistoryRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Asset.V1.BatchGetAssetsHistoryResponse> __Marshaller_google_cloud_asset_v1_BatchGetAssetsHistoryResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Asset.V1.BatchGetAssetsHistoryResponse.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Asset.V1.CreateFeedRequest> __Marshaller_google_cloud_asset_v1_CreateFeedRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Asset.V1.CreateFeedRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Asset.V1.Feed> __Marshaller_google_cloud_asset_v1_Feed = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Asset.V1.Feed.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Asset.V1.GetFeedRequest> __Marshaller_google_cloud_asset_v1_GetFeedRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Asset.V1.GetFeedRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Asset.V1.ListFeedsRequest> __Marshaller_google_cloud_asset_v1_ListFeedsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Asset.V1.ListFeedsRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Asset.V1.ListFeedsResponse> __Marshaller_google_cloud_asset_v1_ListFeedsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Asset.V1.ListFeedsResponse.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Asset.V1.UpdateFeedRequest> __Marshaller_google_cloud_asset_v1_UpdateFeedRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Asset.V1.UpdateFeedRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Asset.V1.DeleteFeedRequest> __Marshaller_google_cloud_asset_v1_DeleteFeedRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Asset.V1.DeleteFeedRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Asset.V1.SearchAllResourcesRequest> __Marshaller_google_cloud_asset_v1_SearchAllResourcesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Asset.V1.SearchAllResourcesRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Asset.V1.SearchAllResourcesResponse> __Marshaller_google_cloud_asset_v1_SearchAllResourcesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Asset.V1.SearchAllResourcesResponse.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Asset.V1.SearchAllIamPoliciesRequest> __Marshaller_google_cloud_asset_v1_SearchAllIamPoliciesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Asset.V1.SearchAllIamPoliciesRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Asset.V1.SearchAllIamPoliciesResponse> __Marshaller_google_cloud_asset_v1_SearchAllIamPoliciesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Asset.V1.SearchAllIamPoliciesResponse.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Asset.V1.AnalyzeIamPolicyRequest> __Marshaller_google_cloud_asset_v1_AnalyzeIamPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Asset.V1.AnalyzeIamPolicyRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Asset.V1.AnalyzeIamPolicyResponse> __Marshaller_google_cloud_asset_v1_AnalyzeIamPolicyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Asset.V1.AnalyzeIamPolicyResponse.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Asset.V1.AnalyzeIamPolicyLongrunningRequest> __Marshaller_google_cloud_asset_v1_AnalyzeIamPolicyLongrunningRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Asset.V1.AnalyzeIamPolicyLongrunningRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Asset.V1.AnalyzeMoveRequest> __Marshaller_google_cloud_asset_v1_AnalyzeMoveRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Asset.V1.AnalyzeMoveRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.Asset.V1.AnalyzeMoveResponse> __Marshaller_google_cloud_asset_v1_AnalyzeMoveResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Asset.V1.AnalyzeMoveResponse.Parser));

    static readonly grpc::Method<global::Google.Cloud.Asset.V1.ExportAssetsRequest, global::Google.LongRunning.Operation> __Method_ExportAssets = new grpc::Method<global::Google.Cloud.Asset.V1.ExportAssetsRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExportAssets",
        __Marshaller_google_cloud_asset_v1_ExportAssetsRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Cloud.Asset.V1.ListAssetsRequest, global::Google.Cloud.Asset.V1.ListAssetsResponse> __Method_ListAssets = new grpc::Method<global::Google.Cloud.Asset.V1.ListAssetsRequest, global::Google.Cloud.Asset.V1.ListAssetsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAssets",
        __Marshaller_google_cloud_asset_v1_ListAssetsRequest,
        __Marshaller_google_cloud_asset_v1_ListAssetsResponse);

    static readonly grpc::Method<global::Google.Cloud.Asset.V1.BatchGetAssetsHistoryRequest, global::Google.Cloud.Asset.V1.BatchGetAssetsHistoryResponse> __Method_BatchGetAssetsHistory = new grpc::Method<global::Google.Cloud.Asset.V1.BatchGetAssetsHistoryRequest, global::Google.Cloud.Asset.V1.BatchGetAssetsHistoryResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchGetAssetsHistory",
        __Marshaller_google_cloud_asset_v1_BatchGetAssetsHistoryRequest,
        __Marshaller_google_cloud_asset_v1_BatchGetAssetsHistoryResponse);

    static readonly grpc::Method<global::Google.Cloud.Asset.V1.CreateFeedRequest, global::Google.Cloud.Asset.V1.Feed> __Method_CreateFeed = new grpc::Method<global::Google.Cloud.Asset.V1.CreateFeedRequest, global::Google.Cloud.Asset.V1.Feed>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateFeed",
        __Marshaller_google_cloud_asset_v1_CreateFeedRequest,
        __Marshaller_google_cloud_asset_v1_Feed);

    static readonly grpc::Method<global::Google.Cloud.Asset.V1.GetFeedRequest, global::Google.Cloud.Asset.V1.Feed> __Method_GetFeed = new grpc::Method<global::Google.Cloud.Asset.V1.GetFeedRequest, global::Google.Cloud.Asset.V1.Feed>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFeed",
        __Marshaller_google_cloud_asset_v1_GetFeedRequest,
        __Marshaller_google_cloud_asset_v1_Feed);

    static readonly grpc::Method<global::Google.Cloud.Asset.V1.ListFeedsRequest, global::Google.Cloud.Asset.V1.ListFeedsResponse> __Method_ListFeeds = new grpc::Method<global::Google.Cloud.Asset.V1.ListFeedsRequest, global::Google.Cloud.Asset.V1.ListFeedsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListFeeds",
        __Marshaller_google_cloud_asset_v1_ListFeedsRequest,
        __Marshaller_google_cloud_asset_v1_ListFeedsResponse);

    static readonly grpc::Method<global::Google.Cloud.Asset.V1.UpdateFeedRequest, global::Google.Cloud.Asset.V1.Feed> __Method_UpdateFeed = new grpc::Method<global::Google.Cloud.Asset.V1.UpdateFeedRequest, global::Google.Cloud.Asset.V1.Feed>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateFeed",
        __Marshaller_google_cloud_asset_v1_UpdateFeedRequest,
        __Marshaller_google_cloud_asset_v1_Feed);

    static readonly grpc::Method<global::Google.Cloud.Asset.V1.DeleteFeedRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteFeed = new grpc::Method<global::Google.Cloud.Asset.V1.DeleteFeedRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteFeed",
        __Marshaller_google_cloud_asset_v1_DeleteFeedRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Google.Cloud.Asset.V1.SearchAllResourcesRequest, global::Google.Cloud.Asset.V1.SearchAllResourcesResponse> __Method_SearchAllResources = new grpc::Method<global::Google.Cloud.Asset.V1.SearchAllResourcesRequest, global::Google.Cloud.Asset.V1.SearchAllResourcesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SearchAllResources",
        __Marshaller_google_cloud_asset_v1_SearchAllResourcesRequest,
        __Marshaller_google_cloud_asset_v1_SearchAllResourcesResponse);

    static readonly grpc::Method<global::Google.Cloud.Asset.V1.SearchAllIamPoliciesRequest, global::Google.Cloud.Asset.V1.SearchAllIamPoliciesResponse> __Method_SearchAllIamPolicies = new grpc::Method<global::Google.Cloud.Asset.V1.SearchAllIamPoliciesRequest, global::Google.Cloud.Asset.V1.SearchAllIamPoliciesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SearchAllIamPolicies",
        __Marshaller_google_cloud_asset_v1_SearchAllIamPoliciesRequest,
        __Marshaller_google_cloud_asset_v1_SearchAllIamPoliciesResponse);

    static readonly grpc::Method<global::Google.Cloud.Asset.V1.AnalyzeIamPolicyRequest, global::Google.Cloud.Asset.V1.AnalyzeIamPolicyResponse> __Method_AnalyzeIamPolicy = new grpc::Method<global::Google.Cloud.Asset.V1.AnalyzeIamPolicyRequest, global::Google.Cloud.Asset.V1.AnalyzeIamPolicyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AnalyzeIamPolicy",
        __Marshaller_google_cloud_asset_v1_AnalyzeIamPolicyRequest,
        __Marshaller_google_cloud_asset_v1_AnalyzeIamPolicyResponse);

    static readonly grpc::Method<global::Google.Cloud.Asset.V1.AnalyzeIamPolicyLongrunningRequest, global::Google.LongRunning.Operation> __Method_AnalyzeIamPolicyLongrunning = new grpc::Method<global::Google.Cloud.Asset.V1.AnalyzeIamPolicyLongrunningRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AnalyzeIamPolicyLongrunning",
        __Marshaller_google_cloud_asset_v1_AnalyzeIamPolicyLongrunningRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Cloud.Asset.V1.AnalyzeMoveRequest, global::Google.Cloud.Asset.V1.AnalyzeMoveResponse> __Method_AnalyzeMove = new grpc::Method<global::Google.Cloud.Asset.V1.AnalyzeMoveRequest, global::Google.Cloud.Asset.V1.AnalyzeMoveResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AnalyzeMove",
        __Marshaller_google_cloud_asset_v1_AnalyzeMoveRequest,
        __Marshaller_google_cloud_asset_v1_AnalyzeMoveResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Asset.V1.AssetServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of AssetService</summary>
    [grpc::BindServiceMethod(typeof(AssetService), "BindService")]
    public abstract partial class AssetServiceBase
    {
      /// <summary>
      /// Exports assets with time and resource types to a given Cloud Storage
      /// location/BigQuery table. For Cloud Storage location destinations, the
      /// output format is newline-delimited JSON. Each line represents a
      /// [google.cloud.asset.v1.Asset][google.cloud.asset.v1.Asset] in the JSON format; for BigQuery table
      /// destinations, the output table stores the fields in asset proto as columns.
      /// This API implements the [google.longrunning.Operation][google.longrunning.Operation] API
      /// , which allows you to keep track of the export. We recommend intervals of
      /// at least 2 seconds with exponential retry to poll the export operation
      /// result. For regular-size resource parent, the export operation usually
      /// finishes within 5 minutes.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> ExportAssets(global::Google.Cloud.Asset.V1.ExportAssetsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists assets with time and resource types and returns paged results in
      /// response.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Asset.V1.ListAssetsResponse> ListAssets(global::Google.Cloud.Asset.V1.ListAssetsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Batch gets the update history of assets that overlap a time window.
      /// For IAM_POLICY content, this API outputs history when the asset and its
      /// attached IAM POLICY both exist. This can create gaps in the output history.
      /// Otherwise, this API outputs history with asset in both non-delete or
      /// deleted status.
      /// If a specified asset does not exist, this API returns an INVALID_ARGUMENT
      /// error.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Asset.V1.BatchGetAssetsHistoryResponse> BatchGetAssetsHistory(global::Google.Cloud.Asset.V1.BatchGetAssetsHistoryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a feed in a parent project/folder/organization to listen to its
      /// asset updates.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Asset.V1.Feed> CreateFeed(global::Google.Cloud.Asset.V1.CreateFeedRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets details about an asset feed.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Asset.V1.Feed> GetFeed(global::Google.Cloud.Asset.V1.GetFeedRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all asset feeds in a parent project/folder/organization.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Asset.V1.ListFeedsResponse> ListFeeds(global::Google.Cloud.Asset.V1.ListFeedsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an asset feed configuration.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Asset.V1.Feed> UpdateFeed(global::Google.Cloud.Asset.V1.UpdateFeedRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes an asset feed.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteFeed(global::Google.Cloud.Asset.V1.DeleteFeedRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Searches all Cloud resources within the specified scope, such as a project,
      /// folder, or organization. The caller must be granted the
      /// `cloudasset.assets.searchAllResources` permission on the desired scope,
      /// otherwise the request will be rejected.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Asset.V1.SearchAllResourcesResponse> SearchAllResources(global::Google.Cloud.Asset.V1.SearchAllResourcesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Searches all IAM policies within the specified scope, such as a project,
      /// folder, or organization. The caller must be granted the
      /// `cloudasset.assets.searchAllIamPolicies` permission on the desired scope,
      /// otherwise the request will be rejected.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Asset.V1.SearchAllIamPoliciesResponse> SearchAllIamPolicies(global::Google.Cloud.Asset.V1.SearchAllIamPoliciesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Analyzes IAM policies to answer which identities have what accesses on
      /// which resources.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Asset.V1.AnalyzeIamPolicyResponse> AnalyzeIamPolicy(global::Google.Cloud.Asset.V1.AnalyzeIamPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Analyzes IAM policies asynchronously to answer which identities have what
      /// accesses on which resources, and writes the analysis results to a Google
      /// Cloud Storage or a BigQuery destination. For Cloud Storage destination, the
      /// output format is the JSON format that represents a
      /// [AnalyzeIamPolicyResponse][google.cloud.asset.v1.AnalyzeIamPolicyResponse]. This method implements the
      /// [google.longrunning.Operation][google.longrunning.Operation], which allows you to track the operation
      /// status. We recommend intervals of at least 2 seconds with exponential
      /// backoff retry to poll the operation result. The metadata contains the
      /// metadata for the long-running operation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> AnalyzeIamPolicyLongrunning(global::Google.Cloud.Asset.V1.AnalyzeIamPolicyLongrunningRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Analyze moving a resource to a specified destination without kicking off
      /// the actual move. The analysis is best effort depending on the user's
      /// permissions of viewing different hierarchical policies and configurations.
      /// The policies and configuration are subject to change before the actual
      /// resource migration takes place.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Asset.V1.AnalyzeMoveResponse> AnalyzeMove(global::Google.Cloud.Asset.V1.AnalyzeMoveRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for AssetService</summary>
    public partial class AssetServiceClient : grpc::ClientBase<AssetServiceClient>
    {
      /// <summary>Creates a new client for AssetService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AssetServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AssetService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AssetServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AssetServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AssetServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Exports assets with time and resource types to a given Cloud Storage
      /// location/BigQuery table. For Cloud Storage location destinations, the
      /// output format is newline-delimited JSON. Each line represents a
      /// [google.cloud.asset.v1.Asset][google.cloud.asset.v1.Asset] in the JSON format; for BigQuery table
      /// destinations, the output table stores the fields in asset proto as columns.
      /// This API implements the [google.longrunning.Operation][google.longrunning.Operation] API
      /// , which allows you to keep track of the export. We recommend intervals of
      /// at least 2 seconds with exponential retry to poll the export operation
      /// result. For regular-size resource parent, the export operation usually
      /// finishes within 5 minutes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation ExportAssets(global::Google.Cloud.Asset.V1.ExportAssetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExportAssets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Exports assets with time and resource types to a given Cloud Storage
      /// location/BigQuery table. For Cloud Storage location destinations, the
      /// output format is newline-delimited JSON. Each line represents a
      /// [google.cloud.asset.v1.Asset][google.cloud.asset.v1.Asset] in the JSON format; for BigQuery table
      /// destinations, the output table stores the fields in asset proto as columns.
      /// This API implements the [google.longrunning.Operation][google.longrunning.Operation] API
      /// , which allows you to keep track of the export. We recommend intervals of
      /// at least 2 seconds with exponential retry to poll the export operation
      /// result. For regular-size resource parent, the export operation usually
      /// finishes within 5 minutes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation ExportAssets(global::Google.Cloud.Asset.V1.ExportAssetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExportAssets, null, options, request);
      }
      /// <summary>
      /// Exports assets with time and resource types to a given Cloud Storage
      /// location/BigQuery table. For Cloud Storage location destinations, the
      /// output format is newline-delimited JSON. Each line represents a
      /// [google.cloud.asset.v1.Asset][google.cloud.asset.v1.Asset] in the JSON format; for BigQuery table
      /// destinations, the output table stores the fields in asset proto as columns.
      /// This API implements the [google.longrunning.Operation][google.longrunning.Operation] API
      /// , which allows you to keep track of the export. We recommend intervals of
      /// at least 2 seconds with exponential retry to poll the export operation
      /// result. For regular-size resource parent, the export operation usually
      /// finishes within 5 minutes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ExportAssetsAsync(global::Google.Cloud.Asset.V1.ExportAssetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExportAssetsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Exports assets with time and resource types to a given Cloud Storage
      /// location/BigQuery table. For Cloud Storage location destinations, the
      /// output format is newline-delimited JSON. Each line represents a
      /// [google.cloud.asset.v1.Asset][google.cloud.asset.v1.Asset] in the JSON format; for BigQuery table
      /// destinations, the output table stores the fields in asset proto as columns.
      /// This API implements the [google.longrunning.Operation][google.longrunning.Operation] API
      /// , which allows you to keep track of the export. We recommend intervals of
      /// at least 2 seconds with exponential retry to poll the export operation
      /// result. For regular-size resource parent, the export operation usually
      /// finishes within 5 minutes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ExportAssetsAsync(global::Google.Cloud.Asset.V1.ExportAssetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExportAssets, null, options, request);
      }
      /// <summary>
      /// Lists assets with time and resource types and returns paged results in
      /// response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Asset.V1.ListAssetsResponse ListAssets(global::Google.Cloud.Asset.V1.ListAssetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAssets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists assets with time and resource types and returns paged results in
      /// response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Asset.V1.ListAssetsResponse ListAssets(global::Google.Cloud.Asset.V1.ListAssetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAssets, null, options, request);
      }
      /// <summary>
      /// Lists assets with time and resource types and returns paged results in
      /// response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Asset.V1.ListAssetsResponse> ListAssetsAsync(global::Google.Cloud.Asset.V1.ListAssetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAssetsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists assets with time and resource types and returns paged results in
      /// response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Asset.V1.ListAssetsResponse> ListAssetsAsync(global::Google.Cloud.Asset.V1.ListAssetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAssets, null, options, request);
      }
      /// <summary>
      /// Batch gets the update history of assets that overlap a time window.
      /// For IAM_POLICY content, this API outputs history when the asset and its
      /// attached IAM POLICY both exist. This can create gaps in the output history.
      /// Otherwise, this API outputs history with asset in both non-delete or
      /// deleted status.
      /// If a specified asset does not exist, this API returns an INVALID_ARGUMENT
      /// error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Asset.V1.BatchGetAssetsHistoryResponse BatchGetAssetsHistory(global::Google.Cloud.Asset.V1.BatchGetAssetsHistoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchGetAssetsHistory(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Batch gets the update history of assets that overlap a time window.
      /// For IAM_POLICY content, this API outputs history when the asset and its
      /// attached IAM POLICY both exist. This can create gaps in the output history.
      /// Otherwise, this API outputs history with asset in both non-delete or
      /// deleted status.
      /// If a specified asset does not exist, this API returns an INVALID_ARGUMENT
      /// error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Asset.V1.BatchGetAssetsHistoryResponse BatchGetAssetsHistory(global::Google.Cloud.Asset.V1.BatchGetAssetsHistoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchGetAssetsHistory, null, options, request);
      }
      /// <summary>
      /// Batch gets the update history of assets that overlap a time window.
      /// For IAM_POLICY content, this API outputs history when the asset and its
      /// attached IAM POLICY both exist. This can create gaps in the output history.
      /// Otherwise, this API outputs history with asset in both non-delete or
      /// deleted status.
      /// If a specified asset does not exist, this API returns an INVALID_ARGUMENT
      /// error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Asset.V1.BatchGetAssetsHistoryResponse> BatchGetAssetsHistoryAsync(global::Google.Cloud.Asset.V1.BatchGetAssetsHistoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchGetAssetsHistoryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Batch gets the update history of assets that overlap a time window.
      /// For IAM_POLICY content, this API outputs history when the asset and its
      /// attached IAM POLICY both exist. This can create gaps in the output history.
      /// Otherwise, this API outputs history with asset in both non-delete or
      /// deleted status.
      /// If a specified asset does not exist, this API returns an INVALID_ARGUMENT
      /// error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Asset.V1.BatchGetAssetsHistoryResponse> BatchGetAssetsHistoryAsync(global::Google.Cloud.Asset.V1.BatchGetAssetsHistoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchGetAssetsHistory, null, options, request);
      }
      /// <summary>
      /// Creates a feed in a parent project/folder/organization to listen to its
      /// asset updates.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Asset.V1.Feed CreateFeed(global::Google.Cloud.Asset.V1.CreateFeedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateFeed(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a feed in a parent project/folder/organization to listen to its
      /// asset updates.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Asset.V1.Feed CreateFeed(global::Google.Cloud.Asset.V1.CreateFeedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateFeed, null, options, request);
      }
      /// <summary>
      /// Creates a feed in a parent project/folder/organization to listen to its
      /// asset updates.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Asset.V1.Feed> CreateFeedAsync(global::Google.Cloud.Asset.V1.CreateFeedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateFeedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a feed in a parent project/folder/organization to listen to its
      /// asset updates.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Asset.V1.Feed> CreateFeedAsync(global::Google.Cloud.Asset.V1.CreateFeedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateFeed, null, options, request);
      }
      /// <summary>
      /// Gets details about an asset feed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Asset.V1.Feed GetFeed(global::Google.Cloud.Asset.V1.GetFeedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFeed(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details about an asset feed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Asset.V1.Feed GetFeed(global::Google.Cloud.Asset.V1.GetFeedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFeed, null, options, request);
      }
      /// <summary>
      /// Gets details about an asset feed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Asset.V1.Feed> GetFeedAsync(global::Google.Cloud.Asset.V1.GetFeedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFeedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details about an asset feed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Asset.V1.Feed> GetFeedAsync(global::Google.Cloud.Asset.V1.GetFeedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFeed, null, options, request);
      }
      /// <summary>
      /// Lists all asset feeds in a parent project/folder/organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Asset.V1.ListFeedsResponse ListFeeds(global::Google.Cloud.Asset.V1.ListFeedsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListFeeds(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all asset feeds in a parent project/folder/organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Asset.V1.ListFeedsResponse ListFeeds(global::Google.Cloud.Asset.V1.ListFeedsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListFeeds, null, options, request);
      }
      /// <summary>
      /// Lists all asset feeds in a parent project/folder/organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Asset.V1.ListFeedsResponse> ListFeedsAsync(global::Google.Cloud.Asset.V1.ListFeedsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListFeedsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all asset feeds in a parent project/folder/organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Asset.V1.ListFeedsResponse> ListFeedsAsync(global::Google.Cloud.Asset.V1.ListFeedsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListFeeds, null, options, request);
      }
      /// <summary>
      /// Updates an asset feed configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Asset.V1.Feed UpdateFeed(global::Google.Cloud.Asset.V1.UpdateFeedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateFeed(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an asset feed configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Asset.V1.Feed UpdateFeed(global::Google.Cloud.Asset.V1.UpdateFeedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateFeed, null, options, request);
      }
      /// <summary>
      /// Updates an asset feed configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Asset.V1.Feed> UpdateFeedAsync(global::Google.Cloud.Asset.V1.UpdateFeedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateFeedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an asset feed configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Asset.V1.Feed> UpdateFeedAsync(global::Google.Cloud.Asset.V1.UpdateFeedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateFeed, null, options, request);
      }
      /// <summary>
      /// Deletes an asset feed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteFeed(global::Google.Cloud.Asset.V1.DeleteFeedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteFeed(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an asset feed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteFeed(global::Google.Cloud.Asset.V1.DeleteFeedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteFeed, null, options, request);
      }
      /// <summary>
      /// Deletes an asset feed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteFeedAsync(global::Google.Cloud.Asset.V1.DeleteFeedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteFeedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an asset feed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteFeedAsync(global::Google.Cloud.Asset.V1.DeleteFeedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteFeed, null, options, request);
      }
      /// <summary>
      /// Searches all Cloud resources within the specified scope, such as a project,
      /// folder, or organization. The caller must be granted the
      /// `cloudasset.assets.searchAllResources` permission on the desired scope,
      /// otherwise the request will be rejected.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Asset.V1.SearchAllResourcesResponse SearchAllResources(global::Google.Cloud.Asset.V1.SearchAllResourcesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchAllResources(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Searches all Cloud resources within the specified scope, such as a project,
      /// folder, or organization. The caller must be granted the
      /// `cloudasset.assets.searchAllResources` permission on the desired scope,
      /// otherwise the request will be rejected.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Asset.V1.SearchAllResourcesResponse SearchAllResources(global::Google.Cloud.Asset.V1.SearchAllResourcesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SearchAllResources, null, options, request);
      }
      /// <summary>
      /// Searches all Cloud resources within the specified scope, such as a project,
      /// folder, or organization. The caller must be granted the
      /// `cloudasset.assets.searchAllResources` permission on the desired scope,
      /// otherwise the request will be rejected.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Asset.V1.SearchAllResourcesResponse> SearchAllResourcesAsync(global::Google.Cloud.Asset.V1.SearchAllResourcesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchAllResourcesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Searches all Cloud resources within the specified scope, such as a project,
      /// folder, or organization. The caller must be granted the
      /// `cloudasset.assets.searchAllResources` permission on the desired scope,
      /// otherwise the request will be rejected.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Asset.V1.SearchAllResourcesResponse> SearchAllResourcesAsync(global::Google.Cloud.Asset.V1.SearchAllResourcesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SearchAllResources, null, options, request);
      }
      /// <summary>
      /// Searches all IAM policies within the specified scope, such as a project,
      /// folder, or organization. The caller must be granted the
      /// `cloudasset.assets.searchAllIamPolicies` permission on the desired scope,
      /// otherwise the request will be rejected.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Asset.V1.SearchAllIamPoliciesResponse SearchAllIamPolicies(global::Google.Cloud.Asset.V1.SearchAllIamPoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchAllIamPolicies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Searches all IAM policies within the specified scope, such as a project,
      /// folder, or organization. The caller must be granted the
      /// `cloudasset.assets.searchAllIamPolicies` permission on the desired scope,
      /// otherwise the request will be rejected.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Asset.V1.SearchAllIamPoliciesResponse SearchAllIamPolicies(global::Google.Cloud.Asset.V1.SearchAllIamPoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SearchAllIamPolicies, null, options, request);
      }
      /// <summary>
      /// Searches all IAM policies within the specified scope, such as a project,
      /// folder, or organization. The caller must be granted the
      /// `cloudasset.assets.searchAllIamPolicies` permission on the desired scope,
      /// otherwise the request will be rejected.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Asset.V1.SearchAllIamPoliciesResponse> SearchAllIamPoliciesAsync(global::Google.Cloud.Asset.V1.SearchAllIamPoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchAllIamPoliciesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Searches all IAM policies within the specified scope, such as a project,
      /// folder, or organization. The caller must be granted the
      /// `cloudasset.assets.searchAllIamPolicies` permission on the desired scope,
      /// otherwise the request will be rejected.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Asset.V1.SearchAllIamPoliciesResponse> SearchAllIamPoliciesAsync(global::Google.Cloud.Asset.V1.SearchAllIamPoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SearchAllIamPolicies, null, options, request);
      }
      /// <summary>
      /// Analyzes IAM policies to answer which identities have what accesses on
      /// which resources.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Asset.V1.AnalyzeIamPolicyResponse AnalyzeIamPolicy(global::Google.Cloud.Asset.V1.AnalyzeIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AnalyzeIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Analyzes IAM policies to answer which identities have what accesses on
      /// which resources.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Asset.V1.AnalyzeIamPolicyResponse AnalyzeIamPolicy(global::Google.Cloud.Asset.V1.AnalyzeIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AnalyzeIamPolicy, null, options, request);
      }
      /// <summary>
      /// Analyzes IAM policies to answer which identities have what accesses on
      /// which resources.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Asset.V1.AnalyzeIamPolicyResponse> AnalyzeIamPolicyAsync(global::Google.Cloud.Asset.V1.AnalyzeIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AnalyzeIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Analyzes IAM policies to answer which identities have what accesses on
      /// which resources.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Asset.V1.AnalyzeIamPolicyResponse> AnalyzeIamPolicyAsync(global::Google.Cloud.Asset.V1.AnalyzeIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AnalyzeIamPolicy, null, options, request);
      }
      /// <summary>
      /// Analyzes IAM policies asynchronously to answer which identities have what
      /// accesses on which resources, and writes the analysis results to a Google
      /// Cloud Storage or a BigQuery destination. For Cloud Storage destination, the
      /// output format is the JSON format that represents a
      /// [AnalyzeIamPolicyResponse][google.cloud.asset.v1.AnalyzeIamPolicyResponse]. This method implements the
      /// [google.longrunning.Operation][google.longrunning.Operation], which allows you to track the operation
      /// status. We recommend intervals of at least 2 seconds with exponential
      /// backoff retry to poll the operation result. The metadata contains the
      /// metadata for the long-running operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation AnalyzeIamPolicyLongrunning(global::Google.Cloud.Asset.V1.AnalyzeIamPolicyLongrunningRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AnalyzeIamPolicyLongrunning(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Analyzes IAM policies asynchronously to answer which identities have what
      /// accesses on which resources, and writes the analysis results to a Google
      /// Cloud Storage or a BigQuery destination. For Cloud Storage destination, the
      /// output format is the JSON format that represents a
      /// [AnalyzeIamPolicyResponse][google.cloud.asset.v1.AnalyzeIamPolicyResponse]. This method implements the
      /// [google.longrunning.Operation][google.longrunning.Operation], which allows you to track the operation
      /// status. We recommend intervals of at least 2 seconds with exponential
      /// backoff retry to poll the operation result. The metadata contains the
      /// metadata for the long-running operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation AnalyzeIamPolicyLongrunning(global::Google.Cloud.Asset.V1.AnalyzeIamPolicyLongrunningRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AnalyzeIamPolicyLongrunning, null, options, request);
      }
      /// <summary>
      /// Analyzes IAM policies asynchronously to answer which identities have what
      /// accesses on which resources, and writes the analysis results to a Google
      /// Cloud Storage or a BigQuery destination. For Cloud Storage destination, the
      /// output format is the JSON format that represents a
      /// [AnalyzeIamPolicyResponse][google.cloud.asset.v1.AnalyzeIamPolicyResponse]. This method implements the
      /// [google.longrunning.Operation][google.longrunning.Operation], which allows you to track the operation
      /// status. We recommend intervals of at least 2 seconds with exponential
      /// backoff retry to poll the operation result. The metadata contains the
      /// metadata for the long-running operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> AnalyzeIamPolicyLongrunningAsync(global::Google.Cloud.Asset.V1.AnalyzeIamPolicyLongrunningRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AnalyzeIamPolicyLongrunningAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Analyzes IAM policies asynchronously to answer which identities have what
      /// accesses on which resources, and writes the analysis results to a Google
      /// Cloud Storage or a BigQuery destination. For Cloud Storage destination, the
      /// output format is the JSON format that represents a
      /// [AnalyzeIamPolicyResponse][google.cloud.asset.v1.AnalyzeIamPolicyResponse]. This method implements the
      /// [google.longrunning.Operation][google.longrunning.Operation], which allows you to track the operation
      /// status. We recommend intervals of at least 2 seconds with exponential
      /// backoff retry to poll the operation result. The metadata contains the
      /// metadata for the long-running operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> AnalyzeIamPolicyLongrunningAsync(global::Google.Cloud.Asset.V1.AnalyzeIamPolicyLongrunningRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AnalyzeIamPolicyLongrunning, null, options, request);
      }
      /// <summary>
      /// Analyze moving a resource to a specified destination without kicking off
      /// the actual move. The analysis is best effort depending on the user's
      /// permissions of viewing different hierarchical policies and configurations.
      /// The policies and configuration are subject to change before the actual
      /// resource migration takes place.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Asset.V1.AnalyzeMoveResponse AnalyzeMove(global::Google.Cloud.Asset.V1.AnalyzeMoveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AnalyzeMove(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Analyze moving a resource to a specified destination without kicking off
      /// the actual move. The analysis is best effort depending on the user's
      /// permissions of viewing different hierarchical policies and configurations.
      /// The policies and configuration are subject to change before the actual
      /// resource migration takes place.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Asset.V1.AnalyzeMoveResponse AnalyzeMove(global::Google.Cloud.Asset.V1.AnalyzeMoveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AnalyzeMove, null, options, request);
      }
      /// <summary>
      /// Analyze moving a resource to a specified destination without kicking off
      /// the actual move. The analysis is best effort depending on the user's
      /// permissions of viewing different hierarchical policies and configurations.
      /// The policies and configuration are subject to change before the actual
      /// resource migration takes place.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Asset.V1.AnalyzeMoveResponse> AnalyzeMoveAsync(global::Google.Cloud.Asset.V1.AnalyzeMoveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AnalyzeMoveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Analyze moving a resource to a specified destination without kicking off
      /// the actual move. The analysis is best effort depending on the user's
      /// permissions of viewing different hierarchical policies and configurations.
      /// The policies and configuration are subject to change before the actual
      /// resource migration takes place.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Asset.V1.AnalyzeMoveResponse> AnalyzeMoveAsync(global::Google.Cloud.Asset.V1.AnalyzeMoveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AnalyzeMove, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override AssetServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AssetServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(AssetServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ExportAssets, serviceImpl.ExportAssets)
          .AddMethod(__Method_ListAssets, serviceImpl.ListAssets)
          .AddMethod(__Method_BatchGetAssetsHistory, serviceImpl.BatchGetAssetsHistory)
          .AddMethod(__Method_CreateFeed, serviceImpl.CreateFeed)
          .AddMethod(__Method_GetFeed, serviceImpl.GetFeed)
          .AddMethod(__Method_ListFeeds, serviceImpl.ListFeeds)
          .AddMethod(__Method_UpdateFeed, serviceImpl.UpdateFeed)
          .AddMethod(__Method_DeleteFeed, serviceImpl.DeleteFeed)
          .AddMethod(__Method_SearchAllResources, serviceImpl.SearchAllResources)
          .AddMethod(__Method_SearchAllIamPolicies, serviceImpl.SearchAllIamPolicies)
          .AddMethod(__Method_AnalyzeIamPolicy, serviceImpl.AnalyzeIamPolicy)
          .AddMethod(__Method_AnalyzeIamPolicyLongrunning, serviceImpl.AnalyzeIamPolicyLongrunning)
          .AddMethod(__Method_AnalyzeMove, serviceImpl.AnalyzeMove).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AssetServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ExportAssets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Asset.V1.ExportAssetsRequest, global::Google.LongRunning.Operation>(serviceImpl.ExportAssets));
      serviceBinder.AddMethod(__Method_ListAssets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Asset.V1.ListAssetsRequest, global::Google.Cloud.Asset.V1.ListAssetsResponse>(serviceImpl.ListAssets));
      serviceBinder.AddMethod(__Method_BatchGetAssetsHistory, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Asset.V1.BatchGetAssetsHistoryRequest, global::Google.Cloud.Asset.V1.BatchGetAssetsHistoryResponse>(serviceImpl.BatchGetAssetsHistory));
      serviceBinder.AddMethod(__Method_CreateFeed, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Asset.V1.CreateFeedRequest, global::Google.Cloud.Asset.V1.Feed>(serviceImpl.CreateFeed));
      serviceBinder.AddMethod(__Method_GetFeed, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Asset.V1.GetFeedRequest, global::Google.Cloud.Asset.V1.Feed>(serviceImpl.GetFeed));
      serviceBinder.AddMethod(__Method_ListFeeds, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Asset.V1.ListFeedsRequest, global::Google.Cloud.Asset.V1.ListFeedsResponse>(serviceImpl.ListFeeds));
      serviceBinder.AddMethod(__Method_UpdateFeed, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Asset.V1.UpdateFeedRequest, global::Google.Cloud.Asset.V1.Feed>(serviceImpl.UpdateFeed));
      serviceBinder.AddMethod(__Method_DeleteFeed, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Asset.V1.DeleteFeedRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteFeed));
      serviceBinder.AddMethod(__Method_SearchAllResources, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Asset.V1.SearchAllResourcesRequest, global::Google.Cloud.Asset.V1.SearchAllResourcesResponse>(serviceImpl.SearchAllResources));
      serviceBinder.AddMethod(__Method_SearchAllIamPolicies, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Asset.V1.SearchAllIamPoliciesRequest, global::Google.Cloud.Asset.V1.SearchAllIamPoliciesResponse>(serviceImpl.SearchAllIamPolicies));
      serviceBinder.AddMethod(__Method_AnalyzeIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Asset.V1.AnalyzeIamPolicyRequest, global::Google.Cloud.Asset.V1.AnalyzeIamPolicyResponse>(serviceImpl.AnalyzeIamPolicy));
      serviceBinder.AddMethod(__Method_AnalyzeIamPolicyLongrunning, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Asset.V1.AnalyzeIamPolicyLongrunningRequest, global::Google.LongRunning.Operation>(serviceImpl.AnalyzeIamPolicyLongrunning));
      serviceBinder.AddMethod(__Method_AnalyzeMove, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Asset.V1.AnalyzeMoveRequest, global::Google.Cloud.Asset.V1.AnalyzeMoveResponse>(serviceImpl.AnalyzeMove));
    }

  }
}
#endregion
