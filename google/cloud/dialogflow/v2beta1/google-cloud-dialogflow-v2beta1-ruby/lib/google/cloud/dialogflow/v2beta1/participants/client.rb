# frozen_string_literal: true

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/cloud/errors"
require "google/cloud/dialogflow/v2beta1/participant_pb"

module Google
  module Cloud
    module Dialogflow
      module V2beta1
        module Participants
          ##
          # Client for the Participants service.
          #
          # Service for managing {::Google::Cloud::Dialogflow::V2beta1::Participant Participants}.
          #
          class Client
            include Paths

            # @private
            attr_reader :participants_stub

            ##
            # Configure the Participants Client class.
            #
            # See {::Google::Cloud::Dialogflow::V2beta1::Participants::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @example
            #
            #   # Modify the configuration for all Participants clients
            #   ::Google::Cloud::Dialogflow::V2beta1::Participants::Client.configure do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def self.configure
              @configure ||= begin
                namespace = ["Google", "Cloud", "Dialogflow", "V2beta1"]
                parent_config = while namespace.any?
                                  parent_name = namespace.join "::"
                                  parent_const = const_get parent_name
                                  break parent_const.configure if parent_const.respond_to? :configure
                                  namespace.pop
                                end
                default_config = Client::Configuration.new parent_config

                default_config.timeout = 60.0
                default_config.retry_policy = {
                  initial_delay: 0.1, max_delay: 60.0, multiplier: 1.3, retry_codes: [14]
                }

                default_config.rpcs.analyze_content.timeout = 220.0
                default_config.rpcs.analyze_content.retry_policy = {
                  initial_delay: 0.1, max_delay: 60.0, multiplier: 1.3, retry_codes: [14]
                }

                default_config
              end
              yield @configure if block_given?
              @configure
            end

            ##
            # Configure the Participants Client instance.
            #
            # The configuration is set to the derived mode, meaning that values can be changed,
            # but structural changes (adding new fields, etc.) are not allowed. Structural changes
            # should be made on {Client.configure}.
            #
            # See {::Google::Cloud::Dialogflow::V2beta1::Participants::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def configure
              yield @config if block_given?
              @config
            end

            ##
            # Create a new Participants client object.
            #
            # @example
            #
            #   # Create a client using the default configuration
            #   client = ::Google::Cloud::Dialogflow::V2beta1::Participants::Client.new
            #
            #   # Create a client using a custom configuration
            #   client = ::Google::Cloud::Dialogflow::V2beta1::Participants::Client.new do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the Participants client.
            # @yieldparam config [Client::Configuration]
            #
            def initialize
              # These require statements are intentionally placed here to initialize
              # the gRPC module only when it's required.
              # See https://github.com/googleapis/toolkit/issues/446
              require "gapic/grpc"
              require "google/cloud/dialogflow/v2beta1/participant_services_pb"

              # Create the configuration object
              @config = Configuration.new Client.configure

              # Yield the configuration if needed
              yield @config if block_given?

              # Create credentials
              credentials = @config.credentials
              # Use self-signed JWT if the endpoint is unchanged from default,
              # but only if the default endpoint does not have a region prefix.
              enable_self_signed_jwt = @config.endpoint == Client.configure.endpoint &&
                                       !@config.endpoint.split(".").first.include?("-")
              credentials ||= Credentials.default scope: @config.scope,
                                                  enable_self_signed_jwt: enable_self_signed_jwt
              if credentials.is_a?(::String) || credentials.is_a?(::Hash)
                credentials = Credentials.new credentials, scope: @config.scope
              end
              @quota_project_id = @config.quota_project
              @quota_project_id ||= credentials.quota_project_id if credentials.respond_to? :quota_project_id

              @participants_stub = ::Gapic::ServiceStub.new(
                ::Google::Cloud::Dialogflow::V2beta1::Participants::Stub,
                credentials:  credentials,
                endpoint:     @config.endpoint,
                channel_args: @config.channel_args,
                interceptors: @config.interceptors
              )
            end

            # Service calls

            ##
            # Creates a new participant in a conversation.
            #
            # @overload create_participant(request, options = nil)
            #   Pass arguments to `create_participant` via a request object, either of type
            #   {::Google::Cloud::Dialogflow::V2beta1::CreateParticipantRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Dialogflow::V2beta1::CreateParticipantRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload create_participant(parent: nil, participant: nil)
            #   Pass arguments to `create_participant` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. Resource identifier of the conversation adding the participant.
            #     Format: `projects/<Project ID>/locations/<Location
            #     ID>/conversations/<Conversation ID>`.
            #   @param participant [::Google::Cloud::Dialogflow::V2beta1::Participant, ::Hash]
            #     Required. The participant to create.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Dialogflow::V2beta1::Participant]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Dialogflow::V2beta1::Participant]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/dialogflow/v2beta1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Dialogflow::V2beta1::Participants::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Dialogflow::V2beta1::CreateParticipantRequest.new
            #
            #   # Call the create_participant method.
            #   result = client.create_participant request
            #
            #   # The returned object is of type Google::Cloud::Dialogflow::V2beta1::Participant.
            #   p result
            #
            def create_participant request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Dialogflow::V2beta1::CreateParticipantRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.create_participant.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Dialogflow::V2beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.create_participant.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.create_participant.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @participants_stub.call_rpc :create_participant, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Retrieves a conversation participant.
            #
            # @overload get_participant(request, options = nil)
            #   Pass arguments to `get_participant` via a request object, either of type
            #   {::Google::Cloud::Dialogflow::V2beta1::GetParticipantRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Dialogflow::V2beta1::GetParticipantRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_participant(name: nil)
            #   Pass arguments to `get_participant` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The name of the participant. Format:
            #     `projects/<Project ID>/locations/<Location ID>/conversations/<Conversation
            #     ID>/participants/<Participant ID>`.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Dialogflow::V2beta1::Participant]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Dialogflow::V2beta1::Participant]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/dialogflow/v2beta1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Dialogflow::V2beta1::Participants::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Dialogflow::V2beta1::GetParticipantRequest.new
            #
            #   # Call the get_participant method.
            #   result = client.get_participant request
            #
            #   # The returned object is of type Google::Cloud::Dialogflow::V2beta1::Participant.
            #   p result
            #
            def get_participant request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Dialogflow::V2beta1::GetParticipantRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_participant.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Dialogflow::V2beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.name
                header_params["name"] = request.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get_participant.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_participant.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @participants_stub.call_rpc :get_participant, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Returns the list of all participants in the specified conversation.
            #
            # @overload list_participants(request, options = nil)
            #   Pass arguments to `list_participants` via a request object, either of type
            #   {::Google::Cloud::Dialogflow::V2beta1::ListParticipantsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Dialogflow::V2beta1::ListParticipantsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_participants(parent: nil, page_size: nil, page_token: nil)
            #   Pass arguments to `list_participants` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The conversation to list all participants from.
            #     Format: `projects/<Project ID>/locations/<Location
            #     ID>/conversations/<Conversation ID>`.
            #   @param page_size [::Integer]
            #     Optional. The maximum number of items to return in a single page. By
            #     default 100 and at most 1000.
            #   @param page_token [::String]
            #     Optional. The next_page_token value returned from a previous list request.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::Dialogflow::V2beta1::Participant>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Cloud::Dialogflow::V2beta1::Participant>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/dialogflow/v2beta1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Dialogflow::V2beta1::Participants::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Dialogflow::V2beta1::ListParticipantsRequest.new
            #
            #   # Call the list_participants method.
            #   result = client.list_participants request
            #
            #   # The returned object is of type Gapic::PagedEnumerable. You can
            #   # iterate over all elements by calling #each, and the enumerable
            #   # will lazily make API calls to fetch subsequent pages. Other
            #   # methods are also available for managing paging directly.
            #   result.each do |response|
            #     # Each element is of type ::Google::Cloud::Dialogflow::V2beta1::Participant.
            #     p response
            #   end
            #
            def list_participants request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Dialogflow::V2beta1::ListParticipantsRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_participants.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Dialogflow::V2beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.list_participants.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_participants.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @participants_stub.call_rpc :list_participants, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @participants_stub, :list_participants, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Updates the specified participant.
            #
            # @overload update_participant(request, options = nil)
            #   Pass arguments to `update_participant` via a request object, either of type
            #   {::Google::Cloud::Dialogflow::V2beta1::UpdateParticipantRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Dialogflow::V2beta1::UpdateParticipantRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload update_participant(participant: nil, update_mask: nil)
            #   Pass arguments to `update_participant` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param participant [::Google::Cloud::Dialogflow::V2beta1::Participant, ::Hash]
            #     Required. The participant to update.
            #   @param update_mask [::Google::Protobuf::FieldMask, ::Hash]
            #     Required. The mask to specify which fields to update.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Dialogflow::V2beta1::Participant]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Dialogflow::V2beta1::Participant]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/dialogflow/v2beta1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Dialogflow::V2beta1::Participants::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Dialogflow::V2beta1::UpdateParticipantRequest.new
            #
            #   # Call the update_participant method.
            #   result = client.update_participant request
            #
            #   # The returned object is of type Google::Cloud::Dialogflow::V2beta1::Participant.
            #   p result
            #
            def update_participant request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Dialogflow::V2beta1::UpdateParticipantRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.update_participant.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Dialogflow::V2beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.participant&.name
                header_params["participant.name"] = request.participant.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.update_participant.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.update_participant.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @participants_stub.call_rpc :update_participant, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Adds a text (chat, for example), or audio (phone recording, for example)
            # message from a participant into the conversation.
            #
            # Note: Always use agent versions for production traffic
            # sent to virtual agents. See [Versions and
            # environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
            #
            # @overload analyze_content(request, options = nil)
            #   Pass arguments to `analyze_content` via a request object, either of type
            #   {::Google::Cloud::Dialogflow::V2beta1::AnalyzeContentRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Dialogflow::V2beta1::AnalyzeContentRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload analyze_content(participant: nil, text_input: nil, event_input: nil, reply_audio_config: nil, query_params: nil, assist_query_params: nil, message_send_time: nil, request_id: nil)
            #   Pass arguments to `analyze_content` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param participant [::String]
            #     Required. The name of the participant this text comes from.
            #     Format: `projects/<Project ID>/locations/<Location
            #     ID>/conversations/<Conversation ID>/participants/<Participant ID>`.
            #   @param text_input [::Google::Cloud::Dialogflow::V2beta1::TextInput, ::Hash]
            #     The natural language text to be processed.
            #   @param event_input [::Google::Cloud::Dialogflow::V2beta1::EventInput, ::Hash]
            #     An input event to send to Dialogflow.
            #   @param reply_audio_config [::Google::Cloud::Dialogflow::V2beta1::OutputAudioConfig, ::Hash]
            #     Speech synthesis configuration.
            #     The speech synthesis settings for a virtual agent that may be configured
            #     for the associated conversation profile are not used when calling
            #     AnalyzeContent. If this configuration is not supplied, speech synthesis
            #     is disabled.
            #   @param query_params [::Google::Cloud::Dialogflow::V2beta1::QueryParameters, ::Hash]
            #     Parameters for a Dialogflow virtual-agent query.
            #   @param assist_query_params [::Google::Cloud::Dialogflow::V2beta1::AssistQueryParameters, ::Hash]
            #     Parameters for a human assist query.
            #   @param message_send_time [::Google::Protobuf::Timestamp, ::Hash]
            #     Optional. The send time of the message from end user or human agent's
            #     perspective. It is used for identifying the same message under one
            #     participant.
            #
            #     Given two messages under the same participant:
            #      - If send time are different regardless of whether the content of the
            #      messages are exactly the same, the conversation will regard them as
            #      two distinct messages sent by the participant.
            #      - If send time is the same regardless of whether the content of the
            #      messages are exactly the same, the conversation will regard them as
            #      same message, and ignore the message received later.
            #
            #     If the value is not provided, a new request will always be regarded as a
            #     new message without any de-duplication.
            #   @param request_id [::String]
            #     A unique identifier for this request. Restricted to 36 ASCII characters.
            #     A random UUID is recommended.
            #     This request is only idempotent if a `request_id` is provided.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Dialogflow::V2beta1::AnalyzeContentResponse]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Dialogflow::V2beta1::AnalyzeContentResponse]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/dialogflow/v2beta1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Dialogflow::V2beta1::Participants::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Dialogflow::V2beta1::AnalyzeContentRequest.new
            #
            #   # Call the analyze_content method.
            #   result = client.analyze_content request
            #
            #   # The returned object is of type Google::Cloud::Dialogflow::V2beta1::AnalyzeContentResponse.
            #   p result
            #
            def analyze_content request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Dialogflow::V2beta1::AnalyzeContentRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.analyze_content.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Dialogflow::V2beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.participant
                header_params["participant"] = request.participant
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.analyze_content.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.analyze_content.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @participants_stub.call_rpc :analyze_content, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Gets suggested articles for a participant based on specific historical
            # messages.
            #
            # Note that {::Google::Cloud::Dialogflow::V2beta1::Participants::Client#list_suggestions ListSuggestions} will only list the auto-generated
            # suggestions, while {::Google::Cloud::Dialogflow::V2beta1::Participants::Client#compile_suggestion CompileSuggestion} will try to compile suggestion
            # based on the provided conversation context in the real time.
            #
            # @overload suggest_articles(request, options = nil)
            #   Pass arguments to `suggest_articles` via a request object, either of type
            #   {::Google::Cloud::Dialogflow::V2beta1::SuggestArticlesRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Dialogflow::V2beta1::SuggestArticlesRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload suggest_articles(parent: nil, latest_message: nil, context_size: nil, assist_query_params: nil)
            #   Pass arguments to `suggest_articles` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The name of the participant to fetch suggestion for.
            #     Format: `projects/<Project ID>/locations/<Location
            #     ID>/conversations/<Conversation ID>/participants/<Participant ID>`.
            #   @param latest_message [::String]
            #     Optional. The name of the latest conversation message to compile suggestion
            #     for. If empty, it will be the latest message of the conversation.
            #
            #     Format: `projects/<Project ID>/locations/<Location
            #     ID>/conversations/<Conversation ID>/messages/<Message ID>`.
            #   @param context_size [::Integer]
            #     Optional. Max number of messages prior to and including
            #     {::Google::Cloud::Dialogflow::V2beta1::SuggestArticlesRequest#latest_message latest_message} to use as context
            #     when compiling the suggestion. By default 20 and at most 50.
            #   @param assist_query_params [::Google::Cloud::Dialogflow::V2beta1::AssistQueryParameters, ::Hash]
            #     Optional. Parameters for a human assist query.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Dialogflow::V2beta1::SuggestArticlesResponse]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Dialogflow::V2beta1::SuggestArticlesResponse]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/dialogflow/v2beta1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Dialogflow::V2beta1::Participants::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Dialogflow::V2beta1::SuggestArticlesRequest.new
            #
            #   # Call the suggest_articles method.
            #   result = client.suggest_articles request
            #
            #   # The returned object is of type Google::Cloud::Dialogflow::V2beta1::SuggestArticlesResponse.
            #   p result
            #
            def suggest_articles request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Dialogflow::V2beta1::SuggestArticlesRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.suggest_articles.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Dialogflow::V2beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.suggest_articles.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.suggest_articles.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @participants_stub.call_rpc :suggest_articles, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Gets suggested faq answers for a participant based on specific historical
            # messages.
            #
            # @overload suggest_faq_answers(request, options = nil)
            #   Pass arguments to `suggest_faq_answers` via a request object, either of type
            #   {::Google::Cloud::Dialogflow::V2beta1::SuggestFaqAnswersRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Dialogflow::V2beta1::SuggestFaqAnswersRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload suggest_faq_answers(parent: nil, latest_message: nil, context_size: nil, assist_query_params: nil)
            #   Pass arguments to `suggest_faq_answers` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The name of the participant to fetch suggestion for.
            #     Format: `projects/<Project ID>/locations/<Location
            #     ID>/conversations/<Conversation ID>/participants/<Participant ID>`.
            #   @param latest_message [::String]
            #     Optional. The name of the latest conversation message to compile suggestion
            #     for. If empty, it will be the latest message of the conversation.
            #
            #     Format: `projects/<Project ID>/locations/<Location
            #     ID>/conversations/<Conversation ID>/messages/<Message ID>`.
            #   @param context_size [::Integer]
            #     Optional. Max number of messages prior to and including
            #     [latest_message] to use as context when compiling the
            #     suggestion. By default 20 and at most 50.
            #   @param assist_query_params [::Google::Cloud::Dialogflow::V2beta1::AssistQueryParameters, ::Hash]
            #     Optional. Parameters for a human assist query.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Dialogflow::V2beta1::SuggestFaqAnswersResponse]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Dialogflow::V2beta1::SuggestFaqAnswersResponse]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/dialogflow/v2beta1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Dialogflow::V2beta1::Participants::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Dialogflow::V2beta1::SuggestFaqAnswersRequest.new
            #
            #   # Call the suggest_faq_answers method.
            #   result = client.suggest_faq_answers request
            #
            #   # The returned object is of type Google::Cloud::Dialogflow::V2beta1::SuggestFaqAnswersResponse.
            #   p result
            #
            def suggest_faq_answers request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Dialogflow::V2beta1::SuggestFaqAnswersRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.suggest_faq_answers.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Dialogflow::V2beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.suggest_faq_answers.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.suggest_faq_answers.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @participants_stub.call_rpc :suggest_faq_answers, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Gets smart replies for a participant based on specific historical
            # messages.
            #
            # @overload suggest_smart_replies(request, options = nil)
            #   Pass arguments to `suggest_smart_replies` via a request object, either of type
            #   {::Google::Cloud::Dialogflow::V2beta1::SuggestSmartRepliesRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Dialogflow::V2beta1::SuggestSmartRepliesRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload suggest_smart_replies(parent: nil, current_text_input: nil, latest_message: nil, context_size: nil)
            #   Pass arguments to `suggest_smart_replies` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The name of the participant to fetch suggestion for.
            #     Format: `projects/<Project ID>/locations/<Location
            #     ID>/conversations/<Conversation ID>/participants/<Participant ID>`.
            #   @param current_text_input [::Google::Cloud::Dialogflow::V2beta1::TextInput, ::Hash]
            #     The current natural language text segment to compile suggestion
            #     for. This provides a way for user to get follow up smart reply suggestion
            #     after a smart reply selection, without sending a text message.
            #   @param latest_message [::String]
            #     The name of the latest conversation message to compile suggestion
            #     for. If empty, it will be the latest message of the conversation.
            #
            #     Format: `projects/<Project ID>/locations/<Location
            #     ID>/conversations/<Conversation ID>/messages/<Message ID>`.
            #   @param context_size [::Integer]
            #     Optional. Max number of messages prior to and including
            #     [latest_message] to use as context when compiling the
            #     suggestion. By default 20 and at most 50.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Dialogflow::V2beta1::SuggestSmartRepliesResponse]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Dialogflow::V2beta1::SuggestSmartRepliesResponse]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/dialogflow/v2beta1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Dialogflow::V2beta1::Participants::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Dialogflow::V2beta1::SuggestSmartRepliesRequest.new
            #
            #   # Call the suggest_smart_replies method.
            #   result = client.suggest_smart_replies request
            #
            #   # The returned object is of type Google::Cloud::Dialogflow::V2beta1::SuggestSmartRepliesResponse.
            #   p result
            #
            def suggest_smart_replies request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Dialogflow::V2beta1::SuggestSmartRepliesRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.suggest_smart_replies.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Dialogflow::V2beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.suggest_smart_replies.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.suggest_smart_replies.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @participants_stub.call_rpc :suggest_smart_replies, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Deprecated: Use inline suggestion, event based suggestion or
            # Suggestion* API instead.
            # See [HumanAgentAssistantConfig.name][google.cloud.dialogflow.v2beta1.HumanAgentAssistantConfig.name] for more
            # details.
            # Removal Date: 2020-09-01.
            #
            # Retrieves suggestions for live agents.
            #
            # This method should be used by human agent client software to fetch auto
            # generated suggestions in real-time, while the conversation with an end user
            # is in progress. The functionality is implemented in terms of the
            # [list
            # pagination](https://cloud.google.com/apis/design/design_patterns#list_pagination)
            # design pattern. The client app should use the `next_page_token` field
            # to fetch the next batch of suggestions. `suggestions` are sorted by
            # `create_time` in descending order.
            # To fetch latest suggestion, just set `page_size` to 1.
            # To fetch new suggestions without duplication, send request with filter
            # `create_time_epoch_microseconds > [first item's create_time of previous
            # request]` and empty page_token.
            #
            # @deprecated This method is deprecated and may be removed in the next major version update.
            #
            # @overload list_suggestions(request, options = nil)
            #   Pass arguments to `list_suggestions` via a request object, either of type
            #   {::Google::Cloud::Dialogflow::V2beta1::ListSuggestionsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Dialogflow::V2beta1::ListSuggestionsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_suggestions(parent: nil, page_size: nil, page_token: nil, filter: nil)
            #   Pass arguments to `list_suggestions` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The name of the participant to fetch suggestions for.
            #     Format: `projects/<Project ID>/locations/<Location
            #     ID>/conversations/<Conversation ID>/participants/<Participant ID>`.
            #   @param page_size [::Integer]
            #     Optional. The maximum number of items to return in a single page. The
            #     default value is 100; the maximum value is 1000.
            #   @param page_token [::String]
            #     Optional. The next_page_token value returned from a previous list request.
            #   @param filter [::String]
            #     Optional. Filter on suggestions fields. Currently predicates on
            #     `create_time` and `create_time_epoch_microseconds` are supported.
            #     `create_time` only support milliseconds accuracy. E.g.,
            #     `create_time_epoch_microseconds > 1551790877964485` or
            #     `create_time > "2017-01-15T01:30:15.01Z"`
            #
            #     For more information about filtering, see
            #     [API Filtering](https://aip.dev/160).
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::Dialogflow::V2beta1::Suggestion>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Cloud::Dialogflow::V2beta1::Suggestion>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/dialogflow/v2beta1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Dialogflow::V2beta1::Participants::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Dialogflow::V2beta1::ListSuggestionsRequest.new
            #
            #   # Call the list_suggestions method.
            #   result = client.list_suggestions request
            #
            #   # The returned object is of type Gapic::PagedEnumerable. You can
            #   # iterate over all elements by calling #each, and the enumerable
            #   # will lazily make API calls to fetch subsequent pages. Other
            #   # methods are also available for managing paging directly.
            #   result.each do |response|
            #     # Each element is of type ::Google::Cloud::Dialogflow::V2beta1::Suggestion.
            #     p response
            #   end
            #
            def list_suggestions request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Dialogflow::V2beta1::ListSuggestionsRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_suggestions.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Dialogflow::V2beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.list_suggestions.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_suggestions.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @participants_stub.call_rpc :list_suggestions, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @participants_stub, :list_suggestions, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Deprecated. use {::Google::Cloud::Dialogflow::V2beta1::Participants::Client#suggest_articles SuggestArticles} and {::Google::Cloud::Dialogflow::V2beta1::Participants::Client#suggest_faq_answers SuggestFaqAnswers} instead.
            #
            # Gets suggestions for a participant based on specific historical
            # messages.
            #
            # Note that {::Google::Cloud::Dialogflow::V2beta1::Participants::Client#list_suggestions ListSuggestions} will only list the auto-generated
            # suggestions, while {::Google::Cloud::Dialogflow::V2beta1::Participants::Client#compile_suggestion CompileSuggestion} will try to compile suggestion
            # based on the provided conversation context in the real time.
            #
            # @deprecated This method is deprecated and may be removed in the next major version update.
            #
            # @overload compile_suggestion(request, options = nil)
            #   Pass arguments to `compile_suggestion` via a request object, either of type
            #   {::Google::Cloud::Dialogflow::V2beta1::CompileSuggestionRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Dialogflow::V2beta1::CompileSuggestionRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload compile_suggestion(parent: nil, latest_message: nil, context_size: nil)
            #   Pass arguments to `compile_suggestion` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The name of the participant to fetch suggestion for.
            #     Format: `projects/<Project ID>/locations/<Location
            #     ID>/conversations/<Conversation ID>/participants/<Participant ID>`.
            #   @param latest_message [::String]
            #     Optional. The name of the latest conversation message to compile suggestion
            #     for. If empty, it will be the latest message of the conversation.
            #
            #     Format: `projects/<Project ID>/locations/<Location
            #     ID>/conversations/<Conversation ID>/messages/<Message ID>`.
            #   @param context_size [::Integer]
            #     Optional. Max number of messages prior to and including
            #     [latest_message] to use as context when compiling the
            #     suggestion. If zero or less than zero, 20 is used.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Dialogflow::V2beta1::CompileSuggestionResponse]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Dialogflow::V2beta1::CompileSuggestionResponse]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/dialogflow/v2beta1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Dialogflow::V2beta1::Participants::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Dialogflow::V2beta1::CompileSuggestionRequest.new
            #
            #   # Call the compile_suggestion method.
            #   result = client.compile_suggestion request
            #
            #   # The returned object is of type Google::Cloud::Dialogflow::V2beta1::CompileSuggestionResponse.
            #   p result
            #
            def compile_suggestion request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Dialogflow::V2beta1::CompileSuggestionRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.compile_suggestion.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Dialogflow::V2beta1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.compile_suggestion.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.compile_suggestion.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @participants_stub.call_rpc :compile_suggestion, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Configuration class for the Participants API.
            #
            # This class represents the configuration for Participants,
            # providing control over timeouts, retry behavior, logging, transport
            # parameters, and other low-level controls. Certain parameters can also be
            # applied individually to specific RPCs. See
            # {::Google::Cloud::Dialogflow::V2beta1::Participants::Client::Configuration::Rpcs}
            # for a list of RPCs that can be configured independently.
            #
            # Configuration can be applied globally to all clients, or to a single client
            # on construction.
            #
            # @example
            #
            #   # Modify the global config, setting the timeout for
            #   # create_participant to 20 seconds,
            #   # and all remaining timeouts to 10 seconds.
            #   ::Google::Cloud::Dialogflow::V2beta1::Participants::Client.configure do |config|
            #     config.timeout = 10.0
            #     config.rpcs.create_participant.timeout = 20.0
            #   end
            #
            #   # Apply the above configuration only to a new client.
            #   client = ::Google::Cloud::Dialogflow::V2beta1::Participants::Client.new do |config|
            #     config.timeout = 10.0
            #     config.rpcs.create_participant.timeout = 20.0
            #   end
            #
            # @!attribute [rw] endpoint
            #   The hostname or hostname:port of the service endpoint.
            #   Defaults to `"dialogflow.googleapis.com"`.
            #   @return [::String]
            # @!attribute [rw] credentials
            #   Credentials to send with calls. You may provide any of the following types:
            #    *  (`String`) The path to a service account key file in JSON format
            #    *  (`Hash`) A service account key as a Hash
            #    *  (`Google::Auth::Credentials`) A googleauth credentials object
            #       (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
            #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
            #       (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
            #    *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
            #    *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
            #    *  (`nil`) indicating no credentials
            #   @return [::Object]
            # @!attribute [rw] scope
            #   The OAuth scopes
            #   @return [::Array<::String>]
            # @!attribute [rw] lib_name
            #   The library name as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] lib_version
            #   The library version as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] channel_args
            #   Extra parameters passed to the gRPC channel. Note: this is ignored if a
            #   `GRPC::Core::Channel` object is provided as the credential.
            #   @return [::Hash]
            # @!attribute [rw] interceptors
            #   An array of interceptors that are run before calls are executed.
            #   @return [::Array<::GRPC::ClientInterceptor>]
            # @!attribute [rw] timeout
            #   The call timeout in seconds.
            #   @return [::Numeric]
            # @!attribute [rw] metadata
            #   Additional gRPC headers to be sent with the call.
            #   @return [::Hash{::Symbol=>::String}]
            # @!attribute [rw] retry_policy
            #   The retry policy. The value is a hash with the following keys:
            #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
            #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
            #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
            #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
            #       trigger a retry.
            #   @return [::Hash]
            # @!attribute [rw] quota_project
            #   A separate project against which to charge quota.
            #   @return [::String]
            #
            class Configuration
              extend ::Gapic::Config

              config_attr :endpoint,      "dialogflow.googleapis.com", ::String
              config_attr :credentials,   nil do |value|
                allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
                allowed += [::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials] if defined? ::GRPC
                allowed.any? { |klass| klass === value }
              end
              config_attr :scope,         nil, ::String, ::Array, nil
              config_attr :lib_name,      nil, ::String, nil
              config_attr :lib_version,   nil, ::String, nil
              config_attr(:channel_args,  { "grpc.service_config_disable_resolution" => 1 }, ::Hash, nil)
              config_attr :interceptors,  nil, ::Array, nil
              config_attr :timeout,       nil, ::Numeric, nil
              config_attr :metadata,      nil, ::Hash, nil
              config_attr :retry_policy,  nil, ::Hash, ::Proc, nil
              config_attr :quota_project, nil, ::String, nil

              # @private
              def initialize parent_config = nil
                @parent_config = parent_config unless parent_config.nil?

                yield self if block_given?
              end

              ##
              # Configurations for individual RPCs
              # @return [Rpcs]
              #
              def rpcs
                @rpcs ||= begin
                  parent_rpcs = nil
                  parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config.respond_to?(:rpcs)
                  Rpcs.new parent_rpcs
                end
              end

              ##
              # Configuration RPC class for the Participants API.
              #
              # Includes fields providing the configuration for each RPC in this service.
              # Each configuration object is of type `Gapic::Config::Method` and includes
              # the following configuration fields:
              #
              #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
              #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
              #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
              #     include the following keys:
              #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
              #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
              #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
              #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
              #         trigger a retry.
              #
              class Rpcs
                ##
                # RPC-specific configuration for `create_participant`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :create_participant
                ##
                # RPC-specific configuration for `get_participant`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_participant
                ##
                # RPC-specific configuration for `list_participants`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_participants
                ##
                # RPC-specific configuration for `update_participant`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :update_participant
                ##
                # RPC-specific configuration for `analyze_content`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :analyze_content
                ##
                # RPC-specific configuration for `suggest_articles`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :suggest_articles
                ##
                # RPC-specific configuration for `suggest_faq_answers`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :suggest_faq_answers
                ##
                # RPC-specific configuration for `suggest_smart_replies`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :suggest_smart_replies
                ##
                # RPC-specific configuration for `list_suggestions`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_suggestions
                ##
                # RPC-specific configuration for `compile_suggestion`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :compile_suggestion

                # @private
                def initialize parent_rpcs = nil
                  create_participant_config = parent_rpcs.create_participant if parent_rpcs.respond_to? :create_participant
                  @create_participant = ::Gapic::Config::Method.new create_participant_config
                  get_participant_config = parent_rpcs.get_participant if parent_rpcs.respond_to? :get_participant
                  @get_participant = ::Gapic::Config::Method.new get_participant_config
                  list_participants_config = parent_rpcs.list_participants if parent_rpcs.respond_to? :list_participants
                  @list_participants = ::Gapic::Config::Method.new list_participants_config
                  update_participant_config = parent_rpcs.update_participant if parent_rpcs.respond_to? :update_participant
                  @update_participant = ::Gapic::Config::Method.new update_participant_config
                  analyze_content_config = parent_rpcs.analyze_content if parent_rpcs.respond_to? :analyze_content
                  @analyze_content = ::Gapic::Config::Method.new analyze_content_config
                  suggest_articles_config = parent_rpcs.suggest_articles if parent_rpcs.respond_to? :suggest_articles
                  @suggest_articles = ::Gapic::Config::Method.new suggest_articles_config
                  suggest_faq_answers_config = parent_rpcs.suggest_faq_answers if parent_rpcs.respond_to? :suggest_faq_answers
                  @suggest_faq_answers = ::Gapic::Config::Method.new suggest_faq_answers_config
                  suggest_smart_replies_config = parent_rpcs.suggest_smart_replies if parent_rpcs.respond_to? :suggest_smart_replies
                  @suggest_smart_replies = ::Gapic::Config::Method.new suggest_smart_replies_config
                  list_suggestions_config = parent_rpcs.list_suggestions if parent_rpcs.respond_to? :list_suggestions
                  @list_suggestions = ::Gapic::Config::Method.new list_suggestions_config
                  compile_suggestion_config = parent_rpcs.compile_suggestion if parent_rpcs.respond_to? :compile_suggestion
                  @compile_suggestion = ::Gapic::Config::Method.new compile_suggestion_config

                  yield self if block_given?
                end
              end
            end
          end
        end
      end
    end
  end
end
