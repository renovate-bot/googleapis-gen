<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/dialogflow/cx/v3/webhook.proto

namespace Google\Cloud\Dialogflow\Cx\V3\Webhook;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Represents configuration for a generic web service.
 *
 * Generated from protobuf message <code>google.cloud.dialogflow.cx.v3.Webhook.GenericWebService</code>
 */
class GenericWebService extends \Google\Protobuf\Internal\Message
{
    /**
     * Required. The webhook URI for receiving POST requests. It must use https protocol.
     *
     * Generated from protobuf field <code>string uri = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    protected $uri = '';
    /**
     * The user name for HTTP Basic authentication.
     *
     * Generated from protobuf field <code>string username = 2 [deprecated = true];</code>
     * @deprecated
     */
    protected $username = '';
    /**
     * The password for HTTP Basic authentication.
     *
     * Generated from protobuf field <code>string password = 3 [deprecated = true];</code>
     * @deprecated
     */
    protected $password = '';
    /**
     * The HTTP request headers to send together with webhook
     * requests.
     *
     * Generated from protobuf field <code>map<string, string> request_headers = 4;</code>
     */
    private $request_headers;
    /**
     * Optional. Specifies a list of allowed custom CA certificates (in DER format) for
     * HTTPS verification. This overrides the default SSL trust store. If this
     * is empty or unspecified, Dialogflow will use Google's default trust store
     * to verify certificates.
     * N.B. Make sure the HTTPS server certificates are signed with "subject alt
     * name". For instance a certificate can be self-signed using the following
     * command,
     *    openssl x509 -req -days 200 -in example.com.csr \
     *      -signkey example.com.key \
     *      -out example.com.crt \
     *      -extfile <(printf "\nsubjectAltName='DNS:www.example.com'")
     *
     * Generated from protobuf field <code>repeated bytes allowed_ca_certs = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    private $allowed_ca_certs;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $uri
     *           Required. The webhook URI for receiving POST requests. It must use https protocol.
     *     @type string $username
     *           The user name for HTTP Basic authentication.
     *     @type string $password
     *           The password for HTTP Basic authentication.
     *     @type array|\Google\Protobuf\Internal\MapField $request_headers
     *           The HTTP request headers to send together with webhook
     *           requests.
     *     @type string[]|\Google\Protobuf\Internal\RepeatedField $allowed_ca_certs
     *           Optional. Specifies a list of allowed custom CA certificates (in DER format) for
     *           HTTPS verification. This overrides the default SSL trust store. If this
     *           is empty or unspecified, Dialogflow will use Google's default trust store
     *           to verify certificates.
     *           N.B. Make sure the HTTPS server certificates are signed with "subject alt
     *           name". For instance a certificate can be self-signed using the following
     *           command,
     *              openssl x509 -req -days 200 -in example.com.csr \
     *                -signkey example.com.key \
     *                -out example.com.crt \
     *                -extfile <(printf "\nsubjectAltName='DNS:www.example.com'")
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Dialogflow\Cx\V3\Webhook::initOnce();
        parent::__construct($data);
    }

    /**
     * Required. The webhook URI for receiving POST requests. It must use https protocol.
     *
     * Generated from protobuf field <code>string uri = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return string
     */
    public function getUri()
    {
        return $this->uri;
    }

    /**
     * Required. The webhook URI for receiving POST requests. It must use https protocol.
     *
     * Generated from protobuf field <code>string uri = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param string $var
     * @return $this
     */
    public function setUri($var)
    {
        GPBUtil::checkString($var, True);
        $this->uri = $var;

        return $this;
    }

    /**
     * The user name for HTTP Basic authentication.
     *
     * Generated from protobuf field <code>string username = 2 [deprecated = true];</code>
     * @return string
     * @deprecated
     */
    public function getUsername()
    {
        @trigger_error('username is deprecated.', E_USER_DEPRECATED);
        return $this->username;
    }

    /**
     * The user name for HTTP Basic authentication.
     *
     * Generated from protobuf field <code>string username = 2 [deprecated = true];</code>
     * @param string $var
     * @return $this
     * @deprecated
     */
    public function setUsername($var)
    {
        @trigger_error('username is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkString($var, True);
        $this->username = $var;

        return $this;
    }

    /**
     * The password for HTTP Basic authentication.
     *
     * Generated from protobuf field <code>string password = 3 [deprecated = true];</code>
     * @return string
     * @deprecated
     */
    public function getPassword()
    {
        @trigger_error('password is deprecated.', E_USER_DEPRECATED);
        return $this->password;
    }

    /**
     * The password for HTTP Basic authentication.
     *
     * Generated from protobuf field <code>string password = 3 [deprecated = true];</code>
     * @param string $var
     * @return $this
     * @deprecated
     */
    public function setPassword($var)
    {
        @trigger_error('password is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkString($var, True);
        $this->password = $var;

        return $this;
    }

    /**
     * The HTTP request headers to send together with webhook
     * requests.
     *
     * Generated from protobuf field <code>map<string, string> request_headers = 4;</code>
     * @return \Google\Protobuf\Internal\MapField
     */
    public function getRequestHeaders()
    {
        return $this->request_headers;
    }

    /**
     * The HTTP request headers to send together with webhook
     * requests.
     *
     * Generated from protobuf field <code>map<string, string> request_headers = 4;</code>
     * @param array|\Google\Protobuf\Internal\MapField $var
     * @return $this
     */
    public function setRequestHeaders($var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::STRING, \Google\Protobuf\Internal\GPBType::STRING);
        $this->request_headers = $arr;

        return $this;
    }

    /**
     * Optional. Specifies a list of allowed custom CA certificates (in DER format) for
     * HTTPS verification. This overrides the default SSL trust store. If this
     * is empty or unspecified, Dialogflow will use Google's default trust store
     * to verify certificates.
     * N.B. Make sure the HTTPS server certificates are signed with "subject alt
     * name". For instance a certificate can be self-signed using the following
     * command,
     *    openssl x509 -req -days 200 -in example.com.csr \
     *      -signkey example.com.key \
     *      -out example.com.crt \
     *      -extfile <(printf "\nsubjectAltName='DNS:www.example.com'")
     *
     * Generated from protobuf field <code>repeated bytes allowed_ca_certs = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getAllowedCaCerts()
    {
        return $this->allowed_ca_certs;
    }

    /**
     * Optional. Specifies a list of allowed custom CA certificates (in DER format) for
     * HTTPS verification. This overrides the default SSL trust store. If this
     * is empty or unspecified, Dialogflow will use Google's default trust store
     * to verify certificates.
     * N.B. Make sure the HTTPS server certificates are signed with "subject alt
     * name". For instance a certificate can be self-signed using the following
     * command,
     *    openssl x509 -req -days 200 -in example.com.csr \
     *      -signkey example.com.key \
     *      -out example.com.crt \
     *      -extfile <(printf "\nsubjectAltName='DNS:www.example.com'")
     *
     * Generated from protobuf field <code>repeated bytes allowed_ca_certs = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param string[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setAllowedCaCerts($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::BYTES);
        $this->allowed_ca_certs = $arr;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(GenericWebService::class, \Google\Cloud\Dialogflow\Cx\V3\Webhook_GenericWebService::class);

