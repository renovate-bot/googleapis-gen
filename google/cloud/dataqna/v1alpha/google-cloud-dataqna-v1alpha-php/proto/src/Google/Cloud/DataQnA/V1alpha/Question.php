<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/dataqna/v1alpha/question.proto

namespace Google\Cloud\DataQnA\V1alpha;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The question resource represents a natural language query, its settings,
 * understanding generated by the system, and answer retrieval status.
 * A question cannot be modified.
 *
 * Generated from protobuf message <code>google.cloud.dataqna.v1alpha.Question</code>
 */
class Question extends \Google\Protobuf\Internal\Message
{
    /**
     * Output only. Immutable. The unique identifier for the Question. The ID is server-generated.
     * Example: `projects/foo/locations/bar/questions/123`
     *
     * Generated from protobuf field <code>string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE];</code>
     */
    protected $name = '';
    /**
     * Required. Immutable. Scopes to be used for the question. A scope defines the relevant data set
     * scope. It can be a reference to a specific data source or a collection of
     * data sources. Currently, support is limited to a single BigQuery table.
     * There must be exactly one `scopes` element.
     * Example:
     * `//bigquery.googleapis.com/projects/test-project/datasets/foo/tables/bar`
     *
     * Generated from protobuf field <code>repeated string scopes = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_behavior) = IMMUTABLE];</code>
     */
    private $scopes;
    /**
     * Required. Immutable. The query in natural language.
     *
     * Generated from protobuf field <code>string query = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_behavior) = IMMUTABLE];</code>
     */
    protected $query = '';
    /**
     * A list of annotations to use instead of the default annotation of a data
     * source (set in the data source reference resource). There must not be
     * more than one annotation with the same data source reference.
     *
     * Generated from protobuf field <code>repeated string data_source_annotations = 4;</code>
     */
    private $data_source_annotations;
    /**
     * An error field explaining why interpretation failed. This is only populated
     * if the interpretation failed.
     * Note: This is different from getting a status error on the request itself.
     * This is not a client or server error and the Question resource is still
     * persisted, but the service could not interpret the question. Clients should
     * present the error to the user so the user can rephrase the question.
     *
     * Generated from protobuf field <code>.google.cloud.dataqna.v1alpha.InterpretError interpret_error = 5;</code>
     */
    protected $interpret_error = null;
    /**
     * A list of interpretations for this question.
     *
     * Generated from protobuf field <code>repeated .google.cloud.dataqna.v1alpha.Interpretation interpretations = 6;</code>
     */
    private $interpretations;
    /**
     * Time when the question was created.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp create_time = 7;</code>
     */
    protected $create_time = null;
    /**
     * Output only. The e-mail address of the user that created this question.
     *
     * Generated from protobuf field <code>string user_email = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    protected $user_email = '';
    /**
     * Input only. Immutable. Flags to request additional information for debugging purposes.
     *
     * Generated from protobuf field <code>.google.cloud.dataqna.v1alpha.DebugFlags debug_flags = 9 [(.google.api.field_behavior) = IMMUTABLE, (.google.api.field_behavior) = INPUT_ONLY];</code>
     */
    protected $debug_flags = null;
    /**
     * Top level debug information.
     * This will be stored as the type DebugInformation.
     * Using Any so clients don't need to pull in anything
     * inside the debug message.
     *
     * Generated from protobuf field <code>.google.protobuf.Any debug_info = 10;</code>
     */
    protected $debug_info = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *           Output only. Immutable. The unique identifier for the Question. The ID is server-generated.
     *           Example: `projects/foo/locations/bar/questions/123`
     *     @type string[]|\Google\Protobuf\Internal\RepeatedField $scopes
     *           Required. Immutable. Scopes to be used for the question. A scope defines the relevant data set
     *           scope. It can be a reference to a specific data source or a collection of
     *           data sources. Currently, support is limited to a single BigQuery table.
     *           There must be exactly one `scopes` element.
     *           Example:
     *           `//bigquery.googleapis.com/projects/test-project/datasets/foo/tables/bar`
     *     @type string $query
     *           Required. Immutable. The query in natural language.
     *     @type string[]|\Google\Protobuf\Internal\RepeatedField $data_source_annotations
     *           A list of annotations to use instead of the default annotation of a data
     *           source (set in the data source reference resource). There must not be
     *           more than one annotation with the same data source reference.
     *     @type \Google\Cloud\DataQnA\V1alpha\InterpretError $interpret_error
     *           An error field explaining why interpretation failed. This is only populated
     *           if the interpretation failed.
     *           Note: This is different from getting a status error on the request itself.
     *           This is not a client or server error and the Question resource is still
     *           persisted, but the service could not interpret the question. Clients should
     *           present the error to the user so the user can rephrase the question.
     *     @type \Google\Cloud\DataQnA\V1alpha\Interpretation[]|\Google\Protobuf\Internal\RepeatedField $interpretations
     *           A list of interpretations for this question.
     *     @type \Google\Protobuf\Timestamp $create_time
     *           Time when the question was created.
     *     @type string $user_email
     *           Output only. The e-mail address of the user that created this question.
     *     @type \Google\Cloud\DataQnA\V1alpha\DebugFlags $debug_flags
     *           Input only. Immutable. Flags to request additional information for debugging purposes.
     *     @type \Google\Protobuf\Any $debug_info
     *           Top level debug information.
     *           This will be stored as the type DebugInformation.
     *           Using Any so clients don't need to pull in anything
     *           inside the debug message.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Dataqna\V1Alpha\Question::initOnce();
        parent::__construct($data);
    }

    /**
     * Output only. Immutable. The unique identifier for the Question. The ID is server-generated.
     * Example: `projects/foo/locations/bar/questions/123`
     *
     * Generated from protobuf field <code>string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE];</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Output only. Immutable. The unique identifier for the Question. The ID is server-generated.
     * Example: `projects/foo/locations/bar/questions/123`
     *
     * Generated from protobuf field <code>string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE];</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * Required. Immutable. Scopes to be used for the question. A scope defines the relevant data set
     * scope. It can be a reference to a specific data source or a collection of
     * data sources. Currently, support is limited to a single BigQuery table.
     * There must be exactly one `scopes` element.
     * Example:
     * `//bigquery.googleapis.com/projects/test-project/datasets/foo/tables/bar`
     *
     * Generated from protobuf field <code>repeated string scopes = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_behavior) = IMMUTABLE];</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getScopes()
    {
        return $this->scopes;
    }

    /**
     * Required. Immutable. Scopes to be used for the question. A scope defines the relevant data set
     * scope. It can be a reference to a specific data source or a collection of
     * data sources. Currently, support is limited to a single BigQuery table.
     * There must be exactly one `scopes` element.
     * Example:
     * `//bigquery.googleapis.com/projects/test-project/datasets/foo/tables/bar`
     *
     * Generated from protobuf field <code>repeated string scopes = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_behavior) = IMMUTABLE];</code>
     * @param string[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setScopes($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->scopes = $arr;

        return $this;
    }

    /**
     * Required. Immutable. The query in natural language.
     *
     * Generated from protobuf field <code>string query = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_behavior) = IMMUTABLE];</code>
     * @return string
     */
    public function getQuery()
    {
        return $this->query;
    }

    /**
     * Required. Immutable. The query in natural language.
     *
     * Generated from protobuf field <code>string query = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_behavior) = IMMUTABLE];</code>
     * @param string $var
     * @return $this
     */
    public function setQuery($var)
    {
        GPBUtil::checkString($var, True);
        $this->query = $var;

        return $this;
    }

    /**
     * A list of annotations to use instead of the default annotation of a data
     * source (set in the data source reference resource). There must not be
     * more than one annotation with the same data source reference.
     *
     * Generated from protobuf field <code>repeated string data_source_annotations = 4;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getDataSourceAnnotations()
    {
        return $this->data_source_annotations;
    }

    /**
     * A list of annotations to use instead of the default annotation of a data
     * source (set in the data source reference resource). There must not be
     * more than one annotation with the same data source reference.
     *
     * Generated from protobuf field <code>repeated string data_source_annotations = 4;</code>
     * @param string[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setDataSourceAnnotations($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->data_source_annotations = $arr;

        return $this;
    }

    /**
     * An error field explaining why interpretation failed. This is only populated
     * if the interpretation failed.
     * Note: This is different from getting a status error on the request itself.
     * This is not a client or server error and the Question resource is still
     * persisted, but the service could not interpret the question. Clients should
     * present the error to the user so the user can rephrase the question.
     *
     * Generated from protobuf field <code>.google.cloud.dataqna.v1alpha.InterpretError interpret_error = 5;</code>
     * @return \Google\Cloud\DataQnA\V1alpha\InterpretError|null
     */
    public function getInterpretError()
    {
        return $this->interpret_error;
    }

    public function hasInterpretError()
    {
        return isset($this->interpret_error);
    }

    public function clearInterpretError()
    {
        unset($this->interpret_error);
    }

    /**
     * An error field explaining why interpretation failed. This is only populated
     * if the interpretation failed.
     * Note: This is different from getting a status error on the request itself.
     * This is not a client or server error and the Question resource is still
     * persisted, but the service could not interpret the question. Clients should
     * present the error to the user so the user can rephrase the question.
     *
     * Generated from protobuf field <code>.google.cloud.dataqna.v1alpha.InterpretError interpret_error = 5;</code>
     * @param \Google\Cloud\DataQnA\V1alpha\InterpretError $var
     * @return $this
     */
    public function setInterpretError($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\DataQnA\V1alpha\InterpretError::class);
        $this->interpret_error = $var;

        return $this;
    }

    /**
     * A list of interpretations for this question.
     *
     * Generated from protobuf field <code>repeated .google.cloud.dataqna.v1alpha.Interpretation interpretations = 6;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getInterpretations()
    {
        return $this->interpretations;
    }

    /**
     * A list of interpretations for this question.
     *
     * Generated from protobuf field <code>repeated .google.cloud.dataqna.v1alpha.Interpretation interpretations = 6;</code>
     * @param \Google\Cloud\DataQnA\V1alpha\Interpretation[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setInterpretations($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Cloud\DataQnA\V1alpha\Interpretation::class);
        $this->interpretations = $arr;

        return $this;
    }

    /**
     * Time when the question was created.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp create_time = 7;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getCreateTime()
    {
        return $this->create_time;
    }

    public function hasCreateTime()
    {
        return isset($this->create_time);
    }

    public function clearCreateTime()
    {
        unset($this->create_time);
    }

    /**
     * Time when the question was created.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp create_time = 7;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setCreateTime($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->create_time = $var;

        return $this;
    }

    /**
     * Output only. The e-mail address of the user that created this question.
     *
     * Generated from protobuf field <code>string user_email = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @return string
     */
    public function getUserEmail()
    {
        return $this->user_email;
    }

    /**
     * Output only. The e-mail address of the user that created this question.
     *
     * Generated from protobuf field <code>string user_email = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @param string $var
     * @return $this
     */
    public function setUserEmail($var)
    {
        GPBUtil::checkString($var, True);
        $this->user_email = $var;

        return $this;
    }

    /**
     * Input only. Immutable. Flags to request additional information for debugging purposes.
     *
     * Generated from protobuf field <code>.google.cloud.dataqna.v1alpha.DebugFlags debug_flags = 9 [(.google.api.field_behavior) = IMMUTABLE, (.google.api.field_behavior) = INPUT_ONLY];</code>
     * @return \Google\Cloud\DataQnA\V1alpha\DebugFlags|null
     */
    public function getDebugFlags()
    {
        return $this->debug_flags;
    }

    public function hasDebugFlags()
    {
        return isset($this->debug_flags);
    }

    public function clearDebugFlags()
    {
        unset($this->debug_flags);
    }

    /**
     * Input only. Immutable. Flags to request additional information for debugging purposes.
     *
     * Generated from protobuf field <code>.google.cloud.dataqna.v1alpha.DebugFlags debug_flags = 9 [(.google.api.field_behavior) = IMMUTABLE, (.google.api.field_behavior) = INPUT_ONLY];</code>
     * @param \Google\Cloud\DataQnA\V1alpha\DebugFlags $var
     * @return $this
     */
    public function setDebugFlags($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\DataQnA\V1alpha\DebugFlags::class);
        $this->debug_flags = $var;

        return $this;
    }

    /**
     * Top level debug information.
     * This will be stored as the type DebugInformation.
     * Using Any so clients don't need to pull in anything
     * inside the debug message.
     *
     * Generated from protobuf field <code>.google.protobuf.Any debug_info = 10;</code>
     * @return \Google\Protobuf\Any|null
     */
    public function getDebugInfo()
    {
        return $this->debug_info;
    }

    public function hasDebugInfo()
    {
        return isset($this->debug_info);
    }

    public function clearDebugInfo()
    {
        unset($this->debug_info);
    }

    /**
     * Top level debug information.
     * This will be stored as the type DebugInformation.
     * Using Any so clients don't need to pull in anything
     * inside the debug message.
     *
     * Generated from protobuf field <code>.google.protobuf.Any debug_info = 10;</code>
     * @param \Google\Protobuf\Any $var
     * @return $this
     */
    public function setDebugInfo($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Any::class);
        $this->debug_info = $var;

        return $this;
    }

}

