// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/dataqna/v1alpha/question_service.proto
// </auto-generated>
// Original file comments:
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.DataQnA.V1Alpha {
  /// <summary>
  /// Service to interpret natural language queries.
  /// The service allows to create `Question` resources that are interpreted and
  /// are filled with one or more interpretations if the question could be
  /// interpreted. Once a `Question` resource is created and has at least one
  /// interpretation, an interpretation can be chosen for execution, which
  /// triggers a query to the backend (for BigQuery, it will create a job).
  /// Upon successful execution of that interpretation, backend specific
  /// information will be returned so that the client can retrieve the results
  /// from the backend.
  ///
  /// The `Question` resources are named `projects/*/locations/*/questions/*`.
  ///
  /// The `Question` resource has a singletion sub-resource `UserFeedback` named
  /// `projects/*/locations/*/questions/*/userFeedback`, which allows access to
  /// user feedback.
  /// </summary>
  public static partial class QuestionService
  {
    static readonly string __ServiceName = "google.cloud.dataqna.v1alpha.QuestionService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DataQnA.V1Alpha.GetQuestionRequest> __Marshaller_google_cloud_dataqna_v1alpha_GetQuestionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DataQnA.V1Alpha.GetQuestionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DataQnA.V1Alpha.Question> __Marshaller_google_cloud_dataqna_v1alpha_Question = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DataQnA.V1Alpha.Question.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DataQnA.V1Alpha.CreateQuestionRequest> __Marshaller_google_cloud_dataqna_v1alpha_CreateQuestionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DataQnA.V1Alpha.CreateQuestionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DataQnA.V1Alpha.ExecuteQuestionRequest> __Marshaller_google_cloud_dataqna_v1alpha_ExecuteQuestionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DataQnA.V1Alpha.ExecuteQuestionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DataQnA.V1Alpha.GetUserFeedbackRequest> __Marshaller_google_cloud_dataqna_v1alpha_GetUserFeedbackRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DataQnA.V1Alpha.GetUserFeedbackRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DataQnA.V1Alpha.UserFeedback> __Marshaller_google_cloud_dataqna_v1alpha_UserFeedback = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DataQnA.V1Alpha.UserFeedback.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DataQnA.V1Alpha.UpdateUserFeedbackRequest> __Marshaller_google_cloud_dataqna_v1alpha_UpdateUserFeedbackRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DataQnA.V1Alpha.UpdateUserFeedbackRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DataQnA.V1Alpha.GetQuestionRequest, global::Google.Cloud.DataQnA.V1Alpha.Question> __Method_GetQuestion = new grpc::Method<global::Google.Cloud.DataQnA.V1Alpha.GetQuestionRequest, global::Google.Cloud.DataQnA.V1Alpha.Question>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetQuestion",
        __Marshaller_google_cloud_dataqna_v1alpha_GetQuestionRequest,
        __Marshaller_google_cloud_dataqna_v1alpha_Question);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DataQnA.V1Alpha.CreateQuestionRequest, global::Google.Cloud.DataQnA.V1Alpha.Question> __Method_CreateQuestion = new grpc::Method<global::Google.Cloud.DataQnA.V1Alpha.CreateQuestionRequest, global::Google.Cloud.DataQnA.V1Alpha.Question>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateQuestion",
        __Marshaller_google_cloud_dataqna_v1alpha_CreateQuestionRequest,
        __Marshaller_google_cloud_dataqna_v1alpha_Question);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DataQnA.V1Alpha.ExecuteQuestionRequest, global::Google.Cloud.DataQnA.V1Alpha.Question> __Method_ExecuteQuestion = new grpc::Method<global::Google.Cloud.DataQnA.V1Alpha.ExecuteQuestionRequest, global::Google.Cloud.DataQnA.V1Alpha.Question>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExecuteQuestion",
        __Marshaller_google_cloud_dataqna_v1alpha_ExecuteQuestionRequest,
        __Marshaller_google_cloud_dataqna_v1alpha_Question);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DataQnA.V1Alpha.GetUserFeedbackRequest, global::Google.Cloud.DataQnA.V1Alpha.UserFeedback> __Method_GetUserFeedback = new grpc::Method<global::Google.Cloud.DataQnA.V1Alpha.GetUserFeedbackRequest, global::Google.Cloud.DataQnA.V1Alpha.UserFeedback>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUserFeedback",
        __Marshaller_google_cloud_dataqna_v1alpha_GetUserFeedbackRequest,
        __Marshaller_google_cloud_dataqna_v1alpha_UserFeedback);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DataQnA.V1Alpha.UpdateUserFeedbackRequest, global::Google.Cloud.DataQnA.V1Alpha.UserFeedback> __Method_UpdateUserFeedback = new grpc::Method<global::Google.Cloud.DataQnA.V1Alpha.UpdateUserFeedbackRequest, global::Google.Cloud.DataQnA.V1Alpha.UserFeedback>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateUserFeedback",
        __Marshaller_google_cloud_dataqna_v1alpha_UpdateUserFeedbackRequest,
        __Marshaller_google_cloud_dataqna_v1alpha_UserFeedback);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.DataQnA.V1Alpha.QuestionServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of QuestionService</summary>
    [grpc::BindServiceMethod(typeof(QuestionService), "BindService")]
    public abstract partial class QuestionServiceBase
    {
      /// <summary>
      /// Gets a previously created question.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.DataQnA.V1Alpha.Question> GetQuestion(global::Google.Cloud.DataQnA.V1Alpha.GetQuestionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a question.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.DataQnA.V1Alpha.Question> CreateQuestion(global::Google.Cloud.DataQnA.V1Alpha.CreateQuestionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Executes an interpretation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.DataQnA.V1Alpha.Question> ExecuteQuestion(global::Google.Cloud.DataQnA.V1Alpha.ExecuteQuestionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets previously created user feedback.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.DataQnA.V1Alpha.UserFeedback> GetUserFeedback(global::Google.Cloud.DataQnA.V1Alpha.GetUserFeedbackRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates user feedback. This creates user feedback if there was none before
      /// (upsert).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.DataQnA.V1Alpha.UserFeedback> UpdateUserFeedback(global::Google.Cloud.DataQnA.V1Alpha.UpdateUserFeedbackRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for QuestionService</summary>
    public partial class QuestionServiceClient : grpc::ClientBase<QuestionServiceClient>
    {
      /// <summary>Creates a new client for QuestionService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public QuestionServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for QuestionService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public QuestionServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected QuestionServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected QuestionServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Gets a previously created question.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DataQnA.V1Alpha.Question GetQuestion(global::Google.Cloud.DataQnA.V1Alpha.GetQuestionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetQuestion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a previously created question.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DataQnA.V1Alpha.Question GetQuestion(global::Google.Cloud.DataQnA.V1Alpha.GetQuestionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetQuestion, null, options, request);
      }
      /// <summary>
      /// Gets a previously created question.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DataQnA.V1Alpha.Question> GetQuestionAsync(global::Google.Cloud.DataQnA.V1Alpha.GetQuestionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetQuestionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a previously created question.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DataQnA.V1Alpha.Question> GetQuestionAsync(global::Google.Cloud.DataQnA.V1Alpha.GetQuestionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetQuestion, null, options, request);
      }
      /// <summary>
      /// Creates a question.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DataQnA.V1Alpha.Question CreateQuestion(global::Google.Cloud.DataQnA.V1Alpha.CreateQuestionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateQuestion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a question.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DataQnA.V1Alpha.Question CreateQuestion(global::Google.Cloud.DataQnA.V1Alpha.CreateQuestionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateQuestion, null, options, request);
      }
      /// <summary>
      /// Creates a question.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DataQnA.V1Alpha.Question> CreateQuestionAsync(global::Google.Cloud.DataQnA.V1Alpha.CreateQuestionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateQuestionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a question.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DataQnA.V1Alpha.Question> CreateQuestionAsync(global::Google.Cloud.DataQnA.V1Alpha.CreateQuestionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateQuestion, null, options, request);
      }
      /// <summary>
      /// Executes an interpretation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DataQnA.V1Alpha.Question ExecuteQuestion(global::Google.Cloud.DataQnA.V1Alpha.ExecuteQuestionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteQuestion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Executes an interpretation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DataQnA.V1Alpha.Question ExecuteQuestion(global::Google.Cloud.DataQnA.V1Alpha.ExecuteQuestionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExecuteQuestion, null, options, request);
      }
      /// <summary>
      /// Executes an interpretation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DataQnA.V1Alpha.Question> ExecuteQuestionAsync(global::Google.Cloud.DataQnA.V1Alpha.ExecuteQuestionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteQuestionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Executes an interpretation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DataQnA.V1Alpha.Question> ExecuteQuestionAsync(global::Google.Cloud.DataQnA.V1Alpha.ExecuteQuestionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExecuteQuestion, null, options, request);
      }
      /// <summary>
      /// Gets previously created user feedback.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DataQnA.V1Alpha.UserFeedback GetUserFeedback(global::Google.Cloud.DataQnA.V1Alpha.GetUserFeedbackRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserFeedback(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets previously created user feedback.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DataQnA.V1Alpha.UserFeedback GetUserFeedback(global::Google.Cloud.DataQnA.V1Alpha.GetUserFeedbackRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUserFeedback, null, options, request);
      }
      /// <summary>
      /// Gets previously created user feedback.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DataQnA.V1Alpha.UserFeedback> GetUserFeedbackAsync(global::Google.Cloud.DataQnA.V1Alpha.GetUserFeedbackRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserFeedbackAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets previously created user feedback.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DataQnA.V1Alpha.UserFeedback> GetUserFeedbackAsync(global::Google.Cloud.DataQnA.V1Alpha.GetUserFeedbackRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUserFeedback, null, options, request);
      }
      /// <summary>
      /// Updates user feedback. This creates user feedback if there was none before
      /// (upsert).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DataQnA.V1Alpha.UserFeedback UpdateUserFeedback(global::Google.Cloud.DataQnA.V1Alpha.UpdateUserFeedbackRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateUserFeedback(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates user feedback. This creates user feedback if there was none before
      /// (upsert).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DataQnA.V1Alpha.UserFeedback UpdateUserFeedback(global::Google.Cloud.DataQnA.V1Alpha.UpdateUserFeedbackRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateUserFeedback, null, options, request);
      }
      /// <summary>
      /// Updates user feedback. This creates user feedback if there was none before
      /// (upsert).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DataQnA.V1Alpha.UserFeedback> UpdateUserFeedbackAsync(global::Google.Cloud.DataQnA.V1Alpha.UpdateUserFeedbackRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateUserFeedbackAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates user feedback. This creates user feedback if there was none before
      /// (upsert).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DataQnA.V1Alpha.UserFeedback> UpdateUserFeedbackAsync(global::Google.Cloud.DataQnA.V1Alpha.UpdateUserFeedbackRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateUserFeedback, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override QuestionServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new QuestionServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(QuestionServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetQuestion, serviceImpl.GetQuestion)
          .AddMethod(__Method_CreateQuestion, serviceImpl.CreateQuestion)
          .AddMethod(__Method_ExecuteQuestion, serviceImpl.ExecuteQuestion)
          .AddMethod(__Method_GetUserFeedback, serviceImpl.GetUserFeedback)
          .AddMethod(__Method_UpdateUserFeedback, serviceImpl.UpdateUserFeedback).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, QuestionServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetQuestion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DataQnA.V1Alpha.GetQuestionRequest, global::Google.Cloud.DataQnA.V1Alpha.Question>(serviceImpl.GetQuestion));
      serviceBinder.AddMethod(__Method_CreateQuestion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DataQnA.V1Alpha.CreateQuestionRequest, global::Google.Cloud.DataQnA.V1Alpha.Question>(serviceImpl.CreateQuestion));
      serviceBinder.AddMethod(__Method_ExecuteQuestion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DataQnA.V1Alpha.ExecuteQuestionRequest, global::Google.Cloud.DataQnA.V1Alpha.Question>(serviceImpl.ExecuteQuestion));
      serviceBinder.AddMethod(__Method_GetUserFeedback, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DataQnA.V1Alpha.GetUserFeedbackRequest, global::Google.Cloud.DataQnA.V1Alpha.UserFeedback>(serviceImpl.GetUserFeedback));
      serviceBinder.AddMethod(__Method_UpdateUserFeedback, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DataQnA.V1Alpha.UpdateUserFeedbackRequest, global::Google.Cloud.DataQnA.V1Alpha.UserFeedback>(serviceImpl.UpdateUserFeedback));
    }

  }
}
#endregion
