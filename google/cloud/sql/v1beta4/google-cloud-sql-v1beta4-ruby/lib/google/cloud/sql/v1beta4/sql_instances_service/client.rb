# frozen_string_literal: true

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/cloud/errors"
require "google/cloud/sql/v1beta4/cloud_sql_pb"

module Google
  module Cloud
    module Sql
      module V1beta4
        module SqlInstancesService
          ##
          # Client for the SqlInstancesService service.
          #
          class Client
            # @private
            attr_reader :sql_instances_service_stub

            ##
            # Configure the SqlInstancesService Client class.
            #
            # See {::Google::Cloud::Sql::V1beta4::SqlInstancesService::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @example
            #
            #   # Modify the configuration for all SqlInstancesService clients
            #   ::Google::Cloud::Sql::V1beta4::SqlInstancesService::Client.configure do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def self.configure
              @configure ||= begin
                namespace = ["Google", "Cloud", "Sql", "V1beta4"]
                parent_config = while namespace.any?
                                  parent_name = namespace.join "::"
                                  parent_const = const_get parent_name
                                  break parent_const.configure if parent_const.respond_to? :configure
                                  namespace.pop
                                end
                default_config = Client::Configuration.new parent_config

                default_config.timeout = 60.0

                default_config
              end
              yield @configure if block_given?
              @configure
            end

            ##
            # Configure the SqlInstancesService Client instance.
            #
            # The configuration is set to the derived mode, meaning that values can be changed,
            # but structural changes (adding new fields, etc.) are not allowed. Structural changes
            # should be made on {Client.configure}.
            #
            # See {::Google::Cloud::Sql::V1beta4::SqlInstancesService::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def configure
              yield @config if block_given?
              @config
            end

            ##
            # Create a new SqlInstancesService client object.
            #
            # @example
            #
            #   # Create a client using the default configuration
            #   client = ::Google::Cloud::Sql::V1beta4::SqlInstancesService::Client.new
            #
            #   # Create a client using a custom configuration
            #   client = ::Google::Cloud::Sql::V1beta4::SqlInstancesService::Client.new do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the SqlInstancesService client.
            # @yieldparam config [Client::Configuration]
            #
            def initialize
              # These require statements are intentionally placed here to initialize
              # the gRPC module only when it's required.
              # See https://github.com/googleapis/toolkit/issues/446
              require "gapic/grpc"
              require "google/cloud/sql/v1beta4/cloud_sql_services_pb"

              # Create the configuration object
              @config = Configuration.new Client.configure

              # Yield the configuration if needed
              yield @config if block_given?

              # Create credentials
              credentials = @config.credentials
              # Use self-signed JWT if the endpoint is unchanged from default,
              # but only if the default endpoint does not have a region prefix.
              enable_self_signed_jwt = @config.endpoint == Client.configure.endpoint &&
                                       !@config.endpoint.split(".").first.include?("-")
              credentials ||= Credentials.default scope: @config.scope,
                                                  enable_self_signed_jwt: enable_self_signed_jwt
              if credentials.is_a?(::String) || credentials.is_a?(::Hash)
                credentials = Credentials.new credentials, scope: @config.scope
              end
              @quota_project_id = @config.quota_project
              @quota_project_id ||= credentials.quota_project_id if credentials.respond_to? :quota_project_id

              @sql_instances_service_stub = ::Gapic::ServiceStub.new(
                ::Google::Cloud::Sql::V1beta4::SqlInstancesService::Stub,
                credentials:  credentials,
                endpoint:     @config.endpoint,
                channel_args: @config.channel_args,
                interceptors: @config.interceptors
              )
            end

            # Service calls

            ##
            # Add a new trusted Certificate Authority (CA) version for the specified
            # instance. Required to prepare for a certificate rotation. If a CA version
            # was previously added but never used in a certificate rotation, this
            # operation replaces that version. There cannot be more than one CA version
            # waiting to be rotated in.
            #
            # @overload add_server_ca(request, options = nil)
            #   Pass arguments to `add_server_ca` via a request object, either of type
            #   {::Google::Cloud::Sql::V1beta4::SqlInstancesAddServerCaRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Sql::V1beta4::SqlInstancesAddServerCaRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload add_server_ca(instance: nil, project: nil)
            #   Pass arguments to `add_server_ca` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param instance [::String]
            #     Cloud SQL instance ID. This does not include the project ID.
            #   @param project [::String]
            #     Project ID of the project that contains the instance.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Sql::V1beta4::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Sql::V1beta4::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/sql/v1beta4"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Sql::V1beta4::SqlInstancesService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Sql::V1beta4::SqlInstancesAddServerCaRequest.new
            #
            #   # Call the add_server_ca method.
            #   result = client.add_server_ca request
            #
            #   # The returned object is of type Google::Cloud::Sql::V1beta4::Operation.
            #   p result
            #
            def add_server_ca request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Sql::V1beta4::SqlInstancesAddServerCaRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.add_server_ca.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Sql::V1beta4::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.project
                header_params["project"] = request.project
              end
              if request.instance
                header_params["instance"] = request.instance
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.add_server_ca.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.add_server_ca.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @sql_instances_service_stub.call_rpc :add_server_ca, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Creates a Cloud SQL instance as a clone of the source instance. Using this
            # operation might cause your instance to restart.
            #
            # @overload call_clone(request, options = nil)
            #   Pass arguments to `call_clone` via a request object, either of type
            #   {::Google::Cloud::Sql::V1beta4::SqlInstancesCloneRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Sql::V1beta4::SqlInstancesCloneRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload call_clone(instance: nil, project: nil, body: nil)
            #   Pass arguments to `call_clone` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param instance [::String]
            #     The ID of the Cloud SQL instance to be cloned (source). This does not
            #     include the project ID.
            #   @param project [::String]
            #     Project ID of the source as well as the clone Cloud SQL instance.
            #   @param body [::Google::Cloud::Sql::V1beta4::InstancesCloneRequest, ::Hash]
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Sql::V1beta4::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Sql::V1beta4::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/sql/v1beta4"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Sql::V1beta4::SqlInstancesService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Sql::V1beta4::SqlInstancesCloneRequest.new
            #
            #   # Call the call_clone method.
            #   result = client.call_clone request
            #
            #   # The returned object is of type Google::Cloud::Sql::V1beta4::Operation.
            #   p result
            #
            def call_clone request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Sql::V1beta4::SqlInstancesCloneRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.call_clone.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Sql::V1beta4::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.project
                header_params["project"] = request.project
              end
              if request.instance
                header_params["instance"] = request.instance
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.call_clone.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.call_clone.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @sql_instances_service_stub.call_rpc :call_clone, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Deletes a Cloud SQL instance.
            #
            # @overload delete(request, options = nil)
            #   Pass arguments to `delete` via a request object, either of type
            #   {::Google::Cloud::Sql::V1beta4::SqlInstancesDeleteRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Sql::V1beta4::SqlInstancesDeleteRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload delete(instance: nil, project: nil)
            #   Pass arguments to `delete` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param instance [::String]
            #     Cloud SQL instance ID. This does not include the project ID.
            #   @param project [::String]
            #     Project ID of the project that contains the instance to be deleted.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Sql::V1beta4::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Sql::V1beta4::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/sql/v1beta4"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Sql::V1beta4::SqlInstancesService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Sql::V1beta4::SqlInstancesDeleteRequest.new
            #
            #   # Call the delete method.
            #   result = client.delete request
            #
            #   # The returned object is of type Google::Cloud::Sql::V1beta4::Operation.
            #   p result
            #
            def delete request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Sql::V1beta4::SqlInstancesDeleteRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.delete.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Sql::V1beta4::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.project
                header_params["project"] = request.project
              end
              if request.instance
                header_params["instance"] = request.instance
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.delete.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.delete.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @sql_instances_service_stub.call_rpc :delete, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Demotes the stand-alone instance to be a Cloud SQL read replica for an
            # external database server.
            #
            # @overload demote_master(request, options = nil)
            #   Pass arguments to `demote_master` via a request object, either of type
            #   {::Google::Cloud::Sql::V1beta4::SqlInstancesDemoteMasterRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Sql::V1beta4::SqlInstancesDemoteMasterRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload demote_master(instance: nil, project: nil, body: nil)
            #   Pass arguments to `demote_master` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param instance [::String]
            #     Cloud SQL instance name.
            #   @param project [::String]
            #     ID of the project that contains the instance.
            #   @param body [::Google::Cloud::Sql::V1beta4::InstancesDemoteMasterRequest, ::Hash]
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Sql::V1beta4::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Sql::V1beta4::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/sql/v1beta4"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Sql::V1beta4::SqlInstancesService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Sql::V1beta4::SqlInstancesDemoteMasterRequest.new
            #
            #   # Call the demote_master method.
            #   result = client.demote_master request
            #
            #   # The returned object is of type Google::Cloud::Sql::V1beta4::Operation.
            #   p result
            #
            def demote_master request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Sql::V1beta4::SqlInstancesDemoteMasterRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.demote_master.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Sql::V1beta4::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.project
                header_params["project"] = request.project
              end
              if request.instance
                header_params["instance"] = request.instance
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.demote_master.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.demote_master.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @sql_instances_service_stub.call_rpc :demote_master, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Exports data from a Cloud SQL instance to a Cloud Storage bucket as a SQL
            # dump or CSV file.
            #
            # @overload export(request, options = nil)
            #   Pass arguments to `export` via a request object, either of type
            #   {::Google::Cloud::Sql::V1beta4::SqlInstancesExportRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Sql::V1beta4::SqlInstancesExportRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload export(instance: nil, project: nil, body: nil)
            #   Pass arguments to `export` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param instance [::String]
            #     Cloud SQL instance ID. This does not include the project ID.
            #   @param project [::String]
            #     Project ID of the project that contains the instance to be exported.
            #   @param body [::Google::Cloud::Sql::V1beta4::InstancesExportRequest, ::Hash]
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Sql::V1beta4::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Sql::V1beta4::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/sql/v1beta4"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Sql::V1beta4::SqlInstancesService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Sql::V1beta4::SqlInstancesExportRequest.new
            #
            #   # Call the export method.
            #   result = client.export request
            #
            #   # The returned object is of type Google::Cloud::Sql::V1beta4::Operation.
            #   p result
            #
            def export request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Sql::V1beta4::SqlInstancesExportRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.export.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Sql::V1beta4::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.project
                header_params["project"] = request.project
              end
              if request.instance
                header_params["instance"] = request.instance
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.export.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.export.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @sql_instances_service_stub.call_rpc :export, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Initiates a manual failover of a high availability (HA) primary instance
            # to a standby instance, which becomes the primary instance. Users are
            # then rerouted to the new primary. For more information, see the
            # [Overview of high
            # availability](https://cloud.google.com/sql/docs/mysql/high-availability)
            # page in the Cloud SQL documentation.
            # If using Legacy HA (MySQL only), this causes the instance to failover to
            # its failover replica instance.
            #
            # @overload failover(request, options = nil)
            #   Pass arguments to `failover` via a request object, either of type
            #   {::Google::Cloud::Sql::V1beta4::SqlInstancesFailoverRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Sql::V1beta4::SqlInstancesFailoverRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload failover(instance: nil, project: nil, body: nil)
            #   Pass arguments to `failover` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param instance [::String]
            #     Cloud SQL instance ID. This does not include the project ID.
            #   @param project [::String]
            #     ID of the project that contains the read replica.
            #   @param body [::Google::Cloud::Sql::V1beta4::InstancesFailoverRequest, ::Hash]
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Sql::V1beta4::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Sql::V1beta4::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/sql/v1beta4"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Sql::V1beta4::SqlInstancesService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Sql::V1beta4::SqlInstancesFailoverRequest.new
            #
            #   # Call the failover method.
            #   result = client.failover request
            #
            #   # The returned object is of type Google::Cloud::Sql::V1beta4::Operation.
            #   p result
            #
            def failover request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Sql::V1beta4::SqlInstancesFailoverRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.failover.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Sql::V1beta4::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.project
                header_params["project"] = request.project
              end
              if request.instance
                header_params["instance"] = request.instance
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.failover.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.failover.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @sql_instances_service_stub.call_rpc :failover, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Retrieves a resource containing information about a Cloud SQL instance.
            #
            # @overload get(request, options = nil)
            #   Pass arguments to `get` via a request object, either of type
            #   {::Google::Cloud::Sql::V1beta4::SqlInstancesGetRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Sql::V1beta4::SqlInstancesGetRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get(instance: nil, project: nil)
            #   Pass arguments to `get` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param instance [::String]
            #     Database instance ID. This does not include the project ID.
            #   @param project [::String]
            #     Project ID of the project that contains the instance.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Sql::V1beta4::DatabaseInstance]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Sql::V1beta4::DatabaseInstance]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/sql/v1beta4"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Sql::V1beta4::SqlInstancesService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Sql::V1beta4::SqlInstancesGetRequest.new
            #
            #   # Call the get method.
            #   result = client.get request
            #
            #   # The returned object is of type Google::Cloud::Sql::V1beta4::DatabaseInstance.
            #   p result
            #
            def get request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Sql::V1beta4::SqlInstancesGetRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Sql::V1beta4::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.project
                header_params["project"] = request.project
              end
              if request.instance
                header_params["instance"] = request.instance
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @sql_instances_service_stub.call_rpc :get, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Imports data into a Cloud SQL instance from a SQL dump  or CSV file in
            # Cloud Storage.
            #
            # @overload import(request, options = nil)
            #   Pass arguments to `import` via a request object, either of type
            #   {::Google::Cloud::Sql::V1beta4::SqlInstancesImportRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Sql::V1beta4::SqlInstancesImportRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload import(instance: nil, project: nil, body: nil)
            #   Pass arguments to `import` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param instance [::String]
            #     Cloud SQL instance ID. This does not include the project ID.
            #   @param project [::String]
            #     Project ID of the project that contains the instance.
            #   @param body [::Google::Cloud::Sql::V1beta4::InstancesImportRequest, ::Hash]
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Sql::V1beta4::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Sql::V1beta4::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/sql/v1beta4"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Sql::V1beta4::SqlInstancesService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Sql::V1beta4::SqlInstancesImportRequest.new
            #
            #   # Call the import method.
            #   result = client.import request
            #
            #   # The returned object is of type Google::Cloud::Sql::V1beta4::Operation.
            #   p result
            #
            def import request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Sql::V1beta4::SqlInstancesImportRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.import.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Sql::V1beta4::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.project
                header_params["project"] = request.project
              end
              if request.instance
                header_params["instance"] = request.instance
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.import.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.import.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @sql_instances_service_stub.call_rpc :import, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Creates a new Cloud SQL instance.
            #
            # @overload insert(request, options = nil)
            #   Pass arguments to `insert` via a request object, either of type
            #   {::Google::Cloud::Sql::V1beta4::SqlInstancesInsertRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Sql::V1beta4::SqlInstancesInsertRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload insert(project: nil, body: nil)
            #   Pass arguments to `insert` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param project [::String]
            #     Project ID of the project to which the newly created Cloud SQL instances
            #     should belong.
            #   @param body [::Google::Cloud::Sql::V1beta4::DatabaseInstance, ::Hash]
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Sql::V1beta4::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Sql::V1beta4::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/sql/v1beta4"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Sql::V1beta4::SqlInstancesService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Sql::V1beta4::SqlInstancesInsertRequest.new
            #
            #   # Call the insert method.
            #   result = client.insert request
            #
            #   # The returned object is of type Google::Cloud::Sql::V1beta4::Operation.
            #   p result
            #
            def insert request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Sql::V1beta4::SqlInstancesInsertRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.insert.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Sql::V1beta4::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.project
                header_params["project"] = request.project
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.insert.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.insert.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @sql_instances_service_stub.call_rpc :insert, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Lists instances under a given project.
            #
            # @overload list(request, options = nil)
            #   Pass arguments to `list` via a request object, either of type
            #   {::Google::Cloud::Sql::V1beta4::SqlInstancesListRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Sql::V1beta4::SqlInstancesListRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list(filter: nil, max_results: nil, page_token: nil, project: nil)
            #   Pass arguments to `list` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param filter [::String]
            #     A filter expression that filters resources listed in the response.
            #     The expression is in the form of field:value. For example,
            #     'instanceType:CLOUD_SQL_INSTANCE'. Fields can be nested as needed as per
            #     their JSON representation, such as 'settings.userLabels.auto_start:true'.
            #
            #     Multiple filter queries are space-separated. For example.
            #     'state:RUNNABLE instanceType:CLOUD_SQL_INSTANCE'. By default, each
            #     expression is an AND expression. However, you can include AND and OR
            #     expressions explicitly.
            #   @param max_results [::Integer]
            #     The maximum number of results to return per response.
            #   @param page_token [::String]
            #     A previously-returned page token representing part of the larger set of
            #     results to view.
            #   @param project [::String]
            #     Project ID of the project for which to list Cloud SQL instances.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Sql::V1beta4::InstancesListResponse]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Sql::V1beta4::InstancesListResponse]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/sql/v1beta4"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Sql::V1beta4::SqlInstancesService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Sql::V1beta4::SqlInstancesListRequest.new
            #
            #   # Call the list method.
            #   result = client.list request
            #
            #   # The returned object is of type Google::Cloud::Sql::V1beta4::InstancesListResponse.
            #   p result
            #
            def list request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Sql::V1beta4::SqlInstancesListRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Sql::V1beta4::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.project
                header_params["project"] = request.project
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.list.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @sql_instances_service_stub.call_rpc :list, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Lists all of the trusted Certificate Authorities (CAs) for the specified
            # instance. There can be up to three CAs listed: the CA that was used to sign
            # the certificate that is currently in use, a CA that has been added but not
            # yet used to sign a certificate, and a CA used to sign a certificate that
            # has previously rotated out.
            #
            # @overload list_server_cas(request, options = nil)
            #   Pass arguments to `list_server_cas` via a request object, either of type
            #   {::Google::Cloud::Sql::V1beta4::SqlInstancesListServerCasRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Sql::V1beta4::SqlInstancesListServerCasRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_server_cas(instance: nil, project: nil)
            #   Pass arguments to `list_server_cas` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param instance [::String]
            #     Cloud SQL instance ID. This does not include the project ID.
            #   @param project [::String]
            #     Project ID of the project that contains the instance.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Sql::V1beta4::InstancesListServerCasResponse]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Sql::V1beta4::InstancesListServerCasResponse]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/sql/v1beta4"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Sql::V1beta4::SqlInstancesService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Sql::V1beta4::SqlInstancesListServerCasRequest.new
            #
            #   # Call the list_server_cas method.
            #   result = client.list_server_cas request
            #
            #   # The returned object is of type Google::Cloud::Sql::V1beta4::InstancesListServerCasResponse.
            #   p result
            #
            def list_server_cas request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Sql::V1beta4::SqlInstancesListServerCasRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_server_cas.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Sql::V1beta4::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.project
                header_params["project"] = request.project
              end
              if request.instance
                header_params["instance"] = request.instance
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.list_server_cas.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_server_cas.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @sql_instances_service_stub.call_rpc :list_server_cas, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Updates settings of a Cloud SQL instance.
            # This method supports patch semantics.
            #
            # @overload patch(request, options = nil)
            #   Pass arguments to `patch` via a request object, either of type
            #   {::Google::Cloud::Sql::V1beta4::SqlInstancesPatchRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Sql::V1beta4::SqlInstancesPatchRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload patch(instance: nil, project: nil, body: nil)
            #   Pass arguments to `patch` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param instance [::String]
            #     Cloud SQL instance ID. This does not include the project ID.
            #   @param project [::String]
            #     Project ID of the project that contains the instance.
            #   @param body [::Google::Cloud::Sql::V1beta4::DatabaseInstance, ::Hash]
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Sql::V1beta4::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Sql::V1beta4::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/sql/v1beta4"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Sql::V1beta4::SqlInstancesService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Sql::V1beta4::SqlInstancesPatchRequest.new
            #
            #   # Call the patch method.
            #   result = client.patch request
            #
            #   # The returned object is of type Google::Cloud::Sql::V1beta4::Operation.
            #   p result
            #
            def patch request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Sql::V1beta4::SqlInstancesPatchRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.patch.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Sql::V1beta4::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.project
                header_params["project"] = request.project
              end
              if request.instance
                header_params["instance"] = request.instance
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.patch.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.patch.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @sql_instances_service_stub.call_rpc :patch, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Promotes the read replica instance to be a stand-alone Cloud SQL instance.
            # Using this operation might cause your instance to restart.
            #
            # @overload promote_replica(request, options = nil)
            #   Pass arguments to `promote_replica` via a request object, either of type
            #   {::Google::Cloud::Sql::V1beta4::SqlInstancesPromoteReplicaRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Sql::V1beta4::SqlInstancesPromoteReplicaRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload promote_replica(instance: nil, project: nil)
            #   Pass arguments to `promote_replica` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param instance [::String]
            #     Cloud SQL read replica instance name.
            #   @param project [::String]
            #     ID of the project that contains the read replica.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Sql::V1beta4::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Sql::V1beta4::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/sql/v1beta4"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Sql::V1beta4::SqlInstancesService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Sql::V1beta4::SqlInstancesPromoteReplicaRequest.new
            #
            #   # Call the promote_replica method.
            #   result = client.promote_replica request
            #
            #   # The returned object is of type Google::Cloud::Sql::V1beta4::Operation.
            #   p result
            #
            def promote_replica request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Sql::V1beta4::SqlInstancesPromoteReplicaRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.promote_replica.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Sql::V1beta4::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.project
                header_params["project"] = request.project
              end
              if request.instance
                header_params["instance"] = request.instance
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.promote_replica.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.promote_replica.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @sql_instances_service_stub.call_rpc :promote_replica, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Deletes all client certificates and generates a new server SSL certificate
            # for the instance.
            #
            # @overload reset_ssl_config(request, options = nil)
            #   Pass arguments to `reset_ssl_config` via a request object, either of type
            #   {::Google::Cloud::Sql::V1beta4::SqlInstancesResetSslConfigRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Sql::V1beta4::SqlInstancesResetSslConfigRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload reset_ssl_config(instance: nil, project: nil)
            #   Pass arguments to `reset_ssl_config` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param instance [::String]
            #     Cloud SQL instance ID. This does not include the project ID.
            #   @param project [::String]
            #     Project ID of the project that contains the instance.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Sql::V1beta4::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Sql::V1beta4::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/sql/v1beta4"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Sql::V1beta4::SqlInstancesService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Sql::V1beta4::SqlInstancesResetSslConfigRequest.new
            #
            #   # Call the reset_ssl_config method.
            #   result = client.reset_ssl_config request
            #
            #   # The returned object is of type Google::Cloud::Sql::V1beta4::Operation.
            #   p result
            #
            def reset_ssl_config request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Sql::V1beta4::SqlInstancesResetSslConfigRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.reset_ssl_config.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Sql::V1beta4::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.project
                header_params["project"] = request.project
              end
              if request.instance
                header_params["instance"] = request.instance
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.reset_ssl_config.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.reset_ssl_config.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @sql_instances_service_stub.call_rpc :reset_ssl_config, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Restarts a Cloud SQL instance.
            #
            # @overload restart(request, options = nil)
            #   Pass arguments to `restart` via a request object, either of type
            #   {::Google::Cloud::Sql::V1beta4::SqlInstancesRestartRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Sql::V1beta4::SqlInstancesRestartRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload restart(instance: nil, project: nil)
            #   Pass arguments to `restart` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param instance [::String]
            #     Cloud SQL instance ID. This does not include the project ID.
            #   @param project [::String]
            #     Project ID of the project that contains the instance to be restarted.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Sql::V1beta4::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Sql::V1beta4::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/sql/v1beta4"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Sql::V1beta4::SqlInstancesService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Sql::V1beta4::SqlInstancesRestartRequest.new
            #
            #   # Call the restart method.
            #   result = client.restart request
            #
            #   # The returned object is of type Google::Cloud::Sql::V1beta4::Operation.
            #   p result
            #
            def restart request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Sql::V1beta4::SqlInstancesRestartRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.restart.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Sql::V1beta4::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.project
                header_params["project"] = request.project
              end
              if request.instance
                header_params["instance"] = request.instance
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.restart.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.restart.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @sql_instances_service_stub.call_rpc :restart, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Restores a backup of a Cloud SQL instance. Using this operation might cause
            # your instance to restart.
            #
            # @overload restore_backup(request, options = nil)
            #   Pass arguments to `restore_backup` via a request object, either of type
            #   {::Google::Cloud::Sql::V1beta4::SqlInstancesRestoreBackupRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Sql::V1beta4::SqlInstancesRestoreBackupRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload restore_backup(instance: nil, project: nil, body: nil)
            #   Pass arguments to `restore_backup` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param instance [::String]
            #     Cloud SQL instance ID. This does not include the project ID.
            #   @param project [::String]
            #     Project ID of the project that contains the instance.
            #   @param body [::Google::Cloud::Sql::V1beta4::InstancesRestoreBackupRequest, ::Hash]
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Sql::V1beta4::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Sql::V1beta4::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/sql/v1beta4"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Sql::V1beta4::SqlInstancesService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Sql::V1beta4::SqlInstancesRestoreBackupRequest.new
            #
            #   # Call the restore_backup method.
            #   result = client.restore_backup request
            #
            #   # The returned object is of type Google::Cloud::Sql::V1beta4::Operation.
            #   p result
            #
            def restore_backup request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Sql::V1beta4::SqlInstancesRestoreBackupRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.restore_backup.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Sql::V1beta4::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.project
                header_params["project"] = request.project
              end
              if request.instance
                header_params["instance"] = request.instance
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.restore_backup.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.restore_backup.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @sql_instances_service_stub.call_rpc :restore_backup, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Rotates the server certificate to one signed by the Certificate Authority
            # (CA) version previously added with the addServerCA method.
            #
            # @overload rotate_server_ca(request, options = nil)
            #   Pass arguments to `rotate_server_ca` via a request object, either of type
            #   {::Google::Cloud::Sql::V1beta4::SqlInstancesRotateServerCaRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Sql::V1beta4::SqlInstancesRotateServerCaRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload rotate_server_ca(instance: nil, project: nil, body: nil)
            #   Pass arguments to `rotate_server_ca` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param instance [::String]
            #     Cloud SQL instance ID. This does not include the project ID.
            #   @param project [::String]
            #     Project ID of the project that contains the instance.
            #   @param body [::Google::Cloud::Sql::V1beta4::InstancesRotateServerCaRequest, ::Hash]
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Sql::V1beta4::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Sql::V1beta4::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/sql/v1beta4"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Sql::V1beta4::SqlInstancesService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Sql::V1beta4::SqlInstancesRotateServerCaRequest.new
            #
            #   # Call the rotate_server_ca method.
            #   result = client.rotate_server_ca request
            #
            #   # The returned object is of type Google::Cloud::Sql::V1beta4::Operation.
            #   p result
            #
            def rotate_server_ca request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Sql::V1beta4::SqlInstancesRotateServerCaRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.rotate_server_ca.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Sql::V1beta4::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.project
                header_params["project"] = request.project
              end
              if request.instance
                header_params["instance"] = request.instance
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.rotate_server_ca.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.rotate_server_ca.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @sql_instances_service_stub.call_rpc :rotate_server_ca, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Starts the replication in the read replica instance.
            #
            # @overload start_replica(request, options = nil)
            #   Pass arguments to `start_replica` via a request object, either of type
            #   {::Google::Cloud::Sql::V1beta4::SqlInstancesStartReplicaRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Sql::V1beta4::SqlInstancesStartReplicaRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload start_replica(instance: nil, project: nil)
            #   Pass arguments to `start_replica` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param instance [::String]
            #     Cloud SQL read replica instance name.
            #   @param project [::String]
            #     ID of the project that contains the read replica.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Sql::V1beta4::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Sql::V1beta4::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/sql/v1beta4"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Sql::V1beta4::SqlInstancesService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Sql::V1beta4::SqlInstancesStartReplicaRequest.new
            #
            #   # Call the start_replica method.
            #   result = client.start_replica request
            #
            #   # The returned object is of type Google::Cloud::Sql::V1beta4::Operation.
            #   p result
            #
            def start_replica request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Sql::V1beta4::SqlInstancesStartReplicaRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.start_replica.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Sql::V1beta4::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.project
                header_params["project"] = request.project
              end
              if request.instance
                header_params["instance"] = request.instance
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.start_replica.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.start_replica.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @sql_instances_service_stub.call_rpc :start_replica, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Stops the replication in the read replica instance.
            #
            # @overload stop_replica(request, options = nil)
            #   Pass arguments to `stop_replica` via a request object, either of type
            #   {::Google::Cloud::Sql::V1beta4::SqlInstancesStopReplicaRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Sql::V1beta4::SqlInstancesStopReplicaRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload stop_replica(instance: nil, project: nil)
            #   Pass arguments to `stop_replica` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param instance [::String]
            #     Cloud SQL read replica instance name.
            #   @param project [::String]
            #     ID of the project that contains the read replica.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Sql::V1beta4::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Sql::V1beta4::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/sql/v1beta4"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Sql::V1beta4::SqlInstancesService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Sql::V1beta4::SqlInstancesStopReplicaRequest.new
            #
            #   # Call the stop_replica method.
            #   result = client.stop_replica request
            #
            #   # The returned object is of type Google::Cloud::Sql::V1beta4::Operation.
            #   p result
            #
            def stop_replica request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Sql::V1beta4::SqlInstancesStopReplicaRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.stop_replica.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Sql::V1beta4::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.project
                header_params["project"] = request.project
              end
              if request.instance
                header_params["instance"] = request.instance
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.stop_replica.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.stop_replica.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @sql_instances_service_stub.call_rpc :stop_replica, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Truncate MySQL general and slow query log tables
            # MySQL only.
            #
            # @overload truncate_log(request, options = nil)
            #   Pass arguments to `truncate_log` via a request object, either of type
            #   {::Google::Cloud::Sql::V1beta4::SqlInstancesTruncateLogRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Sql::V1beta4::SqlInstancesTruncateLogRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload truncate_log(instance: nil, project: nil, body: nil)
            #   Pass arguments to `truncate_log` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param instance [::String]
            #     Cloud SQL instance ID. This does not include the project ID.
            #   @param project [::String]
            #     Project ID of the Cloud SQL project.
            #   @param body [::Google::Cloud::Sql::V1beta4::InstancesTruncateLogRequest, ::Hash]
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Sql::V1beta4::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Sql::V1beta4::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/sql/v1beta4"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Sql::V1beta4::SqlInstancesService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Sql::V1beta4::SqlInstancesTruncateLogRequest.new
            #
            #   # Call the truncate_log method.
            #   result = client.truncate_log request
            #
            #   # The returned object is of type Google::Cloud::Sql::V1beta4::Operation.
            #   p result
            #
            def truncate_log request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Sql::V1beta4::SqlInstancesTruncateLogRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.truncate_log.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Sql::V1beta4::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.project
                header_params["project"] = request.project
              end
              if request.instance
                header_params["instance"] = request.instance
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.truncate_log.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.truncate_log.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @sql_instances_service_stub.call_rpc :truncate_log, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Updates settings of a Cloud SQL instance. Using this operation might cause
            # your instance to restart.
            #
            # @overload update(request, options = nil)
            #   Pass arguments to `update` via a request object, either of type
            #   {::Google::Cloud::Sql::V1beta4::SqlInstancesUpdateRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Sql::V1beta4::SqlInstancesUpdateRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload update(instance: nil, project: nil, body: nil)
            #   Pass arguments to `update` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param instance [::String]
            #     Cloud SQL instance ID. This does not include the project ID.
            #   @param project [::String]
            #     Project ID of the project that contains the instance.
            #   @param body [::Google::Cloud::Sql::V1beta4::DatabaseInstance, ::Hash]
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Sql::V1beta4::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Sql::V1beta4::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/sql/v1beta4"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Sql::V1beta4::SqlInstancesService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Sql::V1beta4::SqlInstancesUpdateRequest.new
            #
            #   # Call the update method.
            #   result = client.update request
            #
            #   # The returned object is of type Google::Cloud::Sql::V1beta4::Operation.
            #   p result
            #
            def update request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Sql::V1beta4::SqlInstancesUpdateRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.update.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Sql::V1beta4::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.project
                header_params["project"] = request.project
              end
              if request.instance
                header_params["instance"] = request.instance
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.update.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.update.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @sql_instances_service_stub.call_rpc :update, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Generates a short-lived X509 certificate containing the provided public key
            # and signed by a private key specific to the target instance. Users may use
            # the certificate to authenticate as themselves when connecting to the
            # database.
            #
            # @overload create_ephemeral(request, options = nil)
            #   Pass arguments to `create_ephemeral` via a request object, either of type
            #   {::Google::Cloud::Sql::V1beta4::SqlInstancesCreateEphemeralCertRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Sql::V1beta4::SqlInstancesCreateEphemeralCertRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload create_ephemeral(instance: nil, project: nil, body: nil)
            #   Pass arguments to `create_ephemeral` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param instance [::String]
            #     Cloud SQL instance ID. This does not include the project ID.
            #   @param project [::String]
            #     Project ID of the Cloud SQL project.
            #   @param body [::Google::Cloud::Sql::V1beta4::SslCertsCreateEphemeralRequest, ::Hash]
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Sql::V1beta4::SslCert]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Sql::V1beta4::SslCert]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/sql/v1beta4"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Sql::V1beta4::SqlInstancesService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Sql::V1beta4::SqlInstancesCreateEphemeralCertRequest.new
            #
            #   # Call the create_ephemeral method.
            #   result = client.create_ephemeral request
            #
            #   # The returned object is of type Google::Cloud::Sql::V1beta4::SslCert.
            #   p result
            #
            def create_ephemeral request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Sql::V1beta4::SqlInstancesCreateEphemeralCertRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.create_ephemeral.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Sql::V1beta4::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.project
                header_params["project"] = request.project
              end
              if request.instance
                header_params["instance"] = request.instance
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.create_ephemeral.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.create_ephemeral.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @sql_instances_service_stub.call_rpc :create_ephemeral, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Reschedules the maintenance on the given instance.
            #
            # @overload reschedule_maintenance(request, options = nil)
            #   Pass arguments to `reschedule_maintenance` via a request object, either of type
            #   {::Google::Cloud::Sql::V1beta4::SqlInstancesRescheduleMaintenanceRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Sql::V1beta4::SqlInstancesRescheduleMaintenanceRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload reschedule_maintenance(instance: nil, project: nil, body: nil)
            #   Pass arguments to `reschedule_maintenance` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param instance [::String]
            #     Cloud SQL instance ID. This does not include the project ID.
            #   @param project [::String]
            #     ID of the project that contains the instance.
            #   @param body [::Google::Cloud::Sql::V1beta4::SqlInstancesRescheduleMaintenanceRequestBody, ::Hash]
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Sql::V1beta4::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Sql::V1beta4::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/sql/v1beta4"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Sql::V1beta4::SqlInstancesService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Sql::V1beta4::SqlInstancesRescheduleMaintenanceRequest.new
            #
            #   # Call the reschedule_maintenance method.
            #   result = client.reschedule_maintenance request
            #
            #   # The returned object is of type Google::Cloud::Sql::V1beta4::Operation.
            #   p result
            #
            def reschedule_maintenance request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Sql::V1beta4::SqlInstancesRescheduleMaintenanceRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.reschedule_maintenance.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Sql::V1beta4::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.project
                header_params["project"] = request.project
              end
              if request.instance
                header_params["instance"] = request.instance
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.reschedule_maintenance.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.reschedule_maintenance.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @sql_instances_service_stub.call_rpc :reschedule_maintenance, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Verify External primary instance external sync settings.
            #
            # @overload verify_external_sync_settings(request, options = nil)
            #   Pass arguments to `verify_external_sync_settings` via a request object, either of type
            #   {::Google::Cloud::Sql::V1beta4::SqlInstancesVerifyExternalSyncSettingsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Sql::V1beta4::SqlInstancesVerifyExternalSyncSettingsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload verify_external_sync_settings(instance: nil, project: nil, verify_connection_only: nil, sync_mode: nil, verify_replication_only: nil, mysql_sync_config: nil)
            #   Pass arguments to `verify_external_sync_settings` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param instance [::String]
            #     Cloud SQL instance ID. This does not include the project ID.
            #   @param project [::String]
            #     Project ID of the project that contains the instance.
            #   @param verify_connection_only [::Boolean]
            #     Flag to enable verifying connection only
            #   @param sync_mode [::Google::Cloud::Sql::V1beta4::SqlInstancesVerifyExternalSyncSettingsRequest::ExternalSyncMode]
            #     External sync mode
            #   @param verify_replication_only [::Boolean]
            #     Optional. Flag to verify settings required by replication setup only
            #   @param mysql_sync_config [::Google::Cloud::Sql::V1beta4::MySqlSyncConfig, ::Hash]
            #     Optional. MySQL-specific settings for start external sync.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Sql::V1beta4::SqlInstancesVerifyExternalSyncSettingsResponse]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Sql::V1beta4::SqlInstancesVerifyExternalSyncSettingsResponse]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/sql/v1beta4"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Sql::V1beta4::SqlInstancesService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Sql::V1beta4::SqlInstancesVerifyExternalSyncSettingsRequest.new
            #
            #   # Call the verify_external_sync_settings method.
            #   result = client.verify_external_sync_settings request
            #
            #   # The returned object is of type Google::Cloud::Sql::V1beta4::SqlInstancesVerifyExternalSyncSettingsResponse.
            #   p result
            #
            def verify_external_sync_settings request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Sql::V1beta4::SqlInstancesVerifyExternalSyncSettingsRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.verify_external_sync_settings.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Sql::V1beta4::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.project
                header_params["project"] = request.project
              end
              if request.instance
                header_params["instance"] = request.instance
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.verify_external_sync_settings.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.verify_external_sync_settings.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @sql_instances_service_stub.call_rpc :verify_external_sync_settings, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Start External primary instance migration.
            #
            # @overload start_external_sync(request, options = nil)
            #   Pass arguments to `start_external_sync` via a request object, either of type
            #   {::Google::Cloud::Sql::V1beta4::SqlInstancesStartExternalSyncRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Sql::V1beta4::SqlInstancesStartExternalSyncRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload start_external_sync(instance: nil, project: nil, sync_mode: nil, skip_verification: nil, mysql_sync_config: nil)
            #   Pass arguments to `start_external_sync` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param instance [::String]
            #     Cloud SQL instance ID. This does not include the project ID.
            #   @param project [::String]
            #     ID of the project that contains the instance.
            #   @param sync_mode [::Google::Cloud::Sql::V1beta4::SqlInstancesVerifyExternalSyncSettingsRequest::ExternalSyncMode]
            #     External sync mode.
            #   @param skip_verification [::Boolean]
            #     Whether to skip the verification step (VESS).
            #   @param mysql_sync_config [::Google::Cloud::Sql::V1beta4::MySqlSyncConfig, ::Hash]
            #     MySQL-specific settings for start external sync.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Sql::V1beta4::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Sql::V1beta4::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/sql/v1beta4"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Sql::V1beta4::SqlInstancesService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Sql::V1beta4::SqlInstancesStartExternalSyncRequest.new
            #
            #   # Call the start_external_sync method.
            #   result = client.start_external_sync request
            #
            #   # The returned object is of type Google::Cloud::Sql::V1beta4::Operation.
            #   p result
            #
            def start_external_sync request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Sql::V1beta4::SqlInstancesStartExternalSyncRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.start_external_sync.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Sql::V1beta4::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.project
                header_params["project"] = request.project
              end
              if request.instance
                header_params["instance"] = request.instance
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.start_external_sync.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.start_external_sync.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @sql_instances_service_stub.call_rpc :start_external_sync, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Configuration class for the SqlInstancesService API.
            #
            # This class represents the configuration for SqlInstancesService,
            # providing control over timeouts, retry behavior, logging, transport
            # parameters, and other low-level controls. Certain parameters can also be
            # applied individually to specific RPCs. See
            # {::Google::Cloud::Sql::V1beta4::SqlInstancesService::Client::Configuration::Rpcs}
            # for a list of RPCs that can be configured independently.
            #
            # Configuration can be applied globally to all clients, or to a single client
            # on construction.
            #
            # @example
            #
            #   # Modify the global config, setting the timeout for
            #   # add_server_ca to 20 seconds,
            #   # and all remaining timeouts to 10 seconds.
            #   ::Google::Cloud::Sql::V1beta4::SqlInstancesService::Client.configure do |config|
            #     config.timeout = 10.0
            #     config.rpcs.add_server_ca.timeout = 20.0
            #   end
            #
            #   # Apply the above configuration only to a new client.
            #   client = ::Google::Cloud::Sql::V1beta4::SqlInstancesService::Client.new do |config|
            #     config.timeout = 10.0
            #     config.rpcs.add_server_ca.timeout = 20.0
            #   end
            #
            # @!attribute [rw] endpoint
            #   The hostname or hostname:port of the service endpoint.
            #   Defaults to `"sqladmin.googleapis.com"`.
            #   @return [::String]
            # @!attribute [rw] credentials
            #   Credentials to send with calls. You may provide any of the following types:
            #    *  (`String`) The path to a service account key file in JSON format
            #    *  (`Hash`) A service account key as a Hash
            #    *  (`Google::Auth::Credentials`) A googleauth credentials object
            #       (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
            #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
            #       (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
            #    *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
            #    *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
            #    *  (`nil`) indicating no credentials
            #   @return [::Object]
            # @!attribute [rw] scope
            #   The OAuth scopes
            #   @return [::Array<::String>]
            # @!attribute [rw] lib_name
            #   The library name as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] lib_version
            #   The library version as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] channel_args
            #   Extra parameters passed to the gRPC channel. Note: this is ignored if a
            #   `GRPC::Core::Channel` object is provided as the credential.
            #   @return [::Hash]
            # @!attribute [rw] interceptors
            #   An array of interceptors that are run before calls are executed.
            #   @return [::Array<::GRPC::ClientInterceptor>]
            # @!attribute [rw] timeout
            #   The call timeout in seconds.
            #   @return [::Numeric]
            # @!attribute [rw] metadata
            #   Additional gRPC headers to be sent with the call.
            #   @return [::Hash{::Symbol=>::String}]
            # @!attribute [rw] retry_policy
            #   The retry policy. The value is a hash with the following keys:
            #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
            #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
            #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
            #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
            #       trigger a retry.
            #   @return [::Hash]
            # @!attribute [rw] quota_project
            #   A separate project against which to charge quota.
            #   @return [::String]
            #
            class Configuration
              extend ::Gapic::Config

              config_attr :endpoint,      "sqladmin.googleapis.com", ::String
              config_attr :credentials,   nil do |value|
                allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
                allowed += [::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials] if defined? ::GRPC
                allowed.any? { |klass| klass === value }
              end
              config_attr :scope,         nil, ::String, ::Array, nil
              config_attr :lib_name,      nil, ::String, nil
              config_attr :lib_version,   nil, ::String, nil
              config_attr(:channel_args,  { "grpc.service_config_disable_resolution" => 1 }, ::Hash, nil)
              config_attr :interceptors,  nil, ::Array, nil
              config_attr :timeout,       nil, ::Numeric, nil
              config_attr :metadata,      nil, ::Hash, nil
              config_attr :retry_policy,  nil, ::Hash, ::Proc, nil
              config_attr :quota_project, nil, ::String, nil

              # @private
              def initialize parent_config = nil
                @parent_config = parent_config unless parent_config.nil?

                yield self if block_given?
              end

              ##
              # Configurations for individual RPCs
              # @return [Rpcs]
              #
              def rpcs
                @rpcs ||= begin
                  parent_rpcs = nil
                  parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config.respond_to?(:rpcs)
                  Rpcs.new parent_rpcs
                end
              end

              ##
              # Configuration RPC class for the SqlInstancesService API.
              #
              # Includes fields providing the configuration for each RPC in this service.
              # Each configuration object is of type `Gapic::Config::Method` and includes
              # the following configuration fields:
              #
              #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
              #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
              #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
              #     include the following keys:
              #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
              #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
              #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
              #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
              #         trigger a retry.
              #
              class Rpcs
                ##
                # RPC-specific configuration for `add_server_ca`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :add_server_ca
                ##
                # RPC-specific configuration for `call_clone`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :call_clone
                ##
                # RPC-specific configuration for `delete`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :delete
                ##
                # RPC-specific configuration for `demote_master`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :demote_master
                ##
                # RPC-specific configuration for `export`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :export
                ##
                # RPC-specific configuration for `failover`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :failover
                ##
                # RPC-specific configuration for `get`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get
                ##
                # RPC-specific configuration for `import`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :import
                ##
                # RPC-specific configuration for `insert`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :insert
                ##
                # RPC-specific configuration for `list`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list
                ##
                # RPC-specific configuration for `list_server_cas`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_server_cas
                ##
                # RPC-specific configuration for `patch`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :patch
                ##
                # RPC-specific configuration for `promote_replica`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :promote_replica
                ##
                # RPC-specific configuration for `reset_ssl_config`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :reset_ssl_config
                ##
                # RPC-specific configuration for `restart`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :restart
                ##
                # RPC-specific configuration for `restore_backup`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :restore_backup
                ##
                # RPC-specific configuration for `rotate_server_ca`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :rotate_server_ca
                ##
                # RPC-specific configuration for `start_replica`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :start_replica
                ##
                # RPC-specific configuration for `stop_replica`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :stop_replica
                ##
                # RPC-specific configuration for `truncate_log`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :truncate_log
                ##
                # RPC-specific configuration for `update`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :update
                ##
                # RPC-specific configuration for `create_ephemeral`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :create_ephemeral
                ##
                # RPC-specific configuration for `reschedule_maintenance`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :reschedule_maintenance
                ##
                # RPC-specific configuration for `verify_external_sync_settings`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :verify_external_sync_settings
                ##
                # RPC-specific configuration for `start_external_sync`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :start_external_sync

                # @private
                def initialize parent_rpcs = nil
                  add_server_ca_config = parent_rpcs.add_server_ca if parent_rpcs.respond_to? :add_server_ca
                  @add_server_ca = ::Gapic::Config::Method.new add_server_ca_config
                  call_clone_config = parent_rpcs.call_clone if parent_rpcs.respond_to? :call_clone
                  @call_clone = ::Gapic::Config::Method.new call_clone_config
                  delete_config = parent_rpcs.delete if parent_rpcs.respond_to? :delete
                  @delete = ::Gapic::Config::Method.new delete_config
                  demote_master_config = parent_rpcs.demote_master if parent_rpcs.respond_to? :demote_master
                  @demote_master = ::Gapic::Config::Method.new demote_master_config
                  export_config = parent_rpcs.export if parent_rpcs.respond_to? :export
                  @export = ::Gapic::Config::Method.new export_config
                  failover_config = parent_rpcs.failover if parent_rpcs.respond_to? :failover
                  @failover = ::Gapic::Config::Method.new failover_config
                  get_config = parent_rpcs.get if parent_rpcs.respond_to? :get
                  @get = ::Gapic::Config::Method.new get_config
                  import_config = parent_rpcs.import if parent_rpcs.respond_to? :import
                  @import = ::Gapic::Config::Method.new import_config
                  insert_config = parent_rpcs.insert if parent_rpcs.respond_to? :insert
                  @insert = ::Gapic::Config::Method.new insert_config
                  list_config = parent_rpcs.list if parent_rpcs.respond_to? :list
                  @list = ::Gapic::Config::Method.new list_config
                  list_server_cas_config = parent_rpcs.list_server_cas if parent_rpcs.respond_to? :list_server_cas
                  @list_server_cas = ::Gapic::Config::Method.new list_server_cas_config
                  patch_config = parent_rpcs.patch if parent_rpcs.respond_to? :patch
                  @patch = ::Gapic::Config::Method.new patch_config
                  promote_replica_config = parent_rpcs.promote_replica if parent_rpcs.respond_to? :promote_replica
                  @promote_replica = ::Gapic::Config::Method.new promote_replica_config
                  reset_ssl_config_config = parent_rpcs.reset_ssl_config if parent_rpcs.respond_to? :reset_ssl_config
                  @reset_ssl_config = ::Gapic::Config::Method.new reset_ssl_config_config
                  restart_config = parent_rpcs.restart if parent_rpcs.respond_to? :restart
                  @restart = ::Gapic::Config::Method.new restart_config
                  restore_backup_config = parent_rpcs.restore_backup if parent_rpcs.respond_to? :restore_backup
                  @restore_backup = ::Gapic::Config::Method.new restore_backup_config
                  rotate_server_ca_config = parent_rpcs.rotate_server_ca if parent_rpcs.respond_to? :rotate_server_ca
                  @rotate_server_ca = ::Gapic::Config::Method.new rotate_server_ca_config
                  start_replica_config = parent_rpcs.start_replica if parent_rpcs.respond_to? :start_replica
                  @start_replica = ::Gapic::Config::Method.new start_replica_config
                  stop_replica_config = parent_rpcs.stop_replica if parent_rpcs.respond_to? :stop_replica
                  @stop_replica = ::Gapic::Config::Method.new stop_replica_config
                  truncate_log_config = parent_rpcs.truncate_log if parent_rpcs.respond_to? :truncate_log
                  @truncate_log = ::Gapic::Config::Method.new truncate_log_config
                  update_config = parent_rpcs.update if parent_rpcs.respond_to? :update
                  @update = ::Gapic::Config::Method.new update_config
                  create_ephemeral_config = parent_rpcs.create_ephemeral if parent_rpcs.respond_to? :create_ephemeral
                  @create_ephemeral = ::Gapic::Config::Method.new create_ephemeral_config
                  reschedule_maintenance_config = parent_rpcs.reschedule_maintenance if parent_rpcs.respond_to? :reschedule_maintenance
                  @reschedule_maintenance = ::Gapic::Config::Method.new reschedule_maintenance_config
                  verify_external_sync_settings_config = parent_rpcs.verify_external_sync_settings if parent_rpcs.respond_to? :verify_external_sync_settings
                  @verify_external_sync_settings = ::Gapic::Config::Method.new verify_external_sync_settings_config
                  start_external_sync_config = parent_rpcs.start_external_sync if parent_rpcs.respond_to? :start_external_sync
                  @start_external_sync = ::Gapic::Config::Method.new start_external_sync_config

                  yield self if block_given?
                end
              end
            end
          end
        end
      end
    end
  end
end
