# frozen_string_literal: true

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!


module Google
  module Cloud
    module Sql
      module V1
        # Flags list request.
        # @!attribute [rw] database_version
        #   @return [::String]
        #     Database type and version you want to retrieve flags for. By default, this
        #     method returns flags for all database types and versions.
        class SqlFlagsListRequest
          include ::Google::Protobuf::MessageExts
          extend ::Google::Protobuf::MessageExts::ClassMethods
        end

        # Flags list response.
        # @!attribute [rw] kind
        #   @return [::String]
        #     This is always **sql#flagsList**.
        # @!attribute [rw] items
        #   @return [::Array<::Google::Cloud::Sql::V1::Flag>]
        #     List of flags.
        class FlagsListResponse
          include ::Google::Protobuf::MessageExts
          extend ::Google::Protobuf::MessageExts::ClassMethods
        end

        # A flag resource.
        # @!attribute [rw] name
        #   @return [::String]
        #     This is the name of the flag. Flag names always use underscores, not
        #     hyphens, for example: **max_allowed_packet**
        # @!attribute [rw] type
        #   @return [::Google::Cloud::Sql::V1::SqlFlagType]
        #     The type of the flag. Flags are typed to being **BOOLEAN**, **STRING**,
        #     **INTEGER** or **NONE**. **NONE** is used for flags which do not take a
        #     value, such as **skip_grant_tables**.
        # @!attribute [rw] applies_to
        #   @return [::Array<::Google::Cloud::Sql::V1::SqlDatabaseVersion>]
        #     The database version this flag applies to. Can be **MYSQL_8_0**,
        #     **MYSQL_5_6**, or **MYSQL_5_7**.
        # @!attribute [rw] allowed_string_values
        #   @return [::Array<::String>]
        #     For **STRING** flags, a list of strings that the value can be set to.
        # @!attribute [rw] min_value
        #   @return [::Google::Protobuf::Int64Value]
        #     For **INTEGER** flags, the minimum allowed value.
        # @!attribute [rw] max_value
        #   @return [::Google::Protobuf::Int64Value]
        #     For **INTEGER** flags, the maximum allowed value.
        # @!attribute [rw] requires_restart
        #   @return [::Google::Protobuf::BoolValue]
        #     Indicates whether changing this flag will trigger a database restart. Only
        #     applicable to Second Generation instances.
        # @!attribute [rw] kind
        #   @return [::String]
        #     This is always **sql#flag**.
        # @!attribute [rw] in_beta
        #   @return [::Google::Protobuf::BoolValue]
        #     Whether or not the flag is considered in beta.
        # @!attribute [rw] allowed_int_values
        #   @return [::Array<::Integer>]
        #     Use this field if only certain integers are accepted. Can be combined
        #     with min_value and max_value to add additional values.
        class Flag
          include ::Google::Protobuf::MessageExts
          extend ::Google::Protobuf::MessageExts::ClassMethods
        end

        module SqlFlagType
          # This is an unknown flag type.
          SQL_FLAG_TYPE_UNSPECIFIED = 0

          # Boolean type flag.
          BOOLEAN = 1

          # String type flag.
          STRING = 2

          # Integer type flag.
          INTEGER = 3

          # Flag type used for a server startup option.
          NONE = 4

          # Type introduced specially for MySQL TimeZone offset. Accept a string value
          # with the format [-12:59, 13:00].
          MYSQL_TIMEZONE_OFFSET = 5

          # Float type flag.
          FLOAT = 6

          # Comma-separated list of the strings in a SqlFlagType enum.
          REPEATED_STRING = 7
        end
      end
    end
  end
end
