# frozen_string_literal: true

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/cloud/errors"
require "google/cloud/securitycenter/settings/v1beta1/securitycenter_settings_service_pb"

module Google
  module Cloud
    module SecurityCenter
      module Settings
        module V1beta1
          module SecurityCenterSettingsService
            ##
            # Client for the SecurityCenterSettingsService service.
            #
            # ## API Overview
            #
            # The SecurityCenterSettingsService is a sub-api of
            # `securitycenter.googleapis.com`. The service provides methods to manage
            # Security Center Settings, and Component Settings for GCP organizations,
            # folders, projects, and clusters.
            #
            class Client
              include Paths

              # @private
              attr_reader :security_center_settings_service_stub

              ##
              # Configure the SecurityCenterSettingsService Client class.
              #
              # See {::Google::Cloud::SecurityCenter::Settings::V1beta1::SecurityCenterSettingsService::Client::Configuration}
              # for a description of the configuration fields.
              #
              # @example
              #
              #   # Modify the configuration for all SecurityCenterSettingsService clients
              #   ::Google::Cloud::SecurityCenter::Settings::V1beta1::SecurityCenterSettingsService::Client.configure do |config|
              #     config.timeout = 10.0
              #   end
              #
              # @yield [config] Configure the Client client.
              # @yieldparam config [Client::Configuration]
              #
              # @return [Client::Configuration]
              #
              def self.configure
                @configure ||= begin
                  namespace = ["Google", "Cloud", "SecurityCenter", "Settings", "V1beta1"]
                  parent_config = while namespace.any?
                                    parent_name = namespace.join "::"
                                    parent_const = const_get parent_name
                                    break parent_const.configure if parent_const.respond_to? :configure
                                    namespace.pop
                                  end
                  default_config = Client::Configuration.new parent_config

                  default_config
                end
                yield @configure if block_given?
                @configure
              end

              ##
              # Configure the SecurityCenterSettingsService Client instance.
              #
              # The configuration is set to the derived mode, meaning that values can be changed,
              # but structural changes (adding new fields, etc.) are not allowed. Structural changes
              # should be made on {Client.configure}.
              #
              # See {::Google::Cloud::SecurityCenter::Settings::V1beta1::SecurityCenterSettingsService::Client::Configuration}
              # for a description of the configuration fields.
              #
              # @yield [config] Configure the Client client.
              # @yieldparam config [Client::Configuration]
              #
              # @return [Client::Configuration]
              #
              def configure
                yield @config if block_given?
                @config
              end

              ##
              # Create a new SecurityCenterSettingsService client object.
              #
              # @example
              #
              #   # Create a client using the default configuration
              #   client = ::Google::Cloud::SecurityCenter::Settings::V1beta1::SecurityCenterSettingsService::Client.new
              #
              #   # Create a client using a custom configuration
              #   client = ::Google::Cloud::SecurityCenter::Settings::V1beta1::SecurityCenterSettingsService::Client.new do |config|
              #     config.timeout = 10.0
              #   end
              #
              # @yield [config] Configure the SecurityCenterSettingsService client.
              # @yieldparam config [Client::Configuration]
              #
              def initialize
                # These require statements are intentionally placed here to initialize
                # the gRPC module only when it's required.
                # See https://github.com/googleapis/toolkit/issues/446
                require "gapic/grpc"
                require "google/cloud/securitycenter/settings/v1beta1/securitycenter_settings_service_services_pb"

                # Create the configuration object
                @config = Configuration.new Client.configure

                # Yield the configuration if needed
                yield @config if block_given?

                # Create credentials
                credentials = @config.credentials
                # Use self-signed JWT if the endpoint is unchanged from default,
                # but only if the default endpoint does not have a region prefix.
                enable_self_signed_jwt = @config.endpoint == Client.configure.endpoint &&
                                         !@config.endpoint.split(".").first.include?("-")
                credentials ||= Credentials.default scope: @config.scope,
                                                    enable_self_signed_jwt: enable_self_signed_jwt
                if credentials.is_a?(::String) || credentials.is_a?(::Hash)
                  credentials = Credentials.new credentials, scope: @config.scope
                end
                @quota_project_id = @config.quota_project
                @quota_project_id ||= credentials.quota_project_id if credentials.respond_to? :quota_project_id

                @security_center_settings_service_stub = ::Gapic::ServiceStub.new(
                  ::Google::Cloud::SecurityCenter::Settings::V1beta1::SecurityCenterSettingsService::Stub,
                  credentials:  credentials,
                  endpoint:     @config.endpoint,
                  channel_args: @config.channel_args,
                  interceptors: @config.interceptors
                )
              end

              # Service calls

              ##
              # Retrieves the organizations service account, if it exists, otherwise it
              # creates the organization service account. This API is idempotent and
              # will only create a service account once. On subsequent calls it will
              # return the previously created service account.  SHA, SCC and CTD Infra
              # Automation will use this SA.  This SA will not have any permissions when
              # created.  The UI will provision this via IAM or the user will using
              # their own internal process. This API only creates SAs on the organization.
              # Folders are not supported and projects will use per-project SAs associated
              # with APIs enabled on a project. This API will be called by the UX
              # onboarding workflow.
              #
              # @overload get_service_account(request, options = nil)
              #   Pass arguments to `get_service_account` via a request object, either of type
              #   {::Google::Cloud::SecurityCenter::Settings::V1beta1::GetServiceAccountRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::SecurityCenter::Settings::V1beta1::GetServiceAccountRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload get_service_account(name: nil)
              #   Pass arguments to `get_service_account` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param name [::String]
              #     Required. The relative resource name of the service account resource.
              #     Format:
              #      * `organizations/{organization}/serviceAccount`
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Google::Cloud::SecurityCenter::Settings::V1beta1::ServiceAccount]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Google::Cloud::SecurityCenter::Settings::V1beta1::ServiceAccount]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              def get_service_account request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::SecurityCenter::Settings::V1beta1::GetServiceAccountRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.get_service_account.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Settings::V1beta1::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.name
                  header_params["name"] = request.name
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.get_service_account.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.get_service_account.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @security_center_settings_service_stub.call_rpc :get_service_account, request, options: options do |response, operation|
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Gets the Settings.
              #
              # @overload get_settings(request, options = nil)
              #   Pass arguments to `get_settings` via a request object, either of type
              #   {::Google::Cloud::SecurityCenter::Settings::V1beta1::GetSettingsRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::SecurityCenter::Settings::V1beta1::GetSettingsRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload get_settings(name: nil)
              #   Pass arguments to `get_settings` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param name [::String]
              #     Required. The name of the settings to retrieve.
              #     Formats:
              #      * `organizations/{organization}/settings`
              #      * `folders/{folder}/settings`
              #      * `projects/{project}/settings`
              #      * `projects/{project}/locations/{location}/clusters/{cluster}/settings`
              #      * `projects/{project}/regions/{region}/clusters/{cluster}/settings`
              #      * `projects/{project}/zones/{zone}/clusters/{cluster}/settings`
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Google::Cloud::SecurityCenter::Settings::V1beta1::Settings]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Google::Cloud::SecurityCenter::Settings::V1beta1::Settings]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              def get_settings request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::SecurityCenter::Settings::V1beta1::GetSettingsRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.get_settings.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Settings::V1beta1::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.name
                  header_params["name"] = request.name
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.get_settings.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.get_settings.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @security_center_settings_service_stub.call_rpc :get_settings, request, options: options do |response, operation|
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Updates the Settings.
              #
              # @overload update_settings(request, options = nil)
              #   Pass arguments to `update_settings` via a request object, either of type
              #   {::Google::Cloud::SecurityCenter::Settings::V1beta1::UpdateSettingsRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::SecurityCenter::Settings::V1beta1::UpdateSettingsRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload update_settings(settings: nil, update_mask: nil)
              #   Pass arguments to `update_settings` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param settings [::Google::Cloud::SecurityCenter::Settings::V1beta1::Settings, ::Hash]
              #     Required. The settings to update.
              #
              #     The settings' `name` field is used to identify the settings to be updated.
              #     Formats:
              #      * `organizations/{organization}/settings`
              #      * `folders/{folder}/settings`
              #      * `projects/{project}/settings`
              #      * `projects/{project}/locations/{location}/clusters/{cluster}/settings`
              #      * `projects/{project}/regions/{region}/clusters/{cluster}/settings`
              #      * `projects/{project}/zones/{zone}/clusters/{cluster}/settings`
              #   @param update_mask [::Google::Protobuf::FieldMask, ::Hash]
              #     The list of fields to be updated on the settings.
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Google::Cloud::SecurityCenter::Settings::V1beta1::Settings]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Google::Cloud::SecurityCenter::Settings::V1beta1::Settings]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              def update_settings request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::SecurityCenter::Settings::V1beta1::UpdateSettingsRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.update_settings.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Settings::V1beta1::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.settings&.name
                  header_params["settings.name"] = request.settings.name
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.update_settings.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.update_settings.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @security_center_settings_service_stub.call_rpc :update_settings, request, options: options do |response, operation|
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Reset the organization, folder or project's settings and return
              # the settings of just that resource to the default.
              #
              # Settings are present at the organization, folder, project, and cluster
              # levels. Using Reset on a sub-organization level will remove that resource's
              # override and result in the parent's settings being used (eg: if Reset on a
              # cluster, project settings will be used).
              #
              # Using Reset on organization will remove the override that was set and
              # result in default settings being used.
              #
              # @overload reset_settings(request, options = nil)
              #   Pass arguments to `reset_settings` via a request object, either of type
              #   {::Google::Cloud::SecurityCenter::Settings::V1beta1::ResetSettingsRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::SecurityCenter::Settings::V1beta1::ResetSettingsRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload reset_settings(name: nil, etag: nil)
              #   Pass arguments to `reset_settings` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param name [::String]
              #     Required. The name of the settings to reset.
              #     Formats:
              #      * `organizations/{organization}/settings`
              #      * `folders/{folder}/settings`
              #      * `projects/{project}/settings`
              #      * `projects/{project}/locations/{location}/clusters/{cluster}/settings`
              #      * `projects/{project}/regions/{region}/clusters/{cluster}/settings`
              #      * `projects/{project}/zones/{zone}/clusters/{cluster}/settings`
              #   @param etag [::String]
              #     A fingerprint used for optimistic concurrency. If none is provided,
              #     then the existing settings will be blindly overwritten.
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Google::Protobuf::Empty]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Google::Protobuf::Empty]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              def reset_settings request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::SecurityCenter::Settings::V1beta1::ResetSettingsRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.reset_settings.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Settings::V1beta1::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.name
                  header_params["name"] = request.name
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.reset_settings.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.reset_settings.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @security_center_settings_service_stub.call_rpc :reset_settings, request, options: options do |response, operation|
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Gets a list of settings.
              #
              # @overload batch_get_settings(request, options = nil)
              #   Pass arguments to `batch_get_settings` via a request object, either of type
              #   {::Google::Cloud::SecurityCenter::Settings::V1beta1::BatchGetSettingsRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::SecurityCenter::Settings::V1beta1::BatchGetSettingsRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload batch_get_settings(parent: nil, names: nil)
              #   Pass arguments to `batch_get_settings` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param parent [::String]
              #     Required. The relative resource name of the organization shared by all of the
              #     settings being retrieved.
              #     Format:
              #      * `organizations/{organization}`
              #   @param names [::Array<::String>]
              #     The names of the settings to retrieve.
              #     A maximum of 1000 settings can be retrieved in a batch.
              #     Formats:
              #      * `organizations/{organization}/settings`
              #      * `folders/{folder}/settings`
              #      * `projects/{project}/settings`
              #      * `projects/{project}/locations/{location}/clusters/{cluster}/settings`
              #      * `projects/{project}/regions/{region}/clusters/{cluster}/settings`
              #      * `projects/{project}/zones/{zone}/clusters/{cluster}/settings`
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Google::Cloud::SecurityCenter::Settings::V1beta1::BatchGetSettingsResponse]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Google::Cloud::SecurityCenter::Settings::V1beta1::BatchGetSettingsResponse]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              def batch_get_settings request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::SecurityCenter::Settings::V1beta1::BatchGetSettingsRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.batch_get_settings.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Settings::V1beta1::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.parent
                  header_params["parent"] = request.parent
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.batch_get_settings.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.batch_get_settings.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @security_center_settings_service_stub.call_rpc :batch_get_settings, request, options: options do |response, operation|
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # CalculateEffectiveSettings looks up all of the Security Center
              # Settings resources in the GCP resource hierarchy, and calculates the
              # effective settings on that resource by applying the following rules:
              #  * Settings provided closer to the target resource take precedence over
              #    those further away (e.g. folder will override organization level
              #    settings).
              #  * Product defaults can be overridden at org, folder, project, and cluster
              #  levels.
              #  * Detectors will be filtered out if they belong to a billing tier the
              #  customer
              #    has not configured.
              #
              # @overload calculate_effective_settings(request, options = nil)
              #   Pass arguments to `calculate_effective_settings` via a request object, either of type
              #   {::Google::Cloud::SecurityCenter::Settings::V1beta1::CalculateEffectiveSettingsRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::SecurityCenter::Settings::V1beta1::CalculateEffectiveSettingsRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload calculate_effective_settings(name: nil)
              #   Pass arguments to `calculate_effective_settings` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param name [::String]
              #     Required. The name of the effective settings to retrieve.
              #     Formats:
              #      * `organizations/{organization}/effectiveSettings`
              #      * `folders/{folder}/effectiveSettings`
              #      * `projects/{project}/effectiveSettings`
              #      * `projects/{project}/locations/{location}/clusters/{cluster}/effectiveSettings`
              #      * `projects/{project}/regions/{region}/clusters/{cluster}/effectiveSettings`
              #      * `projects/{project}/zones/{zone}/clusters/{cluster}/effectiveSettings`
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Google::Cloud::SecurityCenter::Settings::V1beta1::Settings]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Google::Cloud::SecurityCenter::Settings::V1beta1::Settings]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              def calculate_effective_settings request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::SecurityCenter::Settings::V1beta1::CalculateEffectiveSettingsRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.calculate_effective_settings.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Settings::V1beta1::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.name
                  header_params["name"] = request.name
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.calculate_effective_settings.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.calculate_effective_settings.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @security_center_settings_service_stub.call_rpc :calculate_effective_settings, request, options: options do |response, operation|
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Gets a list of effective settings.
              #
              # @overload batch_calculate_effective_settings(request, options = nil)
              #   Pass arguments to `batch_calculate_effective_settings` via a request object, either of type
              #   {::Google::Cloud::SecurityCenter::Settings::V1beta1::BatchCalculateEffectiveSettingsRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::SecurityCenter::Settings::V1beta1::BatchCalculateEffectiveSettingsRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload batch_calculate_effective_settings(parent: nil, requests: nil)
              #   Pass arguments to `batch_calculate_effective_settings` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param parent [::String]
              #     Required. The relative resource name of the organization shared by all of the
              #     settings being retrieved.
              #     Format:
              #      * `organizations/{organization}`
              #   @param requests [::Array<::Google::Cloud::SecurityCenter::Settings::V1beta1::CalculateEffectiveSettingsRequest, ::Hash>]
              #     The requests specifying the effective settings to retrieve.
              #     A maximum of 1000 effective settings can be retrieved in a batch.
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Google::Cloud::SecurityCenter::Settings::V1beta1::BatchCalculateEffectiveSettingsResponse]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Google::Cloud::SecurityCenter::Settings::V1beta1::BatchCalculateEffectiveSettingsResponse]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              def batch_calculate_effective_settings request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::SecurityCenter::Settings::V1beta1::BatchCalculateEffectiveSettingsRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.batch_calculate_effective_settings.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Settings::V1beta1::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.parent
                  header_params["parent"] = request.parent
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.batch_calculate_effective_settings.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.batch_calculate_effective_settings.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @security_center_settings_service_stub.call_rpc :batch_calculate_effective_settings, request, options: options do |response, operation|
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Gets the Component Settings.
              #
              # @overload get_component_settings(request, options = nil)
              #   Pass arguments to `get_component_settings` via a request object, either of type
              #   {::Google::Cloud::SecurityCenter::Settings::V1beta1::GetComponentSettingsRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::SecurityCenter::Settings::V1beta1::GetComponentSettingsRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload get_component_settings(name: nil)
              #   Pass arguments to `get_component_settings` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param name [::String]
              #     Required. The component settings to retrieve.
              #
              #     Formats:
              #      * `organizations/{organization}/components/{component}/settings`
              #      * `folders/{folder}/components/{component}/settings`
              #      * `projects/{project}/components/{component}/settings`
              #      * `projects/{project}/locations/{location}/clusters/{cluster}/components/{component}/settings`
              #      * `projects/{project}/regions/{region}/clusters/{cluster}/components/{component}/settings`
              #      * `projects/{project}/zones/{zone}/clusters/{cluster}/components/{component}/settings`
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Google::Cloud::SecurityCenter::Settings::V1beta1::ComponentSettings]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Google::Cloud::SecurityCenter::Settings::V1beta1::ComponentSettings]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              def get_component_settings request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::SecurityCenter::Settings::V1beta1::GetComponentSettingsRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.get_component_settings.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Settings::V1beta1::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.name
                  header_params["name"] = request.name
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.get_component_settings.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.get_component_settings.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @security_center_settings_service_stub.call_rpc :get_component_settings, request, options: options do |response, operation|
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Updates the Component Settings.
              #
              # @overload update_component_settings(request, options = nil)
              #   Pass arguments to `update_component_settings` via a request object, either of type
              #   {::Google::Cloud::SecurityCenter::Settings::V1beta1::UpdateComponentSettingsRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::SecurityCenter::Settings::V1beta1::UpdateComponentSettingsRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload update_component_settings(component_settings: nil, update_mask: nil)
              #   Pass arguments to `update_component_settings` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param component_settings [::Google::Cloud::SecurityCenter::Settings::V1beta1::ComponentSettings, ::Hash]
              #     Required. The component settings to update.
              #
              #     The component settings' `name` field is used to identify the component
              #     settings to be updated. Formats:
              #      * `organizations/{organization}/components/{component}/settings`
              #      * `folders/{folder}/components/{component}/settings`
              #      * `projects/{project}/components/{component}/settings`
              #      * `projects/{project}/locations/{location}/clusters/{cluster}/components/{component}/settings`
              #      * `projects/{project}/regions/{region}/clusters/{cluster}/components/{component}/settings`
              #      * `projects/{project}/zones/{zone}/clusters/{cluster}/components/{component}/settings`
              #   @param update_mask [::Google::Protobuf::FieldMask, ::Hash]
              #     The list of fields to be updated on the component settings resource.
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Google::Cloud::SecurityCenter::Settings::V1beta1::ComponentSettings]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Google::Cloud::SecurityCenter::Settings::V1beta1::ComponentSettings]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              def update_component_settings request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::SecurityCenter::Settings::V1beta1::UpdateComponentSettingsRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.update_component_settings.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Settings::V1beta1::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.component_settings&.name
                  header_params["component_settings.name"] = request.component_settings.name
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.update_component_settings.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.update_component_settings.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @security_center_settings_service_stub.call_rpc :update_component_settings, request, options: options do |response, operation|
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Reset the organization, folder or project's component settings and return
              # the settings to the default. Settings are present at the
              # organization, folder and project levels. Using Reset for a folder or
              # project will remove the override that was set and result in the
              # organization-level settings being used.
              #
              # @overload reset_component_settings(request, options = nil)
              #   Pass arguments to `reset_component_settings` via a request object, either of type
              #   {::Google::Cloud::SecurityCenter::Settings::V1beta1::ResetComponentSettingsRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::SecurityCenter::Settings::V1beta1::ResetComponentSettingsRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload reset_component_settings(name: nil, etag: nil)
              #   Pass arguments to `reset_component_settings` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param name [::String]
              #     Required. The component settings to reset.
              #
              #     Formats:
              #      * `organizations/{organization}/components/{component}/settings`
              #      * `folders/{folder}/components/{component}/settings`
              #      * `projects/{project}/components/{component}/settings`
              #      * `projects/{project}/locations/{location}/clusters/{cluster}/components/{component}/settings`
              #      * `projects/{project}/regions/{region}/clusters/{cluster}/components/{component}/settings`
              #      * `projects/{project}/zones/{zone}/clusters/{cluster}/components/{component}/settings`
              #   @param etag [::String]
              #     An fingerprint used for optimistic concurrency. If none is provided,
              #     then the existing settings will be blindly overwritten.
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Google::Protobuf::Empty]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Google::Protobuf::Empty]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              def reset_component_settings request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::SecurityCenter::Settings::V1beta1::ResetComponentSettingsRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.reset_component_settings.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Settings::V1beta1::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.name
                  header_params["name"] = request.name
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.reset_component_settings.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.reset_component_settings.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @security_center_settings_service_stub.call_rpc :reset_component_settings, request, options: options do |response, operation|
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Gets the Effective Component Settings.
              #
              # @overload calculate_effective_component_settings(request, options = nil)
              #   Pass arguments to `calculate_effective_component_settings` via a request object, either of type
              #   {::Google::Cloud::SecurityCenter::Settings::V1beta1::CalculateEffectiveComponentSettingsRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::SecurityCenter::Settings::V1beta1::CalculateEffectiveComponentSettingsRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload calculate_effective_component_settings(name: nil)
              #   Pass arguments to `calculate_effective_component_settings` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param name [::String]
              #     Required. The effective component settings to retrieve.
              #
              #     Formats:
              #      * `organizations/{organization}/components/{component}/settings`
              #      * `folders/{folder}/components/{component}/settings`
              #      * `projects/{project}/components/{component}/settings`
              #      * `projects/{project}/locations/{location}/clusters/{cluster}/components/{component}/settings`
              #      * `projects/{project}/regions/{region}/clusters/{cluster}/components/{component}/settings`
              #      * `projects/{project}/zones/{zone}/clusters/{cluster}/components/{component}/settings`
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Google::Cloud::SecurityCenter::Settings::V1beta1::ComponentSettings]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Google::Cloud::SecurityCenter::Settings::V1beta1::ComponentSettings]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              def calculate_effective_component_settings request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::SecurityCenter::Settings::V1beta1::CalculateEffectiveComponentSettingsRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.calculate_effective_component_settings.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Settings::V1beta1::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.name
                  header_params["name"] = request.name
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.calculate_effective_component_settings.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.calculate_effective_component_settings.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @security_center_settings_service_stub.call_rpc :calculate_effective_component_settings, request, options: options do |response, operation|
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Retrieves an unordered list of available detectors.
              #
              # @overload list_detectors(request, options = nil)
              #   Pass arguments to `list_detectors` via a request object, either of type
              #   {::Google::Cloud::SecurityCenter::Settings::V1beta1::ListDetectorsRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::SecurityCenter::Settings::V1beta1::ListDetectorsRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload list_detectors(parent: nil, filter: nil, page_size: nil, page_token: nil)
              #   Pass arguments to `list_detectors` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param parent [::String]
              #     Required. The parent, which owns this collection of detectors.
              #     Format:
              #      * `organizations/{organization}`
              #   @param filter [::String]
              #     Filters to apply on the response. Filters can be applied on:
              #      * components
              #      * labels
              #      * billing tiers
              #
              #     Component filters will retrieve only detectors for the components
              #     specified. Label filters will retrieve only detectors that match one of the
              #     labels specified. Billing tier filters will retrieve only detectors for
              #     that billing tier.
              #
              #     The filters
              #   @param page_size [::Integer]
              #     The maximum number of detectors to return. The service may return fewer
              #     than this value. If unspecified, at most 100 detectors will be returned.
              #     The maximum value is 1000; values above 1000 will be coerced to 1000.
              #   @param page_token [::String]
              #     A page token, received from a previous `ListDetectors` call.
              #     Provide this to retrieve the subsequent page.
              #
              #     When paginating, all other parameters provided to `ListDetectors` must
              #     match the call that provided the page token.
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::SecurityCenter::Settings::V1beta1::Detector>]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Gapic::PagedEnumerable<::Google::Cloud::SecurityCenter::Settings::V1beta1::Detector>]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              def list_detectors request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::SecurityCenter::Settings::V1beta1::ListDetectorsRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.list_detectors.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Settings::V1beta1::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.parent
                  header_params["parent"] = request.parent
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.list_detectors.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.list_detectors.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @security_center_settings_service_stub.call_rpc :list_detectors, request, options: options do |response, operation|
                  response = ::Gapic::PagedEnumerable.new @security_center_settings_service_stub, :list_detectors, request, response, operation, options
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Retrieves an unordered list of available SCC components.
              #
              # @overload list_components(request, options = nil)
              #   Pass arguments to `list_components` via a request object, either of type
              #   {::Google::Cloud::SecurityCenter::Settings::V1beta1::ListComponentsRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::SecurityCenter::Settings::V1beta1::ListComponentsRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload list_components(parent: nil, page_size: nil, page_token: nil)
              #   Pass arguments to `list_components` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param parent [::String]
              #     Required. The parent, which owns this collection of components.
              #     Format:
              #      * `organizations/{organization}`
              #   @param page_size [::Integer]
              #     The maximum number of components to return. The service may return fewer
              #     than this value. If unspecified, at most 100 components will be returned.
              #     The maximum value is 1000; values above 1000 will be coerced to 1000.
              #   @param page_token [::String]
              #     A page token, received from a previous `ListComponents` call.
              #     Provide this to retrieve the subsequent page.
              #
              #     When paginating, all other parameters provided to `ListComponents` must
              #     match the call that provided the page token.
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Google::Cloud::SecurityCenter::Settings::V1beta1::ListComponentsResponse]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Google::Cloud::SecurityCenter::Settings::V1beta1::ListComponentsResponse]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              def list_components request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::SecurityCenter::Settings::V1beta1::ListComponentsRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.list_components.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Settings::V1beta1::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.parent
                  header_params["parent"] = request.parent
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.list_components.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.list_components.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @security_center_settings_service_stub.call_rpc :list_components, request, options: options do |response, operation|
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Configuration class for the SecurityCenterSettingsService API.
              #
              # This class represents the configuration for SecurityCenterSettingsService,
              # providing control over timeouts, retry behavior, logging, transport
              # parameters, and other low-level controls. Certain parameters can also be
              # applied individually to specific RPCs. See
              # {::Google::Cloud::SecurityCenter::Settings::V1beta1::SecurityCenterSettingsService::Client::Configuration::Rpcs}
              # for a list of RPCs that can be configured independently.
              #
              # Configuration can be applied globally to all clients, or to a single client
              # on construction.
              #
              # @example
              #
              #   # Modify the global config, setting the timeout for
              #   # get_service_account to 20 seconds,
              #   # and all remaining timeouts to 10 seconds.
              #   ::Google::Cloud::SecurityCenter::Settings::V1beta1::SecurityCenterSettingsService::Client.configure do |config|
              #     config.timeout = 10.0
              #     config.rpcs.get_service_account.timeout = 20.0
              #   end
              #
              #   # Apply the above configuration only to a new client.
              #   client = ::Google::Cloud::SecurityCenter::Settings::V1beta1::SecurityCenterSettingsService::Client.new do |config|
              #     config.timeout = 10.0
              #     config.rpcs.get_service_account.timeout = 20.0
              #   end
              #
              # @!attribute [rw] endpoint
              #   The hostname or hostname:port of the service endpoint.
              #   Defaults to `"securitycenter.googleapis.com"`.
              #   @return [::String]
              # @!attribute [rw] credentials
              #   Credentials to send with calls. You may provide any of the following types:
              #    *  (`String`) The path to a service account key file in JSON format
              #    *  (`Hash`) A service account key as a Hash
              #    *  (`Google::Auth::Credentials`) A googleauth credentials object
              #       (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
              #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
              #       (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
              #    *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
              #    *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
              #    *  (`nil`) indicating no credentials
              #   @return [::Object]
              # @!attribute [rw] scope
              #   The OAuth scopes
              #   @return [::Array<::String>]
              # @!attribute [rw] lib_name
              #   The library name as recorded in instrumentation and logging
              #   @return [::String]
              # @!attribute [rw] lib_version
              #   The library version as recorded in instrumentation and logging
              #   @return [::String]
              # @!attribute [rw] channel_args
              #   Extra parameters passed to the gRPC channel. Note: this is ignored if a
              #   `GRPC::Core::Channel` object is provided as the credential.
              #   @return [::Hash]
              # @!attribute [rw] interceptors
              #   An array of interceptors that are run before calls are executed.
              #   @return [::Array<::GRPC::ClientInterceptor>]
              # @!attribute [rw] timeout
              #   The call timeout in seconds.
              #   @return [::Numeric]
              # @!attribute [rw] metadata
              #   Additional gRPC headers to be sent with the call.
              #   @return [::Hash{::Symbol=>::String}]
              # @!attribute [rw] retry_policy
              #   The retry policy. The value is a hash with the following keys:
              #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
              #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
              #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
              #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
              #       trigger a retry.
              #   @return [::Hash]
              # @!attribute [rw] quota_project
              #   A separate project against which to charge quota.
              #   @return [::String]
              #
              class Configuration
                extend ::Gapic::Config

                config_attr :endpoint,      "securitycenter.googleapis.com", ::String
                config_attr :credentials,   nil do |value|
                  allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
                  allowed += [::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials] if defined? ::GRPC
                  allowed.any? { |klass| klass === value }
                end
                config_attr :scope,         nil, ::String, ::Array, nil
                config_attr :lib_name,      nil, ::String, nil
                config_attr :lib_version,   nil, ::String, nil
                config_attr(:channel_args,  { "grpc.service_config_disable_resolution" => 1 }, ::Hash, nil)
                config_attr :interceptors,  nil, ::Array, nil
                config_attr :timeout,       nil, ::Numeric, nil
                config_attr :metadata,      nil, ::Hash, nil
                config_attr :retry_policy,  nil, ::Hash, ::Proc, nil
                config_attr :quota_project, nil, ::String, nil

                # @private
                def initialize parent_config = nil
                  @parent_config = parent_config unless parent_config.nil?

                  yield self if block_given?
                end

                ##
                # Configurations for individual RPCs
                # @return [Rpcs]
                #
                def rpcs
                  @rpcs ||= begin
                    parent_rpcs = nil
                    parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config.respond_to?(:rpcs)
                    Rpcs.new parent_rpcs
                  end
                end

                ##
                # Configuration RPC class for the SecurityCenterSettingsService API.
                #
                # Includes fields providing the configuration for each RPC in this service.
                # Each configuration object is of type `Gapic::Config::Method` and includes
                # the following configuration fields:
                #
                #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
                #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
                #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
                #     include the following keys:
                #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
                #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
                #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
                #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
                #         trigger a retry.
                #
                class Rpcs
                  ##
                  # RPC-specific configuration for `get_service_account`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :get_service_account
                  ##
                  # RPC-specific configuration for `get_settings`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :get_settings
                  ##
                  # RPC-specific configuration for `update_settings`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :update_settings
                  ##
                  # RPC-specific configuration for `reset_settings`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :reset_settings
                  ##
                  # RPC-specific configuration for `batch_get_settings`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :batch_get_settings
                  ##
                  # RPC-specific configuration for `calculate_effective_settings`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :calculate_effective_settings
                  ##
                  # RPC-specific configuration for `batch_calculate_effective_settings`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :batch_calculate_effective_settings
                  ##
                  # RPC-specific configuration for `get_component_settings`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :get_component_settings
                  ##
                  # RPC-specific configuration for `update_component_settings`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :update_component_settings
                  ##
                  # RPC-specific configuration for `reset_component_settings`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :reset_component_settings
                  ##
                  # RPC-specific configuration for `calculate_effective_component_settings`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :calculate_effective_component_settings
                  ##
                  # RPC-specific configuration for `list_detectors`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :list_detectors
                  ##
                  # RPC-specific configuration for `list_components`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :list_components

                  # @private
                  def initialize parent_rpcs = nil
                    get_service_account_config = parent_rpcs.get_service_account if parent_rpcs.respond_to? :get_service_account
                    @get_service_account = ::Gapic::Config::Method.new get_service_account_config
                    get_settings_config = parent_rpcs.get_settings if parent_rpcs.respond_to? :get_settings
                    @get_settings = ::Gapic::Config::Method.new get_settings_config
                    update_settings_config = parent_rpcs.update_settings if parent_rpcs.respond_to? :update_settings
                    @update_settings = ::Gapic::Config::Method.new update_settings_config
                    reset_settings_config = parent_rpcs.reset_settings if parent_rpcs.respond_to? :reset_settings
                    @reset_settings = ::Gapic::Config::Method.new reset_settings_config
                    batch_get_settings_config = parent_rpcs.batch_get_settings if parent_rpcs.respond_to? :batch_get_settings
                    @batch_get_settings = ::Gapic::Config::Method.new batch_get_settings_config
                    calculate_effective_settings_config = parent_rpcs.calculate_effective_settings if parent_rpcs.respond_to? :calculate_effective_settings
                    @calculate_effective_settings = ::Gapic::Config::Method.new calculate_effective_settings_config
                    batch_calculate_effective_settings_config = parent_rpcs.batch_calculate_effective_settings if parent_rpcs.respond_to? :batch_calculate_effective_settings
                    @batch_calculate_effective_settings = ::Gapic::Config::Method.new batch_calculate_effective_settings_config
                    get_component_settings_config = parent_rpcs.get_component_settings if parent_rpcs.respond_to? :get_component_settings
                    @get_component_settings = ::Gapic::Config::Method.new get_component_settings_config
                    update_component_settings_config = parent_rpcs.update_component_settings if parent_rpcs.respond_to? :update_component_settings
                    @update_component_settings = ::Gapic::Config::Method.new update_component_settings_config
                    reset_component_settings_config = parent_rpcs.reset_component_settings if parent_rpcs.respond_to? :reset_component_settings
                    @reset_component_settings = ::Gapic::Config::Method.new reset_component_settings_config
                    calculate_effective_component_settings_config = parent_rpcs.calculate_effective_component_settings if parent_rpcs.respond_to? :calculate_effective_component_settings
                    @calculate_effective_component_settings = ::Gapic::Config::Method.new calculate_effective_component_settings_config
                    list_detectors_config = parent_rpcs.list_detectors if parent_rpcs.respond_to? :list_detectors
                    @list_detectors = ::Gapic::Config::Method.new list_detectors_config
                    list_components_config = parent_rpcs.list_components if parent_rpcs.respond_to? :list_components
                    @list_components = ::Gapic::Config::Method.new list_components_config

                    yield self if block_given?
                  end
                end
              end
            end
          end
        end
      end
    end
  end
end
