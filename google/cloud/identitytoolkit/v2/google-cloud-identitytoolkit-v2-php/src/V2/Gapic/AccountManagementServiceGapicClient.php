<?php
/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * Generated by gapic-generator-php from the file
 * https://github.com/google/googleapis/blob/master/google/cloud/identitytoolkit/v2/account_management_service.proto
 * Updates to the above are reflected here through a refresh process.
 */

namespace Google\Cloud\IdentityToolkit\V2\Gapic;

use Google\ApiCore\ApiException;

use Google\ApiCore\CredentialsWrapper;
use Google\ApiCore\GapicClientTrait;
use Google\ApiCore\RetrySettings;
use Google\ApiCore\Transport\TransportInterface;
use Google\ApiCore\ValidationException;
use Google\Auth\FetchAuthTokenInterface;
use Google\Cloud\IdentityToolkit\V2\FinalizeMfaEnrollmentRequest;
use Google\Cloud\IdentityToolkit\V2\FinalizeMfaEnrollmentResponse;
use Google\Cloud\IdentityToolkit\V2\FinalizeMfaPhoneRequestInfo;
use Google\Cloud\IdentityToolkit\V2\StartMfaEnrollmentRequest;
use Google\Cloud\IdentityToolkit\V2\StartMfaEnrollmentResponse;
use Google\Cloud\IdentityToolkit\V2\StartMfaPhoneRequestInfo;
use Google\Cloud\IdentityToolkit\V2\WithdrawMfaRequest;
use Google\Cloud\IdentityToolkit\V2\WithdrawMfaResponse;

/**
 * Service Description: Account management for Identity Toolkit
 *
 * This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods. Sample code to get started:
 *
 * ```
 * $accountManagementServiceClient = new AccountManagementServiceClient();
 * try {
 *     $idToken = 'id_token';
 *     $response = $accountManagementServiceClient->finalizeMfaEnrollment($idToken);
 * } finally {
 *     $accountManagementServiceClient->close();
 * }
 * ```
 */
class AccountManagementServiceGapicClient
{
    use GapicClientTrait;

    /**
     * The name of the service.
     */
    const SERVICE_NAME = 'google.cloud.identitytoolkit.v2.AccountManagementService';

    /**
     * The default address of the service.
     */
    const SERVICE_ADDRESS = 'identitytoolkit.googleapis.com';

    /**
     * The default port of the service.
     */
    const DEFAULT_SERVICE_PORT = 443;

    /**
     * The name of the code generator, to be included in the agent header.
     */
    const CODEGEN_NAME = 'gapic';

    /**
     * The default scopes required by the service.
     */
    public static $serviceScopes = [
        'https://www.googleapis.com/auth/cloud-platform',
    ];

    private static function getClientDefaults()
    {
        return [
            'serviceName' => self::SERVICE_NAME,
            'serviceAddress' => self::SERVICE_ADDRESS . ':' . self::DEFAULT_SERVICE_PORT,
            'clientConfig' => __DIR__ . '/../resources/account_management_service_client_config.json',
            'descriptorsConfigPath' => __DIR__ . '/../resources/account_management_service_descriptor_config.php',
            'gcpApiConfigPath' => __DIR__ . '/../resources/account_management_service_grpc_config.json',
            'credentialsConfig' => [
                'defaultScopes' => self::$serviceScopes,
            ],
            'transportConfig' => [
                'rest' => [
                    'restClientConfigPath' => __DIR__ . '/../resources/account_management_service_rest_client_config.php',
                ],
            ],
        ];
    }

    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *
     *     @type string $serviceAddress
     *           The address of the API remote host. May optionally include the port, formatted
     *           as "<uri>:<port>". Default 'identitytoolkit.googleapis.com:443'.
     *     @type string|array|FetchAuthTokenInterface|CredentialsWrapper $credentials
     *           The credentials to be used by the client to authorize API calls. This option
     *           accepts either a path to a credentials file, or a decoded credentials file as a
     *           PHP array.
     *           *Advanced usage*: In addition, this option can also accept a pre-constructed
     *           {@see \Google\Auth\FetchAuthTokenInterface} object or
     *           {@see \Google\ApiCore\CredentialsWrapper} object. Note that when one of these
     *           objects are provided, any settings in $credentialsConfig will be ignored.
     *     @type array $credentialsConfig
     *           Options used to configure credentials, including auth token caching, for the
     *           client. For a full list of supporting configuration options, see
     *           {@see \Google\ApiCore\CredentialsWrapper::build()} .
     *     @type bool $disableRetries
     *           Determines whether or not retries defined by the client configuration should be
     *           disabled. Defaults to `false`.
     *     @type string|array $clientConfig
     *           Client method configuration, including retry settings. This option can be either
     *           a path to a JSON file, or a PHP array containing the decoded JSON data. By
     *           default this settings points to the default client config file, which is
     *           provided in the resources folder.
     *     @type string|TransportInterface $transport
     *           The transport used for executing network requests. May be either the string
     *           `rest` or `grpc`. Defaults to `grpc` if gRPC support is detected on the system.
     *           *Advanced usage*: Additionally, it is possible to pass in an already
     *           instantiated {@see \Google\ApiCore\Transport\TransportInterface} object. Note
     *           that when this object is provided, any settings in $transportConfig, and any
     *           $serviceAddress setting, will be ignored.
     *     @type array $transportConfig
     *           Configuration options that will be used to construct the transport. Options for
     *           each supported transport type should be passed in a key for that transport. For
     *           example:
     *           $transportConfig = [
     *               'grpc' => [...],
     *               'rest' => [...],
     *           ];
     *           See the {@see \Google\ApiCore\Transport\GrpcTransport::build()} and
     *           {@see \Google\ApiCore\Transport\RestTransport::build()} methods for the
     *           supported options.
     *     @type callable $clientCertSource
     *           A callable which returns the client cert as a string. This can be used to
     *           provide a certificate and private key to the transport layer for mTLS.
     * }
     *
     * @throws ValidationException
     */
    public function __construct(array $options = [])
    {
        $clientOptions = $this->buildClientOptions($options);
        $this->setClientOptions($clientOptions);
    }

    /**
     * Finishes enrolling a second factor for the user.
     *
     * Sample code:
     * ```
     * $accountManagementServiceClient = new AccountManagementServiceClient();
     * try {
     *     $idToken = 'id_token';
     *     $response = $accountManagementServiceClient->finalizeMfaEnrollment($idToken);
     * } finally {
     *     $accountManagementServiceClient->close();
     * }
     * ```
     *
     * @param string $idToken      Required. ID token.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type string $displayName
     *           Display name which is entered  by users to distinguish between different
     *           second factors with same type or different type.
     *     @type FinalizeMfaPhoneRequestInfo $phoneVerificationInfo
     *           Verification info to authorize sending an SMS for phone verification.
     *     @type string $tenantId
     *           The ID of the Identity Platform tenant that the user enrolling MFA belongs
     *           to. If not set, the user belongs to the default Identity Platform project.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Cloud\IdentityToolkit\V2\FinalizeMfaEnrollmentResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function finalizeMfaEnrollment($idToken, array $optionalArgs = [])
    {
        $request = new FinalizeMfaEnrollmentRequest();
        $request->setIdToken($idToken);
        if (isset($optionalArgs['displayName'])) {
            $request->setDisplayName($optionalArgs['displayName']);
        }

        if (isset($optionalArgs['phoneVerificationInfo'])) {
            $request->setPhoneVerificationInfo($optionalArgs['phoneVerificationInfo']);
        }

        if (isset($optionalArgs['tenantId'])) {
            $request->setTenantId($optionalArgs['tenantId']);
        }

        return $this->startCall('FinalizeMfaEnrollment', FinalizeMfaEnrollmentResponse::class, $optionalArgs, $request)->wait();
    }

    /**
     * Step one of the MFA enrollment process. In SMS case, this sends an
     * SMS verification code to the user.
     *
     * Sample code:
     * ```
     * $accountManagementServiceClient = new AccountManagementServiceClient();
     * try {
     *     $idToken = 'id_token';
     *     $response = $accountManagementServiceClient->startMfaEnrollment($idToken);
     * } finally {
     *     $accountManagementServiceClient->close();
     * }
     * ```
     *
     * @param string $idToken      Required. User's ID token.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type StartMfaPhoneRequestInfo $phoneEnrollmentInfo
     *           Verification info to authorize sending an SMS for phone verification.
     *     @type string $tenantId
     *           The ID of the Identity Platform tenant that the user enrolling MFA belongs
     *           to. If not set, the user belongs to the default Identity Platform project.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Cloud\IdentityToolkit\V2\StartMfaEnrollmentResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function startMfaEnrollment($idToken, array $optionalArgs = [])
    {
        $request = new StartMfaEnrollmentRequest();
        $request->setIdToken($idToken);
        if (isset($optionalArgs['phoneEnrollmentInfo'])) {
            $request->setPhoneEnrollmentInfo($optionalArgs['phoneEnrollmentInfo']);
        }

        if (isset($optionalArgs['tenantId'])) {
            $request->setTenantId($optionalArgs['tenantId']);
        }

        return $this->startCall('StartMfaEnrollment', StartMfaEnrollmentResponse::class, $optionalArgs, $request)->wait();
    }

    /**
     * Revokes one second factor from the enrolled second factors for an account.
     *
     * Sample code:
     * ```
     * $accountManagementServiceClient = new AccountManagementServiceClient();
     * try {
     *     $idToken = 'id_token';
     *     $mfaEnrollmentId = 'mfa_enrollment_id';
     *     $response = $accountManagementServiceClient->withdrawMfa($idToken, $mfaEnrollmentId);
     * } finally {
     *     $accountManagementServiceClient->close();
     * }
     * ```
     *
     * @param string $idToken         Required. User's ID token.
     * @param string $mfaEnrollmentId Required. MFA enrollment id from a current MFA enrollment.
     * @param array  $optionalArgs    {
     *     Optional.
     *
     *     @type string $tenantId
     *           The ID of the Identity Platform tenant that the user unenrolling MFA
     *           belongs to. If not set, the user belongs to the default Identity Platform
     *           project.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Cloud\IdentityToolkit\V2\WithdrawMfaResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function withdrawMfa($idToken, $mfaEnrollmentId, array $optionalArgs = [])
    {
        $request = new WithdrawMfaRequest();
        $request->setIdToken($idToken);
        $request->setMfaEnrollmentId($mfaEnrollmentId);
        if (isset($optionalArgs['tenantId'])) {
            $request->setTenantId($optionalArgs['tenantId']);
        }

        return $this->startCall('WithdrawMfa', WithdrawMfaResponse::class, $optionalArgs, $request)->wait();
    }
}
