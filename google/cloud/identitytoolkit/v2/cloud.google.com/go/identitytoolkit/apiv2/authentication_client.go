// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package identitytoolkit

import (
	"context"
	"math"
	"time"

	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	identitytoolkitpb "google.golang.org/genproto/googleapis/cloud/identitytoolkit/v2"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

var newAuthenticationClientHook clientHook

// AuthenticationCallOptions contains the retry settings for each method of AuthenticationClient.
type AuthenticationCallOptions struct {
	FinalizeMfaSignIn []gax.CallOption
	StartMfaSignIn    []gax.CallOption
}

func defaultAuthenticationGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("identitytoolkit.googleapis.com:443"),
		internaloption.WithDefaultMTLSEndpoint("identitytoolkit.mtls.googleapis.com:443"),
		internaloption.WithDefaultAudience("https://identitytoolkit.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultAuthenticationCallOptions() *AuthenticationCallOptions {
	return &AuthenticationCallOptions{
		FinalizeMfaSignIn: []gax.CallOption{},
		StartMfaSignIn:    []gax.CallOption{},
	}
}

// internalAuthenticationClient is an interface that defines the methods availaible from Identity Toolkit API.
type internalAuthenticationClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	FinalizeMfaSignIn(context.Context, *identitytoolkitpb.FinalizeMfaSignInRequest, ...gax.CallOption) (*identitytoolkitpb.FinalizeMfaSignInResponse, error)
	StartMfaSignIn(context.Context, *identitytoolkitpb.StartMfaSignInRequest, ...gax.CallOption) (*identitytoolkitpb.StartMfaSignInResponse, error)
}

// AuthenticationClient is a client for interacting with Identity Toolkit API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// Authentication for Identity Toolkit
type AuthenticationClient struct {
	// The internal transport-dependent client.
	internalClient internalAuthenticationClient

	// The call options for this service.
	CallOptions *AuthenticationCallOptions
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *AuthenticationClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *AuthenticationClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *AuthenticationClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// FinalizeMfaSignIn verifies the MFA challenge and performs sign-in
func (c *AuthenticationClient) FinalizeMfaSignIn(ctx context.Context, req *identitytoolkitpb.FinalizeMfaSignInRequest, opts ...gax.CallOption) (*identitytoolkitpb.FinalizeMfaSignInResponse, error) {
	return c.internalClient.FinalizeMfaSignIn(ctx, req, opts...)
}

// StartMfaSignIn sends the MFA challenge
func (c *AuthenticationClient) StartMfaSignIn(ctx context.Context, req *identitytoolkitpb.StartMfaSignInRequest, opts ...gax.CallOption) (*identitytoolkitpb.StartMfaSignInResponse, error) {
	return c.internalClient.StartMfaSignIn(ctx, req, opts...)
}

// authenticationGRPCClient is a client for interacting with Identity Toolkit API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type authenticationGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// flag to opt out of default deadlines via GOOGLE_API_GO_EXPERIMENTAL_DISABLE_DEFAULT_DEADLINE
	disableDeadlines bool

	// Points back to the CallOptions field of the containing AuthenticationClient
	CallOptions **AuthenticationCallOptions

	// The gRPC API client.
	authenticationClient identitytoolkitpb.AuthenticationServiceClient

	// The x-goog-* metadata to be sent with each request.
	xGoogMetadata metadata.MD
}

// NewAuthenticationClient creates a new authentication service client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// Authentication for Identity Toolkit
func NewAuthenticationClient(ctx context.Context, opts ...option.ClientOption) (*AuthenticationClient, error) {
	clientOpts := defaultAuthenticationGRPCClientOptions()
	if newAuthenticationClientHook != nil {
		hookOpts, err := newAuthenticationClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	disableDeadlines, err := checkDisableDeadlines()
	if err != nil {
		return nil, err
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := AuthenticationClient{CallOptions: defaultAuthenticationCallOptions()}

	c := &authenticationGRPCClient{
		connPool:             connPool,
		disableDeadlines:     disableDeadlines,
		authenticationClient: identitytoolkitpb.NewAuthenticationServiceClient(connPool),
		CallOptions:          &client.CallOptions,
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *authenticationGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *authenticationGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", versionGo()}, keyval...)
	kv = append(kv, "gapic", versionClient, "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogMetadata = metadata.Pairs("x-goog-api-client", gax.XGoogHeader(kv...))
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *authenticationGRPCClient) Close() error {
	return c.connPool.Close()
}

func (c *authenticationGRPCClient) FinalizeMfaSignIn(ctx context.Context, req *identitytoolkitpb.FinalizeMfaSignInRequest, opts ...gax.CallOption) (*identitytoolkitpb.FinalizeMfaSignInResponse, error) {
	if _, ok := ctx.Deadline(); !ok && !c.disableDeadlines {
		cctx, cancel := context.WithTimeout(ctx, 60000*time.Millisecond)
		defer cancel()
		ctx = cctx
	}
	ctx = insertMetadata(ctx, c.xGoogMetadata)
	opts = append((*c.CallOptions).FinalizeMfaSignIn[0:len((*c.CallOptions).FinalizeMfaSignIn):len((*c.CallOptions).FinalizeMfaSignIn)], opts...)
	var resp *identitytoolkitpb.FinalizeMfaSignInResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.authenticationClient.FinalizeMfaSignIn(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *authenticationGRPCClient) StartMfaSignIn(ctx context.Context, req *identitytoolkitpb.StartMfaSignInRequest, opts ...gax.CallOption) (*identitytoolkitpb.StartMfaSignInResponse, error) {
	if _, ok := ctx.Deadline(); !ok && !c.disableDeadlines {
		cctx, cancel := context.WithTimeout(ctx, 60000*time.Millisecond)
		defer cancel()
		ctx = cctx
	}
	ctx = insertMetadata(ctx, c.xGoogMetadata)
	opts = append((*c.CallOptions).StartMfaSignIn[0:len((*c.CallOptions).StartMfaSignIn):len((*c.CallOptions).StartMfaSignIn)], opts...)
	var resp *identitytoolkitpb.StartMfaSignInResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.authenticationClient.StartMfaSignIn(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
