// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as baremetalsolutionModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v2.BareMetalSolutionClient', () => {
    it('has servicePath', () => {
        const servicePath = baremetalsolutionModule.v2.BareMetalSolutionClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = baremetalsolutionModule.v2.BareMetalSolutionClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = baremetalsolutionModule.v2.BareMetalSolutionClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new baremetalsolutionModule.v2.BareMetalSolutionClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        assert.strictEqual(client.bareMetalSolutionStub, undefined);
        await client.initialize();
        assert(client.bareMetalSolutionStub);
    });

    it('has close method', () => {
        const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('getInstance', () => {
        it('invokes getInstance without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.GetInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Instance());
            client.innerApiCalls.getInstance = stubSimpleCall(expectedResponse);
            const [response] = await client.getInstance(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getInstance without error using callback', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.GetInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Instance());
            client.innerApiCalls.getInstance = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getInstance(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.baremetalsolution.v2.IInstance|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getInstance with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.GetInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getInstance = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getInstance(request), expectedError);
            assert((client.innerApiCalls.getInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getVolume', () => {
        it('invokes getVolume without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.GetVolumeRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Volume());
            client.innerApiCalls.getVolume = stubSimpleCall(expectedResponse);
            const [response] = await client.getVolume(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getVolume as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getVolume without error using callback', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.GetVolumeRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Volume());
            client.innerApiCalls.getVolume = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getVolume(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.baremetalsolution.v2.IVolume|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getVolume as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getVolume with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.GetVolumeRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getVolume = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getVolume(request), expectedError);
            assert((client.innerApiCalls.getVolume as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getNetwork', () => {
        it('invokes getNetwork without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.GetNetworkRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Network());
            client.innerApiCalls.getNetwork = stubSimpleCall(expectedResponse);
            const [response] = await client.getNetwork(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getNetwork as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getNetwork without error using callback', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.GetNetworkRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Network());
            client.innerApiCalls.getNetwork = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getNetwork(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.baremetalsolution.v2.INetwork|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getNetwork as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getNetwork with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.GetNetworkRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getNetwork = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getNetwork(request), expectedError);
            assert((client.innerApiCalls.getNetwork as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getSnapshotSchedulePolicy', () => {
        it('invokes getSnapshotSchedulePolicy without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.GetSnapshotSchedulePolicyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.SnapshotSchedulePolicy());
            client.innerApiCalls.getSnapshotSchedulePolicy = stubSimpleCall(expectedResponse);
            const [response] = await client.getSnapshotSchedulePolicy(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getSnapshotSchedulePolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getSnapshotSchedulePolicy without error using callback', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.GetSnapshotSchedulePolicyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.SnapshotSchedulePolicy());
            client.innerApiCalls.getSnapshotSchedulePolicy = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getSnapshotSchedulePolicy(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.baremetalsolution.v2.ISnapshotSchedulePolicy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getSnapshotSchedulePolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getSnapshotSchedulePolicy with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.GetSnapshotSchedulePolicyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getSnapshotSchedulePolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getSnapshotSchedulePolicy(request), expectedError);
            assert((client.innerApiCalls.getSnapshotSchedulePolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createSnapshotSchedulePolicy', () => {
        it('invokes createSnapshotSchedulePolicy without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.CreateSnapshotSchedulePolicyRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.SnapshotSchedulePolicy());
            client.innerApiCalls.createSnapshotSchedulePolicy = stubSimpleCall(expectedResponse);
            const [response] = await client.createSnapshotSchedulePolicy(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createSnapshotSchedulePolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createSnapshotSchedulePolicy without error using callback', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.CreateSnapshotSchedulePolicyRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.SnapshotSchedulePolicy());
            client.innerApiCalls.createSnapshotSchedulePolicy = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createSnapshotSchedulePolicy(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.baremetalsolution.v2.ISnapshotSchedulePolicy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createSnapshotSchedulePolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createSnapshotSchedulePolicy with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.CreateSnapshotSchedulePolicyRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createSnapshotSchedulePolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createSnapshotSchedulePolicy(request), expectedError);
            assert((client.innerApiCalls.createSnapshotSchedulePolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateSnapshotSchedulePolicy', () => {
        it('invokes updateSnapshotSchedulePolicy without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.UpdateSnapshotSchedulePolicyRequest());
            request.snapshotSchedulePolicy = {};
            request.snapshotSchedulePolicy.name = '';
            const expectedHeaderRequestParams = "snapshot_schedule_policy.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.SnapshotSchedulePolicy());
            client.innerApiCalls.updateSnapshotSchedulePolicy = stubSimpleCall(expectedResponse);
            const [response] = await client.updateSnapshotSchedulePolicy(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateSnapshotSchedulePolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateSnapshotSchedulePolicy without error using callback', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.UpdateSnapshotSchedulePolicyRequest());
            request.snapshotSchedulePolicy = {};
            request.snapshotSchedulePolicy.name = '';
            const expectedHeaderRequestParams = "snapshot_schedule_policy.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.SnapshotSchedulePolicy());
            client.innerApiCalls.updateSnapshotSchedulePolicy = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateSnapshotSchedulePolicy(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.baremetalsolution.v2.ISnapshotSchedulePolicy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateSnapshotSchedulePolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateSnapshotSchedulePolicy with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.UpdateSnapshotSchedulePolicyRequest());
            request.snapshotSchedulePolicy = {};
            request.snapshotSchedulePolicy.name = '';
            const expectedHeaderRequestParams = "snapshot_schedule_policy.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateSnapshotSchedulePolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateSnapshotSchedulePolicy(request), expectedError);
            assert((client.innerApiCalls.updateSnapshotSchedulePolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteSnapshotSchedulePolicy', () => {
        it('invokes deleteSnapshotSchedulePolicy without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.DeleteSnapshotSchedulePolicyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteSnapshotSchedulePolicy = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteSnapshotSchedulePolicy(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteSnapshotSchedulePolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteSnapshotSchedulePolicy without error using callback', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.DeleteSnapshotSchedulePolicyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteSnapshotSchedulePolicy = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteSnapshotSchedulePolicy(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteSnapshotSchedulePolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteSnapshotSchedulePolicy with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.DeleteSnapshotSchedulePolicyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteSnapshotSchedulePolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteSnapshotSchedulePolicy(request), expectedError);
            assert((client.innerApiCalls.deleteSnapshotSchedulePolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createVolumeSnapshot', () => {
        it('invokes createVolumeSnapshot without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.CreateVolumeSnapshotRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.VolumeSnapshot());
            client.innerApiCalls.createVolumeSnapshot = stubSimpleCall(expectedResponse);
            const [response] = await client.createVolumeSnapshot(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createVolumeSnapshot as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createVolumeSnapshot without error using callback', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.CreateVolumeSnapshotRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.VolumeSnapshot());
            client.innerApiCalls.createVolumeSnapshot = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createVolumeSnapshot(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createVolumeSnapshot as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createVolumeSnapshot with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.CreateVolumeSnapshotRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createVolumeSnapshot = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createVolumeSnapshot(request), expectedError);
            assert((client.innerApiCalls.createVolumeSnapshot as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteVolumeSnapshot', () => {
        it('invokes deleteVolumeSnapshot without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.DeleteVolumeSnapshotRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteVolumeSnapshot = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteVolumeSnapshot(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteVolumeSnapshot as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteVolumeSnapshot without error using callback', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.DeleteVolumeSnapshotRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteVolumeSnapshot = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteVolumeSnapshot(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteVolumeSnapshot as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteVolumeSnapshot with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.DeleteVolumeSnapshotRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteVolumeSnapshot = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteVolumeSnapshot(request), expectedError);
            assert((client.innerApiCalls.deleteVolumeSnapshot as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getVolumeSnapshot', () => {
        it('invokes getVolumeSnapshot without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.GetVolumeSnapshotRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.VolumeSnapshot());
            client.innerApiCalls.getVolumeSnapshot = stubSimpleCall(expectedResponse);
            const [response] = await client.getVolumeSnapshot(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getVolumeSnapshot as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getVolumeSnapshot without error using callback', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.GetVolumeSnapshotRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.VolumeSnapshot());
            client.innerApiCalls.getVolumeSnapshot = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getVolumeSnapshot(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getVolumeSnapshot as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getVolumeSnapshot with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.GetVolumeSnapshotRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getVolumeSnapshot = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getVolumeSnapshot(request), expectedError);
            assert((client.innerApiCalls.getVolumeSnapshot as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getLun', () => {
        it('invokes getLun without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.GetLunRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Lun());
            client.innerApiCalls.getLun = stubSimpleCall(expectedResponse);
            const [response] = await client.getLun(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getLun as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getLun without error using callback', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.GetLunRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Lun());
            client.innerApiCalls.getLun = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getLun(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.baremetalsolution.v2.ILun|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getLun as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getLun with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.GetLunRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getLun = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getLun(request), expectedError);
            assert((client.innerApiCalls.getLun as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('resetInstance', () => {
        it('invokes resetInstance without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ResetInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.resetInstance = stubLongRunningCall(expectedResponse);
            const [operation] = await client.resetInstance(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.resetInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes resetInstance without error using callback', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ResetInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.resetInstance = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.resetInstance(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.baremetalsolution.v2.IResetInstanceResponse, protos.google.cloud.baremetalsolution.v2.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.baremetalsolution.v2.IResetInstanceResponse, protos.google.cloud.baremetalsolution.v2.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.resetInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes resetInstance with call error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ResetInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.resetInstance = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.resetInstance(request), expectedError);
            assert((client.innerApiCalls.resetInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes resetInstance with LRO error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ResetInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.resetInstance = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.resetInstance(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.resetInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkResetInstanceProgress without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkResetInstanceProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkResetInstanceProgress with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkResetInstanceProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateVolume', () => {
        it('invokes updateVolume without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.UpdateVolumeRequest());
            request.volume = {};
            request.volume.name = '';
            const expectedHeaderRequestParams = "volume.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateVolume = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateVolume(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateVolume as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateVolume without error using callback', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.UpdateVolumeRequest());
            request.volume = {};
            request.volume.name = '';
            const expectedHeaderRequestParams = "volume.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateVolume = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateVolume(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.baremetalsolution.v2.IVolume, protos.google.cloud.baremetalsolution.v2.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.baremetalsolution.v2.IVolume, protos.google.cloud.baremetalsolution.v2.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateVolume as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateVolume with call error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.UpdateVolumeRequest());
            request.volume = {};
            request.volume.name = '';
            const expectedHeaderRequestParams = "volume.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateVolume = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateVolume(request), expectedError);
            assert((client.innerApiCalls.updateVolume as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateVolume with LRO error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.UpdateVolumeRequest());
            request.volume = {};
            request.volume.name = '';
            const expectedHeaderRequestParams = "volume.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateVolume = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateVolume(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.updateVolume as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkUpdateVolumeProgress without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateVolumeProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateVolumeProgress with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateVolumeProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('restoreVolumeSnapshot', () => {
        it('invokes restoreVolumeSnapshot without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.RestoreVolumeSnapshotRequest());
            request.volumeSnapshot = '';
            const expectedHeaderRequestParams = "volume_snapshot=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.restoreVolumeSnapshot = stubLongRunningCall(expectedResponse);
            const [operation] = await client.restoreVolumeSnapshot(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.restoreVolumeSnapshot as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes restoreVolumeSnapshot without error using callback', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.RestoreVolumeSnapshotRequest());
            request.volumeSnapshot = '';
            const expectedHeaderRequestParams = "volume_snapshot=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.restoreVolumeSnapshot = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.restoreVolumeSnapshot(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot, protos.google.cloud.baremetalsolution.v2.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot, protos.google.cloud.baremetalsolution.v2.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.restoreVolumeSnapshot as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes restoreVolumeSnapshot with call error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.RestoreVolumeSnapshotRequest());
            request.volumeSnapshot = '';
            const expectedHeaderRequestParams = "volume_snapshot=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.restoreVolumeSnapshot = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.restoreVolumeSnapshot(request), expectedError);
            assert((client.innerApiCalls.restoreVolumeSnapshot as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes restoreVolumeSnapshot with LRO error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.RestoreVolumeSnapshotRequest());
            request.volumeSnapshot = '';
            const expectedHeaderRequestParams = "volume_snapshot=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.restoreVolumeSnapshot = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.restoreVolumeSnapshot(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.restoreVolumeSnapshot as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkRestoreVolumeSnapshotProgress without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkRestoreVolumeSnapshotProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkRestoreVolumeSnapshotProgress with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkRestoreVolumeSnapshotProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('listInstances', () => {
        it('invokes listInstances without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListInstancesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Instance()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Instance()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Instance()),
            ];
            client.innerApiCalls.listInstances = stubSimpleCall(expectedResponse);
            const [response] = await client.listInstances(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listInstances as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listInstances without error using callback', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListInstancesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Instance()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Instance()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Instance()),
            ];
            client.innerApiCalls.listInstances = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listInstances(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.baremetalsolution.v2.IInstance[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listInstances as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listInstances with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListInstancesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listInstances = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listInstances(request), expectedError);
            assert((client.innerApiCalls.listInstances as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listInstancesStream without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListInstancesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Instance()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Instance()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Instance()),
            ];
            client.descriptors.page.listInstances.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listInstancesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.baremetalsolution.v2.Instance[] = [];
                stream.on('data', (response: protos.google.cloud.baremetalsolution.v2.Instance) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listInstances.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listInstances, request));
            assert.strictEqual(
                (client.descriptors.page.listInstances.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listInstancesStream with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListInstancesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listInstances.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listInstancesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.baremetalsolution.v2.Instance[] = [];
                stream.on('data', (response: protos.google.cloud.baremetalsolution.v2.Instance) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listInstances.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listInstances, request));
            assert.strictEqual(
                (client.descriptors.page.listInstances.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listInstances without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListInstancesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Instance()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Instance()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Instance()),
            ];
            client.descriptors.page.listInstances.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.baremetalsolution.v2.IInstance[] = [];
            const iterable = client.listInstancesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listInstances.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listInstances.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listInstances with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListInstancesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listInstances.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listInstancesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.baremetalsolution.v2.IInstance[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listInstances.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listInstances.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listVolumes', () => {
        it('invokes listVolumes without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListVolumesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Volume()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Volume()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Volume()),
            ];
            client.innerApiCalls.listVolumes = stubSimpleCall(expectedResponse);
            const [response] = await client.listVolumes(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listVolumes as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listVolumes without error using callback', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListVolumesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Volume()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Volume()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Volume()),
            ];
            client.innerApiCalls.listVolumes = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listVolumes(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.baremetalsolution.v2.IVolume[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listVolumes as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listVolumes with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListVolumesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listVolumes = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listVolumes(request), expectedError);
            assert((client.innerApiCalls.listVolumes as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listVolumesStream without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListVolumesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Volume()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Volume()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Volume()),
            ];
            client.descriptors.page.listVolumes.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listVolumesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.baremetalsolution.v2.Volume[] = [];
                stream.on('data', (response: protos.google.cloud.baremetalsolution.v2.Volume) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listVolumes.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listVolumes, request));
            assert.strictEqual(
                (client.descriptors.page.listVolumes.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listVolumesStream with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListVolumesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listVolumes.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listVolumesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.baremetalsolution.v2.Volume[] = [];
                stream.on('data', (response: protos.google.cloud.baremetalsolution.v2.Volume) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listVolumes.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listVolumes, request));
            assert.strictEqual(
                (client.descriptors.page.listVolumes.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listVolumes without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListVolumesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Volume()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Volume()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Volume()),
            ];
            client.descriptors.page.listVolumes.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.baremetalsolution.v2.IVolume[] = [];
            const iterable = client.listVolumesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listVolumes.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listVolumes.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listVolumes with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListVolumesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listVolumes.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listVolumesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.baremetalsolution.v2.IVolume[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listVolumes.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listVolumes.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listNetworks', () => {
        it('invokes listNetworks without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListNetworksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Network()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Network()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Network()),
            ];
            client.innerApiCalls.listNetworks = stubSimpleCall(expectedResponse);
            const [response] = await client.listNetworks(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listNetworks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listNetworks without error using callback', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListNetworksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Network()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Network()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Network()),
            ];
            client.innerApiCalls.listNetworks = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listNetworks(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.baremetalsolution.v2.INetwork[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listNetworks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listNetworks with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListNetworksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listNetworks = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listNetworks(request), expectedError);
            assert((client.innerApiCalls.listNetworks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listNetworksStream without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListNetworksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Network()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Network()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Network()),
            ];
            client.descriptors.page.listNetworks.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listNetworksStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.baremetalsolution.v2.Network[] = [];
                stream.on('data', (response: protos.google.cloud.baremetalsolution.v2.Network) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listNetworks.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listNetworks, request));
            assert.strictEqual(
                (client.descriptors.page.listNetworks.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listNetworksStream with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListNetworksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listNetworks.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listNetworksStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.baremetalsolution.v2.Network[] = [];
                stream.on('data', (response: protos.google.cloud.baremetalsolution.v2.Network) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listNetworks.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listNetworks, request));
            assert.strictEqual(
                (client.descriptors.page.listNetworks.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listNetworks without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListNetworksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Network()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Network()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Network()),
            ];
            client.descriptors.page.listNetworks.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.baremetalsolution.v2.INetwork[] = [];
            const iterable = client.listNetworksAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listNetworks.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listNetworks.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listNetworks with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListNetworksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listNetworks.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listNetworksAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.baremetalsolution.v2.INetwork[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listNetworks.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listNetworks.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listSnapshotSchedulePolicies', () => {
        it('invokes listSnapshotSchedulePolicies without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListSnapshotSchedulePoliciesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.SnapshotSchedulePolicy()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.SnapshotSchedulePolicy()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.SnapshotSchedulePolicy()),
            ];
            client.innerApiCalls.listSnapshotSchedulePolicies = stubSimpleCall(expectedResponse);
            const [response] = await client.listSnapshotSchedulePolicies(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listSnapshotSchedulePolicies as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listSnapshotSchedulePolicies without error using callback', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListSnapshotSchedulePoliciesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.SnapshotSchedulePolicy()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.SnapshotSchedulePolicy()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.SnapshotSchedulePolicy()),
            ];
            client.innerApiCalls.listSnapshotSchedulePolicies = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listSnapshotSchedulePolicies(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.baremetalsolution.v2.ISnapshotSchedulePolicy[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listSnapshotSchedulePolicies as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listSnapshotSchedulePolicies with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListSnapshotSchedulePoliciesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listSnapshotSchedulePolicies = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listSnapshotSchedulePolicies(request), expectedError);
            assert((client.innerApiCalls.listSnapshotSchedulePolicies as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listSnapshotSchedulePoliciesStream without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListSnapshotSchedulePoliciesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.SnapshotSchedulePolicy()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.SnapshotSchedulePolicy()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.SnapshotSchedulePolicy()),
            ];
            client.descriptors.page.listSnapshotSchedulePolicies.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listSnapshotSchedulePoliciesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.baremetalsolution.v2.SnapshotSchedulePolicy[] = [];
                stream.on('data', (response: protos.google.cloud.baremetalsolution.v2.SnapshotSchedulePolicy) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listSnapshotSchedulePolicies.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listSnapshotSchedulePolicies, request));
            assert.strictEqual(
                (client.descriptors.page.listSnapshotSchedulePolicies.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listSnapshotSchedulePoliciesStream with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListSnapshotSchedulePoliciesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listSnapshotSchedulePolicies.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listSnapshotSchedulePoliciesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.baremetalsolution.v2.SnapshotSchedulePolicy[] = [];
                stream.on('data', (response: protos.google.cloud.baremetalsolution.v2.SnapshotSchedulePolicy) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listSnapshotSchedulePolicies.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listSnapshotSchedulePolicies, request));
            assert.strictEqual(
                (client.descriptors.page.listSnapshotSchedulePolicies.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listSnapshotSchedulePolicies without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListSnapshotSchedulePoliciesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.SnapshotSchedulePolicy()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.SnapshotSchedulePolicy()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.SnapshotSchedulePolicy()),
            ];
            client.descriptors.page.listSnapshotSchedulePolicies.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.baremetalsolution.v2.ISnapshotSchedulePolicy[] = [];
            const iterable = client.listSnapshotSchedulePoliciesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listSnapshotSchedulePolicies.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listSnapshotSchedulePolicies.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listSnapshotSchedulePolicies with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListSnapshotSchedulePoliciesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listSnapshotSchedulePolicies.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listSnapshotSchedulePoliciesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.baremetalsolution.v2.ISnapshotSchedulePolicy[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listSnapshotSchedulePolicies.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listSnapshotSchedulePolicies.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listVolumeSnapshots', () => {
        it('invokes listVolumeSnapshots without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListVolumeSnapshotsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.VolumeSnapshot()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.VolumeSnapshot()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.VolumeSnapshot()),
            ];
            client.innerApiCalls.listVolumeSnapshots = stubSimpleCall(expectedResponse);
            const [response] = await client.listVolumeSnapshots(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listVolumeSnapshots as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listVolumeSnapshots without error using callback', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListVolumeSnapshotsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.VolumeSnapshot()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.VolumeSnapshot()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.VolumeSnapshot()),
            ];
            client.innerApiCalls.listVolumeSnapshots = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listVolumeSnapshots(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listVolumeSnapshots as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listVolumeSnapshots with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListVolumeSnapshotsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listVolumeSnapshots = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listVolumeSnapshots(request), expectedError);
            assert((client.innerApiCalls.listVolumeSnapshots as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listVolumeSnapshotsStream without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListVolumeSnapshotsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.VolumeSnapshot()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.VolumeSnapshot()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.VolumeSnapshot()),
            ];
            client.descriptors.page.listVolumeSnapshots.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listVolumeSnapshotsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.baremetalsolution.v2.VolumeSnapshot[] = [];
                stream.on('data', (response: protos.google.cloud.baremetalsolution.v2.VolumeSnapshot) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listVolumeSnapshots.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listVolumeSnapshots, request));
            assert.strictEqual(
                (client.descriptors.page.listVolumeSnapshots.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listVolumeSnapshotsStream with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListVolumeSnapshotsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listVolumeSnapshots.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listVolumeSnapshotsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.baremetalsolution.v2.VolumeSnapshot[] = [];
                stream.on('data', (response: protos.google.cloud.baremetalsolution.v2.VolumeSnapshot) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listVolumeSnapshots.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listVolumeSnapshots, request));
            assert.strictEqual(
                (client.descriptors.page.listVolumeSnapshots.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listVolumeSnapshots without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListVolumeSnapshotsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.VolumeSnapshot()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.VolumeSnapshot()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.VolumeSnapshot()),
            ];
            client.descriptors.page.listVolumeSnapshots.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot[] = [];
            const iterable = client.listVolumeSnapshotsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listVolumeSnapshots.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listVolumeSnapshots.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listVolumeSnapshots with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListVolumeSnapshotsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listVolumeSnapshots.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listVolumeSnapshotsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listVolumeSnapshots.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listVolumeSnapshots.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listLuns', () => {
        it('invokes listLuns without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListLunsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Lun()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Lun()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Lun()),
            ];
            client.innerApiCalls.listLuns = stubSimpleCall(expectedResponse);
            const [response] = await client.listLuns(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listLuns as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listLuns without error using callback', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListLunsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Lun()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Lun()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Lun()),
            ];
            client.innerApiCalls.listLuns = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listLuns(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.baremetalsolution.v2.ILun[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listLuns as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listLuns with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListLunsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listLuns = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listLuns(request), expectedError);
            assert((client.innerApiCalls.listLuns as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listLunsStream without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListLunsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Lun()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Lun()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Lun()),
            ];
            client.descriptors.page.listLuns.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listLunsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.baremetalsolution.v2.Lun[] = [];
                stream.on('data', (response: protos.google.cloud.baremetalsolution.v2.Lun) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listLuns.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listLuns, request));
            assert.strictEqual(
                (client.descriptors.page.listLuns.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listLunsStream with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListLunsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listLuns.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listLunsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.baremetalsolution.v2.Lun[] = [];
                stream.on('data', (response: protos.google.cloud.baremetalsolution.v2.Lun) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listLuns.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listLuns, request));
            assert.strictEqual(
                (client.descriptors.page.listLuns.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listLuns without error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListLunsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Lun()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Lun()),
              generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.Lun()),
            ];
            client.descriptors.page.listLuns.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.baremetalsolution.v2.ILun[] = [];
            const iterable = client.listLunsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listLuns.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listLuns.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listLuns with error', async () => {
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.baremetalsolution.v2.ListLunsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listLuns.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listLunsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.baremetalsolution.v2.ILun[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listLuns.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listLuns.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('Path templates', () => {

        describe('instance', () => {
            const fakePath = "/rendered/path/instance";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                instance: "instanceValue",
            };
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.instancePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.instancePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('instancePath', () => {
                const result = client.instancePath("projectValue", "locationValue", "instanceValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.instancePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromInstanceName', () => {
                const result = client.matchProjectFromInstanceName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.instancePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromInstanceName', () => {
                const result = client.matchLocationFromInstanceName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.instancePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchInstanceFromInstanceName', () => {
                const result = client.matchInstanceFromInstanceName(fakePath);
                assert.strictEqual(result, "instanceValue");
                assert((client.pathTemplates.instancePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('location', () => {
            const fakePath = "/rendered/path/location";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
            };
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.locationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.locationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('locationPath', () => {
                const result = client.locationPath("projectValue", "locationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.locationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromLocationName', () => {
                const result = client.matchProjectFromLocationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromLocationName', () => {
                const result = client.matchLocationFromLocationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('lun', () => {
            const fakePath = "/rendered/path/lun";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                volume: "volumeValue",
                lun: "lunValue",
            };
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.lunPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.lunPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('lunPath', () => {
                const result = client.lunPath("projectValue", "locationValue", "volumeValue", "lunValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.lunPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromLunName', () => {
                const result = client.matchProjectFromLunName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.lunPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromLunName', () => {
                const result = client.matchLocationFromLunName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.lunPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchVolumeFromLunName', () => {
                const result = client.matchVolumeFromLunName(fakePath);
                assert.strictEqual(result, "volumeValue");
                assert((client.pathTemplates.lunPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLunFromLunName', () => {
                const result = client.matchLunFromLunName(fakePath);
                assert.strictEqual(result, "lunValue");
                assert((client.pathTemplates.lunPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('network', () => {
            const fakePath = "/rendered/path/network";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                network: "networkValue",
            };
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.networkPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.networkPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('networkPath', () => {
                const result = client.networkPath("projectValue", "locationValue", "networkValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.networkPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromNetworkName', () => {
                const result = client.matchProjectFromNetworkName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.networkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromNetworkName', () => {
                const result = client.matchLocationFromNetworkName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.networkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchNetworkFromNetworkName', () => {
                const result = client.matchNetworkFromNetworkName(fakePath);
                assert.strictEqual(result, "networkValue");
                assert((client.pathTemplates.networkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('snapshotSchedulePolicy', () => {
            const fakePath = "/rendered/path/snapshotSchedulePolicy";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                snapshot_schedule_policy: "snapshotSchedulePolicyValue",
            };
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.snapshotSchedulePolicyPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.snapshotSchedulePolicyPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('snapshotSchedulePolicyPath', () => {
                const result = client.snapshotSchedulePolicyPath("projectValue", "locationValue", "snapshotSchedulePolicyValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.snapshotSchedulePolicyPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromSnapshotSchedulePolicyName', () => {
                const result = client.matchProjectFromSnapshotSchedulePolicyName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.snapshotSchedulePolicyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromSnapshotSchedulePolicyName', () => {
                const result = client.matchLocationFromSnapshotSchedulePolicyName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.snapshotSchedulePolicyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSnapshotSchedulePolicyFromSnapshotSchedulePolicyName', () => {
                const result = client.matchSnapshotSchedulePolicyFromSnapshotSchedulePolicyName(fakePath);
                assert.strictEqual(result, "snapshotSchedulePolicyValue");
                assert((client.pathTemplates.snapshotSchedulePolicyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('volume', () => {
            const fakePath = "/rendered/path/volume";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                volume: "volumeValue",
            };
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.volumePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.volumePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('volumePath', () => {
                const result = client.volumePath("projectValue", "locationValue", "volumeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.volumePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromVolumeName', () => {
                const result = client.matchProjectFromVolumeName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.volumePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromVolumeName', () => {
                const result = client.matchLocationFromVolumeName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.volumePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchVolumeFromVolumeName', () => {
                const result = client.matchVolumeFromVolumeName(fakePath);
                assert.strictEqual(result, "volumeValue");
                assert((client.pathTemplates.volumePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('volumeSnapshot', () => {
            const fakePath = "/rendered/path/volumeSnapshot";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                volume: "volumeValue",
                snapshot: "snapshotValue",
            };
            const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.volumeSnapshotPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.volumeSnapshotPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('volumeSnapshotPath', () => {
                const result = client.volumeSnapshotPath("projectValue", "locationValue", "volumeValue", "snapshotValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.volumeSnapshotPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromVolumeSnapshotName', () => {
                const result = client.matchProjectFromVolumeSnapshotName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.volumeSnapshotPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromVolumeSnapshotName', () => {
                const result = client.matchLocationFromVolumeSnapshotName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.volumeSnapshotPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchVolumeFromVolumeSnapshotName', () => {
                const result = client.matchVolumeFromVolumeSnapshotName(fakePath);
                assert.strictEqual(result, "volumeValue");
                assert((client.pathTemplates.volumeSnapshotPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSnapshotFromVolumeSnapshotName', () => {
                const result = client.matchSnapshotFromVolumeSnapshotName(fakePath);
                assert.strictEqual(result, "snapshotValue");
                assert((client.pathTemplates.volumeSnapshotPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
