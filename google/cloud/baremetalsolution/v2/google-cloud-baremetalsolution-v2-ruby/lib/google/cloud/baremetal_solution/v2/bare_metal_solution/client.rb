# frozen_string_literal: true

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/cloud/errors"
require "google/cloud/baremetalsolution/v2/baremetalsolution_pb"

module Google
  module Cloud
    module BaremetalSolution
      module V2
        module BareMetalSolution
          ##
          # Client for the BareMetalSolution service.
          #
          # Performs management operations on Bare Metal Solution servers.
          #
          # The `baremetalsolution.googleapis.com` service provides management
          # capabilities for Bare Metal Solution servers. To access the API methods, you
          # must assign Bare Metal Solution IAM roles containing the desired permissions
          # to your staff in your Google Cloud project. You must also enable the Bare
          # Metal Solution API. Once enabled, the methods act
          # upon specific servers in your Bare Metal Solution environment.
          #
          class Client
            include Paths

            # @private
            attr_reader :bare_metal_solution_stub

            ##
            # Configure the BareMetalSolution Client class.
            #
            # See {::Google::Cloud::BaremetalSolution::V2::BareMetalSolution::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @example
            #
            #   # Modify the configuration for all BareMetalSolution clients
            #   ::Google::Cloud::BaremetalSolution::V2::BareMetalSolution::Client.configure do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def self.configure
              @configure ||= begin
                namespace = ["Google", "Cloud", "BaremetalSolution", "V2"]
                parent_config = while namespace.any?
                                  parent_name = namespace.join "::"
                                  parent_const = const_get parent_name
                                  break parent_const.configure if parent_const.respond_to? :configure
                                  namespace.pop
                                end
                default_config = Client::Configuration.new parent_config

                default_config.timeout = 60.0

                default_config
              end
              yield @configure if block_given?
              @configure
            end

            ##
            # Configure the BareMetalSolution Client instance.
            #
            # The configuration is set to the derived mode, meaning that values can be changed,
            # but structural changes (adding new fields, etc.) are not allowed. Structural changes
            # should be made on {Client.configure}.
            #
            # See {::Google::Cloud::BaremetalSolution::V2::BareMetalSolution::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def configure
              yield @config if block_given?
              @config
            end

            ##
            # Create a new BareMetalSolution client object.
            #
            # @example
            #
            #   # Create a client using the default configuration
            #   client = ::Google::Cloud::BaremetalSolution::V2::BareMetalSolution::Client.new
            #
            #   # Create a client using a custom configuration
            #   client = ::Google::Cloud::BaremetalSolution::V2::BareMetalSolution::Client.new do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the BareMetalSolution client.
            # @yieldparam config [Client::Configuration]
            #
            def initialize
              # These require statements are intentionally placed here to initialize
              # the gRPC module only when it's required.
              # See https://github.com/googleapis/toolkit/issues/446
              require "gapic/grpc"
              require "google/cloud/baremetalsolution/v2/baremetalsolution_services_pb"

              # Create the configuration object
              @config = Configuration.new Client.configure

              # Yield the configuration if needed
              yield @config if block_given?

              # Create credentials
              credentials = @config.credentials
              # Use self-signed JWT if the endpoint is unchanged from default,
              # but only if the default endpoint does not have a region prefix.
              enable_self_signed_jwt = @config.endpoint == Client.configure.endpoint &&
                                       !@config.endpoint.split(".").first.include?("-")
              credentials ||= Credentials.default scope: @config.scope,
                                                  enable_self_signed_jwt: enable_self_signed_jwt
              if credentials.is_a?(::String) || credentials.is_a?(::Hash)
                credentials = Credentials.new credentials, scope: @config.scope
              end
              @quota_project_id = @config.quota_project
              @quota_project_id ||= credentials.quota_project_id if credentials.respond_to? :quota_project_id

              @operations_client = Operations.new do |config|
                config.credentials = credentials
                config.endpoint = @config.endpoint
              end

              @bare_metal_solution_stub = ::Gapic::ServiceStub.new(
                ::Google::Cloud::BaremetalSolution::V2::BareMetalSolution::Stub,
                credentials:  credentials,
                endpoint:     @config.endpoint,
                channel_args: @config.channel_args,
                interceptors: @config.interceptors
              )
            end

            ##
            # Get the associated client for long-running operations.
            #
            # @return [::Google::Cloud::BaremetalSolution::V2::BareMetalSolution::Operations]
            #
            attr_reader :operations_client

            # Service calls

            ##
            # List servers in a given project and location.
            #
            # @overload list_instances(request, options = nil)
            #   Pass arguments to `list_instances` via a request object, either of type
            #   {::Google::Cloud::BaremetalSolution::V2::ListInstancesRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::BaremetalSolution::V2::ListInstancesRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_instances(parent: nil, page_size: nil, page_token: nil)
            #   Pass arguments to `list_instances` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. Parent value for ListInstancesRequest.
            #   @param page_size [::Integer]
            #     Requested page size. Server may return fewer items than requested.
            #     If unspecified, the server will pick an appropriate default.
            #   @param page_token [::String]
            #     A token identifying a page of results from the server.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::BaremetalSolution::V2::Instance>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Cloud::BaremetalSolution::V2::Instance>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/baremetal_solution/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::BaremetalSolution::V2::BareMetalSolution::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::BaremetalSolution::V2::ListInstancesRequest.new
            #
            #   # Call the list_instances method.
            #   result = client.list_instances request
            #
            #   # The returned object is of type Gapic::PagedEnumerable. You can
            #   # iterate over all elements by calling #each, and the enumerable
            #   # will lazily make API calls to fetch subsequent pages. Other
            #   # methods are also available for managing paging directly.
            #   result.each do |response|
            #     # Each element is of type ::Google::Cloud::BaremetalSolution::V2::Instance.
            #     p response
            #   end
            #
            def list_instances request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::BaremetalSolution::V2::ListInstancesRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_instances.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Baremetalsolution::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.list_instances.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_instances.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @bare_metal_solution_stub.call_rpc :list_instances, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @bare_metal_solution_stub, :list_instances, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Get details about a single server.
            #
            # @overload get_instance(request, options = nil)
            #   Pass arguments to `get_instance` via a request object, either of type
            #   {::Google::Cloud::BaremetalSolution::V2::GetInstanceRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::BaremetalSolution::V2::GetInstanceRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_instance(name: nil)
            #   Pass arguments to `get_instance` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. Name of the resource.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::BaremetalSolution::V2::Instance]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::BaremetalSolution::V2::Instance]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/baremetal_solution/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::BaremetalSolution::V2::BareMetalSolution::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::BaremetalSolution::V2::GetInstanceRequest.new
            #
            #   # Call the get_instance method.
            #   result = client.get_instance request
            #
            #   # The returned object is of type Google::Cloud::BaremetalSolution::V2::Instance.
            #   p result
            #
            def get_instance request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::BaremetalSolution::V2::GetInstanceRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_instance.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Baremetalsolution::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.name
                header_params["name"] = request.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get_instance.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_instance.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @bare_metal_solution_stub.call_rpc :get_instance, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Perform an ungraceful, hard reset on a server. Equivalent to shutting the
            # power off and then turning it back on.
            #
            # @overload reset_instance(request, options = nil)
            #   Pass arguments to `reset_instance` via a request object, either of type
            #   {::Google::Cloud::BaremetalSolution::V2::ResetInstanceRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::BaremetalSolution::V2::ResetInstanceRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload reset_instance(name: nil)
            #   Pass arguments to `reset_instance` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. Name of the resource.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/baremetal_solution/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::BaremetalSolution::V2::BareMetalSolution::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::BaremetalSolution::V2::ResetInstanceRequest.new
            #
            #   # Call the reset_instance method.
            #   result = client.reset_instance request
            #
            #   # The returned object is of type Gapic::Operation. You can use this
            #   # object to check the status of an operation, cancel it, or wait
            #   # for results. Here is how to block until completion:
            #   result.wait_until_done! timeout: 60
            #   if result.response?
            #     p result.response
            #   else
            #     puts "Error!"
            #   end
            #
            def reset_instance request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::BaremetalSolution::V2::ResetInstanceRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.reset_instance.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Baremetalsolution::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.name
                header_params["name"] = request.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.reset_instance.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.reset_instance.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @bare_metal_solution_stub.call_rpc :reset_instance, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # List storage volumes in a given project and location.
            #
            # @overload list_volumes(request, options = nil)
            #   Pass arguments to `list_volumes` via a request object, either of type
            #   {::Google::Cloud::BaremetalSolution::V2::ListVolumesRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::BaremetalSolution::V2::ListVolumesRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_volumes(parent: nil, page_size: nil, page_token: nil)
            #   Pass arguments to `list_volumes` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. Parent value for ListVolumesRequest.
            #   @param page_size [::Integer]
            #     Requested page size. The server might return fewer items than requested.
            #     If unspecified, server will pick an appropriate default.
            #   @param page_token [::String]
            #     A token identifying a page of results from the server.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::BaremetalSolution::V2::Volume>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Cloud::BaremetalSolution::V2::Volume>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/baremetal_solution/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::BaremetalSolution::V2::BareMetalSolution::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::BaremetalSolution::V2::ListVolumesRequest.new
            #
            #   # Call the list_volumes method.
            #   result = client.list_volumes request
            #
            #   # The returned object is of type Gapic::PagedEnumerable. You can
            #   # iterate over all elements by calling #each, and the enumerable
            #   # will lazily make API calls to fetch subsequent pages. Other
            #   # methods are also available for managing paging directly.
            #   result.each do |response|
            #     # Each element is of type ::Google::Cloud::BaremetalSolution::V2::Volume.
            #     p response
            #   end
            #
            def list_volumes request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::BaremetalSolution::V2::ListVolumesRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_volumes.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Baremetalsolution::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.list_volumes.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_volumes.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @bare_metal_solution_stub.call_rpc :list_volumes, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @bare_metal_solution_stub, :list_volumes, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Get details of a single storage volume.
            #
            # @overload get_volume(request, options = nil)
            #   Pass arguments to `get_volume` via a request object, either of type
            #   {::Google::Cloud::BaremetalSolution::V2::GetVolumeRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::BaremetalSolution::V2::GetVolumeRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_volume(name: nil)
            #   Pass arguments to `get_volume` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. Name of the resource.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::BaremetalSolution::V2::Volume]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::BaremetalSolution::V2::Volume]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/baremetal_solution/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::BaremetalSolution::V2::BareMetalSolution::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::BaremetalSolution::V2::GetVolumeRequest.new
            #
            #   # Call the get_volume method.
            #   result = client.get_volume request
            #
            #   # The returned object is of type Google::Cloud::BaremetalSolution::V2::Volume.
            #   p result
            #
            def get_volume request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::BaremetalSolution::V2::GetVolumeRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_volume.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Baremetalsolution::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.name
                header_params["name"] = request.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get_volume.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_volume.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @bare_metal_solution_stub.call_rpc :get_volume, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Update details of a single storage volume.
            #
            # @overload update_volume(request, options = nil)
            #   Pass arguments to `update_volume` via a request object, either of type
            #   {::Google::Cloud::BaremetalSolution::V2::UpdateVolumeRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::BaremetalSolution::V2::UpdateVolumeRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload update_volume(volume: nil, update_mask: nil)
            #   Pass arguments to `update_volume` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param volume [::Google::Cloud::BaremetalSolution::V2::Volume, ::Hash]
            #     Required. The volume to update.
            #
            #     The `name` field is used to identify the volume to update.
            #     Format: projects/\\{project}/locations/\\{location}/volumes/\\{volume}
            #   @param update_mask [::Google::Protobuf::FieldMask, ::Hash]
            #     The list of fields to update.
            #     The only currently supported fields are:
            #       `snapshot_auto_delete_behavior`
            #       `snapshot_schedule_policy_name`
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/baremetal_solution/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::BaremetalSolution::V2::BareMetalSolution::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::BaremetalSolution::V2::UpdateVolumeRequest.new
            #
            #   # Call the update_volume method.
            #   result = client.update_volume request
            #
            #   # The returned object is of type Gapic::Operation. You can use this
            #   # object to check the status of an operation, cancel it, or wait
            #   # for results. Here is how to block until completion:
            #   result.wait_until_done! timeout: 60
            #   if result.response?
            #     p result.response
            #   else
            #     puts "Error!"
            #   end
            #
            def update_volume request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::BaremetalSolution::V2::UpdateVolumeRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.update_volume.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Baremetalsolution::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.volume&.name
                header_params["volume.name"] = request.volume.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.update_volume.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.update_volume.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @bare_metal_solution_stub.call_rpc :update_volume, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # List network in a given project and location.
            #
            # @overload list_networks(request, options = nil)
            #   Pass arguments to `list_networks` via a request object, either of type
            #   {::Google::Cloud::BaremetalSolution::V2::ListNetworksRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::BaremetalSolution::V2::ListNetworksRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_networks(parent: nil, page_size: nil, page_token: nil)
            #   Pass arguments to `list_networks` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. Parent value for ListNetworksRequest.
            #   @param page_size [::Integer]
            #     Requested page size. The server might return fewer items than requested.
            #     If unspecified, server will pick an appropriate default.
            #   @param page_token [::String]
            #     A token identifying a page of results from the server.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::BaremetalSolution::V2::Network>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Cloud::BaremetalSolution::V2::Network>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/baremetal_solution/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::BaremetalSolution::V2::BareMetalSolution::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::BaremetalSolution::V2::ListNetworksRequest.new
            #
            #   # Call the list_networks method.
            #   result = client.list_networks request
            #
            #   # The returned object is of type Gapic::PagedEnumerable. You can
            #   # iterate over all elements by calling #each, and the enumerable
            #   # will lazily make API calls to fetch subsequent pages. Other
            #   # methods are also available for managing paging directly.
            #   result.each do |response|
            #     # Each element is of type ::Google::Cloud::BaremetalSolution::V2::Network.
            #     p response
            #   end
            #
            def list_networks request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::BaremetalSolution::V2::ListNetworksRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_networks.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Baremetalsolution::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.list_networks.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_networks.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @bare_metal_solution_stub.call_rpc :list_networks, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @bare_metal_solution_stub, :list_networks, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Get details of a single network.
            #
            # @overload get_network(request, options = nil)
            #   Pass arguments to `get_network` via a request object, either of type
            #   {::Google::Cloud::BaremetalSolution::V2::GetNetworkRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::BaremetalSolution::V2::GetNetworkRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_network(name: nil)
            #   Pass arguments to `get_network` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. Name of the resource.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::BaremetalSolution::V2::Network]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::BaremetalSolution::V2::Network]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/baremetal_solution/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::BaremetalSolution::V2::BareMetalSolution::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::BaremetalSolution::V2::GetNetworkRequest.new
            #
            #   # Call the get_network method.
            #   result = client.get_network request
            #
            #   # The returned object is of type Google::Cloud::BaremetalSolution::V2::Network.
            #   p result
            #
            def get_network request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::BaremetalSolution::V2::GetNetworkRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_network.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Baremetalsolution::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.name
                header_params["name"] = request.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get_network.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_network.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @bare_metal_solution_stub.call_rpc :get_network, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # List snapshot schedule policies in a given project and location.
            #
            # @overload list_snapshot_schedule_policies(request, options = nil)
            #   Pass arguments to `list_snapshot_schedule_policies` via a request object, either of type
            #   {::Google::Cloud::BaremetalSolution::V2::ListSnapshotSchedulePoliciesRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::BaremetalSolution::V2::ListSnapshotSchedulePoliciesRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_snapshot_schedule_policies(parent: nil, page_size: nil, page_token: nil)
            #   Pass arguments to `list_snapshot_schedule_policies` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The parent project containing the Snapshot Schedule Policies.
            #   @param page_size [::Integer]
            #     The maximum number of items to return.
            #   @param page_token [::String]
            #     The next_page_token value returned from a previous List request, if any.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::BaremetalSolution::V2::SnapshotSchedulePolicy>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Cloud::BaremetalSolution::V2::SnapshotSchedulePolicy>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/baremetal_solution/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::BaremetalSolution::V2::BareMetalSolution::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::BaremetalSolution::V2::ListSnapshotSchedulePoliciesRequest.new
            #
            #   # Call the list_snapshot_schedule_policies method.
            #   result = client.list_snapshot_schedule_policies request
            #
            #   # The returned object is of type Gapic::PagedEnumerable. You can
            #   # iterate over all elements by calling #each, and the enumerable
            #   # will lazily make API calls to fetch subsequent pages. Other
            #   # methods are also available for managing paging directly.
            #   result.each do |response|
            #     # Each element is of type ::Google::Cloud::BaremetalSolution::V2::SnapshotSchedulePolicy.
            #     p response
            #   end
            #
            def list_snapshot_schedule_policies request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::BaremetalSolution::V2::ListSnapshotSchedulePoliciesRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_snapshot_schedule_policies.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Baremetalsolution::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.list_snapshot_schedule_policies.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_snapshot_schedule_policies.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @bare_metal_solution_stub.call_rpc :list_snapshot_schedule_policies, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @bare_metal_solution_stub, :list_snapshot_schedule_policies, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Get details of a single snapshot schedule policy.
            #
            # @overload get_snapshot_schedule_policy(request, options = nil)
            #   Pass arguments to `get_snapshot_schedule_policy` via a request object, either of type
            #   {::Google::Cloud::BaremetalSolution::V2::GetSnapshotSchedulePolicyRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::BaremetalSolution::V2::GetSnapshotSchedulePolicyRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_snapshot_schedule_policy(name: nil)
            #   Pass arguments to `get_snapshot_schedule_policy` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. Name of the resource.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::BaremetalSolution::V2::SnapshotSchedulePolicy]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::BaremetalSolution::V2::SnapshotSchedulePolicy]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/baremetal_solution/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::BaremetalSolution::V2::BareMetalSolution::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::BaremetalSolution::V2::GetSnapshotSchedulePolicyRequest.new
            #
            #   # Call the get_snapshot_schedule_policy method.
            #   result = client.get_snapshot_schedule_policy request
            #
            #   # The returned object is of type Google::Cloud::BaremetalSolution::V2::SnapshotSchedulePolicy.
            #   p result
            #
            def get_snapshot_schedule_policy request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::BaremetalSolution::V2::GetSnapshotSchedulePolicyRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_snapshot_schedule_policy.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Baremetalsolution::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.name
                header_params["name"] = request.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get_snapshot_schedule_policy.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_snapshot_schedule_policy.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @bare_metal_solution_stub.call_rpc :get_snapshot_schedule_policy, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Create a snapshot schedule policy in the specified project.
            #
            # @overload create_snapshot_schedule_policy(request, options = nil)
            #   Pass arguments to `create_snapshot_schedule_policy` via a request object, either of type
            #   {::Google::Cloud::BaremetalSolution::V2::CreateSnapshotSchedulePolicyRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::BaremetalSolution::V2::CreateSnapshotSchedulePolicyRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload create_snapshot_schedule_policy(parent: nil, snapshot_schedule_policy: nil, snapshot_schedule_policy_id: nil)
            #   Pass arguments to `create_snapshot_schedule_policy` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The parent project and location containing the SnapshotSchedulePolicy.
            #   @param snapshot_schedule_policy [::Google::Cloud::BaremetalSolution::V2::SnapshotSchedulePolicy, ::Hash]
            #     Required. The SnapshotSchedulePolicy to create.
            #   @param snapshot_schedule_policy_id [::String]
            #     Required. Snapshot policy ID
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::BaremetalSolution::V2::SnapshotSchedulePolicy]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::BaremetalSolution::V2::SnapshotSchedulePolicy]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/baremetal_solution/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::BaremetalSolution::V2::BareMetalSolution::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::BaremetalSolution::V2::CreateSnapshotSchedulePolicyRequest.new
            #
            #   # Call the create_snapshot_schedule_policy method.
            #   result = client.create_snapshot_schedule_policy request
            #
            #   # The returned object is of type Google::Cloud::BaremetalSolution::V2::SnapshotSchedulePolicy.
            #   p result
            #
            def create_snapshot_schedule_policy request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::BaremetalSolution::V2::CreateSnapshotSchedulePolicyRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.create_snapshot_schedule_policy.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Baremetalsolution::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.create_snapshot_schedule_policy.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.create_snapshot_schedule_policy.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @bare_metal_solution_stub.call_rpc :create_snapshot_schedule_policy, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Update a snapshot schedule policy in the specified project.
            #
            # @overload update_snapshot_schedule_policy(request, options = nil)
            #   Pass arguments to `update_snapshot_schedule_policy` via a request object, either of type
            #   {::Google::Cloud::BaremetalSolution::V2::UpdateSnapshotSchedulePolicyRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::BaremetalSolution::V2::UpdateSnapshotSchedulePolicyRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload update_snapshot_schedule_policy(snapshot_schedule_policy: nil, update_mask: nil)
            #   Pass arguments to `update_snapshot_schedule_policy` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param snapshot_schedule_policy [::Google::Cloud::BaremetalSolution::V2::SnapshotSchedulePolicy, ::Hash]
            #     Required. The snapshot schedule policy to update.
            #
            #     The `name` field is used to identify the snapshot schedule policy to
            #     update. Format:
            #     projects/\\{project}/locations/global/snapshotSchedulePolicies/\\{policy}
            #   @param update_mask [::Google::Protobuf::FieldMask, ::Hash]
            #     Required. The list of fields to update.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::BaremetalSolution::V2::SnapshotSchedulePolicy]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::BaremetalSolution::V2::SnapshotSchedulePolicy]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/baremetal_solution/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::BaremetalSolution::V2::BareMetalSolution::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::BaremetalSolution::V2::UpdateSnapshotSchedulePolicyRequest.new
            #
            #   # Call the update_snapshot_schedule_policy method.
            #   result = client.update_snapshot_schedule_policy request
            #
            #   # The returned object is of type Google::Cloud::BaremetalSolution::V2::SnapshotSchedulePolicy.
            #   p result
            #
            def update_snapshot_schedule_policy request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::BaremetalSolution::V2::UpdateSnapshotSchedulePolicyRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.update_snapshot_schedule_policy.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Baremetalsolution::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.snapshot_schedule_policy&.name
                header_params["snapshot_schedule_policy.name"] = request.snapshot_schedule_policy.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.update_snapshot_schedule_policy.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.update_snapshot_schedule_policy.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @bare_metal_solution_stub.call_rpc :update_snapshot_schedule_policy, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Delete a named snapshot schedule policy.
            #
            # @overload delete_snapshot_schedule_policy(request, options = nil)
            #   Pass arguments to `delete_snapshot_schedule_policy` via a request object, either of type
            #   {::Google::Cloud::BaremetalSolution::V2::DeleteSnapshotSchedulePolicyRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::BaremetalSolution::V2::DeleteSnapshotSchedulePolicyRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload delete_snapshot_schedule_policy(name: nil)
            #   Pass arguments to `delete_snapshot_schedule_policy` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The name of the snapshot schedule policy to delete.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Protobuf::Empty]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Protobuf::Empty]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/baremetal_solution/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::BaremetalSolution::V2::BareMetalSolution::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::BaremetalSolution::V2::DeleteSnapshotSchedulePolicyRequest.new
            #
            #   # Call the delete_snapshot_schedule_policy method.
            #   result = client.delete_snapshot_schedule_policy request
            #
            #   # The returned object is of type Google::Protobuf::Empty.
            #   p result
            #
            def delete_snapshot_schedule_policy request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::BaremetalSolution::V2::DeleteSnapshotSchedulePolicyRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.delete_snapshot_schedule_policy.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Baremetalsolution::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.name
                header_params["name"] = request.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.delete_snapshot_schedule_policy.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.delete_snapshot_schedule_policy.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @bare_metal_solution_stub.call_rpc :delete_snapshot_schedule_policy, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Create a storage volume snapshot in a containing volume.
            #
            # @overload create_volume_snapshot(request, options = nil)
            #   Pass arguments to `create_volume_snapshot` via a request object, either of type
            #   {::Google::Cloud::BaremetalSolution::V2::CreateVolumeSnapshotRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::BaremetalSolution::V2::CreateVolumeSnapshotRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload create_volume_snapshot(parent: nil, volume_snapshot: nil)
            #   Pass arguments to `create_volume_snapshot` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The volume to snapshot.
            #   @param volume_snapshot [::Google::Cloud::BaremetalSolution::V2::VolumeSnapshot, ::Hash]
            #     Required. The volume snapshot to create. Only the description field may be specified.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::BaremetalSolution::V2::VolumeSnapshot]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::BaremetalSolution::V2::VolumeSnapshot]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/baremetal_solution/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::BaremetalSolution::V2::BareMetalSolution::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::BaremetalSolution::V2::CreateVolumeSnapshotRequest.new
            #
            #   # Call the create_volume_snapshot method.
            #   result = client.create_volume_snapshot request
            #
            #   # The returned object is of type Google::Cloud::BaremetalSolution::V2::VolumeSnapshot.
            #   p result
            #
            def create_volume_snapshot request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::BaremetalSolution::V2::CreateVolumeSnapshotRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.create_volume_snapshot.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Baremetalsolution::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.create_volume_snapshot.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.create_volume_snapshot.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @bare_metal_solution_stub.call_rpc :create_volume_snapshot, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Restore a storage volume snapshot to its containing volume.
            #
            # @overload restore_volume_snapshot(request, options = nil)
            #   Pass arguments to `restore_volume_snapshot` via a request object, either of type
            #   {::Google::Cloud::BaremetalSolution::V2::RestoreVolumeSnapshotRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::BaremetalSolution::V2::RestoreVolumeSnapshotRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload restore_volume_snapshot(volume_snapshot: nil)
            #   Pass arguments to `restore_volume_snapshot` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param volume_snapshot [::String]
            #     Required. Name of the resource.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/baremetal_solution/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::BaremetalSolution::V2::BareMetalSolution::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::BaremetalSolution::V2::RestoreVolumeSnapshotRequest.new
            #
            #   # Call the restore_volume_snapshot method.
            #   result = client.restore_volume_snapshot request
            #
            #   # The returned object is of type Gapic::Operation. You can use this
            #   # object to check the status of an operation, cancel it, or wait
            #   # for results. Here is how to block until completion:
            #   result.wait_until_done! timeout: 60
            #   if result.response?
            #     p result.response
            #   else
            #     puts "Error!"
            #   end
            #
            def restore_volume_snapshot request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::BaremetalSolution::V2::RestoreVolumeSnapshotRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.restore_volume_snapshot.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Baremetalsolution::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.volume_snapshot
                header_params["volume_snapshot"] = request.volume_snapshot
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.restore_volume_snapshot.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.restore_volume_snapshot.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @bare_metal_solution_stub.call_rpc :restore_volume_snapshot, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Deletes a storage volume snapshot for a given volume.
            #
            # @overload delete_volume_snapshot(request, options = nil)
            #   Pass arguments to `delete_volume_snapshot` via a request object, either of type
            #   {::Google::Cloud::BaremetalSolution::V2::DeleteVolumeSnapshotRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::BaremetalSolution::V2::DeleteVolumeSnapshotRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload delete_volume_snapshot(name: nil)
            #   Pass arguments to `delete_volume_snapshot` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The name of the snapshot to delete.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Protobuf::Empty]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Protobuf::Empty]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/baremetal_solution/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::BaremetalSolution::V2::BareMetalSolution::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::BaremetalSolution::V2::DeleteVolumeSnapshotRequest.new
            #
            #   # Call the delete_volume_snapshot method.
            #   result = client.delete_volume_snapshot request
            #
            #   # The returned object is of type Google::Protobuf::Empty.
            #   p result
            #
            def delete_volume_snapshot request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::BaremetalSolution::V2::DeleteVolumeSnapshotRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.delete_volume_snapshot.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Baremetalsolution::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.name
                header_params["name"] = request.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.delete_volume_snapshot.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.delete_volume_snapshot.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @bare_metal_solution_stub.call_rpc :delete_volume_snapshot, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Get details of a single storage volume snapshot.
            #
            # @overload get_volume_snapshot(request, options = nil)
            #   Pass arguments to `get_volume_snapshot` via a request object, either of type
            #   {::Google::Cloud::BaremetalSolution::V2::GetVolumeSnapshotRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::BaremetalSolution::V2::GetVolumeSnapshotRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_volume_snapshot(name: nil)
            #   Pass arguments to `get_volume_snapshot` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. Name of the resource.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::BaremetalSolution::V2::VolumeSnapshot]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::BaremetalSolution::V2::VolumeSnapshot]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/baremetal_solution/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::BaremetalSolution::V2::BareMetalSolution::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::BaremetalSolution::V2::GetVolumeSnapshotRequest.new
            #
            #   # Call the get_volume_snapshot method.
            #   result = client.get_volume_snapshot request
            #
            #   # The returned object is of type Google::Cloud::BaremetalSolution::V2::VolumeSnapshot.
            #   p result
            #
            def get_volume_snapshot request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::BaremetalSolution::V2::GetVolumeSnapshotRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_volume_snapshot.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Baremetalsolution::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.name
                header_params["name"] = request.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get_volume_snapshot.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_volume_snapshot.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @bare_metal_solution_stub.call_rpc :get_volume_snapshot, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # List storage volume snapshots for given storage volume.
            #
            # @overload list_volume_snapshots(request, options = nil)
            #   Pass arguments to `list_volume_snapshots` via a request object, either of type
            #   {::Google::Cloud::BaremetalSolution::V2::ListVolumeSnapshotsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::BaremetalSolution::V2::ListVolumeSnapshotsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_volume_snapshots(parent: nil, page_size: nil, page_token: nil)
            #   Pass arguments to `list_volume_snapshots` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. Parent value for ListVolumesRequest.
            #   @param page_size [::Integer]
            #     Requested page size. The server might return fewer items than requested.
            #     If unspecified, server will pick an appropriate default.
            #   @param page_token [::String]
            #     A token identifying a page of results from the server.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::BaremetalSolution::V2::VolumeSnapshot>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Cloud::BaremetalSolution::V2::VolumeSnapshot>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/baremetal_solution/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::BaremetalSolution::V2::BareMetalSolution::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::BaremetalSolution::V2::ListVolumeSnapshotsRequest.new
            #
            #   # Call the list_volume_snapshots method.
            #   result = client.list_volume_snapshots request
            #
            #   # The returned object is of type Gapic::PagedEnumerable. You can
            #   # iterate over all elements by calling #each, and the enumerable
            #   # will lazily make API calls to fetch subsequent pages. Other
            #   # methods are also available for managing paging directly.
            #   result.each do |response|
            #     # Each element is of type ::Google::Cloud::BaremetalSolution::V2::VolumeSnapshot.
            #     p response
            #   end
            #
            def list_volume_snapshots request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::BaremetalSolution::V2::ListVolumeSnapshotsRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_volume_snapshots.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Baremetalsolution::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.list_volume_snapshots.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_volume_snapshots.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @bare_metal_solution_stub.call_rpc :list_volume_snapshots, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @bare_metal_solution_stub, :list_volume_snapshots, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Get details of a single storage logical unit number(LUN).
            #
            # @overload get_lun(request, options = nil)
            #   Pass arguments to `get_lun` via a request object, either of type
            #   {::Google::Cloud::BaremetalSolution::V2::GetLunRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::BaremetalSolution::V2::GetLunRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_lun(name: nil)
            #   Pass arguments to `get_lun` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. Name of the resource.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::BaremetalSolution::V2::Lun]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::BaremetalSolution::V2::Lun]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/baremetal_solution/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::BaremetalSolution::V2::BareMetalSolution::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::BaremetalSolution::V2::GetLunRequest.new
            #
            #   # Call the get_lun method.
            #   result = client.get_lun request
            #
            #   # The returned object is of type Google::Cloud::BaremetalSolution::V2::Lun.
            #   p result
            #
            def get_lun request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::BaremetalSolution::V2::GetLunRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_lun.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Baremetalsolution::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.name
                header_params["name"] = request.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get_lun.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_lun.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @bare_metal_solution_stub.call_rpc :get_lun, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # List storage volume luns for given storage volume.
            #
            # @overload list_luns(request, options = nil)
            #   Pass arguments to `list_luns` via a request object, either of type
            #   {::Google::Cloud::BaremetalSolution::V2::ListLunsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::BaremetalSolution::V2::ListLunsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_luns(parent: nil, page_size: nil, page_token: nil)
            #   Pass arguments to `list_luns` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. Parent value for ListLunsRequest.
            #   @param page_size [::Integer]
            #     Requested page size. The server might return fewer items than requested.
            #     If unspecified, server will pick an appropriate default.
            #   @param page_token [::String]
            #     A token identifying a page of results from the server.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::BaremetalSolution::V2::Lun>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Cloud::BaremetalSolution::V2::Lun>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/baremetal_solution/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::BaremetalSolution::V2::BareMetalSolution::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::BaremetalSolution::V2::ListLunsRequest.new
            #
            #   # Call the list_luns method.
            #   result = client.list_luns request
            #
            #   # The returned object is of type Gapic::PagedEnumerable. You can
            #   # iterate over all elements by calling #each, and the enumerable
            #   # will lazily make API calls to fetch subsequent pages. Other
            #   # methods are also available for managing paging directly.
            #   result.each do |response|
            #     # Each element is of type ::Google::Cloud::BaremetalSolution::V2::Lun.
            #     p response
            #   end
            #
            def list_luns request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::BaremetalSolution::V2::ListLunsRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_luns.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Baremetalsolution::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.list_luns.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_luns.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @bare_metal_solution_stub.call_rpc :list_luns, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @bare_metal_solution_stub, :list_luns, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Configuration class for the BareMetalSolution API.
            #
            # This class represents the configuration for BareMetalSolution,
            # providing control over timeouts, retry behavior, logging, transport
            # parameters, and other low-level controls. Certain parameters can also be
            # applied individually to specific RPCs. See
            # {::Google::Cloud::BaremetalSolution::V2::BareMetalSolution::Client::Configuration::Rpcs}
            # for a list of RPCs that can be configured independently.
            #
            # Configuration can be applied globally to all clients, or to a single client
            # on construction.
            #
            # @example
            #
            #   # Modify the global config, setting the timeout for
            #   # list_instances to 20 seconds,
            #   # and all remaining timeouts to 10 seconds.
            #   ::Google::Cloud::BaremetalSolution::V2::BareMetalSolution::Client.configure do |config|
            #     config.timeout = 10.0
            #     config.rpcs.list_instances.timeout = 20.0
            #   end
            #
            #   # Apply the above configuration only to a new client.
            #   client = ::Google::Cloud::BaremetalSolution::V2::BareMetalSolution::Client.new do |config|
            #     config.timeout = 10.0
            #     config.rpcs.list_instances.timeout = 20.0
            #   end
            #
            # @!attribute [rw] endpoint
            #   The hostname or hostname:port of the service endpoint.
            #   Defaults to `"baremetalsolution.googleapis.com"`.
            #   @return [::String]
            # @!attribute [rw] credentials
            #   Credentials to send with calls. You may provide any of the following types:
            #    *  (`String`) The path to a service account key file in JSON format
            #    *  (`Hash`) A service account key as a Hash
            #    *  (`Google::Auth::Credentials`) A googleauth credentials object
            #       (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
            #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
            #       (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
            #    *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
            #    *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
            #    *  (`nil`) indicating no credentials
            #   @return [::Object]
            # @!attribute [rw] scope
            #   The OAuth scopes
            #   @return [::Array<::String>]
            # @!attribute [rw] lib_name
            #   The library name as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] lib_version
            #   The library version as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] channel_args
            #   Extra parameters passed to the gRPC channel. Note: this is ignored if a
            #   `GRPC::Core::Channel` object is provided as the credential.
            #   @return [::Hash]
            # @!attribute [rw] interceptors
            #   An array of interceptors that are run before calls are executed.
            #   @return [::Array<::GRPC::ClientInterceptor>]
            # @!attribute [rw] timeout
            #   The call timeout in seconds.
            #   @return [::Numeric]
            # @!attribute [rw] metadata
            #   Additional gRPC headers to be sent with the call.
            #   @return [::Hash{::Symbol=>::String}]
            # @!attribute [rw] retry_policy
            #   The retry policy. The value is a hash with the following keys:
            #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
            #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
            #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
            #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
            #       trigger a retry.
            #   @return [::Hash]
            # @!attribute [rw] quota_project
            #   A separate project against which to charge quota.
            #   @return [::String]
            #
            class Configuration
              extend ::Gapic::Config

              config_attr :endpoint,      "baremetalsolution.googleapis.com", ::String
              config_attr :credentials,   nil do |value|
                allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
                allowed += [::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials] if defined? ::GRPC
                allowed.any? { |klass| klass === value }
              end
              config_attr :scope,         nil, ::String, ::Array, nil
              config_attr :lib_name,      nil, ::String, nil
              config_attr :lib_version,   nil, ::String, nil
              config_attr(:channel_args,  { "grpc.service_config_disable_resolution" => 1 }, ::Hash, nil)
              config_attr :interceptors,  nil, ::Array, nil
              config_attr :timeout,       nil, ::Numeric, nil
              config_attr :metadata,      nil, ::Hash, nil
              config_attr :retry_policy,  nil, ::Hash, ::Proc, nil
              config_attr :quota_project, nil, ::String, nil

              # @private
              def initialize parent_config = nil
                @parent_config = parent_config unless parent_config.nil?

                yield self if block_given?
              end

              ##
              # Configurations for individual RPCs
              # @return [Rpcs]
              #
              def rpcs
                @rpcs ||= begin
                  parent_rpcs = nil
                  parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config.respond_to?(:rpcs)
                  Rpcs.new parent_rpcs
                end
              end

              ##
              # Configuration RPC class for the BareMetalSolution API.
              #
              # Includes fields providing the configuration for each RPC in this service.
              # Each configuration object is of type `Gapic::Config::Method` and includes
              # the following configuration fields:
              #
              #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
              #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
              #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
              #     include the following keys:
              #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
              #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
              #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
              #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
              #         trigger a retry.
              #
              class Rpcs
                ##
                # RPC-specific configuration for `list_instances`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_instances
                ##
                # RPC-specific configuration for `get_instance`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_instance
                ##
                # RPC-specific configuration for `reset_instance`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :reset_instance
                ##
                # RPC-specific configuration for `list_volumes`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_volumes
                ##
                # RPC-specific configuration for `get_volume`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_volume
                ##
                # RPC-specific configuration for `update_volume`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :update_volume
                ##
                # RPC-specific configuration for `list_networks`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_networks
                ##
                # RPC-specific configuration for `get_network`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_network
                ##
                # RPC-specific configuration for `list_snapshot_schedule_policies`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_snapshot_schedule_policies
                ##
                # RPC-specific configuration for `get_snapshot_schedule_policy`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_snapshot_schedule_policy
                ##
                # RPC-specific configuration for `create_snapshot_schedule_policy`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :create_snapshot_schedule_policy
                ##
                # RPC-specific configuration for `update_snapshot_schedule_policy`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :update_snapshot_schedule_policy
                ##
                # RPC-specific configuration for `delete_snapshot_schedule_policy`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :delete_snapshot_schedule_policy
                ##
                # RPC-specific configuration for `create_volume_snapshot`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :create_volume_snapshot
                ##
                # RPC-specific configuration for `restore_volume_snapshot`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :restore_volume_snapshot
                ##
                # RPC-specific configuration for `delete_volume_snapshot`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :delete_volume_snapshot
                ##
                # RPC-specific configuration for `get_volume_snapshot`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_volume_snapshot
                ##
                # RPC-specific configuration for `list_volume_snapshots`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_volume_snapshots
                ##
                # RPC-specific configuration for `get_lun`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_lun
                ##
                # RPC-specific configuration for `list_luns`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_luns

                # @private
                def initialize parent_rpcs = nil
                  list_instances_config = parent_rpcs.list_instances if parent_rpcs.respond_to? :list_instances
                  @list_instances = ::Gapic::Config::Method.new list_instances_config
                  get_instance_config = parent_rpcs.get_instance if parent_rpcs.respond_to? :get_instance
                  @get_instance = ::Gapic::Config::Method.new get_instance_config
                  reset_instance_config = parent_rpcs.reset_instance if parent_rpcs.respond_to? :reset_instance
                  @reset_instance = ::Gapic::Config::Method.new reset_instance_config
                  list_volumes_config = parent_rpcs.list_volumes if parent_rpcs.respond_to? :list_volumes
                  @list_volumes = ::Gapic::Config::Method.new list_volumes_config
                  get_volume_config = parent_rpcs.get_volume if parent_rpcs.respond_to? :get_volume
                  @get_volume = ::Gapic::Config::Method.new get_volume_config
                  update_volume_config = parent_rpcs.update_volume if parent_rpcs.respond_to? :update_volume
                  @update_volume = ::Gapic::Config::Method.new update_volume_config
                  list_networks_config = parent_rpcs.list_networks if parent_rpcs.respond_to? :list_networks
                  @list_networks = ::Gapic::Config::Method.new list_networks_config
                  get_network_config = parent_rpcs.get_network if parent_rpcs.respond_to? :get_network
                  @get_network = ::Gapic::Config::Method.new get_network_config
                  list_snapshot_schedule_policies_config = parent_rpcs.list_snapshot_schedule_policies if parent_rpcs.respond_to? :list_snapshot_schedule_policies
                  @list_snapshot_schedule_policies = ::Gapic::Config::Method.new list_snapshot_schedule_policies_config
                  get_snapshot_schedule_policy_config = parent_rpcs.get_snapshot_schedule_policy if parent_rpcs.respond_to? :get_snapshot_schedule_policy
                  @get_snapshot_schedule_policy = ::Gapic::Config::Method.new get_snapshot_schedule_policy_config
                  create_snapshot_schedule_policy_config = parent_rpcs.create_snapshot_schedule_policy if parent_rpcs.respond_to? :create_snapshot_schedule_policy
                  @create_snapshot_schedule_policy = ::Gapic::Config::Method.new create_snapshot_schedule_policy_config
                  update_snapshot_schedule_policy_config = parent_rpcs.update_snapshot_schedule_policy if parent_rpcs.respond_to? :update_snapshot_schedule_policy
                  @update_snapshot_schedule_policy = ::Gapic::Config::Method.new update_snapshot_schedule_policy_config
                  delete_snapshot_schedule_policy_config = parent_rpcs.delete_snapshot_schedule_policy if parent_rpcs.respond_to? :delete_snapshot_schedule_policy
                  @delete_snapshot_schedule_policy = ::Gapic::Config::Method.new delete_snapshot_schedule_policy_config
                  create_volume_snapshot_config = parent_rpcs.create_volume_snapshot if parent_rpcs.respond_to? :create_volume_snapshot
                  @create_volume_snapshot = ::Gapic::Config::Method.new create_volume_snapshot_config
                  restore_volume_snapshot_config = parent_rpcs.restore_volume_snapshot if parent_rpcs.respond_to? :restore_volume_snapshot
                  @restore_volume_snapshot = ::Gapic::Config::Method.new restore_volume_snapshot_config
                  delete_volume_snapshot_config = parent_rpcs.delete_volume_snapshot if parent_rpcs.respond_to? :delete_volume_snapshot
                  @delete_volume_snapshot = ::Gapic::Config::Method.new delete_volume_snapshot_config
                  get_volume_snapshot_config = parent_rpcs.get_volume_snapshot if parent_rpcs.respond_to? :get_volume_snapshot
                  @get_volume_snapshot = ::Gapic::Config::Method.new get_volume_snapshot_config
                  list_volume_snapshots_config = parent_rpcs.list_volume_snapshots if parent_rpcs.respond_to? :list_volume_snapshots
                  @list_volume_snapshots = ::Gapic::Config::Method.new list_volume_snapshots_config
                  get_lun_config = parent_rpcs.get_lun if parent_rpcs.respond_to? :get_lun
                  @get_lun = ::Gapic::Config::Method.new get_lun_config
                  list_luns_config = parent_rpcs.list_luns if parent_rpcs.respond_to? :list_luns
                  @list_luns = ::Gapic::Config::Method.new list_luns_config

                  yield self if block_given?
                end
              end
            end
          end
        end
      end
    end
  end
end
