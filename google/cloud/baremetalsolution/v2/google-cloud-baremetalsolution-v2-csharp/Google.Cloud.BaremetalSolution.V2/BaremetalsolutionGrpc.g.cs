// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/baremetalsolution/v2/baremetalsolution.proto
// </auto-generated>
// Original file comments:
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.BaremetalSolution.V2 {
  /// <summary>
  /// Performs management operations on Bare Metal Solution servers.
  ///
  /// The `baremetalsolution.googleapis.com` service provides management
  /// capabilities for Bare Metal Solution servers. To access the API methods, you
  /// must assign Bare Metal Solution IAM roles containing the desired permissions
  /// to your staff in your Google Cloud project. You must also enable the Bare
  /// Metal Solution API. Once enabled, the methods act
  /// upon specific servers in your Bare Metal Solution environment.
  /// </summary>
  public static partial class BareMetalSolution
  {
    static readonly string __ServiceName = "google.cloud.baremetalsolution.v2.BareMetalSolution";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.ListInstancesRequest> __Marshaller_google_cloud_baremetalsolution_v2_ListInstancesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.ListInstancesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.ListInstancesResponse> __Marshaller_google_cloud_baremetalsolution_v2_ListInstancesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.ListInstancesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.GetInstanceRequest> __Marshaller_google_cloud_baremetalsolution_v2_GetInstanceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.GetInstanceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.Instance> __Marshaller_google_cloud_baremetalsolution_v2_Instance = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.Instance.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.ResetInstanceRequest> __Marshaller_google_cloud_baremetalsolution_v2_ResetInstanceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.ResetInstanceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.ListVolumesRequest> __Marshaller_google_cloud_baremetalsolution_v2_ListVolumesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.ListVolumesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.ListVolumesResponse> __Marshaller_google_cloud_baremetalsolution_v2_ListVolumesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.ListVolumesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.GetVolumeRequest> __Marshaller_google_cloud_baremetalsolution_v2_GetVolumeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.GetVolumeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.Volume> __Marshaller_google_cloud_baremetalsolution_v2_Volume = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.Volume.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.UpdateVolumeRequest> __Marshaller_google_cloud_baremetalsolution_v2_UpdateVolumeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.UpdateVolumeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.ListNetworksRequest> __Marshaller_google_cloud_baremetalsolution_v2_ListNetworksRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.ListNetworksRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.ListNetworksResponse> __Marshaller_google_cloud_baremetalsolution_v2_ListNetworksResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.ListNetworksResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.GetNetworkRequest> __Marshaller_google_cloud_baremetalsolution_v2_GetNetworkRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.GetNetworkRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.Network> __Marshaller_google_cloud_baremetalsolution_v2_Network = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.Network.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.ListSnapshotSchedulePoliciesRequest> __Marshaller_google_cloud_baremetalsolution_v2_ListSnapshotSchedulePoliciesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.ListSnapshotSchedulePoliciesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.ListSnapshotSchedulePoliciesResponse> __Marshaller_google_cloud_baremetalsolution_v2_ListSnapshotSchedulePoliciesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.ListSnapshotSchedulePoliciesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.GetSnapshotSchedulePolicyRequest> __Marshaller_google_cloud_baremetalsolution_v2_GetSnapshotSchedulePolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.GetSnapshotSchedulePolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.SnapshotSchedulePolicy> __Marshaller_google_cloud_baremetalsolution_v2_SnapshotSchedulePolicy = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.SnapshotSchedulePolicy.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.CreateSnapshotSchedulePolicyRequest> __Marshaller_google_cloud_baremetalsolution_v2_CreateSnapshotSchedulePolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.CreateSnapshotSchedulePolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.UpdateSnapshotSchedulePolicyRequest> __Marshaller_google_cloud_baremetalsolution_v2_UpdateSnapshotSchedulePolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.UpdateSnapshotSchedulePolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.DeleteSnapshotSchedulePolicyRequest> __Marshaller_google_cloud_baremetalsolution_v2_DeleteSnapshotSchedulePolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.DeleteSnapshotSchedulePolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.CreateVolumeSnapshotRequest> __Marshaller_google_cloud_baremetalsolution_v2_CreateVolumeSnapshotRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.CreateVolumeSnapshotRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.VolumeSnapshot> __Marshaller_google_cloud_baremetalsolution_v2_VolumeSnapshot = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.VolumeSnapshot.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.RestoreVolumeSnapshotRequest> __Marshaller_google_cloud_baremetalsolution_v2_RestoreVolumeSnapshotRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.RestoreVolumeSnapshotRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.DeleteVolumeSnapshotRequest> __Marshaller_google_cloud_baremetalsolution_v2_DeleteVolumeSnapshotRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.DeleteVolumeSnapshotRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.GetVolumeSnapshotRequest> __Marshaller_google_cloud_baremetalsolution_v2_GetVolumeSnapshotRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.GetVolumeSnapshotRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.ListVolumeSnapshotsRequest> __Marshaller_google_cloud_baremetalsolution_v2_ListVolumeSnapshotsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.ListVolumeSnapshotsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.ListVolumeSnapshotsResponse> __Marshaller_google_cloud_baremetalsolution_v2_ListVolumeSnapshotsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.ListVolumeSnapshotsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.GetLunRequest> __Marshaller_google_cloud_baremetalsolution_v2_GetLunRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.GetLunRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.Lun> __Marshaller_google_cloud_baremetalsolution_v2_Lun = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.Lun.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.ListLunsRequest> __Marshaller_google_cloud_baremetalsolution_v2_ListLunsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.ListLunsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BaremetalSolution.V2.ListLunsResponse> __Marshaller_google_cloud_baremetalsolution_v2_ListLunsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BaremetalSolution.V2.ListLunsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BaremetalSolution.V2.ListInstancesRequest, global::Google.Cloud.BaremetalSolution.V2.ListInstancesResponse> __Method_ListInstances = new grpc::Method<global::Google.Cloud.BaremetalSolution.V2.ListInstancesRequest, global::Google.Cloud.BaremetalSolution.V2.ListInstancesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListInstances",
        __Marshaller_google_cloud_baremetalsolution_v2_ListInstancesRequest,
        __Marshaller_google_cloud_baremetalsolution_v2_ListInstancesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BaremetalSolution.V2.GetInstanceRequest, global::Google.Cloud.BaremetalSolution.V2.Instance> __Method_GetInstance = new grpc::Method<global::Google.Cloud.BaremetalSolution.V2.GetInstanceRequest, global::Google.Cloud.BaremetalSolution.V2.Instance>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInstance",
        __Marshaller_google_cloud_baremetalsolution_v2_GetInstanceRequest,
        __Marshaller_google_cloud_baremetalsolution_v2_Instance);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BaremetalSolution.V2.ResetInstanceRequest, global::Google.LongRunning.Operation> __Method_ResetInstance = new grpc::Method<global::Google.Cloud.BaremetalSolution.V2.ResetInstanceRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ResetInstance",
        __Marshaller_google_cloud_baremetalsolution_v2_ResetInstanceRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BaremetalSolution.V2.ListVolumesRequest, global::Google.Cloud.BaremetalSolution.V2.ListVolumesResponse> __Method_ListVolumes = new grpc::Method<global::Google.Cloud.BaremetalSolution.V2.ListVolumesRequest, global::Google.Cloud.BaremetalSolution.V2.ListVolumesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListVolumes",
        __Marshaller_google_cloud_baremetalsolution_v2_ListVolumesRequest,
        __Marshaller_google_cloud_baremetalsolution_v2_ListVolumesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BaremetalSolution.V2.GetVolumeRequest, global::Google.Cloud.BaremetalSolution.V2.Volume> __Method_GetVolume = new grpc::Method<global::Google.Cloud.BaremetalSolution.V2.GetVolumeRequest, global::Google.Cloud.BaremetalSolution.V2.Volume>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetVolume",
        __Marshaller_google_cloud_baremetalsolution_v2_GetVolumeRequest,
        __Marshaller_google_cloud_baremetalsolution_v2_Volume);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BaremetalSolution.V2.UpdateVolumeRequest, global::Google.LongRunning.Operation> __Method_UpdateVolume = new grpc::Method<global::Google.Cloud.BaremetalSolution.V2.UpdateVolumeRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateVolume",
        __Marshaller_google_cloud_baremetalsolution_v2_UpdateVolumeRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BaremetalSolution.V2.ListNetworksRequest, global::Google.Cloud.BaremetalSolution.V2.ListNetworksResponse> __Method_ListNetworks = new grpc::Method<global::Google.Cloud.BaremetalSolution.V2.ListNetworksRequest, global::Google.Cloud.BaremetalSolution.V2.ListNetworksResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListNetworks",
        __Marshaller_google_cloud_baremetalsolution_v2_ListNetworksRequest,
        __Marshaller_google_cloud_baremetalsolution_v2_ListNetworksResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BaremetalSolution.V2.GetNetworkRequest, global::Google.Cloud.BaremetalSolution.V2.Network> __Method_GetNetwork = new grpc::Method<global::Google.Cloud.BaremetalSolution.V2.GetNetworkRequest, global::Google.Cloud.BaremetalSolution.V2.Network>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNetwork",
        __Marshaller_google_cloud_baremetalsolution_v2_GetNetworkRequest,
        __Marshaller_google_cloud_baremetalsolution_v2_Network);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BaremetalSolution.V2.ListSnapshotSchedulePoliciesRequest, global::Google.Cloud.BaremetalSolution.V2.ListSnapshotSchedulePoliciesResponse> __Method_ListSnapshotSchedulePolicies = new grpc::Method<global::Google.Cloud.BaremetalSolution.V2.ListSnapshotSchedulePoliciesRequest, global::Google.Cloud.BaremetalSolution.V2.ListSnapshotSchedulePoliciesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSnapshotSchedulePolicies",
        __Marshaller_google_cloud_baremetalsolution_v2_ListSnapshotSchedulePoliciesRequest,
        __Marshaller_google_cloud_baremetalsolution_v2_ListSnapshotSchedulePoliciesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BaremetalSolution.V2.GetSnapshotSchedulePolicyRequest, global::Google.Cloud.BaremetalSolution.V2.SnapshotSchedulePolicy> __Method_GetSnapshotSchedulePolicy = new grpc::Method<global::Google.Cloud.BaremetalSolution.V2.GetSnapshotSchedulePolicyRequest, global::Google.Cloud.BaremetalSolution.V2.SnapshotSchedulePolicy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSnapshotSchedulePolicy",
        __Marshaller_google_cloud_baremetalsolution_v2_GetSnapshotSchedulePolicyRequest,
        __Marshaller_google_cloud_baremetalsolution_v2_SnapshotSchedulePolicy);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BaremetalSolution.V2.CreateSnapshotSchedulePolicyRequest, global::Google.Cloud.BaremetalSolution.V2.SnapshotSchedulePolicy> __Method_CreateSnapshotSchedulePolicy = new grpc::Method<global::Google.Cloud.BaremetalSolution.V2.CreateSnapshotSchedulePolicyRequest, global::Google.Cloud.BaremetalSolution.V2.SnapshotSchedulePolicy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateSnapshotSchedulePolicy",
        __Marshaller_google_cloud_baremetalsolution_v2_CreateSnapshotSchedulePolicyRequest,
        __Marshaller_google_cloud_baremetalsolution_v2_SnapshotSchedulePolicy);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BaremetalSolution.V2.UpdateSnapshotSchedulePolicyRequest, global::Google.Cloud.BaremetalSolution.V2.SnapshotSchedulePolicy> __Method_UpdateSnapshotSchedulePolicy = new grpc::Method<global::Google.Cloud.BaremetalSolution.V2.UpdateSnapshotSchedulePolicyRequest, global::Google.Cloud.BaremetalSolution.V2.SnapshotSchedulePolicy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateSnapshotSchedulePolicy",
        __Marshaller_google_cloud_baremetalsolution_v2_UpdateSnapshotSchedulePolicyRequest,
        __Marshaller_google_cloud_baremetalsolution_v2_SnapshotSchedulePolicy);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BaremetalSolution.V2.DeleteSnapshotSchedulePolicyRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteSnapshotSchedulePolicy = new grpc::Method<global::Google.Cloud.BaremetalSolution.V2.DeleteSnapshotSchedulePolicyRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSnapshotSchedulePolicy",
        __Marshaller_google_cloud_baremetalsolution_v2_DeleteSnapshotSchedulePolicyRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BaremetalSolution.V2.CreateVolumeSnapshotRequest, global::Google.Cloud.BaremetalSolution.V2.VolumeSnapshot> __Method_CreateVolumeSnapshot = new grpc::Method<global::Google.Cloud.BaremetalSolution.V2.CreateVolumeSnapshotRequest, global::Google.Cloud.BaremetalSolution.V2.VolumeSnapshot>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateVolumeSnapshot",
        __Marshaller_google_cloud_baremetalsolution_v2_CreateVolumeSnapshotRequest,
        __Marshaller_google_cloud_baremetalsolution_v2_VolumeSnapshot);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BaremetalSolution.V2.RestoreVolumeSnapshotRequest, global::Google.LongRunning.Operation> __Method_RestoreVolumeSnapshot = new grpc::Method<global::Google.Cloud.BaremetalSolution.V2.RestoreVolumeSnapshotRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RestoreVolumeSnapshot",
        __Marshaller_google_cloud_baremetalsolution_v2_RestoreVolumeSnapshotRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BaremetalSolution.V2.DeleteVolumeSnapshotRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteVolumeSnapshot = new grpc::Method<global::Google.Cloud.BaremetalSolution.V2.DeleteVolumeSnapshotRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteVolumeSnapshot",
        __Marshaller_google_cloud_baremetalsolution_v2_DeleteVolumeSnapshotRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BaremetalSolution.V2.GetVolumeSnapshotRequest, global::Google.Cloud.BaremetalSolution.V2.VolumeSnapshot> __Method_GetVolumeSnapshot = new grpc::Method<global::Google.Cloud.BaremetalSolution.V2.GetVolumeSnapshotRequest, global::Google.Cloud.BaremetalSolution.V2.VolumeSnapshot>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetVolumeSnapshot",
        __Marshaller_google_cloud_baremetalsolution_v2_GetVolumeSnapshotRequest,
        __Marshaller_google_cloud_baremetalsolution_v2_VolumeSnapshot);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BaremetalSolution.V2.ListVolumeSnapshotsRequest, global::Google.Cloud.BaremetalSolution.V2.ListVolumeSnapshotsResponse> __Method_ListVolumeSnapshots = new grpc::Method<global::Google.Cloud.BaremetalSolution.V2.ListVolumeSnapshotsRequest, global::Google.Cloud.BaremetalSolution.V2.ListVolumeSnapshotsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListVolumeSnapshots",
        __Marshaller_google_cloud_baremetalsolution_v2_ListVolumeSnapshotsRequest,
        __Marshaller_google_cloud_baremetalsolution_v2_ListVolumeSnapshotsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BaremetalSolution.V2.GetLunRequest, global::Google.Cloud.BaremetalSolution.V2.Lun> __Method_GetLun = new grpc::Method<global::Google.Cloud.BaremetalSolution.V2.GetLunRequest, global::Google.Cloud.BaremetalSolution.V2.Lun>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLun",
        __Marshaller_google_cloud_baremetalsolution_v2_GetLunRequest,
        __Marshaller_google_cloud_baremetalsolution_v2_Lun);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BaremetalSolution.V2.ListLunsRequest, global::Google.Cloud.BaremetalSolution.V2.ListLunsResponse> __Method_ListLuns = new grpc::Method<global::Google.Cloud.BaremetalSolution.V2.ListLunsRequest, global::Google.Cloud.BaremetalSolution.V2.ListLunsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListLuns",
        __Marshaller_google_cloud_baremetalsolution_v2_ListLunsRequest,
        __Marshaller_google_cloud_baremetalsolution_v2_ListLunsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.BaremetalSolution.V2.BaremetalsolutionReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of BareMetalSolution</summary>
    [grpc::BindServiceMethod(typeof(BareMetalSolution), "BindService")]
    public abstract partial class BareMetalSolutionBase
    {
      /// <summary>
      /// List servers in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BaremetalSolution.V2.ListInstancesResponse> ListInstances(global::Google.Cloud.BaremetalSolution.V2.ListInstancesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get details about a single server.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BaremetalSolution.V2.Instance> GetInstance(global::Google.Cloud.BaremetalSolution.V2.GetInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Perform an ungraceful, hard reset on a server. Equivalent to shutting the
      /// power off and then turning it back on.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> ResetInstance(global::Google.Cloud.BaremetalSolution.V2.ResetInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List storage volumes in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BaremetalSolution.V2.ListVolumesResponse> ListVolumes(global::Google.Cloud.BaremetalSolution.V2.ListVolumesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get details of a single storage volume.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BaremetalSolution.V2.Volume> GetVolume(global::Google.Cloud.BaremetalSolution.V2.GetVolumeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update details of a single storage volume.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateVolume(global::Google.Cloud.BaremetalSolution.V2.UpdateVolumeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List network in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BaremetalSolution.V2.ListNetworksResponse> ListNetworks(global::Google.Cloud.BaremetalSolution.V2.ListNetworksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get details of a single network.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BaremetalSolution.V2.Network> GetNetwork(global::Google.Cloud.BaremetalSolution.V2.GetNetworkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List snapshot schedule policies in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BaremetalSolution.V2.ListSnapshotSchedulePoliciesResponse> ListSnapshotSchedulePolicies(global::Google.Cloud.BaremetalSolution.V2.ListSnapshotSchedulePoliciesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get details of a single snapshot schedule policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BaremetalSolution.V2.SnapshotSchedulePolicy> GetSnapshotSchedulePolicy(global::Google.Cloud.BaremetalSolution.V2.GetSnapshotSchedulePolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a snapshot schedule policy in the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BaremetalSolution.V2.SnapshotSchedulePolicy> CreateSnapshotSchedulePolicy(global::Google.Cloud.BaremetalSolution.V2.CreateSnapshotSchedulePolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update a snapshot schedule policy in the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BaremetalSolution.V2.SnapshotSchedulePolicy> UpdateSnapshotSchedulePolicy(global::Google.Cloud.BaremetalSolution.V2.UpdateSnapshotSchedulePolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a named snapshot schedule policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSnapshotSchedulePolicy(global::Google.Cloud.BaremetalSolution.V2.DeleteSnapshotSchedulePolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a storage volume snapshot in a containing volume.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BaremetalSolution.V2.VolumeSnapshot> CreateVolumeSnapshot(global::Google.Cloud.BaremetalSolution.V2.CreateVolumeSnapshotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Restore a storage volume snapshot to its containing volume.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> RestoreVolumeSnapshot(global::Google.Cloud.BaremetalSolution.V2.RestoreVolumeSnapshotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a storage volume snapshot for a given volume.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteVolumeSnapshot(global::Google.Cloud.BaremetalSolution.V2.DeleteVolumeSnapshotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get details of a single storage volume snapshot.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BaremetalSolution.V2.VolumeSnapshot> GetVolumeSnapshot(global::Google.Cloud.BaremetalSolution.V2.GetVolumeSnapshotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List storage volume snapshots for given storage volume.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BaremetalSolution.V2.ListVolumeSnapshotsResponse> ListVolumeSnapshots(global::Google.Cloud.BaremetalSolution.V2.ListVolumeSnapshotsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get details of a single storage logical unit number(LUN).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BaremetalSolution.V2.Lun> GetLun(global::Google.Cloud.BaremetalSolution.V2.GetLunRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List storage volume luns for given storage volume.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BaremetalSolution.V2.ListLunsResponse> ListLuns(global::Google.Cloud.BaremetalSolution.V2.ListLunsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for BareMetalSolution</summary>
    public partial class BareMetalSolutionClient : grpc::ClientBase<BareMetalSolutionClient>
    {
      /// <summary>Creates a new client for BareMetalSolution</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public BareMetalSolutionClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for BareMetalSolution that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public BareMetalSolutionClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected BareMetalSolutionClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected BareMetalSolutionClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// List servers in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BaremetalSolution.V2.ListInstancesResponse ListInstances(global::Google.Cloud.BaremetalSolution.V2.ListInstancesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListInstances(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List servers in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BaremetalSolution.V2.ListInstancesResponse ListInstances(global::Google.Cloud.BaremetalSolution.V2.ListInstancesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListInstances, null, options, request);
      }
      /// <summary>
      /// List servers in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BaremetalSolution.V2.ListInstancesResponse> ListInstancesAsync(global::Google.Cloud.BaremetalSolution.V2.ListInstancesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListInstancesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List servers in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BaremetalSolution.V2.ListInstancesResponse> ListInstancesAsync(global::Google.Cloud.BaremetalSolution.V2.ListInstancesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListInstances, null, options, request);
      }
      /// <summary>
      /// Get details about a single server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BaremetalSolution.V2.Instance GetInstance(global::Google.Cloud.BaremetalSolution.V2.GetInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInstance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get details about a single server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BaremetalSolution.V2.Instance GetInstance(global::Google.Cloud.BaremetalSolution.V2.GetInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInstance, null, options, request);
      }
      /// <summary>
      /// Get details about a single server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BaremetalSolution.V2.Instance> GetInstanceAsync(global::Google.Cloud.BaremetalSolution.V2.GetInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInstanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get details about a single server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BaremetalSolution.V2.Instance> GetInstanceAsync(global::Google.Cloud.BaremetalSolution.V2.GetInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInstance, null, options, request);
      }
      /// <summary>
      /// Perform an ungraceful, hard reset on a server. Equivalent to shutting the
      /// power off and then turning it back on.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation ResetInstance(global::Google.Cloud.BaremetalSolution.V2.ResetInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetInstance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Perform an ungraceful, hard reset on a server. Equivalent to shutting the
      /// power off and then turning it back on.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation ResetInstance(global::Google.Cloud.BaremetalSolution.V2.ResetInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ResetInstance, null, options, request);
      }
      /// <summary>
      /// Perform an ungraceful, hard reset on a server. Equivalent to shutting the
      /// power off and then turning it back on.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ResetInstanceAsync(global::Google.Cloud.BaremetalSolution.V2.ResetInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetInstanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Perform an ungraceful, hard reset on a server. Equivalent to shutting the
      /// power off and then turning it back on.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ResetInstanceAsync(global::Google.Cloud.BaremetalSolution.V2.ResetInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ResetInstance, null, options, request);
      }
      /// <summary>
      /// List storage volumes in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BaremetalSolution.V2.ListVolumesResponse ListVolumes(global::Google.Cloud.BaremetalSolution.V2.ListVolumesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListVolumes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List storage volumes in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BaremetalSolution.V2.ListVolumesResponse ListVolumes(global::Google.Cloud.BaremetalSolution.V2.ListVolumesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListVolumes, null, options, request);
      }
      /// <summary>
      /// List storage volumes in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BaremetalSolution.V2.ListVolumesResponse> ListVolumesAsync(global::Google.Cloud.BaremetalSolution.V2.ListVolumesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListVolumesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List storage volumes in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BaremetalSolution.V2.ListVolumesResponse> ListVolumesAsync(global::Google.Cloud.BaremetalSolution.V2.ListVolumesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListVolumes, null, options, request);
      }
      /// <summary>
      /// Get details of a single storage volume.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BaremetalSolution.V2.Volume GetVolume(global::Google.Cloud.BaremetalSolution.V2.GetVolumeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVolume(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get details of a single storage volume.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BaremetalSolution.V2.Volume GetVolume(global::Google.Cloud.BaremetalSolution.V2.GetVolumeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetVolume, null, options, request);
      }
      /// <summary>
      /// Get details of a single storage volume.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BaremetalSolution.V2.Volume> GetVolumeAsync(global::Google.Cloud.BaremetalSolution.V2.GetVolumeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVolumeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get details of a single storage volume.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BaremetalSolution.V2.Volume> GetVolumeAsync(global::Google.Cloud.BaremetalSolution.V2.GetVolumeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetVolume, null, options, request);
      }
      /// <summary>
      /// Update details of a single storage volume.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateVolume(global::Google.Cloud.BaremetalSolution.V2.UpdateVolumeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateVolume(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update details of a single storage volume.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateVolume(global::Google.Cloud.BaremetalSolution.V2.UpdateVolumeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateVolume, null, options, request);
      }
      /// <summary>
      /// Update details of a single storage volume.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateVolumeAsync(global::Google.Cloud.BaremetalSolution.V2.UpdateVolumeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateVolumeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update details of a single storage volume.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateVolumeAsync(global::Google.Cloud.BaremetalSolution.V2.UpdateVolumeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateVolume, null, options, request);
      }
      /// <summary>
      /// List network in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BaremetalSolution.V2.ListNetworksResponse ListNetworks(global::Google.Cloud.BaremetalSolution.V2.ListNetworksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNetworks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List network in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BaremetalSolution.V2.ListNetworksResponse ListNetworks(global::Google.Cloud.BaremetalSolution.V2.ListNetworksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListNetworks, null, options, request);
      }
      /// <summary>
      /// List network in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BaremetalSolution.V2.ListNetworksResponse> ListNetworksAsync(global::Google.Cloud.BaremetalSolution.V2.ListNetworksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNetworksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List network in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BaremetalSolution.V2.ListNetworksResponse> ListNetworksAsync(global::Google.Cloud.BaremetalSolution.V2.ListNetworksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListNetworks, null, options, request);
      }
      /// <summary>
      /// Get details of a single network.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BaremetalSolution.V2.Network GetNetwork(global::Google.Cloud.BaremetalSolution.V2.GetNetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNetwork(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get details of a single network.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BaremetalSolution.V2.Network GetNetwork(global::Google.Cloud.BaremetalSolution.V2.GetNetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNetwork, null, options, request);
      }
      /// <summary>
      /// Get details of a single network.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BaremetalSolution.V2.Network> GetNetworkAsync(global::Google.Cloud.BaremetalSolution.V2.GetNetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNetworkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get details of a single network.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BaremetalSolution.V2.Network> GetNetworkAsync(global::Google.Cloud.BaremetalSolution.V2.GetNetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNetwork, null, options, request);
      }
      /// <summary>
      /// List snapshot schedule policies in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BaremetalSolution.V2.ListSnapshotSchedulePoliciesResponse ListSnapshotSchedulePolicies(global::Google.Cloud.BaremetalSolution.V2.ListSnapshotSchedulePoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSnapshotSchedulePolicies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List snapshot schedule policies in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BaremetalSolution.V2.ListSnapshotSchedulePoliciesResponse ListSnapshotSchedulePolicies(global::Google.Cloud.BaremetalSolution.V2.ListSnapshotSchedulePoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSnapshotSchedulePolicies, null, options, request);
      }
      /// <summary>
      /// List snapshot schedule policies in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BaremetalSolution.V2.ListSnapshotSchedulePoliciesResponse> ListSnapshotSchedulePoliciesAsync(global::Google.Cloud.BaremetalSolution.V2.ListSnapshotSchedulePoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSnapshotSchedulePoliciesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List snapshot schedule policies in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BaremetalSolution.V2.ListSnapshotSchedulePoliciesResponse> ListSnapshotSchedulePoliciesAsync(global::Google.Cloud.BaremetalSolution.V2.ListSnapshotSchedulePoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSnapshotSchedulePolicies, null, options, request);
      }
      /// <summary>
      /// Get details of a single snapshot schedule policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BaremetalSolution.V2.SnapshotSchedulePolicy GetSnapshotSchedulePolicy(global::Google.Cloud.BaremetalSolution.V2.GetSnapshotSchedulePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSnapshotSchedulePolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get details of a single snapshot schedule policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BaremetalSolution.V2.SnapshotSchedulePolicy GetSnapshotSchedulePolicy(global::Google.Cloud.BaremetalSolution.V2.GetSnapshotSchedulePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSnapshotSchedulePolicy, null, options, request);
      }
      /// <summary>
      /// Get details of a single snapshot schedule policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BaremetalSolution.V2.SnapshotSchedulePolicy> GetSnapshotSchedulePolicyAsync(global::Google.Cloud.BaremetalSolution.V2.GetSnapshotSchedulePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSnapshotSchedulePolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get details of a single snapshot schedule policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BaremetalSolution.V2.SnapshotSchedulePolicy> GetSnapshotSchedulePolicyAsync(global::Google.Cloud.BaremetalSolution.V2.GetSnapshotSchedulePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSnapshotSchedulePolicy, null, options, request);
      }
      /// <summary>
      /// Create a snapshot schedule policy in the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BaremetalSolution.V2.SnapshotSchedulePolicy CreateSnapshotSchedulePolicy(global::Google.Cloud.BaremetalSolution.V2.CreateSnapshotSchedulePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSnapshotSchedulePolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a snapshot schedule policy in the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BaremetalSolution.V2.SnapshotSchedulePolicy CreateSnapshotSchedulePolicy(global::Google.Cloud.BaremetalSolution.V2.CreateSnapshotSchedulePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateSnapshotSchedulePolicy, null, options, request);
      }
      /// <summary>
      /// Create a snapshot schedule policy in the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BaremetalSolution.V2.SnapshotSchedulePolicy> CreateSnapshotSchedulePolicyAsync(global::Google.Cloud.BaremetalSolution.V2.CreateSnapshotSchedulePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSnapshotSchedulePolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a snapshot schedule policy in the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BaremetalSolution.V2.SnapshotSchedulePolicy> CreateSnapshotSchedulePolicyAsync(global::Google.Cloud.BaremetalSolution.V2.CreateSnapshotSchedulePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateSnapshotSchedulePolicy, null, options, request);
      }
      /// <summary>
      /// Update a snapshot schedule policy in the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BaremetalSolution.V2.SnapshotSchedulePolicy UpdateSnapshotSchedulePolicy(global::Google.Cloud.BaremetalSolution.V2.UpdateSnapshotSchedulePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSnapshotSchedulePolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a snapshot schedule policy in the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BaremetalSolution.V2.SnapshotSchedulePolicy UpdateSnapshotSchedulePolicy(global::Google.Cloud.BaremetalSolution.V2.UpdateSnapshotSchedulePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateSnapshotSchedulePolicy, null, options, request);
      }
      /// <summary>
      /// Update a snapshot schedule policy in the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BaremetalSolution.V2.SnapshotSchedulePolicy> UpdateSnapshotSchedulePolicyAsync(global::Google.Cloud.BaremetalSolution.V2.UpdateSnapshotSchedulePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSnapshotSchedulePolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a snapshot schedule policy in the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BaremetalSolution.V2.SnapshotSchedulePolicy> UpdateSnapshotSchedulePolicyAsync(global::Google.Cloud.BaremetalSolution.V2.UpdateSnapshotSchedulePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateSnapshotSchedulePolicy, null, options, request);
      }
      /// <summary>
      /// Delete a named snapshot schedule policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteSnapshotSchedulePolicy(global::Google.Cloud.BaremetalSolution.V2.DeleteSnapshotSchedulePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSnapshotSchedulePolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a named snapshot schedule policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteSnapshotSchedulePolicy(global::Google.Cloud.BaremetalSolution.V2.DeleteSnapshotSchedulePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSnapshotSchedulePolicy, null, options, request);
      }
      /// <summary>
      /// Delete a named snapshot schedule policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSnapshotSchedulePolicyAsync(global::Google.Cloud.BaremetalSolution.V2.DeleteSnapshotSchedulePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSnapshotSchedulePolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a named snapshot schedule policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSnapshotSchedulePolicyAsync(global::Google.Cloud.BaremetalSolution.V2.DeleteSnapshotSchedulePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSnapshotSchedulePolicy, null, options, request);
      }
      /// <summary>
      /// Create a storage volume snapshot in a containing volume.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BaremetalSolution.V2.VolumeSnapshot CreateVolumeSnapshot(global::Google.Cloud.BaremetalSolution.V2.CreateVolumeSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateVolumeSnapshot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a storage volume snapshot in a containing volume.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BaremetalSolution.V2.VolumeSnapshot CreateVolumeSnapshot(global::Google.Cloud.BaremetalSolution.V2.CreateVolumeSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateVolumeSnapshot, null, options, request);
      }
      /// <summary>
      /// Create a storage volume snapshot in a containing volume.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BaremetalSolution.V2.VolumeSnapshot> CreateVolumeSnapshotAsync(global::Google.Cloud.BaremetalSolution.V2.CreateVolumeSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateVolumeSnapshotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a storage volume snapshot in a containing volume.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BaremetalSolution.V2.VolumeSnapshot> CreateVolumeSnapshotAsync(global::Google.Cloud.BaremetalSolution.V2.CreateVolumeSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateVolumeSnapshot, null, options, request);
      }
      /// <summary>
      /// Restore a storage volume snapshot to its containing volume.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation RestoreVolumeSnapshot(global::Google.Cloud.BaremetalSolution.V2.RestoreVolumeSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RestoreVolumeSnapshot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Restore a storage volume snapshot to its containing volume.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation RestoreVolumeSnapshot(global::Google.Cloud.BaremetalSolution.V2.RestoreVolumeSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RestoreVolumeSnapshot, null, options, request);
      }
      /// <summary>
      /// Restore a storage volume snapshot to its containing volume.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> RestoreVolumeSnapshotAsync(global::Google.Cloud.BaremetalSolution.V2.RestoreVolumeSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RestoreVolumeSnapshotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Restore a storage volume snapshot to its containing volume.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> RestoreVolumeSnapshotAsync(global::Google.Cloud.BaremetalSolution.V2.RestoreVolumeSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RestoreVolumeSnapshot, null, options, request);
      }
      /// <summary>
      /// Deletes a storage volume snapshot for a given volume.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteVolumeSnapshot(global::Google.Cloud.BaremetalSolution.V2.DeleteVolumeSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteVolumeSnapshot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a storage volume snapshot for a given volume.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteVolumeSnapshot(global::Google.Cloud.BaremetalSolution.V2.DeleteVolumeSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteVolumeSnapshot, null, options, request);
      }
      /// <summary>
      /// Deletes a storage volume snapshot for a given volume.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteVolumeSnapshotAsync(global::Google.Cloud.BaremetalSolution.V2.DeleteVolumeSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteVolumeSnapshotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a storage volume snapshot for a given volume.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteVolumeSnapshotAsync(global::Google.Cloud.BaremetalSolution.V2.DeleteVolumeSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteVolumeSnapshot, null, options, request);
      }
      /// <summary>
      /// Get details of a single storage volume snapshot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BaremetalSolution.V2.VolumeSnapshot GetVolumeSnapshot(global::Google.Cloud.BaremetalSolution.V2.GetVolumeSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVolumeSnapshot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get details of a single storage volume snapshot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BaremetalSolution.V2.VolumeSnapshot GetVolumeSnapshot(global::Google.Cloud.BaremetalSolution.V2.GetVolumeSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetVolumeSnapshot, null, options, request);
      }
      /// <summary>
      /// Get details of a single storage volume snapshot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BaremetalSolution.V2.VolumeSnapshot> GetVolumeSnapshotAsync(global::Google.Cloud.BaremetalSolution.V2.GetVolumeSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVolumeSnapshotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get details of a single storage volume snapshot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BaremetalSolution.V2.VolumeSnapshot> GetVolumeSnapshotAsync(global::Google.Cloud.BaremetalSolution.V2.GetVolumeSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetVolumeSnapshot, null, options, request);
      }
      /// <summary>
      /// List storage volume snapshots for given storage volume.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BaremetalSolution.V2.ListVolumeSnapshotsResponse ListVolumeSnapshots(global::Google.Cloud.BaremetalSolution.V2.ListVolumeSnapshotsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListVolumeSnapshots(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List storage volume snapshots for given storage volume.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BaremetalSolution.V2.ListVolumeSnapshotsResponse ListVolumeSnapshots(global::Google.Cloud.BaremetalSolution.V2.ListVolumeSnapshotsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListVolumeSnapshots, null, options, request);
      }
      /// <summary>
      /// List storage volume snapshots for given storage volume.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BaremetalSolution.V2.ListVolumeSnapshotsResponse> ListVolumeSnapshotsAsync(global::Google.Cloud.BaremetalSolution.V2.ListVolumeSnapshotsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListVolumeSnapshotsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List storage volume snapshots for given storage volume.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BaremetalSolution.V2.ListVolumeSnapshotsResponse> ListVolumeSnapshotsAsync(global::Google.Cloud.BaremetalSolution.V2.ListVolumeSnapshotsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListVolumeSnapshots, null, options, request);
      }
      /// <summary>
      /// Get details of a single storage logical unit number(LUN).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BaremetalSolution.V2.Lun GetLun(global::Google.Cloud.BaremetalSolution.V2.GetLunRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLun(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get details of a single storage logical unit number(LUN).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BaremetalSolution.V2.Lun GetLun(global::Google.Cloud.BaremetalSolution.V2.GetLunRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLun, null, options, request);
      }
      /// <summary>
      /// Get details of a single storage logical unit number(LUN).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BaremetalSolution.V2.Lun> GetLunAsync(global::Google.Cloud.BaremetalSolution.V2.GetLunRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLunAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get details of a single storage logical unit number(LUN).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BaremetalSolution.V2.Lun> GetLunAsync(global::Google.Cloud.BaremetalSolution.V2.GetLunRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLun, null, options, request);
      }
      /// <summary>
      /// List storage volume luns for given storage volume.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BaremetalSolution.V2.ListLunsResponse ListLuns(global::Google.Cloud.BaremetalSolution.V2.ListLunsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListLuns(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List storage volume luns for given storage volume.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BaremetalSolution.V2.ListLunsResponse ListLuns(global::Google.Cloud.BaremetalSolution.V2.ListLunsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListLuns, null, options, request);
      }
      /// <summary>
      /// List storage volume luns for given storage volume.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BaremetalSolution.V2.ListLunsResponse> ListLunsAsync(global::Google.Cloud.BaremetalSolution.V2.ListLunsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListLunsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List storage volume luns for given storage volume.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BaremetalSolution.V2.ListLunsResponse> ListLunsAsync(global::Google.Cloud.BaremetalSolution.V2.ListLunsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListLuns, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override BareMetalSolutionClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new BareMetalSolutionClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(BareMetalSolutionBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListInstances, serviceImpl.ListInstances)
          .AddMethod(__Method_GetInstance, serviceImpl.GetInstance)
          .AddMethod(__Method_ResetInstance, serviceImpl.ResetInstance)
          .AddMethod(__Method_ListVolumes, serviceImpl.ListVolumes)
          .AddMethod(__Method_GetVolume, serviceImpl.GetVolume)
          .AddMethod(__Method_UpdateVolume, serviceImpl.UpdateVolume)
          .AddMethod(__Method_ListNetworks, serviceImpl.ListNetworks)
          .AddMethod(__Method_GetNetwork, serviceImpl.GetNetwork)
          .AddMethod(__Method_ListSnapshotSchedulePolicies, serviceImpl.ListSnapshotSchedulePolicies)
          .AddMethod(__Method_GetSnapshotSchedulePolicy, serviceImpl.GetSnapshotSchedulePolicy)
          .AddMethod(__Method_CreateSnapshotSchedulePolicy, serviceImpl.CreateSnapshotSchedulePolicy)
          .AddMethod(__Method_UpdateSnapshotSchedulePolicy, serviceImpl.UpdateSnapshotSchedulePolicy)
          .AddMethod(__Method_DeleteSnapshotSchedulePolicy, serviceImpl.DeleteSnapshotSchedulePolicy)
          .AddMethod(__Method_CreateVolumeSnapshot, serviceImpl.CreateVolumeSnapshot)
          .AddMethod(__Method_RestoreVolumeSnapshot, serviceImpl.RestoreVolumeSnapshot)
          .AddMethod(__Method_DeleteVolumeSnapshot, serviceImpl.DeleteVolumeSnapshot)
          .AddMethod(__Method_GetVolumeSnapshot, serviceImpl.GetVolumeSnapshot)
          .AddMethod(__Method_ListVolumeSnapshots, serviceImpl.ListVolumeSnapshots)
          .AddMethod(__Method_GetLun, serviceImpl.GetLun)
          .AddMethod(__Method_ListLuns, serviceImpl.ListLuns).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, BareMetalSolutionBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListInstances, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BaremetalSolution.V2.ListInstancesRequest, global::Google.Cloud.BaremetalSolution.V2.ListInstancesResponse>(serviceImpl.ListInstances));
      serviceBinder.AddMethod(__Method_GetInstance, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BaremetalSolution.V2.GetInstanceRequest, global::Google.Cloud.BaremetalSolution.V2.Instance>(serviceImpl.GetInstance));
      serviceBinder.AddMethod(__Method_ResetInstance, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BaremetalSolution.V2.ResetInstanceRequest, global::Google.LongRunning.Operation>(serviceImpl.ResetInstance));
      serviceBinder.AddMethod(__Method_ListVolumes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BaremetalSolution.V2.ListVolumesRequest, global::Google.Cloud.BaremetalSolution.V2.ListVolumesResponse>(serviceImpl.ListVolumes));
      serviceBinder.AddMethod(__Method_GetVolume, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BaremetalSolution.V2.GetVolumeRequest, global::Google.Cloud.BaremetalSolution.V2.Volume>(serviceImpl.GetVolume));
      serviceBinder.AddMethod(__Method_UpdateVolume, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BaremetalSolution.V2.UpdateVolumeRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateVolume));
      serviceBinder.AddMethod(__Method_ListNetworks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BaremetalSolution.V2.ListNetworksRequest, global::Google.Cloud.BaremetalSolution.V2.ListNetworksResponse>(serviceImpl.ListNetworks));
      serviceBinder.AddMethod(__Method_GetNetwork, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BaremetalSolution.V2.GetNetworkRequest, global::Google.Cloud.BaremetalSolution.V2.Network>(serviceImpl.GetNetwork));
      serviceBinder.AddMethod(__Method_ListSnapshotSchedulePolicies, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BaremetalSolution.V2.ListSnapshotSchedulePoliciesRequest, global::Google.Cloud.BaremetalSolution.V2.ListSnapshotSchedulePoliciesResponse>(serviceImpl.ListSnapshotSchedulePolicies));
      serviceBinder.AddMethod(__Method_GetSnapshotSchedulePolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BaremetalSolution.V2.GetSnapshotSchedulePolicyRequest, global::Google.Cloud.BaremetalSolution.V2.SnapshotSchedulePolicy>(serviceImpl.GetSnapshotSchedulePolicy));
      serviceBinder.AddMethod(__Method_CreateSnapshotSchedulePolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BaremetalSolution.V2.CreateSnapshotSchedulePolicyRequest, global::Google.Cloud.BaremetalSolution.V2.SnapshotSchedulePolicy>(serviceImpl.CreateSnapshotSchedulePolicy));
      serviceBinder.AddMethod(__Method_UpdateSnapshotSchedulePolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BaremetalSolution.V2.UpdateSnapshotSchedulePolicyRequest, global::Google.Cloud.BaremetalSolution.V2.SnapshotSchedulePolicy>(serviceImpl.UpdateSnapshotSchedulePolicy));
      serviceBinder.AddMethod(__Method_DeleteSnapshotSchedulePolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BaremetalSolution.V2.DeleteSnapshotSchedulePolicyRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteSnapshotSchedulePolicy));
      serviceBinder.AddMethod(__Method_CreateVolumeSnapshot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BaremetalSolution.V2.CreateVolumeSnapshotRequest, global::Google.Cloud.BaremetalSolution.V2.VolumeSnapshot>(serviceImpl.CreateVolumeSnapshot));
      serviceBinder.AddMethod(__Method_RestoreVolumeSnapshot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BaremetalSolution.V2.RestoreVolumeSnapshotRequest, global::Google.LongRunning.Operation>(serviceImpl.RestoreVolumeSnapshot));
      serviceBinder.AddMethod(__Method_DeleteVolumeSnapshot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BaremetalSolution.V2.DeleteVolumeSnapshotRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteVolumeSnapshot));
      serviceBinder.AddMethod(__Method_GetVolumeSnapshot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BaremetalSolution.V2.GetVolumeSnapshotRequest, global::Google.Cloud.BaremetalSolution.V2.VolumeSnapshot>(serviceImpl.GetVolumeSnapshot));
      serviceBinder.AddMethod(__Method_ListVolumeSnapshots, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BaremetalSolution.V2.ListVolumeSnapshotsRequest, global::Google.Cloud.BaremetalSolution.V2.ListVolumeSnapshotsResponse>(serviceImpl.ListVolumeSnapshots));
      serviceBinder.AddMethod(__Method_GetLun, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BaremetalSolution.V2.GetLunRequest, global::Google.Cloud.BaremetalSolution.V2.Lun>(serviceImpl.GetLun));
      serviceBinder.AddMethod(__Method_ListLuns, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BaremetalSolution.V2.ListLunsRequest, global::Google.Cloud.BaremetalSolution.V2.ListLunsResponse>(serviceImpl.ListLuns));
    }

  }
}
#endregion
