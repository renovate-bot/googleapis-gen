<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/cloudtrace/v1/trace.proto

namespace Google\Cloud\Trace\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The request message for the `ListTraces` method. All fields are required
 * unless specified.
 *
 * Generated from protobuf message <code>google.devtools.cloudtrace.v1.ListTracesRequest</code>
 */
class ListTracesRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Required. ID of the Cloud project where the trace data is stored.
     *
     * Generated from protobuf field <code>string project_id = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    protected $project_id = '';
    /**
     * Optional. Type of data returned for traces in the list. Default is
     * `MINIMAL`.
     *
     * Generated from protobuf field <code>.google.devtools.cloudtrace.v1.ListTracesRequest.ViewType view = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $view = 0;
    /**
     * Optional. Maximum number of traces to return. If not specified or <= 0, the
     * implementation selects a reasonable value.  The implementation may
     * return fewer traces than the requested page size.
     *
     * Generated from protobuf field <code>int32 page_size = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $page_size = 0;
    /**
     * Token identifying the page of results to return. If provided, use the
     * value of the `next_page_token` field from a previous request.
     *
     * Generated from protobuf field <code>string page_token = 4;</code>
     */
    protected $page_token = '';
    /**
     * Start of the time interval (inclusive) during which the trace data was
     * collected from the application.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp start_time = 5;</code>
     */
    protected $start_time = null;
    /**
     * End of the time interval (inclusive) during which the trace data was
     * collected from the application.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp end_time = 6;</code>
     */
    protected $end_time = null;
    /**
     * Optional. A filter against labels for the request.
     * By default, searches use prefix matching. To specify exact match, prepend
     * a plus symbol (`+`) to the search term.
     * Multiple terms are ANDed. Syntax:
     * *   `root:NAME_PREFIX` or `NAME_PREFIX`: Return traces where any root
     *     span starts with `NAME_PREFIX`.
     * *   `+root:NAME` or `+NAME`: Return traces where any root span's name is
     *     exactly `NAME`.
     * *   `span:NAME_PREFIX`: Return traces where any span starts with
     *     `NAME_PREFIX`.
     * *   `+span:NAME`: Return traces where any span's name is exactly
     *     `NAME`.
     * *   `latency:DURATION`: Return traces whose overall latency is
     *     greater or equal to than `DURATION`. Accepted units are nanoseconds
     *     (`ns`), milliseconds (`ms`), and seconds (`s`). Default is `ms`. For
     *     example, `latency:24ms` returns traces whose overall latency
     *     is greater than or equal to 24 milliseconds.
     * *   `label:LABEL_KEY`: Return all traces containing the specified
     *     label key (exact match, case-sensitive) regardless of the key:value
     *     pair's value (including empty values).
     * *   `LABEL_KEY:VALUE_PREFIX`: Return all traces containing the specified
     *     label key (exact match, case-sensitive) whose value starts with
     *     `VALUE_PREFIX`. Both a key and a value must be specified.
     * *   `+LABEL_KEY:VALUE`: Return all traces containing a key:value pair
     *     exactly matching the specified text. Both a key and a value must be
     *     specified.
     * *   `method:VALUE`: Equivalent to `/http/method:VALUE`.
     * *   `url:VALUE`: Equivalent to `/http/url:VALUE`.
     *
     * Generated from protobuf field <code>string filter = 7 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $filter = '';
    /**
     * Optional. Field used to sort the returned traces.
     * Can be one of the following:
     * *   `trace_id`
     * *   `name` (`name` field of root span in the trace)
     * *   `duration` (difference between `end_time` and `start_time` fields of
     *      the root span)
     * *   `start` (`start_time` field of the root span)
     * Descending order can be specified by appending `desc` to the sort field
     * (for example, `name desc`).
     * Only one sort field is permitted.
     *
     * Generated from protobuf field <code>string order_by = 8 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $order_by = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $project_id
     *           Required. ID of the Cloud project where the trace data is stored.
     *     @type int $view
     *           Optional. Type of data returned for traces in the list. Default is
     *           `MINIMAL`.
     *     @type int $page_size
     *           Optional. Maximum number of traces to return. If not specified or <= 0, the
     *           implementation selects a reasonable value.  The implementation may
     *           return fewer traces than the requested page size.
     *     @type string $page_token
     *           Token identifying the page of results to return. If provided, use the
     *           value of the `next_page_token` field from a previous request.
     *     @type \Google\Protobuf\Timestamp $start_time
     *           Start of the time interval (inclusive) during which the trace data was
     *           collected from the application.
     *     @type \Google\Protobuf\Timestamp $end_time
     *           End of the time interval (inclusive) during which the trace data was
     *           collected from the application.
     *     @type string $filter
     *           Optional. A filter against labels for the request.
     *           By default, searches use prefix matching. To specify exact match, prepend
     *           a plus symbol (`+`) to the search term.
     *           Multiple terms are ANDed. Syntax:
     *           *   `root:NAME_PREFIX` or `NAME_PREFIX`: Return traces where any root
     *               span starts with `NAME_PREFIX`.
     *           *   `+root:NAME` or `+NAME`: Return traces where any root span's name is
     *               exactly `NAME`.
     *           *   `span:NAME_PREFIX`: Return traces where any span starts with
     *               `NAME_PREFIX`.
     *           *   `+span:NAME`: Return traces where any span's name is exactly
     *               `NAME`.
     *           *   `latency:DURATION`: Return traces whose overall latency is
     *               greater or equal to than `DURATION`. Accepted units are nanoseconds
     *               (`ns`), milliseconds (`ms`), and seconds (`s`). Default is `ms`. For
     *               example, `latency:24ms` returns traces whose overall latency
     *               is greater than or equal to 24 milliseconds.
     *           *   `label:LABEL_KEY`: Return all traces containing the specified
     *               label key (exact match, case-sensitive) regardless of the key:value
     *               pair's value (including empty values).
     *           *   `LABEL_KEY:VALUE_PREFIX`: Return all traces containing the specified
     *               label key (exact match, case-sensitive) whose value starts with
     *               `VALUE_PREFIX`. Both a key and a value must be specified.
     *           *   `+LABEL_KEY:VALUE`: Return all traces containing a key:value pair
     *               exactly matching the specified text. Both a key and a value must be
     *               specified.
     *           *   `method:VALUE`: Equivalent to `/http/method:VALUE`.
     *           *   `url:VALUE`: Equivalent to `/http/url:VALUE`.
     *     @type string $order_by
     *           Optional. Field used to sort the returned traces.
     *           Can be one of the following:
     *           *   `trace_id`
     *           *   `name` (`name` field of root span in the trace)
     *           *   `duration` (difference between `end_time` and `start_time` fields of
     *                the root span)
     *           *   `start` (`start_time` field of the root span)
     *           Descending order can be specified by appending `desc` to the sort field
     *           (for example, `name desc`).
     *           Only one sort field is permitted.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Devtools\Cloudtrace\V1\Trace::initOnce();
        parent::__construct($data);
    }

    /**
     * Required. ID of the Cloud project where the trace data is stored.
     *
     * Generated from protobuf field <code>string project_id = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return string
     */
    public function getProjectId()
    {
        return $this->project_id;
    }

    /**
     * Required. ID of the Cloud project where the trace data is stored.
     *
     * Generated from protobuf field <code>string project_id = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param string $var
     * @return $this
     */
    public function setProjectId($var)
    {
        GPBUtil::checkString($var, True);
        $this->project_id = $var;

        return $this;
    }

    /**
     * Optional. Type of data returned for traces in the list. Default is
     * `MINIMAL`.
     *
     * Generated from protobuf field <code>.google.devtools.cloudtrace.v1.ListTracesRequest.ViewType view = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return int
     */
    public function getView()
    {
        return $this->view;
    }

    /**
     * Optional. Type of data returned for traces in the list. Default is
     * `MINIMAL`.
     *
     * Generated from protobuf field <code>.google.devtools.cloudtrace.v1.ListTracesRequest.ViewType view = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param int $var
     * @return $this
     */
    public function setView($var)
    {
        GPBUtil::checkEnum($var, \Google\Cloud\Trace\V1\ListTracesRequest\ViewType::class);
        $this->view = $var;

        return $this;
    }

    /**
     * Optional. Maximum number of traces to return. If not specified or <= 0, the
     * implementation selects a reasonable value.  The implementation may
     * return fewer traces than the requested page size.
     *
     * Generated from protobuf field <code>int32 page_size = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return int
     */
    public function getPageSize()
    {
        return $this->page_size;
    }

    /**
     * Optional. Maximum number of traces to return. If not specified or <= 0, the
     * implementation selects a reasonable value.  The implementation may
     * return fewer traces than the requested page size.
     *
     * Generated from protobuf field <code>int32 page_size = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param int $var
     * @return $this
     */
    public function setPageSize($var)
    {
        GPBUtil::checkInt32($var);
        $this->page_size = $var;

        return $this;
    }

    /**
     * Token identifying the page of results to return. If provided, use the
     * value of the `next_page_token` field from a previous request.
     *
     * Generated from protobuf field <code>string page_token = 4;</code>
     * @return string
     */
    public function getPageToken()
    {
        return $this->page_token;
    }

    /**
     * Token identifying the page of results to return. If provided, use the
     * value of the `next_page_token` field from a previous request.
     *
     * Generated from protobuf field <code>string page_token = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setPageToken($var)
    {
        GPBUtil::checkString($var, True);
        $this->page_token = $var;

        return $this;
    }

    /**
     * Start of the time interval (inclusive) during which the trace data was
     * collected from the application.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp start_time = 5;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getStartTime()
    {
        return $this->start_time;
    }

    public function hasStartTime()
    {
        return isset($this->start_time);
    }

    public function clearStartTime()
    {
        unset($this->start_time);
    }

    /**
     * Start of the time interval (inclusive) during which the trace data was
     * collected from the application.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp start_time = 5;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setStartTime($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->start_time = $var;

        return $this;
    }

    /**
     * End of the time interval (inclusive) during which the trace data was
     * collected from the application.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp end_time = 6;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getEndTime()
    {
        return $this->end_time;
    }

    public function hasEndTime()
    {
        return isset($this->end_time);
    }

    public function clearEndTime()
    {
        unset($this->end_time);
    }

    /**
     * End of the time interval (inclusive) during which the trace data was
     * collected from the application.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp end_time = 6;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setEndTime($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->end_time = $var;

        return $this;
    }

    /**
     * Optional. A filter against labels for the request.
     * By default, searches use prefix matching. To specify exact match, prepend
     * a plus symbol (`+`) to the search term.
     * Multiple terms are ANDed. Syntax:
     * *   `root:NAME_PREFIX` or `NAME_PREFIX`: Return traces where any root
     *     span starts with `NAME_PREFIX`.
     * *   `+root:NAME` or `+NAME`: Return traces where any root span's name is
     *     exactly `NAME`.
     * *   `span:NAME_PREFIX`: Return traces where any span starts with
     *     `NAME_PREFIX`.
     * *   `+span:NAME`: Return traces where any span's name is exactly
     *     `NAME`.
     * *   `latency:DURATION`: Return traces whose overall latency is
     *     greater or equal to than `DURATION`. Accepted units are nanoseconds
     *     (`ns`), milliseconds (`ms`), and seconds (`s`). Default is `ms`. For
     *     example, `latency:24ms` returns traces whose overall latency
     *     is greater than or equal to 24 milliseconds.
     * *   `label:LABEL_KEY`: Return all traces containing the specified
     *     label key (exact match, case-sensitive) regardless of the key:value
     *     pair's value (including empty values).
     * *   `LABEL_KEY:VALUE_PREFIX`: Return all traces containing the specified
     *     label key (exact match, case-sensitive) whose value starts with
     *     `VALUE_PREFIX`. Both a key and a value must be specified.
     * *   `+LABEL_KEY:VALUE`: Return all traces containing a key:value pair
     *     exactly matching the specified text. Both a key and a value must be
     *     specified.
     * *   `method:VALUE`: Equivalent to `/http/method:VALUE`.
     * *   `url:VALUE`: Equivalent to `/http/url:VALUE`.
     *
     * Generated from protobuf field <code>string filter = 7 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return string
     */
    public function getFilter()
    {
        return $this->filter;
    }

    /**
     * Optional. A filter against labels for the request.
     * By default, searches use prefix matching. To specify exact match, prepend
     * a plus symbol (`+`) to the search term.
     * Multiple terms are ANDed. Syntax:
     * *   `root:NAME_PREFIX` or `NAME_PREFIX`: Return traces where any root
     *     span starts with `NAME_PREFIX`.
     * *   `+root:NAME` or `+NAME`: Return traces where any root span's name is
     *     exactly `NAME`.
     * *   `span:NAME_PREFIX`: Return traces where any span starts with
     *     `NAME_PREFIX`.
     * *   `+span:NAME`: Return traces where any span's name is exactly
     *     `NAME`.
     * *   `latency:DURATION`: Return traces whose overall latency is
     *     greater or equal to than `DURATION`. Accepted units are nanoseconds
     *     (`ns`), milliseconds (`ms`), and seconds (`s`). Default is `ms`. For
     *     example, `latency:24ms` returns traces whose overall latency
     *     is greater than or equal to 24 milliseconds.
     * *   `label:LABEL_KEY`: Return all traces containing the specified
     *     label key (exact match, case-sensitive) regardless of the key:value
     *     pair's value (including empty values).
     * *   `LABEL_KEY:VALUE_PREFIX`: Return all traces containing the specified
     *     label key (exact match, case-sensitive) whose value starts with
     *     `VALUE_PREFIX`. Both a key and a value must be specified.
     * *   `+LABEL_KEY:VALUE`: Return all traces containing a key:value pair
     *     exactly matching the specified text. Both a key and a value must be
     *     specified.
     * *   `method:VALUE`: Equivalent to `/http/method:VALUE`.
     * *   `url:VALUE`: Equivalent to `/http/url:VALUE`.
     *
     * Generated from protobuf field <code>string filter = 7 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param string $var
     * @return $this
     */
    public function setFilter($var)
    {
        GPBUtil::checkString($var, True);
        $this->filter = $var;

        return $this;
    }

    /**
     * Optional. Field used to sort the returned traces.
     * Can be one of the following:
     * *   `trace_id`
     * *   `name` (`name` field of root span in the trace)
     * *   `duration` (difference between `end_time` and `start_time` fields of
     *      the root span)
     * *   `start` (`start_time` field of the root span)
     * Descending order can be specified by appending `desc` to the sort field
     * (for example, `name desc`).
     * Only one sort field is permitted.
     *
     * Generated from protobuf field <code>string order_by = 8 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return string
     */
    public function getOrderBy()
    {
        return $this->order_by;
    }

    /**
     * Optional. Field used to sort the returned traces.
     * Can be one of the following:
     * *   `trace_id`
     * *   `name` (`name` field of root span in the trace)
     * *   `duration` (difference between `end_time` and `start_time` fields of
     *      the root span)
     * *   `start` (`start_time` field of the root span)
     * Descending order can be specified by appending `desc` to the sort field
     * (for example, `name desc`).
     * Only one sort field is permitted.
     *
     * Generated from protobuf field <code>string order_by = 8 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param string $var
     * @return $this
     */
    public function setOrderBy($var)
    {
        GPBUtil::checkString($var, True);
        $this->order_by = $var;

        return $this;
    }

}

