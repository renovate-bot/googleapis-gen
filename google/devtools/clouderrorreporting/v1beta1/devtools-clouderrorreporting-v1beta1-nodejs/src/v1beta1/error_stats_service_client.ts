// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, GaxCall} from 'google-gax';

import { Transform } from 'stream';
import { RequestType } from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1beta1/error_stats_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './error_stats_service_client_config.json';

const version = require('../../../package.json').version;

/**
 *  An API for retrieving and managing error statistics as well as data for
 *  individual events.
 * @class
 * @memberof v1beta1
 */
export class ErrorStatsServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  errorStatsServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ErrorStatsServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP fallback mode.
   *     In fallback mode, a special browser-compatible transport implementation is used
   *     instead of gRPC transport. In browser context (if the `window` object is defined)
   *     the fallback mode is enabled automatically; set `options.fallback` to `false`
   *     if you need to override this behavior.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof ErrorStatsServiceClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      errorGroupPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/groups/{group}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listGroupStats:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'errorGroupStats'),
      listEvents:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'errorEvents')
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.devtools.clouderrorreporting.v1beta1.ErrorStatsService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = gax.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.errorStatsServiceStub) {
      return this.errorStatsServiceStub;
    }

    // Put together the "service stub" for
    // google.devtools.clouderrorreporting.v1beta1.ErrorStatsService.
    this.errorStatsServiceStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.devtools.clouderrorreporting.v1beta1.ErrorStatsService') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.devtools.clouderrorreporting.v1beta1.ErrorStatsService,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const errorStatsServiceStubMethods =
        ['listGroupStats', 'listEvents', 'deleteEvents'];
    for (const methodName of errorStatsServiceStubMethods) {
      const callPromise = this.errorStatsServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.errorStatsServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'clouderrorreporting.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'clouderrorreporting.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  deleteEvents(
      request?: protos.google.devtools.clouderrorreporting.v1beta1.IDeleteEventsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.devtools.clouderrorreporting.v1beta1.IDeleteEventsResponse,
        protos.google.devtools.clouderrorreporting.v1beta1.IDeleteEventsRequest|undefined, {}|undefined
      ]>;
  deleteEvents(
      request: protos.google.devtools.clouderrorreporting.v1beta1.IDeleteEventsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.devtools.clouderrorreporting.v1beta1.IDeleteEventsResponse,
          protos.google.devtools.clouderrorreporting.v1beta1.IDeleteEventsRequest|null|undefined,
          {}|null|undefined>): void;
  deleteEvents(
      request: protos.google.devtools.clouderrorreporting.v1beta1.IDeleteEventsRequest,
      callback: Callback<
          protos.google.devtools.clouderrorreporting.v1beta1.IDeleteEventsResponse,
          protos.google.devtools.clouderrorreporting.v1beta1.IDeleteEventsRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Deletes all error events of a given project.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectName
 *   Required. The resource name of the Google Cloud Platform project. Written
 *   as `projects/{projectID}`, where `{projectID}` is the
 *   [Google Cloud Platform project
 *   ID](https://support.google.com/cloud/answer/6158840).
 *
 *   Example: `projects/my-project-123`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [DeleteEventsResponse]{@link google.devtools.clouderrorreporting.v1beta1.DeleteEventsResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.deleteEvents(request);
 */
  deleteEvents(
      request?: protos.google.devtools.clouderrorreporting.v1beta1.IDeleteEventsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.devtools.clouderrorreporting.v1beta1.IDeleteEventsResponse,
          protos.google.devtools.clouderrorreporting.v1beta1.IDeleteEventsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.clouderrorreporting.v1beta1.IDeleteEventsResponse,
          protos.google.devtools.clouderrorreporting.v1beta1.IDeleteEventsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.clouderrorreporting.v1beta1.IDeleteEventsResponse,
        protos.google.devtools.clouderrorreporting.v1beta1.IDeleteEventsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project_name': request.projectName || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteEvents(request, options, callback);
  }

  listGroupStats(
      request?: protos.google.devtools.clouderrorreporting.v1beta1.IListGroupStatsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.devtools.clouderrorreporting.v1beta1.IErrorGroupStats[],
        protos.google.devtools.clouderrorreporting.v1beta1.IListGroupStatsRequest|null,
        protos.google.devtools.clouderrorreporting.v1beta1.IListGroupStatsResponse
      ]>;
  listGroupStats(
      request: protos.google.devtools.clouderrorreporting.v1beta1.IListGroupStatsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.devtools.clouderrorreporting.v1beta1.IListGroupStatsRequest,
          protos.google.devtools.clouderrorreporting.v1beta1.IListGroupStatsResponse|null|undefined,
          protos.google.devtools.clouderrorreporting.v1beta1.IErrorGroupStats>): void;
  listGroupStats(
      request: protos.google.devtools.clouderrorreporting.v1beta1.IListGroupStatsRequest,
      callback: PaginationCallback<
          protos.google.devtools.clouderrorreporting.v1beta1.IListGroupStatsRequest,
          protos.google.devtools.clouderrorreporting.v1beta1.IListGroupStatsResponse|null|undefined,
          protos.google.devtools.clouderrorreporting.v1beta1.IErrorGroupStats>): void;
/**
 * Lists the specified groups.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectName
 *   Required. The resource name of the Google Cloud Platform project. Written
 *   as `projects/{projectID}` or `projects/{projectNumber}`, where `{projectID}`
 *   and `{projectNumber}` can be found in the
 *   [Google Cloud Console](https://support.google.com/cloud/answer/6158840).
 *
 *   Examples: `projects/my-project-123`, `projects/5551234`.
 * @param {string[]} [request.groupId]
 *   Optional. List all <code>ErrorGroupStats</code> with these IDs.
 * @param {google.devtools.clouderrorreporting.v1beta1.ServiceContextFilter} [request.serviceFilter]
 *   Optional. List only <code>ErrorGroupStats</code> which belong to a service
 *   context that matches the filter.
 *   Data for all service contexts is returned if this field is not specified.
 * @param {google.devtools.clouderrorreporting.v1beta1.QueryTimeRange} [request.timeRange]
 *   Optional. List data for the given time range.
 *   If not set, a default time range is used. The field
 *   <code>time_range_begin</code> in the response will specify the beginning
 *   of this time range.
 *   Only <code>ErrorGroupStats</code> with a non-zero count in the given time
 *   range are returned, unless the request contains an explicit
 *   <code>group_id</code> list. If a <code>group_id</code> list is given, also
 *   <code>ErrorGroupStats</code> with zero occurrences are returned.
 * @param {google.protobuf.Duration} [request.timedCountDuration]
 *   Optional. The preferred duration for a single returned `TimedCount`.
 *   If not set, no timed counts are returned.
 * @param {google.devtools.clouderrorreporting.v1beta1.TimedCountAlignment} [request.alignment]
 *   Optional. The alignment of the timed counts to be returned.
 *   Default is `ALIGNMENT_EQUAL_AT_END`.
 * @param {google.protobuf.Timestamp} [request.alignmentTime]
 *   Optional. Time where the timed counts shall be aligned if rounded
 *   alignment is chosen. Default is 00:00 UTC.
 * @param {google.devtools.clouderrorreporting.v1beta1.ErrorGroupOrder} [request.order]
 *   Optional. The sort order in which the results are returned.
 *   Default is `COUNT_DESC`.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return per response.
 *   Default is 20.
 * @param {string} [request.pageToken]
 *   Optional. A `next_page_token` provided by a previous response. To view
 *   additional results, pass this token along with the identical query
 *   parameters as the first request.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [ErrorGroupStats]{@link google.devtools.clouderrorreporting.v1beta1.ErrorGroupStats}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listGroupStatsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listGroupStats(
      request?: protos.google.devtools.clouderrorreporting.v1beta1.IListGroupStatsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.devtools.clouderrorreporting.v1beta1.IListGroupStatsRequest,
          protos.google.devtools.clouderrorreporting.v1beta1.IListGroupStatsResponse|null|undefined,
          protos.google.devtools.clouderrorreporting.v1beta1.IErrorGroupStats>,
      callback?: PaginationCallback<
          protos.google.devtools.clouderrorreporting.v1beta1.IListGroupStatsRequest,
          protos.google.devtools.clouderrorreporting.v1beta1.IListGroupStatsResponse|null|undefined,
          protos.google.devtools.clouderrorreporting.v1beta1.IErrorGroupStats>):
      Promise<[
        protos.google.devtools.clouderrorreporting.v1beta1.IErrorGroupStats[],
        protos.google.devtools.clouderrorreporting.v1beta1.IListGroupStatsRequest|null,
        protos.google.devtools.clouderrorreporting.v1beta1.IListGroupStatsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project_name': request.projectName || '',
    });
    this.initialize();
    return this.innerApiCalls.listGroupStats(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectName
 *   Required. The resource name of the Google Cloud Platform project. Written
 *   as `projects/{projectID}` or `projects/{projectNumber}`, where `{projectID}`
 *   and `{projectNumber}` can be found in the
 *   [Google Cloud Console](https://support.google.com/cloud/answer/6158840).
 *
 *   Examples: `projects/my-project-123`, `projects/5551234`.
 * @param {string[]} [request.groupId]
 *   Optional. List all <code>ErrorGroupStats</code> with these IDs.
 * @param {google.devtools.clouderrorreporting.v1beta1.ServiceContextFilter} [request.serviceFilter]
 *   Optional. List only <code>ErrorGroupStats</code> which belong to a service
 *   context that matches the filter.
 *   Data for all service contexts is returned if this field is not specified.
 * @param {google.devtools.clouderrorreporting.v1beta1.QueryTimeRange} [request.timeRange]
 *   Optional. List data for the given time range.
 *   If not set, a default time range is used. The field
 *   <code>time_range_begin</code> in the response will specify the beginning
 *   of this time range.
 *   Only <code>ErrorGroupStats</code> with a non-zero count in the given time
 *   range are returned, unless the request contains an explicit
 *   <code>group_id</code> list. If a <code>group_id</code> list is given, also
 *   <code>ErrorGroupStats</code> with zero occurrences are returned.
 * @param {google.protobuf.Duration} [request.timedCountDuration]
 *   Optional. The preferred duration for a single returned `TimedCount`.
 *   If not set, no timed counts are returned.
 * @param {google.devtools.clouderrorreporting.v1beta1.TimedCountAlignment} [request.alignment]
 *   Optional. The alignment of the timed counts to be returned.
 *   Default is `ALIGNMENT_EQUAL_AT_END`.
 * @param {google.protobuf.Timestamp} [request.alignmentTime]
 *   Optional. Time where the timed counts shall be aligned if rounded
 *   alignment is chosen. Default is 00:00 UTC.
 * @param {google.devtools.clouderrorreporting.v1beta1.ErrorGroupOrder} [request.order]
 *   Optional. The sort order in which the results are returned.
 *   Default is `COUNT_DESC`.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return per response.
 *   Default is 20.
 * @param {string} [request.pageToken]
 *   Optional. A `next_page_token` provided by a previous response. To view
 *   additional results, pass this token along with the identical query
 *   parameters as the first request.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [ErrorGroupStats]{@link google.devtools.clouderrorreporting.v1beta1.ErrorGroupStats} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listGroupStatsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listGroupStatsStream(
      request?: protos.google.devtools.clouderrorreporting.v1beta1.IListGroupStatsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project_name': request.projectName || '',
    });
    const defaultCallSettings = this._defaults['listGroupStats'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listGroupStats.createStream(
      this.innerApiCalls.listGroupStats as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listGroupStats`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectName
 *   Required. The resource name of the Google Cloud Platform project. Written
 *   as `projects/{projectID}` or `projects/{projectNumber}`, where `{projectID}`
 *   and `{projectNumber}` can be found in the
 *   [Google Cloud Console](https://support.google.com/cloud/answer/6158840).
 *
 *   Examples: `projects/my-project-123`, `projects/5551234`.
 * @param {string[]} [request.groupId]
 *   Optional. List all <code>ErrorGroupStats</code> with these IDs.
 * @param {google.devtools.clouderrorreporting.v1beta1.ServiceContextFilter} [request.serviceFilter]
 *   Optional. List only <code>ErrorGroupStats</code> which belong to a service
 *   context that matches the filter.
 *   Data for all service contexts is returned if this field is not specified.
 * @param {google.devtools.clouderrorreporting.v1beta1.QueryTimeRange} [request.timeRange]
 *   Optional. List data for the given time range.
 *   If not set, a default time range is used. The field
 *   <code>time_range_begin</code> in the response will specify the beginning
 *   of this time range.
 *   Only <code>ErrorGroupStats</code> with a non-zero count in the given time
 *   range are returned, unless the request contains an explicit
 *   <code>group_id</code> list. If a <code>group_id</code> list is given, also
 *   <code>ErrorGroupStats</code> with zero occurrences are returned.
 * @param {google.protobuf.Duration} [request.timedCountDuration]
 *   Optional. The preferred duration for a single returned `TimedCount`.
 *   If not set, no timed counts are returned.
 * @param {google.devtools.clouderrorreporting.v1beta1.TimedCountAlignment} [request.alignment]
 *   Optional. The alignment of the timed counts to be returned.
 *   Default is `ALIGNMENT_EQUAL_AT_END`.
 * @param {google.protobuf.Timestamp} [request.alignmentTime]
 *   Optional. Time where the timed counts shall be aligned if rounded
 *   alignment is chosen. Default is 00:00 UTC.
 * @param {google.devtools.clouderrorreporting.v1beta1.ErrorGroupOrder} [request.order]
 *   Optional. The sort order in which the results are returned.
 *   Default is `COUNT_DESC`.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return per response.
 *   Default is 20.
 * @param {string} [request.pageToken]
 *   Optional. A `next_page_token` provided by a previous response. To view
 *   additional results, pass this token along with the identical query
 *   parameters as the first request.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [ErrorGroupStats]{@link google.devtools.clouderrorreporting.v1beta1.ErrorGroupStats}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listGroupStatsAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listGroupStatsAsync(
      request?: protos.google.devtools.clouderrorreporting.v1beta1.IListGroupStatsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.devtools.clouderrorreporting.v1beta1.IErrorGroupStats>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project_name': request.projectName || '',
    });
    options = options || {};
    const defaultCallSettings = this._defaults['listGroupStats'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listGroupStats.asyncIterate(
      this.innerApiCalls['listGroupStats'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.devtools.clouderrorreporting.v1beta1.IErrorGroupStats>;
  }
  listEvents(
      request?: protos.google.devtools.clouderrorreporting.v1beta1.IListEventsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.devtools.clouderrorreporting.v1beta1.IErrorEvent[],
        protos.google.devtools.clouderrorreporting.v1beta1.IListEventsRequest|null,
        protos.google.devtools.clouderrorreporting.v1beta1.IListEventsResponse
      ]>;
  listEvents(
      request: protos.google.devtools.clouderrorreporting.v1beta1.IListEventsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.devtools.clouderrorreporting.v1beta1.IListEventsRequest,
          protos.google.devtools.clouderrorreporting.v1beta1.IListEventsResponse|null|undefined,
          protos.google.devtools.clouderrorreporting.v1beta1.IErrorEvent>): void;
  listEvents(
      request: protos.google.devtools.clouderrorreporting.v1beta1.IListEventsRequest,
      callback: PaginationCallback<
          protos.google.devtools.clouderrorreporting.v1beta1.IListEventsRequest,
          protos.google.devtools.clouderrorreporting.v1beta1.IListEventsResponse|null|undefined,
          protos.google.devtools.clouderrorreporting.v1beta1.IErrorEvent>): void;
/**
 * Lists the specified events.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectName
 *   Required. The resource name of the Google Cloud Platform project. Written
 *   as `projects/{projectID}`, where `{projectID}` is the
 *   [Google Cloud Platform project
 *   ID](https://support.google.com/cloud/answer/6158840).
 *
 *   Example: `projects/my-project-123`.
 * @param {string} request.groupId
 *   Required. The group for which events shall be returned.
 * @param {google.devtools.clouderrorreporting.v1beta1.ServiceContextFilter} [request.serviceFilter]
 *   Optional. List only ErrorGroups which belong to a service context that
 *   matches the filter.
 *   Data for all service contexts is returned if this field is not specified.
 * @param {google.devtools.clouderrorreporting.v1beta1.QueryTimeRange} [request.timeRange]
 *   Optional. List only data for the given time range.
 *   If not set a default time range is used. The field time_range_begin
 *   in the response will specify the beginning of this time range.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return per response.
 * @param {string} [request.pageToken]
 *   Optional. A `next_page_token` provided by a previous response.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [ErrorEvent]{@link google.devtools.clouderrorreporting.v1beta1.ErrorEvent}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listEventsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listEvents(
      request?: protos.google.devtools.clouderrorreporting.v1beta1.IListEventsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.devtools.clouderrorreporting.v1beta1.IListEventsRequest,
          protos.google.devtools.clouderrorreporting.v1beta1.IListEventsResponse|null|undefined,
          protos.google.devtools.clouderrorreporting.v1beta1.IErrorEvent>,
      callback?: PaginationCallback<
          protos.google.devtools.clouderrorreporting.v1beta1.IListEventsRequest,
          protos.google.devtools.clouderrorreporting.v1beta1.IListEventsResponse|null|undefined,
          protos.google.devtools.clouderrorreporting.v1beta1.IErrorEvent>):
      Promise<[
        protos.google.devtools.clouderrorreporting.v1beta1.IErrorEvent[],
        protos.google.devtools.clouderrorreporting.v1beta1.IListEventsRequest|null,
        protos.google.devtools.clouderrorreporting.v1beta1.IListEventsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project_name': request.projectName || '',
    });
    this.initialize();
    return this.innerApiCalls.listEvents(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectName
 *   Required. The resource name of the Google Cloud Platform project. Written
 *   as `projects/{projectID}`, where `{projectID}` is the
 *   [Google Cloud Platform project
 *   ID](https://support.google.com/cloud/answer/6158840).
 *
 *   Example: `projects/my-project-123`.
 * @param {string} request.groupId
 *   Required. The group for which events shall be returned.
 * @param {google.devtools.clouderrorreporting.v1beta1.ServiceContextFilter} [request.serviceFilter]
 *   Optional. List only ErrorGroups which belong to a service context that
 *   matches the filter.
 *   Data for all service contexts is returned if this field is not specified.
 * @param {google.devtools.clouderrorreporting.v1beta1.QueryTimeRange} [request.timeRange]
 *   Optional. List only data for the given time range.
 *   If not set a default time range is used. The field time_range_begin
 *   in the response will specify the beginning of this time range.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return per response.
 * @param {string} [request.pageToken]
 *   Optional. A `next_page_token` provided by a previous response.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [ErrorEvent]{@link google.devtools.clouderrorreporting.v1beta1.ErrorEvent} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listEventsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listEventsStream(
      request?: protos.google.devtools.clouderrorreporting.v1beta1.IListEventsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project_name': request.projectName || '',
    });
    const defaultCallSettings = this._defaults['listEvents'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listEvents.createStream(
      this.innerApiCalls.listEvents as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listEvents`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectName
 *   Required. The resource name of the Google Cloud Platform project. Written
 *   as `projects/{projectID}`, where `{projectID}` is the
 *   [Google Cloud Platform project
 *   ID](https://support.google.com/cloud/answer/6158840).
 *
 *   Example: `projects/my-project-123`.
 * @param {string} request.groupId
 *   Required. The group for which events shall be returned.
 * @param {google.devtools.clouderrorreporting.v1beta1.ServiceContextFilter} [request.serviceFilter]
 *   Optional. List only ErrorGroups which belong to a service context that
 *   matches the filter.
 *   Data for all service contexts is returned if this field is not specified.
 * @param {google.devtools.clouderrorreporting.v1beta1.QueryTimeRange} [request.timeRange]
 *   Optional. List only data for the given time range.
 *   If not set a default time range is used. The field time_range_begin
 *   in the response will specify the beginning of this time range.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return per response.
 * @param {string} [request.pageToken]
 *   Optional. A `next_page_token` provided by a previous response.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [ErrorEvent]{@link google.devtools.clouderrorreporting.v1beta1.ErrorEvent}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listEventsAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listEventsAsync(
      request?: protos.google.devtools.clouderrorreporting.v1beta1.IListEventsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.devtools.clouderrorreporting.v1beta1.IErrorEvent>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project_name': request.projectName || '',
    });
    options = options || {};
    const defaultCallSettings = this._defaults['listEvents'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listEvents.asyncIterate(
      this.innerApiCalls['listEvents'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.devtools.clouderrorreporting.v1beta1.IErrorEvent>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified errorGroup resource name string.
   *
   * @param {string} project
   * @param {string} group
   * @returns {string} Resource name string.
   */
  errorGroupPath(project:string,group:string) {
    return this.pathTemplates.errorGroupPathTemplate.render({
      project: project,
      group: group,
    });
  }

  /**
   * Parse the project from ErrorGroup resource.
   *
   * @param {string} errorGroupName
   *   A fully-qualified path representing ErrorGroup resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromErrorGroupName(errorGroupName: string) {
    return this.pathTemplates.errorGroupPathTemplate.match(errorGroupName).project;
  }

  /**
   * Parse the group from ErrorGroup resource.
   *
   * @param {string} errorGroupName
   *   A fully-qualified path representing ErrorGroup resource.
   * @returns {string} A string representing the group.
   */
  matchGroupFromErrorGroupName(errorGroupName: string) {
    return this.pathTemplates.errorGroupPathTemplate.match(errorGroupName).group;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project:string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.errorStatsServiceStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
