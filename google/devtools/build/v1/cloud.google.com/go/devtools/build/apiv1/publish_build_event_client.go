// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package build

import (
	"context"
	"fmt"
	"math"
	"net/url"
	"time"

	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	buildpb "google.golang.org/genproto/googleapis/devtools/build/v1"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

var newPublishBuildEventClientHook clientHook

// PublishBuildEventCallOptions contains the retry settings for each method of PublishBuildEventClient.
type PublishBuildEventCallOptions struct {
	PublishLifecycleEvent       []gax.CallOption
	PublishBuildToolEventStream []gax.CallOption
}

func defaultPublishBuildEventGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("buildeventservice.googleapis.com:443"),
		internaloption.WithDefaultMTLSEndpoint("buildeventservice.mtls.googleapis.com:443"),
		internaloption.WithDefaultAudience("https://buildeventservice.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultPublishBuildEventCallOptions() *PublishBuildEventCallOptions {
	return &PublishBuildEventCallOptions{
		PublishLifecycleEvent:       []gax.CallOption{},
		PublishBuildToolEventStream: []gax.CallOption{},
	}
}

// internalPublishBuildEventClient is an interface that defines the methods availaible from Build Event Service Backend API.
type internalPublishBuildEventClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	PublishLifecycleEvent(context.Context, *buildpb.PublishLifecycleEventRequest, ...gax.CallOption) error
	PublishBuildToolEventStream(context.Context, ...gax.CallOption) (buildpb.PublishBuildEvent_PublishBuildToolEventStreamClient, error)
}

// PublishBuildEventClient is a client for interacting with Build Event Service Backend API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// A service for publishing BuildEvents. BuildEvents are generated by Build
// Systems to record actions taken during a Build. Events occur in streams,
// are identified by a StreamId, and ordered by sequence number in a stream.
//
// A Build may contain several streams of BuildEvents, depending on the systems
// that are involved in the Build. Some BuildEvents are used to declare the
// beginning and end of major portions of a Build; these are called
// LifecycleEvents, and are used (for example) to indicate the beginning or end
// of a Build, and the beginning or end of an Invocation attempt (there can be
// more than 1 Invocation in a Build if, for example, a failure occurs somewhere
// and it needs to be retried).
//
// Other, build-tool events represent actions taken by the Build tool, such as
// target objects produced via compilation, tests run, et cetera. There could be
// more than one build tool stream for an invocation attempt of a build.
type PublishBuildEventClient struct {
	// The internal transport-dependent client.
	internalClient internalPublishBuildEventClient

	// The call options for this service.
	CallOptions *PublishBuildEventCallOptions
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *PublishBuildEventClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *PublishBuildEventClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *PublishBuildEventClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// PublishLifecycleEvent publish a build event stating the new state of a build (typically from the
// build queue). The BuildEnqueued event must be publishd before all other
// events for the same build ID.
//
// The backend will persist the event and deliver it to registered frontend
// jobs immediately without batching.
//
// The commit status of the request is reported by the RPCâ€™s util_status()
// function. The error code is the canoncial error code defined in
// //util/task/codes.proto.
func (c *PublishBuildEventClient) PublishLifecycleEvent(ctx context.Context, req *buildpb.PublishLifecycleEventRequest, opts ...gax.CallOption) error {
	return c.internalClient.PublishLifecycleEvent(ctx, req, opts...)
}

// PublishBuildToolEventStream publish build tool events belonging to the same stream to a backend job
// using bidirectional streaming.
func (c *PublishBuildEventClient) PublishBuildToolEventStream(ctx context.Context, opts ...gax.CallOption) (buildpb.PublishBuildEvent_PublishBuildToolEventStreamClient, error) {
	return c.internalClient.PublishBuildToolEventStream(ctx, opts...)
}

// publishBuildEventGRPCClient is a client for interacting with Build Event Service Backend API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type publishBuildEventGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// flag to opt out of default deadlines via GOOGLE_API_GO_EXPERIMENTAL_DISABLE_DEFAULT_DEADLINE
	disableDeadlines bool

	// Points back to the CallOptions field of the containing PublishBuildEventClient
	CallOptions **PublishBuildEventCallOptions

	// The gRPC API client.
	publishBuildEventClient buildpb.PublishBuildEventClient

	// The x-goog-* metadata to be sent with each request.
	xGoogMetadata metadata.MD
}

// NewPublishBuildEventClient creates a new publish build event client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// A service for publishing BuildEvents. BuildEvents are generated by Build
// Systems to record actions taken during a Build. Events occur in streams,
// are identified by a StreamId, and ordered by sequence number in a stream.
//
// A Build may contain several streams of BuildEvents, depending on the systems
// that are involved in the Build. Some BuildEvents are used to declare the
// beginning and end of major portions of a Build; these are called
// LifecycleEvents, and are used (for example) to indicate the beginning or end
// of a Build, and the beginning or end of an Invocation attempt (there can be
// more than 1 Invocation in a Build if, for example, a failure occurs somewhere
// and it needs to be retried).
//
// Other, build-tool events represent actions taken by the Build tool, such as
// target objects produced via compilation, tests run, et cetera. There could be
// more than one build tool stream for an invocation attempt of a build.
func NewPublishBuildEventClient(ctx context.Context, opts ...option.ClientOption) (*PublishBuildEventClient, error) {
	clientOpts := defaultPublishBuildEventGRPCClientOptions()
	if newPublishBuildEventClientHook != nil {
		hookOpts, err := newPublishBuildEventClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	disableDeadlines, err := checkDisableDeadlines()
	if err != nil {
		return nil, err
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := PublishBuildEventClient{CallOptions: defaultPublishBuildEventCallOptions()}

	c := &publishBuildEventGRPCClient{
		connPool:                connPool,
		disableDeadlines:        disableDeadlines,
		publishBuildEventClient: buildpb.NewPublishBuildEventClient(connPool),
		CallOptions:             &client.CallOptions,
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *publishBuildEventGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *publishBuildEventGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", versionGo()}, keyval...)
	kv = append(kv, "gapic", versionClient, "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogMetadata = metadata.Pairs("x-goog-api-client", gax.XGoogHeader(kv...))
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *publishBuildEventGRPCClient) Close() error {
	return c.connPool.Close()
}

func (c *publishBuildEventGRPCClient) PublishLifecycleEvent(ctx context.Context, req *buildpb.PublishLifecycleEventRequest, opts ...gax.CallOption) error {
	if _, ok := ctx.Deadline(); !ok && !c.disableDeadlines {
		cctx, cancel := context.WithTimeout(ctx, 600000*time.Millisecond)
		defer cancel()
		ctx = cctx
	}
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "project_id", url.QueryEscape(req.GetProjectId())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).PublishLifecycleEvent[0:len((*c.CallOptions).PublishLifecycleEvent):len((*c.CallOptions).PublishLifecycleEvent)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.publishBuildEventClient.PublishLifecycleEvent(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}

func (c *publishBuildEventGRPCClient) PublishBuildToolEventStream(ctx context.Context, opts ...gax.CallOption) (buildpb.PublishBuildEvent_PublishBuildToolEventStreamClient, error) {
	ctx = insertMetadata(ctx, c.xGoogMetadata)
	var resp buildpb.PublishBuildEvent_PublishBuildToolEventStreamClient
	opts = append((*c.CallOptions).PublishBuildToolEventStream[0:len((*c.CallOptions).PublishBuildToolEventStream):len((*c.CallOptions).PublishBuildToolEventStream)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.publishBuildEventClient.PublishBuildToolEventStream(ctx, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
