// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/devtools/clouddebugger/v2/debugger.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Debugger.V2 {

  /// <summary>Holder for reflection information generated from google/devtools/clouddebugger/v2/debugger.proto</summary>
  public static partial class DebuggerReflection {

    #region Descriptor
    /// <summary>File descriptor for google/devtools/clouddebugger/v2/debugger.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DebuggerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci9nb29nbGUvZGV2dG9vbHMvY2xvdWRkZWJ1Z2dlci92Mi9kZWJ1Z2dlci5w",
            "cm90bxIgZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVidWdnZXIudjIaF2dvb2ds",
            "ZS9hcGkvY2xpZW50LnByb3RvGh9nb29nbGUvYXBpL2ZpZWxkX2JlaGF2aW9y",
            "LnByb3RvGitnb29nbGUvZGV2dG9vbHMvY2xvdWRkZWJ1Z2dlci92Mi9kYXRh",
            "LnByb3RvGhtnb29nbGUvcHJvdG9idWYvZW1wdHkucHJvdG8aHGdvb2dsZS9h",
            "cGkvYW5ub3RhdGlvbnMucHJvdG8ilAEKFFNldEJyZWFrcG9pbnRSZXF1ZXN0",
            "EhgKC2RlYnVnZ2VlX2lkGAEgASgJQgPgQQISRQoKYnJlYWtwb2ludBgCIAEo",
            "CzIsLmdvb2dsZS5kZXZ0b29scy5jbG91ZGRlYnVnZ2VyLnYyLkJyZWFrcG9p",
            "bnRCA+BBAhIbCg5jbGllbnRfdmVyc2lvbhgEIAEoCUID4EECIlkKFVNldEJy",
            "ZWFrcG9pbnRSZXNwb25zZRJACgpicmVha3BvaW50GAEgASgLMiwuZ29vZ2xl",
            "LmRldnRvb2xzLmNsb3VkZGVidWdnZXIudjIuQnJlYWtwb2ludCJpChRHZXRC",
            "cmVha3BvaW50UmVxdWVzdBIYCgtkZWJ1Z2dlZV9pZBgBIAEoCUID4EECEhoK",
            "DWJyZWFrcG9pbnRfaWQYAiABKAlCA+BBAhIbCg5jbGllbnRfdmVyc2lvbhgE",
            "IAEoCUID4EECIlkKFUdldEJyZWFrcG9pbnRSZXNwb25zZRJACgpicmVha3Bv",
            "aW50GAEgASgLMiwuZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVidWdnZXIudjIu",
            "QnJlYWtwb2ludCJsChdEZWxldGVCcmVha3BvaW50UmVxdWVzdBIYCgtkZWJ1",
            "Z2dlZV9pZBgBIAEoCUID4EECEhoKDWJyZWFrcG9pbnRfaWQYAiABKAlCA+BB",
            "AhIbCg5jbGllbnRfdmVyc2lvbhgDIAEoCUID4EECIvACChZMaXN0QnJlYWtw",
            "b2ludHNSZXF1ZXN0EhgKC2RlYnVnZ2VlX2lkGAEgASgJQgPgQQISGQoRaW5j",
            "bHVkZV9hbGxfdXNlcnMYAiABKAgSGAoQaW5jbHVkZV9pbmFjdGl2ZRgDIAEo",
            "CBJeCgZhY3Rpb24YBCABKAsyTi5nb29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1",
            "Z2dlci52Mi5MaXN0QnJlYWtwb2ludHNSZXF1ZXN0LkJyZWFrcG9pbnRBY3Rp",
            "b25WYWx1ZRIZCg1zdHJpcF9yZXN1bHRzGAUgASgIQgIYARISCgp3YWl0X3Rv",
            "a2VuGAYgASgJEhsKDmNsaWVudF92ZXJzaW9uGAggASgJQgPgQQIaWwoVQnJl",
            "YWtwb2ludEFjdGlvblZhbHVlEkIKBXZhbHVlGAEgASgOMjMuZ29vZ2xlLmRl",
            "dnRvb2xzLmNsb3VkZGVidWdnZXIudjIuQnJlYWtwb2ludC5BY3Rpb24idQoX",
            "TGlzdEJyZWFrcG9pbnRzUmVzcG9uc2USQQoLYnJlYWtwb2ludHMYASADKAsy",
            "LC5nb29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1Z2dlci52Mi5CcmVha3BvaW50",
            "EhcKD25leHRfd2FpdF90b2tlbhgCIAEoCSJjChRMaXN0RGVidWdnZWVzUmVx",
            "dWVzdBIUCgdwcm9qZWN0GAIgASgJQgPgQQISGAoQaW5jbHVkZV9pbmFjdGl2",
            "ZRgDIAEoCBIbCg5jbGllbnRfdmVyc2lvbhgEIAEoCUID4EECIlYKFUxpc3RE",
            "ZWJ1Z2dlZXNSZXNwb25zZRI9CglkZWJ1Z2dlZXMYASADKAsyKi5nb29nbGUu",
            "ZGV2dG9vbHMuY2xvdWRkZWJ1Z2dlci52Mi5EZWJ1Z2dlZTLyCQoJRGVidWdn",
            "ZXIyEvIBCg1TZXRCcmVha3BvaW50EjYuZ29vZ2xlLmRldnRvb2xzLmNsb3Vk",
            "ZGVidWdnZXIudjIuU2V0QnJlYWtwb2ludFJlcXVlc3QaNy5nb29nbGUuZGV2",
            "dG9vbHMuY2xvdWRkZWJ1Z2dlci52Mi5TZXRCcmVha3BvaW50UmVzcG9uc2Ui",
            "cILT5JMCQiI0L3YyL2RlYnVnZ2VyL2RlYnVnZ2Vlcy97ZGVidWdnZWVfaWR9",
            "L2JyZWFrcG9pbnRzL3NldDoKYnJlYWtwb2ludNpBJWRlYnVnZ2VlX2lkLGJy",
            "ZWFrcG9pbnQsY2xpZW50X3ZlcnNpb24S9QEKDUdldEJyZWFrcG9pbnQSNi5n",
            "b29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1Z2dlci52Mi5HZXRCcmVha3BvaW50",
            "UmVxdWVzdBo3Lmdvb2dsZS5kZXZ0b29scy5jbG91ZGRlYnVnZ2VyLnYyLkdl",
            "dEJyZWFrcG9pbnRSZXNwb25zZSJzgtPkkwJCEkAvdjIvZGVidWdnZXIvZGVi",
            "dWdnZWVzL3tkZWJ1Z2dlZV9pZH0vYnJlYWtwb2ludHMve2JyZWFrcG9pbnRf",
            "aWR92kEoZGVidWdnZWVfaWQsYnJlYWtwb2ludF9pZCxjbGllbnRfdmVyc2lv",
            "bhLaAQoQRGVsZXRlQnJlYWtwb2ludBI5Lmdvb2dsZS5kZXZ0b29scy5jbG91",
            "ZGRlYnVnZ2VyLnYyLkRlbGV0ZUJyZWFrcG9pbnRSZXF1ZXN0GhYuZ29vZ2xl",
            "LnByb3RvYnVmLkVtcHR5InOC0+STAkIqQC92Mi9kZWJ1Z2dlci9kZWJ1Z2dl",
            "ZXMve2RlYnVnZ2VlX2lkfS9icmVha3BvaW50cy97YnJlYWtwb2ludF9pZH3a",
            "QShkZWJ1Z2dlZV9pZCxicmVha3BvaW50X2lkLGNsaWVudF92ZXJzaW9uEt0B",
            "Cg9MaXN0QnJlYWtwb2ludHMSOC5nb29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1",
            "Z2dlci52Mi5MaXN0QnJlYWtwb2ludHNSZXF1ZXN0GjkuZ29vZ2xlLmRldnRv",
            "b2xzLmNsb3VkZGVidWdnZXIudjIuTGlzdEJyZWFrcG9pbnRzUmVzcG9uc2Ui",
            "VYLT5JMCMhIwL3YyL2RlYnVnZ2VyL2RlYnVnZ2Vlcy97ZGVidWdnZWVfaWR9",
            "L2JyZWFrcG9pbnRz2kEaZGVidWdnZWVfaWQsY2xpZW50X3ZlcnNpb24SuQEK",
            "DUxpc3REZWJ1Z2dlZXMSNi5nb29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1Z2dl",
            "ci52Mi5MaXN0RGVidWdnZWVzUmVxdWVzdBo3Lmdvb2dsZS5kZXZ0b29scy5j",
            "bG91ZGRlYnVnZ2VyLnYyLkxpc3REZWJ1Z2dlZXNSZXNwb25zZSI3gtPkkwIY",
            "EhYvdjIvZGVidWdnZXIvZGVidWdnZWVz2kEWcHJvamVjdCxjbGllbnRfdmVy",
            "c2lvbhp/ykEcY2xvdWRkZWJ1Z2dlci5nb29nbGVhcGlzLmNvbdJBXWh0dHBz",
            "Oi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2xvdWQtcGxhdGZvcm0saHR0",
            "cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9jbG91ZF9kZWJ1Z2dlckLa",
            "AQokY29tLmdvb2dsZS5kZXZ0b29scy5jbG91ZGRlYnVnZ2VyLnYyQg1EZWJ1",
            "Z2dlclByb3RvUAFaTWdvb2dsZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2ds",
            "ZWFwaXMvZGV2dG9vbHMvY2xvdWRkZWJ1Z2dlci92MjtjbG91ZGRlYnVnZ2Vy",
            "qgIYR29vZ2xlLkNsb3VkLkRlYnVnZ2VyLlYyygIYR29vZ2xlXENsb3VkXERl",
            "YnVnZ2VyXFYy6gIbR29vZ2xlOjpDbG91ZDo6RGVidWdnZXI6OlYyYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.ClientReflection.Descriptor, global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Cloud.Debugger.V2.DataReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.SetBreakpointRequest), global::Google.Cloud.Debugger.V2.SetBreakpointRequest.Parser, new[]{ "DebuggeeId", "Breakpoint", "ClientVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.SetBreakpointResponse), global::Google.Cloud.Debugger.V2.SetBreakpointResponse.Parser, new[]{ "Breakpoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.GetBreakpointRequest), global::Google.Cloud.Debugger.V2.GetBreakpointRequest.Parser, new[]{ "DebuggeeId", "BreakpointId", "ClientVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.GetBreakpointResponse), global::Google.Cloud.Debugger.V2.GetBreakpointResponse.Parser, new[]{ "Breakpoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.DeleteBreakpointRequest), global::Google.Cloud.Debugger.V2.DeleteBreakpointRequest.Parser, new[]{ "DebuggeeId", "BreakpointId", "ClientVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.ListBreakpointsRequest), global::Google.Cloud.Debugger.V2.ListBreakpointsRequest.Parser, new[]{ "DebuggeeId", "IncludeAllUsers", "IncludeInactive", "Action", "StripResults", "WaitToken", "ClientVersion" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.ListBreakpointsRequest.Types.BreakpointActionValue), global::Google.Cloud.Debugger.V2.ListBreakpointsRequest.Types.BreakpointActionValue.Parser, new[]{ "Value" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.ListBreakpointsResponse), global::Google.Cloud.Debugger.V2.ListBreakpointsResponse.Parser, new[]{ "Breakpoints", "NextWaitToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.ListDebuggeesRequest), global::Google.Cloud.Debugger.V2.ListDebuggeesRequest.Parser, new[]{ "Project", "IncludeInactive", "ClientVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.ListDebuggeesResponse), global::Google.Cloud.Debugger.V2.ListDebuggeesResponse.Parser, new[]{ "Debuggees" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Request to set a breakpoint
  /// </summary>
  public sealed partial class SetBreakpointRequest : pb::IMessage<SetBreakpointRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SetBreakpointRequest> _parser = new pb::MessageParser<SetBreakpointRequest>(() => new SetBreakpointRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetBreakpointRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Debugger.V2.DebuggerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBreakpointRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBreakpointRequest(SetBreakpointRequest other) : this() {
      debuggeeId_ = other.debuggeeId_;
      breakpoint_ = other.breakpoint_ != null ? other.breakpoint_.Clone() : null;
      clientVersion_ = other.clientVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBreakpointRequest Clone() {
      return new SetBreakpointRequest(this);
    }

    /// <summary>Field number for the "debuggee_id" field.</summary>
    public const int DebuggeeIdFieldNumber = 1;
    private string debuggeeId_ = "";
    /// <summary>
    /// Required. ID of the debuggee where the breakpoint is to be set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DebuggeeId {
      get { return debuggeeId_; }
      set {
        debuggeeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "breakpoint" field.</summary>
    public const int BreakpointFieldNumber = 2;
    private global::Google.Cloud.Debugger.V2.Breakpoint breakpoint_;
    /// <summary>
    /// Required. Breakpoint specification to set.
    /// The field `location` of the breakpoint must be set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Debugger.V2.Breakpoint Breakpoint {
      get { return breakpoint_; }
      set {
        breakpoint_ = value;
      }
    }

    /// <summary>Field number for the "client_version" field.</summary>
    public const int ClientVersionFieldNumber = 4;
    private string clientVersion_ = "";
    /// <summary>
    /// Required. The client version making the call.
    /// Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetBreakpointRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetBreakpointRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DebuggeeId != other.DebuggeeId) return false;
      if (!object.Equals(Breakpoint, other.Breakpoint)) return false;
      if (ClientVersion != other.ClientVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DebuggeeId.Length != 0) hash ^= DebuggeeId.GetHashCode();
      if (breakpoint_ != null) hash ^= Breakpoint.GetHashCode();
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DebuggeeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DebuggeeId);
      }
      if (breakpoint_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Breakpoint);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClientVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DebuggeeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DebuggeeId);
      }
      if (breakpoint_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Breakpoint);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClientVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DebuggeeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DebuggeeId);
      }
      if (breakpoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Breakpoint);
      }
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetBreakpointRequest other) {
      if (other == null) {
        return;
      }
      if (other.DebuggeeId.Length != 0) {
        DebuggeeId = other.DebuggeeId;
      }
      if (other.breakpoint_ != null) {
        if (breakpoint_ == null) {
          Breakpoint = new global::Google.Cloud.Debugger.V2.Breakpoint();
        }
        Breakpoint.MergeFrom(other.Breakpoint);
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DebuggeeId = input.ReadString();
            break;
          }
          case 18: {
            if (breakpoint_ == null) {
              Breakpoint = new global::Google.Cloud.Debugger.V2.Breakpoint();
            }
            input.ReadMessage(Breakpoint);
            break;
          }
          case 34: {
            ClientVersion = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DebuggeeId = input.ReadString();
            break;
          }
          case 18: {
            if (breakpoint_ == null) {
              Breakpoint = new global::Google.Cloud.Debugger.V2.Breakpoint();
            }
            input.ReadMessage(Breakpoint);
            break;
          }
          case 34: {
            ClientVersion = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Response for setting a breakpoint.
  /// </summary>
  public sealed partial class SetBreakpointResponse : pb::IMessage<SetBreakpointResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SetBreakpointResponse> _parser = new pb::MessageParser<SetBreakpointResponse>(() => new SetBreakpointResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetBreakpointResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Debugger.V2.DebuggerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBreakpointResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBreakpointResponse(SetBreakpointResponse other) : this() {
      breakpoint_ = other.breakpoint_ != null ? other.breakpoint_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBreakpointResponse Clone() {
      return new SetBreakpointResponse(this);
    }

    /// <summary>Field number for the "breakpoint" field.</summary>
    public const int BreakpointFieldNumber = 1;
    private global::Google.Cloud.Debugger.V2.Breakpoint breakpoint_;
    /// <summary>
    /// Breakpoint resource.
    /// The field `id` is guaranteed to be set (in addition to the echoed fileds).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Debugger.V2.Breakpoint Breakpoint {
      get { return breakpoint_; }
      set {
        breakpoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetBreakpointResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetBreakpointResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Breakpoint, other.Breakpoint)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (breakpoint_ != null) hash ^= Breakpoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (breakpoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Breakpoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (breakpoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Breakpoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (breakpoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Breakpoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetBreakpointResponse other) {
      if (other == null) {
        return;
      }
      if (other.breakpoint_ != null) {
        if (breakpoint_ == null) {
          Breakpoint = new global::Google.Cloud.Debugger.V2.Breakpoint();
        }
        Breakpoint.MergeFrom(other.Breakpoint);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (breakpoint_ == null) {
              Breakpoint = new global::Google.Cloud.Debugger.V2.Breakpoint();
            }
            input.ReadMessage(Breakpoint);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (breakpoint_ == null) {
              Breakpoint = new global::Google.Cloud.Debugger.V2.Breakpoint();
            }
            input.ReadMessage(Breakpoint);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request to get breakpoint information.
  /// </summary>
  public sealed partial class GetBreakpointRequest : pb::IMessage<GetBreakpointRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetBreakpointRequest> _parser = new pb::MessageParser<GetBreakpointRequest>(() => new GetBreakpointRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBreakpointRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Debugger.V2.DebuggerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBreakpointRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBreakpointRequest(GetBreakpointRequest other) : this() {
      debuggeeId_ = other.debuggeeId_;
      breakpointId_ = other.breakpointId_;
      clientVersion_ = other.clientVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBreakpointRequest Clone() {
      return new GetBreakpointRequest(this);
    }

    /// <summary>Field number for the "debuggee_id" field.</summary>
    public const int DebuggeeIdFieldNumber = 1;
    private string debuggeeId_ = "";
    /// <summary>
    /// Required. ID of the debuggee whose breakpoint to get.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DebuggeeId {
      get { return debuggeeId_; }
      set {
        debuggeeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "breakpoint_id" field.</summary>
    public const int BreakpointIdFieldNumber = 2;
    private string breakpointId_ = "";
    /// <summary>
    /// Required. ID of the breakpoint to get.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BreakpointId {
      get { return breakpointId_; }
      set {
        breakpointId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_version" field.</summary>
    public const int ClientVersionFieldNumber = 4;
    private string clientVersion_ = "";
    /// <summary>
    /// Required. The client version making the call.
    /// Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBreakpointRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBreakpointRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DebuggeeId != other.DebuggeeId) return false;
      if (BreakpointId != other.BreakpointId) return false;
      if (ClientVersion != other.ClientVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DebuggeeId.Length != 0) hash ^= DebuggeeId.GetHashCode();
      if (BreakpointId.Length != 0) hash ^= BreakpointId.GetHashCode();
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DebuggeeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DebuggeeId);
      }
      if (BreakpointId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BreakpointId);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClientVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DebuggeeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DebuggeeId);
      }
      if (BreakpointId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BreakpointId);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClientVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DebuggeeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DebuggeeId);
      }
      if (BreakpointId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BreakpointId);
      }
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBreakpointRequest other) {
      if (other == null) {
        return;
      }
      if (other.DebuggeeId.Length != 0) {
        DebuggeeId = other.DebuggeeId;
      }
      if (other.BreakpointId.Length != 0) {
        BreakpointId = other.BreakpointId;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DebuggeeId = input.ReadString();
            break;
          }
          case 18: {
            BreakpointId = input.ReadString();
            break;
          }
          case 34: {
            ClientVersion = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DebuggeeId = input.ReadString();
            break;
          }
          case 18: {
            BreakpointId = input.ReadString();
            break;
          }
          case 34: {
            ClientVersion = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Response for getting breakpoint information.
  /// </summary>
  public sealed partial class GetBreakpointResponse : pb::IMessage<GetBreakpointResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetBreakpointResponse> _parser = new pb::MessageParser<GetBreakpointResponse>(() => new GetBreakpointResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBreakpointResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Debugger.V2.DebuggerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBreakpointResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBreakpointResponse(GetBreakpointResponse other) : this() {
      breakpoint_ = other.breakpoint_ != null ? other.breakpoint_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBreakpointResponse Clone() {
      return new GetBreakpointResponse(this);
    }

    /// <summary>Field number for the "breakpoint" field.</summary>
    public const int BreakpointFieldNumber = 1;
    private global::Google.Cloud.Debugger.V2.Breakpoint breakpoint_;
    /// <summary>
    /// Complete breakpoint state.
    /// The fields `id` and `location` are guaranteed to be set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Debugger.V2.Breakpoint Breakpoint {
      get { return breakpoint_; }
      set {
        breakpoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBreakpointResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBreakpointResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Breakpoint, other.Breakpoint)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (breakpoint_ != null) hash ^= Breakpoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (breakpoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Breakpoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (breakpoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Breakpoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (breakpoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Breakpoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBreakpointResponse other) {
      if (other == null) {
        return;
      }
      if (other.breakpoint_ != null) {
        if (breakpoint_ == null) {
          Breakpoint = new global::Google.Cloud.Debugger.V2.Breakpoint();
        }
        Breakpoint.MergeFrom(other.Breakpoint);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (breakpoint_ == null) {
              Breakpoint = new global::Google.Cloud.Debugger.V2.Breakpoint();
            }
            input.ReadMessage(Breakpoint);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (breakpoint_ == null) {
              Breakpoint = new global::Google.Cloud.Debugger.V2.Breakpoint();
            }
            input.ReadMessage(Breakpoint);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request to delete a breakpoint.
  /// </summary>
  public sealed partial class DeleteBreakpointRequest : pb::IMessage<DeleteBreakpointRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeleteBreakpointRequest> _parser = new pb::MessageParser<DeleteBreakpointRequest>(() => new DeleteBreakpointRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteBreakpointRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Debugger.V2.DebuggerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteBreakpointRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteBreakpointRequest(DeleteBreakpointRequest other) : this() {
      debuggeeId_ = other.debuggeeId_;
      breakpointId_ = other.breakpointId_;
      clientVersion_ = other.clientVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteBreakpointRequest Clone() {
      return new DeleteBreakpointRequest(this);
    }

    /// <summary>Field number for the "debuggee_id" field.</summary>
    public const int DebuggeeIdFieldNumber = 1;
    private string debuggeeId_ = "";
    /// <summary>
    /// Required. ID of the debuggee whose breakpoint to delete.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DebuggeeId {
      get { return debuggeeId_; }
      set {
        debuggeeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "breakpoint_id" field.</summary>
    public const int BreakpointIdFieldNumber = 2;
    private string breakpointId_ = "";
    /// <summary>
    /// Required. ID of the breakpoint to delete.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BreakpointId {
      get { return breakpointId_; }
      set {
        breakpointId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_version" field.</summary>
    public const int ClientVersionFieldNumber = 3;
    private string clientVersion_ = "";
    /// <summary>
    /// Required. The client version making the call.
    /// Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteBreakpointRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteBreakpointRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DebuggeeId != other.DebuggeeId) return false;
      if (BreakpointId != other.BreakpointId) return false;
      if (ClientVersion != other.ClientVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DebuggeeId.Length != 0) hash ^= DebuggeeId.GetHashCode();
      if (BreakpointId.Length != 0) hash ^= BreakpointId.GetHashCode();
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DebuggeeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DebuggeeId);
      }
      if (BreakpointId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BreakpointId);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClientVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DebuggeeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DebuggeeId);
      }
      if (BreakpointId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BreakpointId);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClientVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DebuggeeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DebuggeeId);
      }
      if (BreakpointId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BreakpointId);
      }
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteBreakpointRequest other) {
      if (other == null) {
        return;
      }
      if (other.DebuggeeId.Length != 0) {
        DebuggeeId = other.DebuggeeId;
      }
      if (other.BreakpointId.Length != 0) {
        BreakpointId = other.BreakpointId;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DebuggeeId = input.ReadString();
            break;
          }
          case 18: {
            BreakpointId = input.ReadString();
            break;
          }
          case 26: {
            ClientVersion = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DebuggeeId = input.ReadString();
            break;
          }
          case 18: {
            BreakpointId = input.ReadString();
            break;
          }
          case 26: {
            ClientVersion = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request to list breakpoints.
  /// </summary>
  public sealed partial class ListBreakpointsRequest : pb::IMessage<ListBreakpointsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListBreakpointsRequest> _parser = new pb::MessageParser<ListBreakpointsRequest>(() => new ListBreakpointsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListBreakpointsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Debugger.V2.DebuggerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBreakpointsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBreakpointsRequest(ListBreakpointsRequest other) : this() {
      debuggeeId_ = other.debuggeeId_;
      includeAllUsers_ = other.includeAllUsers_;
      includeInactive_ = other.includeInactive_;
      action_ = other.action_ != null ? other.action_.Clone() : null;
      stripResults_ = other.stripResults_;
      waitToken_ = other.waitToken_;
      clientVersion_ = other.clientVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBreakpointsRequest Clone() {
      return new ListBreakpointsRequest(this);
    }

    /// <summary>Field number for the "debuggee_id" field.</summary>
    public const int DebuggeeIdFieldNumber = 1;
    private string debuggeeId_ = "";
    /// <summary>
    /// Required. ID of the debuggee whose breakpoints to list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DebuggeeId {
      get { return debuggeeId_; }
      set {
        debuggeeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "include_all_users" field.</summary>
    public const int IncludeAllUsersFieldNumber = 2;
    private bool includeAllUsers_;
    /// <summary>
    /// When set to `true`, the response includes the list of breakpoints set by
    /// any user. Otherwise, it includes only breakpoints set by the caller.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeAllUsers {
      get { return includeAllUsers_; }
      set {
        includeAllUsers_ = value;
      }
    }

    /// <summary>Field number for the "include_inactive" field.</summary>
    public const int IncludeInactiveFieldNumber = 3;
    private bool includeInactive_;
    /// <summary>
    /// When set to `true`, the response includes active and inactive
    /// breakpoints. Otherwise, it includes only active breakpoints.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeInactive {
      get { return includeInactive_; }
      set {
        includeInactive_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 4;
    private global::Google.Cloud.Debugger.V2.ListBreakpointsRequest.Types.BreakpointActionValue action_;
    /// <summary>
    /// When set, the response includes only breakpoints with the specified action.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Debugger.V2.ListBreakpointsRequest.Types.BreakpointActionValue Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "strip_results" field.</summary>
    public const int StripResultsFieldNumber = 5;
    private bool stripResults_;
    /// <summary>
    /// This field is deprecated. The following fields are always stripped out of
    /// the result: `stack_frames`, `evaluated_expressions` and `variable_table`.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StripResults {
      get { return stripResults_; }
      set {
        stripResults_ = value;
      }
    }

    /// <summary>Field number for the "wait_token" field.</summary>
    public const int WaitTokenFieldNumber = 6;
    private string waitToken_ = "";
    /// <summary>
    /// A wait token that, if specified, blocks the call until the breakpoints
    /// list has changed, or a server selected timeout has expired.  The value
    /// should be set from the last response. The error code
    /// `google.rpc.Code.ABORTED` (RPC) is returned on wait timeout, which
    /// should be called again with the same `wait_token`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WaitToken {
      get { return waitToken_; }
      set {
        waitToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_version" field.</summary>
    public const int ClientVersionFieldNumber = 8;
    private string clientVersion_ = "";
    /// <summary>
    /// Required. The client version making the call.
    /// Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListBreakpointsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListBreakpointsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DebuggeeId != other.DebuggeeId) return false;
      if (IncludeAllUsers != other.IncludeAllUsers) return false;
      if (IncludeInactive != other.IncludeInactive) return false;
      if (!object.Equals(Action, other.Action)) return false;
      if (StripResults != other.StripResults) return false;
      if (WaitToken != other.WaitToken) return false;
      if (ClientVersion != other.ClientVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DebuggeeId.Length != 0) hash ^= DebuggeeId.GetHashCode();
      if (IncludeAllUsers != false) hash ^= IncludeAllUsers.GetHashCode();
      if (IncludeInactive != false) hash ^= IncludeInactive.GetHashCode();
      if (action_ != null) hash ^= Action.GetHashCode();
      if (StripResults != false) hash ^= StripResults.GetHashCode();
      if (WaitToken.Length != 0) hash ^= WaitToken.GetHashCode();
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DebuggeeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DebuggeeId);
      }
      if (IncludeAllUsers != false) {
        output.WriteRawTag(16);
        output.WriteBool(IncludeAllUsers);
      }
      if (IncludeInactive != false) {
        output.WriteRawTag(24);
        output.WriteBool(IncludeInactive);
      }
      if (action_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Action);
      }
      if (StripResults != false) {
        output.WriteRawTag(40);
        output.WriteBool(StripResults);
      }
      if (WaitToken.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(WaitToken);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ClientVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DebuggeeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DebuggeeId);
      }
      if (IncludeAllUsers != false) {
        output.WriteRawTag(16);
        output.WriteBool(IncludeAllUsers);
      }
      if (IncludeInactive != false) {
        output.WriteRawTag(24);
        output.WriteBool(IncludeInactive);
      }
      if (action_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Action);
      }
      if (StripResults != false) {
        output.WriteRawTag(40);
        output.WriteBool(StripResults);
      }
      if (WaitToken.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(WaitToken);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ClientVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DebuggeeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DebuggeeId);
      }
      if (IncludeAllUsers != false) {
        size += 1 + 1;
      }
      if (IncludeInactive != false) {
        size += 1 + 1;
      }
      if (action_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Action);
      }
      if (StripResults != false) {
        size += 1 + 1;
      }
      if (WaitToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WaitToken);
      }
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListBreakpointsRequest other) {
      if (other == null) {
        return;
      }
      if (other.DebuggeeId.Length != 0) {
        DebuggeeId = other.DebuggeeId;
      }
      if (other.IncludeAllUsers != false) {
        IncludeAllUsers = other.IncludeAllUsers;
      }
      if (other.IncludeInactive != false) {
        IncludeInactive = other.IncludeInactive;
      }
      if (other.action_ != null) {
        if (action_ == null) {
          Action = new global::Google.Cloud.Debugger.V2.ListBreakpointsRequest.Types.BreakpointActionValue();
        }
        Action.MergeFrom(other.Action);
      }
      if (other.StripResults != false) {
        StripResults = other.StripResults;
      }
      if (other.WaitToken.Length != 0) {
        WaitToken = other.WaitToken;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DebuggeeId = input.ReadString();
            break;
          }
          case 16: {
            IncludeAllUsers = input.ReadBool();
            break;
          }
          case 24: {
            IncludeInactive = input.ReadBool();
            break;
          }
          case 34: {
            if (action_ == null) {
              Action = new global::Google.Cloud.Debugger.V2.ListBreakpointsRequest.Types.BreakpointActionValue();
            }
            input.ReadMessage(Action);
            break;
          }
          case 40: {
            StripResults = input.ReadBool();
            break;
          }
          case 50: {
            WaitToken = input.ReadString();
            break;
          }
          case 66: {
            ClientVersion = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DebuggeeId = input.ReadString();
            break;
          }
          case 16: {
            IncludeAllUsers = input.ReadBool();
            break;
          }
          case 24: {
            IncludeInactive = input.ReadBool();
            break;
          }
          case 34: {
            if (action_ == null) {
              Action = new global::Google.Cloud.Debugger.V2.ListBreakpointsRequest.Types.BreakpointActionValue();
            }
            input.ReadMessage(Action);
            break;
          }
          case 40: {
            StripResults = input.ReadBool();
            break;
          }
          case 50: {
            WaitToken = input.ReadString();
            break;
          }
          case 66: {
            ClientVersion = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ListBreakpointsRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Wrapper message for `Breakpoint.Action`. Defines a filter on the action
      /// field of breakpoints.
      /// </summary>
      public sealed partial class BreakpointActionValue : pb::IMessage<BreakpointActionValue>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<BreakpointActionValue> _parser = new pb::MessageParser<BreakpointActionValue>(() => new BreakpointActionValue());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BreakpointActionValue> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Debugger.V2.ListBreakpointsRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BreakpointActionValue() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BreakpointActionValue(BreakpointActionValue other) : this() {
          value_ = other.value_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BreakpointActionValue Clone() {
          return new BreakpointActionValue(this);
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 1;
        private global::Google.Cloud.Debugger.V2.Breakpoint.Types.Action value_ = global::Google.Cloud.Debugger.V2.Breakpoint.Types.Action.Capture;
        /// <summary>
        /// Only breakpoints with the specified action will pass the filter.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Debugger.V2.Breakpoint.Types.Action Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BreakpointActionValue);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BreakpointActionValue other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Value != other.Value) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Value != global::Google.Cloud.Debugger.V2.Breakpoint.Types.Action.Capture) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Value != global::Google.Cloud.Debugger.V2.Breakpoint.Types.Action.Capture) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Value != global::Google.Cloud.Debugger.V2.Breakpoint.Types.Action.Capture) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Value != global::Google.Cloud.Debugger.V2.Breakpoint.Types.Action.Capture) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BreakpointActionValue other) {
          if (other == null) {
            return;
          }
          if (other.Value != global::Google.Cloud.Debugger.V2.Breakpoint.Types.Action.Capture) {
            Value = other.Value;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Value = (global::Google.Cloud.Debugger.V2.Breakpoint.Types.Action) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Value = (global::Google.Cloud.Debugger.V2.Breakpoint.Types.Action) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// Response for listing breakpoints.
  /// </summary>
  public sealed partial class ListBreakpointsResponse : pb::IMessage<ListBreakpointsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListBreakpointsResponse> _parser = new pb::MessageParser<ListBreakpointsResponse>(() => new ListBreakpointsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListBreakpointsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Debugger.V2.DebuggerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBreakpointsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBreakpointsResponse(ListBreakpointsResponse other) : this() {
      breakpoints_ = other.breakpoints_.Clone();
      nextWaitToken_ = other.nextWaitToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBreakpointsResponse Clone() {
      return new ListBreakpointsResponse(this);
    }

    /// <summary>Field number for the "breakpoints" field.</summary>
    public const int BreakpointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Debugger.V2.Breakpoint> _repeated_breakpoints_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Debugger.V2.Breakpoint.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Debugger.V2.Breakpoint> breakpoints_ = new pbc::RepeatedField<global::Google.Cloud.Debugger.V2.Breakpoint>();
    /// <summary>
    /// List of breakpoints matching the request.
    /// The fields `id` and `location` are guaranteed to be set on each breakpoint.
    /// The fields: `stack_frames`, `evaluated_expressions` and `variable_table`
    /// are cleared on each breakpoint regardless of its status.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Debugger.V2.Breakpoint> Breakpoints {
      get { return breakpoints_; }
    }

    /// <summary>Field number for the "next_wait_token" field.</summary>
    public const int NextWaitTokenFieldNumber = 2;
    private string nextWaitToken_ = "";
    /// <summary>
    /// A wait token that can be used in the next call to `list` (REST) or
    /// `ListBreakpoints` (RPC) to block until the list of breakpoints has changes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextWaitToken {
      get { return nextWaitToken_; }
      set {
        nextWaitToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListBreakpointsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListBreakpointsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!breakpoints_.Equals(other.breakpoints_)) return false;
      if (NextWaitToken != other.NextWaitToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= breakpoints_.GetHashCode();
      if (NextWaitToken.Length != 0) hash ^= NextWaitToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      breakpoints_.WriteTo(output, _repeated_breakpoints_codec);
      if (NextWaitToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextWaitToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      breakpoints_.WriteTo(ref output, _repeated_breakpoints_codec);
      if (NextWaitToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextWaitToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += breakpoints_.CalculateSize(_repeated_breakpoints_codec);
      if (NextWaitToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextWaitToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListBreakpointsResponse other) {
      if (other == null) {
        return;
      }
      breakpoints_.Add(other.breakpoints_);
      if (other.NextWaitToken.Length != 0) {
        NextWaitToken = other.NextWaitToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            breakpoints_.AddEntriesFrom(input, _repeated_breakpoints_codec);
            break;
          }
          case 18: {
            NextWaitToken = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            breakpoints_.AddEntriesFrom(ref input, _repeated_breakpoints_codec);
            break;
          }
          case 18: {
            NextWaitToken = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request to list debuggees.
  /// </summary>
  public sealed partial class ListDebuggeesRequest : pb::IMessage<ListDebuggeesRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListDebuggeesRequest> _parser = new pb::MessageParser<ListDebuggeesRequest>(() => new ListDebuggeesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDebuggeesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Debugger.V2.DebuggerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDebuggeesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDebuggeesRequest(ListDebuggeesRequest other) : this() {
      project_ = other.project_;
      includeInactive_ = other.includeInactive_;
      clientVersion_ = other.clientVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDebuggeesRequest Clone() {
      return new ListDebuggeesRequest(this);
    }

    /// <summary>Field number for the "project" field.</summary>
    public const int ProjectFieldNumber = 2;
    private string project_ = "";
    /// <summary>
    /// Required. Project number of a Google Cloud project whose debuggees to list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Project {
      get { return project_; }
      set {
        project_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "include_inactive" field.</summary>
    public const int IncludeInactiveFieldNumber = 3;
    private bool includeInactive_;
    /// <summary>
    /// When set to `true`, the result includes all debuggees. Otherwise, the
    /// result includes only debuggees that are active.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeInactive {
      get { return includeInactive_; }
      set {
        includeInactive_ = value;
      }
    }

    /// <summary>Field number for the "client_version" field.</summary>
    public const int ClientVersionFieldNumber = 4;
    private string clientVersion_ = "";
    /// <summary>
    /// Required. The client version making the call.
    /// Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDebuggeesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDebuggeesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Project != other.Project) return false;
      if (IncludeInactive != other.IncludeInactive) return false;
      if (ClientVersion != other.ClientVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Project.Length != 0) hash ^= Project.GetHashCode();
      if (IncludeInactive != false) hash ^= IncludeInactive.GetHashCode();
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Project.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Project);
      }
      if (IncludeInactive != false) {
        output.WriteRawTag(24);
        output.WriteBool(IncludeInactive);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClientVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Project.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Project);
      }
      if (IncludeInactive != false) {
        output.WriteRawTag(24);
        output.WriteBool(IncludeInactive);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClientVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Project.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Project);
      }
      if (IncludeInactive != false) {
        size += 1 + 1;
      }
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDebuggeesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Project.Length != 0) {
        Project = other.Project;
      }
      if (other.IncludeInactive != false) {
        IncludeInactive = other.IncludeInactive;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            Project = input.ReadString();
            break;
          }
          case 24: {
            IncludeInactive = input.ReadBool();
            break;
          }
          case 34: {
            ClientVersion = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            Project = input.ReadString();
            break;
          }
          case 24: {
            IncludeInactive = input.ReadBool();
            break;
          }
          case 34: {
            ClientVersion = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Response for listing debuggees.
  /// </summary>
  public sealed partial class ListDebuggeesResponse : pb::IMessage<ListDebuggeesResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListDebuggeesResponse> _parser = new pb::MessageParser<ListDebuggeesResponse>(() => new ListDebuggeesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDebuggeesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Debugger.V2.DebuggerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDebuggeesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDebuggeesResponse(ListDebuggeesResponse other) : this() {
      debuggees_ = other.debuggees_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDebuggeesResponse Clone() {
      return new ListDebuggeesResponse(this);
    }

    /// <summary>Field number for the "debuggees" field.</summary>
    public const int DebuggeesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Debugger.V2.Debuggee> _repeated_debuggees_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Debugger.V2.Debuggee.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Debugger.V2.Debuggee> debuggees_ = new pbc::RepeatedField<global::Google.Cloud.Debugger.V2.Debuggee>();
    /// <summary>
    /// List of debuggees accessible to the calling user.
    /// The fields `debuggee.id` and `description` are guaranteed to be set.
    /// The `description` field is a human readable field provided by agents and
    /// can be displayed to users.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Debugger.V2.Debuggee> Debuggees {
      get { return debuggees_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDebuggeesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDebuggeesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!debuggees_.Equals(other.debuggees_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= debuggees_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      debuggees_.WriteTo(output, _repeated_debuggees_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      debuggees_.WriteTo(ref output, _repeated_debuggees_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += debuggees_.CalculateSize(_repeated_debuggees_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDebuggeesResponse other) {
      if (other == null) {
        return;
      }
      debuggees_.Add(other.debuggees_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            debuggees_.AddEntriesFrom(input, _repeated_debuggees_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            debuggees_.AddEntriesFrom(ref input, _repeated_debuggees_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
