// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions} from 'google-gax';

import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v2/controller2_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './controller2_client_config.json';

const version = require('../../../package.json').version;

/**
 *  The Controller service provides the API for orchestrating a collection of
 *  debugger agents to perform debugging tasks. These agents are each attached
 *  to a process of an application which may include one or more replicas.
 *
 *  The debugger agents register with the Controller to identify the application
 *  being debugged, the Debuggee. All agents that register with the same data,
 *  represent the same Debuggee, and are assigned the same `debuggee_id`.
 *
 *  The debugger agents call the Controller to retrieve  the list of active
 *  Breakpoints. Agents with the same `debuggee_id` get the same breakpoints
 *  list. An agent that can fulfill the breakpoint request updates the
 *  Controller with the breakpoint result. The controller selects the first
 *  result received and discards the rest of the results.
 *  Agents that poll again for active breakpoints will no longer have
 *  the completed breakpoint in the list and should remove that breakpoint from
 *  their attached process.
 *
 *  The Controller service does not provide a way to retrieve the results of
 *  a completed breakpoint. This functionality is available using the Debugger
 *  service.
 * @class
 * @memberof v2
 */
export class Controller2Client {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  controller2Stub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of Controller2Client.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP fallback mode.
   *     In fallback mode, a special browser-compatible transport implementation is used
   *     instead of gRPC transport. In browser context (if the `window` object is defined)
   *     the fallback mode is enabled automatically; set `options.fallback` to `false`
   *     if you need to override this behavior.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof Controller2Client;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.devtools.clouddebugger.v2.Controller2', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = gax.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.controller2Stub) {
      return this.controller2Stub;
    }

    // Put together the "service stub" for
    // google.devtools.clouddebugger.v2.Controller2.
    this.controller2Stub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.devtools.clouddebugger.v2.Controller2') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.devtools.clouddebugger.v2.Controller2,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const controller2StubMethods =
        ['registerDebuggee', 'listActiveBreakpoints', 'updateActiveBreakpoint'];
    for (const methodName of controller2StubMethods) {
      const callPromise = this.controller2Stub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.controller2Stub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'clouddebugger.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'clouddebugger.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/cloud_debugger'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Registers the debuggee with the controller service.
 *
 * All agents attached to the same application must call this method with
 * exactly the same request content to get back the same stable `debuggee_id`.
 * Agents should call this method again whenever `google.rpc.Code.NOT_FOUND`
 * is returned from any controller method.
 *
 * This protocol allows the controller service to disable debuggees, recover
 * from data loss, or change the `debuggee_id` format. Agents must handle
 * `debuggee_id` value changing upon re-registration.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.devtools.clouddebugger.v2.Debuggee} request.debuggee
 *   Required. Debuggee information to register.
 *   The fields `project`, `uniquifier`, `description` and `agent_version`
 *   of the debuggee must be set.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [RegisterDebuggeeResponse]{@link google.devtools.clouddebugger.v2.RegisterDebuggeeResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/controller2.register_debuggee.js</caption>
 * region_tag:clouddebugger_v2_generated_Controller2_RegisterDebuggee_async
 */
  registerDebuggee(
      request?: protos.google.devtools.clouddebugger.v2.IRegisterDebuggeeRequest,
      options?: CallOptions):
      Promise<[
        protos.google.devtools.clouddebugger.v2.IRegisterDebuggeeResponse,
        protos.google.devtools.clouddebugger.v2.IRegisterDebuggeeRequest|undefined, {}|undefined
      ]>;
  registerDebuggee(
      request: protos.google.devtools.clouddebugger.v2.IRegisterDebuggeeRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.devtools.clouddebugger.v2.IRegisterDebuggeeResponse,
          protos.google.devtools.clouddebugger.v2.IRegisterDebuggeeRequest|null|undefined,
          {}|null|undefined>): void;
  registerDebuggee(
      request: protos.google.devtools.clouddebugger.v2.IRegisterDebuggeeRequest,
      callback: Callback<
          protos.google.devtools.clouddebugger.v2.IRegisterDebuggeeResponse,
          protos.google.devtools.clouddebugger.v2.IRegisterDebuggeeRequest|null|undefined,
          {}|null|undefined>): void;
  registerDebuggee(
      request?: protos.google.devtools.clouddebugger.v2.IRegisterDebuggeeRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.devtools.clouddebugger.v2.IRegisterDebuggeeResponse,
          protos.google.devtools.clouddebugger.v2.IRegisterDebuggeeRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.clouddebugger.v2.IRegisterDebuggeeResponse,
          protos.google.devtools.clouddebugger.v2.IRegisterDebuggeeRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.clouddebugger.v2.IRegisterDebuggeeResponse,
        protos.google.devtools.clouddebugger.v2.IRegisterDebuggeeRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.registerDebuggee(request, options, callback);
  }
/**
 * Returns the list of all active breakpoints for the debuggee.
 *
 * The breakpoint specification (`location`, `condition`, and `expressions`
 * fields) is semantically immutable, although the field values may
 * change. For example, an agent may update the location line number
 * to reflect the actual line where the breakpoint was set, but this
 * doesn't change the breakpoint semantics.
 *
 * This means that an agent does not need to check if a breakpoint has changed
 * when it encounters the same breakpoint on a successive call.
 * Moreover, an agent should remember the breakpoints that are completed
 * until the controller removes them from the active list to avoid
 * setting those breakpoints again.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.debuggeeId
 *   Required. Identifies the debuggee.
 * @param {string} request.waitToken
 *   A token that, if specified, blocks the method call until the list
 *   of active breakpoints has changed, or a server-selected timeout has
 *   expired. The value should be set from the `next_wait_token` field in
 *   the last response. The initial value should be set to `"init"`.
 * @param {boolean} request.successOnTimeout
 *   If set to `true` (recommended), returns `google.rpc.Code.OK` status and
 *   sets the `wait_expired` response field to `true` when the server-selected
 *   timeout has expired.
 *
 *   If set to `false` (deprecated), returns `google.rpc.Code.ABORTED` status
 *   when the server-selected timeout has expired.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ListActiveBreakpointsResponse]{@link google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/controller2.list_active_breakpoints.js</caption>
 * region_tag:clouddebugger_v2_generated_Controller2_ListActiveBreakpoints_async
 */
  listActiveBreakpoints(
      request?: protos.google.devtools.clouddebugger.v2.IListActiveBreakpointsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.devtools.clouddebugger.v2.IListActiveBreakpointsResponse,
        protos.google.devtools.clouddebugger.v2.IListActiveBreakpointsRequest|undefined, {}|undefined
      ]>;
  listActiveBreakpoints(
      request: protos.google.devtools.clouddebugger.v2.IListActiveBreakpointsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.devtools.clouddebugger.v2.IListActiveBreakpointsResponse,
          protos.google.devtools.clouddebugger.v2.IListActiveBreakpointsRequest|null|undefined,
          {}|null|undefined>): void;
  listActiveBreakpoints(
      request: protos.google.devtools.clouddebugger.v2.IListActiveBreakpointsRequest,
      callback: Callback<
          protos.google.devtools.clouddebugger.v2.IListActiveBreakpointsResponse,
          protos.google.devtools.clouddebugger.v2.IListActiveBreakpointsRequest|null|undefined,
          {}|null|undefined>): void;
  listActiveBreakpoints(
      request?: protos.google.devtools.clouddebugger.v2.IListActiveBreakpointsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.devtools.clouddebugger.v2.IListActiveBreakpointsResponse,
          protos.google.devtools.clouddebugger.v2.IListActiveBreakpointsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.clouddebugger.v2.IListActiveBreakpointsResponse,
          protos.google.devtools.clouddebugger.v2.IListActiveBreakpointsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.clouddebugger.v2.IListActiveBreakpointsResponse,
        protos.google.devtools.clouddebugger.v2.IListActiveBreakpointsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'debuggee_id': request.debuggeeId || '',
    });
    this.initialize();
    return this.innerApiCalls.listActiveBreakpoints(request, options, callback);
  }
/**
 * Updates the breakpoint state or mutable fields.
 * The entire Breakpoint message must be sent back to the controller service.
 *
 * Updates to active breakpoint fields are only allowed if the new value
 * does not change the breakpoint specification. Updates to the `location`,
 * `condition` and `expressions` fields should not alter the breakpoint
 * semantics. These may only make changes such as canonicalizing a value
 * or snapping the location to the correct line of code.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.debuggeeId
 *   Required. Identifies the debuggee being debugged.
 * @param {google.devtools.clouddebugger.v2.Breakpoint} request.breakpoint
 *   Required. Updated breakpoint information.
 *   The field `id` must be set.
 *   The agent must echo all Breakpoint specification fields in the update.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [UpdateActiveBreakpointResponse]{@link google.devtools.clouddebugger.v2.UpdateActiveBreakpointResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/controller2.update_active_breakpoint.js</caption>
 * region_tag:clouddebugger_v2_generated_Controller2_UpdateActiveBreakpoint_async
 */
  updateActiveBreakpoint(
      request?: protos.google.devtools.clouddebugger.v2.IUpdateActiveBreakpointRequest,
      options?: CallOptions):
      Promise<[
        protos.google.devtools.clouddebugger.v2.IUpdateActiveBreakpointResponse,
        protos.google.devtools.clouddebugger.v2.IUpdateActiveBreakpointRequest|undefined, {}|undefined
      ]>;
  updateActiveBreakpoint(
      request: protos.google.devtools.clouddebugger.v2.IUpdateActiveBreakpointRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.devtools.clouddebugger.v2.IUpdateActiveBreakpointResponse,
          protos.google.devtools.clouddebugger.v2.IUpdateActiveBreakpointRequest|null|undefined,
          {}|null|undefined>): void;
  updateActiveBreakpoint(
      request: protos.google.devtools.clouddebugger.v2.IUpdateActiveBreakpointRequest,
      callback: Callback<
          protos.google.devtools.clouddebugger.v2.IUpdateActiveBreakpointResponse,
          protos.google.devtools.clouddebugger.v2.IUpdateActiveBreakpointRequest|null|undefined,
          {}|null|undefined>): void;
  updateActiveBreakpoint(
      request?: protos.google.devtools.clouddebugger.v2.IUpdateActiveBreakpointRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.devtools.clouddebugger.v2.IUpdateActiveBreakpointResponse,
          protos.google.devtools.clouddebugger.v2.IUpdateActiveBreakpointRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.clouddebugger.v2.IUpdateActiveBreakpointResponse,
          protos.google.devtools.clouddebugger.v2.IUpdateActiveBreakpointRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.clouddebugger.v2.IUpdateActiveBreakpointResponse,
        protos.google.devtools.clouddebugger.v2.IUpdateActiveBreakpointRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'debuggee_id': request.debuggeeId || '',
    });
    this.initialize();
    return this.innerApiCalls.updateActiveBreakpoint(request, options, callback);
  }


  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.controller2Stub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
