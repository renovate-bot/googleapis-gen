<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/remoteworkers/v1test2/command.proto

namespace Google\Cloud\Remoteworkers\V1test2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * All information about the execution of a command, suitable for providing as
 * the Bots interface's `Lease.result` field.
 *
 * Generated from protobuf message <code>google.devtools.remoteworkers.v1test2.CommandResult</code>
 */
class CommandResult extends \Google\Protobuf\Internal\Message
{
    /**
     * An overall status for the command. For example, if the command timed out,
     * this might have a code of DEADLINE_EXCEEDED; if it was killed by the OS for
     * memory exhaustion, it might have a code of RESOURCE_EXHAUSTED.
     *
     * Generated from protobuf field <code>.google.rpc.Status status = 1;</code>
     */
    protected $status = null;
    /**
     * The exit code of the process. An exit code of "0" should only be trusted if
     * `status` has a code of OK (otherwise it may simply be unset).
     *
     * Generated from protobuf field <code>int32 exit_code = 2;</code>
     */
    protected $exit_code = 0;
    /**
     * The output files. The blob referenced by the digest should contain
     * one of the following (implementation-dependent):
     *    * A marshalled DirectoryMetadata of the returned filesystem
     *    * A LUCI-style .isolated file
     *
     * Generated from protobuf field <code>.google.devtools.remoteworkers.v1test2.Digest outputs = 3;</code>
     */
    protected $outputs = null;
    /**
     * The elapsed time between calling Accept and Complete. The server will also
     * have its own idea of what this should be, but this excludes the overhead of
     * the RPCs and the bot response time.
     *
     * Generated from protobuf field <code>.google.protobuf.Duration duration = 4 [deprecated = true];</code>
     * @deprecated
     */
    protected $duration = null;
    /**
     * The amount of time *not* spent executing the command (ie
     * uploading/downloading files).
     *
     * Generated from protobuf field <code>.google.protobuf.Duration overhead = 5 [deprecated = true];</code>
     * @deprecated
     */
    protected $overhead = null;
    /**
     * Implementation-dependent metadata about the task. Both servers and bots
     * may define messages which can be encoded here; bots are free to provide
     * metadata in multiple formats, and servers are free to choose one or more
     * of the values to process and ignore others. In particular, it is *not*
     * considered an error for the bot to provide the server with a field that it
     * doesn't know about.
     *
     * Generated from protobuf field <code>repeated .google.protobuf.Any metadata = 6;</code>
     */
    private $metadata;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Rpc\Status $status
     *           An overall status for the command. For example, if the command timed out,
     *           this might have a code of DEADLINE_EXCEEDED; if it was killed by the OS for
     *           memory exhaustion, it might have a code of RESOURCE_EXHAUSTED.
     *     @type int $exit_code
     *           The exit code of the process. An exit code of "0" should only be trusted if
     *           `status` has a code of OK (otherwise it may simply be unset).
     *     @type \Google\Cloud\Remoteworkers\V1test2\Digest $outputs
     *           The output files. The blob referenced by the digest should contain
     *           one of the following (implementation-dependent):
     *              * A marshalled DirectoryMetadata of the returned filesystem
     *              * A LUCI-style .isolated file
     *     @type \Google\Protobuf\Duration $duration
     *           The elapsed time between calling Accept and Complete. The server will also
     *           have its own idea of what this should be, but this excludes the overhead of
     *           the RPCs and the bot response time.
     *     @type \Google\Protobuf\Duration $overhead
     *           The amount of time *not* spent executing the command (ie
     *           uploading/downloading files).
     *     @type \Google\Protobuf\Any[]|\Google\Protobuf\Internal\RepeatedField $metadata
     *           Implementation-dependent metadata about the task. Both servers and bots
     *           may define messages which can be encoded here; bots are free to provide
     *           metadata in multiple formats, and servers are free to choose one or more
     *           of the values to process and ignore others. In particular, it is *not*
     *           considered an error for the bot to provide the server with a field that it
     *           doesn't know about.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Devtools\Remoteworkers\V1Test2\Command::initOnce();
        parent::__construct($data);
    }

    /**
     * An overall status for the command. For example, if the command timed out,
     * this might have a code of DEADLINE_EXCEEDED; if it was killed by the OS for
     * memory exhaustion, it might have a code of RESOURCE_EXHAUSTED.
     *
     * Generated from protobuf field <code>.google.rpc.Status status = 1;</code>
     * @return \Google\Rpc\Status|null
     */
    public function getStatus()
    {
        return $this->status;
    }

    public function hasStatus()
    {
        return isset($this->status);
    }

    public function clearStatus()
    {
        unset($this->status);
    }

    /**
     * An overall status for the command. For example, if the command timed out,
     * this might have a code of DEADLINE_EXCEEDED; if it was killed by the OS for
     * memory exhaustion, it might have a code of RESOURCE_EXHAUSTED.
     *
     * Generated from protobuf field <code>.google.rpc.Status status = 1;</code>
     * @param \Google\Rpc\Status $var
     * @return $this
     */
    public function setStatus($var)
    {
        GPBUtil::checkMessage($var, \Google\Rpc\Status::class);
        $this->status = $var;

        return $this;
    }

    /**
     * The exit code of the process. An exit code of "0" should only be trusted if
     * `status` has a code of OK (otherwise it may simply be unset).
     *
     * Generated from protobuf field <code>int32 exit_code = 2;</code>
     * @return int
     */
    public function getExitCode()
    {
        return $this->exit_code;
    }

    /**
     * The exit code of the process. An exit code of "0" should only be trusted if
     * `status` has a code of OK (otherwise it may simply be unset).
     *
     * Generated from protobuf field <code>int32 exit_code = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setExitCode($var)
    {
        GPBUtil::checkInt32($var);
        $this->exit_code = $var;

        return $this;
    }

    /**
     * The output files. The blob referenced by the digest should contain
     * one of the following (implementation-dependent):
     *    * A marshalled DirectoryMetadata of the returned filesystem
     *    * A LUCI-style .isolated file
     *
     * Generated from protobuf field <code>.google.devtools.remoteworkers.v1test2.Digest outputs = 3;</code>
     * @return \Google\Cloud\Remoteworkers\V1test2\Digest|null
     */
    public function getOutputs()
    {
        return $this->outputs;
    }

    public function hasOutputs()
    {
        return isset($this->outputs);
    }

    public function clearOutputs()
    {
        unset($this->outputs);
    }

    /**
     * The output files. The blob referenced by the digest should contain
     * one of the following (implementation-dependent):
     *    * A marshalled DirectoryMetadata of the returned filesystem
     *    * A LUCI-style .isolated file
     *
     * Generated from protobuf field <code>.google.devtools.remoteworkers.v1test2.Digest outputs = 3;</code>
     * @param \Google\Cloud\Remoteworkers\V1test2\Digest $var
     * @return $this
     */
    public function setOutputs($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Remoteworkers\V1test2\Digest::class);
        $this->outputs = $var;

        return $this;
    }

    /**
     * The elapsed time between calling Accept and Complete. The server will also
     * have its own idea of what this should be, but this excludes the overhead of
     * the RPCs and the bot response time.
     *
     * Generated from protobuf field <code>.google.protobuf.Duration duration = 4 [deprecated = true];</code>
     * @return \Google\Protobuf\Duration|null
     * @deprecated
     */
    public function getDuration()
    {
        @trigger_error('duration is deprecated.', E_USER_DEPRECATED);
        return $this->duration;
    }

    public function hasDuration()
    {
        @trigger_error('duration is deprecated.', E_USER_DEPRECATED);
        return isset($this->duration);
    }

    public function clearDuration()
    {
        @trigger_error('duration is deprecated.', E_USER_DEPRECATED);
        unset($this->duration);
    }

    /**
     * The elapsed time between calling Accept and Complete. The server will also
     * have its own idea of what this should be, but this excludes the overhead of
     * the RPCs and the bot response time.
     *
     * Generated from protobuf field <code>.google.protobuf.Duration duration = 4 [deprecated = true];</code>
     * @param \Google\Protobuf\Duration $var
     * @return $this
     * @deprecated
     */
    public function setDuration($var)
    {
        @trigger_error('duration is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkMessage($var, \Google\Protobuf\Duration::class);
        $this->duration = $var;

        return $this;
    }

    /**
     * The amount of time *not* spent executing the command (ie
     * uploading/downloading files).
     *
     * Generated from protobuf field <code>.google.protobuf.Duration overhead = 5 [deprecated = true];</code>
     * @return \Google\Protobuf\Duration|null
     * @deprecated
     */
    public function getOverhead()
    {
        @trigger_error('overhead is deprecated.', E_USER_DEPRECATED);
        return $this->overhead;
    }

    public function hasOverhead()
    {
        @trigger_error('overhead is deprecated.', E_USER_DEPRECATED);
        return isset($this->overhead);
    }

    public function clearOverhead()
    {
        @trigger_error('overhead is deprecated.', E_USER_DEPRECATED);
        unset($this->overhead);
    }

    /**
     * The amount of time *not* spent executing the command (ie
     * uploading/downloading files).
     *
     * Generated from protobuf field <code>.google.protobuf.Duration overhead = 5 [deprecated = true];</code>
     * @param \Google\Protobuf\Duration $var
     * @return $this
     * @deprecated
     */
    public function setOverhead($var)
    {
        @trigger_error('overhead is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkMessage($var, \Google\Protobuf\Duration::class);
        $this->overhead = $var;

        return $this;
    }

    /**
     * Implementation-dependent metadata about the task. Both servers and bots
     * may define messages which can be encoded here; bots are free to provide
     * metadata in multiple formats, and servers are free to choose one or more
     * of the values to process and ignore others. In particular, it is *not*
     * considered an error for the bot to provide the server with a field that it
     * doesn't know about.
     *
     * Generated from protobuf field <code>repeated .google.protobuf.Any metadata = 6;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * Implementation-dependent metadata about the task. Both servers and bots
     * may define messages which can be encoded here; bots are free to provide
     * metadata in multiple formats, and servers are free to choose one or more
     * of the values to process and ignore others. In particular, it is *not*
     * considered an error for the bot to provide the server with a field that it
     * doesn't know about.
     *
     * Generated from protobuf field <code>repeated .google.protobuf.Any metadata = 6;</code>
     * @param \Google\Protobuf\Any[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setMetadata($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Protobuf\Any::class);
        $this->metadata = $arr;

        return $this;
    }

}

