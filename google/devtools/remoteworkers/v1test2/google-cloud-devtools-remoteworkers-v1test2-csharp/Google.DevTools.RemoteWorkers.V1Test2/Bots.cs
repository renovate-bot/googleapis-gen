// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/devtools/remoteworkers/v1test2/bots.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.DevTools.RemoteWorkers.V1Test2 {

  /// <summary>Holder for reflection information generated from google/devtools/remoteworkers/v1test2/bots.proto</summary>
  public static partial class BotsReflection {

    #region Descriptor
    /// <summary>File descriptor for google/devtools/remoteworkers/v1test2/bots.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BotsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjBnb29nbGUvZGV2dG9vbHMvcmVtb3Rld29ya2Vycy92MXRlc3QyL2JvdHMu",
            "cHJvdG8SJWdvb2dsZS5kZXZ0b29scy5yZW1vdGV3b3JrZXJzLnYxdGVzdDIa",
            "HGdvb2dsZS9hcGkvYW5ub3RhdGlvbnMucHJvdG8aF2dvb2dsZS9hcGkvY2xp",
            "ZW50LnByb3RvGh9nb29nbGUvYXBpL2ZpZWxkX2JlaGF2aW9yLnByb3RvGhln",
            "b29nbGUvYXBpL3Jlc291cmNlLnByb3RvGjJnb29nbGUvZGV2dG9vbHMvcmVt",
            "b3Rld29ya2Vycy92MXRlc3QyL3dvcmtlci5wcm90bxoZZ29vZ2xlL3Byb3Rv",
            "YnVmL2FueS5wcm90bxogZ29vZ2xlL3Byb3RvYnVmL2ZpZWxkX21hc2sucHJv",
            "dG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8aF2dvb2dsZS9y",
            "cGMvc3RhdHVzLnByb3RvIoYDCgpCb3RTZXNzaW9uEgwKBG5hbWUYASABKAkS",
            "DgoGYm90X2lkGAIgASgJEkAKBnN0YXR1cxgDIAEoDjIwLmdvb2dsZS5kZXZ0",
            "b29scy5yZW1vdGV3b3JrZXJzLnYxdGVzdDIuQm90U3RhdHVzEj0KBndvcmtl",
            "chgEIAEoCzItLmdvb2dsZS5kZXZ0b29scy5yZW1vdGV3b3JrZXJzLnYxdGVz",
            "dDIuV29ya2VyEjwKBmxlYXNlcxgFIAMoCzIsLmdvb2dsZS5kZXZ0b29scy5y",
            "ZW1vdGV3b3JrZXJzLnYxdGVzdDIuTGVhc2USLwoLZXhwaXJlX3RpbWUYBiAB",
            "KAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEg8KB3ZlcnNpb24YByAB",
            "KAk6WepBVgoncmVtb3Rld29ya2Vycy5nb29nbGVhcGlzLmNvbS9Cb3RTZXNz",
            "aW9uEit7dW5rbm93bl9wYXRoPSoqfS9ib3RTZXNzaW9ucy97Ym90X3Nlc3Np",
            "b259IokDCgVMZWFzZRIKCgJpZBgHIAEoCRIlCgdwYXlsb2FkGAggASgLMhQu",
            "Z29vZ2xlLnByb3RvYnVmLkFueRIkCgZyZXN1bHQYCSABKAsyFC5nb29nbGUu",
            "cHJvdG9idWYuQW55EkAKBXN0YXRlGAIgASgOMjEuZ29vZ2xlLmRldnRvb2xz",
            "LnJlbW90ZXdvcmtlcnMudjF0ZXN0Mi5MZWFzZVN0YXRlEiIKBnN0YXR1cxgD",
            "IAEoCzISLmdvb2dsZS5ycGMuU3RhdHVzEkMKDHJlcXVpcmVtZW50cxgEIAEo",
            "CzItLmdvb2dsZS5kZXZ0b29scy5yZW1vdGV3b3JrZXJzLnYxdGVzdDIuV29y",
            "a2VyEi8KC2V4cGlyZV90aW1lGAUgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRp",
            "bWVzdGFtcBIWCgphc3NpZ25tZW50GAEgASgJQgIYARIzChFpbmxpbmVfYXNz",
            "aWdubWVudBgGIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnlCAhgBIsUBCglB",
            "ZG1pblRlbXASSQoHY29tbWFuZBgBIAEoDjI4Lmdvb2dsZS5kZXZ0b29scy5y",
            "ZW1vdGV3b3JrZXJzLnYxdGVzdDIuQWRtaW5UZW1wLkNvbW1hbmQSCwoDYXJn",
            "GAIgASgJImAKB0NvbW1hbmQSDwoLVU5TUEVDSUZJRUQQABIOCgpCT1RfVVBE",
            "QVRFEAESDwoLQk9UX1JFU1RBUlQQAhIRCg1CT1RfVEVSTUlOQVRFEAMSEAoM",
            "SE9TVF9SRVNUQVJUEAQiewoXQ3JlYXRlQm90U2Vzc2lvblJlcXVlc3QSEwoG",
            "cGFyZW50GAEgASgJQgPgQQISSwoLYm90X3Nlc3Npb24YAiABKAsyMS5nb29n",
            "bGUuZGV2dG9vbHMucmVtb3Rld29ya2Vycy52MXRlc3QyLkJvdFNlc3Npb25C",
            "A+BBAiLbAQoXVXBkYXRlQm90U2Vzc2lvblJlcXVlc3QSPQoEbmFtZRgBIAEo",
            "CUIv4EEC+kEpCidyZW1vdGV3b3JrZXJzLmdvb2dsZWFwaXMuY29tL0JvdFNl",
            "c3Npb24SSwoLYm90X3Nlc3Npb24YAiABKAsyMS5nb29nbGUuZGV2dG9vbHMu",
            "cmVtb3Rld29ya2Vycy52MXRlc3QyLkJvdFNlc3Npb25CA+BBAhI0Cgt1cGRh",
            "dGVfbWFzaxgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE1hc2tCA+BB",
            "Aip5CglCb3RTdGF0dXMSGgoWQk9UX1NUQVRVU19VTlNQRUNJRklFRBAAEgYK",
            "Ak9LEAESDQoJVU5IRUFMVEhZEAISEgoOSE9TVF9SRUJPT1RJTkcQAxITCg9C",
            "T1RfVEVSTUlOQVRJTkcQBBIQCgxJTklUSUFMSVpJTkcQBSpgCgpMZWFzZVN0",
            "YXRlEhsKF0xFQVNFX1NUQVRFX1VOU1BFQ0lGSUVEEAASCwoHUEVORElORxAB",
            "EgoKBkFDVElWRRACEg0KCUNPTVBMRVRFRBAEEg0KCUNBTkNFTExFRBAFMtkD",
            "CgRCb3RzEtEBChBDcmVhdGVCb3RTZXNzaW9uEj4uZ29vZ2xlLmRldnRvb2xz",
            "LnJlbW90ZXdvcmtlcnMudjF0ZXN0Mi5DcmVhdGVCb3RTZXNzaW9uUmVxdWVz",
            "dBoxLmdvb2dsZS5kZXZ0b29scy5yZW1vdGV3b3JrZXJzLnYxdGVzdDIuQm90",
            "U2Vzc2lvbiJKgtPkkwIvIiAvdjF0ZXN0Mi97cGFyZW50PSoqfS9ib3RTZXNz",
            "aW9uczoLYm90X3Nlc3Npb27aQRJwYXJlbnQsYm90X3Nlc3Npb24S2wEKEFVw",
            "ZGF0ZUJvdFNlc3Npb24SPi5nb29nbGUuZGV2dG9vbHMucmVtb3Rld29ya2Vy",
            "cy52MXRlc3QyLlVwZGF0ZUJvdFNlc3Npb25SZXF1ZXN0GjEuZ29vZ2xlLmRl",
            "dnRvb2xzLnJlbW90ZXdvcmtlcnMudjF0ZXN0Mi5Cb3RTZXNzaW9uIlSC0+ST",
            "Ai8yIC92MXRlc3QyL3tuYW1lPSoqL2JvdFNlc3Npb25zLyp9Ogtib3Rfc2Vz",
            "c2lvbtpBHG5hbWUsYm90X3Nlc3Npb24sdXBkYXRlX21hc2saH8pBHHJlbW90",
            "ZXdvcmtlcnMuZ29vZ2xlYXBpcy5jb21C5gEKKWNvbS5nb29nbGUuZGV2dG9v",
            "bHMucmVtb3Rld29ya2Vycy52MXRlc3QyQhFSZW1vdGVXb3JrZXJzQm90c1AB",
            "WlJnb29nbGUuZ29sYW5nLm9yZy9nZW5wcm90by9nb29nbGVhcGlzL2RldnRv",
            "b2xzL3JlbW90ZXdvcmtlcnMvdjF0ZXN0MjtyZW1vdGV3b3JrZXJzogICUleq",
            "AiVHb29nbGUuRGV2VG9vbHMuUmVtb3RlV29ya2Vycy5WMVRlc3QyygIiR29v",
            "Z2xlXENsb3VkXFJlbW90ZXdvcmtlcnNcVjF0ZXN0MmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Api.ClientReflection.Descriptor, global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Api.ResourceReflection.Descriptor, global::Google.DevTools.RemoteWorkers.V1Test2.WorkerReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.FieldMaskReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Rpc.StatusReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Google.DevTools.RemoteWorkers.V1Test2.BotStatus), typeof(global::Google.DevTools.RemoteWorkers.V1Test2.LeaseState), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.DevTools.RemoteWorkers.V1Test2.BotSession), global::Google.DevTools.RemoteWorkers.V1Test2.BotSession.Parser, new[]{ "Name", "BotId", "Status", "Worker", "Leases", "ExpireTime", "Version" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.DevTools.RemoteWorkers.V1Test2.Lease), global::Google.DevTools.RemoteWorkers.V1Test2.Lease.Parser, new[]{ "Id", "Payload", "Result", "State", "Status", "Requirements", "ExpireTime", "Assignment", "InlineAssignment" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.DevTools.RemoteWorkers.V1Test2.AdminTemp), global::Google.DevTools.RemoteWorkers.V1Test2.AdminTemp.Parser, new[]{ "Command", "Arg" }, null, new[]{ typeof(global::Google.DevTools.RemoteWorkers.V1Test2.AdminTemp.Types.Command) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.DevTools.RemoteWorkers.V1Test2.CreateBotSessionRequest), global::Google.DevTools.RemoteWorkers.V1Test2.CreateBotSessionRequest.Parser, new[]{ "Parent", "BotSession" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.DevTools.RemoteWorkers.V1Test2.UpdateBotSessionRequest), global::Google.DevTools.RemoteWorkers.V1Test2.UpdateBotSessionRequest.Parser, new[]{ "Name", "BotSession", "UpdateMask" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// A coarse description of the status of the bot that the server uses to
  /// determine whether to assign the bot new leases.
  /// </summary>
  public enum BotStatus {
    /// <summary>
    /// Default value; do not use.
    /// </summary>
    [pbr::OriginalName("BOT_STATUS_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// The bot is healthy, and will accept leases as normal.
    /// </summary>
    [pbr::OriginalName("OK")] Ok = 1,
    /// <summary>
    /// The bot is unhealthy and will not accept new leases. For example, the bot
    /// may have detected that available disk space is too low. This situation may
    /// resolve itself, but will typically require human intervention.
    /// </summary>
    [pbr::OriginalName("UNHEALTHY")] Unhealthy = 2,
    /// <summary>
    /// The bot has been asked to reboot the host. The bot will not accept new
    /// leases; once all leases are complete, this session will no longer be
    /// updated but the bot will be expected to establish a new session after the
    /// reboot completes.
    /// </summary>
    [pbr::OriginalName("HOST_REBOOTING")] HostRebooting = 3,
    /// <summary>
    /// The bot has been asked to shut down. As with HOST_REBOOTING, once all
    /// leases are completed, the session will no longer be updated and the bot
    /// will not be expected to establish a new session.
    ///
    /// Bots are typically only asked to shut down if its host computer will be
    /// modified in some way, such as deleting a VM.
    /// </summary>
    [pbr::OriginalName("BOT_TERMINATING")] BotTerminating = 4,
    /// <summary>
    /// The bot is initializing and is not ready to accept leases.
    /// </summary>
    [pbr::OriginalName("INITIALIZING")] Initializing = 5,
  }

  /// <summary>
  /// The state of the lease. All leases start in the PENDING state. A bot can
  /// change PENDING to ACTIVE or (in the case of an error) COMPLETED, or from
  /// ACTIVE to COMPLETED. The server can change PENDING or ACTIVE to CANCELLED if
  /// it wants the bot to release its resources - for example, if the bot needs to
  /// be quarantined (it's producing bad output) or a cell needs to be drained.
  /// </summary>
  public enum LeaseState {
    /// <summary>
    /// Default value; do not use.
    /// </summary>
    [pbr::OriginalName("LEASE_STATE_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// Pending: the server expects the bot to accept this lease. This may only be
    /// set by the server.
    /// </summary>
    [pbr::OriginalName("PENDING")] Pending = 1,
    /// <summary>
    /// Active: the bot has accepted this lease. This may only be set by the bot.
    /// </summary>
    [pbr::OriginalName("ACTIVE")] Active = 2,
    /// <summary>
    /// Completed: the bot is no longer leased. This may only be set by the bot,
    /// and the status field must be populated iff the state is COMPLETED.
    /// </summary>
    [pbr::OriginalName("COMPLETED")] Completed = 4,
    /// <summary>
    /// Cancelled: The bot should immediately release all resources associated with
    /// the lease. This may only be set by the server.
    /// </summary>
    [pbr::OriginalName("CANCELLED")] Cancelled = 5,
  }

  #endregion

  #region Messages
  /// <summary>
  /// A bot session represents the state of a bot while in continuous contact with
  /// the server for a period of time. The session includes information about the
  /// worker - that is, the *worker* (the physical or virtual hardware) is
  /// considered to be a property of the bot (the software agent running on that
  /// hardware), which is the reverse of real life, but more natural from the point
  /// of the view of this API, which communicates solely with the bot and not
  /// directly with the underlying worker.
  /// </summary>
  public sealed partial class BotSession : pb::IMessage<BotSession>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BotSession> _parser = new pb::MessageParser<BotSession>(() => new BotSession());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BotSession> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.DevTools.RemoteWorkers.V1Test2.BotsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BotSession() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BotSession(BotSession other) : this() {
      name_ = other.name_;
      botId_ = other.botId_;
      status_ = other.status_;
      worker_ = other.worker_ != null ? other.worker_.Clone() : null;
      leases_ = other.leases_.Clone();
      expireTime_ = other.expireTime_ != null ? other.expireTime_.Clone() : null;
      version_ = other.version_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BotSession Clone() {
      return new BotSession(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The bot session name, as selected by the server. Output only during a call
    /// to CreateBotSession.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bot_id" field.</summary>
    public const int BotIdFieldNumber = 2;
    private string botId_ = "";
    /// <summary>
    /// A unique bot ID within the farm used to persistently identify this bot over
    /// time (i.e., over multiple sessions). This ID must be unique within a
    /// farm. Typically, the bot ID will be the same as the name of the primary
    /// device in the worker (e.g., what you'd get from typing `uname -n` on *nix),
    /// but this is not required since a single device may allow multiple bots to
    /// run on it, each with access to different resources. What is important is
    /// that this ID is meaningful to humans, who might need to hunt a physical
    /// machine down to fix it.
    ///
    /// When CreateBotSession is successfully called with a bot_id, all prior
    /// sessions with the same ID are invalidated. If a bot attempts to update an
    /// invalid session, the server must reject that request, and may also
    /// quarantine the other bot with the same bot IDs (ie, stop sending it new
    /// leases and alert an admin).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BotId {
      get { return botId_; }
      set {
        botId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::Google.DevTools.RemoteWorkers.V1Test2.BotStatus status_ = global::Google.DevTools.RemoteWorkers.V1Test2.BotStatus.Unspecified;
    /// <summary>
    /// The status of the bot. This must be populated in every call to
    /// UpdateBotSession.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.DevTools.RemoteWorkers.V1Test2.BotStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "worker" field.</summary>
    public const int WorkerFieldNumber = 4;
    private global::Google.DevTools.RemoteWorkers.V1Test2.Worker worker_;
    /// <summary>
    /// A description of the worker hosting this bot. The Worker message is used
    /// here in the Status context (see Worker for more information).  If multiple
    /// bots are running on the worker, this field should only describe the
    /// resources accessible from this bot.
    ///
    /// During the call to CreateBotSession, the server may make arbitrary changes
    /// to the worker's `server_properties` field (see that field for more
    /// information). Otherwise, this field is input-only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.DevTools.RemoteWorkers.V1Test2.Worker Worker {
      get { return worker_; }
      set {
        worker_ = value;
      }
    }

    /// <summary>Field number for the "leases" field.</summary>
    public const int LeasesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Google.DevTools.RemoteWorkers.V1Test2.Lease> _repeated_leases_codec
        = pb::FieldCodec.ForMessage(42, global::Google.DevTools.RemoteWorkers.V1Test2.Lease.Parser);
    private readonly pbc::RepeatedField<global::Google.DevTools.RemoteWorkers.V1Test2.Lease> leases_ = new pbc::RepeatedField<global::Google.DevTools.RemoteWorkers.V1Test2.Lease>();
    /// <summary>
    /// A list of all leases that are a part of this session. See the Lease message
    /// for details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.DevTools.RemoteWorkers.V1Test2.Lease> Leases {
      get { return leases_; }
    }

    /// <summary>Field number for the "expire_time" field.</summary>
    public const int ExpireTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expireTime_;
    /// <summary>
    /// The time at which this bot session will expire, unless the bot calls
    /// UpdateBotSession again. Output only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 7;
    private string version_ = "";
    /// <summary>
    /// The version of the bot code currently running. The server may use this
    /// information to issue an admin action to tell the bot to update itself.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BotSession);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BotSession other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (BotId != other.BotId) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(Worker, other.Worker)) return false;
      if(!leases_.Equals(other.leases_)) return false;
      if (!object.Equals(ExpireTime, other.ExpireTime)) return false;
      if (Version != other.Version) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (BotId.Length != 0) hash ^= BotId.GetHashCode();
      if (Status != global::Google.DevTools.RemoteWorkers.V1Test2.BotStatus.Unspecified) hash ^= Status.GetHashCode();
      if (worker_ != null) hash ^= Worker.GetHashCode();
      hash ^= leases_.GetHashCode();
      if (expireTime_ != null) hash ^= ExpireTime.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (BotId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BotId);
      }
      if (Status != global::Google.DevTools.RemoteWorkers.V1Test2.BotStatus.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
      if (worker_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Worker);
      }
      leases_.WriteTo(output, _repeated_leases_codec);
      if (expireTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ExpireTime);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (BotId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BotId);
      }
      if (Status != global::Google.DevTools.RemoteWorkers.V1Test2.BotStatus.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
      if (worker_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Worker);
      }
      leases_.WriteTo(ref output, _repeated_leases_codec);
      if (expireTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ExpireTime);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (BotId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BotId);
      }
      if (Status != global::Google.DevTools.RemoteWorkers.V1Test2.BotStatus.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (worker_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Worker);
      }
      size += leases_.CalculateSize(_repeated_leases_codec);
      if (expireTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExpireTime);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BotSession other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.BotId.Length != 0) {
        BotId = other.BotId;
      }
      if (other.Status != global::Google.DevTools.RemoteWorkers.V1Test2.BotStatus.Unspecified) {
        Status = other.Status;
      }
      if (other.worker_ != null) {
        if (worker_ == null) {
          Worker = new global::Google.DevTools.RemoteWorkers.V1Test2.Worker();
        }
        Worker.MergeFrom(other.Worker);
      }
      leases_.Add(other.leases_);
      if (other.expireTime_ != null) {
        if (expireTime_ == null) {
          ExpireTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ExpireTime.MergeFrom(other.ExpireTime);
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            BotId = input.ReadString();
            break;
          }
          case 24: {
            Status = (global::Google.DevTools.RemoteWorkers.V1Test2.BotStatus) input.ReadEnum();
            break;
          }
          case 34: {
            if (worker_ == null) {
              Worker = new global::Google.DevTools.RemoteWorkers.V1Test2.Worker();
            }
            input.ReadMessage(Worker);
            break;
          }
          case 42: {
            leases_.AddEntriesFrom(input, _repeated_leases_codec);
            break;
          }
          case 50: {
            if (expireTime_ == null) {
              ExpireTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpireTime);
            break;
          }
          case 58: {
            Version = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            BotId = input.ReadString();
            break;
          }
          case 24: {
            Status = (global::Google.DevTools.RemoteWorkers.V1Test2.BotStatus) input.ReadEnum();
            break;
          }
          case 34: {
            if (worker_ == null) {
              Worker = new global::Google.DevTools.RemoteWorkers.V1Test2.Worker();
            }
            input.ReadMessage(Worker);
            break;
          }
          case 42: {
            leases_.AddEntriesFrom(ref input, _repeated_leases_codec);
            break;
          }
          case 50: {
            if (expireTime_ == null) {
              ExpireTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpireTime);
            break;
          }
          case 58: {
            Version = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A Lease is a lease that the scheduler has assigned to this bot. If the bot
  /// notices (by UpdateBotSession) that it has any leases in the PENDING state, it
  /// should call UpdateBotSession to put the leases into the ACTIVE state and
  /// start executing their assignments.
  ///
  /// All fields in this message are output-only, *except* the `state` and `status`
  /// fields. Note that repeated fields can only be updated as a unit, so on every
  /// update the bot must provide an update for *all* the leases the server expects
  /// it to report on.
  ///
  /// The scheduler *should* ensure that all leases scheduled to a bot can actually
  /// be accepted, but race conditions may occur. In such cases, the bot should
  /// attempt to accept the leases in the order they are listed by the server, to
  /// allow the server to control priorities.
  ///
  /// The server will remove COMPLETED leases from time to time, after which the
  /// bot shouldn't report on them any more (the server will ignore superfluous
  /// COMPLETED records).
  /// </summary>
  public sealed partial class Lease : pb::IMessage<Lease>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Lease> _parser = new pb::MessageParser<Lease>(() => new Lease());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Lease> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.DevTools.RemoteWorkers.V1Test2.BotsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lease() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lease(Lease other) : this() {
      id_ = other.id_;
      payload_ = other.payload_ != null ? other.payload_.Clone() : null;
      result_ = other.result_ != null ? other.result_.Clone() : null;
      state_ = other.state_;
      status_ = other.status_ != null ? other.status_.Clone() : null;
      requirements_ = other.requirements_ != null ? other.requirements_.Clone() : null;
      expireTime_ = other.expireTime_ != null ? other.expireTime_.Clone() : null;
      assignment_ = other.assignment_;
      inlineAssignment_ = other.inlineAssignment_ != null ? other.inlineAssignment_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lease Clone() {
      return new Lease(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 7;
    private string id_ = "";
    /// <summary>
    /// A short string uniquely identifing the lease within this bot session.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Any payload_;
    /// <summary>
    /// The actual work to be performed, if any. May be omitted by the server if
    /// the lease is not in the `PENDING` state. The message must be meaningful to
    /// the bot. Output only (must only be set by the server).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any Payload {
      get { return payload_; }
      set {
        payload_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Any result_;
    /// <summary>
    /// Any result the bot wishes to provide about the lease. Must not be changed
    /// after the first call with the lease in the `COMPLETED` or `CANCELLED`
    /// state. Input only (must only be set by the bot, will not be echoed by the
    /// server).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private global::Google.DevTools.RemoteWorkers.V1Test2.LeaseState state_ = global::Google.DevTools.RemoteWorkers.V1Test2.LeaseState.Unspecified;
    /// <summary>
    /// The state of the lease. See LeaseState for more information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.DevTools.RemoteWorkers.V1Test2.LeaseState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::Google.Rpc.Status status_;
    /// <summary>
    /// The final status of the lease (should be populated by the bot if the state
    /// is completed). This is the status of the lease, not of any task represented
    /// by the lease. For example, if the bot could not accept the lease because it
    /// asked for some resource the bot didn't have, this status will be
    /// FAILED_PRECONDITION. But if the assignment in the lease didn't execute
    /// correctly, this field will be `OK` while the failure of the assignment must
    /// communicated via the `result` field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Rpc.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "requirements" field.</summary>
    public const int RequirementsFieldNumber = 4;
    private global::Google.DevTools.RemoteWorkers.V1Test2.Worker requirements_;
    /// <summary>
    /// The requirements that are being claimed by this lease. This field may be
    /// omitted by the server if the lease is not pending.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.DevTools.RemoteWorkers.V1Test2.Worker Requirements {
      get { return requirements_; }
      set {
        requirements_ = value;
      }
    }

    /// <summary>Field number for the "expire_time" field.</summary>
    public const int ExpireTimeFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expireTime_;
    /// <summary>
    /// The time at which this lease expires. The server *may* extend this over
    /// time, but due to race conditions, the bot is not *required* to respect any
    /// expiry date except the first one.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = value;
      }
    }

    /// <summary>Field number for the "assignment" field.</summary>
    public const int AssignmentFieldNumber = 1;
    private string assignment_ = "";
    /// <summary>
    /// DEPRECATED. The assignment should be provided to the bot via the `payload`
    /// field. Clients that wish to use a simple name (such as a queue of work
    /// provided elsewhere) should define a custom message type and encode it into
    /// `payload`.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Assignment {
      get { return assignment_; }
      set {
        assignment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "inline_assignment" field.</summary>
    public const int InlineAssignmentFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Any inlineAssignment_;
    /// <summary>
    /// DEPRECATED. Use `payload` instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any InlineAssignment {
      get { return inlineAssignment_; }
      set {
        inlineAssignment_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Lease);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Lease other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Payload, other.Payload)) return false;
      if (!object.Equals(Result, other.Result)) return false;
      if (State != other.State) return false;
      if (!object.Equals(Status, other.Status)) return false;
      if (!object.Equals(Requirements, other.Requirements)) return false;
      if (!object.Equals(ExpireTime, other.ExpireTime)) return false;
      if (Assignment != other.Assignment) return false;
      if (!object.Equals(InlineAssignment, other.InlineAssignment)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (payload_ != null) hash ^= Payload.GetHashCode();
      if (result_ != null) hash ^= Result.GetHashCode();
      if (State != global::Google.DevTools.RemoteWorkers.V1Test2.LeaseState.Unspecified) hash ^= State.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      if (requirements_ != null) hash ^= Requirements.GetHashCode();
      if (expireTime_ != null) hash ^= ExpireTime.GetHashCode();
      if (Assignment.Length != 0) hash ^= Assignment.GetHashCode();
      if (inlineAssignment_ != null) hash ^= InlineAssignment.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Assignment.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Assignment);
      }
      if (State != global::Google.DevTools.RemoteWorkers.V1Test2.LeaseState.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) State);
      }
      if (status_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Status);
      }
      if (requirements_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Requirements);
      }
      if (expireTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ExpireTime);
      }
      if (inlineAssignment_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(InlineAssignment);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Id);
      }
      if (payload_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Payload);
      }
      if (result_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Assignment.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Assignment);
      }
      if (State != global::Google.DevTools.RemoteWorkers.V1Test2.LeaseState.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) State);
      }
      if (status_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Status);
      }
      if (requirements_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Requirements);
      }
      if (expireTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ExpireTime);
      }
      if (inlineAssignment_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(InlineAssignment);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Id);
      }
      if (payload_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Payload);
      }
      if (result_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (payload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
      }
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (State != global::Google.DevTools.RemoteWorkers.V1Test2.LeaseState.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (requirements_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Requirements);
      }
      if (expireTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExpireTime);
      }
      if (Assignment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Assignment);
      }
      if (inlineAssignment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InlineAssignment);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Lease other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.payload_ != null) {
        if (payload_ == null) {
          Payload = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        Payload.MergeFrom(other.Payload);
      }
      if (other.result_ != null) {
        if (result_ == null) {
          Result = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        Result.MergeFrom(other.Result);
      }
      if (other.State != global::Google.DevTools.RemoteWorkers.V1Test2.LeaseState.Unspecified) {
        State = other.State;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Google.Rpc.Status();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.requirements_ != null) {
        if (requirements_ == null) {
          Requirements = new global::Google.DevTools.RemoteWorkers.V1Test2.Worker();
        }
        Requirements.MergeFrom(other.Requirements);
      }
      if (other.expireTime_ != null) {
        if (expireTime_ == null) {
          ExpireTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ExpireTime.MergeFrom(other.ExpireTime);
      }
      if (other.Assignment.Length != 0) {
        Assignment = other.Assignment;
      }
      if (other.inlineAssignment_ != null) {
        if (inlineAssignment_ == null) {
          InlineAssignment = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        InlineAssignment.MergeFrom(other.InlineAssignment);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Assignment = input.ReadString();
            break;
          }
          case 16: {
            State = (global::Google.DevTools.RemoteWorkers.V1Test2.LeaseState) input.ReadEnum();
            break;
          }
          case 26: {
            if (status_ == null) {
              Status = new global::Google.Rpc.Status();
            }
            input.ReadMessage(Status);
            break;
          }
          case 34: {
            if (requirements_ == null) {
              Requirements = new global::Google.DevTools.RemoteWorkers.V1Test2.Worker();
            }
            input.ReadMessage(Requirements);
            break;
          }
          case 42: {
            if (expireTime_ == null) {
              ExpireTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpireTime);
            break;
          }
          case 50: {
            if (inlineAssignment_ == null) {
              InlineAssignment = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(InlineAssignment);
            break;
          }
          case 58: {
            Id = input.ReadString();
            break;
          }
          case 66: {
            if (payload_ == null) {
              Payload = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(Payload);
            break;
          }
          case 74: {
            if (result_ == null) {
              Result = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(Result);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Assignment = input.ReadString();
            break;
          }
          case 16: {
            State = (global::Google.DevTools.RemoteWorkers.V1Test2.LeaseState) input.ReadEnum();
            break;
          }
          case 26: {
            if (status_ == null) {
              Status = new global::Google.Rpc.Status();
            }
            input.ReadMessage(Status);
            break;
          }
          case 34: {
            if (requirements_ == null) {
              Requirements = new global::Google.DevTools.RemoteWorkers.V1Test2.Worker();
            }
            input.ReadMessage(Requirements);
            break;
          }
          case 42: {
            if (expireTime_ == null) {
              ExpireTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpireTime);
            break;
          }
          case 50: {
            if (inlineAssignment_ == null) {
              InlineAssignment = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(InlineAssignment);
            break;
          }
          case 58: {
            Id = input.ReadString();
            break;
          }
          case 66: {
            if (payload_ == null) {
              Payload = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(Payload);
            break;
          }
          case 74: {
            if (result_ == null) {
              Result = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(Result);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// AdminTemp is a prelimiary set of administration tasks. It's called "Temp"
  /// because we do not yet know the best way to represent admin tasks; it's
  /// possible that this will be entirely replaced in later versions of this API.
  /// If this message proves to be sufficient, it will be renamed in the alpha or
  /// beta release of this API.
  ///
  /// This message (suitably marshalled into a protobuf.Any) can be used as the
  /// inline_assignment field in a lease; the lease assignment field should simply
  /// be `"admin"` in these cases.
  ///
  /// This message is heavily based on Swarming administration tasks from the LUCI
  /// project (http://github.com/luci/luci-py/appengine/swarming).
  /// </summary>
  public sealed partial class AdminTemp : pb::IMessage<AdminTemp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AdminTemp> _parser = new pb::MessageParser<AdminTemp>(() => new AdminTemp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdminTemp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.DevTools.RemoteWorkers.V1Test2.BotsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminTemp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminTemp(AdminTemp other) : this() {
      command_ = other.command_;
      arg_ = other.arg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminTemp Clone() {
      return new AdminTemp(this);
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 1;
    private global::Google.DevTools.RemoteWorkers.V1Test2.AdminTemp.Types.Command command_ = global::Google.DevTools.RemoteWorkers.V1Test2.AdminTemp.Types.Command.Unspecified;
    /// <summary>
    /// The admin action; see `Command` for legal values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.DevTools.RemoteWorkers.V1Test2.AdminTemp.Types.Command Command {
      get { return command_; }
      set {
        command_ = value;
      }
    }

    /// <summary>Field number for the "arg" field.</summary>
    public const int ArgFieldNumber = 2;
    private string arg_ = "";
    /// <summary>
    /// The argument to the admin action; see `Command` for semantics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Arg {
      get { return arg_; }
      set {
        arg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdminTemp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdminTemp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Command != other.Command) return false;
      if (Arg != other.Arg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Command != global::Google.DevTools.RemoteWorkers.V1Test2.AdminTemp.Types.Command.Unspecified) hash ^= Command.GetHashCode();
      if (Arg.Length != 0) hash ^= Arg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Command != global::Google.DevTools.RemoteWorkers.V1Test2.AdminTemp.Types.Command.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Command);
      }
      if (Arg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Arg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Command != global::Google.DevTools.RemoteWorkers.V1Test2.AdminTemp.Types.Command.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Command);
      }
      if (Arg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Arg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Command != global::Google.DevTools.RemoteWorkers.V1Test2.AdminTemp.Types.Command.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Command);
      }
      if (Arg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Arg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdminTemp other) {
      if (other == null) {
        return;
      }
      if (other.Command != global::Google.DevTools.RemoteWorkers.V1Test2.AdminTemp.Types.Command.Unspecified) {
        Command = other.Command;
      }
      if (other.Arg.Length != 0) {
        Arg = other.Arg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Command = (global::Google.DevTools.RemoteWorkers.V1Test2.AdminTemp.Types.Command) input.ReadEnum();
            break;
          }
          case 18: {
            Arg = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Command = (global::Google.DevTools.RemoteWorkers.V1Test2.AdminTemp.Types.Command) input.ReadEnum();
            break;
          }
          case 18: {
            Arg = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the AdminTemp message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Possible administration actions.
      /// </summary>
      public enum Command {
        /// <summary>
        /// Illegal value.
        /// </summary>
        [pbr::OriginalName("UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Download and run a new version of the bot. `arg` will be a resource
        /// accessible via `ByteStream.Read` to obtain the new bot code.
        /// </summary>
        [pbr::OriginalName("BOT_UPDATE")] BotUpdate = 1,
        /// <summary>
        /// Restart the bot without downloading a new version. `arg` will be a
        /// message to log.
        /// </summary>
        [pbr::OriginalName("BOT_RESTART")] BotRestart = 2,
        /// <summary>
        /// Shut down the bot. `arg` will be a task resource name (similar to those
        /// in tasks.proto) that the bot can use to tell the server that it is
        /// terminating.
        /// </summary>
        [pbr::OriginalName("BOT_TERMINATE")] BotTerminate = 3,
        /// <summary>
        /// Restart the host computer. `arg` will be a message to log.
        /// </summary>
        [pbr::OriginalName("HOST_RESTART")] HostRestart = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// Request message for CreateBotSession.
  /// </summary>
  public sealed partial class CreateBotSessionRequest : pb::IMessage<CreateBotSessionRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreateBotSessionRequest> _parser = new pb::MessageParser<CreateBotSessionRequest>(() => new CreateBotSessionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateBotSessionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.DevTools.RemoteWorkers.V1Test2.BotsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateBotSessionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateBotSessionRequest(CreateBotSessionRequest other) : this() {
      parent_ = other.parent_;
      botSession_ = other.botSession_ != null ? other.botSession_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateBotSessionRequest Clone() {
      return new CreateBotSessionRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// Required. The farm resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bot_session" field.</summary>
    public const int BotSessionFieldNumber = 2;
    private global::Google.DevTools.RemoteWorkers.V1Test2.BotSession botSession_;
    /// <summary>
    /// Required. The bot session to create. Server-assigned fields like name must be unset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.DevTools.RemoteWorkers.V1Test2.BotSession BotSession {
      get { return botSession_; }
      set {
        botSession_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateBotSessionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateBotSessionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (!object.Equals(BotSession, other.BotSession)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (botSession_ != null) hash ^= BotSession.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (botSession_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BotSession);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (botSession_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BotSession);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (botSession_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BotSession);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateBotSessionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.botSession_ != null) {
        if (botSession_ == null) {
          BotSession = new global::Google.DevTools.RemoteWorkers.V1Test2.BotSession();
        }
        BotSession.MergeFrom(other.BotSession);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            if (botSession_ == null) {
              BotSession = new global::Google.DevTools.RemoteWorkers.V1Test2.BotSession();
            }
            input.ReadMessage(BotSession);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            if (botSession_ == null) {
              BotSession = new global::Google.DevTools.RemoteWorkers.V1Test2.BotSession();
            }
            input.ReadMessage(BotSession);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request message for UpdateBotSession.
  /// </summary>
  public sealed partial class UpdateBotSessionRequest : pb::IMessage<UpdateBotSessionRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UpdateBotSessionRequest> _parser = new pb::MessageParser<UpdateBotSessionRequest>(() => new UpdateBotSessionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateBotSessionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.DevTools.RemoteWorkers.V1Test2.BotsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateBotSessionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateBotSessionRequest(UpdateBotSessionRequest other) : this() {
      name_ = other.name_;
      botSession_ = other.botSession_ != null ? other.botSession_.Clone() : null;
      updateMask_ = other.updateMask_ != null ? other.updateMask_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateBotSessionRequest Clone() {
      return new UpdateBotSessionRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Required. The bot session name. Must match bot_session.name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bot_session" field.</summary>
    public const int BotSessionFieldNumber = 2;
    private global::Google.DevTools.RemoteWorkers.V1Test2.BotSession botSession_;
    /// <summary>
    /// Required. The bot session resource to update.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.DevTools.RemoteWorkers.V1Test2.BotSession BotSession {
      get { return botSession_; }
      set {
        botSession_ = value;
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.FieldMask updateMask_;
    /// <summary>
    /// Required. The fields on the bot that should be updated. See the BotSession resource
    /// for which fields are updatable by which caller.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateBotSessionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateBotSessionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(BotSession, other.BotSession)) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (botSession_ != null) hash ^= BotSession.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (botSession_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BotSession);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UpdateMask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (botSession_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BotSession);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UpdateMask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (botSession_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BotSession);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateBotSessionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.botSession_ != null) {
        if (botSession_ == null) {
          BotSession = new global::Google.DevTools.RemoteWorkers.V1Test2.BotSession();
        }
        BotSession.MergeFrom(other.BotSession);
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (botSession_ == null) {
              BotSession = new global::Google.DevTools.RemoteWorkers.V1Test2.BotSession();
            }
            input.ReadMessage(BotSession);
            break;
          }
          case 26: {
            if (updateMask_ == null) {
              UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(UpdateMask);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (botSession_ == null) {
              BotSession = new global::Google.DevTools.RemoteWorkers.V1Test2.BotSession();
            }
            input.ReadMessage(BotSession);
            break;
          }
          case 26: {
            if (updateMask_ == null) {
              UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(UpdateMask);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
