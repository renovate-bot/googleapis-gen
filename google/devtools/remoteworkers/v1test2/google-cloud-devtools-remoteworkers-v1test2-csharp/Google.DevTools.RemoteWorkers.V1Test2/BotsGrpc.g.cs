// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/devtools/remoteworkers/v1test2/bots.proto
// </auto-generated>
// Original file comments:
// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.DevTools.RemoteWorkers.V1Test2 {
  /// <summary>
  /// Design doc: https://goo.gl/oojM5H
  ///
  /// Loosely speaking, the Bots interface monitors a collection of workers (think
  /// of them as "computers" for a moment). This collection is known as a "farm,"
  /// and its purpose is to perform work on behalf of a client.
  ///
  /// Each worker runs a small program known as a "bot" that allows it to be
  /// controlled by the server. This interface contains only methods that are
  /// called by the bots themselves; admin functionality is out of scope for this
  /// interface.
  ///
  /// More precisely, we use the term "worker" to refer to the physical "thing"
  /// running the bot. We use the term "worker," and not "machine" or "computer,"
  /// since a worker may consist of more than one machine - e.g., a computer with
  /// multiple attached devices, or even a cluster of computers, with only one of
  /// them running the bot. Conversely, a single machine may host several bots, in
  /// which case each bot has a "worker" corresponding to the slice of the machine
  /// being managed by that bot.
  ///
  /// The main resource in the Bots interface is not, surprisingly, a Bot - it is a
  /// BotSession, which represents a period of time in which a bot is in continuous
  /// contact with the server (see the BotSession message for more information).
  /// The parent of a bot session can be thought of as an instance of a farm. That
  /// is, one endpoint may be able to manage many farms for many users. For
  /// example, for a farm managed through GCP, the parent resource will typically
  /// take the form "projects/{project_id}". This is referred to below as "the farm
  /// resource."
  /// </summary>
  public static partial class Bots
  {
    static readonly string __ServiceName = "google.devtools.remoteworkers.v1test2.Bots";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.DevTools.RemoteWorkers.V1Test2.CreateBotSessionRequest> __Marshaller_google_devtools_remoteworkers_v1test2_CreateBotSessionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.DevTools.RemoteWorkers.V1Test2.CreateBotSessionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.DevTools.RemoteWorkers.V1Test2.BotSession> __Marshaller_google_devtools_remoteworkers_v1test2_BotSession = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.DevTools.RemoteWorkers.V1Test2.BotSession.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.DevTools.RemoteWorkers.V1Test2.UpdateBotSessionRequest> __Marshaller_google_devtools_remoteworkers_v1test2_UpdateBotSessionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.DevTools.RemoteWorkers.V1Test2.UpdateBotSessionRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.DevTools.RemoteWorkers.V1Test2.CreateBotSessionRequest, global::Google.DevTools.RemoteWorkers.V1Test2.BotSession> __Method_CreateBotSession = new grpc::Method<global::Google.DevTools.RemoteWorkers.V1Test2.CreateBotSessionRequest, global::Google.DevTools.RemoteWorkers.V1Test2.BotSession>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateBotSession",
        __Marshaller_google_devtools_remoteworkers_v1test2_CreateBotSessionRequest,
        __Marshaller_google_devtools_remoteworkers_v1test2_BotSession);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.DevTools.RemoteWorkers.V1Test2.UpdateBotSessionRequest, global::Google.DevTools.RemoteWorkers.V1Test2.BotSession> __Method_UpdateBotSession = new grpc::Method<global::Google.DevTools.RemoteWorkers.V1Test2.UpdateBotSessionRequest, global::Google.DevTools.RemoteWorkers.V1Test2.BotSession>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateBotSession",
        __Marshaller_google_devtools_remoteworkers_v1test2_UpdateBotSessionRequest,
        __Marshaller_google_devtools_remoteworkers_v1test2_BotSession);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.DevTools.RemoteWorkers.V1Test2.BotsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Bots</summary>
    [grpc::BindServiceMethod(typeof(Bots), "BindService")]
    public abstract partial class BotsBase
    {
      /// <summary>
      /// CreateBotSession is called when the bot first joins the farm, and
      /// establishes a session ID to ensure that multiple machines do not register
      /// using the same name accidentally.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.DevTools.RemoteWorkers.V1Test2.BotSession> CreateBotSession(global::Google.DevTools.RemoteWorkers.V1Test2.CreateBotSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// UpdateBotSession must be called periodically by the bot (on a schedule
      /// determined by the server) to let the server know about its status, and to
      /// pick up new lease requests from the server.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.DevTools.RemoteWorkers.V1Test2.BotSession> UpdateBotSession(global::Google.DevTools.RemoteWorkers.V1Test2.UpdateBotSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Bots</summary>
    public partial class BotsClient : grpc::ClientBase<BotsClient>
    {
      /// <summary>Creates a new client for Bots</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public BotsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Bots that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public BotsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected BotsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected BotsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// CreateBotSession is called when the bot first joins the farm, and
      /// establishes a session ID to ensure that multiple machines do not register
      /// using the same name accidentally.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.DevTools.RemoteWorkers.V1Test2.BotSession CreateBotSession(global::Google.DevTools.RemoteWorkers.V1Test2.CreateBotSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateBotSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateBotSession is called when the bot first joins the farm, and
      /// establishes a session ID to ensure that multiple machines do not register
      /// using the same name accidentally.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.DevTools.RemoteWorkers.V1Test2.BotSession CreateBotSession(global::Google.DevTools.RemoteWorkers.V1Test2.CreateBotSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateBotSession, null, options, request);
      }
      /// <summary>
      /// CreateBotSession is called when the bot first joins the farm, and
      /// establishes a session ID to ensure that multiple machines do not register
      /// using the same name accidentally.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.DevTools.RemoteWorkers.V1Test2.BotSession> CreateBotSessionAsync(global::Google.DevTools.RemoteWorkers.V1Test2.CreateBotSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateBotSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateBotSession is called when the bot first joins the farm, and
      /// establishes a session ID to ensure that multiple machines do not register
      /// using the same name accidentally.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.DevTools.RemoteWorkers.V1Test2.BotSession> CreateBotSessionAsync(global::Google.DevTools.RemoteWorkers.V1Test2.CreateBotSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateBotSession, null, options, request);
      }
      /// <summary>
      /// UpdateBotSession must be called periodically by the bot (on a schedule
      /// determined by the server) to let the server know about its status, and to
      /// pick up new lease requests from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.DevTools.RemoteWorkers.V1Test2.BotSession UpdateBotSession(global::Google.DevTools.RemoteWorkers.V1Test2.UpdateBotSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateBotSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateBotSession must be called periodically by the bot (on a schedule
      /// determined by the server) to let the server know about its status, and to
      /// pick up new lease requests from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.DevTools.RemoteWorkers.V1Test2.BotSession UpdateBotSession(global::Google.DevTools.RemoteWorkers.V1Test2.UpdateBotSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateBotSession, null, options, request);
      }
      /// <summary>
      /// UpdateBotSession must be called periodically by the bot (on a schedule
      /// determined by the server) to let the server know about its status, and to
      /// pick up new lease requests from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.DevTools.RemoteWorkers.V1Test2.BotSession> UpdateBotSessionAsync(global::Google.DevTools.RemoteWorkers.V1Test2.UpdateBotSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateBotSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateBotSession must be called periodically by the bot (on a schedule
      /// determined by the server) to let the server know about its status, and to
      /// pick up new lease requests from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.DevTools.RemoteWorkers.V1Test2.BotSession> UpdateBotSessionAsync(global::Google.DevTools.RemoteWorkers.V1Test2.UpdateBotSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateBotSession, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override BotsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new BotsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(BotsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateBotSession, serviceImpl.CreateBotSession)
          .AddMethod(__Method_UpdateBotSession, serviceImpl.UpdateBotSession).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, BotsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateBotSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.DevTools.RemoteWorkers.V1Test2.CreateBotSessionRequest, global::Google.DevTools.RemoteWorkers.V1Test2.BotSession>(serviceImpl.CreateBotSession));
      serviceBinder.AddMethod(__Method_UpdateBotSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.DevTools.RemoteWorkers.V1Test2.UpdateBotSessionRequest, global::Google.DevTools.RemoteWorkers.V1Test2.BotSession>(serviceImpl.UpdateBotSession));
    }

  }
}
#endregion
