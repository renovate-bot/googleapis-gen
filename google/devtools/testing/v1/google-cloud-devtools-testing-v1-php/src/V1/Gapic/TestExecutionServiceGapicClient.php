<?php
/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * Generated by gapic-generator-php from the file
 * https://github.com/google/googleapis/blob/master/google/devtools/testing/v1/test_execution.proto
 * Updates to the above are reflected here through a refresh process.
 */

namespace Google\Devtools\Testing\V1\Gapic;

use Google\ApiCore\ApiException;
use Google\ApiCore\CredentialsWrapper;

use Google\ApiCore\GapicClientTrait;
use Google\ApiCore\RequestParamsHeaderDescriptor;
use Google\ApiCore\RetrySettings;
use Google\ApiCore\Transport\TransportInterface;
use Google\ApiCore\ValidationException;
use Google\Auth\FetchAuthTokenInterface;
use Google\Devtools\Testing\V1\CancelTestMatrixRequest;
use Google\Devtools\Testing\V1\CancelTestMatrixResponse;
use Google\Devtools\Testing\V1\CreateTestMatrixRequest;
use Google\Devtools\Testing\V1\GetTestMatrixRequest;
use Google\Devtools\Testing\V1\TestMatrix;

/**
 * Service Description: A service for requesting test executions and querying their status.
 *
 * This service is part of Firebase Test Lab. To learn about how to use the
 * product, and how to integrate it with your system,
 * visit https://firebase.google.com/docs/test-lab.
 *
 * Each test execution will wait for available capacity. It will then be
 * invoked as described. The test may be invoked multiple times if an
 * infrastructure failure is detected. Results and other files generated by
 * the test will be stored in an external storage system.
 *
 * The TestExecutionService models this behavior using two resource types:
 *
 * - TestMatrix: a group of one or more TestExecutions, built by taking a
 * product of values over a pre-defined set of axes. In the case of Android
 * Tests, for example, device model and OS version are two axes of the matrix.
 *
 * - TestExecution: a single execution of one or more test targets on a
 * single device. These are created automatically when a TestMatrix is
 * created.
 *
 * This service returns any error codes from the canonical error space (i.e.
 * google.rpc.Code). The errors which may be returned are specified on each
 * method. In addition, any method may return UNAVAILABLE or INTERNAL.
 *
 * This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods. Sample code to get started:
 *
 * ```
 * $testExecutionServiceClient = new TestExecutionServiceClient();
 * try {
 *     $response = $testExecutionServiceClient->cancelTestMatrix();
 * } finally {
 *     $testExecutionServiceClient->close();
 * }
 * ```
 */
class TestExecutionServiceGapicClient
{
    use GapicClientTrait;

    /**
     * The name of the service.
     */
    const SERVICE_NAME = 'google.devtools.testing.v1.TestExecutionService';

    /**
     * The default address of the service.
     */
    const SERVICE_ADDRESS = 'testing.googleapis.com';

    /**
     * The default port of the service.
     */
    const DEFAULT_SERVICE_PORT = 443;

    /**
     * The name of the code generator, to be included in the agent header.
     */
    const CODEGEN_NAME = 'gapic';

    /**
     * The default scopes required by the service.
     */
    public static $serviceScopes = [
        'https://www.googleapis.com/auth/cloud-platform',
        'https://www.googleapis.com/auth/cloud-platform.read-only',
    ];

    private static function getClientDefaults()
    {
        return [
            'serviceName' => self::SERVICE_NAME,
            'serviceAddress' => self::SERVICE_ADDRESS . ':' . self::DEFAULT_SERVICE_PORT,
            'clientConfig' => __DIR__ . '/../resources/test_execution_service_client_config.json',
            'descriptorsConfigPath' => __DIR__ . '/../resources/test_execution_service_descriptor_config.php',
            'gcpApiConfigPath' => __DIR__ . '/../resources/test_execution_service_grpc_config.json',
            'credentialsConfig' => [
                'defaultScopes' => self::$serviceScopes,
            ],
            'transportConfig' => [
                'rest' => [
                    'restClientConfigPath' => __DIR__ . '/../resources/test_execution_service_rest_client_config.php',
                ],
            ],
        ];
    }

    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *
     *     @type string $serviceAddress
     *           The address of the API remote host. May optionally include the port, formatted
     *           as "<uri>:<port>". Default 'testing.googleapis.com:443'.
     *     @type string|array|FetchAuthTokenInterface|CredentialsWrapper $credentials
     *           The credentials to be used by the client to authorize API calls. This option
     *           accepts either a path to a credentials file, or a decoded credentials file as a
     *           PHP array.
     *           *Advanced usage*: In addition, this option can also accept a pre-constructed
     *           {@see \Google\Auth\FetchAuthTokenInterface} object or
     *           {@see \Google\ApiCore\CredentialsWrapper} object. Note that when one of these
     *           objects are provided, any settings in $credentialsConfig will be ignored.
     *     @type array $credentialsConfig
     *           Options used to configure credentials, including auth token caching, for the
     *           client. For a full list of supporting configuration options, see
     *           {@see \Google\ApiCore\CredentialsWrapper::build()} .
     *     @type bool $disableRetries
     *           Determines whether or not retries defined by the client configuration should be
     *           disabled. Defaults to `false`.
     *     @type string|array $clientConfig
     *           Client method configuration, including retry settings. This option can be either
     *           a path to a JSON file, or a PHP array containing the decoded JSON data. By
     *           default this settings points to the default client config file, which is
     *           provided in the resources folder.
     *     @type string|TransportInterface $transport
     *           The transport used for executing network requests. May be either the string
     *           `rest` or `grpc`. Defaults to `grpc` if gRPC support is detected on the system.
     *           *Advanced usage*: Additionally, it is possible to pass in an already
     *           instantiated {@see \Google\ApiCore\Transport\TransportInterface} object. Note
     *           that when this object is provided, any settings in $transportConfig, and any
     *           $serviceAddress setting, will be ignored.
     *     @type array $transportConfig
     *           Configuration options that will be used to construct the transport. Options for
     *           each supported transport type should be passed in a key for that transport. For
     *           example:
     *           $transportConfig = [
     *               'grpc' => [...],
     *               'rest' => [...],
     *           ];
     *           See the {@see \Google\ApiCore\Transport\GrpcTransport::build()} and
     *           {@see \Google\ApiCore\Transport\RestTransport::build()} methods for the
     *           supported options.
     *     @type callable $clientCertSource
     *           A callable which returns the client cert as a string. This can be used to
     *           provide a certificate and private key to the transport layer for mTLS.
     * }
     *
     * @throws ValidationException
     */
    public function __construct(array $options = [])
    {
        $clientOptions = $this->buildClientOptions($options);
        $this->setClientOptions($clientOptions);
    }

    /**
     * Cancels unfinished test executions in a test matrix.
     * This call returns immediately and cancellation proceeds asynchronously.
     * If the matrix is already final, this operation will have no effect.
     *
     * May return any of the following canonical error codes:
     *
     * - PERMISSION_DENIED - if the user is not authorized to read project
     * - INVALID_ARGUMENT - if the request is malformed
     * - NOT_FOUND - if the Test Matrix does not exist
     *
     * Sample code:
     * ```
     * $testExecutionServiceClient = new TestExecutionServiceClient();
     * try {
     *     $response = $testExecutionServiceClient->cancelTestMatrix();
     * } finally {
     *     $testExecutionServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $projectId
     *           Cloud project that owns the test.
     *     @type string $testMatrixId
     *           Test matrix that will be canceled.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Devtools\Testing\V1\CancelTestMatrixResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function cancelTestMatrix(array $optionalArgs = [])
    {
        $request = new CancelTestMatrixRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['projectId'])) {
            $request->setProjectId($optionalArgs['projectId']);
            $requestParamHeaders['project_id'] = $optionalArgs['projectId'];
        }

        if (isset($optionalArgs['testMatrixId'])) {
            $request->setTestMatrixId($optionalArgs['testMatrixId']);
            $requestParamHeaders['test_matrix_id'] = $optionalArgs['testMatrixId'];
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('CancelTestMatrix', CancelTestMatrixResponse::class, $optionalArgs, $request)->wait();
    }

    /**
     * Creates and runs a matrix of tests according to the given specifications.
     * Unsupported environments will be returned in the state UNSUPPORTED.
     * A test matrix is limited to use at most 2000 devices in parallel.
     *
     * May return any of the following canonical error codes:
     *
     * - PERMISSION_DENIED - if the user is not authorized to write to project
     * - INVALID_ARGUMENT - if the request is malformed or if the matrix tries
     * to use too many simultaneous devices.
     *
     * Sample code:
     * ```
     * $testExecutionServiceClient = new TestExecutionServiceClient();
     * try {
     *     $response = $testExecutionServiceClient->createTestMatrix();
     * } finally {
     *     $testExecutionServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $projectId
     *           The GCE project under which this job will run.
     *     @type TestMatrix $testMatrix
     *           The matrix of tests that the user wants to run.
     *     @type string $requestId
     *           A string id used to detect duplicated requests.
     *           Ids are automatically scoped to a project, so
     *           users should ensure the ID is unique per-project.
     *           A UUID is recommended.
     *
     *           Optional, but strongly recommended.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Devtools\Testing\V1\TestMatrix
     *
     * @throws ApiException if the remote call fails
     */
    public function createTestMatrix(array $optionalArgs = [])
    {
        $request = new CreateTestMatrixRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['projectId'])) {
            $request->setProjectId($optionalArgs['projectId']);
            $requestParamHeaders['project_id'] = $optionalArgs['projectId'];
        }

        if (isset($optionalArgs['testMatrix'])) {
            $request->setTestMatrix($optionalArgs['testMatrix']);
        }

        if (isset($optionalArgs['requestId'])) {
            $request->setRequestId($optionalArgs['requestId']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('CreateTestMatrix', TestMatrix::class, $optionalArgs, $request)->wait();
    }

    /**
     * Checks the status of a test matrix.
     *
     * May return any of the following canonical error codes:
     *
     * - PERMISSION_DENIED - if the user is not authorized to read project
     * - INVALID_ARGUMENT - if the request is malformed
     * - NOT_FOUND - if the Test Matrix does not exist
     *
     * Sample code:
     * ```
     * $testExecutionServiceClient = new TestExecutionServiceClient();
     * try {
     *     $response = $testExecutionServiceClient->getTestMatrix();
     * } finally {
     *     $testExecutionServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $projectId
     *           Cloud project that owns the test matrix.
     *     @type string $testMatrixId
     *           Unique test matrix id which was assigned by the service.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Devtools\Testing\V1\TestMatrix
     *
     * @throws ApiException if the remote call fails
     */
    public function getTestMatrix(array $optionalArgs = [])
    {
        $request = new GetTestMatrixRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['projectId'])) {
            $request->setProjectId($optionalArgs['projectId']);
            $requestParamHeaders['project_id'] = $optionalArgs['projectId'];
        }

        if (isset($optionalArgs['testMatrixId'])) {
            $request->setTestMatrixId($optionalArgs['testMatrixId']);
            $requestParamHeaders['test_matrix_id'] = $optionalArgs['testMatrixId'];
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('GetTestMatrix', TestMatrix::class, $optionalArgs, $request)->wait();
    }
}
