<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/testing/v1/test_execution.proto

namespace Google\Devtools\Testing\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A test of an android application that explores the application on a virtual
 * or physical Android Device, finding culprits and crashes as it goes.
 * Next tag: 30
 *
 * Generated from protobuf message <code>google.devtools.testing.v1.AndroidRoboTest</code>
 */
class AndroidRoboTest extends \Google\Protobuf\Internal\Message
{
    /**
     * The java package for the application under test.
     * The default value is determined by examining the application's manifest.
     *
     * Generated from protobuf field <code>string app_package_id = 2;</code>
     */
    protected $app_package_id = '';
    /**
     * The initial activity that should be used to start the app.
     *
     * Generated from protobuf field <code>string app_initial_activity = 3;</code>
     */
    protected $app_initial_activity = '';
    /**
     * The max depth of the traversal stack Robo can explore. Needs to be at least
     * 2 to make Robo explore the app beyond the first activity.
     * Default is 50.
     *
     * Generated from protobuf field <code>int32 max_depth = 7 [deprecated = true];</code>
     * @deprecated
     */
    protected $max_depth = 0;
    /**
     * The max number of steps Robo can execute.
     * Default is no limit.
     *
     * Generated from protobuf field <code>int32 max_steps = 8 [deprecated = true];</code>
     * @deprecated
     */
    protected $max_steps = 0;
    /**
     * A set of directives Robo should apply during the crawl.
     * This allows users to customize the crawl. For example, the username and
     * password for a test account can be provided.
     *
     * Generated from protobuf field <code>repeated .google.devtools.testing.v1.RoboDirective robo_directives = 11;</code>
     */
    private $robo_directives;
    /**
     * A JSON file with a sequence of actions Robo should perform as a prologue
     * for the crawl.
     *
     * Generated from protobuf field <code>.google.devtools.testing.v1.FileReference robo_script = 13;</code>
     */
    protected $robo_script = null;
    /**
     * The intents used to launch the app for the crawl.
     * If none are provided, then the main launcher activity is launched.
     * If some are provided, then only those provided are launched (the main
     * launcher activity must be provided explicitly).
     *
     * Generated from protobuf field <code>repeated .google.devtools.testing.v1.RoboStartingIntent starting_intents = 15;</code>
     */
    private $starting_intents;
    protected $app_under_test;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Devtools\Testing\V1\FileReference $app_apk
     *           The APK for the application under test.
     *     @type \Google\Devtools\Testing\V1\AppBundle $app_bundle
     *           A multi-apk app bundle for the application under test.
     *     @type string $app_package_id
     *           The java package for the application under test.
     *           The default value is determined by examining the application's manifest.
     *     @type string $app_initial_activity
     *           The initial activity that should be used to start the app.
     *     @type int $max_depth
     *           The max depth of the traversal stack Robo can explore. Needs to be at least
     *           2 to make Robo explore the app beyond the first activity.
     *           Default is 50.
     *     @type int $max_steps
     *           The max number of steps Robo can execute.
     *           Default is no limit.
     *     @type \Google\Devtools\Testing\V1\RoboDirective[]|\Google\Protobuf\Internal\RepeatedField $robo_directives
     *           A set of directives Robo should apply during the crawl.
     *           This allows users to customize the crawl. For example, the username and
     *           password for a test account can be provided.
     *     @type \Google\Devtools\Testing\V1\FileReference $robo_script
     *           A JSON file with a sequence of actions Robo should perform as a prologue
     *           for the crawl.
     *     @type \Google\Devtools\Testing\V1\RoboStartingIntent[]|\Google\Protobuf\Internal\RepeatedField $starting_intents
     *           The intents used to launch the app for the crawl.
     *           If none are provided, then the main launcher activity is launched.
     *           If some are provided, then only those provided are launched (the main
     *           launcher activity must be provided explicitly).
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Devtools\Testing\V1\TestExecution::initOnce();
        parent::__construct($data);
    }

    /**
     * The APK for the application under test.
     *
     * Generated from protobuf field <code>.google.devtools.testing.v1.FileReference app_apk = 1;</code>
     * @return \Google\Devtools\Testing\V1\FileReference|null
     */
    public function getAppApk()
    {
        return $this->readOneof(1);
    }

    public function hasAppApk()
    {
        return $this->hasOneof(1);
    }

    /**
     * The APK for the application under test.
     *
     * Generated from protobuf field <code>.google.devtools.testing.v1.FileReference app_apk = 1;</code>
     * @param \Google\Devtools\Testing\V1\FileReference $var
     * @return $this
     */
    public function setAppApk($var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Testing\V1\FileReference::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * A multi-apk app bundle for the application under test.
     *
     * Generated from protobuf field <code>.google.devtools.testing.v1.AppBundle app_bundle = 16;</code>
     * @return \Google\Devtools\Testing\V1\AppBundle|null
     */
    public function getAppBundle()
    {
        return $this->readOneof(16);
    }

    public function hasAppBundle()
    {
        return $this->hasOneof(16);
    }

    /**
     * A multi-apk app bundle for the application under test.
     *
     * Generated from protobuf field <code>.google.devtools.testing.v1.AppBundle app_bundle = 16;</code>
     * @param \Google\Devtools\Testing\V1\AppBundle $var
     * @return $this
     */
    public function setAppBundle($var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Testing\V1\AppBundle::class);
        $this->writeOneof(16, $var);

        return $this;
    }

    /**
     * The java package for the application under test.
     * The default value is determined by examining the application's manifest.
     *
     * Generated from protobuf field <code>string app_package_id = 2;</code>
     * @return string
     */
    public function getAppPackageId()
    {
        return $this->app_package_id;
    }

    /**
     * The java package for the application under test.
     * The default value is determined by examining the application's manifest.
     *
     * Generated from protobuf field <code>string app_package_id = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setAppPackageId($var)
    {
        GPBUtil::checkString($var, True);
        $this->app_package_id = $var;

        return $this;
    }

    /**
     * The initial activity that should be used to start the app.
     *
     * Generated from protobuf field <code>string app_initial_activity = 3;</code>
     * @return string
     */
    public function getAppInitialActivity()
    {
        return $this->app_initial_activity;
    }

    /**
     * The initial activity that should be used to start the app.
     *
     * Generated from protobuf field <code>string app_initial_activity = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setAppInitialActivity($var)
    {
        GPBUtil::checkString($var, True);
        $this->app_initial_activity = $var;

        return $this;
    }

    /**
     * The max depth of the traversal stack Robo can explore. Needs to be at least
     * 2 to make Robo explore the app beyond the first activity.
     * Default is 50.
     *
     * Generated from protobuf field <code>int32 max_depth = 7 [deprecated = true];</code>
     * @return int
     * @deprecated
     */
    public function getMaxDepth()
    {
        @trigger_error('max_depth is deprecated.', E_USER_DEPRECATED);
        return $this->max_depth;
    }

    /**
     * The max depth of the traversal stack Robo can explore. Needs to be at least
     * 2 to make Robo explore the app beyond the first activity.
     * Default is 50.
     *
     * Generated from protobuf field <code>int32 max_depth = 7 [deprecated = true];</code>
     * @param int $var
     * @return $this
     * @deprecated
     */
    public function setMaxDepth($var)
    {
        @trigger_error('max_depth is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkInt32($var);
        $this->max_depth = $var;

        return $this;
    }

    /**
     * The max number of steps Robo can execute.
     * Default is no limit.
     *
     * Generated from protobuf field <code>int32 max_steps = 8 [deprecated = true];</code>
     * @return int
     * @deprecated
     */
    public function getMaxSteps()
    {
        @trigger_error('max_steps is deprecated.', E_USER_DEPRECATED);
        return $this->max_steps;
    }

    /**
     * The max number of steps Robo can execute.
     * Default is no limit.
     *
     * Generated from protobuf field <code>int32 max_steps = 8 [deprecated = true];</code>
     * @param int $var
     * @return $this
     * @deprecated
     */
    public function setMaxSteps($var)
    {
        @trigger_error('max_steps is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkInt32($var);
        $this->max_steps = $var;

        return $this;
    }

    /**
     * A set of directives Robo should apply during the crawl.
     * This allows users to customize the crawl. For example, the username and
     * password for a test account can be provided.
     *
     * Generated from protobuf field <code>repeated .google.devtools.testing.v1.RoboDirective robo_directives = 11;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getRoboDirectives()
    {
        return $this->robo_directives;
    }

    /**
     * A set of directives Robo should apply during the crawl.
     * This allows users to customize the crawl. For example, the username and
     * password for a test account can be provided.
     *
     * Generated from protobuf field <code>repeated .google.devtools.testing.v1.RoboDirective robo_directives = 11;</code>
     * @param \Google\Devtools\Testing\V1\RoboDirective[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setRoboDirectives($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Devtools\Testing\V1\RoboDirective::class);
        $this->robo_directives = $arr;

        return $this;
    }

    /**
     * A JSON file with a sequence of actions Robo should perform as a prologue
     * for the crawl.
     *
     * Generated from protobuf field <code>.google.devtools.testing.v1.FileReference robo_script = 13;</code>
     * @return \Google\Devtools\Testing\V1\FileReference|null
     */
    public function getRoboScript()
    {
        return $this->robo_script;
    }

    public function hasRoboScript()
    {
        return isset($this->robo_script);
    }

    public function clearRoboScript()
    {
        unset($this->robo_script);
    }

    /**
     * A JSON file with a sequence of actions Robo should perform as a prologue
     * for the crawl.
     *
     * Generated from protobuf field <code>.google.devtools.testing.v1.FileReference robo_script = 13;</code>
     * @param \Google\Devtools\Testing\V1\FileReference $var
     * @return $this
     */
    public function setRoboScript($var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Testing\V1\FileReference::class);
        $this->robo_script = $var;

        return $this;
    }

    /**
     * The intents used to launch the app for the crawl.
     * If none are provided, then the main launcher activity is launched.
     * If some are provided, then only those provided are launched (the main
     * launcher activity must be provided explicitly).
     *
     * Generated from protobuf field <code>repeated .google.devtools.testing.v1.RoboStartingIntent starting_intents = 15;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getStartingIntents()
    {
        return $this->starting_intents;
    }

    /**
     * The intents used to launch the app for the crawl.
     * If none are provided, then the main launcher activity is launched.
     * If some are provided, then only those provided are launched (the main
     * launcher activity must be provided explicitly).
     *
     * Generated from protobuf field <code>repeated .google.devtools.testing.v1.RoboStartingIntent starting_intents = 15;</code>
     * @param \Google\Devtools\Testing\V1\RoboStartingIntent[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setStartingIntents($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Devtools\Testing\V1\RoboStartingIntent::class);
        $this->starting_intents = $arr;

        return $this;
    }

    /**
     * @return string
     */
    public function getAppUnderTest()
    {
        return $this->whichOneof("app_under_test");
    }

}

