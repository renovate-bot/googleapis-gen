<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/testing/v1/test_execution.proto

namespace Google\Devtools\Testing\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A test of an Android application that can control an Android component
 * independently of its normal lifecycle.
 * Android instrumentation tests run an application APK and test APK inside the
 * same process on a virtual or physical AndroidDevice.  They also specify
 * a test runner class, such as com.google.GoogleTestRunner, which can vary
 * on the specific instrumentation framework chosen.
 * See <http://developer.android.com/tools/testing/testing_android.html> for
 * more information on types of Android tests.
 *
 * Generated from protobuf message <code>google.devtools.testing.v1.AndroidInstrumentationTest</code>
 */
class AndroidInstrumentationTest extends \Google\Protobuf\Internal\Message
{
    /**
     * Required. The APK containing the test code to be executed.
     *
     * Generated from protobuf field <code>.google.devtools.testing.v1.FileReference test_apk = 2;</code>
     */
    protected $test_apk = null;
    /**
     * The java package for the application under test.
     * The default value is determined by examining the application's manifest.
     *
     * Generated from protobuf field <code>string app_package_id = 3;</code>
     */
    protected $app_package_id = '';
    /**
     * The java package for the test to be executed.
     * The default value is determined by examining the application's manifest.
     *
     * Generated from protobuf field <code>string test_package_id = 4;</code>
     */
    protected $test_package_id = '';
    /**
     * The InstrumentationTestRunner class.
     * The default value is determined by examining the application's manifest.
     *
     * Generated from protobuf field <code>string test_runner_class = 5;</code>
     */
    protected $test_runner_class = '';
    /**
     * Each target must be fully qualified with the package name or class name,
     * in one of these formats:
     *  - "package package_name"
     *  - "class package_name.class_name"
     *  - "class package_name.class_name#method_name"
     * If empty, all targets in the module will be run.
     *
     * Generated from protobuf field <code>repeated string test_targets = 6;</code>
     */
    private $test_targets;
    /**
     * The option of whether running each test within its own invocation of
     * instrumentation with Android Test Orchestrator or not.
     * ** Orchestrator is only compatible with AndroidJUnitRunner version 1.0 or
     * higher! **
     * Orchestrator offers the following benefits:
     *  - No shared state
     *  - Crashes are isolated
     *  - Logs are scoped per test
     * See
     * <https://developer.android.com/training/testing/junit-runner.html#using-android-test-orchestrator>
     * for more information about Android Test Orchestrator.
     * If not set, the test will be run without the orchestrator.
     *
     * Generated from protobuf field <code>.google.devtools.testing.v1.OrchestratorOption orchestrator_option = 7;</code>
     */
    protected $orchestrator_option = 0;
    /**
     * The option to run tests in multiple shards in parallel.
     *
     * Generated from protobuf field <code>.google.devtools.testing.v1.ShardingOption sharding_option = 9;</code>
     */
    protected $sharding_option = null;
    protected $app_under_test;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Devtools\Testing\V1\FileReference $app_apk
     *           The APK for the application under test.
     *     @type \Google\Devtools\Testing\V1\AppBundle $app_bundle
     *           A multi-apk app bundle for the application under test.
     *     @type \Google\Devtools\Testing\V1\FileReference $test_apk
     *           Required. The APK containing the test code to be executed.
     *     @type string $app_package_id
     *           The java package for the application under test.
     *           The default value is determined by examining the application's manifest.
     *     @type string $test_package_id
     *           The java package for the test to be executed.
     *           The default value is determined by examining the application's manifest.
     *     @type string $test_runner_class
     *           The InstrumentationTestRunner class.
     *           The default value is determined by examining the application's manifest.
     *     @type string[]|\Google\Protobuf\Internal\RepeatedField $test_targets
     *           Each target must be fully qualified with the package name or class name,
     *           in one of these formats:
     *            - "package package_name"
     *            - "class package_name.class_name"
     *            - "class package_name.class_name#method_name"
     *           If empty, all targets in the module will be run.
     *     @type int $orchestrator_option
     *           The option of whether running each test within its own invocation of
     *           instrumentation with Android Test Orchestrator or not.
     *           ** Orchestrator is only compatible with AndroidJUnitRunner version 1.0 or
     *           higher! **
     *           Orchestrator offers the following benefits:
     *            - No shared state
     *            - Crashes are isolated
     *            - Logs are scoped per test
     *           See
     *           <https://developer.android.com/training/testing/junit-runner.html#using-android-test-orchestrator>
     *           for more information about Android Test Orchestrator.
     *           If not set, the test will be run without the orchestrator.
     *     @type \Google\Devtools\Testing\V1\ShardingOption $sharding_option
     *           The option to run tests in multiple shards in parallel.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Devtools\Testing\V1\TestExecution::initOnce();
        parent::__construct($data);
    }

    /**
     * The APK for the application under test.
     *
     * Generated from protobuf field <code>.google.devtools.testing.v1.FileReference app_apk = 1;</code>
     * @return \Google\Devtools\Testing\V1\FileReference|null
     */
    public function getAppApk()
    {
        return $this->readOneof(1);
    }

    public function hasAppApk()
    {
        return $this->hasOneof(1);
    }

    /**
     * The APK for the application under test.
     *
     * Generated from protobuf field <code>.google.devtools.testing.v1.FileReference app_apk = 1;</code>
     * @param \Google\Devtools\Testing\V1\FileReference $var
     * @return $this
     */
    public function setAppApk($var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Testing\V1\FileReference::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * A multi-apk app bundle for the application under test.
     *
     * Generated from protobuf field <code>.google.devtools.testing.v1.AppBundle app_bundle = 8;</code>
     * @return \Google\Devtools\Testing\V1\AppBundle|null
     */
    public function getAppBundle()
    {
        return $this->readOneof(8);
    }

    public function hasAppBundle()
    {
        return $this->hasOneof(8);
    }

    /**
     * A multi-apk app bundle for the application under test.
     *
     * Generated from protobuf field <code>.google.devtools.testing.v1.AppBundle app_bundle = 8;</code>
     * @param \Google\Devtools\Testing\V1\AppBundle $var
     * @return $this
     */
    public function setAppBundle($var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Testing\V1\AppBundle::class);
        $this->writeOneof(8, $var);

        return $this;
    }

    /**
     * Required. The APK containing the test code to be executed.
     *
     * Generated from protobuf field <code>.google.devtools.testing.v1.FileReference test_apk = 2;</code>
     * @return \Google\Devtools\Testing\V1\FileReference|null
     */
    public function getTestApk()
    {
        return $this->test_apk;
    }

    public function hasTestApk()
    {
        return isset($this->test_apk);
    }

    public function clearTestApk()
    {
        unset($this->test_apk);
    }

    /**
     * Required. The APK containing the test code to be executed.
     *
     * Generated from protobuf field <code>.google.devtools.testing.v1.FileReference test_apk = 2;</code>
     * @param \Google\Devtools\Testing\V1\FileReference $var
     * @return $this
     */
    public function setTestApk($var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Testing\V1\FileReference::class);
        $this->test_apk = $var;

        return $this;
    }

    /**
     * The java package for the application under test.
     * The default value is determined by examining the application's manifest.
     *
     * Generated from protobuf field <code>string app_package_id = 3;</code>
     * @return string
     */
    public function getAppPackageId()
    {
        return $this->app_package_id;
    }

    /**
     * The java package for the application under test.
     * The default value is determined by examining the application's manifest.
     *
     * Generated from protobuf field <code>string app_package_id = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setAppPackageId($var)
    {
        GPBUtil::checkString($var, True);
        $this->app_package_id = $var;

        return $this;
    }

    /**
     * The java package for the test to be executed.
     * The default value is determined by examining the application's manifest.
     *
     * Generated from protobuf field <code>string test_package_id = 4;</code>
     * @return string
     */
    public function getTestPackageId()
    {
        return $this->test_package_id;
    }

    /**
     * The java package for the test to be executed.
     * The default value is determined by examining the application's manifest.
     *
     * Generated from protobuf field <code>string test_package_id = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setTestPackageId($var)
    {
        GPBUtil::checkString($var, True);
        $this->test_package_id = $var;

        return $this;
    }

    /**
     * The InstrumentationTestRunner class.
     * The default value is determined by examining the application's manifest.
     *
     * Generated from protobuf field <code>string test_runner_class = 5;</code>
     * @return string
     */
    public function getTestRunnerClass()
    {
        return $this->test_runner_class;
    }

    /**
     * The InstrumentationTestRunner class.
     * The default value is determined by examining the application's manifest.
     *
     * Generated from protobuf field <code>string test_runner_class = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setTestRunnerClass($var)
    {
        GPBUtil::checkString($var, True);
        $this->test_runner_class = $var;

        return $this;
    }

    /**
     * Each target must be fully qualified with the package name or class name,
     * in one of these formats:
     *  - "package package_name"
     *  - "class package_name.class_name"
     *  - "class package_name.class_name#method_name"
     * If empty, all targets in the module will be run.
     *
     * Generated from protobuf field <code>repeated string test_targets = 6;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getTestTargets()
    {
        return $this->test_targets;
    }

    /**
     * Each target must be fully qualified with the package name or class name,
     * in one of these formats:
     *  - "package package_name"
     *  - "class package_name.class_name"
     *  - "class package_name.class_name#method_name"
     * If empty, all targets in the module will be run.
     *
     * Generated from protobuf field <code>repeated string test_targets = 6;</code>
     * @param string[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setTestTargets($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->test_targets = $arr;

        return $this;
    }

    /**
     * The option of whether running each test within its own invocation of
     * instrumentation with Android Test Orchestrator or not.
     * ** Orchestrator is only compatible with AndroidJUnitRunner version 1.0 or
     * higher! **
     * Orchestrator offers the following benefits:
     *  - No shared state
     *  - Crashes are isolated
     *  - Logs are scoped per test
     * See
     * <https://developer.android.com/training/testing/junit-runner.html#using-android-test-orchestrator>
     * for more information about Android Test Orchestrator.
     * If not set, the test will be run without the orchestrator.
     *
     * Generated from protobuf field <code>.google.devtools.testing.v1.OrchestratorOption orchestrator_option = 7;</code>
     * @return int
     */
    public function getOrchestratorOption()
    {
        return $this->orchestrator_option;
    }

    /**
     * The option of whether running each test within its own invocation of
     * instrumentation with Android Test Orchestrator or not.
     * ** Orchestrator is only compatible with AndroidJUnitRunner version 1.0 or
     * higher! **
     * Orchestrator offers the following benefits:
     *  - No shared state
     *  - Crashes are isolated
     *  - Logs are scoped per test
     * See
     * <https://developer.android.com/training/testing/junit-runner.html#using-android-test-orchestrator>
     * for more information about Android Test Orchestrator.
     * If not set, the test will be run without the orchestrator.
     *
     * Generated from protobuf field <code>.google.devtools.testing.v1.OrchestratorOption orchestrator_option = 7;</code>
     * @param int $var
     * @return $this
     */
    public function setOrchestratorOption($var)
    {
        GPBUtil::checkEnum($var, \Google\Devtools\Testing\V1\OrchestratorOption::class);
        $this->orchestrator_option = $var;

        return $this;
    }

    /**
     * The option to run tests in multiple shards in parallel.
     *
     * Generated from protobuf field <code>.google.devtools.testing.v1.ShardingOption sharding_option = 9;</code>
     * @return \Google\Devtools\Testing\V1\ShardingOption|null
     */
    public function getShardingOption()
    {
        return $this->sharding_option;
    }

    public function hasShardingOption()
    {
        return isset($this->sharding_option);
    }

    public function clearShardingOption()
    {
        unset($this->sharding_option);
    }

    /**
     * The option to run tests in multiple shards in parallel.
     *
     * Generated from protobuf field <code>.google.devtools.testing.v1.ShardingOption sharding_option = 9;</code>
     * @param \Google\Devtools\Testing\V1\ShardingOption $var
     * @return $this
     */
    public function setShardingOption($var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Testing\V1\ShardingOption::class);
        $this->sharding_option = $var;

        return $this;
    }

    /**
     * @return string
     */
    public function getAppUnderTest()
    {
        return $this->whichOneof("app_under_test");
    }

}

