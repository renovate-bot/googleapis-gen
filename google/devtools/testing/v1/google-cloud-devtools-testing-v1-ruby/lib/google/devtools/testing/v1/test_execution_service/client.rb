# frozen_string_literal: true

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/cloud/errors"
require "google/devtools/testing/v1/test_execution_pb"

module Google
  module Devtools
    module Testing
      module V1
        module TestExecutionService
          ##
          # Client for the TestExecutionService service.
          #
          # A service for requesting test executions and querying their status.
          #
          # This service is part of Firebase Test Lab. To learn about how to use the
          # product, and how to integrate it with your system,
          # visit https://firebase.google.com/docs/test-lab.
          #
          # Each test execution will wait for available capacity. It will then be
          # invoked as described. The test may be invoked multiple times if an
          # infrastructure failure is detected. Results and other files generated by
          # the test will be stored in an external storage system.
          #
          # The TestExecutionService models this behavior using two resource types:
          #
          # - TestMatrix: a group of one or more TestExecutions, built by taking a
          #   product of values over a pre-defined set of axes. In the case of Android
          #   Tests, for example, device model and OS version are two axes of the matrix.
          #
          # - TestExecution: a single execution of one or more test targets on a
          #   single device. These are created automatically when a TestMatrix is
          #   created.
          #
          # This service returns any error codes from the canonical error space (i.e.
          # google.rpc.Code). The errors which may be returned are specified on each
          # method. In addition, any method may return UNAVAILABLE or INTERNAL.
          #
          class Client
            # @private
            attr_reader :test_execution_service_stub

            ##
            # Configure the TestExecutionService Client class.
            #
            # See {::Google::Devtools::Testing::V1::TestExecutionService::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @example
            #
            #   # Modify the configuration for all TestExecutionService clients
            #   ::Google::Devtools::Testing::V1::TestExecutionService::Client.configure do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def self.configure
              @configure ||= begin
                namespace = ["Google", "Devtools", "Testing", "V1"]
                parent_config = while namespace.any?
                                  parent_name = namespace.join "::"
                                  parent_const = const_get parent_name
                                  break parent_const.configure if parent_const.respond_to? :configure
                                  namespace.pop
                                end
                default_config = Client::Configuration.new parent_config

                default_config.timeout = 60.0

                default_config
              end
              yield @configure if block_given?
              @configure
            end

            ##
            # Configure the TestExecutionService Client instance.
            #
            # The configuration is set to the derived mode, meaning that values can be changed,
            # but structural changes (adding new fields, etc.) are not allowed. Structural changes
            # should be made on {Client.configure}.
            #
            # See {::Google::Devtools::Testing::V1::TestExecutionService::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def configure
              yield @config if block_given?
              @config
            end

            ##
            # Create a new TestExecutionService client object.
            #
            # @example
            #
            #   # Create a client using the default configuration
            #   client = ::Google::Devtools::Testing::V1::TestExecutionService::Client.new
            #
            #   # Create a client using a custom configuration
            #   client = ::Google::Devtools::Testing::V1::TestExecutionService::Client.new do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the TestExecutionService client.
            # @yieldparam config [Client::Configuration]
            #
            def initialize
              # These require statements are intentionally placed here to initialize
              # the gRPC module only when it's required.
              # See https://github.com/googleapis/toolkit/issues/446
              require "gapic/grpc"
              require "google/devtools/testing/v1/test_execution_services_pb"

              # Create the configuration object
              @config = Configuration.new Client.configure

              # Yield the configuration if needed
              yield @config if block_given?

              # Create credentials
              credentials = @config.credentials
              # Use self-signed JWT if the endpoint is unchanged from default,
              # but only if the default endpoint does not have a region prefix.
              enable_self_signed_jwt = @config.endpoint == Client.configure.endpoint &&
                                       !@config.endpoint.split(".").first.include?("-")
              credentials ||= Credentials.default scope: @config.scope,
                                                  enable_self_signed_jwt: enable_self_signed_jwt
              if credentials.is_a?(::String) || credentials.is_a?(::Hash)
                credentials = Credentials.new credentials, scope: @config.scope
              end
              @quota_project_id = @config.quota_project
              @quota_project_id ||= credentials.quota_project_id if credentials.respond_to? :quota_project_id

              @test_execution_service_stub = ::Gapic::ServiceStub.new(
                ::Google::Devtools::Testing::V1::TestExecutionService::Stub,
                credentials:  credentials,
                endpoint:     @config.endpoint,
                channel_args: @config.channel_args,
                interceptors: @config.interceptors
              )
            end

            # Service calls

            ##
            # Creates and runs a matrix of tests according to the given specifications.
            # Unsupported environments will be returned in the state UNSUPPORTED.
            # A test matrix is limited to use at most 2000 devices in parallel.
            #
            # May return any of the following canonical error codes:
            #
            # - PERMISSION_DENIED - if the user is not authorized to write to project
            # - INVALID_ARGUMENT - if the request is malformed or if the matrix tries
            #                      to use too many simultaneous devices.
            #
            # @overload create_test_matrix(request, options = nil)
            #   Pass arguments to `create_test_matrix` via a request object, either of type
            #   {::Google::Devtools::Testing::V1::CreateTestMatrixRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Devtools::Testing::V1::CreateTestMatrixRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload create_test_matrix(project_id: nil, test_matrix: nil, request_id: nil)
            #   Pass arguments to `create_test_matrix` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param project_id [::String]
            #     The GCE project under which this job will run.
            #   @param test_matrix [::Google::Devtools::Testing::V1::TestMatrix, ::Hash]
            #     The matrix of tests that the user wants to run.
            #   @param request_id [::String]
            #     A string id used to detect duplicated requests.
            #     Ids are automatically scoped to a project, so
            #     users should ensure the ID is unique per-project.
            #     A UUID is recommended.
            #
            #     Optional, but strongly recommended.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Devtools::Testing::V1::TestMatrix]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Devtools::Testing::V1::TestMatrix]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def create_test_matrix request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Devtools::Testing::V1::CreateTestMatrixRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.create_test_matrix.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Devtools::Testing::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.project_id
                header_params["project_id"] = request.project_id
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.create_test_matrix.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.create_test_matrix.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @test_execution_service_stub.call_rpc :create_test_matrix, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Checks the status of a test matrix.
            #
            # May return any of the following canonical error codes:
            #
            # - PERMISSION_DENIED - if the user is not authorized to read project
            # - INVALID_ARGUMENT - if the request is malformed
            # - NOT_FOUND - if the Test Matrix does not exist
            #
            # @overload get_test_matrix(request, options = nil)
            #   Pass arguments to `get_test_matrix` via a request object, either of type
            #   {::Google::Devtools::Testing::V1::GetTestMatrixRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Devtools::Testing::V1::GetTestMatrixRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_test_matrix(project_id: nil, test_matrix_id: nil)
            #   Pass arguments to `get_test_matrix` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param project_id [::String]
            #     Cloud project that owns the test matrix.
            #   @param test_matrix_id [::String]
            #     Unique test matrix id which was assigned by the service.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Devtools::Testing::V1::TestMatrix]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Devtools::Testing::V1::TestMatrix]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def get_test_matrix request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Devtools::Testing::V1::GetTestMatrixRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_test_matrix.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Devtools::Testing::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.project_id
                header_params["project_id"] = request.project_id
              end
              if request.test_matrix_id
                header_params["test_matrix_id"] = request.test_matrix_id
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get_test_matrix.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_test_matrix.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @test_execution_service_stub.call_rpc :get_test_matrix, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Cancels unfinished test executions in a test matrix.
            # This call returns immediately and cancellation proceeds asynchronously.
            # If the matrix is already final, this operation will have no effect.
            #
            # May return any of the following canonical error codes:
            #
            # - PERMISSION_DENIED - if the user is not authorized to read project
            # - INVALID_ARGUMENT - if the request is malformed
            # - NOT_FOUND - if the Test Matrix does not exist
            #
            # @overload cancel_test_matrix(request, options = nil)
            #   Pass arguments to `cancel_test_matrix` via a request object, either of type
            #   {::Google::Devtools::Testing::V1::CancelTestMatrixRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Devtools::Testing::V1::CancelTestMatrixRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload cancel_test_matrix(project_id: nil, test_matrix_id: nil)
            #   Pass arguments to `cancel_test_matrix` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param project_id [::String]
            #     Cloud project that owns the test.
            #   @param test_matrix_id [::String]
            #     Test matrix that will be canceled.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Devtools::Testing::V1::CancelTestMatrixResponse]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Devtools::Testing::V1::CancelTestMatrixResponse]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def cancel_test_matrix request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Devtools::Testing::V1::CancelTestMatrixRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.cancel_test_matrix.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Devtools::Testing::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.project_id
                header_params["project_id"] = request.project_id
              end
              if request.test_matrix_id
                header_params["test_matrix_id"] = request.test_matrix_id
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.cancel_test_matrix.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.cancel_test_matrix.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @test_execution_service_stub.call_rpc :cancel_test_matrix, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Configuration class for the TestExecutionService API.
            #
            # This class represents the configuration for TestExecutionService,
            # providing control over timeouts, retry behavior, logging, transport
            # parameters, and other low-level controls. Certain parameters can also be
            # applied individually to specific RPCs. See
            # {::Google::Devtools::Testing::V1::TestExecutionService::Client::Configuration::Rpcs}
            # for a list of RPCs that can be configured independently.
            #
            # Configuration can be applied globally to all clients, or to a single client
            # on construction.
            #
            # @example
            #
            #   # Modify the global config, setting the timeout for
            #   # create_test_matrix to 20 seconds,
            #   # and all remaining timeouts to 10 seconds.
            #   ::Google::Devtools::Testing::V1::TestExecutionService::Client.configure do |config|
            #     config.timeout = 10.0
            #     config.rpcs.create_test_matrix.timeout = 20.0
            #   end
            #
            #   # Apply the above configuration only to a new client.
            #   client = ::Google::Devtools::Testing::V1::TestExecutionService::Client.new do |config|
            #     config.timeout = 10.0
            #     config.rpcs.create_test_matrix.timeout = 20.0
            #   end
            #
            # @!attribute [rw] endpoint
            #   The hostname or hostname:port of the service endpoint.
            #   Defaults to `"testing.googleapis.com"`.
            #   @return [::String]
            # @!attribute [rw] credentials
            #   Credentials to send with calls. You may provide any of the following types:
            #    *  (`String`) The path to a service account key file in JSON format
            #    *  (`Hash`) A service account key as a Hash
            #    *  (`Google::Auth::Credentials`) A googleauth credentials object
            #       (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
            #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
            #       (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
            #    *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
            #    *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
            #    *  (`nil`) indicating no credentials
            #   @return [::Object]
            # @!attribute [rw] scope
            #   The OAuth scopes
            #   @return [::Array<::String>]
            # @!attribute [rw] lib_name
            #   The library name as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] lib_version
            #   The library version as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] channel_args
            #   Extra parameters passed to the gRPC channel. Note: this is ignored if a
            #   `GRPC::Core::Channel` object is provided as the credential.
            #   @return [::Hash]
            # @!attribute [rw] interceptors
            #   An array of interceptors that are run before calls are executed.
            #   @return [::Array<::GRPC::ClientInterceptor>]
            # @!attribute [rw] timeout
            #   The call timeout in seconds.
            #   @return [::Numeric]
            # @!attribute [rw] metadata
            #   Additional gRPC headers to be sent with the call.
            #   @return [::Hash{::Symbol=>::String}]
            # @!attribute [rw] retry_policy
            #   The retry policy. The value is a hash with the following keys:
            #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
            #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
            #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
            #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
            #       trigger a retry.
            #   @return [::Hash]
            # @!attribute [rw] quota_project
            #   A separate project against which to charge quota.
            #   @return [::String]
            #
            class Configuration
              extend ::Gapic::Config

              config_attr :endpoint,      "testing.googleapis.com", ::String
              config_attr :credentials,   nil do |value|
                allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
                allowed += [::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials] if defined? ::GRPC
                allowed.any? { |klass| klass === value }
              end
              config_attr :scope,         nil, ::String, ::Array, nil
              config_attr :lib_name,      nil, ::String, nil
              config_attr :lib_version,   nil, ::String, nil
              config_attr(:channel_args,  { "grpc.service_config_disable_resolution" => 1 }, ::Hash, nil)
              config_attr :interceptors,  nil, ::Array, nil
              config_attr :timeout,       nil, ::Numeric, nil
              config_attr :metadata,      nil, ::Hash, nil
              config_attr :retry_policy,  nil, ::Hash, ::Proc, nil
              config_attr :quota_project, nil, ::String, nil

              # @private
              def initialize parent_config = nil
                @parent_config = parent_config unless parent_config.nil?

                yield self if block_given?
              end

              ##
              # Configurations for individual RPCs
              # @return [Rpcs]
              #
              def rpcs
                @rpcs ||= begin
                  parent_rpcs = nil
                  parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config.respond_to?(:rpcs)
                  Rpcs.new parent_rpcs
                end
              end

              ##
              # Configuration RPC class for the TestExecutionService API.
              #
              # Includes fields providing the configuration for each RPC in this service.
              # Each configuration object is of type `Gapic::Config::Method` and includes
              # the following configuration fields:
              #
              #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
              #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
              #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
              #     include the following keys:
              #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
              #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
              #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
              #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
              #         trigger a retry.
              #
              class Rpcs
                ##
                # RPC-specific configuration for `create_test_matrix`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :create_test_matrix
                ##
                # RPC-specific configuration for `get_test_matrix`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_test_matrix
                ##
                # RPC-specific configuration for `cancel_test_matrix`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :cancel_test_matrix

                # @private
                def initialize parent_rpcs = nil
                  create_test_matrix_config = parent_rpcs.create_test_matrix if parent_rpcs.respond_to? :create_test_matrix
                  @create_test_matrix = ::Gapic::Config::Method.new create_test_matrix_config
                  get_test_matrix_config = parent_rpcs.get_test_matrix if parent_rpcs.respond_to? :get_test_matrix
                  @get_test_matrix = ::Gapic::Config::Method.new get_test_matrix_config
                  cancel_test_matrix_config = parent_rpcs.cancel_test_matrix if parent_rpcs.respond_to? :cancel_test_matrix
                  @cancel_test_matrix = ::Gapic::Config::Method.new cancel_test_matrix_config

                  yield self if block_given?
                end
              end
            end
          end
        end
      end
    end
  end
end
