# -*- coding: utf-8 -*-
# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
from collections import OrderedDict
import functools
import re
from typing import Dict, Sequence, Tuple, Type, Union
import pkg_resources

from google.api_core.client_options import ClientOptions # type: ignore
from google.api_core import exceptions as core_exceptions  # type: ignore
from google.api_core import gapic_v1                   # type: ignore
from google.api_core import retry as retries           # type: ignore
from google.auth import credentials as ga_credentials   # type: ignore
from google.oauth2 import service_account              # type: ignore

OptionalRetry = Union[retries.Retry, object]

from google.devtools.testing_v1.types import test_execution
from google.protobuf import timestamp_pb2  # type: ignore
from .transports.base import TestExecutionServiceTransport, DEFAULT_CLIENT_INFO
from .transports.grpc_asyncio import TestExecutionServiceGrpcAsyncIOTransport
from .client import TestExecutionServiceClient


class TestExecutionServiceAsyncClient:
    """A service for requesting test executions and querying their
    status.
    This service is part of Firebase Test Lab. To learn about how to
    use the product, and how to integrate it with your system,
    visit https://firebase.google.com/docs/test-lab.

    Each test execution will wait for available capacity. It will
    then be invoked as described. The test may be invoked multiple
    times if an infrastructure failure is detected. Results and
    other files generated by the test will be stored in an external
    storage system.
    The TestExecutionService models this behavior using two resource
    types:
    - TestMatrix: a group of one or more TestExecutions, built by
    taking a   product of values over a pre-defined set of axes. In
    the case of Android   Tests, for example, device model and OS
    version are two axes of the matrix.
    - TestExecution: a single execution of one or more test targets
    on a   single device. These are created automatically when a
    TestMatrix is   created.

    This service returns any error codes from the canonical error
    space (i.e. google.rpc.Code). The errors which may be returned
    are specified on each method. In addition, any method may return
    UNAVAILABLE or INTERNAL.
    """

    _client: TestExecutionServiceClient

    DEFAULT_ENDPOINT = TestExecutionServiceClient.DEFAULT_ENDPOINT
    DEFAULT_MTLS_ENDPOINT = TestExecutionServiceClient.DEFAULT_MTLS_ENDPOINT

    common_billing_account_path = staticmethod(TestExecutionServiceClient.common_billing_account_path)
    parse_common_billing_account_path = staticmethod(TestExecutionServiceClient.parse_common_billing_account_path)
    common_folder_path = staticmethod(TestExecutionServiceClient.common_folder_path)
    parse_common_folder_path = staticmethod(TestExecutionServiceClient.parse_common_folder_path)
    common_organization_path = staticmethod(TestExecutionServiceClient.common_organization_path)
    parse_common_organization_path = staticmethod(TestExecutionServiceClient.parse_common_organization_path)
    common_project_path = staticmethod(TestExecutionServiceClient.common_project_path)
    parse_common_project_path = staticmethod(TestExecutionServiceClient.parse_common_project_path)
    common_location_path = staticmethod(TestExecutionServiceClient.common_location_path)
    parse_common_location_path = staticmethod(TestExecutionServiceClient.parse_common_location_path)

    @classmethod
    def from_service_account_info(cls, info: dict, *args, **kwargs):
        """Creates an instance of this client using the provided credentials
            info.

        Args:
            info (dict): The service account private key info.
            args: Additional arguments to pass to the constructor.
            kwargs: Additional arguments to pass to the constructor.

        Returns:
            TestExecutionServiceAsyncClient: The constructed client.
        """
        return TestExecutionServiceClient.from_service_account_info.__func__(TestExecutionServiceAsyncClient, info, *args, **kwargs)  # type: ignore

    @classmethod
    def from_service_account_file(cls, filename: str, *args, **kwargs):
        """Creates an instance of this client using the provided credentials
            file.

        Args:
            filename (str): The path to the service account private key json
                file.
            args: Additional arguments to pass to the constructor.
            kwargs: Additional arguments to pass to the constructor.

        Returns:
            TestExecutionServiceAsyncClient: The constructed client.
        """
        return TestExecutionServiceClient.from_service_account_file.__func__(TestExecutionServiceAsyncClient, filename, *args, **kwargs)  # type: ignore

    from_service_account_json = from_service_account_file

    @property
    def transport(self) -> TestExecutionServiceTransport:
        """Returns the transport used by the client instance.

        Returns:
            TestExecutionServiceTransport: The transport used by the client instance.
        """
        return self._client.transport

    get_transport_class = functools.partial(type(TestExecutionServiceClient).get_transport_class, type(TestExecutionServiceClient))

    def __init__(self, *,
            credentials: ga_credentials.Credentials = None,
            transport: Union[str, TestExecutionServiceTransport] = "grpc_asyncio",
            client_options: ClientOptions = None,
            client_info: gapic_v1.client_info.ClientInfo = DEFAULT_CLIENT_INFO,
            ) -> None:
        """Instantiates the test execution service client.

        Args:
            credentials (Optional[google.auth.credentials.Credentials]): The
                authorization credentials to attach to requests. These
                credentials identify the application to the service; if none
                are specified, the client will attempt to ascertain the
                credentials from the environment.
            transport (Union[str, ~.TestExecutionServiceTransport]): The
                transport to use. If set to None, a transport is chosen
                automatically.
            client_options (ClientOptions): Custom options for the client. It
                won't take effect if a ``transport`` instance is provided.
                (1) The ``api_endpoint`` property can be used to override the
                default endpoint provided by the client. GOOGLE_API_USE_MTLS_ENDPOINT
                environment variable can also be used to override the endpoint:
                "always" (always use the default mTLS endpoint), "never" (always
                use the default regular endpoint) and "auto" (auto switch to the
                default mTLS endpoint if client certificate is present, this is
                the default value). However, the ``api_endpoint`` property takes
                precedence if provided.
                (2) If GOOGLE_API_USE_CLIENT_CERTIFICATE environment variable
                is "true", then the ``client_cert_source`` property can be used
                to provide client certificate for mutual TLS transport. If
                not provided, the default SSL client certificate will be used if
                present. If GOOGLE_API_USE_CLIENT_CERTIFICATE is "false" or not
                set, no client certificate will be used.

        Raises:
            google.auth.exceptions.MutualTlsChannelError: If mutual TLS transport
                creation failed for any reason.
        """
        self._client = TestExecutionServiceClient(
            credentials=credentials,
            transport=transport,
            client_options=client_options,
            client_info=client_info,

        )

    async def create_test_matrix(self,
            request: Union[test_execution.CreateTestMatrixRequest, dict] = None,
            *,
            retry: OptionalRetry = gapic_v1.method.DEFAULT,
            timeout: float = None,
            metadata: Sequence[Tuple[str, str]] = (),
            ) -> test_execution.TestMatrix:
        r"""Creates and runs a matrix of tests according to the given
        specifications. Unsupported environments will be returned in the
        state UNSUPPORTED. A test matrix is limited to use at most 2000
        devices in parallel.

        May return any of the following canonical error codes:

        -  PERMISSION_DENIED - if the user is not authorized to write to
           project
        -  INVALID_ARGUMENT - if the request is malformed or if the
           matrix tries to use too many simultaneous devices.

        Args:
            request (Union[google.devtools.testing_v1.types.CreateTestMatrixRequest, dict]):
                The request object. Request to submit a matrix of tests
                for execution.
            retry (google.api_core.retry.Retry): Designation of what errors, if any,
                should be retried.
            timeout (float): The timeout for this request.
            metadata (Sequence[Tuple[str, str]]): Strings which should be
                sent along with the request as metadata.

        Returns:
            google.devtools.testing_v1.types.TestMatrix:
                TestMatrix captures all details about
                a test. It contains the environment
                configuration, test specification, test
                executions and overall state and
                outcome.

        """
        # Create or coerce a protobuf request object.
        request = test_execution.CreateTestMatrixRequest(request)

        # Wrap the RPC method; this adds retry and timeout information,
        # and friendly error handling.
        rpc = gapic_v1.method_async.wrap_method(
            self._client._transport.create_test_matrix,
            default_timeout=None,
            client_info=DEFAULT_CLIENT_INFO,
        )

        # Send the request.
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        # Done; return the response.
        return response

    async def get_test_matrix(self,
            request: Union[test_execution.GetTestMatrixRequest, dict] = None,
            *,
            retry: OptionalRetry = gapic_v1.method.DEFAULT,
            timeout: float = None,
            metadata: Sequence[Tuple[str, str]] = (),
            ) -> test_execution.TestMatrix:
        r"""Checks the status of a test matrix.

        May return any of the following canonical error codes:

        -  PERMISSION_DENIED - if the user is not authorized to read
           project
        -  INVALID_ARGUMENT - if the request is malformed
        -  NOT_FOUND - if the Test Matrix does not exist

        Args:
            request (Union[google.devtools.testing_v1.types.GetTestMatrixRequest, dict]):
                The request object. Request to get the Test Matrix with
                the given id.
            retry (google.api_core.retry.Retry): Designation of what errors, if any,
                should be retried.
            timeout (float): The timeout for this request.
            metadata (Sequence[Tuple[str, str]]): Strings which should be
                sent along with the request as metadata.

        Returns:
            google.devtools.testing_v1.types.TestMatrix:
                TestMatrix captures all details about
                a test. It contains the environment
                configuration, test specification, test
                executions and overall state and
                outcome.

        """
        # Create or coerce a protobuf request object.
        request = test_execution.GetTestMatrixRequest(request)

        # Wrap the RPC method; this adds retry and timeout information,
        # and friendly error handling.
        rpc = gapic_v1.method_async.wrap_method(
            self._client._transport.get_test_matrix,
            default_timeout=None,
            client_info=DEFAULT_CLIENT_INFO,
        )

        # Send the request.
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        # Done; return the response.
        return response

    async def cancel_test_matrix(self,
            request: Union[test_execution.CancelTestMatrixRequest, dict] = None,
            *,
            retry: OptionalRetry = gapic_v1.method.DEFAULT,
            timeout: float = None,
            metadata: Sequence[Tuple[str, str]] = (),
            ) -> test_execution.CancelTestMatrixResponse:
        r"""Cancels unfinished test executions in a test matrix. This call
        returns immediately and cancellation proceeds asynchronously. If
        the matrix is already final, this operation will have no effect.

        May return any of the following canonical error codes:

        -  PERMISSION_DENIED - if the user is not authorized to read
           project
        -  INVALID_ARGUMENT - if the request is malformed
        -  NOT_FOUND - if the Test Matrix does not exist

        Args:
            request (Union[google.devtools.testing_v1.types.CancelTestMatrixRequest, dict]):
                The request object. Request to stop running all of the
                tests in the specified matrix.
            retry (google.api_core.retry.Retry): Designation of what errors, if any,
                should be retried.
            timeout (float): The timeout for this request.
            metadata (Sequence[Tuple[str, str]]): Strings which should be
                sent along with the request as metadata.

        Returns:
            google.devtools.testing_v1.types.CancelTestMatrixResponse:
                Response containing the current state
                of the specified test matrix.

        """
        # Create or coerce a protobuf request object.
        request = test_execution.CancelTestMatrixRequest(request)

        # Wrap the RPC method; this adds retry and timeout information,
        # and friendly error handling.
        rpc = gapic_v1.method_async.wrap_method(
            self._client._transport.cancel_test_matrix,
            default_timeout=None,
            client_info=DEFAULT_CLIENT_INFO,
        )

        # Send the request.
        response = await rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        # Done; return the response.
        return response

    async def __aenter__(self):
        return self

    async def __aexit__(self, exc_type, exc, tb):
        await self.transport.close()

try:
    DEFAULT_CLIENT_INFO = gapic_v1.client_info.ClientInfo(
        gapic_version=pkg_resources.get_distribution(
            "google-devtools-testing",
        ).version,
    )
except pkg_resources.DistributionNotFound:
    DEFAULT_CLIENT_INFO = gapic_v1.client_info.ClientInfo()


__all__ = (
    "TestExecutionServiceAsyncClient",
)
