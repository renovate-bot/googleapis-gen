# -*- coding: utf-8 -*-
# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
import warnings
from typing import Callable, Dict, Optional, Sequence, Tuple, Union

from google.api_core import grpc_helpers
from google.api_core import gapic_v1
import google.auth                         # type: ignore
from google.auth import credentials as ga_credentials  # type: ignore
from google.auth.transport.grpc import SslCredentials  # type: ignore

import grpc  # type: ignore

from google.devtools.testing_v1.types import test_execution
from .base import TestExecutionServiceTransport, DEFAULT_CLIENT_INFO


class TestExecutionServiceGrpcTransport(TestExecutionServiceTransport):
    """gRPC backend transport for TestExecutionService.

    A service for requesting test executions and querying their
    status.
    This service is part of Firebase Test Lab. To learn about how to
    use the product, and how to integrate it with your system,
    visit https://firebase.google.com/docs/test-lab.

    Each test execution will wait for available capacity. It will
    then be invoked as described. The test may be invoked multiple
    times if an infrastructure failure is detected. Results and
    other files generated by the test will be stored in an external
    storage system.
    The TestExecutionService models this behavior using two resource
    types:
    - TestMatrix: a group of one or more TestExecutions, built by
    taking a   product of values over a pre-defined set of axes. In
    the case of Android   Tests, for example, device model and OS
    version are two axes of the matrix.
    - TestExecution: a single execution of one or more test targets
    on a   single device. These are created automatically when a
    TestMatrix is   created.

    This service returns any error codes from the canonical error
    space (i.e. google.rpc.Code). The errors which may be returned
    are specified on each method. In addition, any method may return
    UNAVAILABLE or INTERNAL.

    This class defines the same methods as the primary client, so the
    primary client can load the underlying transport implementation
    and call it.

    It sends protocol buffers over the wire using gRPC (which is built on
    top of HTTP/2); the ``grpcio`` package must be installed.
    """
    _stubs: Dict[str, Callable]

    def __init__(self, *,
            host: str = 'testing.googleapis.com',
            credentials: ga_credentials.Credentials = None,
            credentials_file: str = None,
            scopes: Sequence[str] = None,
            channel: grpc.Channel = None,
            api_mtls_endpoint: str = None,
            client_cert_source: Callable[[], Tuple[bytes, bytes]] = None,
            ssl_channel_credentials: grpc.ChannelCredentials = None,
            client_cert_source_for_mtls: Callable[[], Tuple[bytes, bytes]] = None,
            quota_project_id: Optional[str] = None,
            client_info: gapic_v1.client_info.ClientInfo = DEFAULT_CLIENT_INFO,
            always_use_jwt_access: Optional[bool] = False,
            ) -> None:
        """Instantiate the transport.

        Args:
            host (Optional[str]):
                 The hostname to connect to.
            credentials (Optional[google.auth.credentials.Credentials]): The
                authorization credentials to attach to requests. These
                credentials identify the application to the service; if none
                are specified, the client will attempt to ascertain the
                credentials from the environment.
                This argument is ignored if ``channel`` is provided.
            credentials_file (Optional[str]): A file with credentials that can
                be loaded with :func:`google.auth.load_credentials_from_file`.
                This argument is ignored if ``channel`` is provided.
            scopes (Optional(Sequence[str])): A list of scopes. This argument is
                ignored if ``channel`` is provided.
            channel (Optional[grpc.Channel]): A ``Channel`` instance through
                which to make calls.
            api_mtls_endpoint (Optional[str]): Deprecated. The mutual TLS endpoint.
                If provided, it overrides the ``host`` argument and tries to create
                a mutual TLS channel with client SSL credentials from
                ``client_cert_source`` or application default SSL credentials.
            client_cert_source (Optional[Callable[[], Tuple[bytes, bytes]]]):
                Deprecated. A callback to provide client SSL certificate bytes and
                private key bytes, both in PEM format. It is ignored if
                ``api_mtls_endpoint`` is None.
            ssl_channel_credentials (grpc.ChannelCredentials): SSL credentials
                for the grpc channel. It is ignored if ``channel`` is provided.
            client_cert_source_for_mtls (Optional[Callable[[], Tuple[bytes, bytes]]]):
                A callback to provide client certificate bytes and private key bytes,
                both in PEM format. It is used to configure a mutual TLS channel. It is
                ignored if ``channel`` or ``ssl_channel_credentials`` is provided.
            quota_project_id (Optional[str]): An optional project to use for billing
                and quota.
            client_info (google.api_core.gapic_v1.client_info.ClientInfo):
                The client info used to send a user-agent string along with
                API requests. If ``None``, then default info will be used.
                Generally, you only need to set this if you're developing
                your own client library.
            always_use_jwt_access (Optional[bool]): Whether self signed JWT should
                be used for service account credentials.

        Raises:
          google.auth.exceptions.MutualTLSChannelError: If mutual TLS transport
              creation failed for any reason.
          google.api_core.exceptions.DuplicateCredentialArgs: If both ``credentials``
              and ``credentials_file`` are passed.
        """
        self._grpc_channel = None
        self._ssl_channel_credentials = ssl_channel_credentials
        self._stubs: Dict[str, Callable] = {}

        if api_mtls_endpoint:
            warnings.warn("api_mtls_endpoint is deprecated", DeprecationWarning)
        if client_cert_source:
            warnings.warn("client_cert_source is deprecated", DeprecationWarning)

        if channel:
            # Ignore credentials if a channel was passed.
            credentials = False
            # If a channel was explicitly provided, set it.
            self._grpc_channel = channel
            self._ssl_channel_credentials = None

        else:
            if api_mtls_endpoint:
                host = api_mtls_endpoint

                # Create SSL credentials with client_cert_source or application
                # default SSL credentials.
                if client_cert_source:
                    cert, key = client_cert_source()
                    self._ssl_channel_credentials = grpc.ssl_channel_credentials(
                        certificate_chain=cert, private_key=key
                    )
                else:
                    self._ssl_channel_credentials = SslCredentials().ssl_credentials

            else:
                if client_cert_source_for_mtls and not ssl_channel_credentials:
                    cert, key = client_cert_source_for_mtls()
                    self._ssl_channel_credentials = grpc.ssl_channel_credentials(
                        certificate_chain=cert, private_key=key
                    )

        # The base transport sets the host, credentials and scopes
        super().__init__(
            host=host,
            credentials=credentials,
            credentials_file=credentials_file,
            scopes=scopes,
            quota_project_id=quota_project_id,
            client_info=client_info,
            always_use_jwt_access=always_use_jwt_access,
        )

        if not self._grpc_channel:
            self._grpc_channel = type(self).create_channel(
                self._host,
                credentials=self._credentials,
                credentials_file=credentials_file,
                scopes=self._scopes,
                ssl_credentials=self._ssl_channel_credentials,
                quota_project_id=quota_project_id,
                options=[
                    ("grpc.max_send_message_length", -1),
                    ("grpc.max_receive_message_length", -1),
                ],
            )

        # Wrap messages. This must be done after self._grpc_channel exists
        self._prep_wrapped_messages(client_info)

    @classmethod
    def create_channel(cls,
                       host: str = 'testing.googleapis.com',
                       credentials: ga_credentials.Credentials = None,
                       credentials_file: str = None,
                       scopes: Optional[Sequence[str]] = None,
                       quota_project_id: Optional[str] = None,
                       **kwargs) -> grpc.Channel:
        """Create and return a gRPC channel object.
        Args:
            host (Optional[str]): The host for the channel to use.
            credentials (Optional[~.Credentials]): The
                authorization credentials to attach to requests. These
                credentials identify this application to the service. If
                none are specified, the client will attempt to ascertain
                the credentials from the environment.
            credentials_file (Optional[str]): A file with credentials that can
                be loaded with :func:`google.auth.load_credentials_from_file`.
                This argument is mutually exclusive with credentials.
            scopes (Optional[Sequence[str]]): A optional list of scopes needed for this
                service. These are only used when credentials are not specified and
                are passed to :func:`google.auth.default`.
            quota_project_id (Optional[str]): An optional project to use for billing
                and quota.
            kwargs (Optional[dict]): Keyword arguments, which are passed to the
                channel creation.
        Returns:
            grpc.Channel: A gRPC channel object.

        Raises:
            google.api_core.exceptions.DuplicateCredentialArgs: If both ``credentials``
              and ``credentials_file`` are passed.
        """

        return grpc_helpers.create_channel(
            host,
            credentials=credentials,
            credentials_file=credentials_file,
            quota_project_id=quota_project_id,
            default_scopes=cls.AUTH_SCOPES,
            scopes=scopes,
            default_host=cls.DEFAULT_HOST,
            **kwargs
        )

    @property
    def grpc_channel(self) -> grpc.Channel:
        """Return the channel designed to connect to this service.
        """
        return self._grpc_channel

    @property
    def create_test_matrix(self) -> Callable[
            [test_execution.CreateTestMatrixRequest],
            test_execution.TestMatrix]:
        r"""Return a callable for the create test matrix method over gRPC.

        Creates and runs a matrix of tests according to the given
        specifications. Unsupported environments will be returned in the
        state UNSUPPORTED. A test matrix is limited to use at most 2000
        devices in parallel.

        May return any of the following canonical error codes:

        -  PERMISSION_DENIED - if the user is not authorized to write to
           project
        -  INVALID_ARGUMENT - if the request is malformed or if the
           matrix tries to use too many simultaneous devices.

        Returns:
            Callable[[~.CreateTestMatrixRequest],
                    ~.TestMatrix]:
                A function that, when called, will call the underlying RPC
                on the server.
        """
        # Generate a "stub function" on-the-fly which will actually make
        # the request.
        # gRPC handles serialization and deserialization, so we just need
        # to pass in the functions for each.
        if 'create_test_matrix' not in self._stubs:
            self._stubs['create_test_matrix'] = self.grpc_channel.unary_unary(
                '/google.devtools.testing.v1.TestExecutionService/CreateTestMatrix',
                request_serializer=test_execution.CreateTestMatrixRequest.serialize,
                response_deserializer=test_execution.TestMatrix.deserialize,
            )
        return self._stubs['create_test_matrix']

    @property
    def get_test_matrix(self) -> Callable[
            [test_execution.GetTestMatrixRequest],
            test_execution.TestMatrix]:
        r"""Return a callable for the get test matrix method over gRPC.

        Checks the status of a test matrix.

        May return any of the following canonical error codes:

        -  PERMISSION_DENIED - if the user is not authorized to read
           project
        -  INVALID_ARGUMENT - if the request is malformed
        -  NOT_FOUND - if the Test Matrix does not exist

        Returns:
            Callable[[~.GetTestMatrixRequest],
                    ~.TestMatrix]:
                A function that, when called, will call the underlying RPC
                on the server.
        """
        # Generate a "stub function" on-the-fly which will actually make
        # the request.
        # gRPC handles serialization and deserialization, so we just need
        # to pass in the functions for each.
        if 'get_test_matrix' not in self._stubs:
            self._stubs['get_test_matrix'] = self.grpc_channel.unary_unary(
                '/google.devtools.testing.v1.TestExecutionService/GetTestMatrix',
                request_serializer=test_execution.GetTestMatrixRequest.serialize,
                response_deserializer=test_execution.TestMatrix.deserialize,
            )
        return self._stubs['get_test_matrix']

    @property
    def cancel_test_matrix(self) -> Callable[
            [test_execution.CancelTestMatrixRequest],
            test_execution.CancelTestMatrixResponse]:
        r"""Return a callable for the cancel test matrix method over gRPC.

        Cancels unfinished test executions in a test matrix. This call
        returns immediately and cancellation proceeds asynchronously. If
        the matrix is already final, this operation will have no effect.

        May return any of the following canonical error codes:

        -  PERMISSION_DENIED - if the user is not authorized to read
           project
        -  INVALID_ARGUMENT - if the request is malformed
        -  NOT_FOUND - if the Test Matrix does not exist

        Returns:
            Callable[[~.CancelTestMatrixRequest],
                    ~.CancelTestMatrixResponse]:
                A function that, when called, will call the underlying RPC
                on the server.
        """
        # Generate a "stub function" on-the-fly which will actually make
        # the request.
        # gRPC handles serialization and deserialization, so we just need
        # to pass in the functions for each.
        if 'cancel_test_matrix' not in self._stubs:
            self._stubs['cancel_test_matrix'] = self.grpc_channel.unary_unary(
                '/google.devtools.testing.v1.TestExecutionService/CancelTestMatrix',
                request_serializer=test_execution.CancelTestMatrixRequest.serialize,
                response_deserializer=test_execution.CancelTestMatrixResponse.deserialize,
            )
        return self._stubs['cancel_test_matrix']

    def close(self):
        self.grpc_channel.close()

__all__ = (
    'TestExecutionServiceGrpcTransport',
)
