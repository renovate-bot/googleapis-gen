package com.google.devtools.testing.v1;

import static io.grpc.MethodDescriptor.generateFullMethodName;

/**
 * <pre>
 * A service for requesting test executions and querying their status.
 * This service is part of Firebase Test Lab. To learn about how to use the
 * product, and how to integrate it with your system,
 * visit https://firebase.google.com/docs/test-lab.
 * Each test execution will wait for available capacity. It will then be
 * invoked as described. The test may be invoked multiple times if an
 * infrastructure failure is detected. Results and other files generated by
 * the test will be stored in an external storage system.
 * The TestExecutionService models this behavior using two resource types:
 * - TestMatrix: a group of one or more TestExecutions, built by taking a
 *   product of values over a pre-defined set of axes. In the case of Android
 *   Tests, for example, device model and OS version are two axes of the matrix.
 * - TestExecution: a single execution of one or more test targets on a
 *   single device. These are created automatically when a TestMatrix is
 *   created.
 * This service returns any error codes from the canonical error space (i.e.
 * google.rpc.Code). The errors which may be returned are specified on each
 * method. In addition, any method may return UNAVAILABLE or INTERNAL.
 * </pre>
 */
@javax.annotation.Generated(
    value = "by gRPC proto compiler",
    comments = "Source: google/devtools/testing/v1/test_execution.proto")
@io.grpc.stub.annotations.GrpcGenerated
public final class TestExecutionServiceGrpc {

  private TestExecutionServiceGrpc() {}

  public static final String SERVICE_NAME = "google.devtools.testing.v1.TestExecutionService";

  // Static method descriptors that strictly reflect the proto.
  private static volatile io.grpc.MethodDescriptor<com.google.devtools.testing.v1.CreateTestMatrixRequest,
      com.google.devtools.testing.v1.TestMatrix> getCreateTestMatrixMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateTestMatrix",
      requestType = com.google.devtools.testing.v1.CreateTestMatrixRequest.class,
      responseType = com.google.devtools.testing.v1.TestMatrix.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.google.devtools.testing.v1.CreateTestMatrixRequest,
      com.google.devtools.testing.v1.TestMatrix> getCreateTestMatrixMethod() {
    io.grpc.MethodDescriptor<com.google.devtools.testing.v1.CreateTestMatrixRequest, com.google.devtools.testing.v1.TestMatrix> getCreateTestMatrixMethod;
    if ((getCreateTestMatrixMethod = TestExecutionServiceGrpc.getCreateTestMatrixMethod) == null) {
      synchronized (TestExecutionServiceGrpc.class) {
        if ((getCreateTestMatrixMethod = TestExecutionServiceGrpc.getCreateTestMatrixMethod) == null) {
          TestExecutionServiceGrpc.getCreateTestMatrixMethod = getCreateTestMatrixMethod =
              io.grpc.MethodDescriptor.<com.google.devtools.testing.v1.CreateTestMatrixRequest, com.google.devtools.testing.v1.TestMatrix>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateTestMatrix"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.google.devtools.testing.v1.CreateTestMatrixRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.google.devtools.testing.v1.TestMatrix.getDefaultInstance()))
              .setSchemaDescriptor(new TestExecutionServiceMethodDescriptorSupplier("CreateTestMatrix"))
              .build();
        }
      }
    }
    return getCreateTestMatrixMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.google.devtools.testing.v1.GetTestMatrixRequest,
      com.google.devtools.testing.v1.TestMatrix> getGetTestMatrixMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "GetTestMatrix",
      requestType = com.google.devtools.testing.v1.GetTestMatrixRequest.class,
      responseType = com.google.devtools.testing.v1.TestMatrix.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.google.devtools.testing.v1.GetTestMatrixRequest,
      com.google.devtools.testing.v1.TestMatrix> getGetTestMatrixMethod() {
    io.grpc.MethodDescriptor<com.google.devtools.testing.v1.GetTestMatrixRequest, com.google.devtools.testing.v1.TestMatrix> getGetTestMatrixMethod;
    if ((getGetTestMatrixMethod = TestExecutionServiceGrpc.getGetTestMatrixMethod) == null) {
      synchronized (TestExecutionServiceGrpc.class) {
        if ((getGetTestMatrixMethod = TestExecutionServiceGrpc.getGetTestMatrixMethod) == null) {
          TestExecutionServiceGrpc.getGetTestMatrixMethod = getGetTestMatrixMethod =
              io.grpc.MethodDescriptor.<com.google.devtools.testing.v1.GetTestMatrixRequest, com.google.devtools.testing.v1.TestMatrix>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "GetTestMatrix"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.google.devtools.testing.v1.GetTestMatrixRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.google.devtools.testing.v1.TestMatrix.getDefaultInstance()))
              .setSchemaDescriptor(new TestExecutionServiceMethodDescriptorSupplier("GetTestMatrix"))
              .build();
        }
      }
    }
    return getGetTestMatrixMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.google.devtools.testing.v1.CancelTestMatrixRequest,
      com.google.devtools.testing.v1.CancelTestMatrixResponse> getCancelTestMatrixMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CancelTestMatrix",
      requestType = com.google.devtools.testing.v1.CancelTestMatrixRequest.class,
      responseType = com.google.devtools.testing.v1.CancelTestMatrixResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.google.devtools.testing.v1.CancelTestMatrixRequest,
      com.google.devtools.testing.v1.CancelTestMatrixResponse> getCancelTestMatrixMethod() {
    io.grpc.MethodDescriptor<com.google.devtools.testing.v1.CancelTestMatrixRequest, com.google.devtools.testing.v1.CancelTestMatrixResponse> getCancelTestMatrixMethod;
    if ((getCancelTestMatrixMethod = TestExecutionServiceGrpc.getCancelTestMatrixMethod) == null) {
      synchronized (TestExecutionServiceGrpc.class) {
        if ((getCancelTestMatrixMethod = TestExecutionServiceGrpc.getCancelTestMatrixMethod) == null) {
          TestExecutionServiceGrpc.getCancelTestMatrixMethod = getCancelTestMatrixMethod =
              io.grpc.MethodDescriptor.<com.google.devtools.testing.v1.CancelTestMatrixRequest, com.google.devtools.testing.v1.CancelTestMatrixResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CancelTestMatrix"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.google.devtools.testing.v1.CancelTestMatrixRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.google.devtools.testing.v1.CancelTestMatrixResponse.getDefaultInstance()))
              .setSchemaDescriptor(new TestExecutionServiceMethodDescriptorSupplier("CancelTestMatrix"))
              .build();
        }
      }
    }
    return getCancelTestMatrixMethod;
  }

  /**
   * Creates a new async stub that supports all call types for the service
   */
  public static TestExecutionServiceStub newStub(io.grpc.Channel channel) {
    io.grpc.stub.AbstractStub.StubFactory<TestExecutionServiceStub> factory =
      new io.grpc.stub.AbstractStub.StubFactory<TestExecutionServiceStub>() {
        @java.lang.Override
        public TestExecutionServiceStub newStub(io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
          return new TestExecutionServiceStub(channel, callOptions);
        }
      };
    return TestExecutionServiceStub.newStub(factory, channel);
  }

  /**
   * Creates a new blocking-style stub that supports unary and streaming output calls on the service
   */
  public static TestExecutionServiceBlockingStub newBlockingStub(
      io.grpc.Channel channel) {
    io.grpc.stub.AbstractStub.StubFactory<TestExecutionServiceBlockingStub> factory =
      new io.grpc.stub.AbstractStub.StubFactory<TestExecutionServiceBlockingStub>() {
        @java.lang.Override
        public TestExecutionServiceBlockingStub newStub(io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
          return new TestExecutionServiceBlockingStub(channel, callOptions);
        }
      };
    return TestExecutionServiceBlockingStub.newStub(factory, channel);
  }

  /**
   * Creates a new ListenableFuture-style stub that supports unary calls on the service
   */
  public static TestExecutionServiceFutureStub newFutureStub(
      io.grpc.Channel channel) {
    io.grpc.stub.AbstractStub.StubFactory<TestExecutionServiceFutureStub> factory =
      new io.grpc.stub.AbstractStub.StubFactory<TestExecutionServiceFutureStub>() {
        @java.lang.Override
        public TestExecutionServiceFutureStub newStub(io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
          return new TestExecutionServiceFutureStub(channel, callOptions);
        }
      };
    return TestExecutionServiceFutureStub.newStub(factory, channel);
  }

  /**
   * <pre>
   * A service for requesting test executions and querying their status.
   * This service is part of Firebase Test Lab. To learn about how to use the
   * product, and how to integrate it with your system,
   * visit https://firebase.google.com/docs/test-lab.
   * Each test execution will wait for available capacity. It will then be
   * invoked as described. The test may be invoked multiple times if an
   * infrastructure failure is detected. Results and other files generated by
   * the test will be stored in an external storage system.
   * The TestExecutionService models this behavior using two resource types:
   * - TestMatrix: a group of one or more TestExecutions, built by taking a
   *   product of values over a pre-defined set of axes. In the case of Android
   *   Tests, for example, device model and OS version are two axes of the matrix.
   * - TestExecution: a single execution of one or more test targets on a
   *   single device. These are created automatically when a TestMatrix is
   *   created.
   * This service returns any error codes from the canonical error space (i.e.
   * google.rpc.Code). The errors which may be returned are specified on each
   * method. In addition, any method may return UNAVAILABLE or INTERNAL.
   * </pre>
   */
  public static abstract class TestExecutionServiceImplBase implements io.grpc.BindableService {

    /**
     * <pre>
     * Creates and runs a matrix of tests according to the given specifications.
     * Unsupported environments will be returned in the state UNSUPPORTED.
     * A test matrix is limited to use at most 2000 devices in parallel.
     * May return any of the following canonical error codes:
     * - PERMISSION_DENIED - if the user is not authorized to write to project
     * - INVALID_ARGUMENT - if the request is malformed or if the matrix tries
     *                      to use too many simultaneous devices.
     * </pre>
     */
    public void createTestMatrix(com.google.devtools.testing.v1.CreateTestMatrixRequest request,
        io.grpc.stub.StreamObserver<com.google.devtools.testing.v1.TestMatrix> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateTestMatrixMethod(), responseObserver);
    }

    /**
     * <pre>
     * Checks the status of a test matrix.
     * May return any of the following canonical error codes:
     * - PERMISSION_DENIED - if the user is not authorized to read project
     * - INVALID_ARGUMENT - if the request is malformed
     * - NOT_FOUND - if the Test Matrix does not exist
     * </pre>
     */
    public void getTestMatrix(com.google.devtools.testing.v1.GetTestMatrixRequest request,
        io.grpc.stub.StreamObserver<com.google.devtools.testing.v1.TestMatrix> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getGetTestMatrixMethod(), responseObserver);
    }

    /**
     * <pre>
     * Cancels unfinished test executions in a test matrix.
     * This call returns immediately and cancellation proceeds asynchronously.
     * If the matrix is already final, this operation will have no effect.
     * May return any of the following canonical error codes:
     * - PERMISSION_DENIED - if the user is not authorized to read project
     * - INVALID_ARGUMENT - if the request is malformed
     * - NOT_FOUND - if the Test Matrix does not exist
     * </pre>
     */
    public void cancelTestMatrix(com.google.devtools.testing.v1.CancelTestMatrixRequest request,
        io.grpc.stub.StreamObserver<com.google.devtools.testing.v1.CancelTestMatrixResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCancelTestMatrixMethod(), responseObserver);
    }

    @java.lang.Override public final io.grpc.ServerServiceDefinition bindService() {
      return io.grpc.ServerServiceDefinition.builder(getServiceDescriptor())
          .addMethod(
            getCreateTestMatrixMethod(),
            io.grpc.stub.ServerCalls.asyncUnaryCall(
              new MethodHandlers<
                com.google.devtools.testing.v1.CreateTestMatrixRequest,
                com.google.devtools.testing.v1.TestMatrix>(
                  this, METHODID_CREATE_TEST_MATRIX)))
          .addMethod(
            getGetTestMatrixMethod(),
            io.grpc.stub.ServerCalls.asyncUnaryCall(
              new MethodHandlers<
                com.google.devtools.testing.v1.GetTestMatrixRequest,
                com.google.devtools.testing.v1.TestMatrix>(
                  this, METHODID_GET_TEST_MATRIX)))
          .addMethod(
            getCancelTestMatrixMethod(),
            io.grpc.stub.ServerCalls.asyncUnaryCall(
              new MethodHandlers<
                com.google.devtools.testing.v1.CancelTestMatrixRequest,
                com.google.devtools.testing.v1.CancelTestMatrixResponse>(
                  this, METHODID_CANCEL_TEST_MATRIX)))
          .build();
    }
  }

  /**
   * <pre>
   * A service for requesting test executions and querying their status.
   * This service is part of Firebase Test Lab. To learn about how to use the
   * product, and how to integrate it with your system,
   * visit https://firebase.google.com/docs/test-lab.
   * Each test execution will wait for available capacity. It will then be
   * invoked as described. The test may be invoked multiple times if an
   * infrastructure failure is detected. Results and other files generated by
   * the test will be stored in an external storage system.
   * The TestExecutionService models this behavior using two resource types:
   * - TestMatrix: a group of one or more TestExecutions, built by taking a
   *   product of values over a pre-defined set of axes. In the case of Android
   *   Tests, for example, device model and OS version are two axes of the matrix.
   * - TestExecution: a single execution of one or more test targets on a
   *   single device. These are created automatically when a TestMatrix is
   *   created.
   * This service returns any error codes from the canonical error space (i.e.
   * google.rpc.Code). The errors which may be returned are specified on each
   * method. In addition, any method may return UNAVAILABLE or INTERNAL.
   * </pre>
   */
  public static final class TestExecutionServiceStub extends io.grpc.stub.AbstractAsyncStub<TestExecutionServiceStub> {
    private TestExecutionServiceStub(
        io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }

    @java.lang.Override
    protected TestExecutionServiceStub build(
        io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
      return new TestExecutionServiceStub(channel, callOptions);
    }

    /**
     * <pre>
     * Creates and runs a matrix of tests according to the given specifications.
     * Unsupported environments will be returned in the state UNSUPPORTED.
     * A test matrix is limited to use at most 2000 devices in parallel.
     * May return any of the following canonical error codes:
     * - PERMISSION_DENIED - if the user is not authorized to write to project
     * - INVALID_ARGUMENT - if the request is malformed or if the matrix tries
     *                      to use too many simultaneous devices.
     * </pre>
     */
    public void createTestMatrix(com.google.devtools.testing.v1.CreateTestMatrixRequest request,
        io.grpc.stub.StreamObserver<com.google.devtools.testing.v1.TestMatrix> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateTestMatrixMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Checks the status of a test matrix.
     * May return any of the following canonical error codes:
     * - PERMISSION_DENIED - if the user is not authorized to read project
     * - INVALID_ARGUMENT - if the request is malformed
     * - NOT_FOUND - if the Test Matrix does not exist
     * </pre>
     */
    public void getTestMatrix(com.google.devtools.testing.v1.GetTestMatrixRequest request,
        io.grpc.stub.StreamObserver<com.google.devtools.testing.v1.TestMatrix> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getGetTestMatrixMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Cancels unfinished test executions in a test matrix.
     * This call returns immediately and cancellation proceeds asynchronously.
     * If the matrix is already final, this operation will have no effect.
     * May return any of the following canonical error codes:
     * - PERMISSION_DENIED - if the user is not authorized to read project
     * - INVALID_ARGUMENT - if the request is malformed
     * - NOT_FOUND - if the Test Matrix does not exist
     * </pre>
     */
    public void cancelTestMatrix(com.google.devtools.testing.v1.CancelTestMatrixRequest request,
        io.grpc.stub.StreamObserver<com.google.devtools.testing.v1.CancelTestMatrixResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCancelTestMatrixMethod(), getCallOptions()), request, responseObserver);
    }
  }

  /**
   * <pre>
   * A service for requesting test executions and querying their status.
   * This service is part of Firebase Test Lab. To learn about how to use the
   * product, and how to integrate it with your system,
   * visit https://firebase.google.com/docs/test-lab.
   * Each test execution will wait for available capacity. It will then be
   * invoked as described. The test may be invoked multiple times if an
   * infrastructure failure is detected. Results and other files generated by
   * the test will be stored in an external storage system.
   * The TestExecutionService models this behavior using two resource types:
   * - TestMatrix: a group of one or more TestExecutions, built by taking a
   *   product of values over a pre-defined set of axes. In the case of Android
   *   Tests, for example, device model and OS version are two axes of the matrix.
   * - TestExecution: a single execution of one or more test targets on a
   *   single device. These are created automatically when a TestMatrix is
   *   created.
   * This service returns any error codes from the canonical error space (i.e.
   * google.rpc.Code). The errors which may be returned are specified on each
   * method. In addition, any method may return UNAVAILABLE or INTERNAL.
   * </pre>
   */
  public static final class TestExecutionServiceBlockingStub extends io.grpc.stub.AbstractBlockingStub<TestExecutionServiceBlockingStub> {
    private TestExecutionServiceBlockingStub(
        io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }

    @java.lang.Override
    protected TestExecutionServiceBlockingStub build(
        io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
      return new TestExecutionServiceBlockingStub(channel, callOptions);
    }

    /**
     * <pre>
     * Creates and runs a matrix of tests according to the given specifications.
     * Unsupported environments will be returned in the state UNSUPPORTED.
     * A test matrix is limited to use at most 2000 devices in parallel.
     * May return any of the following canonical error codes:
     * - PERMISSION_DENIED - if the user is not authorized to write to project
     * - INVALID_ARGUMENT - if the request is malformed or if the matrix tries
     *                      to use too many simultaneous devices.
     * </pre>
     */
    public com.google.devtools.testing.v1.TestMatrix createTestMatrix(com.google.devtools.testing.v1.CreateTestMatrixRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateTestMatrixMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Checks the status of a test matrix.
     * May return any of the following canonical error codes:
     * - PERMISSION_DENIED - if the user is not authorized to read project
     * - INVALID_ARGUMENT - if the request is malformed
     * - NOT_FOUND - if the Test Matrix does not exist
     * </pre>
     */
    public com.google.devtools.testing.v1.TestMatrix getTestMatrix(com.google.devtools.testing.v1.GetTestMatrixRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getGetTestMatrixMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Cancels unfinished test executions in a test matrix.
     * This call returns immediately and cancellation proceeds asynchronously.
     * If the matrix is already final, this operation will have no effect.
     * May return any of the following canonical error codes:
     * - PERMISSION_DENIED - if the user is not authorized to read project
     * - INVALID_ARGUMENT - if the request is malformed
     * - NOT_FOUND - if the Test Matrix does not exist
     * </pre>
     */
    public com.google.devtools.testing.v1.CancelTestMatrixResponse cancelTestMatrix(com.google.devtools.testing.v1.CancelTestMatrixRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCancelTestMatrixMethod(), getCallOptions(), request);
    }
  }

  /**
   * <pre>
   * A service for requesting test executions and querying their status.
   * This service is part of Firebase Test Lab. To learn about how to use the
   * product, and how to integrate it with your system,
   * visit https://firebase.google.com/docs/test-lab.
   * Each test execution will wait for available capacity. It will then be
   * invoked as described. The test may be invoked multiple times if an
   * infrastructure failure is detected. Results and other files generated by
   * the test will be stored in an external storage system.
   * The TestExecutionService models this behavior using two resource types:
   * - TestMatrix: a group of one or more TestExecutions, built by taking a
   *   product of values over a pre-defined set of axes. In the case of Android
   *   Tests, for example, device model and OS version are two axes of the matrix.
   * - TestExecution: a single execution of one or more test targets on a
   *   single device. These are created automatically when a TestMatrix is
   *   created.
   * This service returns any error codes from the canonical error space (i.e.
   * google.rpc.Code). The errors which may be returned are specified on each
   * method. In addition, any method may return UNAVAILABLE or INTERNAL.
   * </pre>
   */
  public static final class TestExecutionServiceFutureStub extends io.grpc.stub.AbstractFutureStub<TestExecutionServiceFutureStub> {
    private TestExecutionServiceFutureStub(
        io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }

    @java.lang.Override
    protected TestExecutionServiceFutureStub build(
        io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
      return new TestExecutionServiceFutureStub(channel, callOptions);
    }

    /**
     * <pre>
     * Creates and runs a matrix of tests according to the given specifications.
     * Unsupported environments will be returned in the state UNSUPPORTED.
     * A test matrix is limited to use at most 2000 devices in parallel.
     * May return any of the following canonical error codes:
     * - PERMISSION_DENIED - if the user is not authorized to write to project
     * - INVALID_ARGUMENT - if the request is malformed or if the matrix tries
     *                      to use too many simultaneous devices.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.google.devtools.testing.v1.TestMatrix> createTestMatrix(
        com.google.devtools.testing.v1.CreateTestMatrixRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateTestMatrixMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Checks the status of a test matrix.
     * May return any of the following canonical error codes:
     * - PERMISSION_DENIED - if the user is not authorized to read project
     * - INVALID_ARGUMENT - if the request is malformed
     * - NOT_FOUND - if the Test Matrix does not exist
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.google.devtools.testing.v1.TestMatrix> getTestMatrix(
        com.google.devtools.testing.v1.GetTestMatrixRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getGetTestMatrixMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Cancels unfinished test executions in a test matrix.
     * This call returns immediately and cancellation proceeds asynchronously.
     * If the matrix is already final, this operation will have no effect.
     * May return any of the following canonical error codes:
     * - PERMISSION_DENIED - if the user is not authorized to read project
     * - INVALID_ARGUMENT - if the request is malformed
     * - NOT_FOUND - if the Test Matrix does not exist
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.google.devtools.testing.v1.CancelTestMatrixResponse> cancelTestMatrix(
        com.google.devtools.testing.v1.CancelTestMatrixRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCancelTestMatrixMethod(), getCallOptions()), request);
    }
  }

  private static final int METHODID_CREATE_TEST_MATRIX = 0;
  private static final int METHODID_GET_TEST_MATRIX = 1;
  private static final int METHODID_CANCEL_TEST_MATRIX = 2;

  private static final class MethodHandlers<Req, Resp> implements
      io.grpc.stub.ServerCalls.UnaryMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ServerStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ClientStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.BidiStreamingMethod<Req, Resp> {
    private final TestExecutionServiceImplBase serviceImpl;
    private final int methodId;

    MethodHandlers(TestExecutionServiceImplBase serviceImpl, int methodId) {
      this.serviceImpl = serviceImpl;
      this.methodId = methodId;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public void invoke(Req request, io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        case METHODID_CREATE_TEST_MATRIX:
          serviceImpl.createTestMatrix((com.google.devtools.testing.v1.CreateTestMatrixRequest) request,
              (io.grpc.stub.StreamObserver<com.google.devtools.testing.v1.TestMatrix>) responseObserver);
          break;
        case METHODID_GET_TEST_MATRIX:
          serviceImpl.getTestMatrix((com.google.devtools.testing.v1.GetTestMatrixRequest) request,
              (io.grpc.stub.StreamObserver<com.google.devtools.testing.v1.TestMatrix>) responseObserver);
          break;
        case METHODID_CANCEL_TEST_MATRIX:
          serviceImpl.cancelTestMatrix((com.google.devtools.testing.v1.CancelTestMatrixRequest) request,
              (io.grpc.stub.StreamObserver<com.google.devtools.testing.v1.CancelTestMatrixResponse>) responseObserver);
          break;
        default:
          throw new AssertionError();
      }
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public io.grpc.stub.StreamObserver<Req> invoke(
        io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        default:
          throw new AssertionError();
      }
    }
  }

  private static abstract class TestExecutionServiceBaseDescriptorSupplier
      implements io.grpc.protobuf.ProtoFileDescriptorSupplier, io.grpc.protobuf.ProtoServiceDescriptorSupplier {
    TestExecutionServiceBaseDescriptorSupplier() {}

    @java.lang.Override
    public com.google.protobuf.Descriptors.FileDescriptor getFileDescriptor() {
      return com.google.devtools.testing.v1.TestExecutionProto.getDescriptor();
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.ServiceDescriptor getServiceDescriptor() {
      return getFileDescriptor().findServiceByName("TestExecutionService");
    }
  }

  private static final class TestExecutionServiceFileDescriptorSupplier
      extends TestExecutionServiceBaseDescriptorSupplier {
    TestExecutionServiceFileDescriptorSupplier() {}
  }

  private static final class TestExecutionServiceMethodDescriptorSupplier
      extends TestExecutionServiceBaseDescriptorSupplier
      implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
    private final String methodName;

    TestExecutionServiceMethodDescriptorSupplier(String methodName) {
      this.methodName = methodName;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.MethodDescriptor getMethodDescriptor() {
      return getServiceDescriptor().findMethodByName(methodName);
    }
  }

  private static volatile io.grpc.ServiceDescriptor serviceDescriptor;

  public static io.grpc.ServiceDescriptor getServiceDescriptor() {
    io.grpc.ServiceDescriptor result = serviceDescriptor;
    if (result == null) {
      synchronized (TestExecutionServiceGrpc.class) {
        result = serviceDescriptor;
        if (result == null) {
          serviceDescriptor = result = io.grpc.ServiceDescriptor.newBuilder(SERVICE_NAME)
              .setSchemaDescriptor(new TestExecutionServiceFileDescriptorSupplier())
              .addMethod(getCreateTestMatrixMethod())
              .addMethod(getGetTestMatrixMethod())
              .addMethod(getCancelTestMatrixMethod())
              .build();
        }
      }
    }
    return result;
  }
}
