// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/firestore/admin/v1/database.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Firestore.Admin.V1 {

  /// <summary>Holder for reflection information generated from google/firestore/admin/v1/database.proto</summary>
  public static partial class DatabaseReflection {

    #region Descriptor
    /// <summary>File descriptor for google/firestore/admin/v1/database.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DatabaseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cihnb29nbGUvZmlyZXN0b3JlL2FkbWluL3YxL2RhdGFiYXNlLnByb3RvEhln",
            "b29nbGUuZmlyZXN0b3JlLmFkbWluLnYxGh9nb29nbGUvYXBpL2ZpZWxkX2Jl",
            "aGF2aW9yLnByb3RvGhlnb29nbGUvYXBpL3Jlc291cmNlLnByb3RvGh5nb29n",
            "bGUvcHJvdG9idWYvZHVyYXRpb24ucHJvdG8aH2dvb2dsZS9wcm90b2J1Zi90",
            "aW1lc3RhbXAucHJvdG8aHGdvb2dsZS9hcGkvYW5ub3RhdGlvbnMucHJvdG8i",
            "8AMKCERhdGFiYXNlEgwKBG5hbWUYASABKAkSEwoLbG9jYXRpb25faWQYCSAB",
            "KAkSPgoEdHlwZRgKIAEoDjIwLmdvb2dsZS5maXJlc3RvcmUuYWRtaW4udjEu",
            "RGF0YWJhc2UuRGF0YWJhc2VUeXBlEk0KEGNvbmN1cnJlbmN5X21vZGUYDyAB",
            "KA4yMy5nb29nbGUuZmlyZXN0b3JlLmFkbWluLnYxLkRhdGFiYXNlLkNvbmN1",
            "cnJlbmN5TW9kZRIMCgRldGFnGGMgASgJIlcKDERhdGFiYXNlVHlwZRIdChlE",
            "QVRBQkFTRV9UWVBFX1VOU1BFQ0lGSUVEEAASFAoQRklSRVNUT1JFX05BVElW",
            "RRABEhIKDkRBVEFTVE9SRV9NT0RFEAIidwoPQ29uY3VycmVuY3lNb2RlEiAK",
            "HENPTkNVUlJFTkNZX01PREVfVU5TUEVDSUZJRUQQABIOCgpPUFRJTUlTVElD",
            "EAESDwoLUEVTU0lNSVNUSUMQAhIhCh1PUFRJTUlTVElDX1dJVEhfRU5USVRZ",
            "X0dST1VQUxADOlLqQU8KIWZpcmVzdG9yZS5nb29nbGVhcGlzLmNvbS9EYXRh",
            "YmFzZRIncHJvamVjdHMve3Byb2plY3R9L2RhdGFiYXNlcy97ZGF0YWJhc2V9",
            "UgEBQuEBCh1jb20uZ29vZ2xlLmZpcmVzdG9yZS5hZG1pbi52MUINRGF0YWJh",
            "c2VQcm90b1ABWj5nb29nbGUuZ29sYW5nLm9yZy9nZW5wcm90by9nb29nbGVh",
            "cGlzL2ZpcmVzdG9yZS9hZG1pbi92MTthZG1pbqICBEdDRlOqAh9Hb29nbGUu",
            "Q2xvdWQuRmlyZXN0b3JlLkFkbWluLlYxygIfR29vZ2xlXENsb3VkXEZpcmVz",
            "dG9yZVxBZG1pblxWMeoCI0dvb2dsZTo6Q2xvdWQ6OkZpcmVzdG9yZTo6QWRt",
            "aW46OlYxYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Api.ResourceReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.Admin.V1.Database), global::Google.Cloud.Firestore.Admin.V1.Database.Parser, new[]{ "Name", "LocationId", "Type", "ConcurrencyMode", "Etag" }, null, new[]{ typeof(global::Google.Cloud.Firestore.Admin.V1.Database.Types.DatabaseType), typeof(global::Google.Cloud.Firestore.Admin.V1.Database.Types.ConcurrencyMode) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A Cloud Firestore Database.
  /// Currently only one database is allowed per cloud project; this database
  /// must have a `database_id` of '(default)'.
  /// </summary>
  public sealed partial class Database : pb::IMessage<Database>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Database> _parser = new pb::MessageParser<Database>(() => new Database());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Database> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.Admin.V1.DatabaseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Database() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Database(Database other) : this() {
      name_ = other.name_;
      locationId_ = other.locationId_;
      type_ = other.type_;
      concurrencyMode_ = other.concurrencyMode_;
      etag_ = other.etag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Database Clone() {
      return new Database(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The resource name of the Database.
    /// Format: `projects/{project}/databases/{database}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location_id" field.</summary>
    public const int LocationIdFieldNumber = 9;
    private string locationId_ = "";
    /// <summary>
    /// The location of the database. Available databases are listed at
    /// https://cloud.google.com/firestore/docs/locations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LocationId {
      get { return locationId_; }
      set {
        locationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 10;
    private global::Google.Cloud.Firestore.Admin.V1.Database.Types.DatabaseType type_ = global::Google.Cloud.Firestore.Admin.V1.Database.Types.DatabaseType.Unspecified;
    /// <summary>
    /// The type of the database.
    /// See https://cloud.google.com/datastore/docs/firestore-or-datastore for
    /// information about how to choose.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Cloud.Firestore.Admin.V1.Database.Types.DatabaseType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "concurrency_mode" field.</summary>
    public const int ConcurrencyModeFieldNumber = 15;
    private global::Google.Cloud.Firestore.Admin.V1.Database.Types.ConcurrencyMode concurrencyMode_ = global::Google.Cloud.Firestore.Admin.V1.Database.Types.ConcurrencyMode.Unspecified;
    /// <summary>
    /// The concurrency control mode to use for this database.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Cloud.Firestore.Admin.V1.Database.Types.ConcurrencyMode ConcurrencyMode {
      get { return concurrencyMode_; }
      set {
        concurrencyMode_ = value;
      }
    }

    /// <summary>Field number for the "etag" field.</summary>
    public const int EtagFieldNumber = 99;
    private string etag_ = "";
    /// <summary>
    /// This checksum is computed by the server based on the value of other
    /// fields, and may be sent on update and delete requests to ensure the
    /// client has an up-to-date value before proceeding.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Etag {
      get { return etag_; }
      set {
        etag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Database);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Database other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (LocationId != other.LocationId) return false;
      if (Type != other.Type) return false;
      if (ConcurrencyMode != other.ConcurrencyMode) return false;
      if (Etag != other.Etag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (LocationId.Length != 0) hash ^= LocationId.GetHashCode();
      if (Type != global::Google.Cloud.Firestore.Admin.V1.Database.Types.DatabaseType.Unspecified) hash ^= Type.GetHashCode();
      if (ConcurrencyMode != global::Google.Cloud.Firestore.Admin.V1.Database.Types.ConcurrencyMode.Unspecified) hash ^= ConcurrencyMode.GetHashCode();
      if (Etag.Length != 0) hash ^= Etag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (LocationId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(LocationId);
      }
      if (Type != global::Google.Cloud.Firestore.Admin.V1.Database.Types.DatabaseType.Unspecified) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Type);
      }
      if (ConcurrencyMode != global::Google.Cloud.Firestore.Admin.V1.Database.Types.ConcurrencyMode.Unspecified) {
        output.WriteRawTag(120);
        output.WriteEnum((int) ConcurrencyMode);
      }
      if (Etag.Length != 0) {
        output.WriteRawTag(154, 6);
        output.WriteString(Etag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (LocationId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(LocationId);
      }
      if (Type != global::Google.Cloud.Firestore.Admin.V1.Database.Types.DatabaseType.Unspecified) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Type);
      }
      if (ConcurrencyMode != global::Google.Cloud.Firestore.Admin.V1.Database.Types.ConcurrencyMode.Unspecified) {
        output.WriteRawTag(120);
        output.WriteEnum((int) ConcurrencyMode);
      }
      if (Etag.Length != 0) {
        output.WriteRawTag(154, 6);
        output.WriteString(Etag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (LocationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocationId);
      }
      if (Type != global::Google.Cloud.Firestore.Admin.V1.Database.Types.DatabaseType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (ConcurrencyMode != global::Google.Cloud.Firestore.Admin.V1.Database.Types.ConcurrencyMode.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ConcurrencyMode);
      }
      if (Etag.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Etag);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Database other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.LocationId.Length != 0) {
        LocationId = other.LocationId;
      }
      if (other.Type != global::Google.Cloud.Firestore.Admin.V1.Database.Types.DatabaseType.Unspecified) {
        Type = other.Type;
      }
      if (other.ConcurrencyMode != global::Google.Cloud.Firestore.Admin.V1.Database.Types.ConcurrencyMode.Unspecified) {
        ConcurrencyMode = other.ConcurrencyMode;
      }
      if (other.Etag.Length != 0) {
        Etag = other.Etag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 74: {
            LocationId = input.ReadString();
            break;
          }
          case 80: {
            Type = (global::Google.Cloud.Firestore.Admin.V1.Database.Types.DatabaseType) input.ReadEnum();
            break;
          }
          case 120: {
            ConcurrencyMode = (global::Google.Cloud.Firestore.Admin.V1.Database.Types.ConcurrencyMode) input.ReadEnum();
            break;
          }
          case 794: {
            Etag = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 74: {
            LocationId = input.ReadString();
            break;
          }
          case 80: {
            Type = (global::Google.Cloud.Firestore.Admin.V1.Database.Types.DatabaseType) input.ReadEnum();
            break;
          }
          case 120: {
            ConcurrencyMode = (global::Google.Cloud.Firestore.Admin.V1.Database.Types.ConcurrencyMode) input.ReadEnum();
            break;
          }
          case 794: {
            Etag = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Database message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// The type of the database.
      /// See https://cloud.google.com/datastore/docs/firestore-or-datastore for
      /// information about how to choose.
      /// </summary>
      public enum DatabaseType {
        /// <summary>
        /// The default value. This value is used if the database type is omitted.
        /// </summary>
        [pbr::OriginalName("DATABASE_TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Firestore Native Mode
        /// </summary>
        [pbr::OriginalName("FIRESTORE_NATIVE")] FirestoreNative = 1,
        /// <summary>
        /// Firestore in Datastore Mode.
        /// </summary>
        [pbr::OriginalName("DATASTORE_MODE")] DatastoreMode = 2,
      }

      /// <summary>
      /// The type of concurrency control mode for transactions.
      /// </summary>
      public enum ConcurrencyMode {
        /// <summary>
        /// Not used.
        /// </summary>
        [pbr::OriginalName("CONCURRENCY_MODE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Use optimistic concurrency control by default. This setting is available
        /// for Cloud Firestore customers.
        /// </summary>
        [pbr::OriginalName("OPTIMISTIC")] Optimistic = 1,
        /// <summary>
        /// Use pessimistic concurrency control by default. This setting is available
        /// for Cloud Firestore customers.
        /// This is the default setting for Cloud Firestore.
        /// </summary>
        [pbr::OriginalName("PESSIMISTIC")] Pessimistic = 2,
        /// <summary>
        /// Use optimistic concurrency control with entity groups by default. This is
        /// the only available setting for Cloud Datastore customers.
        /// This is the default setting for Cloud Datastore.
        /// </summary>
        [pbr::OriginalName("OPTIMISTIC_WITH_ENTITY_GROUPS")] OptimisticWithEntityGroups = 3,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
