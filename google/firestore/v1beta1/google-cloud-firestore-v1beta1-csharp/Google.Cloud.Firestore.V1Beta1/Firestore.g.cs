// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/firestore/v1beta1/firestore.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Firestore.V1Beta1 {

  /// <summary>Holder for reflection information generated from google/firestore/v1beta1/firestore.proto</summary>
  public static partial class FirestoreReflection {

    #region Descriptor
    /// <summary>File descriptor for google/firestore/v1beta1/firestore.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FirestoreReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cihnb29nbGUvZmlyZXN0b3JlL3YxYmV0YTEvZmlyZXN0b3JlLnByb3RvEhhn",
            "b29nbGUuZmlyZXN0b3JlLnYxYmV0YTEaHGdvb2dsZS9hcGkvYW5ub3RhdGlv",
            "bnMucHJvdG8aF2dvb2dsZS9hcGkvY2xpZW50LnByb3RvGh9nb29nbGUvYXBp",
            "L2ZpZWxkX2JlaGF2aW9yLnByb3RvGiVnb29nbGUvZmlyZXN0b3JlL3YxYmV0",
            "YTEvY29tbW9uLnByb3RvGidnb29nbGUvZmlyZXN0b3JlL3YxYmV0YTEvZG9j",
            "dW1lbnQucHJvdG8aJGdvb2dsZS9maXJlc3RvcmUvdjFiZXRhMS9xdWVyeS5w",
            "cm90bxokZ29vZ2xlL2ZpcmVzdG9yZS92MWJldGExL3dyaXRlLnByb3RvGhtn",
            "b29nbGUvcHJvdG9idWYvZW1wdHkucHJvdG8aH2dvb2dsZS9wcm90b2J1Zi90",
            "aW1lc3RhbXAucHJvdG8aF2dvb2dsZS9ycGMvc3RhdHVzLnByb3RvIr0BChJH",
            "ZXREb2N1bWVudFJlcXVlc3QSEQoEbmFtZRgBIAEoCUID4EECEjQKBG1hc2sY",
            "AiABKAsyJi5nb29nbGUuZmlyZXN0b3JlLnYxYmV0YTEuRG9jdW1lbnRNYXNr",
            "EhUKC3RyYW5zYWN0aW9uGAMgASgMSAASLwoJcmVhZF90aW1lGAUgASgLMhou",
            "Z29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEgAQhYKFGNvbnNpc3RlbmN5X3Nl",
            "bGVjdG9yIqwCChRMaXN0RG9jdW1lbnRzUmVxdWVzdBITCgZwYXJlbnQYASAB",
            "KAlCA+BBAhIaCg1jb2xsZWN0aW9uX2lkGAIgASgJQgPgQQISEQoJcGFnZV9z",
            "aXplGAMgASgFEhIKCnBhZ2VfdG9rZW4YBCABKAkSEAoIb3JkZXJfYnkYBiAB",
            "KAkSNAoEbWFzaxgHIAEoCzImLmdvb2dsZS5maXJlc3RvcmUudjFiZXRhMS5E",
            "b2N1bWVudE1hc2sSFQoLdHJhbnNhY3Rpb24YCCABKAxIABIvCglyZWFkX3Rp",
            "bWUYCiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wSAASFAoMc2hv",
            "d19taXNzaW5nGAwgASgIQhYKFGNvbnNpc3RlbmN5X3NlbGVjdG9yImcKFUxp",
            "c3REb2N1bWVudHNSZXNwb25zZRI1Cglkb2N1bWVudHMYASADKAsyIi5nb29n",
            "bGUuZmlyZXN0b3JlLnYxYmV0YTEuRG9jdW1lbnQSFwoPbmV4dF9wYWdlX3Rv",
            "a2VuGAIgASgJIs4BChVDcmVhdGVEb2N1bWVudFJlcXVlc3QSEwoGcGFyZW50",
            "GAEgASgJQgPgQQISGgoNY29sbGVjdGlvbl9pZBgCIAEoCUID4EECEhMKC2Rv",
            "Y3VtZW50X2lkGAMgASgJEjkKCGRvY3VtZW50GAQgASgLMiIuZ29vZ2xlLmZp",
            "cmVzdG9yZS52MWJldGExLkRvY3VtZW50QgPgQQISNAoEbWFzaxgFIAEoCzIm",
            "Lmdvb2dsZS5maXJlc3RvcmUudjFiZXRhMS5Eb2N1bWVudE1hc2sihwIKFVVw",
            "ZGF0ZURvY3VtZW50UmVxdWVzdBI5Cghkb2N1bWVudBgBIAEoCzIiLmdvb2ds",
            "ZS5maXJlc3RvcmUudjFiZXRhMS5Eb2N1bWVudEID4EECEjsKC3VwZGF0ZV9t",
            "YXNrGAIgASgLMiYuZ29vZ2xlLmZpcmVzdG9yZS52MWJldGExLkRvY3VtZW50",
            "TWFzaxI0CgRtYXNrGAMgASgLMiYuZ29vZ2xlLmZpcmVzdG9yZS52MWJldGEx",
            "LkRvY3VtZW50TWFzaxJAChBjdXJyZW50X2RvY3VtZW50GAQgASgLMiYuZ29v",
            "Z2xlLmZpcmVzdG9yZS52MWJldGExLlByZWNvbmRpdGlvbiJsChVEZWxldGVE",
            "b2N1bWVudFJlcXVlc3QSEQoEbmFtZRgBIAEoCUID4EECEkAKEGN1cnJlbnRf",
            "ZG9jdW1lbnQYAiABKAsyJi5nb29nbGUuZmlyZXN0b3JlLnYxYmV0YTEuUHJl",
            "Y29uZGl0aW9uIqMCChhCYXRjaEdldERvY3VtZW50c1JlcXVlc3QSFQoIZGF0",
            "YWJhc2UYASABKAlCA+BBAhIRCglkb2N1bWVudHMYAiADKAkSNAoEbWFzaxgD",
            "IAEoCzImLmdvb2dsZS5maXJlc3RvcmUudjFiZXRhMS5Eb2N1bWVudE1hc2sS",
            "FQoLdHJhbnNhY3Rpb24YBCABKAxIABJHCg9uZXdfdHJhbnNhY3Rpb24YBSAB",
            "KAsyLC5nb29nbGUuZmlyZXN0b3JlLnYxYmV0YTEuVHJhbnNhY3Rpb25PcHRp",
            "b25zSAASLwoJcmVhZF90aW1lGAcgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRp",
            "bWVzdGFtcEgAQhYKFGNvbnNpc3RlbmN5X3NlbGVjdG9yIrEBChlCYXRjaEdl",
            "dERvY3VtZW50c1Jlc3BvbnNlEjMKBWZvdW5kGAEgASgLMiIuZ29vZ2xlLmZp",
            "cmVzdG9yZS52MWJldGExLkRvY3VtZW50SAASEQoHbWlzc2luZxgCIAEoCUgA",
            "EhMKC3RyYW5zYWN0aW9uGAMgASgMEi0KCXJlYWRfdGltZRgEIAEoCzIaLmdv",
            "b2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCCAoGcmVzdWx0Im8KF0JlZ2luVHJh",
            "bnNhY3Rpb25SZXF1ZXN0EhUKCGRhdGFiYXNlGAEgASgJQgPgQQISPQoHb3B0",
            "aW9ucxgCIAEoCzIsLmdvb2dsZS5maXJlc3RvcmUudjFiZXRhMS5UcmFuc2Fj",
            "dGlvbk9wdGlvbnMiLwoYQmVnaW5UcmFuc2FjdGlvblJlc3BvbnNlEhMKC3Ry",
            "YW5zYWN0aW9uGAEgASgMImwKDUNvbW1pdFJlcXVlc3QSFQoIZGF0YWJhc2UY",
            "ASABKAlCA+BBAhIvCgZ3cml0ZXMYAiADKAsyHy5nb29nbGUuZmlyZXN0b3Jl",
            "LnYxYmV0YTEuV3JpdGUSEwoLdHJhbnNhY3Rpb24YAyABKAwifwoOQ29tbWl0",
            "UmVzcG9uc2USPAoNd3JpdGVfcmVzdWx0cxgBIAMoCzIlLmdvb2dsZS5maXJl",
            "c3RvcmUudjFiZXRhMS5Xcml0ZVJlc3VsdBIvCgtjb21taXRfdGltZRgCIAEo",
            "CzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAiQgoPUm9sbGJhY2tSZXF1",
            "ZXN0EhUKCGRhdGFiYXNlGAEgASgJQgPgQQISGAoLdHJhbnNhY3Rpb24YAiAB",
            "KAxCA+BBAiKkAgoPUnVuUXVlcnlSZXF1ZXN0EhMKBnBhcmVudBgBIAEoCUID",
            "4EECEkUKEHN0cnVjdHVyZWRfcXVlcnkYAiABKAsyKS5nb29nbGUuZmlyZXN0",
            "b3JlLnYxYmV0YTEuU3RydWN0dXJlZFF1ZXJ5SAASFQoLdHJhbnNhY3Rpb24Y",
            "BSABKAxIARJHCg9uZXdfdHJhbnNhY3Rpb24YBiABKAsyLC5nb29nbGUuZmly",
            "ZXN0b3JlLnYxYmV0YTEuVHJhbnNhY3Rpb25PcHRpb25zSAESLwoJcmVhZF90",
            "aW1lGAcgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEgBQgwKCnF1",
            "ZXJ5X3R5cGVCFgoUY29uc2lzdGVuY3lfc2VsZWN0b3IipQEKEFJ1blF1ZXJ5",
            "UmVzcG9uc2USEwoLdHJhbnNhY3Rpb24YAiABKAwSNAoIZG9jdW1lbnQYASAB",
            "KAsyIi5nb29nbGUuZmlyZXN0b3JlLnYxYmV0YTEuRG9jdW1lbnQSLQoJcmVh",
            "ZF90aW1lGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIXCg9z",
            "a2lwcGVkX3Jlc3VsdHMYBCABKAUiwQEKFVBhcnRpdGlvblF1ZXJ5UmVxdWVz",
            "dBITCgZwYXJlbnQYASABKAlCA+BBAhJFChBzdHJ1Y3R1cmVkX3F1ZXJ5GAIg",
            "ASgLMikuZ29vZ2xlLmZpcmVzdG9yZS52MWJldGExLlN0cnVjdHVyZWRRdWVy",
            "eUgAEhcKD3BhcnRpdGlvbl9jb3VudBgDIAEoAxISCgpwYWdlX3Rva2VuGAQg",
            "ASgJEhEKCXBhZ2Vfc2l6ZRgFIAEoBUIMCgpxdWVyeV90eXBlImcKFlBhcnRp",
            "dGlvblF1ZXJ5UmVzcG9uc2USNAoKcGFydGl0aW9ucxgBIAMoCzIgLmdvb2ds",
            "ZS5maXJlc3RvcmUudjFiZXRhMS5DdXJzb3ISFwoPbmV4dF9wYWdlX3Rva2Vu",
            "GAIgASgJIvIBCgxXcml0ZVJlcXVlc3QSFQoIZGF0YWJhc2UYASABKAlCA+BB",
            "AhIRCglzdHJlYW1faWQYAiABKAkSLwoGd3JpdGVzGAMgAygLMh8uZ29vZ2xl",
            "LmZpcmVzdG9yZS52MWJldGExLldyaXRlEhQKDHN0cmVhbV90b2tlbhgEIAEo",
            "DBJCCgZsYWJlbHMYBSADKAsyMi5nb29nbGUuZmlyZXN0b3JlLnYxYmV0YTEu",
            "V3JpdGVSZXF1ZXN0LkxhYmVsc0VudHJ5Gi0KC0xhYmVsc0VudHJ5EgsKA2tl",
            "eRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEipwEKDVdyaXRlUmVzcG9uc2US",
            "EQoJc3RyZWFtX2lkGAEgASgJEhQKDHN0cmVhbV90b2tlbhgCIAEoDBI8Cg13",
            "cml0ZV9yZXN1bHRzGAMgAygLMiUuZ29vZ2xlLmZpcmVzdG9yZS52MWJldGEx",
            "LldyaXRlUmVzdWx0Ei8KC2NvbW1pdF90aW1lGAQgASgLMhouZ29vZ2xlLnBy",
            "b3RvYnVmLlRpbWVzdGFtcCL8AQoNTGlzdGVuUmVxdWVzdBIVCghkYXRhYmFz",
            "ZRgBIAEoCUID4EECEjYKCmFkZF90YXJnZXQYAiABKAsyIC5nb29nbGUuZmly",
            "ZXN0b3JlLnYxYmV0YTEuVGFyZ2V0SAASFwoNcmVtb3ZlX3RhcmdldBgDIAEo",
            "BUgAEkMKBmxhYmVscxgEIAMoCzIzLmdvb2dsZS5maXJlc3RvcmUudjFiZXRh",
            "MS5MaXN0ZW5SZXF1ZXN0LkxhYmVsc0VudHJ5Gi0KC0xhYmVsc0VudHJ5EgsK",
            "A2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAFCDwoNdGFyZ2V0X2NoYW5n",
            "ZSLuAgoOTGlzdGVuUmVzcG9uc2USPwoNdGFyZ2V0X2NoYW5nZRgCIAEoCzIm",
            "Lmdvb2dsZS5maXJlc3RvcmUudjFiZXRhMS5UYXJnZXRDaGFuZ2VIABJDCg9k",
            "b2N1bWVudF9jaGFuZ2UYAyABKAsyKC5nb29nbGUuZmlyZXN0b3JlLnYxYmV0",
            "YTEuRG9jdW1lbnRDaGFuZ2VIABJDCg9kb2N1bWVudF9kZWxldGUYBCABKAsy",
            "KC5nb29nbGUuZmlyZXN0b3JlLnYxYmV0YTEuRG9jdW1lbnREZWxldGVIABJD",
            "Cg9kb2N1bWVudF9yZW1vdmUYBiABKAsyKC5nb29nbGUuZmlyZXN0b3JlLnYx",
            "YmV0YTEuRG9jdW1lbnRSZW1vdmVIABI7CgZmaWx0ZXIYBSABKAsyKS5nb29n",
            "bGUuZmlyZXN0b3JlLnYxYmV0YTEuRXhpc3RlbmNlRmlsdGVySABCDwoNcmVz",
            "cG9uc2VfdHlwZSKwAwoGVGFyZ2V0Ej0KBXF1ZXJ5GAIgASgLMiwuZ29vZ2xl",
            "LmZpcmVzdG9yZS52MWJldGExLlRhcmdldC5RdWVyeVRhcmdldEgAEkUKCWRv",
            "Y3VtZW50cxgDIAEoCzIwLmdvb2dsZS5maXJlc3RvcmUudjFiZXRhMS5UYXJn",
            "ZXQuRG9jdW1lbnRzVGFyZ2V0SAASFgoMcmVzdW1lX3Rva2VuGAQgASgMSAES",
            "LwoJcmVhZF90aW1lGAsgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFt",
            "cEgBEhEKCXRhcmdldF9pZBgFIAEoBRIMCgRvbmNlGAYgASgIGiQKD0RvY3Vt",
            "ZW50c1RhcmdldBIRCglkb2N1bWVudHMYAiADKAkacgoLUXVlcnlUYXJnZXQS",
            "DgoGcGFyZW50GAEgASgJEkUKEHN0cnVjdHVyZWRfcXVlcnkYAiABKAsyKS5n",
            "b29nbGUuZmlyZXN0b3JlLnYxYmV0YTEuU3RydWN0dXJlZFF1ZXJ5SABCDAoK",
            "cXVlcnlfdHlwZUINCgt0YXJnZXRfdHlwZUINCgtyZXN1bWVfdHlwZSKvAgoM",
            "VGFyZ2V0Q2hhbmdlElMKEnRhcmdldF9jaGFuZ2VfdHlwZRgBIAEoDjI3Lmdv",
            "b2dsZS5maXJlc3RvcmUudjFiZXRhMS5UYXJnZXRDaGFuZ2UuVGFyZ2V0Q2hh",
            "bmdlVHlwZRISCgp0YXJnZXRfaWRzGAIgAygFEiEKBWNhdXNlGAMgASgLMhIu",
            "Z29vZ2xlLnJwYy5TdGF0dXMSFAoMcmVzdW1lX3Rva2VuGAQgASgMEi0KCXJl",
            "YWRfdGltZRgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAiTgoQ",
            "VGFyZ2V0Q2hhbmdlVHlwZRINCglOT19DSEFOR0UQABIHCgNBREQQARIKCgZS",
            "RU1PVkUQAhILCgdDVVJSRU5UEAMSCQoFUkVTRVQQBCJWChhMaXN0Q29sbGVj",
            "dGlvbklkc1JlcXVlc3QSEwoGcGFyZW50GAEgASgJQgPgQQISEQoJcGFnZV9z",
            "aXplGAIgASgFEhIKCnBhZ2VfdG9rZW4YAyABKAkiTAoZTGlzdENvbGxlY3Rp",
            "b25JZHNSZXNwb25zZRIWCg5jb2xsZWN0aW9uX2lkcxgBIAMoCRIXCg9uZXh0",
            "X3BhZ2VfdG9rZW4YAiABKAki0wEKEUJhdGNoV3JpdGVSZXF1ZXN0EhUKCGRh",
            "dGFiYXNlGAEgASgJQgPgQQISLwoGd3JpdGVzGAIgAygLMh8uZ29vZ2xlLmZp",
            "cmVzdG9yZS52MWJldGExLldyaXRlEkcKBmxhYmVscxgDIAMoCzI3Lmdvb2ds",
            "ZS5maXJlc3RvcmUudjFiZXRhMS5CYXRjaFdyaXRlUmVxdWVzdC5MYWJlbHNF",
            "bnRyeRotCgtMYWJlbHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiAB",
            "KAk6AjgBInYKEkJhdGNoV3JpdGVSZXNwb25zZRI8Cg13cml0ZV9yZXN1bHRz",
            "GAEgAygLMiUuZ29vZ2xlLmZpcmVzdG9yZS52MWJldGExLldyaXRlUmVzdWx0",
            "EiIKBnN0YXR1cxgCIAMoCzISLmdvb2dsZS5ycGMuU3RhdHVzMuQYCglGaXJl",
            "c3RvcmUSngEKC0dldERvY3VtZW50EiwuZ29vZ2xlLmZpcmVzdG9yZS52MWJl",
            "dGExLkdldERvY3VtZW50UmVxdWVzdBoiLmdvb2dsZS5maXJlc3RvcmUudjFi",
            "ZXRhMS5Eb2N1bWVudCI9gtPkkwI3EjUvdjFiZXRhMS97bmFtZT1wcm9qZWN0",
            "cy8qL2RhdGFiYXNlcy8qL2RvY3VtZW50cy8qLyoqfRLBAQoNTGlzdERvY3Vt",
            "ZW50cxIuLmdvb2dsZS5maXJlc3RvcmUudjFiZXRhMS5MaXN0RG9jdW1lbnRz",
            "UmVxdWVzdBovLmdvb2dsZS5maXJlc3RvcmUudjFiZXRhMS5MaXN0RG9jdW1l",
            "bnRzUmVzcG9uc2UiT4LT5JMCSRJHL3YxYmV0YTEve3BhcmVudD1wcm9qZWN0",
            "cy8qL2RhdGFiYXNlcy8qL2RvY3VtZW50cy8qLyoqfS97Y29sbGVjdGlvbl9p",
            "ZH0SzgEKDlVwZGF0ZURvY3VtZW50Ei8uZ29vZ2xlLmZpcmVzdG9yZS52MWJl",
            "dGExLlVwZGF0ZURvY3VtZW50UmVxdWVzdBoiLmdvb2dsZS5maXJlc3RvcmUu",
            "djFiZXRhMS5Eb2N1bWVudCJngtPkkwJKMj4vdjFiZXRhMS97ZG9jdW1lbnQu",
            "bmFtZT1wcm9qZWN0cy8qL2RhdGFiYXNlcy8qL2RvY3VtZW50cy8qLyoqfToI",
            "ZG9jdW1lbnTaQRRkb2N1bWVudCx1cGRhdGVfbWFzaxKfAQoORGVsZXRlRG9j",
            "dW1lbnQSLy5nb29nbGUuZmlyZXN0b3JlLnYxYmV0YTEuRGVsZXRlRG9jdW1l",
            "bnRSZXF1ZXN0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IkSC0+STAjcqNS92",
            "MWJldGExL3tuYW1lPXByb2plY3RzLyovZGF0YWJhc2VzLyovZG9jdW1lbnRz",
            "LyovKip92kEEbmFtZRLIAQoRQmF0Y2hHZXREb2N1bWVudHMSMi5nb29nbGUu",
            "ZmlyZXN0b3JlLnYxYmV0YTEuQmF0Y2hHZXREb2N1bWVudHNSZXF1ZXN0GjMu",
            "Z29vZ2xlLmZpcmVzdG9yZS52MWJldGExLkJhdGNoR2V0RG9jdW1lbnRzUmVz",
            "cG9uc2UiSILT5JMCQiI9L3YxYmV0YTEve2RhdGFiYXNlPXByb2plY3RzLyov",
            "ZGF0YWJhc2VzLyp9L2RvY3VtZW50czpiYXRjaEdldDoBKjABEtYBChBCZWdp",
            "blRyYW5zYWN0aW9uEjEuZ29vZ2xlLmZpcmVzdG9yZS52MWJldGExLkJlZ2lu",
            "VHJhbnNhY3Rpb25SZXF1ZXN0GjIuZ29vZ2xlLmZpcmVzdG9yZS52MWJldGEx",
            "LkJlZ2luVHJhbnNhY3Rpb25SZXNwb25zZSJbgtPkkwJKIkUvdjFiZXRhMS97",
            "ZGF0YWJhc2U9cHJvamVjdHMvKi9kYXRhYmFzZXMvKn0vZG9jdW1lbnRzOmJl",
            "Z2luVHJhbnNhY3Rpb246ASraQQhkYXRhYmFzZRK1AQoGQ29tbWl0EicuZ29v",
            "Z2xlLmZpcmVzdG9yZS52MWJldGExLkNvbW1pdFJlcXVlc3QaKC5nb29nbGUu",
            "ZmlyZXN0b3JlLnYxYmV0YTEuQ29tbWl0UmVzcG9uc2UiWILT5JMCQCI7L3Yx",
            "YmV0YTEve2RhdGFiYXNlPXByb2plY3RzLyovZGF0YWJhc2VzLyp9L2RvY3Vt",
            "ZW50czpjb21taXQ6ASraQQ9kYXRhYmFzZSx3cml0ZXMSrgEKCFJvbGxiYWNr",
            "EikuZ29vZ2xlLmZpcmVzdG9yZS52MWJldGExLlJvbGxiYWNrUmVxdWVzdBoW",
            "Lmdvb2dsZS5wcm90b2J1Zi5FbXB0eSJfgtPkkwJCIj0vdjFiZXRhMS97ZGF0",
            "YWJhc2U9cHJvamVjdHMvKi9kYXRhYmFzZXMvKn0vZG9jdW1lbnRzOnJvbGxi",
            "YWNrOgEq2kEUZGF0YWJhc2UsdHJhbnNhY3Rpb24S9AEKCFJ1blF1ZXJ5Eiku",
            "Z29vZ2xlLmZpcmVzdG9yZS52MWJldGExLlJ1blF1ZXJ5UmVxdWVzdBoqLmdv",
            "b2dsZS5maXJlc3RvcmUudjFiZXRhMS5SdW5RdWVyeVJlc3BvbnNlIo4BgtPk",
            "kwKHASI7L3YxYmV0YTEve3BhcmVudD1wcm9qZWN0cy8qL2RhdGFiYXNlcy8q",
            "L2RvY3VtZW50c306cnVuUXVlcnk6ASpaRSJAL3YxYmV0YTEve3BhcmVudD1w",
            "cm9qZWN0cy8qL2RhdGFiYXNlcy8qL2RvY3VtZW50cy8qLyoqfTpydW5RdWVy",
            "eToBKjABEpACCg5QYXJ0aXRpb25RdWVyeRIvLmdvb2dsZS5maXJlc3RvcmUu",
            "djFiZXRhMS5QYXJ0aXRpb25RdWVyeVJlcXVlc3QaMC5nb29nbGUuZmlyZXN0",
            "b3JlLnYxYmV0YTEuUGFydGl0aW9uUXVlcnlSZXNwb25zZSKaAYLT5JMCkwEi",
            "QS92MWJldGExL3twYXJlbnQ9cHJvamVjdHMvKi9kYXRhYmFzZXMvKi9kb2N1",
            "bWVudHN9OnBhcnRpdGlvblF1ZXJ5OgEqWksiRi92MWJldGExL3twYXJlbnQ9",
            "cHJvamVjdHMvKi9kYXRhYmFzZXMvKi9kb2N1bWVudHMvKi8qKn06cGFydGl0",
            "aW9uUXVlcnk6ASoSowEKBVdyaXRlEiYuZ29vZ2xlLmZpcmVzdG9yZS52MWJl",
            "dGExLldyaXRlUmVxdWVzdBonLmdvb2dsZS5maXJlc3RvcmUudjFiZXRhMS5X",
            "cml0ZVJlc3BvbnNlIkWC0+STAj8iOi92MWJldGExL3tkYXRhYmFzZT1wcm9q",
            "ZWN0cy8qL2RhdGFiYXNlcy8qfS9kb2N1bWVudHM6d3JpdGU6ASooATABEqcB",
            "CgZMaXN0ZW4SJy5nb29nbGUuZmlyZXN0b3JlLnYxYmV0YTEuTGlzdGVuUmVx",
            "dWVzdBooLmdvb2dsZS5maXJlc3RvcmUudjFiZXRhMS5MaXN0ZW5SZXNwb25z",
            "ZSJGgtPkkwJAIjsvdjFiZXRhMS97ZGF0YWJhc2U9cHJvamVjdHMvKi9kYXRh",
            "YmFzZXMvKn0vZG9jdW1lbnRzOmxpc3RlbjoBKigBMAESqAIKEUxpc3RDb2xs",
            "ZWN0aW9uSWRzEjIuZ29vZ2xlLmZpcmVzdG9yZS52MWJldGExLkxpc3RDb2xs",
            "ZWN0aW9uSWRzUmVxdWVzdBozLmdvb2dsZS5maXJlc3RvcmUudjFiZXRhMS5M",
            "aXN0Q29sbGVjdGlvbklkc1Jlc3BvbnNlIqkBgtPkkwKZASJEL3YxYmV0YTEv",
            "e3BhcmVudD1wcm9qZWN0cy8qL2RhdGFiYXNlcy8qL2RvY3VtZW50c306bGlz",
            "dENvbGxlY3Rpb25JZHM6ASpaTiJJL3YxYmV0YTEve3BhcmVudD1wcm9qZWN0",
            "cy8qL2RhdGFiYXNlcy8qL2RvY3VtZW50cy8qLyoqfTpsaXN0Q29sbGVjdGlv",
            "bklkczoBKtpBBnBhcmVudBKzAQoKQmF0Y2hXcml0ZRIrLmdvb2dsZS5maXJl",
            "c3RvcmUudjFiZXRhMS5CYXRjaFdyaXRlUmVxdWVzdBosLmdvb2dsZS5maXJl",
            "c3RvcmUudjFiZXRhMS5CYXRjaFdyaXRlUmVzcG9uc2UiSoLT5JMCRCI/L3Yx",
            "YmV0YTEve2RhdGFiYXNlPXByb2plY3RzLyovZGF0YWJhc2VzLyp9L2RvY3Vt",
            "ZW50czpiYXRjaFdyaXRlOgEqEr4BCg5DcmVhdGVEb2N1bWVudBIvLmdvb2ds",
            "ZS5maXJlc3RvcmUudjFiZXRhMS5DcmVhdGVEb2N1bWVudFJlcXVlc3QaIi5n",
            "b29nbGUuZmlyZXN0b3JlLnYxYmV0YTEuRG9jdW1lbnQiV4LT5JMCUSJFL3Yx",
            "YmV0YTEve3BhcmVudD1wcm9qZWN0cy8qL2RhdGFiYXNlcy8qL2RvY3VtZW50",
            "cy8qKn0ve2NvbGxlY3Rpb25faWR9Oghkb2N1bWVudBp2ykEYZmlyZXN0b3Jl",
            "Lmdvb2dsZWFwaXMuY29t0kFYaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20v",
            "YXV0aC9jbG91ZC1wbGF0Zm9ybSxodHRwczovL3d3dy5nb29nbGVhcGlzLmNv",
            "bS9hdXRoL2RhdGFzdG9yZULgAQocY29tLmdvb2dsZS5maXJlc3RvcmUudjFi",
            "ZXRhMUIORmlyZXN0b3JlUHJvdG9QAVpBZ29vZ2xlLmdvbGFuZy5vcmcvZ2Vu",
            "cHJvdG8vZ29vZ2xlYXBpcy9maXJlc3RvcmUvdjFiZXRhMTtmaXJlc3RvcmWi",
            "AgRHQ0ZTqgIeR29vZ2xlLkNsb3VkLkZpcmVzdG9yZS5WMUJldGExygIeR29v",
            "Z2xlXENsb3VkXEZpcmVzdG9yZVxWMWJldGEx6gIhR29vZ2xlOjpDbG91ZDo6",
            "RmlyZXN0b3JlOjpWMWJldGExYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Api.ClientReflection.Descriptor, global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Cloud.Firestore.V1Beta1.CommonReflection.Descriptor, global::Google.Cloud.Firestore.V1Beta1.DocumentReflection.Descriptor, global::Google.Cloud.Firestore.V1Beta1.QueryReflection.Descriptor, global::Google.Cloud.Firestore.V1Beta1.WriteReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Rpc.StatusReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.GetDocumentRequest), global::Google.Cloud.Firestore.V1Beta1.GetDocumentRequest.Parser, new[]{ "Name", "Mask", "Transaction", "ReadTime" }, new[]{ "ConsistencySelector" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.ListDocumentsRequest), global::Google.Cloud.Firestore.V1Beta1.ListDocumentsRequest.Parser, new[]{ "Parent", "CollectionId", "PageSize", "PageToken", "OrderBy", "Mask", "Transaction", "ReadTime", "ShowMissing" }, new[]{ "ConsistencySelector" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.ListDocumentsResponse), global::Google.Cloud.Firestore.V1Beta1.ListDocumentsResponse.Parser, new[]{ "Documents", "NextPageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.CreateDocumentRequest), global::Google.Cloud.Firestore.V1Beta1.CreateDocumentRequest.Parser, new[]{ "Parent", "CollectionId", "DocumentId", "Document", "Mask" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.UpdateDocumentRequest), global::Google.Cloud.Firestore.V1Beta1.UpdateDocumentRequest.Parser, new[]{ "Document", "UpdateMask", "Mask", "CurrentDocument" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.DeleteDocumentRequest), global::Google.Cloud.Firestore.V1Beta1.DeleteDocumentRequest.Parser, new[]{ "Name", "CurrentDocument" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.BatchGetDocumentsRequest), global::Google.Cloud.Firestore.V1Beta1.BatchGetDocumentsRequest.Parser, new[]{ "Database", "Documents", "Mask", "Transaction", "NewTransaction", "ReadTime" }, new[]{ "ConsistencySelector" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.BatchGetDocumentsResponse), global::Google.Cloud.Firestore.V1Beta1.BatchGetDocumentsResponse.Parser, new[]{ "Found", "Missing", "Transaction", "ReadTime" }, new[]{ "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.BeginTransactionRequest), global::Google.Cloud.Firestore.V1Beta1.BeginTransactionRequest.Parser, new[]{ "Database", "Options" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.BeginTransactionResponse), global::Google.Cloud.Firestore.V1Beta1.BeginTransactionResponse.Parser, new[]{ "Transaction" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.CommitRequest), global::Google.Cloud.Firestore.V1Beta1.CommitRequest.Parser, new[]{ "Database", "Writes", "Transaction" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.CommitResponse), global::Google.Cloud.Firestore.V1Beta1.CommitResponse.Parser, new[]{ "WriteResults", "CommitTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.RollbackRequest), global::Google.Cloud.Firestore.V1Beta1.RollbackRequest.Parser, new[]{ "Database", "Transaction" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.RunQueryRequest), global::Google.Cloud.Firestore.V1Beta1.RunQueryRequest.Parser, new[]{ "Parent", "StructuredQuery", "Transaction", "NewTransaction", "ReadTime" }, new[]{ "QueryType", "ConsistencySelector" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.RunQueryResponse), global::Google.Cloud.Firestore.V1Beta1.RunQueryResponse.Parser, new[]{ "Transaction", "Document", "ReadTime", "SkippedResults" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.PartitionQueryRequest), global::Google.Cloud.Firestore.V1Beta1.PartitionQueryRequest.Parser, new[]{ "Parent", "StructuredQuery", "PartitionCount", "PageToken", "PageSize" }, new[]{ "QueryType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.PartitionQueryResponse), global::Google.Cloud.Firestore.V1Beta1.PartitionQueryResponse.Parser, new[]{ "Partitions", "NextPageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.WriteRequest), global::Google.Cloud.Firestore.V1Beta1.WriteRequest.Parser, new[]{ "Database", "StreamId", "Writes", "StreamToken", "Labels" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.WriteResponse), global::Google.Cloud.Firestore.V1Beta1.WriteResponse.Parser, new[]{ "StreamId", "StreamToken", "WriteResults", "CommitTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.ListenRequest), global::Google.Cloud.Firestore.V1Beta1.ListenRequest.Parser, new[]{ "Database", "AddTarget", "RemoveTarget", "Labels" }, new[]{ "TargetChange" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.ListenResponse), global::Google.Cloud.Firestore.V1Beta1.ListenResponse.Parser, new[]{ "TargetChange", "DocumentChange", "DocumentDelete", "DocumentRemove", "Filter" }, new[]{ "ResponseType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.Target), global::Google.Cloud.Firestore.V1Beta1.Target.Parser, new[]{ "Query", "Documents", "ResumeToken", "ReadTime", "TargetId", "Once" }, new[]{ "TargetType", "ResumeType" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.Target.Types.DocumentsTarget), global::Google.Cloud.Firestore.V1Beta1.Target.Types.DocumentsTarget.Parser, new[]{ "Documents" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.Target.Types.QueryTarget), global::Google.Cloud.Firestore.V1Beta1.Target.Types.QueryTarget.Parser, new[]{ "Parent", "StructuredQuery" }, new[]{ "QueryType" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.TargetChange), global::Google.Cloud.Firestore.V1Beta1.TargetChange.Parser, new[]{ "TargetChangeType", "TargetIds", "Cause", "ResumeToken", "ReadTime" }, null, new[]{ typeof(global::Google.Cloud.Firestore.V1Beta1.TargetChange.Types.TargetChangeType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.ListCollectionIdsRequest), global::Google.Cloud.Firestore.V1Beta1.ListCollectionIdsRequest.Parser, new[]{ "Parent", "PageSize", "PageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.ListCollectionIdsResponse), global::Google.Cloud.Firestore.V1Beta1.ListCollectionIdsResponse.Parser, new[]{ "CollectionIds", "NextPageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.BatchWriteRequest), global::Google.Cloud.Firestore.V1Beta1.BatchWriteRequest.Parser, new[]{ "Database", "Writes", "Labels" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.BatchWriteResponse), global::Google.Cloud.Firestore.V1Beta1.BatchWriteResponse.Parser, new[]{ "WriteResults", "Status" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// The request for [Firestore.GetDocument][google.firestore.v1beta1.Firestore.GetDocument].
  /// </summary>
  public sealed partial class GetDocumentRequest : pb::IMessage<GetDocumentRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetDocumentRequest> _parser = new pb::MessageParser<GetDocumentRequest>(() => new GetDocumentRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDocumentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.FirestoreReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDocumentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDocumentRequest(GetDocumentRequest other) : this() {
      name_ = other.name_;
      mask_ = other.mask_ != null ? other.mask_.Clone() : null;
      switch (other.ConsistencySelectorCase) {
        case ConsistencySelectorOneofCase.Transaction:
          Transaction = other.Transaction;
          break;
        case ConsistencySelectorOneofCase.ReadTime:
          ReadTime = other.ReadTime.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDocumentRequest Clone() {
      return new GetDocumentRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Required. The resource name of the Document to get. In the format:
    /// `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mask" field.</summary>
    public const int MaskFieldNumber = 2;
    private global::Google.Cloud.Firestore.V1Beta1.DocumentMask mask_;
    /// <summary>
    /// The fields to return. If not set, returns all fields.
    ///
    /// If the document has a field that is not present in this mask, that field
    /// will not be returned in the response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.DocumentMask Mask {
      get { return mask_; }
      set {
        mask_ = value;
      }
    }

    /// <summary>Field number for the "transaction" field.</summary>
    public const int TransactionFieldNumber = 3;
    /// <summary>
    /// Reads the document in a transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Transaction {
      get { return consistencySelectorCase_ == ConsistencySelectorOneofCase.Transaction ? (pb::ByteString) consistencySelector_ : pb::ByteString.Empty; }
      set {
        consistencySelector_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        consistencySelectorCase_ = ConsistencySelectorOneofCase.Transaction;
      }
    }

    /// <summary>Field number for the "read_time" field.</summary>
    public const int ReadTimeFieldNumber = 5;
    /// <summary>
    /// Reads the version of the document at the given time.
    /// This may not be older than 270 seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ReadTime {
      get { return consistencySelectorCase_ == ConsistencySelectorOneofCase.ReadTime ? (global::Google.Protobuf.WellKnownTypes.Timestamp) consistencySelector_ : null; }
      set {
        consistencySelector_ = value;
        consistencySelectorCase_ = value == null ? ConsistencySelectorOneofCase.None : ConsistencySelectorOneofCase.ReadTime;
      }
    }

    private object consistencySelector_;
    /// <summary>Enum of possible cases for the "consistency_selector" oneof.</summary>
    public enum ConsistencySelectorOneofCase {
      None = 0,
      Transaction = 3,
      ReadTime = 5,
    }
    private ConsistencySelectorOneofCase consistencySelectorCase_ = ConsistencySelectorOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsistencySelectorOneofCase ConsistencySelectorCase {
      get { return consistencySelectorCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConsistencySelector() {
      consistencySelectorCase_ = ConsistencySelectorOneofCase.None;
      consistencySelector_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDocumentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDocumentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Mask, other.Mask)) return false;
      if (Transaction != other.Transaction) return false;
      if (!object.Equals(ReadTime, other.ReadTime)) return false;
      if (ConsistencySelectorCase != other.ConsistencySelectorCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (mask_ != null) hash ^= Mask.GetHashCode();
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.Transaction) hash ^= Transaction.GetHashCode();
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.ReadTime) hash ^= ReadTime.GetHashCode();
      hash ^= (int) consistencySelectorCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (mask_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Mask);
      }
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.Transaction) {
        output.WriteRawTag(26);
        output.WriteBytes(Transaction);
      }
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.ReadTime) {
        output.WriteRawTag(42);
        output.WriteMessage(ReadTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (mask_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Mask);
      }
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.Transaction) {
        output.WriteRawTag(26);
        output.WriteBytes(Transaction);
      }
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.ReadTime) {
        output.WriteRawTag(42);
        output.WriteMessage(ReadTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (mask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mask);
      }
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.Transaction) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Transaction);
      }
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.ReadTime) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReadTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDocumentRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.mask_ != null) {
        if (mask_ == null) {
          Mask = new global::Google.Cloud.Firestore.V1Beta1.DocumentMask();
        }
        Mask.MergeFrom(other.Mask);
      }
      switch (other.ConsistencySelectorCase) {
        case ConsistencySelectorOneofCase.Transaction:
          Transaction = other.Transaction;
          break;
        case ConsistencySelectorOneofCase.ReadTime:
          if (ReadTime == null) {
            ReadTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
          }
          ReadTime.MergeFrom(other.ReadTime);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (mask_ == null) {
              Mask = new global::Google.Cloud.Firestore.V1Beta1.DocumentMask();
            }
            input.ReadMessage(Mask);
            break;
          }
          case 26: {
            Transaction = input.ReadBytes();
            break;
          }
          case 42: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (consistencySelectorCase_ == ConsistencySelectorOneofCase.ReadTime) {
              subBuilder.MergeFrom(ReadTime);
            }
            input.ReadMessage(subBuilder);
            ReadTime = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (mask_ == null) {
              Mask = new global::Google.Cloud.Firestore.V1Beta1.DocumentMask();
            }
            input.ReadMessage(Mask);
            break;
          }
          case 26: {
            Transaction = input.ReadBytes();
            break;
          }
          case 42: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (consistencySelectorCase_ == ConsistencySelectorOneofCase.ReadTime) {
              subBuilder.MergeFrom(ReadTime);
            }
            input.ReadMessage(subBuilder);
            ReadTime = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The request for [Firestore.ListDocuments][google.firestore.v1beta1.Firestore.ListDocuments].
  /// </summary>
  public sealed partial class ListDocumentsRequest : pb::IMessage<ListDocumentsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListDocumentsRequest> _parser = new pb::MessageParser<ListDocumentsRequest>(() => new ListDocumentsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDocumentsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.FirestoreReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDocumentsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDocumentsRequest(ListDocumentsRequest other) : this() {
      parent_ = other.parent_;
      collectionId_ = other.collectionId_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      orderBy_ = other.orderBy_;
      mask_ = other.mask_ != null ? other.mask_.Clone() : null;
      showMissing_ = other.showMissing_;
      switch (other.ConsistencySelectorCase) {
        case ConsistencySelectorOneofCase.Transaction:
          Transaction = other.Transaction;
          break;
        case ConsistencySelectorOneofCase.ReadTime:
          ReadTime = other.ReadTime.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDocumentsRequest Clone() {
      return new ListDocumentsRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// Required. The parent resource name. In the format:
    /// `projects/{project_id}/databases/{database_id}/documents` or
    /// `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
    /// For example:
    /// `projects/my-project/databases/my-database/documents` or
    /// `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "collection_id" field.</summary>
    public const int CollectionIdFieldNumber = 2;
    private string collectionId_ = "";
    /// <summary>
    /// Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`
    /// or `messages`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CollectionId {
      get { return collectionId_; }
      set {
        collectionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private int pageSize_;
    /// <summary>
    /// The maximum number of documents to return.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 4;
    private string pageToken_ = "";
    /// <summary>
    /// The `next_page_token` value returned from a previous List request, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_by" field.</summary>
    public const int OrderByFieldNumber = 6;
    private string orderBy_ = "";
    /// <summary>
    /// The order to sort results by. For example: `priority desc, name`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderBy {
      get { return orderBy_; }
      set {
        orderBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mask" field.</summary>
    public const int MaskFieldNumber = 7;
    private global::Google.Cloud.Firestore.V1Beta1.DocumentMask mask_;
    /// <summary>
    /// The fields to return. If not set, returns all fields.
    ///
    /// If a document has a field that is not present in this mask, that field
    /// will not be returned in the response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.DocumentMask Mask {
      get { return mask_; }
      set {
        mask_ = value;
      }
    }

    /// <summary>Field number for the "transaction" field.</summary>
    public const int TransactionFieldNumber = 8;
    /// <summary>
    /// Reads documents in a transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Transaction {
      get { return consistencySelectorCase_ == ConsistencySelectorOneofCase.Transaction ? (pb::ByteString) consistencySelector_ : pb::ByteString.Empty; }
      set {
        consistencySelector_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        consistencySelectorCase_ = ConsistencySelectorOneofCase.Transaction;
      }
    }

    /// <summary>Field number for the "read_time" field.</summary>
    public const int ReadTimeFieldNumber = 10;
    /// <summary>
    /// Reads documents as they were at the given time.
    /// This may not be older than 270 seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ReadTime {
      get { return consistencySelectorCase_ == ConsistencySelectorOneofCase.ReadTime ? (global::Google.Protobuf.WellKnownTypes.Timestamp) consistencySelector_ : null; }
      set {
        consistencySelector_ = value;
        consistencySelectorCase_ = value == null ? ConsistencySelectorOneofCase.None : ConsistencySelectorOneofCase.ReadTime;
      }
    }

    /// <summary>Field number for the "show_missing" field.</summary>
    public const int ShowMissingFieldNumber = 12;
    private bool showMissing_;
    /// <summary>
    /// If the list should show missing documents. A missing document is a
    /// document that does not exist but has sub-documents. These documents will
    /// be returned with a key but will not have fields, [Document.create_time][google.firestore.v1beta1.Document.create_time],
    /// or [Document.update_time][google.firestore.v1beta1.Document.update_time] set.
    ///
    /// Requests with `show_missing` may not specify `where` or
    /// `order_by`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowMissing {
      get { return showMissing_; }
      set {
        showMissing_ = value;
      }
    }

    private object consistencySelector_;
    /// <summary>Enum of possible cases for the "consistency_selector" oneof.</summary>
    public enum ConsistencySelectorOneofCase {
      None = 0,
      Transaction = 8,
      ReadTime = 10,
    }
    private ConsistencySelectorOneofCase consistencySelectorCase_ = ConsistencySelectorOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsistencySelectorOneofCase ConsistencySelectorCase {
      get { return consistencySelectorCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConsistencySelector() {
      consistencySelectorCase_ = ConsistencySelectorOneofCase.None;
      consistencySelector_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDocumentsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDocumentsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (CollectionId != other.CollectionId) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      if (OrderBy != other.OrderBy) return false;
      if (!object.Equals(Mask, other.Mask)) return false;
      if (Transaction != other.Transaction) return false;
      if (!object.Equals(ReadTime, other.ReadTime)) return false;
      if (ShowMissing != other.ShowMissing) return false;
      if (ConsistencySelectorCase != other.ConsistencySelectorCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (CollectionId.Length != 0) hash ^= CollectionId.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (OrderBy.Length != 0) hash ^= OrderBy.GetHashCode();
      if (mask_ != null) hash ^= Mask.GetHashCode();
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.Transaction) hash ^= Transaction.GetHashCode();
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.ReadTime) hash ^= ReadTime.GetHashCode();
      if (ShowMissing != false) hash ^= ShowMissing.GetHashCode();
      hash ^= (int) consistencySelectorCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (CollectionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CollectionId);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PageToken);
      }
      if (OrderBy.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(OrderBy);
      }
      if (mask_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Mask);
      }
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.Transaction) {
        output.WriteRawTag(66);
        output.WriteBytes(Transaction);
      }
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.ReadTime) {
        output.WriteRawTag(82);
        output.WriteMessage(ReadTime);
      }
      if (ShowMissing != false) {
        output.WriteRawTag(96);
        output.WriteBool(ShowMissing);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (CollectionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CollectionId);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PageToken);
      }
      if (OrderBy.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(OrderBy);
      }
      if (mask_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Mask);
      }
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.Transaction) {
        output.WriteRawTag(66);
        output.WriteBytes(Transaction);
      }
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.ReadTime) {
        output.WriteRawTag(82);
        output.WriteMessage(ReadTime);
      }
      if (ShowMissing != false) {
        output.WriteRawTag(96);
        output.WriteBool(ShowMissing);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (CollectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CollectionId);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (OrderBy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderBy);
      }
      if (mask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mask);
      }
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.Transaction) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Transaction);
      }
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.ReadTime) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReadTime);
      }
      if (ShowMissing != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDocumentsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.CollectionId.Length != 0) {
        CollectionId = other.CollectionId;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.OrderBy.Length != 0) {
        OrderBy = other.OrderBy;
      }
      if (other.mask_ != null) {
        if (mask_ == null) {
          Mask = new global::Google.Cloud.Firestore.V1Beta1.DocumentMask();
        }
        Mask.MergeFrom(other.Mask);
      }
      if (other.ShowMissing != false) {
        ShowMissing = other.ShowMissing;
      }
      switch (other.ConsistencySelectorCase) {
        case ConsistencySelectorOneofCase.Transaction:
          Transaction = other.Transaction;
          break;
        case ConsistencySelectorOneofCase.ReadTime:
          if (ReadTime == null) {
            ReadTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
          }
          ReadTime.MergeFrom(other.ReadTime);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            CollectionId = input.ReadString();
            break;
          }
          case 24: {
            PageSize = input.ReadInt32();
            break;
          }
          case 34: {
            PageToken = input.ReadString();
            break;
          }
          case 50: {
            OrderBy = input.ReadString();
            break;
          }
          case 58: {
            if (mask_ == null) {
              Mask = new global::Google.Cloud.Firestore.V1Beta1.DocumentMask();
            }
            input.ReadMessage(Mask);
            break;
          }
          case 66: {
            Transaction = input.ReadBytes();
            break;
          }
          case 82: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (consistencySelectorCase_ == ConsistencySelectorOneofCase.ReadTime) {
              subBuilder.MergeFrom(ReadTime);
            }
            input.ReadMessage(subBuilder);
            ReadTime = subBuilder;
            break;
          }
          case 96: {
            ShowMissing = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            CollectionId = input.ReadString();
            break;
          }
          case 24: {
            PageSize = input.ReadInt32();
            break;
          }
          case 34: {
            PageToken = input.ReadString();
            break;
          }
          case 50: {
            OrderBy = input.ReadString();
            break;
          }
          case 58: {
            if (mask_ == null) {
              Mask = new global::Google.Cloud.Firestore.V1Beta1.DocumentMask();
            }
            input.ReadMessage(Mask);
            break;
          }
          case 66: {
            Transaction = input.ReadBytes();
            break;
          }
          case 82: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (consistencySelectorCase_ == ConsistencySelectorOneofCase.ReadTime) {
              subBuilder.MergeFrom(ReadTime);
            }
            input.ReadMessage(subBuilder);
            ReadTime = subBuilder;
            break;
          }
          case 96: {
            ShowMissing = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The response for [Firestore.ListDocuments][google.firestore.v1beta1.Firestore.ListDocuments].
  /// </summary>
  public sealed partial class ListDocumentsResponse : pb::IMessage<ListDocumentsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListDocumentsResponse> _parser = new pb::MessageParser<ListDocumentsResponse>(() => new ListDocumentsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDocumentsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.FirestoreReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDocumentsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDocumentsResponse(ListDocumentsResponse other) : this() {
      documents_ = other.documents_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDocumentsResponse Clone() {
      return new ListDocumentsResponse(this);
    }

    /// <summary>Field number for the "documents" field.</summary>
    public const int DocumentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Firestore.V1Beta1.Document> _repeated_documents_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Firestore.V1Beta1.Document.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.Document> documents_ = new pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.Document>();
    /// <summary>
    /// The Documents found.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.Document> Documents {
      get { return documents_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// The next page token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDocumentsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDocumentsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!documents_.Equals(other.documents_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= documents_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      documents_.WriteTo(output, _repeated_documents_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      documents_.WriteTo(ref output, _repeated_documents_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += documents_.CalculateSize(_repeated_documents_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDocumentsResponse other) {
      if (other == null) {
        return;
      }
      documents_.Add(other.documents_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            documents_.AddEntriesFrom(input, _repeated_documents_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            documents_.AddEntriesFrom(ref input, _repeated_documents_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The request for [Firestore.CreateDocument][google.firestore.v1beta1.Firestore.CreateDocument].
  /// </summary>
  public sealed partial class CreateDocumentRequest : pb::IMessage<CreateDocumentRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreateDocumentRequest> _parser = new pb::MessageParser<CreateDocumentRequest>(() => new CreateDocumentRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateDocumentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.FirestoreReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDocumentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDocumentRequest(CreateDocumentRequest other) : this() {
      parent_ = other.parent_;
      collectionId_ = other.collectionId_;
      documentId_ = other.documentId_;
      document_ = other.document_ != null ? other.document_.Clone() : null;
      mask_ = other.mask_ != null ? other.mask_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDocumentRequest Clone() {
      return new CreateDocumentRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// Required. The parent resource. For example:
    /// `projects/{project_id}/databases/{database_id}/documents` or
    /// `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "collection_id" field.</summary>
    public const int CollectionIdFieldNumber = 2;
    private string collectionId_ = "";
    /// <summary>
    /// Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CollectionId {
      get { return collectionId_; }
      set {
        collectionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "document_id" field.</summary>
    public const int DocumentIdFieldNumber = 3;
    private string documentId_ = "";
    /// <summary>
    /// The client-assigned document ID to use for this document.
    ///
    /// Optional. If not specified, an ID will be assigned by the service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DocumentId {
      get { return documentId_; }
      set {
        documentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "document" field.</summary>
    public const int DocumentFieldNumber = 4;
    private global::Google.Cloud.Firestore.V1Beta1.Document document_;
    /// <summary>
    /// Required. The document to create. `name` must not be set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.Document Document {
      get { return document_; }
      set {
        document_ = value;
      }
    }

    /// <summary>Field number for the "mask" field.</summary>
    public const int MaskFieldNumber = 5;
    private global::Google.Cloud.Firestore.V1Beta1.DocumentMask mask_;
    /// <summary>
    /// The fields to return. If not set, returns all fields.
    ///
    /// If the document has a field that is not present in this mask, that field
    /// will not be returned in the response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.DocumentMask Mask {
      get { return mask_; }
      set {
        mask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateDocumentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateDocumentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (CollectionId != other.CollectionId) return false;
      if (DocumentId != other.DocumentId) return false;
      if (!object.Equals(Document, other.Document)) return false;
      if (!object.Equals(Mask, other.Mask)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (CollectionId.Length != 0) hash ^= CollectionId.GetHashCode();
      if (DocumentId.Length != 0) hash ^= DocumentId.GetHashCode();
      if (document_ != null) hash ^= Document.GetHashCode();
      if (mask_ != null) hash ^= Mask.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (CollectionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CollectionId);
      }
      if (DocumentId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DocumentId);
      }
      if (document_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Document);
      }
      if (mask_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Mask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (CollectionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CollectionId);
      }
      if (DocumentId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DocumentId);
      }
      if (document_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Document);
      }
      if (mask_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Mask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (CollectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CollectionId);
      }
      if (DocumentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DocumentId);
      }
      if (document_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Document);
      }
      if (mask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mask);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateDocumentRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.CollectionId.Length != 0) {
        CollectionId = other.CollectionId;
      }
      if (other.DocumentId.Length != 0) {
        DocumentId = other.DocumentId;
      }
      if (other.document_ != null) {
        if (document_ == null) {
          Document = new global::Google.Cloud.Firestore.V1Beta1.Document();
        }
        Document.MergeFrom(other.Document);
      }
      if (other.mask_ != null) {
        if (mask_ == null) {
          Mask = new global::Google.Cloud.Firestore.V1Beta1.DocumentMask();
        }
        Mask.MergeFrom(other.Mask);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            CollectionId = input.ReadString();
            break;
          }
          case 26: {
            DocumentId = input.ReadString();
            break;
          }
          case 34: {
            if (document_ == null) {
              Document = new global::Google.Cloud.Firestore.V1Beta1.Document();
            }
            input.ReadMessage(Document);
            break;
          }
          case 42: {
            if (mask_ == null) {
              Mask = new global::Google.Cloud.Firestore.V1Beta1.DocumentMask();
            }
            input.ReadMessage(Mask);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            CollectionId = input.ReadString();
            break;
          }
          case 26: {
            DocumentId = input.ReadString();
            break;
          }
          case 34: {
            if (document_ == null) {
              Document = new global::Google.Cloud.Firestore.V1Beta1.Document();
            }
            input.ReadMessage(Document);
            break;
          }
          case 42: {
            if (mask_ == null) {
              Mask = new global::Google.Cloud.Firestore.V1Beta1.DocumentMask();
            }
            input.ReadMessage(Mask);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The request for [Firestore.UpdateDocument][google.firestore.v1beta1.Firestore.UpdateDocument].
  /// </summary>
  public sealed partial class UpdateDocumentRequest : pb::IMessage<UpdateDocumentRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UpdateDocumentRequest> _parser = new pb::MessageParser<UpdateDocumentRequest>(() => new UpdateDocumentRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateDocumentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.FirestoreReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDocumentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDocumentRequest(UpdateDocumentRequest other) : this() {
      document_ = other.document_ != null ? other.document_.Clone() : null;
      updateMask_ = other.updateMask_ != null ? other.updateMask_.Clone() : null;
      mask_ = other.mask_ != null ? other.mask_.Clone() : null;
      currentDocument_ = other.currentDocument_ != null ? other.currentDocument_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDocumentRequest Clone() {
      return new UpdateDocumentRequest(this);
    }

    /// <summary>Field number for the "document" field.</summary>
    public const int DocumentFieldNumber = 1;
    private global::Google.Cloud.Firestore.V1Beta1.Document document_;
    /// <summary>
    /// Required. The updated document.
    /// Creates the document if it does not already exist.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.Document Document {
      get { return document_; }
      set {
        document_ = value;
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 2;
    private global::Google.Cloud.Firestore.V1Beta1.DocumentMask updateMask_;
    /// <summary>
    /// The fields to update.
    /// None of the field paths in the mask may contain a reserved name.
    ///
    /// If the document exists on the server and has fields not referenced in the
    /// mask, they are left unchanged.
    /// Fields referenced in the mask, but not present in the input document, are
    /// deleted from the document on the server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.DocumentMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    /// <summary>Field number for the "mask" field.</summary>
    public const int MaskFieldNumber = 3;
    private global::Google.Cloud.Firestore.V1Beta1.DocumentMask mask_;
    /// <summary>
    /// The fields to return. If not set, returns all fields.
    ///
    /// If the document has a field that is not present in this mask, that field
    /// will not be returned in the response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.DocumentMask Mask {
      get { return mask_; }
      set {
        mask_ = value;
      }
    }

    /// <summary>Field number for the "current_document" field.</summary>
    public const int CurrentDocumentFieldNumber = 4;
    private global::Google.Cloud.Firestore.V1Beta1.Precondition currentDocument_;
    /// <summary>
    /// An optional precondition on the document.
    /// The request will fail if this is set and not met by the target document.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.Precondition CurrentDocument {
      get { return currentDocument_; }
      set {
        currentDocument_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateDocumentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateDocumentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Document, other.Document)) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      if (!object.Equals(Mask, other.Mask)) return false;
      if (!object.Equals(CurrentDocument, other.CurrentDocument)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (document_ != null) hash ^= Document.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      if (mask_ != null) hash ^= Mask.GetHashCode();
      if (currentDocument_ != null) hash ^= CurrentDocument.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (document_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Document);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UpdateMask);
      }
      if (mask_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Mask);
      }
      if (currentDocument_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CurrentDocument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (document_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Document);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UpdateMask);
      }
      if (mask_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Mask);
      }
      if (currentDocument_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CurrentDocument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (document_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Document);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      if (mask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mask);
      }
      if (currentDocument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentDocument);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateDocumentRequest other) {
      if (other == null) {
        return;
      }
      if (other.document_ != null) {
        if (document_ == null) {
          Document = new global::Google.Cloud.Firestore.V1Beta1.Document();
        }
        Document.MergeFrom(other.Document);
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          UpdateMask = new global::Google.Cloud.Firestore.V1Beta1.DocumentMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
      if (other.mask_ != null) {
        if (mask_ == null) {
          Mask = new global::Google.Cloud.Firestore.V1Beta1.DocumentMask();
        }
        Mask.MergeFrom(other.Mask);
      }
      if (other.currentDocument_ != null) {
        if (currentDocument_ == null) {
          CurrentDocument = new global::Google.Cloud.Firestore.V1Beta1.Precondition();
        }
        CurrentDocument.MergeFrom(other.CurrentDocument);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (document_ == null) {
              Document = new global::Google.Cloud.Firestore.V1Beta1.Document();
            }
            input.ReadMessage(Document);
            break;
          }
          case 18: {
            if (updateMask_ == null) {
              UpdateMask = new global::Google.Cloud.Firestore.V1Beta1.DocumentMask();
            }
            input.ReadMessage(UpdateMask);
            break;
          }
          case 26: {
            if (mask_ == null) {
              Mask = new global::Google.Cloud.Firestore.V1Beta1.DocumentMask();
            }
            input.ReadMessage(Mask);
            break;
          }
          case 34: {
            if (currentDocument_ == null) {
              CurrentDocument = new global::Google.Cloud.Firestore.V1Beta1.Precondition();
            }
            input.ReadMessage(CurrentDocument);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (document_ == null) {
              Document = new global::Google.Cloud.Firestore.V1Beta1.Document();
            }
            input.ReadMessage(Document);
            break;
          }
          case 18: {
            if (updateMask_ == null) {
              UpdateMask = new global::Google.Cloud.Firestore.V1Beta1.DocumentMask();
            }
            input.ReadMessage(UpdateMask);
            break;
          }
          case 26: {
            if (mask_ == null) {
              Mask = new global::Google.Cloud.Firestore.V1Beta1.DocumentMask();
            }
            input.ReadMessage(Mask);
            break;
          }
          case 34: {
            if (currentDocument_ == null) {
              CurrentDocument = new global::Google.Cloud.Firestore.V1Beta1.Precondition();
            }
            input.ReadMessage(CurrentDocument);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The request for [Firestore.DeleteDocument][google.firestore.v1beta1.Firestore.DeleteDocument].
  /// </summary>
  public sealed partial class DeleteDocumentRequest : pb::IMessage<DeleteDocumentRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeleteDocumentRequest> _parser = new pb::MessageParser<DeleteDocumentRequest>(() => new DeleteDocumentRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteDocumentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.FirestoreReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDocumentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDocumentRequest(DeleteDocumentRequest other) : this() {
      name_ = other.name_;
      currentDocument_ = other.currentDocument_ != null ? other.currentDocument_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDocumentRequest Clone() {
      return new DeleteDocumentRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Required. The resource name of the Document to delete. In the format:
    /// `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "current_document" field.</summary>
    public const int CurrentDocumentFieldNumber = 2;
    private global::Google.Cloud.Firestore.V1Beta1.Precondition currentDocument_;
    /// <summary>
    /// An optional precondition on the document.
    /// The request will fail if this is set and not met by the target document.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.Precondition CurrentDocument {
      get { return currentDocument_; }
      set {
        currentDocument_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteDocumentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteDocumentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(CurrentDocument, other.CurrentDocument)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (currentDocument_ != null) hash ^= CurrentDocument.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (currentDocument_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CurrentDocument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (currentDocument_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CurrentDocument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (currentDocument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentDocument);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteDocumentRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.currentDocument_ != null) {
        if (currentDocument_ == null) {
          CurrentDocument = new global::Google.Cloud.Firestore.V1Beta1.Precondition();
        }
        CurrentDocument.MergeFrom(other.CurrentDocument);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (currentDocument_ == null) {
              CurrentDocument = new global::Google.Cloud.Firestore.V1Beta1.Precondition();
            }
            input.ReadMessage(CurrentDocument);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (currentDocument_ == null) {
              CurrentDocument = new global::Google.Cloud.Firestore.V1Beta1.Precondition();
            }
            input.ReadMessage(CurrentDocument);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The request for [Firestore.BatchGetDocuments][google.firestore.v1beta1.Firestore.BatchGetDocuments].
  /// </summary>
  public sealed partial class BatchGetDocumentsRequest : pb::IMessage<BatchGetDocumentsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BatchGetDocumentsRequest> _parser = new pb::MessageParser<BatchGetDocumentsRequest>(() => new BatchGetDocumentsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchGetDocumentsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.FirestoreReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchGetDocumentsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchGetDocumentsRequest(BatchGetDocumentsRequest other) : this() {
      database_ = other.database_;
      documents_ = other.documents_.Clone();
      mask_ = other.mask_ != null ? other.mask_.Clone() : null;
      switch (other.ConsistencySelectorCase) {
        case ConsistencySelectorOneofCase.Transaction:
          Transaction = other.Transaction;
          break;
        case ConsistencySelectorOneofCase.NewTransaction:
          NewTransaction = other.NewTransaction.Clone();
          break;
        case ConsistencySelectorOneofCase.ReadTime:
          ReadTime = other.ReadTime.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchGetDocumentsRequest Clone() {
      return new BatchGetDocumentsRequest(this);
    }

    /// <summary>Field number for the "database" field.</summary>
    public const int DatabaseFieldNumber = 1;
    private string database_ = "";
    /// <summary>
    /// Required. The database name. In the format:
    /// `projects/{project_id}/databases/{database_id}`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Database {
      get { return database_; }
      set {
        database_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "documents" field.</summary>
    public const int DocumentsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_documents_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> documents_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The names of the documents to retrieve. In the format:
    /// `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
    /// The request will fail if any of the document is not a child resource of the
    /// given `database`. Duplicate names will be elided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Documents {
      get { return documents_; }
    }

    /// <summary>Field number for the "mask" field.</summary>
    public const int MaskFieldNumber = 3;
    private global::Google.Cloud.Firestore.V1Beta1.DocumentMask mask_;
    /// <summary>
    /// The fields to return. If not set, returns all fields.
    ///
    /// If a document has a field that is not present in this mask, that field will
    /// not be returned in the response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.DocumentMask Mask {
      get { return mask_; }
      set {
        mask_ = value;
      }
    }

    /// <summary>Field number for the "transaction" field.</summary>
    public const int TransactionFieldNumber = 4;
    /// <summary>
    /// Reads documents in a transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Transaction {
      get { return consistencySelectorCase_ == ConsistencySelectorOneofCase.Transaction ? (pb::ByteString) consistencySelector_ : pb::ByteString.Empty; }
      set {
        consistencySelector_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        consistencySelectorCase_ = ConsistencySelectorOneofCase.Transaction;
      }
    }

    /// <summary>Field number for the "new_transaction" field.</summary>
    public const int NewTransactionFieldNumber = 5;
    /// <summary>
    /// Starts a new transaction and reads the documents.
    /// Defaults to a read-only transaction.
    /// The new transaction ID will be returned as the first response in the
    /// stream.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.TransactionOptions NewTransaction {
      get { return consistencySelectorCase_ == ConsistencySelectorOneofCase.NewTransaction ? (global::Google.Cloud.Firestore.V1Beta1.TransactionOptions) consistencySelector_ : null; }
      set {
        consistencySelector_ = value;
        consistencySelectorCase_ = value == null ? ConsistencySelectorOneofCase.None : ConsistencySelectorOneofCase.NewTransaction;
      }
    }

    /// <summary>Field number for the "read_time" field.</summary>
    public const int ReadTimeFieldNumber = 7;
    /// <summary>
    /// Reads documents as they were at the given time.
    /// This may not be older than 270 seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ReadTime {
      get { return consistencySelectorCase_ == ConsistencySelectorOneofCase.ReadTime ? (global::Google.Protobuf.WellKnownTypes.Timestamp) consistencySelector_ : null; }
      set {
        consistencySelector_ = value;
        consistencySelectorCase_ = value == null ? ConsistencySelectorOneofCase.None : ConsistencySelectorOneofCase.ReadTime;
      }
    }

    private object consistencySelector_;
    /// <summary>Enum of possible cases for the "consistency_selector" oneof.</summary>
    public enum ConsistencySelectorOneofCase {
      None = 0,
      Transaction = 4,
      NewTransaction = 5,
      ReadTime = 7,
    }
    private ConsistencySelectorOneofCase consistencySelectorCase_ = ConsistencySelectorOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsistencySelectorOneofCase ConsistencySelectorCase {
      get { return consistencySelectorCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConsistencySelector() {
      consistencySelectorCase_ = ConsistencySelectorOneofCase.None;
      consistencySelector_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchGetDocumentsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchGetDocumentsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Database != other.Database) return false;
      if(!documents_.Equals(other.documents_)) return false;
      if (!object.Equals(Mask, other.Mask)) return false;
      if (Transaction != other.Transaction) return false;
      if (!object.Equals(NewTransaction, other.NewTransaction)) return false;
      if (!object.Equals(ReadTime, other.ReadTime)) return false;
      if (ConsistencySelectorCase != other.ConsistencySelectorCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Database.Length != 0) hash ^= Database.GetHashCode();
      hash ^= documents_.GetHashCode();
      if (mask_ != null) hash ^= Mask.GetHashCode();
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.Transaction) hash ^= Transaction.GetHashCode();
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.NewTransaction) hash ^= NewTransaction.GetHashCode();
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.ReadTime) hash ^= ReadTime.GetHashCode();
      hash ^= (int) consistencySelectorCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Database.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Database);
      }
      documents_.WriteTo(output, _repeated_documents_codec);
      if (mask_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Mask);
      }
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.Transaction) {
        output.WriteRawTag(34);
        output.WriteBytes(Transaction);
      }
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.NewTransaction) {
        output.WriteRawTag(42);
        output.WriteMessage(NewTransaction);
      }
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.ReadTime) {
        output.WriteRawTag(58);
        output.WriteMessage(ReadTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Database.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Database);
      }
      documents_.WriteTo(ref output, _repeated_documents_codec);
      if (mask_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Mask);
      }
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.Transaction) {
        output.WriteRawTag(34);
        output.WriteBytes(Transaction);
      }
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.NewTransaction) {
        output.WriteRawTag(42);
        output.WriteMessage(NewTransaction);
      }
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.ReadTime) {
        output.WriteRawTag(58);
        output.WriteMessage(ReadTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Database.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Database);
      }
      size += documents_.CalculateSize(_repeated_documents_codec);
      if (mask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mask);
      }
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.Transaction) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Transaction);
      }
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.NewTransaction) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewTransaction);
      }
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.ReadTime) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReadTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchGetDocumentsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Database.Length != 0) {
        Database = other.Database;
      }
      documents_.Add(other.documents_);
      if (other.mask_ != null) {
        if (mask_ == null) {
          Mask = new global::Google.Cloud.Firestore.V1Beta1.DocumentMask();
        }
        Mask.MergeFrom(other.Mask);
      }
      switch (other.ConsistencySelectorCase) {
        case ConsistencySelectorOneofCase.Transaction:
          Transaction = other.Transaction;
          break;
        case ConsistencySelectorOneofCase.NewTransaction:
          if (NewTransaction == null) {
            NewTransaction = new global::Google.Cloud.Firestore.V1Beta1.TransactionOptions();
          }
          NewTransaction.MergeFrom(other.NewTransaction);
          break;
        case ConsistencySelectorOneofCase.ReadTime:
          if (ReadTime == null) {
            ReadTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
          }
          ReadTime.MergeFrom(other.ReadTime);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Database = input.ReadString();
            break;
          }
          case 18: {
            documents_.AddEntriesFrom(input, _repeated_documents_codec);
            break;
          }
          case 26: {
            if (mask_ == null) {
              Mask = new global::Google.Cloud.Firestore.V1Beta1.DocumentMask();
            }
            input.ReadMessage(Mask);
            break;
          }
          case 34: {
            Transaction = input.ReadBytes();
            break;
          }
          case 42: {
            global::Google.Cloud.Firestore.V1Beta1.TransactionOptions subBuilder = new global::Google.Cloud.Firestore.V1Beta1.TransactionOptions();
            if (consistencySelectorCase_ == ConsistencySelectorOneofCase.NewTransaction) {
              subBuilder.MergeFrom(NewTransaction);
            }
            input.ReadMessage(subBuilder);
            NewTransaction = subBuilder;
            break;
          }
          case 58: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (consistencySelectorCase_ == ConsistencySelectorOneofCase.ReadTime) {
              subBuilder.MergeFrom(ReadTime);
            }
            input.ReadMessage(subBuilder);
            ReadTime = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Database = input.ReadString();
            break;
          }
          case 18: {
            documents_.AddEntriesFrom(ref input, _repeated_documents_codec);
            break;
          }
          case 26: {
            if (mask_ == null) {
              Mask = new global::Google.Cloud.Firestore.V1Beta1.DocumentMask();
            }
            input.ReadMessage(Mask);
            break;
          }
          case 34: {
            Transaction = input.ReadBytes();
            break;
          }
          case 42: {
            global::Google.Cloud.Firestore.V1Beta1.TransactionOptions subBuilder = new global::Google.Cloud.Firestore.V1Beta1.TransactionOptions();
            if (consistencySelectorCase_ == ConsistencySelectorOneofCase.NewTransaction) {
              subBuilder.MergeFrom(NewTransaction);
            }
            input.ReadMessage(subBuilder);
            NewTransaction = subBuilder;
            break;
          }
          case 58: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (consistencySelectorCase_ == ConsistencySelectorOneofCase.ReadTime) {
              subBuilder.MergeFrom(ReadTime);
            }
            input.ReadMessage(subBuilder);
            ReadTime = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The streamed response for [Firestore.BatchGetDocuments][google.firestore.v1beta1.Firestore.BatchGetDocuments].
  /// </summary>
  public sealed partial class BatchGetDocumentsResponse : pb::IMessage<BatchGetDocumentsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BatchGetDocumentsResponse> _parser = new pb::MessageParser<BatchGetDocumentsResponse>(() => new BatchGetDocumentsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchGetDocumentsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.FirestoreReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchGetDocumentsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchGetDocumentsResponse(BatchGetDocumentsResponse other) : this() {
      transaction_ = other.transaction_;
      readTime_ = other.readTime_ != null ? other.readTime_.Clone() : null;
      switch (other.ResultCase) {
        case ResultOneofCase.Found:
          Found = other.Found.Clone();
          break;
        case ResultOneofCase.Missing:
          Missing = other.Missing;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchGetDocumentsResponse Clone() {
      return new BatchGetDocumentsResponse(this);
    }

    /// <summary>Field number for the "found" field.</summary>
    public const int FoundFieldNumber = 1;
    /// <summary>
    /// A document that was requested.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.Document Found {
      get { return resultCase_ == ResultOneofCase.Found ? (global::Google.Cloud.Firestore.V1Beta1.Document) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.Found;
      }
    }

    /// <summary>Field number for the "missing" field.</summary>
    public const int MissingFieldNumber = 2;
    /// <summary>
    /// A document name that was requested but does not exist. In the format:
    /// `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Missing {
      get { return resultCase_ == ResultOneofCase.Missing ? (string) result_ : ""; }
      set {
        result_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        resultCase_ = ResultOneofCase.Missing;
      }
    }

    /// <summary>Field number for the "transaction" field.</summary>
    public const int TransactionFieldNumber = 3;
    private pb::ByteString transaction_ = pb::ByteString.Empty;
    /// <summary>
    /// The transaction that was started as part of this request.
    /// Will only be set in the first response, and only if
    /// [BatchGetDocumentsRequest.new_transaction][google.firestore.v1beta1.BatchGetDocumentsRequest.new_transaction] was set in the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Transaction {
      get { return transaction_; }
      set {
        transaction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "read_time" field.</summary>
    public const int ReadTimeFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp readTime_;
    /// <summary>
    /// The time at which the document was read.
    /// This may be monotically increasing, in this case the previous documents in
    /// the result stream are guaranteed not to have changed between their
    /// read_time and this one.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ReadTime {
      get { return readTime_; }
      set {
        readTime_ = value;
      }
    }

    private object result_;
    /// <summary>Enum of possible cases for the "result" oneof.</summary>
    public enum ResultOneofCase {
      None = 0,
      Found = 1,
      Missing = 2,
    }
    private ResultOneofCase resultCase_ = ResultOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultOneofCase ResultCase {
      get { return resultCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      resultCase_ = ResultOneofCase.None;
      result_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchGetDocumentsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchGetDocumentsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Found, other.Found)) return false;
      if (Missing != other.Missing) return false;
      if (Transaction != other.Transaction) return false;
      if (!object.Equals(ReadTime, other.ReadTime)) return false;
      if (ResultCase != other.ResultCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resultCase_ == ResultOneofCase.Found) hash ^= Found.GetHashCode();
      if (resultCase_ == ResultOneofCase.Missing) hash ^= Missing.GetHashCode();
      if (Transaction.Length != 0) hash ^= Transaction.GetHashCode();
      if (readTime_ != null) hash ^= ReadTime.GetHashCode();
      hash ^= (int) resultCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (resultCase_ == ResultOneofCase.Found) {
        output.WriteRawTag(10);
        output.WriteMessage(Found);
      }
      if (resultCase_ == ResultOneofCase.Missing) {
        output.WriteRawTag(18);
        output.WriteString(Missing);
      }
      if (Transaction.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Transaction);
      }
      if (readTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ReadTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (resultCase_ == ResultOneofCase.Found) {
        output.WriteRawTag(10);
        output.WriteMessage(Found);
      }
      if (resultCase_ == ResultOneofCase.Missing) {
        output.WriteRawTag(18);
        output.WriteString(Missing);
      }
      if (Transaction.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Transaction);
      }
      if (readTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ReadTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resultCase_ == ResultOneofCase.Found) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Found);
      }
      if (resultCase_ == ResultOneofCase.Missing) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Missing);
      }
      if (Transaction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Transaction);
      }
      if (readTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReadTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchGetDocumentsResponse other) {
      if (other == null) {
        return;
      }
      if (other.Transaction.Length != 0) {
        Transaction = other.Transaction;
      }
      if (other.readTime_ != null) {
        if (readTime_ == null) {
          ReadTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ReadTime.MergeFrom(other.ReadTime);
      }
      switch (other.ResultCase) {
        case ResultOneofCase.Found:
          if (Found == null) {
            Found = new global::Google.Cloud.Firestore.V1Beta1.Document();
          }
          Found.MergeFrom(other.Found);
          break;
        case ResultOneofCase.Missing:
          Missing = other.Missing;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Google.Cloud.Firestore.V1Beta1.Document subBuilder = new global::Google.Cloud.Firestore.V1Beta1.Document();
            if (resultCase_ == ResultOneofCase.Found) {
              subBuilder.MergeFrom(Found);
            }
            input.ReadMessage(subBuilder);
            Found = subBuilder;
            break;
          }
          case 18: {
            Missing = input.ReadString();
            break;
          }
          case 26: {
            Transaction = input.ReadBytes();
            break;
          }
          case 34: {
            if (readTime_ == null) {
              ReadTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ReadTime);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Google.Cloud.Firestore.V1Beta1.Document subBuilder = new global::Google.Cloud.Firestore.V1Beta1.Document();
            if (resultCase_ == ResultOneofCase.Found) {
              subBuilder.MergeFrom(Found);
            }
            input.ReadMessage(subBuilder);
            Found = subBuilder;
            break;
          }
          case 18: {
            Missing = input.ReadString();
            break;
          }
          case 26: {
            Transaction = input.ReadBytes();
            break;
          }
          case 34: {
            if (readTime_ == null) {
              ReadTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ReadTime);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The request for [Firestore.BeginTransaction][google.firestore.v1beta1.Firestore.BeginTransaction].
  /// </summary>
  public sealed partial class BeginTransactionRequest : pb::IMessage<BeginTransactionRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BeginTransactionRequest> _parser = new pb::MessageParser<BeginTransactionRequest>(() => new BeginTransactionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BeginTransactionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.FirestoreReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeginTransactionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeginTransactionRequest(BeginTransactionRequest other) : this() {
      database_ = other.database_;
      options_ = other.options_ != null ? other.options_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeginTransactionRequest Clone() {
      return new BeginTransactionRequest(this);
    }

    /// <summary>Field number for the "database" field.</summary>
    public const int DatabaseFieldNumber = 1;
    private string database_ = "";
    /// <summary>
    /// Required. The database name. In the format:
    /// `projects/{project_id}/databases/{database_id}`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Database {
      get { return database_; }
      set {
        database_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 2;
    private global::Google.Cloud.Firestore.V1Beta1.TransactionOptions options_;
    /// <summary>
    /// The options for the transaction.
    /// Defaults to a read-write transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.TransactionOptions Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BeginTransactionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BeginTransactionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Database != other.Database) return false;
      if (!object.Equals(Options, other.Options)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Database.Length != 0) hash ^= Database.GetHashCode();
      if (options_ != null) hash ^= Options.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Database.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Database);
      }
      if (options_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Database.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Database);
      }
      if (options_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Database.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Database);
      }
      if (options_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BeginTransactionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Database.Length != 0) {
        Database = other.Database;
      }
      if (other.options_ != null) {
        if (options_ == null) {
          Options = new global::Google.Cloud.Firestore.V1Beta1.TransactionOptions();
        }
        Options.MergeFrom(other.Options);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Database = input.ReadString();
            break;
          }
          case 18: {
            if (options_ == null) {
              Options = new global::Google.Cloud.Firestore.V1Beta1.TransactionOptions();
            }
            input.ReadMessage(Options);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Database = input.ReadString();
            break;
          }
          case 18: {
            if (options_ == null) {
              Options = new global::Google.Cloud.Firestore.V1Beta1.TransactionOptions();
            }
            input.ReadMessage(Options);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The response for [Firestore.BeginTransaction][google.firestore.v1beta1.Firestore.BeginTransaction].
  /// </summary>
  public sealed partial class BeginTransactionResponse : pb::IMessage<BeginTransactionResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BeginTransactionResponse> _parser = new pb::MessageParser<BeginTransactionResponse>(() => new BeginTransactionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BeginTransactionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.FirestoreReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeginTransactionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeginTransactionResponse(BeginTransactionResponse other) : this() {
      transaction_ = other.transaction_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeginTransactionResponse Clone() {
      return new BeginTransactionResponse(this);
    }

    /// <summary>Field number for the "transaction" field.</summary>
    public const int TransactionFieldNumber = 1;
    private pb::ByteString transaction_ = pb::ByteString.Empty;
    /// <summary>
    /// The transaction that was started.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Transaction {
      get { return transaction_; }
      set {
        transaction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BeginTransactionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BeginTransactionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Transaction != other.Transaction) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Transaction.Length != 0) hash ^= Transaction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Transaction.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Transaction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Transaction.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Transaction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Transaction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Transaction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BeginTransactionResponse other) {
      if (other == null) {
        return;
      }
      if (other.Transaction.Length != 0) {
        Transaction = other.Transaction;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Transaction = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Transaction = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The request for [Firestore.Commit][google.firestore.v1beta1.Firestore.Commit].
  /// </summary>
  public sealed partial class CommitRequest : pb::IMessage<CommitRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CommitRequest> _parser = new pb::MessageParser<CommitRequest>(() => new CommitRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommitRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.FirestoreReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitRequest(CommitRequest other) : this() {
      database_ = other.database_;
      writes_ = other.writes_.Clone();
      transaction_ = other.transaction_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitRequest Clone() {
      return new CommitRequest(this);
    }

    /// <summary>Field number for the "database" field.</summary>
    public const int DatabaseFieldNumber = 1;
    private string database_ = "";
    /// <summary>
    /// Required. The database name. In the format:
    /// `projects/{project_id}/databases/{database_id}`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Database {
      get { return database_; }
      set {
        database_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "writes" field.</summary>
    public const int WritesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Cloud.Firestore.V1Beta1.Write> _repeated_writes_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Firestore.V1Beta1.Write.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.Write> writes_ = new pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.Write>();
    /// <summary>
    /// The writes to apply.
    ///
    /// Always executed atomically and in order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.Write> Writes {
      get { return writes_; }
    }

    /// <summary>Field number for the "transaction" field.</summary>
    public const int TransactionFieldNumber = 3;
    private pb::ByteString transaction_ = pb::ByteString.Empty;
    /// <summary>
    /// If set, applies all writes in this transaction, and commits it.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Transaction {
      get { return transaction_; }
      set {
        transaction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommitRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommitRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Database != other.Database) return false;
      if(!writes_.Equals(other.writes_)) return false;
      if (Transaction != other.Transaction) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Database.Length != 0) hash ^= Database.GetHashCode();
      hash ^= writes_.GetHashCode();
      if (Transaction.Length != 0) hash ^= Transaction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Database.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Database);
      }
      writes_.WriteTo(output, _repeated_writes_codec);
      if (Transaction.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Transaction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Database.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Database);
      }
      writes_.WriteTo(ref output, _repeated_writes_codec);
      if (Transaction.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Transaction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Database.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Database);
      }
      size += writes_.CalculateSize(_repeated_writes_codec);
      if (Transaction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Transaction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommitRequest other) {
      if (other == null) {
        return;
      }
      if (other.Database.Length != 0) {
        Database = other.Database;
      }
      writes_.Add(other.writes_);
      if (other.Transaction.Length != 0) {
        Transaction = other.Transaction;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Database = input.ReadString();
            break;
          }
          case 18: {
            writes_.AddEntriesFrom(input, _repeated_writes_codec);
            break;
          }
          case 26: {
            Transaction = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Database = input.ReadString();
            break;
          }
          case 18: {
            writes_.AddEntriesFrom(ref input, _repeated_writes_codec);
            break;
          }
          case 26: {
            Transaction = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The response for [Firestore.Commit][google.firestore.v1beta1.Firestore.Commit].
  /// </summary>
  public sealed partial class CommitResponse : pb::IMessage<CommitResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CommitResponse> _parser = new pb::MessageParser<CommitResponse>(() => new CommitResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommitResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.FirestoreReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitResponse(CommitResponse other) : this() {
      writeResults_ = other.writeResults_.Clone();
      commitTime_ = other.commitTime_ != null ? other.commitTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitResponse Clone() {
      return new CommitResponse(this);
    }

    /// <summary>Field number for the "write_results" field.</summary>
    public const int WriteResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Firestore.V1Beta1.WriteResult> _repeated_writeResults_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Firestore.V1Beta1.WriteResult.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.WriteResult> writeResults_ = new pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.WriteResult>();
    /// <summary>
    /// The result of applying the writes.
    ///
    /// This i-th write result corresponds to the i-th write in the
    /// request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.WriteResult> WriteResults {
      get { return writeResults_; }
    }

    /// <summary>Field number for the "commit_time" field.</summary>
    public const int CommitTimeFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp commitTime_;
    /// <summary>
    /// The time at which the commit occurred. Any read with an equal or greater
    /// `read_time` is guaranteed to see the effects of the commit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CommitTime {
      get { return commitTime_; }
      set {
        commitTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommitResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommitResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!writeResults_.Equals(other.writeResults_)) return false;
      if (!object.Equals(CommitTime, other.CommitTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= writeResults_.GetHashCode();
      if (commitTime_ != null) hash ^= CommitTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      writeResults_.WriteTo(output, _repeated_writeResults_codec);
      if (commitTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CommitTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      writeResults_.WriteTo(ref output, _repeated_writeResults_codec);
      if (commitTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CommitTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += writeResults_.CalculateSize(_repeated_writeResults_codec);
      if (commitTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommitTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommitResponse other) {
      if (other == null) {
        return;
      }
      writeResults_.Add(other.writeResults_);
      if (other.commitTime_ != null) {
        if (commitTime_ == null) {
          CommitTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CommitTime.MergeFrom(other.CommitTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            writeResults_.AddEntriesFrom(input, _repeated_writeResults_codec);
            break;
          }
          case 18: {
            if (commitTime_ == null) {
              CommitTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CommitTime);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            writeResults_.AddEntriesFrom(ref input, _repeated_writeResults_codec);
            break;
          }
          case 18: {
            if (commitTime_ == null) {
              CommitTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CommitTime);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The request for [Firestore.Rollback][google.firestore.v1beta1.Firestore.Rollback].
  /// </summary>
  public sealed partial class RollbackRequest : pb::IMessage<RollbackRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RollbackRequest> _parser = new pb::MessageParser<RollbackRequest>(() => new RollbackRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RollbackRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.FirestoreReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RollbackRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RollbackRequest(RollbackRequest other) : this() {
      database_ = other.database_;
      transaction_ = other.transaction_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RollbackRequest Clone() {
      return new RollbackRequest(this);
    }

    /// <summary>Field number for the "database" field.</summary>
    public const int DatabaseFieldNumber = 1;
    private string database_ = "";
    /// <summary>
    /// Required. The database name. In the format:
    /// `projects/{project_id}/databases/{database_id}`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Database {
      get { return database_; }
      set {
        database_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "transaction" field.</summary>
    public const int TransactionFieldNumber = 2;
    private pb::ByteString transaction_ = pb::ByteString.Empty;
    /// <summary>
    /// Required. The transaction to roll back.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Transaction {
      get { return transaction_; }
      set {
        transaction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RollbackRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RollbackRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Database != other.Database) return false;
      if (Transaction != other.Transaction) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Database.Length != 0) hash ^= Database.GetHashCode();
      if (Transaction.Length != 0) hash ^= Transaction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Database.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Database);
      }
      if (Transaction.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Transaction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Database.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Database);
      }
      if (Transaction.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Transaction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Database.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Database);
      }
      if (Transaction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Transaction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RollbackRequest other) {
      if (other == null) {
        return;
      }
      if (other.Database.Length != 0) {
        Database = other.Database;
      }
      if (other.Transaction.Length != 0) {
        Transaction = other.Transaction;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Database = input.ReadString();
            break;
          }
          case 18: {
            Transaction = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Database = input.ReadString();
            break;
          }
          case 18: {
            Transaction = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The request for [Firestore.RunQuery][google.firestore.v1beta1.Firestore.RunQuery].
  /// </summary>
  public sealed partial class RunQueryRequest : pb::IMessage<RunQueryRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RunQueryRequest> _parser = new pb::MessageParser<RunQueryRequest>(() => new RunQueryRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunQueryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.FirestoreReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunQueryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunQueryRequest(RunQueryRequest other) : this() {
      parent_ = other.parent_;
      switch (other.QueryTypeCase) {
        case QueryTypeOneofCase.StructuredQuery:
          StructuredQuery = other.StructuredQuery.Clone();
          break;
      }

      switch (other.ConsistencySelectorCase) {
        case ConsistencySelectorOneofCase.Transaction:
          Transaction = other.Transaction;
          break;
        case ConsistencySelectorOneofCase.NewTransaction:
          NewTransaction = other.NewTransaction.Clone();
          break;
        case ConsistencySelectorOneofCase.ReadTime:
          ReadTime = other.ReadTime.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunQueryRequest Clone() {
      return new RunQueryRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// Required. The parent resource name. In the format:
    /// `projects/{project_id}/databases/{database_id}/documents` or
    /// `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
    /// For example:
    /// `projects/my-project/databases/my-database/documents` or
    /// `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "structured_query" field.</summary>
    public const int StructuredQueryFieldNumber = 2;
    /// <summary>
    /// A structured query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.StructuredQuery StructuredQuery {
      get { return queryTypeCase_ == QueryTypeOneofCase.StructuredQuery ? (global::Google.Cloud.Firestore.V1Beta1.StructuredQuery) queryType_ : null; }
      set {
        queryType_ = value;
        queryTypeCase_ = value == null ? QueryTypeOneofCase.None : QueryTypeOneofCase.StructuredQuery;
      }
    }

    /// <summary>Field number for the "transaction" field.</summary>
    public const int TransactionFieldNumber = 5;
    /// <summary>
    /// Reads documents in a transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Transaction {
      get { return consistencySelectorCase_ == ConsistencySelectorOneofCase.Transaction ? (pb::ByteString) consistencySelector_ : pb::ByteString.Empty; }
      set {
        consistencySelector_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        consistencySelectorCase_ = ConsistencySelectorOneofCase.Transaction;
      }
    }

    /// <summary>Field number for the "new_transaction" field.</summary>
    public const int NewTransactionFieldNumber = 6;
    /// <summary>
    /// Starts a new transaction and reads the documents.
    /// Defaults to a read-only transaction.
    /// The new transaction ID will be returned as the first response in the
    /// stream.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.TransactionOptions NewTransaction {
      get { return consistencySelectorCase_ == ConsistencySelectorOneofCase.NewTransaction ? (global::Google.Cloud.Firestore.V1Beta1.TransactionOptions) consistencySelector_ : null; }
      set {
        consistencySelector_ = value;
        consistencySelectorCase_ = value == null ? ConsistencySelectorOneofCase.None : ConsistencySelectorOneofCase.NewTransaction;
      }
    }

    /// <summary>Field number for the "read_time" field.</summary>
    public const int ReadTimeFieldNumber = 7;
    /// <summary>
    /// Reads documents as they were at the given time.
    /// This may not be older than 270 seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ReadTime {
      get { return consistencySelectorCase_ == ConsistencySelectorOneofCase.ReadTime ? (global::Google.Protobuf.WellKnownTypes.Timestamp) consistencySelector_ : null; }
      set {
        consistencySelector_ = value;
        consistencySelectorCase_ = value == null ? ConsistencySelectorOneofCase.None : ConsistencySelectorOneofCase.ReadTime;
      }
    }

    private object queryType_;
    /// <summary>Enum of possible cases for the "query_type" oneof.</summary>
    public enum QueryTypeOneofCase {
      None = 0,
      StructuredQuery = 2,
    }
    private QueryTypeOneofCase queryTypeCase_ = QueryTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryTypeOneofCase QueryTypeCase {
      get { return queryTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQueryType() {
      queryTypeCase_ = QueryTypeOneofCase.None;
      queryType_ = null;
    }

    private object consistencySelector_;
    /// <summary>Enum of possible cases for the "consistency_selector" oneof.</summary>
    public enum ConsistencySelectorOneofCase {
      None = 0,
      Transaction = 5,
      NewTransaction = 6,
      ReadTime = 7,
    }
    private ConsistencySelectorOneofCase consistencySelectorCase_ = ConsistencySelectorOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsistencySelectorOneofCase ConsistencySelectorCase {
      get { return consistencySelectorCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConsistencySelector() {
      consistencySelectorCase_ = ConsistencySelectorOneofCase.None;
      consistencySelector_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunQueryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunQueryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (!object.Equals(StructuredQuery, other.StructuredQuery)) return false;
      if (Transaction != other.Transaction) return false;
      if (!object.Equals(NewTransaction, other.NewTransaction)) return false;
      if (!object.Equals(ReadTime, other.ReadTime)) return false;
      if (QueryTypeCase != other.QueryTypeCase) return false;
      if (ConsistencySelectorCase != other.ConsistencySelectorCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (queryTypeCase_ == QueryTypeOneofCase.StructuredQuery) hash ^= StructuredQuery.GetHashCode();
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.Transaction) hash ^= Transaction.GetHashCode();
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.NewTransaction) hash ^= NewTransaction.GetHashCode();
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.ReadTime) hash ^= ReadTime.GetHashCode();
      hash ^= (int) queryTypeCase_;
      hash ^= (int) consistencySelectorCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (queryTypeCase_ == QueryTypeOneofCase.StructuredQuery) {
        output.WriteRawTag(18);
        output.WriteMessage(StructuredQuery);
      }
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.Transaction) {
        output.WriteRawTag(42);
        output.WriteBytes(Transaction);
      }
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.NewTransaction) {
        output.WriteRawTag(50);
        output.WriteMessage(NewTransaction);
      }
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.ReadTime) {
        output.WriteRawTag(58);
        output.WriteMessage(ReadTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (queryTypeCase_ == QueryTypeOneofCase.StructuredQuery) {
        output.WriteRawTag(18);
        output.WriteMessage(StructuredQuery);
      }
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.Transaction) {
        output.WriteRawTag(42);
        output.WriteBytes(Transaction);
      }
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.NewTransaction) {
        output.WriteRawTag(50);
        output.WriteMessage(NewTransaction);
      }
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.ReadTime) {
        output.WriteRawTag(58);
        output.WriteMessage(ReadTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (queryTypeCase_ == QueryTypeOneofCase.StructuredQuery) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StructuredQuery);
      }
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.Transaction) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Transaction);
      }
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.NewTransaction) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewTransaction);
      }
      if (consistencySelectorCase_ == ConsistencySelectorOneofCase.ReadTime) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReadTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunQueryRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      switch (other.QueryTypeCase) {
        case QueryTypeOneofCase.StructuredQuery:
          if (StructuredQuery == null) {
            StructuredQuery = new global::Google.Cloud.Firestore.V1Beta1.StructuredQuery();
          }
          StructuredQuery.MergeFrom(other.StructuredQuery);
          break;
      }

      switch (other.ConsistencySelectorCase) {
        case ConsistencySelectorOneofCase.Transaction:
          Transaction = other.Transaction;
          break;
        case ConsistencySelectorOneofCase.NewTransaction:
          if (NewTransaction == null) {
            NewTransaction = new global::Google.Cloud.Firestore.V1Beta1.TransactionOptions();
          }
          NewTransaction.MergeFrom(other.NewTransaction);
          break;
        case ConsistencySelectorOneofCase.ReadTime:
          if (ReadTime == null) {
            ReadTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
          }
          ReadTime.MergeFrom(other.ReadTime);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            global::Google.Cloud.Firestore.V1Beta1.StructuredQuery subBuilder = new global::Google.Cloud.Firestore.V1Beta1.StructuredQuery();
            if (queryTypeCase_ == QueryTypeOneofCase.StructuredQuery) {
              subBuilder.MergeFrom(StructuredQuery);
            }
            input.ReadMessage(subBuilder);
            StructuredQuery = subBuilder;
            break;
          }
          case 42: {
            Transaction = input.ReadBytes();
            break;
          }
          case 50: {
            global::Google.Cloud.Firestore.V1Beta1.TransactionOptions subBuilder = new global::Google.Cloud.Firestore.V1Beta1.TransactionOptions();
            if (consistencySelectorCase_ == ConsistencySelectorOneofCase.NewTransaction) {
              subBuilder.MergeFrom(NewTransaction);
            }
            input.ReadMessage(subBuilder);
            NewTransaction = subBuilder;
            break;
          }
          case 58: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (consistencySelectorCase_ == ConsistencySelectorOneofCase.ReadTime) {
              subBuilder.MergeFrom(ReadTime);
            }
            input.ReadMessage(subBuilder);
            ReadTime = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            global::Google.Cloud.Firestore.V1Beta1.StructuredQuery subBuilder = new global::Google.Cloud.Firestore.V1Beta1.StructuredQuery();
            if (queryTypeCase_ == QueryTypeOneofCase.StructuredQuery) {
              subBuilder.MergeFrom(StructuredQuery);
            }
            input.ReadMessage(subBuilder);
            StructuredQuery = subBuilder;
            break;
          }
          case 42: {
            Transaction = input.ReadBytes();
            break;
          }
          case 50: {
            global::Google.Cloud.Firestore.V1Beta1.TransactionOptions subBuilder = new global::Google.Cloud.Firestore.V1Beta1.TransactionOptions();
            if (consistencySelectorCase_ == ConsistencySelectorOneofCase.NewTransaction) {
              subBuilder.MergeFrom(NewTransaction);
            }
            input.ReadMessage(subBuilder);
            NewTransaction = subBuilder;
            break;
          }
          case 58: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (consistencySelectorCase_ == ConsistencySelectorOneofCase.ReadTime) {
              subBuilder.MergeFrom(ReadTime);
            }
            input.ReadMessage(subBuilder);
            ReadTime = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The response for [Firestore.RunQuery][google.firestore.v1beta1.Firestore.RunQuery].
  /// </summary>
  public sealed partial class RunQueryResponse : pb::IMessage<RunQueryResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RunQueryResponse> _parser = new pb::MessageParser<RunQueryResponse>(() => new RunQueryResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunQueryResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.FirestoreReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunQueryResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunQueryResponse(RunQueryResponse other) : this() {
      transaction_ = other.transaction_;
      document_ = other.document_ != null ? other.document_.Clone() : null;
      readTime_ = other.readTime_ != null ? other.readTime_.Clone() : null;
      skippedResults_ = other.skippedResults_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunQueryResponse Clone() {
      return new RunQueryResponse(this);
    }

    /// <summary>Field number for the "transaction" field.</summary>
    public const int TransactionFieldNumber = 2;
    private pb::ByteString transaction_ = pb::ByteString.Empty;
    /// <summary>
    /// The transaction that was started as part of this request.
    /// Can only be set in the first response, and only if
    /// [RunQueryRequest.new_transaction][google.firestore.v1beta1.RunQueryRequest.new_transaction] was set in the request.
    /// If set, no other fields will be set in this response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Transaction {
      get { return transaction_; }
      set {
        transaction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "document" field.</summary>
    public const int DocumentFieldNumber = 1;
    private global::Google.Cloud.Firestore.V1Beta1.Document document_;
    /// <summary>
    /// A query result.
    /// Not set when reporting partial progress.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.Document Document {
      get { return document_; }
      set {
        document_ = value;
      }
    }

    /// <summary>Field number for the "read_time" field.</summary>
    public const int ReadTimeFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp readTime_;
    /// <summary>
    /// The time at which the document was read. This may be monotonically
    /// increasing; in this case, the previous documents in the result stream are
    /// guaranteed not to have changed between their `read_time` and this one.
    ///
    /// If the query returns no results, a response with `read_time` and no
    /// `document` will be sent, and this represents the time at which the query
    /// was run.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ReadTime {
      get { return readTime_; }
      set {
        readTime_ = value;
      }
    }

    /// <summary>Field number for the "skipped_results" field.</summary>
    public const int SkippedResultsFieldNumber = 4;
    private int skippedResults_;
    /// <summary>
    /// The number of results that have been skipped due to an offset between
    /// the last response and the current response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkippedResults {
      get { return skippedResults_; }
      set {
        skippedResults_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunQueryResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunQueryResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Transaction != other.Transaction) return false;
      if (!object.Equals(Document, other.Document)) return false;
      if (!object.Equals(ReadTime, other.ReadTime)) return false;
      if (SkippedResults != other.SkippedResults) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Transaction.Length != 0) hash ^= Transaction.GetHashCode();
      if (document_ != null) hash ^= Document.GetHashCode();
      if (readTime_ != null) hash ^= ReadTime.GetHashCode();
      if (SkippedResults != 0) hash ^= SkippedResults.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (document_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Document);
      }
      if (Transaction.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Transaction);
      }
      if (readTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ReadTime);
      }
      if (SkippedResults != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SkippedResults);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (document_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Document);
      }
      if (Transaction.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Transaction);
      }
      if (readTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ReadTime);
      }
      if (SkippedResults != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SkippedResults);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Transaction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Transaction);
      }
      if (document_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Document);
      }
      if (readTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReadTime);
      }
      if (SkippedResults != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkippedResults);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunQueryResponse other) {
      if (other == null) {
        return;
      }
      if (other.Transaction.Length != 0) {
        Transaction = other.Transaction;
      }
      if (other.document_ != null) {
        if (document_ == null) {
          Document = new global::Google.Cloud.Firestore.V1Beta1.Document();
        }
        Document.MergeFrom(other.Document);
      }
      if (other.readTime_ != null) {
        if (readTime_ == null) {
          ReadTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ReadTime.MergeFrom(other.ReadTime);
      }
      if (other.SkippedResults != 0) {
        SkippedResults = other.SkippedResults;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (document_ == null) {
              Document = new global::Google.Cloud.Firestore.V1Beta1.Document();
            }
            input.ReadMessage(Document);
            break;
          }
          case 18: {
            Transaction = input.ReadBytes();
            break;
          }
          case 26: {
            if (readTime_ == null) {
              ReadTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ReadTime);
            break;
          }
          case 32: {
            SkippedResults = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (document_ == null) {
              Document = new global::Google.Cloud.Firestore.V1Beta1.Document();
            }
            input.ReadMessage(Document);
            break;
          }
          case 18: {
            Transaction = input.ReadBytes();
            break;
          }
          case 26: {
            if (readTime_ == null) {
              ReadTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ReadTime);
            break;
          }
          case 32: {
            SkippedResults = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The request for [Firestore.PartitionQuery][google.firestore.v1beta1.Firestore.PartitionQuery].
  /// </summary>
  public sealed partial class PartitionQueryRequest : pb::IMessage<PartitionQueryRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PartitionQueryRequest> _parser = new pb::MessageParser<PartitionQueryRequest>(() => new PartitionQueryRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PartitionQueryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.FirestoreReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartitionQueryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartitionQueryRequest(PartitionQueryRequest other) : this() {
      parent_ = other.parent_;
      partitionCount_ = other.partitionCount_;
      pageToken_ = other.pageToken_;
      pageSize_ = other.pageSize_;
      switch (other.QueryTypeCase) {
        case QueryTypeOneofCase.StructuredQuery:
          StructuredQuery = other.StructuredQuery.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartitionQueryRequest Clone() {
      return new PartitionQueryRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// Required. The parent resource name. In the format:
    /// `projects/{project_id}/databases/{database_id}/documents`.
    /// Document resource names are not supported; only database resource names
    /// can be specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "structured_query" field.</summary>
    public const int StructuredQueryFieldNumber = 2;
    /// <summary>
    /// A structured query.
    /// Query must specify collection with all descendants and be ordered by name
    /// ascending. Other filters, order bys, limits, offsets, and start/end
    /// cursors are not supported.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.StructuredQuery StructuredQuery {
      get { return queryTypeCase_ == QueryTypeOneofCase.StructuredQuery ? (global::Google.Cloud.Firestore.V1Beta1.StructuredQuery) queryType_ : null; }
      set {
        queryType_ = value;
        queryTypeCase_ = value == null ? QueryTypeOneofCase.None : QueryTypeOneofCase.StructuredQuery;
      }
    }

    /// <summary>Field number for the "partition_count" field.</summary>
    public const int PartitionCountFieldNumber = 3;
    private long partitionCount_;
    /// <summary>
    /// The desired maximum number of partition points.
    /// The partitions may be returned across multiple pages of results.
    /// The number must be positive. The actual number of partitions
    /// returned may be fewer.
    ///
    /// For example, this may be set to one fewer than the number of parallel
    /// queries to be run, or in running a data pipeline job, one fewer than the
    /// number of workers or compute instances available.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PartitionCount {
      get { return partitionCount_; }
      set {
        partitionCount_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 4;
    private string pageToken_ = "";
    /// <summary>
    /// The `next_page_token` value returned from a previous call to
    /// PartitionQuery that may be used to get an additional set of results.
    /// There are no ordering guarantees between sets of results. Thus, using
    /// multiple sets of results will require merging the different result sets.
    ///
    /// For example, two subsequent calls using a page_token may return:
    ///
    ///  * cursor B, cursor M, cursor Q
    ///  * cursor A, cursor U, cursor W
    ///
    /// To obtain a complete result set ordered with respect to the results of the
    /// query supplied to PartitionQuery, the results sets should be merged:
    /// cursor A, cursor B, cursor M, cursor Q, cursor U, cursor W
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 5;
    private int pageSize_;
    /// <summary>
    /// The maximum number of partitions to return in this call, subject to
    /// `partition_count`.
    ///
    /// For example, if `partition_count` = 10 and `page_size` = 8, the first call
    /// to PartitionQuery will return up to 8 partitions and a `next_page_token`
    /// if more results exist. A second call to PartitionQuery will return up to
    /// 2 partitions, to complete the total of 10 specified in `partition_count`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    private object queryType_;
    /// <summary>Enum of possible cases for the "query_type" oneof.</summary>
    public enum QueryTypeOneofCase {
      None = 0,
      StructuredQuery = 2,
    }
    private QueryTypeOneofCase queryTypeCase_ = QueryTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryTypeOneofCase QueryTypeCase {
      get { return queryTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQueryType() {
      queryTypeCase_ = QueryTypeOneofCase.None;
      queryType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PartitionQueryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PartitionQueryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (!object.Equals(StructuredQuery, other.StructuredQuery)) return false;
      if (PartitionCount != other.PartitionCount) return false;
      if (PageToken != other.PageToken) return false;
      if (PageSize != other.PageSize) return false;
      if (QueryTypeCase != other.QueryTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (queryTypeCase_ == QueryTypeOneofCase.StructuredQuery) hash ^= StructuredQuery.GetHashCode();
      if (PartitionCount != 0L) hash ^= PartitionCount.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      hash ^= (int) queryTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (queryTypeCase_ == QueryTypeOneofCase.StructuredQuery) {
        output.WriteRawTag(18);
        output.WriteMessage(StructuredQuery);
      }
      if (PartitionCount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(PartitionCount);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PageToken);
      }
      if (PageSize != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PageSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (queryTypeCase_ == QueryTypeOneofCase.StructuredQuery) {
        output.WriteRawTag(18);
        output.WriteMessage(StructuredQuery);
      }
      if (PartitionCount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(PartitionCount);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PageToken);
      }
      if (PageSize != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PageSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (queryTypeCase_ == QueryTypeOneofCase.StructuredQuery) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StructuredQuery);
      }
      if (PartitionCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PartitionCount);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PartitionQueryRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.PartitionCount != 0L) {
        PartitionCount = other.PartitionCount;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      switch (other.QueryTypeCase) {
        case QueryTypeOneofCase.StructuredQuery:
          if (StructuredQuery == null) {
            StructuredQuery = new global::Google.Cloud.Firestore.V1Beta1.StructuredQuery();
          }
          StructuredQuery.MergeFrom(other.StructuredQuery);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            global::Google.Cloud.Firestore.V1Beta1.StructuredQuery subBuilder = new global::Google.Cloud.Firestore.V1Beta1.StructuredQuery();
            if (queryTypeCase_ == QueryTypeOneofCase.StructuredQuery) {
              subBuilder.MergeFrom(StructuredQuery);
            }
            input.ReadMessage(subBuilder);
            StructuredQuery = subBuilder;
            break;
          }
          case 24: {
            PartitionCount = input.ReadInt64();
            break;
          }
          case 34: {
            PageToken = input.ReadString();
            break;
          }
          case 40: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            global::Google.Cloud.Firestore.V1Beta1.StructuredQuery subBuilder = new global::Google.Cloud.Firestore.V1Beta1.StructuredQuery();
            if (queryTypeCase_ == QueryTypeOneofCase.StructuredQuery) {
              subBuilder.MergeFrom(StructuredQuery);
            }
            input.ReadMessage(subBuilder);
            StructuredQuery = subBuilder;
            break;
          }
          case 24: {
            PartitionCount = input.ReadInt64();
            break;
          }
          case 34: {
            PageToken = input.ReadString();
            break;
          }
          case 40: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The response for [Firestore.PartitionQuery][google.firestore.v1beta1.Firestore.PartitionQuery].
  /// </summary>
  public sealed partial class PartitionQueryResponse : pb::IMessage<PartitionQueryResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PartitionQueryResponse> _parser = new pb::MessageParser<PartitionQueryResponse>(() => new PartitionQueryResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PartitionQueryResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.FirestoreReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartitionQueryResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartitionQueryResponse(PartitionQueryResponse other) : this() {
      partitions_ = other.partitions_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartitionQueryResponse Clone() {
      return new PartitionQueryResponse(this);
    }

    /// <summary>Field number for the "partitions" field.</summary>
    public const int PartitionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Firestore.V1Beta1.Cursor> _repeated_partitions_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Firestore.V1Beta1.Cursor.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.Cursor> partitions_ = new pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.Cursor>();
    /// <summary>
    /// Partition results.
    /// Each partition is a split point that can be used by RunQuery as a starting
    /// or end point for the query results. The RunQuery requests must be made with
    /// the same query supplied to this PartitionQuery request. The partition
    /// cursors will be ordered according to same ordering as the results of the
    /// query supplied to PartitionQuery.
    ///
    /// For example, if a PartitionQuery request returns partition cursors A and B,
    /// running the following three queries will return the entire result set of
    /// the original query:
    ///
    ///  * query, end_at A
    ///  * query, start_at A, end_at B
    ///  * query, start_at B
    ///
    /// An empty result may indicate that the query has too few results to be
    /// partitioned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.Cursor> Partitions {
      get { return partitions_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// A page token that may be used to request an additional set of results, up
    /// to the number specified by `partition_count` in the PartitionQuery request.
    /// If blank, there are no more results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PartitionQueryResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PartitionQueryResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!partitions_.Equals(other.partitions_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= partitions_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      partitions_.WriteTo(output, _repeated_partitions_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      partitions_.WriteTo(ref output, _repeated_partitions_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += partitions_.CalculateSize(_repeated_partitions_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PartitionQueryResponse other) {
      if (other == null) {
        return;
      }
      partitions_.Add(other.partitions_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            partitions_.AddEntriesFrom(input, _repeated_partitions_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            partitions_.AddEntriesFrom(ref input, _repeated_partitions_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The request for [Firestore.Write][google.firestore.v1beta1.Firestore.Write].
  ///
  /// The first request creates a stream, or resumes an existing one from a token.
  ///
  /// When creating a new stream, the server replies with a response containing
  /// only an ID and a token, to use in the next request.
  ///
  /// When resuming a stream, the server first streams any responses later than the
  /// given token, then a response containing only an up-to-date token, to use in
  /// the next request.
  /// </summary>
  public sealed partial class WriteRequest : pb::IMessage<WriteRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WriteRequest> _parser = new pb::MessageParser<WriteRequest>(() => new WriteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WriteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.FirestoreReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteRequest(WriteRequest other) : this() {
      database_ = other.database_;
      streamId_ = other.streamId_;
      writes_ = other.writes_.Clone();
      streamToken_ = other.streamToken_;
      labels_ = other.labels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteRequest Clone() {
      return new WriteRequest(this);
    }

    /// <summary>Field number for the "database" field.</summary>
    public const int DatabaseFieldNumber = 1;
    private string database_ = "";
    /// <summary>
    /// Required. The database name. In the format:
    /// `projects/{project_id}/databases/{database_id}`.
    /// This is only required in the first message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Database {
      get { return database_; }
      set {
        database_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stream_id" field.</summary>
    public const int StreamIdFieldNumber = 2;
    private string streamId_ = "";
    /// <summary>
    /// The ID of the write stream to resume.
    /// This may only be set in the first message. When left empty, a new write
    /// stream will be created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StreamId {
      get { return streamId_; }
      set {
        streamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "writes" field.</summary>
    public const int WritesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.Firestore.V1Beta1.Write> _repeated_writes_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Cloud.Firestore.V1Beta1.Write.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.Write> writes_ = new pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.Write>();
    /// <summary>
    /// The writes to apply.
    ///
    /// Always executed atomically and in order.
    /// This must be empty on the first request.
    /// This may be empty on the last request.
    /// This must not be empty on all other requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.Write> Writes {
      get { return writes_; }
    }

    /// <summary>Field number for the "stream_token" field.</summary>
    public const int StreamTokenFieldNumber = 4;
    private pb::ByteString streamToken_ = pb::ByteString.Empty;
    /// <summary>
    /// A stream token that was previously sent by the server.
    ///
    /// The client should set this field to the token from the most recent
    /// [WriteResponse][google.firestore.v1beta1.WriteResponse] it has received. This acknowledges that the client has
    /// received responses up to this token. After sending this token, earlier
    /// tokens may not be used anymore.
    ///
    /// The server may close the stream if there are too many unacknowledged
    /// responses.
    ///
    /// Leave this field unset when creating a new stream. To resume a stream at
    /// a specific point, set this field and the `stream_id` field.
    ///
    /// Leave this field unset when creating a new stream.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString StreamToken {
      get { return streamToken_; }
      set {
        streamToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 5;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 42);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Labels associated with this write request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WriteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WriteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Database != other.Database) return false;
      if (StreamId != other.StreamId) return false;
      if(!writes_.Equals(other.writes_)) return false;
      if (StreamToken != other.StreamToken) return false;
      if (!Labels.Equals(other.Labels)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Database.Length != 0) hash ^= Database.GetHashCode();
      if (StreamId.Length != 0) hash ^= StreamId.GetHashCode();
      hash ^= writes_.GetHashCode();
      if (StreamToken.Length != 0) hash ^= StreamToken.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Database.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Database);
      }
      if (StreamId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StreamId);
      }
      writes_.WriteTo(output, _repeated_writes_codec);
      if (StreamToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(StreamToken);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Database.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Database);
      }
      if (StreamId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StreamId);
      }
      writes_.WriteTo(ref output, _repeated_writes_codec);
      if (StreamToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(StreamToken);
      }
      labels_.WriteTo(ref output, _map_labels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Database.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Database);
      }
      if (StreamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StreamId);
      }
      size += writes_.CalculateSize(_repeated_writes_codec);
      if (StreamToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(StreamToken);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WriteRequest other) {
      if (other == null) {
        return;
      }
      if (other.Database.Length != 0) {
        Database = other.Database;
      }
      if (other.StreamId.Length != 0) {
        StreamId = other.StreamId;
      }
      writes_.Add(other.writes_);
      if (other.StreamToken.Length != 0) {
        StreamToken = other.StreamToken;
      }
      labels_.Add(other.labels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Database = input.ReadString();
            break;
          }
          case 18: {
            StreamId = input.ReadString();
            break;
          }
          case 26: {
            writes_.AddEntriesFrom(input, _repeated_writes_codec);
            break;
          }
          case 34: {
            StreamToken = input.ReadBytes();
            break;
          }
          case 42: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Database = input.ReadString();
            break;
          }
          case 18: {
            StreamId = input.ReadString();
            break;
          }
          case 26: {
            writes_.AddEntriesFrom(ref input, _repeated_writes_codec);
            break;
          }
          case 34: {
            StreamToken = input.ReadBytes();
            break;
          }
          case 42: {
            labels_.AddEntriesFrom(ref input, _map_labels_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The response for [Firestore.Write][google.firestore.v1beta1.Firestore.Write].
  /// </summary>
  public sealed partial class WriteResponse : pb::IMessage<WriteResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WriteResponse> _parser = new pb::MessageParser<WriteResponse>(() => new WriteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WriteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.FirestoreReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteResponse(WriteResponse other) : this() {
      streamId_ = other.streamId_;
      streamToken_ = other.streamToken_;
      writeResults_ = other.writeResults_.Clone();
      commitTime_ = other.commitTime_ != null ? other.commitTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteResponse Clone() {
      return new WriteResponse(this);
    }

    /// <summary>Field number for the "stream_id" field.</summary>
    public const int StreamIdFieldNumber = 1;
    private string streamId_ = "";
    /// <summary>
    /// The ID of the stream.
    /// Only set on the first message, when a new stream was created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StreamId {
      get { return streamId_; }
      set {
        streamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stream_token" field.</summary>
    public const int StreamTokenFieldNumber = 2;
    private pb::ByteString streamToken_ = pb::ByteString.Empty;
    /// <summary>
    /// A token that represents the position of this response in the stream.
    /// This can be used by a client to resume the stream at this point.
    ///
    /// This field is always set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString StreamToken {
      get { return streamToken_; }
      set {
        streamToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "write_results" field.</summary>
    public const int WriteResultsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.Firestore.V1Beta1.WriteResult> _repeated_writeResults_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Cloud.Firestore.V1Beta1.WriteResult.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.WriteResult> writeResults_ = new pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.WriteResult>();
    /// <summary>
    /// The result of applying the writes.
    ///
    /// This i-th write result corresponds to the i-th write in the
    /// request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.WriteResult> WriteResults {
      get { return writeResults_; }
    }

    /// <summary>Field number for the "commit_time" field.</summary>
    public const int CommitTimeFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp commitTime_;
    /// <summary>
    /// The time at which the commit occurred. Any read with an equal or greater
    /// `read_time` is guaranteed to see the effects of the write.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CommitTime {
      get { return commitTime_; }
      set {
        commitTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WriteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WriteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StreamId != other.StreamId) return false;
      if (StreamToken != other.StreamToken) return false;
      if(!writeResults_.Equals(other.writeResults_)) return false;
      if (!object.Equals(CommitTime, other.CommitTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StreamId.Length != 0) hash ^= StreamId.GetHashCode();
      if (StreamToken.Length != 0) hash ^= StreamToken.GetHashCode();
      hash ^= writeResults_.GetHashCode();
      if (commitTime_ != null) hash ^= CommitTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StreamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StreamId);
      }
      if (StreamToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(StreamToken);
      }
      writeResults_.WriteTo(output, _repeated_writeResults_codec);
      if (commitTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CommitTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StreamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StreamId);
      }
      if (StreamToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(StreamToken);
      }
      writeResults_.WriteTo(ref output, _repeated_writeResults_codec);
      if (commitTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CommitTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StreamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StreamId);
      }
      if (StreamToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(StreamToken);
      }
      size += writeResults_.CalculateSize(_repeated_writeResults_codec);
      if (commitTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommitTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WriteResponse other) {
      if (other == null) {
        return;
      }
      if (other.StreamId.Length != 0) {
        StreamId = other.StreamId;
      }
      if (other.StreamToken.Length != 0) {
        StreamToken = other.StreamToken;
      }
      writeResults_.Add(other.writeResults_);
      if (other.commitTime_ != null) {
        if (commitTime_ == null) {
          CommitTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CommitTime.MergeFrom(other.CommitTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StreamId = input.ReadString();
            break;
          }
          case 18: {
            StreamToken = input.ReadBytes();
            break;
          }
          case 26: {
            writeResults_.AddEntriesFrom(input, _repeated_writeResults_codec);
            break;
          }
          case 34: {
            if (commitTime_ == null) {
              CommitTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CommitTime);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            StreamId = input.ReadString();
            break;
          }
          case 18: {
            StreamToken = input.ReadBytes();
            break;
          }
          case 26: {
            writeResults_.AddEntriesFrom(ref input, _repeated_writeResults_codec);
            break;
          }
          case 34: {
            if (commitTime_ == null) {
              CommitTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CommitTime);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A request for [Firestore.Listen][google.firestore.v1beta1.Firestore.Listen]
  /// </summary>
  public sealed partial class ListenRequest : pb::IMessage<ListenRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListenRequest> _parser = new pb::MessageParser<ListenRequest>(() => new ListenRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListenRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.FirestoreReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListenRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListenRequest(ListenRequest other) : this() {
      database_ = other.database_;
      labels_ = other.labels_.Clone();
      switch (other.TargetChangeCase) {
        case TargetChangeOneofCase.AddTarget:
          AddTarget = other.AddTarget.Clone();
          break;
        case TargetChangeOneofCase.RemoveTarget:
          RemoveTarget = other.RemoveTarget;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListenRequest Clone() {
      return new ListenRequest(this);
    }

    /// <summary>Field number for the "database" field.</summary>
    public const int DatabaseFieldNumber = 1;
    private string database_ = "";
    /// <summary>
    /// Required. The database name. In the format:
    /// `projects/{project_id}/databases/{database_id}`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Database {
      get { return database_; }
      set {
        database_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "add_target" field.</summary>
    public const int AddTargetFieldNumber = 2;
    /// <summary>
    /// A target to add to this stream.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.Target AddTarget {
      get { return targetChangeCase_ == TargetChangeOneofCase.AddTarget ? (global::Google.Cloud.Firestore.V1Beta1.Target) targetChange_ : null; }
      set {
        targetChange_ = value;
        targetChangeCase_ = value == null ? TargetChangeOneofCase.None : TargetChangeOneofCase.AddTarget;
      }
    }

    /// <summary>Field number for the "remove_target" field.</summary>
    public const int RemoveTargetFieldNumber = 3;
    /// <summary>
    /// The ID of a target to remove from this stream.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemoveTarget {
      get { return targetChangeCase_ == TargetChangeOneofCase.RemoveTarget ? (int) targetChange_ : 0; }
      set {
        targetChange_ = value;
        targetChangeCase_ = TargetChangeOneofCase.RemoveTarget;
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 4;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 34);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Labels associated with this target change.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    private object targetChange_;
    /// <summary>Enum of possible cases for the "target_change" oneof.</summary>
    public enum TargetChangeOneofCase {
      None = 0,
      AddTarget = 2,
      RemoveTarget = 3,
    }
    private TargetChangeOneofCase targetChangeCase_ = TargetChangeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetChangeOneofCase TargetChangeCase {
      get { return targetChangeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetChange() {
      targetChangeCase_ = TargetChangeOneofCase.None;
      targetChange_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListenRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListenRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Database != other.Database) return false;
      if (!object.Equals(AddTarget, other.AddTarget)) return false;
      if (RemoveTarget != other.RemoveTarget) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (TargetChangeCase != other.TargetChangeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Database.Length != 0) hash ^= Database.GetHashCode();
      if (targetChangeCase_ == TargetChangeOneofCase.AddTarget) hash ^= AddTarget.GetHashCode();
      if (targetChangeCase_ == TargetChangeOneofCase.RemoveTarget) hash ^= RemoveTarget.GetHashCode();
      hash ^= Labels.GetHashCode();
      hash ^= (int) targetChangeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Database.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Database);
      }
      if (targetChangeCase_ == TargetChangeOneofCase.AddTarget) {
        output.WriteRawTag(18);
        output.WriteMessage(AddTarget);
      }
      if (targetChangeCase_ == TargetChangeOneofCase.RemoveTarget) {
        output.WriteRawTag(24);
        output.WriteInt32(RemoveTarget);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Database.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Database);
      }
      if (targetChangeCase_ == TargetChangeOneofCase.AddTarget) {
        output.WriteRawTag(18);
        output.WriteMessage(AddTarget);
      }
      if (targetChangeCase_ == TargetChangeOneofCase.RemoveTarget) {
        output.WriteRawTag(24);
        output.WriteInt32(RemoveTarget);
      }
      labels_.WriteTo(ref output, _map_labels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Database.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Database);
      }
      if (targetChangeCase_ == TargetChangeOneofCase.AddTarget) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddTarget);
      }
      if (targetChangeCase_ == TargetChangeOneofCase.RemoveTarget) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemoveTarget);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListenRequest other) {
      if (other == null) {
        return;
      }
      if (other.Database.Length != 0) {
        Database = other.Database;
      }
      labels_.Add(other.labels_);
      switch (other.TargetChangeCase) {
        case TargetChangeOneofCase.AddTarget:
          if (AddTarget == null) {
            AddTarget = new global::Google.Cloud.Firestore.V1Beta1.Target();
          }
          AddTarget.MergeFrom(other.AddTarget);
          break;
        case TargetChangeOneofCase.RemoveTarget:
          RemoveTarget = other.RemoveTarget;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Database = input.ReadString();
            break;
          }
          case 18: {
            global::Google.Cloud.Firestore.V1Beta1.Target subBuilder = new global::Google.Cloud.Firestore.V1Beta1.Target();
            if (targetChangeCase_ == TargetChangeOneofCase.AddTarget) {
              subBuilder.MergeFrom(AddTarget);
            }
            input.ReadMessage(subBuilder);
            AddTarget = subBuilder;
            break;
          }
          case 24: {
            RemoveTarget = input.ReadInt32();
            break;
          }
          case 34: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Database = input.ReadString();
            break;
          }
          case 18: {
            global::Google.Cloud.Firestore.V1Beta1.Target subBuilder = new global::Google.Cloud.Firestore.V1Beta1.Target();
            if (targetChangeCase_ == TargetChangeOneofCase.AddTarget) {
              subBuilder.MergeFrom(AddTarget);
            }
            input.ReadMessage(subBuilder);
            AddTarget = subBuilder;
            break;
          }
          case 24: {
            RemoveTarget = input.ReadInt32();
            break;
          }
          case 34: {
            labels_.AddEntriesFrom(ref input, _map_labels_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The response for [Firestore.Listen][google.firestore.v1beta1.Firestore.Listen].
  /// </summary>
  public sealed partial class ListenResponse : pb::IMessage<ListenResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListenResponse> _parser = new pb::MessageParser<ListenResponse>(() => new ListenResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListenResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.FirestoreReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListenResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListenResponse(ListenResponse other) : this() {
      switch (other.ResponseTypeCase) {
        case ResponseTypeOneofCase.TargetChange:
          TargetChange = other.TargetChange.Clone();
          break;
        case ResponseTypeOneofCase.DocumentChange:
          DocumentChange = other.DocumentChange.Clone();
          break;
        case ResponseTypeOneofCase.DocumentDelete:
          DocumentDelete = other.DocumentDelete.Clone();
          break;
        case ResponseTypeOneofCase.DocumentRemove:
          DocumentRemove = other.DocumentRemove.Clone();
          break;
        case ResponseTypeOneofCase.Filter:
          Filter = other.Filter.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListenResponse Clone() {
      return new ListenResponse(this);
    }

    /// <summary>Field number for the "target_change" field.</summary>
    public const int TargetChangeFieldNumber = 2;
    /// <summary>
    /// Targets have changed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.TargetChange TargetChange {
      get { return responseTypeCase_ == ResponseTypeOneofCase.TargetChange ? (global::Google.Cloud.Firestore.V1Beta1.TargetChange) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.TargetChange;
      }
    }

    /// <summary>Field number for the "document_change" field.</summary>
    public const int DocumentChangeFieldNumber = 3;
    /// <summary>
    /// A [Document][google.firestore.v1beta1.Document] has changed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.DocumentChange DocumentChange {
      get { return responseTypeCase_ == ResponseTypeOneofCase.DocumentChange ? (global::Google.Cloud.Firestore.V1Beta1.DocumentChange) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.DocumentChange;
      }
    }

    /// <summary>Field number for the "document_delete" field.</summary>
    public const int DocumentDeleteFieldNumber = 4;
    /// <summary>
    /// A [Document][google.firestore.v1beta1.Document] has been deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.DocumentDelete DocumentDelete {
      get { return responseTypeCase_ == ResponseTypeOneofCase.DocumentDelete ? (global::Google.Cloud.Firestore.V1Beta1.DocumentDelete) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.DocumentDelete;
      }
    }

    /// <summary>Field number for the "document_remove" field.</summary>
    public const int DocumentRemoveFieldNumber = 6;
    /// <summary>
    /// A [Document][google.firestore.v1beta1.Document] has been removed from a target (because it is no longer
    /// relevant to that target).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.DocumentRemove DocumentRemove {
      get { return responseTypeCase_ == ResponseTypeOneofCase.DocumentRemove ? (global::Google.Cloud.Firestore.V1Beta1.DocumentRemove) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.DocumentRemove;
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 5;
    /// <summary>
    /// A filter to apply to the set of documents previously returned for the
    /// given target.
    ///
    /// Returned when documents may have been removed from the given target, but
    /// the exact documents are unknown.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.ExistenceFilter Filter {
      get { return responseTypeCase_ == ResponseTypeOneofCase.Filter ? (global::Google.Cloud.Firestore.V1Beta1.ExistenceFilter) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.Filter;
      }
    }

    private object responseType_;
    /// <summary>Enum of possible cases for the "response_type" oneof.</summary>
    public enum ResponseTypeOneofCase {
      None = 0,
      TargetChange = 2,
      DocumentChange = 3,
      DocumentDelete = 4,
      DocumentRemove = 6,
      Filter = 5,
    }
    private ResponseTypeOneofCase responseTypeCase_ = ResponseTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseTypeOneofCase ResponseTypeCase {
      get { return responseTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponseType() {
      responseTypeCase_ = ResponseTypeOneofCase.None;
      responseType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListenResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListenResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TargetChange, other.TargetChange)) return false;
      if (!object.Equals(DocumentChange, other.DocumentChange)) return false;
      if (!object.Equals(DocumentDelete, other.DocumentDelete)) return false;
      if (!object.Equals(DocumentRemove, other.DocumentRemove)) return false;
      if (!object.Equals(Filter, other.Filter)) return false;
      if (ResponseTypeCase != other.ResponseTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (responseTypeCase_ == ResponseTypeOneofCase.TargetChange) hash ^= TargetChange.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.DocumentChange) hash ^= DocumentChange.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.DocumentDelete) hash ^= DocumentDelete.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.DocumentRemove) hash ^= DocumentRemove.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.Filter) hash ^= Filter.GetHashCode();
      hash ^= (int) responseTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (responseTypeCase_ == ResponseTypeOneofCase.TargetChange) {
        output.WriteRawTag(18);
        output.WriteMessage(TargetChange);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.DocumentChange) {
        output.WriteRawTag(26);
        output.WriteMessage(DocumentChange);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.DocumentDelete) {
        output.WriteRawTag(34);
        output.WriteMessage(DocumentDelete);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.Filter) {
        output.WriteRawTag(42);
        output.WriteMessage(Filter);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.DocumentRemove) {
        output.WriteRawTag(50);
        output.WriteMessage(DocumentRemove);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (responseTypeCase_ == ResponseTypeOneofCase.TargetChange) {
        output.WriteRawTag(18);
        output.WriteMessage(TargetChange);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.DocumentChange) {
        output.WriteRawTag(26);
        output.WriteMessage(DocumentChange);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.DocumentDelete) {
        output.WriteRawTag(34);
        output.WriteMessage(DocumentDelete);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.Filter) {
        output.WriteRawTag(42);
        output.WriteMessage(Filter);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.DocumentRemove) {
        output.WriteRawTag(50);
        output.WriteMessage(DocumentRemove);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (responseTypeCase_ == ResponseTypeOneofCase.TargetChange) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetChange);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.DocumentChange) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DocumentChange);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.DocumentDelete) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DocumentDelete);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.DocumentRemove) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DocumentRemove);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.Filter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListenResponse other) {
      if (other == null) {
        return;
      }
      switch (other.ResponseTypeCase) {
        case ResponseTypeOneofCase.TargetChange:
          if (TargetChange == null) {
            TargetChange = new global::Google.Cloud.Firestore.V1Beta1.TargetChange();
          }
          TargetChange.MergeFrom(other.TargetChange);
          break;
        case ResponseTypeOneofCase.DocumentChange:
          if (DocumentChange == null) {
            DocumentChange = new global::Google.Cloud.Firestore.V1Beta1.DocumentChange();
          }
          DocumentChange.MergeFrom(other.DocumentChange);
          break;
        case ResponseTypeOneofCase.DocumentDelete:
          if (DocumentDelete == null) {
            DocumentDelete = new global::Google.Cloud.Firestore.V1Beta1.DocumentDelete();
          }
          DocumentDelete.MergeFrom(other.DocumentDelete);
          break;
        case ResponseTypeOneofCase.DocumentRemove:
          if (DocumentRemove == null) {
            DocumentRemove = new global::Google.Cloud.Firestore.V1Beta1.DocumentRemove();
          }
          DocumentRemove.MergeFrom(other.DocumentRemove);
          break;
        case ResponseTypeOneofCase.Filter:
          if (Filter == null) {
            Filter = new global::Google.Cloud.Firestore.V1Beta1.ExistenceFilter();
          }
          Filter.MergeFrom(other.Filter);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            global::Google.Cloud.Firestore.V1Beta1.TargetChange subBuilder = new global::Google.Cloud.Firestore.V1Beta1.TargetChange();
            if (responseTypeCase_ == ResponseTypeOneofCase.TargetChange) {
              subBuilder.MergeFrom(TargetChange);
            }
            input.ReadMessage(subBuilder);
            TargetChange = subBuilder;
            break;
          }
          case 26: {
            global::Google.Cloud.Firestore.V1Beta1.DocumentChange subBuilder = new global::Google.Cloud.Firestore.V1Beta1.DocumentChange();
            if (responseTypeCase_ == ResponseTypeOneofCase.DocumentChange) {
              subBuilder.MergeFrom(DocumentChange);
            }
            input.ReadMessage(subBuilder);
            DocumentChange = subBuilder;
            break;
          }
          case 34: {
            global::Google.Cloud.Firestore.V1Beta1.DocumentDelete subBuilder = new global::Google.Cloud.Firestore.V1Beta1.DocumentDelete();
            if (responseTypeCase_ == ResponseTypeOneofCase.DocumentDelete) {
              subBuilder.MergeFrom(DocumentDelete);
            }
            input.ReadMessage(subBuilder);
            DocumentDelete = subBuilder;
            break;
          }
          case 42: {
            global::Google.Cloud.Firestore.V1Beta1.ExistenceFilter subBuilder = new global::Google.Cloud.Firestore.V1Beta1.ExistenceFilter();
            if (responseTypeCase_ == ResponseTypeOneofCase.Filter) {
              subBuilder.MergeFrom(Filter);
            }
            input.ReadMessage(subBuilder);
            Filter = subBuilder;
            break;
          }
          case 50: {
            global::Google.Cloud.Firestore.V1Beta1.DocumentRemove subBuilder = new global::Google.Cloud.Firestore.V1Beta1.DocumentRemove();
            if (responseTypeCase_ == ResponseTypeOneofCase.DocumentRemove) {
              subBuilder.MergeFrom(DocumentRemove);
            }
            input.ReadMessage(subBuilder);
            DocumentRemove = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            global::Google.Cloud.Firestore.V1Beta1.TargetChange subBuilder = new global::Google.Cloud.Firestore.V1Beta1.TargetChange();
            if (responseTypeCase_ == ResponseTypeOneofCase.TargetChange) {
              subBuilder.MergeFrom(TargetChange);
            }
            input.ReadMessage(subBuilder);
            TargetChange = subBuilder;
            break;
          }
          case 26: {
            global::Google.Cloud.Firestore.V1Beta1.DocumentChange subBuilder = new global::Google.Cloud.Firestore.V1Beta1.DocumentChange();
            if (responseTypeCase_ == ResponseTypeOneofCase.DocumentChange) {
              subBuilder.MergeFrom(DocumentChange);
            }
            input.ReadMessage(subBuilder);
            DocumentChange = subBuilder;
            break;
          }
          case 34: {
            global::Google.Cloud.Firestore.V1Beta1.DocumentDelete subBuilder = new global::Google.Cloud.Firestore.V1Beta1.DocumentDelete();
            if (responseTypeCase_ == ResponseTypeOneofCase.DocumentDelete) {
              subBuilder.MergeFrom(DocumentDelete);
            }
            input.ReadMessage(subBuilder);
            DocumentDelete = subBuilder;
            break;
          }
          case 42: {
            global::Google.Cloud.Firestore.V1Beta1.ExistenceFilter subBuilder = new global::Google.Cloud.Firestore.V1Beta1.ExistenceFilter();
            if (responseTypeCase_ == ResponseTypeOneofCase.Filter) {
              subBuilder.MergeFrom(Filter);
            }
            input.ReadMessage(subBuilder);
            Filter = subBuilder;
            break;
          }
          case 50: {
            global::Google.Cloud.Firestore.V1Beta1.DocumentRemove subBuilder = new global::Google.Cloud.Firestore.V1Beta1.DocumentRemove();
            if (responseTypeCase_ == ResponseTypeOneofCase.DocumentRemove) {
              subBuilder.MergeFrom(DocumentRemove);
            }
            input.ReadMessage(subBuilder);
            DocumentRemove = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A specification of a set of documents to listen to.
  /// </summary>
  public sealed partial class Target : pb::IMessage<Target>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Target> _parser = new pb::MessageParser<Target>(() => new Target());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Target> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.FirestoreReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Target() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Target(Target other) : this() {
      targetId_ = other.targetId_;
      once_ = other.once_;
      switch (other.TargetTypeCase) {
        case TargetTypeOneofCase.Query:
          Query = other.Query.Clone();
          break;
        case TargetTypeOneofCase.Documents:
          Documents = other.Documents.Clone();
          break;
      }

      switch (other.ResumeTypeCase) {
        case ResumeTypeOneofCase.ResumeToken:
          ResumeToken = other.ResumeToken;
          break;
        case ResumeTypeOneofCase.ReadTime:
          ReadTime = other.ReadTime.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Target Clone() {
      return new Target(this);
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 2;
    /// <summary>
    /// A target specified by a query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.Target.Types.QueryTarget Query {
      get { return targetTypeCase_ == TargetTypeOneofCase.Query ? (global::Google.Cloud.Firestore.V1Beta1.Target.Types.QueryTarget) targetType_ : null; }
      set {
        targetType_ = value;
        targetTypeCase_ = value == null ? TargetTypeOneofCase.None : TargetTypeOneofCase.Query;
      }
    }

    /// <summary>Field number for the "documents" field.</summary>
    public const int DocumentsFieldNumber = 3;
    /// <summary>
    /// A target specified by a set of document names.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.Target.Types.DocumentsTarget Documents {
      get { return targetTypeCase_ == TargetTypeOneofCase.Documents ? (global::Google.Cloud.Firestore.V1Beta1.Target.Types.DocumentsTarget) targetType_ : null; }
      set {
        targetType_ = value;
        targetTypeCase_ = value == null ? TargetTypeOneofCase.None : TargetTypeOneofCase.Documents;
      }
    }

    /// <summary>Field number for the "resume_token" field.</summary>
    public const int ResumeTokenFieldNumber = 4;
    /// <summary>
    /// A resume token from a prior [TargetChange][google.firestore.v1beta1.TargetChange] for an identical target.
    ///
    /// Using a resume token with a different target is unsupported and may fail.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ResumeToken {
      get { return resumeTypeCase_ == ResumeTypeOneofCase.ResumeToken ? (pb::ByteString) resumeType_ : pb::ByteString.Empty; }
      set {
        resumeType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        resumeTypeCase_ = ResumeTypeOneofCase.ResumeToken;
      }
    }

    /// <summary>Field number for the "read_time" field.</summary>
    public const int ReadTimeFieldNumber = 11;
    /// <summary>
    /// Start listening after a specific `read_time`.
    ///
    /// The client must know the state of matching documents at this time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ReadTime {
      get { return resumeTypeCase_ == ResumeTypeOneofCase.ReadTime ? (global::Google.Protobuf.WellKnownTypes.Timestamp) resumeType_ : null; }
      set {
        resumeType_ = value;
        resumeTypeCase_ = value == null ? ResumeTypeOneofCase.None : ResumeTypeOneofCase.ReadTime;
      }
    }

    /// <summary>Field number for the "target_id" field.</summary>
    public const int TargetIdFieldNumber = 5;
    private int targetId_;
    /// <summary>
    /// The target ID that identifies the target on the stream. Must be a positive
    /// number and non-zero.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "once" field.</summary>
    public const int OnceFieldNumber = 6;
    private bool once_;
    /// <summary>
    /// If the target should be removed once it is current and consistent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Once {
      get { return once_; }
      set {
        once_ = value;
      }
    }

    private object targetType_;
    /// <summary>Enum of possible cases for the "target_type" oneof.</summary>
    public enum TargetTypeOneofCase {
      None = 0,
      Query = 2,
      Documents = 3,
    }
    private TargetTypeOneofCase targetTypeCase_ = TargetTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetTypeOneofCase TargetTypeCase {
      get { return targetTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetType() {
      targetTypeCase_ = TargetTypeOneofCase.None;
      targetType_ = null;
    }

    private object resumeType_;
    /// <summary>Enum of possible cases for the "resume_type" oneof.</summary>
    public enum ResumeTypeOneofCase {
      None = 0,
      ResumeToken = 4,
      ReadTime = 11,
    }
    private ResumeTypeOneofCase resumeTypeCase_ = ResumeTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResumeTypeOneofCase ResumeTypeCase {
      get { return resumeTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResumeType() {
      resumeTypeCase_ = ResumeTypeOneofCase.None;
      resumeType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Target);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Target other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Query, other.Query)) return false;
      if (!object.Equals(Documents, other.Documents)) return false;
      if (ResumeToken != other.ResumeToken) return false;
      if (!object.Equals(ReadTime, other.ReadTime)) return false;
      if (TargetId != other.TargetId) return false;
      if (Once != other.Once) return false;
      if (TargetTypeCase != other.TargetTypeCase) return false;
      if (ResumeTypeCase != other.ResumeTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (targetTypeCase_ == TargetTypeOneofCase.Query) hash ^= Query.GetHashCode();
      if (targetTypeCase_ == TargetTypeOneofCase.Documents) hash ^= Documents.GetHashCode();
      if (resumeTypeCase_ == ResumeTypeOneofCase.ResumeToken) hash ^= ResumeToken.GetHashCode();
      if (resumeTypeCase_ == ResumeTypeOneofCase.ReadTime) hash ^= ReadTime.GetHashCode();
      if (TargetId != 0) hash ^= TargetId.GetHashCode();
      if (Once != false) hash ^= Once.GetHashCode();
      hash ^= (int) targetTypeCase_;
      hash ^= (int) resumeTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (targetTypeCase_ == TargetTypeOneofCase.Query) {
        output.WriteRawTag(18);
        output.WriteMessage(Query);
      }
      if (targetTypeCase_ == TargetTypeOneofCase.Documents) {
        output.WriteRawTag(26);
        output.WriteMessage(Documents);
      }
      if (resumeTypeCase_ == ResumeTypeOneofCase.ResumeToken) {
        output.WriteRawTag(34);
        output.WriteBytes(ResumeToken);
      }
      if (TargetId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TargetId);
      }
      if (Once != false) {
        output.WriteRawTag(48);
        output.WriteBool(Once);
      }
      if (resumeTypeCase_ == ResumeTypeOneofCase.ReadTime) {
        output.WriteRawTag(90);
        output.WriteMessage(ReadTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (targetTypeCase_ == TargetTypeOneofCase.Query) {
        output.WriteRawTag(18);
        output.WriteMessage(Query);
      }
      if (targetTypeCase_ == TargetTypeOneofCase.Documents) {
        output.WriteRawTag(26);
        output.WriteMessage(Documents);
      }
      if (resumeTypeCase_ == ResumeTypeOneofCase.ResumeToken) {
        output.WriteRawTag(34);
        output.WriteBytes(ResumeToken);
      }
      if (TargetId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TargetId);
      }
      if (Once != false) {
        output.WriteRawTag(48);
        output.WriteBool(Once);
      }
      if (resumeTypeCase_ == ResumeTypeOneofCase.ReadTime) {
        output.WriteRawTag(90);
        output.WriteMessage(ReadTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (targetTypeCase_ == TargetTypeOneofCase.Query) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Query);
      }
      if (targetTypeCase_ == TargetTypeOneofCase.Documents) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Documents);
      }
      if (resumeTypeCase_ == ResumeTypeOneofCase.ResumeToken) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ResumeToken);
      }
      if (resumeTypeCase_ == ResumeTypeOneofCase.ReadTime) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReadTime);
      }
      if (TargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetId);
      }
      if (Once != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Target other) {
      if (other == null) {
        return;
      }
      if (other.TargetId != 0) {
        TargetId = other.TargetId;
      }
      if (other.Once != false) {
        Once = other.Once;
      }
      switch (other.TargetTypeCase) {
        case TargetTypeOneofCase.Query:
          if (Query == null) {
            Query = new global::Google.Cloud.Firestore.V1Beta1.Target.Types.QueryTarget();
          }
          Query.MergeFrom(other.Query);
          break;
        case TargetTypeOneofCase.Documents:
          if (Documents == null) {
            Documents = new global::Google.Cloud.Firestore.V1Beta1.Target.Types.DocumentsTarget();
          }
          Documents.MergeFrom(other.Documents);
          break;
      }

      switch (other.ResumeTypeCase) {
        case ResumeTypeOneofCase.ResumeToken:
          ResumeToken = other.ResumeToken;
          break;
        case ResumeTypeOneofCase.ReadTime:
          if (ReadTime == null) {
            ReadTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
          }
          ReadTime.MergeFrom(other.ReadTime);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            global::Google.Cloud.Firestore.V1Beta1.Target.Types.QueryTarget subBuilder = new global::Google.Cloud.Firestore.V1Beta1.Target.Types.QueryTarget();
            if (targetTypeCase_ == TargetTypeOneofCase.Query) {
              subBuilder.MergeFrom(Query);
            }
            input.ReadMessage(subBuilder);
            Query = subBuilder;
            break;
          }
          case 26: {
            global::Google.Cloud.Firestore.V1Beta1.Target.Types.DocumentsTarget subBuilder = new global::Google.Cloud.Firestore.V1Beta1.Target.Types.DocumentsTarget();
            if (targetTypeCase_ == TargetTypeOneofCase.Documents) {
              subBuilder.MergeFrom(Documents);
            }
            input.ReadMessage(subBuilder);
            Documents = subBuilder;
            break;
          }
          case 34: {
            ResumeToken = input.ReadBytes();
            break;
          }
          case 40: {
            TargetId = input.ReadInt32();
            break;
          }
          case 48: {
            Once = input.ReadBool();
            break;
          }
          case 90: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (resumeTypeCase_ == ResumeTypeOneofCase.ReadTime) {
              subBuilder.MergeFrom(ReadTime);
            }
            input.ReadMessage(subBuilder);
            ReadTime = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            global::Google.Cloud.Firestore.V1Beta1.Target.Types.QueryTarget subBuilder = new global::Google.Cloud.Firestore.V1Beta1.Target.Types.QueryTarget();
            if (targetTypeCase_ == TargetTypeOneofCase.Query) {
              subBuilder.MergeFrom(Query);
            }
            input.ReadMessage(subBuilder);
            Query = subBuilder;
            break;
          }
          case 26: {
            global::Google.Cloud.Firestore.V1Beta1.Target.Types.DocumentsTarget subBuilder = new global::Google.Cloud.Firestore.V1Beta1.Target.Types.DocumentsTarget();
            if (targetTypeCase_ == TargetTypeOneofCase.Documents) {
              subBuilder.MergeFrom(Documents);
            }
            input.ReadMessage(subBuilder);
            Documents = subBuilder;
            break;
          }
          case 34: {
            ResumeToken = input.ReadBytes();
            break;
          }
          case 40: {
            TargetId = input.ReadInt32();
            break;
          }
          case 48: {
            Once = input.ReadBool();
            break;
          }
          case 90: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (resumeTypeCase_ == ResumeTypeOneofCase.ReadTime) {
              subBuilder.MergeFrom(ReadTime);
            }
            input.ReadMessage(subBuilder);
            ReadTime = subBuilder;
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Target message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// A target specified by a set of documents names.
      /// </summary>
      public sealed partial class DocumentsTarget : pb::IMessage<DocumentsTarget>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<DocumentsTarget> _parser = new pb::MessageParser<DocumentsTarget>(() => new DocumentsTarget());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DocumentsTarget> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Firestore.V1Beta1.Target.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DocumentsTarget() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DocumentsTarget(DocumentsTarget other) : this() {
          documents_ = other.documents_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DocumentsTarget Clone() {
          return new DocumentsTarget(this);
        }

        /// <summary>Field number for the "documents" field.</summary>
        public const int DocumentsFieldNumber = 2;
        private static readonly pb::FieldCodec<string> _repeated_documents_codec
            = pb::FieldCodec.ForString(18);
        private readonly pbc::RepeatedField<string> documents_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// The names of the documents to retrieve. In the format:
        /// `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
        /// The request will fail if any of the document is not a child resource of
        /// the given `database`. Duplicate names will be elided.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Documents {
          get { return documents_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DocumentsTarget);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DocumentsTarget other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!documents_.Equals(other.documents_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= documents_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          documents_.WriteTo(output, _repeated_documents_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          documents_.WriteTo(ref output, _repeated_documents_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += documents_.CalculateSize(_repeated_documents_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DocumentsTarget other) {
          if (other == null) {
            return;
          }
          documents_.Add(other.documents_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 18: {
                documents_.AddEntriesFrom(input, _repeated_documents_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 18: {
                documents_.AddEntriesFrom(ref input, _repeated_documents_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// A target specified by a query.
      /// </summary>
      public sealed partial class QueryTarget : pb::IMessage<QueryTarget>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<QueryTarget> _parser = new pb::MessageParser<QueryTarget>(() => new QueryTarget());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<QueryTarget> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Firestore.V1Beta1.Target.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public QueryTarget() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public QueryTarget(QueryTarget other) : this() {
          parent_ = other.parent_;
          switch (other.QueryTypeCase) {
            case QueryTypeOneofCase.StructuredQuery:
              StructuredQuery = other.StructuredQuery.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public QueryTarget Clone() {
          return new QueryTarget(this);
        }

        /// <summary>Field number for the "parent" field.</summary>
        public const int ParentFieldNumber = 1;
        private string parent_ = "";
        /// <summary>
        /// The parent resource name. In the format:
        /// `projects/{project_id}/databases/{database_id}/documents` or
        /// `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
        /// For example:
        /// `projects/my-project/databases/my-database/documents` or
        /// `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Parent {
          get { return parent_; }
          set {
            parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "structured_query" field.</summary>
        public const int StructuredQueryFieldNumber = 2;
        /// <summary>
        /// A structured query.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Firestore.V1Beta1.StructuredQuery StructuredQuery {
          get { return queryTypeCase_ == QueryTypeOneofCase.StructuredQuery ? (global::Google.Cloud.Firestore.V1Beta1.StructuredQuery) queryType_ : null; }
          set {
            queryType_ = value;
            queryTypeCase_ = value == null ? QueryTypeOneofCase.None : QueryTypeOneofCase.StructuredQuery;
          }
        }

        private object queryType_;
        /// <summary>Enum of possible cases for the "query_type" oneof.</summary>
        public enum QueryTypeOneofCase {
          None = 0,
          StructuredQuery = 2,
        }
        private QueryTypeOneofCase queryTypeCase_ = QueryTypeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public QueryTypeOneofCase QueryTypeCase {
          get { return queryTypeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearQueryType() {
          queryTypeCase_ = QueryTypeOneofCase.None;
          queryType_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as QueryTarget);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(QueryTarget other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Parent != other.Parent) return false;
          if (!object.Equals(StructuredQuery, other.StructuredQuery)) return false;
          if (QueryTypeCase != other.QueryTypeCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Parent.Length != 0) hash ^= Parent.GetHashCode();
          if (queryTypeCase_ == QueryTypeOneofCase.StructuredQuery) hash ^= StructuredQuery.GetHashCode();
          hash ^= (int) queryTypeCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Parent.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Parent);
          }
          if (queryTypeCase_ == QueryTypeOneofCase.StructuredQuery) {
            output.WriteRawTag(18);
            output.WriteMessage(StructuredQuery);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Parent.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Parent);
          }
          if (queryTypeCase_ == QueryTypeOneofCase.StructuredQuery) {
            output.WriteRawTag(18);
            output.WriteMessage(StructuredQuery);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Parent.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
          }
          if (queryTypeCase_ == QueryTypeOneofCase.StructuredQuery) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(StructuredQuery);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(QueryTarget other) {
          if (other == null) {
            return;
          }
          if (other.Parent.Length != 0) {
            Parent = other.Parent;
          }
          switch (other.QueryTypeCase) {
            case QueryTypeOneofCase.StructuredQuery:
              if (StructuredQuery == null) {
                StructuredQuery = new global::Google.Cloud.Firestore.V1Beta1.StructuredQuery();
              }
              StructuredQuery.MergeFrom(other.StructuredQuery);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Parent = input.ReadString();
                break;
              }
              case 18: {
                global::Google.Cloud.Firestore.V1Beta1.StructuredQuery subBuilder = new global::Google.Cloud.Firestore.V1Beta1.StructuredQuery();
                if (queryTypeCase_ == QueryTypeOneofCase.StructuredQuery) {
                  subBuilder.MergeFrom(StructuredQuery);
                }
                input.ReadMessage(subBuilder);
                StructuredQuery = subBuilder;
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Parent = input.ReadString();
                break;
              }
              case 18: {
                global::Google.Cloud.Firestore.V1Beta1.StructuredQuery subBuilder = new global::Google.Cloud.Firestore.V1Beta1.StructuredQuery();
                if (queryTypeCase_ == QueryTypeOneofCase.StructuredQuery) {
                  subBuilder.MergeFrom(StructuredQuery);
                }
                input.ReadMessage(subBuilder);
                StructuredQuery = subBuilder;
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// Targets being watched have changed.
  /// </summary>
  public sealed partial class TargetChange : pb::IMessage<TargetChange>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TargetChange> _parser = new pb::MessageParser<TargetChange>(() => new TargetChange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TargetChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.FirestoreReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetChange(TargetChange other) : this() {
      targetChangeType_ = other.targetChangeType_;
      targetIds_ = other.targetIds_.Clone();
      cause_ = other.cause_ != null ? other.cause_.Clone() : null;
      resumeToken_ = other.resumeToken_;
      readTime_ = other.readTime_ != null ? other.readTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetChange Clone() {
      return new TargetChange(this);
    }

    /// <summary>Field number for the "target_change_type" field.</summary>
    public const int TargetChangeTypeFieldNumber = 1;
    private global::Google.Cloud.Firestore.V1Beta1.TargetChange.Types.TargetChangeType targetChangeType_ = global::Google.Cloud.Firestore.V1Beta1.TargetChange.Types.TargetChangeType.NoChange;
    /// <summary>
    /// The type of change that occurred.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.TargetChange.Types.TargetChangeType TargetChangeType {
      get { return targetChangeType_; }
      set {
        targetChangeType_ = value;
      }
    }

    /// <summary>Field number for the "target_ids" field.</summary>
    public const int TargetIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_targetIds_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> targetIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// The target IDs of targets that have changed.
    ///
    /// If empty, the change applies to all targets.
    ///
    /// The order of the target IDs is not defined.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TargetIds {
      get { return targetIds_; }
    }

    /// <summary>Field number for the "cause" field.</summary>
    public const int CauseFieldNumber = 3;
    private global::Google.Rpc.Status cause_;
    /// <summary>
    /// The error that resulted in this change, if applicable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Rpc.Status Cause {
      get { return cause_; }
      set {
        cause_ = value;
      }
    }

    /// <summary>Field number for the "resume_token" field.</summary>
    public const int ResumeTokenFieldNumber = 4;
    private pb::ByteString resumeToken_ = pb::ByteString.Empty;
    /// <summary>
    /// A token that can be used to resume the stream for the given `target_ids`,
    /// or all targets if `target_ids` is empty.
    ///
    /// Not set on every target change.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ResumeToken {
      get { return resumeToken_; }
      set {
        resumeToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "read_time" field.</summary>
    public const int ReadTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp readTime_;
    /// <summary>
    /// The consistent `read_time` for the given `target_ids` (omitted when the
    /// target_ids are not at a consistent snapshot).
    ///
    /// The stream is guaranteed to send a `read_time` with `target_ids` empty
    /// whenever the entire stream reaches a new consistent snapshot. ADD,
    /// CURRENT, and RESET messages are guaranteed to (eventually) result in a
    /// new consistent snapshot (while NO_CHANGE and REMOVE messages are not).
    ///
    /// For a given stream, `read_time` is guaranteed to be monotonically
    /// increasing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ReadTime {
      get { return readTime_; }
      set {
        readTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TargetChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TargetChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetChangeType != other.TargetChangeType) return false;
      if(!targetIds_.Equals(other.targetIds_)) return false;
      if (!object.Equals(Cause, other.Cause)) return false;
      if (ResumeToken != other.ResumeToken) return false;
      if (!object.Equals(ReadTime, other.ReadTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetChangeType != global::Google.Cloud.Firestore.V1Beta1.TargetChange.Types.TargetChangeType.NoChange) hash ^= TargetChangeType.GetHashCode();
      hash ^= targetIds_.GetHashCode();
      if (cause_ != null) hash ^= Cause.GetHashCode();
      if (ResumeToken.Length != 0) hash ^= ResumeToken.GetHashCode();
      if (readTime_ != null) hash ^= ReadTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TargetChangeType != global::Google.Cloud.Firestore.V1Beta1.TargetChange.Types.TargetChangeType.NoChange) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TargetChangeType);
      }
      targetIds_.WriteTo(output, _repeated_targetIds_codec);
      if (cause_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Cause);
      }
      if (ResumeToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(ResumeToken);
      }
      if (readTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ReadTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TargetChangeType != global::Google.Cloud.Firestore.V1Beta1.TargetChange.Types.TargetChangeType.NoChange) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TargetChangeType);
      }
      targetIds_.WriteTo(ref output, _repeated_targetIds_codec);
      if (cause_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Cause);
      }
      if (ResumeToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(ResumeToken);
      }
      if (readTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ReadTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetChangeType != global::Google.Cloud.Firestore.V1Beta1.TargetChange.Types.TargetChangeType.NoChange) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TargetChangeType);
      }
      size += targetIds_.CalculateSize(_repeated_targetIds_codec);
      if (cause_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cause);
      }
      if (ResumeToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ResumeToken);
      }
      if (readTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReadTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TargetChange other) {
      if (other == null) {
        return;
      }
      if (other.TargetChangeType != global::Google.Cloud.Firestore.V1Beta1.TargetChange.Types.TargetChangeType.NoChange) {
        TargetChangeType = other.TargetChangeType;
      }
      targetIds_.Add(other.targetIds_);
      if (other.cause_ != null) {
        if (cause_ == null) {
          Cause = new global::Google.Rpc.Status();
        }
        Cause.MergeFrom(other.Cause);
      }
      if (other.ResumeToken.Length != 0) {
        ResumeToken = other.ResumeToken;
      }
      if (other.readTime_ != null) {
        if (readTime_ == null) {
          ReadTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ReadTime.MergeFrom(other.ReadTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetChangeType = (global::Google.Cloud.Firestore.V1Beta1.TargetChange.Types.TargetChangeType) input.ReadEnum();
            break;
          }
          case 18:
          case 16: {
            targetIds_.AddEntriesFrom(input, _repeated_targetIds_codec);
            break;
          }
          case 26: {
            if (cause_ == null) {
              Cause = new global::Google.Rpc.Status();
            }
            input.ReadMessage(Cause);
            break;
          }
          case 34: {
            ResumeToken = input.ReadBytes();
            break;
          }
          case 50: {
            if (readTime_ == null) {
              ReadTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ReadTime);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TargetChangeType = (global::Google.Cloud.Firestore.V1Beta1.TargetChange.Types.TargetChangeType) input.ReadEnum();
            break;
          }
          case 18:
          case 16: {
            targetIds_.AddEntriesFrom(ref input, _repeated_targetIds_codec);
            break;
          }
          case 26: {
            if (cause_ == null) {
              Cause = new global::Google.Rpc.Status();
            }
            input.ReadMessage(Cause);
            break;
          }
          case 34: {
            ResumeToken = input.ReadBytes();
            break;
          }
          case 50: {
            if (readTime_ == null) {
              ReadTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ReadTime);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the TargetChange message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The type of change.
      /// </summary>
      public enum TargetChangeType {
        /// <summary>
        /// No change has occurred. Used only to send an updated `resume_token`.
        /// </summary>
        [pbr::OriginalName("NO_CHANGE")] NoChange = 0,
        /// <summary>
        /// The targets have been added.
        /// </summary>
        [pbr::OriginalName("ADD")] Add = 1,
        /// <summary>
        /// The targets have been removed.
        /// </summary>
        [pbr::OriginalName("REMOVE")] Remove = 2,
        /// <summary>
        /// The targets reflect all changes committed before the targets were added
        /// to the stream.
        ///
        /// This will be sent after or with a `read_time` that is greater than or
        /// equal to the time at which the targets were added.
        ///
        /// Listeners can wait for this change if read-after-write semantics
        /// are desired.
        /// </summary>
        [pbr::OriginalName("CURRENT")] Current = 3,
        /// <summary>
        /// The targets have been reset, and a new initial state for the targets
        /// will be returned in subsequent changes.
        ///
        /// After the initial state is complete, `CURRENT` will be returned even
        /// if the target was previously indicated to be `CURRENT`.
        /// </summary>
        [pbr::OriginalName("RESET")] Reset = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// The request for [Firestore.ListCollectionIds][google.firestore.v1beta1.Firestore.ListCollectionIds].
  /// </summary>
  public sealed partial class ListCollectionIdsRequest : pb::IMessage<ListCollectionIdsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListCollectionIdsRequest> _parser = new pb::MessageParser<ListCollectionIdsRequest>(() => new ListCollectionIdsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListCollectionIdsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.FirestoreReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCollectionIdsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCollectionIdsRequest(ListCollectionIdsRequest other) : this() {
      parent_ = other.parent_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCollectionIdsRequest Clone() {
      return new ListCollectionIdsRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// Required. The parent document. In the format:
    /// `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
    /// For example:
    /// `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    /// The maximum number of results to return.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// A page token. Must be a value from
    /// [ListCollectionIdsResponse][google.firestore.v1beta1.ListCollectionIdsResponse].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListCollectionIdsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListCollectionIdsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListCollectionIdsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The response from [Firestore.ListCollectionIds][google.firestore.v1beta1.Firestore.ListCollectionIds].
  /// </summary>
  public sealed partial class ListCollectionIdsResponse : pb::IMessage<ListCollectionIdsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListCollectionIdsResponse> _parser = new pb::MessageParser<ListCollectionIdsResponse>(() => new ListCollectionIdsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListCollectionIdsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.FirestoreReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCollectionIdsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCollectionIdsResponse(ListCollectionIdsResponse other) : this() {
      collectionIds_ = other.collectionIds_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCollectionIdsResponse Clone() {
      return new ListCollectionIdsResponse(this);
    }

    /// <summary>Field number for the "collection_ids" field.</summary>
    public const int CollectionIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_collectionIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> collectionIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The collection ids.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CollectionIds {
      get { return collectionIds_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// A page token that may be used to continue the list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListCollectionIdsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListCollectionIdsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!collectionIds_.Equals(other.collectionIds_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= collectionIds_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      collectionIds_.WriteTo(output, _repeated_collectionIds_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      collectionIds_.WriteTo(ref output, _repeated_collectionIds_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += collectionIds_.CalculateSize(_repeated_collectionIds_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListCollectionIdsResponse other) {
      if (other == null) {
        return;
      }
      collectionIds_.Add(other.collectionIds_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            collectionIds_.AddEntriesFrom(input, _repeated_collectionIds_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            collectionIds_.AddEntriesFrom(ref input, _repeated_collectionIds_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The request for [Firestore.BatchWrite][google.firestore.v1beta1.Firestore.BatchWrite].
  /// </summary>
  public sealed partial class BatchWriteRequest : pb::IMessage<BatchWriteRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BatchWriteRequest> _parser = new pb::MessageParser<BatchWriteRequest>(() => new BatchWriteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchWriteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.FirestoreReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchWriteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchWriteRequest(BatchWriteRequest other) : this() {
      database_ = other.database_;
      writes_ = other.writes_.Clone();
      labels_ = other.labels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchWriteRequest Clone() {
      return new BatchWriteRequest(this);
    }

    /// <summary>Field number for the "database" field.</summary>
    public const int DatabaseFieldNumber = 1;
    private string database_ = "";
    /// <summary>
    /// Required. The database name. In the format:
    /// `projects/{project_id}/databases/{database_id}`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Database {
      get { return database_; }
      set {
        database_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "writes" field.</summary>
    public const int WritesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Cloud.Firestore.V1Beta1.Write> _repeated_writes_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Firestore.V1Beta1.Write.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.Write> writes_ = new pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.Write>();
    /// <summary>
    /// The writes to apply.
    ///
    /// Method does not apply writes atomically and does not guarantee ordering.
    /// Each write succeeds or fails independently. You cannot write to the same
    /// document more than once per request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.Write> Writes {
      get { return writes_; }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 3;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 26);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Labels associated with this batch write.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchWriteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchWriteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Database != other.Database) return false;
      if(!writes_.Equals(other.writes_)) return false;
      if (!Labels.Equals(other.Labels)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Database.Length != 0) hash ^= Database.GetHashCode();
      hash ^= writes_.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Database.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Database);
      }
      writes_.WriteTo(output, _repeated_writes_codec);
      labels_.WriteTo(output, _map_labels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Database.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Database);
      }
      writes_.WriteTo(ref output, _repeated_writes_codec);
      labels_.WriteTo(ref output, _map_labels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Database.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Database);
      }
      size += writes_.CalculateSize(_repeated_writes_codec);
      size += labels_.CalculateSize(_map_labels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchWriteRequest other) {
      if (other == null) {
        return;
      }
      if (other.Database.Length != 0) {
        Database = other.Database;
      }
      writes_.Add(other.writes_);
      labels_.Add(other.labels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Database = input.ReadString();
            break;
          }
          case 18: {
            writes_.AddEntriesFrom(input, _repeated_writes_codec);
            break;
          }
          case 26: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Database = input.ReadString();
            break;
          }
          case 18: {
            writes_.AddEntriesFrom(ref input, _repeated_writes_codec);
            break;
          }
          case 26: {
            labels_.AddEntriesFrom(ref input, _map_labels_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The response from [Firestore.BatchWrite][google.firestore.v1beta1.Firestore.BatchWrite].
  /// </summary>
  public sealed partial class BatchWriteResponse : pb::IMessage<BatchWriteResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BatchWriteResponse> _parser = new pb::MessageParser<BatchWriteResponse>(() => new BatchWriteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchWriteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.FirestoreReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchWriteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchWriteResponse(BatchWriteResponse other) : this() {
      writeResults_ = other.writeResults_.Clone();
      status_ = other.status_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchWriteResponse Clone() {
      return new BatchWriteResponse(this);
    }

    /// <summary>Field number for the "write_results" field.</summary>
    public const int WriteResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Firestore.V1Beta1.WriteResult> _repeated_writeResults_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Firestore.V1Beta1.WriteResult.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.WriteResult> writeResults_ = new pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.WriteResult>();
    /// <summary>
    /// The result of applying the writes.
    ///
    /// This i-th write result corresponds to the i-th write in the
    /// request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.WriteResult> WriteResults {
      get { return writeResults_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Rpc.Status> _repeated_status_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Rpc.Status.Parser);
    private readonly pbc::RepeatedField<global::Google.Rpc.Status> status_ = new pbc::RepeatedField<global::Google.Rpc.Status>();
    /// <summary>
    /// The status of applying the writes.
    ///
    /// This i-th write status corresponds to the i-th write in the
    /// request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Rpc.Status> Status {
      get { return status_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchWriteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchWriteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!writeResults_.Equals(other.writeResults_)) return false;
      if(!status_.Equals(other.status_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= writeResults_.GetHashCode();
      hash ^= status_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      writeResults_.WriteTo(output, _repeated_writeResults_codec);
      status_.WriteTo(output, _repeated_status_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      writeResults_.WriteTo(ref output, _repeated_writeResults_codec);
      status_.WriteTo(ref output, _repeated_status_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += writeResults_.CalculateSize(_repeated_writeResults_codec);
      size += status_.CalculateSize(_repeated_status_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchWriteResponse other) {
      if (other == null) {
        return;
      }
      writeResults_.Add(other.writeResults_);
      status_.Add(other.status_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            writeResults_.AddEntriesFrom(input, _repeated_writeResults_codec);
            break;
          }
          case 18: {
            status_.AddEntriesFrom(input, _repeated_status_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            writeResults_.AddEntriesFrom(ref input, _repeated_writeResults_codec);
            break;
          }
          case 18: {
            status_.AddEntriesFrom(ref input, _repeated_status_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
