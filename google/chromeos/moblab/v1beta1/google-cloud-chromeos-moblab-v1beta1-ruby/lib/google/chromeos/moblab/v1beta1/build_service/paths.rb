# frozen_string_literal: true

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!


module Google
  module Chromeos
    module Moblab
      module V1beta1
        module BuildService
          # Path helper methods for the BuildService API.
          module Paths
            ##
            # Create a fully-qualified BuildArtifact resource string.
            #
            # The resource will be in the following format:
            #
            # `buildTargets/{build_target}/models/{model}/builds/{build}/artifacts/{artifact}`
            #
            # @param build_target [String]
            # @param model [String]
            # @param build [String]
            # @param artifact [String]
            #
            # @return [::String]
            def build_artifact_path build_target:, model:, build:, artifact:
              raise ::ArgumentError, "build_target cannot contain /" if build_target.to_s.include? "/"
              raise ::ArgumentError, "model cannot contain /" if model.to_s.include? "/"
              raise ::ArgumentError, "build cannot contain /" if build.to_s.include? "/"

              "buildTargets/#{build_target}/models/#{model}/builds/#{build}/artifacts/#{artifact}"
            end

            ##
            # Create a fully-qualified BuildTarget resource string.
            #
            # The resource will be in the following format:
            #
            # `buildTargets/{build_target}`
            #
            # @param build_target [String]
            #
            # @return [::String]
            def build_target_path build_target:
              "buildTargets/#{build_target}"
            end

            ##
            # Create a fully-qualified Model resource string.
            #
            # The resource will be in the following format:
            #
            # `buildTargets/{build_target}/models/{model}`
            #
            # @param build_target [String]
            # @param model [String]
            #
            # @return [::String]
            def model_path build_target:, model:
              raise ::ArgumentError, "build_target cannot contain /" if build_target.to_s.include? "/"

              "buildTargets/#{build_target}/models/#{model}"
            end

            extend self
          end
        end
      end
    end
  end
end
