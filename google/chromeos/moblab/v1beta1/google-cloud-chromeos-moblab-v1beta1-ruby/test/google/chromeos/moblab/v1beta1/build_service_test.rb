# frozen_string_literal: true

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "helper"

require "gapic/grpc/service_stub"

require "google/chromeos/moblab/v1beta1/build_service_pb"
require "google/chromeos/moblab/v1beta1/build_service_services_pb"
require "google/chromeos/moblab/v1beta1/build_service"

class ::Google::Chromeos::Moblab::V1beta1::BuildService::ClientTest < Minitest::Test
  class ClientStub
    attr_accessor :call_rpc_count, :requests

    def initialize response, operation, &block
      @response = response
      @operation = operation
      @block = block
      @call_rpc_count = 0
      @requests = []
    end

    def call_rpc *args, **kwargs
      @call_rpc_count += 1

      @requests << @block&.call(*args, **kwargs)

      yield @response, @operation if block_given?

      @response
    end
  end

  def test_list_build_targets
    # Create GRPC objects.
    grpc_response = ::Google::Chromeos::Moblab::V1beta1::ListBuildTargetsResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    page_size = 42
    page_token = "hello world"

    list_build_targets_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :list_build_targets, name
      assert_kind_of ::Google::Chromeos::Moblab::V1beta1::ListBuildTargetsRequest, request
      assert_equal 42, request["page_size"]
      assert_equal "hello world", request["page_token"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, list_build_targets_client_stub do
      # Create client
      client = ::Google::Chromeos::Moblab::V1beta1::BuildService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.list_build_targets({ page_size: page_size, page_token: page_token }) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.list_build_targets page_size: page_size, page_token: page_token do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.list_build_targets ::Google::Chromeos::Moblab::V1beta1::ListBuildTargetsRequest.new(page_size: page_size, page_token: page_token) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.list_build_targets({ page_size: page_size, page_token: page_token }, grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.list_build_targets(::Google::Chromeos::Moblab::V1beta1::ListBuildTargetsRequest.new(page_size: page_size, page_token: page_token), grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, list_build_targets_client_stub.call_rpc_count
    end
  end

  def test_list_builds
    # Create GRPC objects.
    grpc_response = ::Google::Chromeos::Moblab::V1beta1::ListBuildsResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    parent = "hello world"
    page_size = 42
    page_token = "hello world"
    filter = "hello world"
    read_mask = {}
    group_by = {}

    list_builds_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :list_builds, name
      assert_kind_of ::Google::Chromeos::Moblab::V1beta1::ListBuildsRequest, request
      assert_equal "hello world", request["parent"]
      assert_equal 42, request["page_size"]
      assert_equal "hello world", request["page_token"]
      assert_equal "hello world", request["filter"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::FieldMask), request["read_mask"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::FieldMask), request["group_by"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, list_builds_client_stub do
      # Create client
      client = ::Google::Chromeos::Moblab::V1beta1::BuildService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.list_builds({ parent: parent, page_size: page_size, page_token: page_token, filter: filter, read_mask: read_mask, group_by: group_by }) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.list_builds parent: parent, page_size: page_size, page_token: page_token, filter: filter, read_mask: read_mask, group_by: group_by do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.list_builds ::Google::Chromeos::Moblab::V1beta1::ListBuildsRequest.new(parent: parent, page_size: page_size, page_token: page_token, filter: filter, read_mask: read_mask, group_by: group_by) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.list_builds({ parent: parent, page_size: page_size, page_token: page_token, filter: filter, read_mask: read_mask, group_by: group_by }, grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.list_builds(::Google::Chromeos::Moblab::V1beta1::ListBuildsRequest.new(parent: parent, page_size: page_size, page_token: page_token, filter: filter, read_mask: read_mask, group_by: group_by), grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, list_builds_client_stub.call_rpc_count
    end
  end

  def test_check_build_stage_status
    # Create GRPC objects.
    grpc_response = ::Google::Chromeos::Moblab::V1beta1::CheckBuildStageStatusResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    filter = "hello world"

    check_build_stage_status_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :check_build_stage_status, name
      assert_kind_of ::Google::Chromeos::Moblab::V1beta1::CheckBuildStageStatusRequest, request
      assert_equal "hello world", request["name"]
      assert_equal "hello world", request["filter"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, check_build_stage_status_client_stub do
      # Create client
      client = ::Google::Chromeos::Moblab::V1beta1::BuildService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.check_build_stage_status({ name: name, filter: filter }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.check_build_stage_status name: name, filter: filter do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.check_build_stage_status ::Google::Chromeos::Moblab::V1beta1::CheckBuildStageStatusRequest.new(name: name, filter: filter) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.check_build_stage_status({ name: name, filter: filter }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.check_build_stage_status(::Google::Chromeos::Moblab::V1beta1::CheckBuildStageStatusRequest.new(name: name, filter: filter), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, check_build_stage_status_client_stub.call_rpc_count
    end
  end

  def test_stage_build
    # Create GRPC objects.
    grpc_response = ::Google::Longrunning::Operation.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    filter = "hello world"

    stage_build_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :stage_build, name
      assert_kind_of ::Google::Chromeos::Moblab::V1beta1::StageBuildRequest, request
      assert_equal "hello world", request["name"]
      assert_equal "hello world", request["filter"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, stage_build_client_stub do
      # Create client
      client = ::Google::Chromeos::Moblab::V1beta1::BuildService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.stage_build({ name: name, filter: filter }) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.stage_build name: name, filter: filter do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.stage_build ::Google::Chromeos::Moblab::V1beta1::StageBuildRequest.new(name: name, filter: filter) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.stage_build({ name: name, filter: filter }, grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.stage_build(::Google::Chromeos::Moblab::V1beta1::StageBuildRequest.new(name: name, filter: filter), grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, stage_build_client_stub.call_rpc_count
    end
  end

  def test_find_most_stable_build
    # Create GRPC objects.
    grpc_response = ::Google::Chromeos::Moblab::V1beta1::FindMostStableBuildResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    build_target = "hello world"

    find_most_stable_build_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :find_most_stable_build, name
      assert_kind_of ::Google::Chromeos::Moblab::V1beta1::FindMostStableBuildRequest, request
      assert_equal "hello world", request["build_target"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, find_most_stable_build_client_stub do
      # Create client
      client = ::Google::Chromeos::Moblab::V1beta1::BuildService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.find_most_stable_build({ build_target: build_target }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.find_most_stable_build build_target: build_target do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.find_most_stable_build ::Google::Chromeos::Moblab::V1beta1::FindMostStableBuildRequest.new(build_target: build_target) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.find_most_stable_build({ build_target: build_target }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.find_most_stable_build(::Google::Chromeos::Moblab::V1beta1::FindMostStableBuildRequest.new(build_target: build_target), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, find_most_stable_build_client_stub.call_rpc_count
    end
  end

  def test_configure
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure

    client = block_config = config = nil
    Gapic::ServiceStub.stub :new, nil do
      client = ::Google::Chromeos::Moblab::V1beta1::BuildService::Client.new do |config|
        config.credentials = grpc_channel
      end
    end

    config = client.configure do |c|
      block_config = c
    end

    assert_same block_config, config
    assert_kind_of ::Google::Chromeos::Moblab::V1beta1::BuildService::Client::Configuration, config
  end

  def test_operations_client
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure

    client = nil
    Gapic::ServiceStub.stub :new, nil do
      client = ::Google::Chromeos::Moblab::V1beta1::BuildService::Client.new do |config|
        config.credentials = grpc_channel
      end
    end

    assert_kind_of ::Google::Chromeos::Moblab::V1beta1::BuildService::Operations, client.operations_client
  end
end
