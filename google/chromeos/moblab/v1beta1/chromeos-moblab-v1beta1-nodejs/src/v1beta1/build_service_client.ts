// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback, GaxCall} from 'google-gax';

import { Transform } from 'stream';
import { RequestType } from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1beta1/build_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './build_service_client_config.json';
import { operationsProtos } from 'google-gax';
const version = require('../../../package.json').version;

/**
 *  Manages Chrome OS build services.
 * @class
 * @memberof v1beta1
 */
export class BuildServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  buildServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of BuildServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP fallback mode.
   *     In fallback mode, a special browser-compatible transport implementation is used
   *     instead of gRPC transport. In browser context (if the `window` object is defined)
   *     the fallback mode is enabled automatically; set `options.fallback` to `false`
   *     if you need to override this behavior.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof BuildServiceClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      buildPathTemplate: new this._gaxModule.PathTemplate(
        'buildTargets/{build_target}/models/{model}/builds/{build}'
      ),
      buildArtifactPathTemplate: new this._gaxModule.PathTemplate(
        'buildTargets/{build_target}/models/{model}/builds/{build}/artifacts/{artifact}'
      ),
      buildTargetPathTemplate: new this._gaxModule.PathTemplate(
        'buildTargets/{build_target}'
      ),
      milestonePathTemplate: new this._gaxModule.PathTemplate(
        'milestones/{milestone}'
      ),
      modelPathTemplate: new this._gaxModule.PathTemplate(
        'buildTargets/{build_target}/models/{model}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listBuildTargets:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'buildTargets'),
      listBuilds:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'builds')
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);

    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.

    this.operationsClient = this._gaxModule.lro({
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
    }).operationsClient(opts);
    const stageBuildResponse = protoFilesRoot.lookup(
      '.google.chromeos.moblab.v1beta1.StageBuildResponse') as gax.protobuf.Type;
    const stageBuildMetadata = protoFilesRoot.lookup(
      '.google.chromeos.moblab.v1beta1.StageBuildMetadata') as gax.protobuf.Type;

    this.descriptors.longrunning = {
      stageBuild: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        stageBuildResponse.decode.bind(stageBuildResponse),
        stageBuildMetadata.decode.bind(stageBuildMetadata))
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.chromeos.moblab.v1beta1.BuildService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = gax.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.buildServiceStub) {
      return this.buildServiceStub;
    }

    // Put together the "service stub" for
    // google.chromeos.moblab.v1beta1.BuildService.
    this.buildServiceStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.chromeos.moblab.v1beta1.BuildService') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.chromeos.moblab.v1beta1.BuildService,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const buildServiceStubMethods =
        ['listBuildTargets', 'listBuilds', 'checkBuildStageStatus', 'stageBuild', 'findMostStableBuild'];
    for (const methodName of buildServiceStubMethods) {
      const callPromise = this.buildServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.buildServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'chromeosmoblab.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'chromeosmoblab.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/moblabapi'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  checkBuildStageStatus(
      request?: protos.google.chromeos.moblab.v1beta1.ICheckBuildStageStatusRequest,
      options?: CallOptions):
      Promise<[
        protos.google.chromeos.moblab.v1beta1.ICheckBuildStageStatusResponse,
        protos.google.chromeos.moblab.v1beta1.ICheckBuildStageStatusRequest|undefined, {}|undefined
      ]>;
  checkBuildStageStatus(
      request: protos.google.chromeos.moblab.v1beta1.ICheckBuildStageStatusRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.chromeos.moblab.v1beta1.ICheckBuildStageStatusResponse,
          protos.google.chromeos.moblab.v1beta1.ICheckBuildStageStatusRequest|null|undefined,
          {}|null|undefined>): void;
  checkBuildStageStatus(
      request: protos.google.chromeos.moblab.v1beta1.ICheckBuildStageStatusRequest,
      callback: Callback<
          protos.google.chromeos.moblab.v1beta1.ICheckBuildStageStatusResponse,
          protos.google.chromeos.moblab.v1beta1.ICheckBuildStageStatusRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Checks the stage status for a given build artifact in a partner Google
 * Cloud Storage bucket.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The full resource name of the build artifact.
 *   For example,
 *   'buildTargets/octopus/models/bobba/builds/12607.6.0/artifacts/chromeos-moblab-peng-staging'.
 * @param {string} [request.filter]
 *   Optional. Filter that specifies value constraints of fields. For example, the
 *   filter can be set as "filter='type=release'" to only check the release
 *   builds.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [CheckBuildStageStatusResponse]{@link google.chromeos.moblab.v1beta1.CheckBuildStageStatusResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.checkBuildStageStatus(request);
 */
  checkBuildStageStatus(
      request?: protos.google.chromeos.moblab.v1beta1.ICheckBuildStageStatusRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.chromeos.moblab.v1beta1.ICheckBuildStageStatusResponse,
          protos.google.chromeos.moblab.v1beta1.ICheckBuildStageStatusRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.chromeos.moblab.v1beta1.ICheckBuildStageStatusResponse,
          protos.google.chromeos.moblab.v1beta1.ICheckBuildStageStatusRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.chromeos.moblab.v1beta1.ICheckBuildStageStatusResponse,
        protos.google.chromeos.moblab.v1beta1.ICheckBuildStageStatusRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.checkBuildStageStatus(request, options, callback);
  }
  findMostStableBuild(
      request?: protos.google.chromeos.moblab.v1beta1.IFindMostStableBuildRequest,
      options?: CallOptions):
      Promise<[
        protos.google.chromeos.moblab.v1beta1.IFindMostStableBuildResponse,
        protos.google.chromeos.moblab.v1beta1.IFindMostStableBuildRequest|undefined, {}|undefined
      ]>;
  findMostStableBuild(
      request: protos.google.chromeos.moblab.v1beta1.IFindMostStableBuildRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.chromeos.moblab.v1beta1.IFindMostStableBuildResponse,
          protos.google.chromeos.moblab.v1beta1.IFindMostStableBuildRequest|null|undefined,
          {}|null|undefined>): void;
  findMostStableBuild(
      request: protos.google.chromeos.moblab.v1beta1.IFindMostStableBuildRequest,
      callback: Callback<
          protos.google.chromeos.moblab.v1beta1.IFindMostStableBuildResponse,
          protos.google.chromeos.moblab.v1beta1.IFindMostStableBuildRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Finds the most stable build for the given build target. The definition of
 * the most stable build is determined by evaluating the following rules in
 * order until one is true. If none are true, then there is no stable build
 * and it will return an empty response.
 *
 * Evaluation rules:
 *   1. Stable channel build with label “Live”
 *   2. Beta channel build with label “Live”
 *   3. Dev channel build with label “Live”
 *   4. Most recent stable channel build with build status Pass
 *   5. Most recent beta channel build with build status Pass
 *   6. Most recent dev channel build with build status Pass
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.buildTarget
 *   Required. The full resource name of the build target.
 *   For example,
 *   'buildTargets/octopus'.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [FindMostStableBuildResponse]{@link google.chromeos.moblab.v1beta1.FindMostStableBuildResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.findMostStableBuild(request);
 */
  findMostStableBuild(
      request?: protos.google.chromeos.moblab.v1beta1.IFindMostStableBuildRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.chromeos.moblab.v1beta1.IFindMostStableBuildResponse,
          protos.google.chromeos.moblab.v1beta1.IFindMostStableBuildRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.chromeos.moblab.v1beta1.IFindMostStableBuildResponse,
          protos.google.chromeos.moblab.v1beta1.IFindMostStableBuildRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.chromeos.moblab.v1beta1.IFindMostStableBuildResponse,
        protos.google.chromeos.moblab.v1beta1.IFindMostStableBuildRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'build_target': request.buildTarget || '',
    });
    this.initialize();
    return this.innerApiCalls.findMostStableBuild(request, options, callback);
  }

  stageBuild(
      request?: protos.google.chromeos.moblab.v1beta1.IStageBuildRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.chromeos.moblab.v1beta1.IStageBuildResponse, protos.google.chromeos.moblab.v1beta1.IStageBuildMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  stageBuild(
      request: protos.google.chromeos.moblab.v1beta1.IStageBuildRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.chromeos.moblab.v1beta1.IStageBuildResponse, protos.google.chromeos.moblab.v1beta1.IStageBuildMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  stageBuild(
      request: protos.google.chromeos.moblab.v1beta1.IStageBuildRequest,
      callback: Callback<
          LROperation<protos.google.chromeos.moblab.v1beta1.IStageBuildResponse, protos.google.chromeos.moblab.v1beta1.IStageBuildMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
/**
 * Stages a given build artifact from a internal Google Cloud Storage bucket
 * to a partner Google Cloud Storage bucket. If any of objects has already
 * been copied, it will overwrite the previous objects. Operation <response:
 * {@link google.chromeos.moblab.v1beta1.StageBuildResponse|StageBuildResponse},
 *            metadata: {@link google.chromeos.moblab.v1beta1.StageBuildMetadata|StageBuildMetadata}>
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The full resource name of the build artifact.
 *   For example,
 *   'buildTargets/octopus/models/bobba/builds/12607.6.0/artifacts/chromeos-moblab-peng-staging'.
 * @param {string} [request.filter]
 *   Optional. Filter that specifies value constraints of fields. For example, the
 *   filter can be set as "filter='type=release'" to only check the release
 *   builds.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const [operation] = await client.stageBuild(request);
 * const [response] = await operation.promise();
 */
  stageBuild(
      request?: protos.google.chromeos.moblab.v1beta1.IStageBuildRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.chromeos.moblab.v1beta1.IStageBuildResponse, protos.google.chromeos.moblab.v1beta1.IStageBuildMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.chromeos.moblab.v1beta1.IStageBuildResponse, protos.google.chromeos.moblab.v1beta1.IStageBuildMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.chromeos.moblab.v1beta1.IStageBuildResponse, protos.google.chromeos.moblab.v1beta1.IStageBuildMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.stageBuild(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `stageBuild()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const decodedOperation = await checkStageBuildProgress(name);
 * console.log(decodedOperation.result);
 * console.log(decodedOperation.done);
 * console.log(decodedOperation.metadata);
 */
  async checkStageBuildProgress(name: string): Promise<LROperation<protos.google.chromeos.moblab.v1beta1.StageBuildResponse, protos.google.chromeos.moblab.v1beta1.StageBuildMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.stageBuild, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.chromeos.moblab.v1beta1.StageBuildResponse, protos.google.chromeos.moblab.v1beta1.StageBuildMetadata>;
  }
  listBuildTargets(
      request?: protos.google.chromeos.moblab.v1beta1.IListBuildTargetsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.chromeos.moblab.v1beta1.IBuildTarget[],
        protos.google.chromeos.moblab.v1beta1.IListBuildTargetsRequest|null,
        protos.google.chromeos.moblab.v1beta1.IListBuildTargetsResponse
      ]>;
  listBuildTargets(
      request: protos.google.chromeos.moblab.v1beta1.IListBuildTargetsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.chromeos.moblab.v1beta1.IListBuildTargetsRequest,
          protos.google.chromeos.moblab.v1beta1.IListBuildTargetsResponse|null|undefined,
          protos.google.chromeos.moblab.v1beta1.IBuildTarget>): void;
  listBuildTargets(
      request: protos.google.chromeos.moblab.v1beta1.IListBuildTargetsRequest,
      callback: PaginationCallback<
          protos.google.chromeos.moblab.v1beta1.IListBuildTargetsRequest,
          protos.google.chromeos.moblab.v1beta1.IListBuildTargetsResponse|null|undefined,
          protos.google.chromeos.moblab.v1beta1.IBuildTarget>): void;
/**
 * Lists all build targets that a user has access to.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} [request.pageSize]
 *   Optional. The number of build targets to return in a page.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `ListBuildTargets` call. Provide
 *   this to retrieve the subsequent page.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [BuildTarget]{@link google.chromeos.moblab.v1beta1.BuildTarget}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listBuildTargetsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listBuildTargets(
      request?: protos.google.chromeos.moblab.v1beta1.IListBuildTargetsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.chromeos.moblab.v1beta1.IListBuildTargetsRequest,
          protos.google.chromeos.moblab.v1beta1.IListBuildTargetsResponse|null|undefined,
          protos.google.chromeos.moblab.v1beta1.IBuildTarget>,
      callback?: PaginationCallback<
          protos.google.chromeos.moblab.v1beta1.IListBuildTargetsRequest,
          protos.google.chromeos.moblab.v1beta1.IListBuildTargetsResponse|null|undefined,
          protos.google.chromeos.moblab.v1beta1.IBuildTarget>):
      Promise<[
        protos.google.chromeos.moblab.v1beta1.IBuildTarget[],
        protos.google.chromeos.moblab.v1beta1.IListBuildTargetsRequest|null,
        protos.google.chromeos.moblab.v1beta1.IListBuildTargetsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.listBuildTargets(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} [request.pageSize]
 *   Optional. The number of build targets to return in a page.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `ListBuildTargets` call. Provide
 *   this to retrieve the subsequent page.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [BuildTarget]{@link google.chromeos.moblab.v1beta1.BuildTarget} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listBuildTargetsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listBuildTargetsStream(
      request?: protos.google.chromeos.moblab.v1beta1.IListBuildTargetsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listBuildTargets.createStream(
      this.innerApiCalls.listBuildTargets as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listBuildTargets`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} [request.pageSize]
 *   Optional. The number of build targets to return in a page.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `ListBuildTargets` call. Provide
 *   this to retrieve the subsequent page.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [BuildTarget]{@link google.chromeos.moblab.v1beta1.BuildTarget}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listBuildTargetsAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listBuildTargetsAsync(
      request?: protos.google.chromeos.moblab.v1beta1.IListBuildTargetsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.chromeos.moblab.v1beta1.IBuildTarget>{
    request = request || {};
    options = options || {};
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listBuildTargets.asyncIterate(
      this.innerApiCalls['listBuildTargets'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.chromeos.moblab.v1beta1.IBuildTarget>;
  }
  listBuilds(
      request?: protos.google.chromeos.moblab.v1beta1.IListBuildsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.chromeos.moblab.v1beta1.IBuild[],
        protos.google.chromeos.moblab.v1beta1.IListBuildsRequest|null,
        protos.google.chromeos.moblab.v1beta1.IListBuildsResponse
      ]>;
  listBuilds(
      request: protos.google.chromeos.moblab.v1beta1.IListBuildsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.chromeos.moblab.v1beta1.IListBuildsRequest,
          protos.google.chromeos.moblab.v1beta1.IListBuildsResponse|null|undefined,
          protos.google.chromeos.moblab.v1beta1.IBuild>): void;
  listBuilds(
      request: protos.google.chromeos.moblab.v1beta1.IListBuildsRequest,
      callback: PaginationCallback<
          protos.google.chromeos.moblab.v1beta1.IListBuildsRequest,
          protos.google.chromeos.moblab.v1beta1.IListBuildsResponse|null|undefined,
          protos.google.chromeos.moblab.v1beta1.IBuild>): void;
/**
 * Lists all builds for the given build target and model in descending order
 * for the milestones and build versions.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The full resource name of the model. The model id is the same as
 *   the build target id for non-unified builds.
 *   For example,
 *   'buildTargets/octopus/models/bobba'.
 * @param {number} [request.pageSize]
 *   Optional. The number of builds to return in a page.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `ListBuilds` call. Provide this to
 *   retrieve the subsequent page.
 * @param {string} [request.filter]
 *   Optional. Filter that specifies value constraints of fields. For example, the
 *   filter can be set as "filter='milestone=milestones/80'" to only select
 *   builds in milestone 80.
 * @param {google.protobuf.FieldMask} [request.readMask]
 *   Optional. Read mask that specifies which Build fields to return. If empty, all Build
 *   fields will be returned.
 *   Valid fields: name, milestone, build_version.
 *   For example, if the read_mask is set as "read_mask='milestone'", the
 *   ListBuilds will return a list of Builds object with only the milestone
 *   field.
 * @param {google.protobuf.FieldMask} [request.groupBy]
 *   Optional. The operation that groups by all the Build fields specified in the read
 *   mask. The group_by field should be the same as the read_mask field in
 *   convention of SQL.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Build]{@link google.chromeos.moblab.v1beta1.Build}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listBuildsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listBuilds(
      request?: protos.google.chromeos.moblab.v1beta1.IListBuildsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.chromeos.moblab.v1beta1.IListBuildsRequest,
          protos.google.chromeos.moblab.v1beta1.IListBuildsResponse|null|undefined,
          protos.google.chromeos.moblab.v1beta1.IBuild>,
      callback?: PaginationCallback<
          protos.google.chromeos.moblab.v1beta1.IListBuildsRequest,
          protos.google.chromeos.moblab.v1beta1.IListBuildsResponse|null|undefined,
          protos.google.chromeos.moblab.v1beta1.IBuild>):
      Promise<[
        protos.google.chromeos.moblab.v1beta1.IBuild[],
        protos.google.chromeos.moblab.v1beta1.IListBuildsRequest|null,
        protos.google.chromeos.moblab.v1beta1.IListBuildsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listBuilds(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The full resource name of the model. The model id is the same as
 *   the build target id for non-unified builds.
 *   For example,
 *   'buildTargets/octopus/models/bobba'.
 * @param {number} [request.pageSize]
 *   Optional. The number of builds to return in a page.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `ListBuilds` call. Provide this to
 *   retrieve the subsequent page.
 * @param {string} [request.filter]
 *   Optional. Filter that specifies value constraints of fields. For example, the
 *   filter can be set as "filter='milestone=milestones/80'" to only select
 *   builds in milestone 80.
 * @param {google.protobuf.FieldMask} [request.readMask]
 *   Optional. Read mask that specifies which Build fields to return. If empty, all Build
 *   fields will be returned.
 *   Valid fields: name, milestone, build_version.
 *   For example, if the read_mask is set as "read_mask='milestone'", the
 *   ListBuilds will return a list of Builds object with only the milestone
 *   field.
 * @param {google.protobuf.FieldMask} [request.groupBy]
 *   Optional. The operation that groups by all the Build fields specified in the read
 *   mask. The group_by field should be the same as the read_mask field in
 *   convention of SQL.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Build]{@link google.chromeos.moblab.v1beta1.Build} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listBuildsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listBuildsStream(
      request?: protos.google.chromeos.moblab.v1beta1.IListBuildsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listBuilds.createStream(
      this.innerApiCalls.listBuilds as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listBuilds`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The full resource name of the model. The model id is the same as
 *   the build target id for non-unified builds.
 *   For example,
 *   'buildTargets/octopus/models/bobba'.
 * @param {number} [request.pageSize]
 *   Optional. The number of builds to return in a page.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `ListBuilds` call. Provide this to
 *   retrieve the subsequent page.
 * @param {string} [request.filter]
 *   Optional. Filter that specifies value constraints of fields. For example, the
 *   filter can be set as "filter='milestone=milestones/80'" to only select
 *   builds in milestone 80.
 * @param {google.protobuf.FieldMask} [request.readMask]
 *   Optional. Read mask that specifies which Build fields to return. If empty, all Build
 *   fields will be returned.
 *   Valid fields: name, milestone, build_version.
 *   For example, if the read_mask is set as "read_mask='milestone'", the
 *   ListBuilds will return a list of Builds object with only the milestone
 *   field.
 * @param {google.protobuf.FieldMask} [request.groupBy]
 *   Optional. The operation that groups by all the Build fields specified in the read
 *   mask. The group_by field should be the same as the read_mask field in
 *   convention of SQL.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Build]{@link google.chromeos.moblab.v1beta1.Build}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listBuildsAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listBuildsAsync(
      request?: protos.google.chromeos.moblab.v1beta1.IListBuildsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.chromeos.moblab.v1beta1.IBuild>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listBuilds.asyncIterate(
      this.innerApiCalls['listBuilds'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.chromeos.moblab.v1beta1.IBuild>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified build resource name string.
   *
   * @param {string} build_target
   * @param {string} model
   * @param {string} build
   * @returns {string} Resource name string.
   */
  buildPath(buildTarget:string,model:string,build:string) {
    return this.pathTemplates.buildPathTemplate.render({
      build_target: buildTarget,
      model: model,
      build: build,
    });
  }

  /**
   * Parse the build_target from Build resource.
   *
   * @param {string} buildName
   *   A fully-qualified path representing Build resource.
   * @returns {string} A string representing the build_target.
   */
  matchBuildTargetFromBuildName(buildName: string) {
    return this.pathTemplates.buildPathTemplate.match(buildName).build_target;
  }

  /**
   * Parse the model from Build resource.
   *
   * @param {string} buildName
   *   A fully-qualified path representing Build resource.
   * @returns {string} A string representing the model.
   */
  matchModelFromBuildName(buildName: string) {
    return this.pathTemplates.buildPathTemplate.match(buildName).model;
  }

  /**
   * Parse the build from Build resource.
   *
   * @param {string} buildName
   *   A fully-qualified path representing Build resource.
   * @returns {string} A string representing the build.
   */
  matchBuildFromBuildName(buildName: string) {
    return this.pathTemplates.buildPathTemplate.match(buildName).build;
  }

  /**
   * Return a fully-qualified buildArtifact resource name string.
   *
   * @param {string} build_target
   * @param {string} model
   * @param {string} build
   * @param {string} artifact
   * @returns {string} Resource name string.
   */
  buildArtifactPath(buildTarget:string,model:string,build:string,artifact:string) {
    return this.pathTemplates.buildArtifactPathTemplate.render({
      build_target: buildTarget,
      model: model,
      build: build,
      artifact: artifact,
    });
  }

  /**
   * Parse the build_target from BuildArtifact resource.
   *
   * @param {string} buildArtifactName
   *   A fully-qualified path representing BuildArtifact resource.
   * @returns {string} A string representing the build_target.
   */
  matchBuildTargetFromBuildArtifactName(buildArtifactName: string) {
    return this.pathTemplates.buildArtifactPathTemplate.match(buildArtifactName).build_target;
  }

  /**
   * Parse the model from BuildArtifact resource.
   *
   * @param {string} buildArtifactName
   *   A fully-qualified path representing BuildArtifact resource.
   * @returns {string} A string representing the model.
   */
  matchModelFromBuildArtifactName(buildArtifactName: string) {
    return this.pathTemplates.buildArtifactPathTemplate.match(buildArtifactName).model;
  }

  /**
   * Parse the build from BuildArtifact resource.
   *
   * @param {string} buildArtifactName
   *   A fully-qualified path representing BuildArtifact resource.
   * @returns {string} A string representing the build.
   */
  matchBuildFromBuildArtifactName(buildArtifactName: string) {
    return this.pathTemplates.buildArtifactPathTemplate.match(buildArtifactName).build;
  }

  /**
   * Parse the artifact from BuildArtifact resource.
   *
   * @param {string} buildArtifactName
   *   A fully-qualified path representing BuildArtifact resource.
   * @returns {string} A string representing the artifact.
   */
  matchArtifactFromBuildArtifactName(buildArtifactName: string) {
    return this.pathTemplates.buildArtifactPathTemplate.match(buildArtifactName).artifact;
  }

  /**
   * Return a fully-qualified buildTarget resource name string.
   *
   * @param {string} build_target
   * @returns {string} Resource name string.
   */
  buildTargetPath(buildTarget:string) {
    return this.pathTemplates.buildTargetPathTemplate.render({
      build_target: buildTarget,
    });
  }

  /**
   * Parse the build_target from BuildTarget resource.
   *
   * @param {string} buildTargetName
   *   A fully-qualified path representing BuildTarget resource.
   * @returns {string} A string representing the build_target.
   */
  matchBuildTargetFromBuildTargetName(buildTargetName: string) {
    return this.pathTemplates.buildTargetPathTemplate.match(buildTargetName).build_target;
  }

  /**
   * Return a fully-qualified milestone resource name string.
   *
   * @param {string} milestone
   * @returns {string} Resource name string.
   */
  milestonePath(milestone:string) {
    return this.pathTemplates.milestonePathTemplate.render({
      milestone: milestone,
    });
  }

  /**
   * Parse the milestone from Milestone resource.
   *
   * @param {string} milestoneName
   *   A fully-qualified path representing Milestone resource.
   * @returns {string} A string representing the milestone.
   */
  matchMilestoneFromMilestoneName(milestoneName: string) {
    return this.pathTemplates.milestonePathTemplate.match(milestoneName).milestone;
  }

  /**
   * Return a fully-qualified model resource name string.
   *
   * @param {string} build_target
   * @param {string} model
   * @returns {string} Resource name string.
   */
  modelPath(buildTarget:string,model:string) {
    return this.pathTemplates.modelPathTemplate.render({
      build_target: buildTarget,
      model: model,
    });
  }

  /**
   * Parse the build_target from Model resource.
   *
   * @param {string} modelName
   *   A fully-qualified path representing Model resource.
   * @returns {string} A string representing the build_target.
   */
  matchBuildTargetFromModelName(modelName: string) {
    return this.pathTemplates.modelPathTemplate.match(modelName).build_target;
  }

  /**
   * Parse the model from Model resource.
   *
   * @param {string} modelName
   *   A fully-qualified path representing Model resource.
   * @returns {string} A string representing the model.
   */
  matchModelFromModelName(modelName: string) {
    return this.pathTemplates.modelPathTemplate.match(modelName).model;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.buildServiceStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
