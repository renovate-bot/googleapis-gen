// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/iam/v1beta/workload_identity_pool.proto
// </auto-generated>
// Original file comments:
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Iam.V1Beta {
  /// <summary>
  /// Manages WorkloadIdentityPools.
  /// </summary>
  public static partial class WorkloadIdentityPools
  {
    static readonly string __ServiceName = "google.iam.v1beta.WorkloadIdentityPools";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Iam.V1Beta.ListWorkloadIdentityPoolsRequest> __Marshaller_google_iam_v1beta_ListWorkloadIdentityPoolsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Iam.V1Beta.ListWorkloadIdentityPoolsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Iam.V1Beta.ListWorkloadIdentityPoolsResponse> __Marshaller_google_iam_v1beta_ListWorkloadIdentityPoolsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Iam.V1Beta.ListWorkloadIdentityPoolsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Iam.V1Beta.GetWorkloadIdentityPoolRequest> __Marshaller_google_iam_v1beta_GetWorkloadIdentityPoolRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Iam.V1Beta.GetWorkloadIdentityPoolRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Iam.V1Beta.WorkloadIdentityPool> __Marshaller_google_iam_v1beta_WorkloadIdentityPool = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Iam.V1Beta.WorkloadIdentityPool.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Iam.V1Beta.CreateWorkloadIdentityPoolRequest> __Marshaller_google_iam_v1beta_CreateWorkloadIdentityPoolRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Iam.V1Beta.CreateWorkloadIdentityPoolRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Iam.V1Beta.UpdateWorkloadIdentityPoolRequest> __Marshaller_google_iam_v1beta_UpdateWorkloadIdentityPoolRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Iam.V1Beta.UpdateWorkloadIdentityPoolRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Iam.V1Beta.DeleteWorkloadIdentityPoolRequest> __Marshaller_google_iam_v1beta_DeleteWorkloadIdentityPoolRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Iam.V1Beta.DeleteWorkloadIdentityPoolRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Iam.V1Beta.UndeleteWorkloadIdentityPoolRequest> __Marshaller_google_iam_v1beta_UndeleteWorkloadIdentityPoolRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Iam.V1Beta.UndeleteWorkloadIdentityPoolRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Iam.V1Beta.ListWorkloadIdentityPoolProvidersRequest> __Marshaller_google_iam_v1beta_ListWorkloadIdentityPoolProvidersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Iam.V1Beta.ListWorkloadIdentityPoolProvidersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Iam.V1Beta.ListWorkloadIdentityPoolProvidersResponse> __Marshaller_google_iam_v1beta_ListWorkloadIdentityPoolProvidersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Iam.V1Beta.ListWorkloadIdentityPoolProvidersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Iam.V1Beta.GetWorkloadIdentityPoolProviderRequest> __Marshaller_google_iam_v1beta_GetWorkloadIdentityPoolProviderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Iam.V1Beta.GetWorkloadIdentityPoolProviderRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Iam.V1Beta.WorkloadIdentityPoolProvider> __Marshaller_google_iam_v1beta_WorkloadIdentityPoolProvider = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Iam.V1Beta.WorkloadIdentityPoolProvider.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Iam.V1Beta.CreateWorkloadIdentityPoolProviderRequest> __Marshaller_google_iam_v1beta_CreateWorkloadIdentityPoolProviderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Iam.V1Beta.CreateWorkloadIdentityPoolProviderRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Iam.V1Beta.UpdateWorkloadIdentityPoolProviderRequest> __Marshaller_google_iam_v1beta_UpdateWorkloadIdentityPoolProviderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Iam.V1Beta.UpdateWorkloadIdentityPoolProviderRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Iam.V1Beta.DeleteWorkloadIdentityPoolProviderRequest> __Marshaller_google_iam_v1beta_DeleteWorkloadIdentityPoolProviderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Iam.V1Beta.DeleteWorkloadIdentityPoolProviderRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Iam.V1Beta.UndeleteWorkloadIdentityPoolProviderRequest> __Marshaller_google_iam_v1beta_UndeleteWorkloadIdentityPoolProviderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Iam.V1Beta.UndeleteWorkloadIdentityPoolProviderRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Iam.V1Beta.ListWorkloadIdentityPoolsRequest, global::Google.Iam.V1Beta.ListWorkloadIdentityPoolsResponse> __Method_ListWorkloadIdentityPools = new grpc::Method<global::Google.Iam.V1Beta.ListWorkloadIdentityPoolsRequest, global::Google.Iam.V1Beta.ListWorkloadIdentityPoolsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListWorkloadIdentityPools",
        __Marshaller_google_iam_v1beta_ListWorkloadIdentityPoolsRequest,
        __Marshaller_google_iam_v1beta_ListWorkloadIdentityPoolsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Iam.V1Beta.GetWorkloadIdentityPoolRequest, global::Google.Iam.V1Beta.WorkloadIdentityPool> __Method_GetWorkloadIdentityPool = new grpc::Method<global::Google.Iam.V1Beta.GetWorkloadIdentityPoolRequest, global::Google.Iam.V1Beta.WorkloadIdentityPool>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWorkloadIdentityPool",
        __Marshaller_google_iam_v1beta_GetWorkloadIdentityPoolRequest,
        __Marshaller_google_iam_v1beta_WorkloadIdentityPool);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Iam.V1Beta.CreateWorkloadIdentityPoolRequest, global::Google.LongRunning.Operation> __Method_CreateWorkloadIdentityPool = new grpc::Method<global::Google.Iam.V1Beta.CreateWorkloadIdentityPoolRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateWorkloadIdentityPool",
        __Marshaller_google_iam_v1beta_CreateWorkloadIdentityPoolRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Iam.V1Beta.UpdateWorkloadIdentityPoolRequest, global::Google.LongRunning.Operation> __Method_UpdateWorkloadIdentityPool = new grpc::Method<global::Google.Iam.V1Beta.UpdateWorkloadIdentityPoolRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateWorkloadIdentityPool",
        __Marshaller_google_iam_v1beta_UpdateWorkloadIdentityPoolRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Iam.V1Beta.DeleteWorkloadIdentityPoolRequest, global::Google.LongRunning.Operation> __Method_DeleteWorkloadIdentityPool = new grpc::Method<global::Google.Iam.V1Beta.DeleteWorkloadIdentityPoolRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteWorkloadIdentityPool",
        __Marshaller_google_iam_v1beta_DeleteWorkloadIdentityPoolRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Iam.V1Beta.UndeleteWorkloadIdentityPoolRequest, global::Google.LongRunning.Operation> __Method_UndeleteWorkloadIdentityPool = new grpc::Method<global::Google.Iam.V1Beta.UndeleteWorkloadIdentityPoolRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UndeleteWorkloadIdentityPool",
        __Marshaller_google_iam_v1beta_UndeleteWorkloadIdentityPoolRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Iam.V1Beta.ListWorkloadIdentityPoolProvidersRequest, global::Google.Iam.V1Beta.ListWorkloadIdentityPoolProvidersResponse> __Method_ListWorkloadIdentityPoolProviders = new grpc::Method<global::Google.Iam.V1Beta.ListWorkloadIdentityPoolProvidersRequest, global::Google.Iam.V1Beta.ListWorkloadIdentityPoolProvidersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListWorkloadIdentityPoolProviders",
        __Marshaller_google_iam_v1beta_ListWorkloadIdentityPoolProvidersRequest,
        __Marshaller_google_iam_v1beta_ListWorkloadIdentityPoolProvidersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Iam.V1Beta.GetWorkloadIdentityPoolProviderRequest, global::Google.Iam.V1Beta.WorkloadIdentityPoolProvider> __Method_GetWorkloadIdentityPoolProvider = new grpc::Method<global::Google.Iam.V1Beta.GetWorkloadIdentityPoolProviderRequest, global::Google.Iam.V1Beta.WorkloadIdentityPoolProvider>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWorkloadIdentityPoolProvider",
        __Marshaller_google_iam_v1beta_GetWorkloadIdentityPoolProviderRequest,
        __Marshaller_google_iam_v1beta_WorkloadIdentityPoolProvider);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Iam.V1Beta.CreateWorkloadIdentityPoolProviderRequest, global::Google.LongRunning.Operation> __Method_CreateWorkloadIdentityPoolProvider = new grpc::Method<global::Google.Iam.V1Beta.CreateWorkloadIdentityPoolProviderRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateWorkloadIdentityPoolProvider",
        __Marshaller_google_iam_v1beta_CreateWorkloadIdentityPoolProviderRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Iam.V1Beta.UpdateWorkloadIdentityPoolProviderRequest, global::Google.LongRunning.Operation> __Method_UpdateWorkloadIdentityPoolProvider = new grpc::Method<global::Google.Iam.V1Beta.UpdateWorkloadIdentityPoolProviderRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateWorkloadIdentityPoolProvider",
        __Marshaller_google_iam_v1beta_UpdateWorkloadIdentityPoolProviderRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Iam.V1Beta.DeleteWorkloadIdentityPoolProviderRequest, global::Google.LongRunning.Operation> __Method_DeleteWorkloadIdentityPoolProvider = new grpc::Method<global::Google.Iam.V1Beta.DeleteWorkloadIdentityPoolProviderRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteWorkloadIdentityPoolProvider",
        __Marshaller_google_iam_v1beta_DeleteWorkloadIdentityPoolProviderRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Iam.V1Beta.UndeleteWorkloadIdentityPoolProviderRequest, global::Google.LongRunning.Operation> __Method_UndeleteWorkloadIdentityPoolProvider = new grpc::Method<global::Google.Iam.V1Beta.UndeleteWorkloadIdentityPoolProviderRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UndeleteWorkloadIdentityPoolProvider",
        __Marshaller_google_iam_v1beta_UndeleteWorkloadIdentityPoolProviderRequest,
        __Marshaller_google_longrunning_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Iam.V1Beta.WorkloadIdentityPoolReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of WorkloadIdentityPools</summary>
    [grpc::BindServiceMethod(typeof(WorkloadIdentityPools), "BindService")]
    public abstract partial class WorkloadIdentityPoolsBase
    {
      /// <summary>
      /// Lists all non-deleted
      /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool]s in a
      /// project. If `show_deleted` is set to `true`, then deleted pools are also
      /// listed.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Iam.V1Beta.ListWorkloadIdentityPoolsResponse> ListWorkloadIdentityPools(global::Google.Iam.V1Beta.ListWorkloadIdentityPoolsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets an individual
      /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Iam.V1Beta.WorkloadIdentityPool> GetWorkloadIdentityPool(global::Google.Iam.V1Beta.GetWorkloadIdentityPoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new
      /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
      ///
      /// You cannot reuse the name of a deleted pool until 30 days after deletion.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateWorkloadIdentityPool(global::Google.Iam.V1Beta.CreateWorkloadIdentityPoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an existing
      /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateWorkloadIdentityPool(global::Google.Iam.V1Beta.UpdateWorkloadIdentityPoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a
      /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
      ///
      /// You cannot use a deleted pool to exchange external
      /// credentials for Google Cloud credentials. However, deletion does
      /// not revoke credentials that have already been issued.
      /// Credentials issued for a deleted pool do not grant access to resources.
      /// If the pool is undeleted, and the credentials are not expired, they
      /// grant access again.
      /// You can undelete a pool for 30 days. After 30 days, deletion is
      /// permanent.
      /// You cannot update deleted pools. However, you can view and list them.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteWorkloadIdentityPool(global::Google.Iam.V1Beta.DeleteWorkloadIdentityPoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Undeletes a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool],
      /// as long as it was deleted fewer than 30 days ago.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UndeleteWorkloadIdentityPool(global::Google.Iam.V1Beta.UndeleteWorkloadIdentityPoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all non-deleted
      /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityPoolProvider]s
      /// in a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
      /// If `show_deleted` is set to `true`, then deleted providers are also listed.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Iam.V1Beta.ListWorkloadIdentityPoolProvidersResponse> ListWorkloadIdentityPoolProviders(global::Google.Iam.V1Beta.ListWorkloadIdentityPoolProvidersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets an individual
      /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityPoolProvider].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Iam.V1Beta.WorkloadIdentityPoolProvider> GetWorkloadIdentityPoolProvider(global::Google.Iam.V1Beta.GetWorkloadIdentityPoolProviderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new
      /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider]
      /// in a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
      ///
      /// You cannot reuse the name of a deleted provider until 30 days after
      /// deletion.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateWorkloadIdentityPoolProvider(global::Google.Iam.V1Beta.CreateWorkloadIdentityPoolProviderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an existing
      /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateWorkloadIdentityPoolProvider(global::Google.Iam.V1Beta.UpdateWorkloadIdentityPoolProviderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a
      /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider].
      /// Deleting a provider does not revoke credentials that have already been
      /// issued; they continue to grant access.
      /// You can undelete a provider for 30 days. After 30 days, deletion is
      /// permanent.
      /// You cannot update deleted providers. However, you can view and list them.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteWorkloadIdentityPoolProvider(global::Google.Iam.V1Beta.DeleteWorkloadIdentityPoolProviderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Undeletes a
      /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider],
      /// as long as it was deleted fewer than 30 days ago.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UndeleteWorkloadIdentityPoolProvider(global::Google.Iam.V1Beta.UndeleteWorkloadIdentityPoolProviderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for WorkloadIdentityPools</summary>
    public partial class WorkloadIdentityPoolsClient : grpc::ClientBase<WorkloadIdentityPoolsClient>
    {
      /// <summary>Creates a new client for WorkloadIdentityPools</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public WorkloadIdentityPoolsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for WorkloadIdentityPools that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public WorkloadIdentityPoolsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected WorkloadIdentityPoolsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected WorkloadIdentityPoolsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Lists all non-deleted
      /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool]s in a
      /// project. If `show_deleted` is set to `true`, then deleted pools are also
      /// listed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Iam.V1Beta.ListWorkloadIdentityPoolsResponse ListWorkloadIdentityPools(global::Google.Iam.V1Beta.ListWorkloadIdentityPoolsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWorkloadIdentityPools(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all non-deleted
      /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool]s in a
      /// project. If `show_deleted` is set to `true`, then deleted pools are also
      /// listed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Iam.V1Beta.ListWorkloadIdentityPoolsResponse ListWorkloadIdentityPools(global::Google.Iam.V1Beta.ListWorkloadIdentityPoolsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListWorkloadIdentityPools, null, options, request);
      }
      /// <summary>
      /// Lists all non-deleted
      /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool]s in a
      /// project. If `show_deleted` is set to `true`, then deleted pools are also
      /// listed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Iam.V1Beta.ListWorkloadIdentityPoolsResponse> ListWorkloadIdentityPoolsAsync(global::Google.Iam.V1Beta.ListWorkloadIdentityPoolsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWorkloadIdentityPoolsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all non-deleted
      /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool]s in a
      /// project. If `show_deleted` is set to `true`, then deleted pools are also
      /// listed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Iam.V1Beta.ListWorkloadIdentityPoolsResponse> ListWorkloadIdentityPoolsAsync(global::Google.Iam.V1Beta.ListWorkloadIdentityPoolsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListWorkloadIdentityPools, null, options, request);
      }
      /// <summary>
      /// Gets an individual
      /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Iam.V1Beta.WorkloadIdentityPool GetWorkloadIdentityPool(global::Google.Iam.V1Beta.GetWorkloadIdentityPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkloadIdentityPool(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets an individual
      /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Iam.V1Beta.WorkloadIdentityPool GetWorkloadIdentityPool(global::Google.Iam.V1Beta.GetWorkloadIdentityPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWorkloadIdentityPool, null, options, request);
      }
      /// <summary>
      /// Gets an individual
      /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Iam.V1Beta.WorkloadIdentityPool> GetWorkloadIdentityPoolAsync(global::Google.Iam.V1Beta.GetWorkloadIdentityPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkloadIdentityPoolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets an individual
      /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Iam.V1Beta.WorkloadIdentityPool> GetWorkloadIdentityPoolAsync(global::Google.Iam.V1Beta.GetWorkloadIdentityPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWorkloadIdentityPool, null, options, request);
      }
      /// <summary>
      /// Creates a new
      /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
      ///
      /// You cannot reuse the name of a deleted pool until 30 days after deletion.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateWorkloadIdentityPool(global::Google.Iam.V1Beta.CreateWorkloadIdentityPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateWorkloadIdentityPool(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new
      /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
      ///
      /// You cannot reuse the name of a deleted pool until 30 days after deletion.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateWorkloadIdentityPool(global::Google.Iam.V1Beta.CreateWorkloadIdentityPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateWorkloadIdentityPool, null, options, request);
      }
      /// <summary>
      /// Creates a new
      /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
      ///
      /// You cannot reuse the name of a deleted pool until 30 days after deletion.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateWorkloadIdentityPoolAsync(global::Google.Iam.V1Beta.CreateWorkloadIdentityPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateWorkloadIdentityPoolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new
      /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
      ///
      /// You cannot reuse the name of a deleted pool until 30 days after deletion.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateWorkloadIdentityPoolAsync(global::Google.Iam.V1Beta.CreateWorkloadIdentityPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateWorkloadIdentityPool, null, options, request);
      }
      /// <summary>
      /// Updates an existing
      /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateWorkloadIdentityPool(global::Google.Iam.V1Beta.UpdateWorkloadIdentityPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateWorkloadIdentityPool(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing
      /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateWorkloadIdentityPool(global::Google.Iam.V1Beta.UpdateWorkloadIdentityPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateWorkloadIdentityPool, null, options, request);
      }
      /// <summary>
      /// Updates an existing
      /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateWorkloadIdentityPoolAsync(global::Google.Iam.V1Beta.UpdateWorkloadIdentityPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateWorkloadIdentityPoolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing
      /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateWorkloadIdentityPoolAsync(global::Google.Iam.V1Beta.UpdateWorkloadIdentityPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateWorkloadIdentityPool, null, options, request);
      }
      /// <summary>
      /// Deletes a
      /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
      ///
      /// You cannot use a deleted pool to exchange external
      /// credentials for Google Cloud credentials. However, deletion does
      /// not revoke credentials that have already been issued.
      /// Credentials issued for a deleted pool do not grant access to resources.
      /// If the pool is undeleted, and the credentials are not expired, they
      /// grant access again.
      /// You can undelete a pool for 30 days. After 30 days, deletion is
      /// permanent.
      /// You cannot update deleted pools. However, you can view and list them.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteWorkloadIdentityPool(global::Google.Iam.V1Beta.DeleteWorkloadIdentityPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWorkloadIdentityPool(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a
      /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
      ///
      /// You cannot use a deleted pool to exchange external
      /// credentials for Google Cloud credentials. However, deletion does
      /// not revoke credentials that have already been issued.
      /// Credentials issued for a deleted pool do not grant access to resources.
      /// If the pool is undeleted, and the credentials are not expired, they
      /// grant access again.
      /// You can undelete a pool for 30 days. After 30 days, deletion is
      /// permanent.
      /// You cannot update deleted pools. However, you can view and list them.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteWorkloadIdentityPool(global::Google.Iam.V1Beta.DeleteWorkloadIdentityPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteWorkloadIdentityPool, null, options, request);
      }
      /// <summary>
      /// Deletes a
      /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
      ///
      /// You cannot use a deleted pool to exchange external
      /// credentials for Google Cloud credentials. However, deletion does
      /// not revoke credentials that have already been issued.
      /// Credentials issued for a deleted pool do not grant access to resources.
      /// If the pool is undeleted, and the credentials are not expired, they
      /// grant access again.
      /// You can undelete a pool for 30 days. After 30 days, deletion is
      /// permanent.
      /// You cannot update deleted pools. However, you can view and list them.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteWorkloadIdentityPoolAsync(global::Google.Iam.V1Beta.DeleteWorkloadIdentityPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWorkloadIdentityPoolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a
      /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
      ///
      /// You cannot use a deleted pool to exchange external
      /// credentials for Google Cloud credentials. However, deletion does
      /// not revoke credentials that have already been issued.
      /// Credentials issued for a deleted pool do not grant access to resources.
      /// If the pool is undeleted, and the credentials are not expired, they
      /// grant access again.
      /// You can undelete a pool for 30 days. After 30 days, deletion is
      /// permanent.
      /// You cannot update deleted pools. However, you can view and list them.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteWorkloadIdentityPoolAsync(global::Google.Iam.V1Beta.DeleteWorkloadIdentityPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteWorkloadIdentityPool, null, options, request);
      }
      /// <summary>
      /// Undeletes a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool],
      /// as long as it was deleted fewer than 30 days ago.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UndeleteWorkloadIdentityPool(global::Google.Iam.V1Beta.UndeleteWorkloadIdentityPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UndeleteWorkloadIdentityPool(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Undeletes a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool],
      /// as long as it was deleted fewer than 30 days ago.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UndeleteWorkloadIdentityPool(global::Google.Iam.V1Beta.UndeleteWorkloadIdentityPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UndeleteWorkloadIdentityPool, null, options, request);
      }
      /// <summary>
      /// Undeletes a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool],
      /// as long as it was deleted fewer than 30 days ago.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UndeleteWorkloadIdentityPoolAsync(global::Google.Iam.V1Beta.UndeleteWorkloadIdentityPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UndeleteWorkloadIdentityPoolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Undeletes a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool],
      /// as long as it was deleted fewer than 30 days ago.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UndeleteWorkloadIdentityPoolAsync(global::Google.Iam.V1Beta.UndeleteWorkloadIdentityPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UndeleteWorkloadIdentityPool, null, options, request);
      }
      /// <summary>
      /// Lists all non-deleted
      /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityPoolProvider]s
      /// in a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
      /// If `show_deleted` is set to `true`, then deleted providers are also listed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Iam.V1Beta.ListWorkloadIdentityPoolProvidersResponse ListWorkloadIdentityPoolProviders(global::Google.Iam.V1Beta.ListWorkloadIdentityPoolProvidersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWorkloadIdentityPoolProviders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all non-deleted
      /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityPoolProvider]s
      /// in a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
      /// If `show_deleted` is set to `true`, then deleted providers are also listed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Iam.V1Beta.ListWorkloadIdentityPoolProvidersResponse ListWorkloadIdentityPoolProviders(global::Google.Iam.V1Beta.ListWorkloadIdentityPoolProvidersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListWorkloadIdentityPoolProviders, null, options, request);
      }
      /// <summary>
      /// Lists all non-deleted
      /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityPoolProvider]s
      /// in a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
      /// If `show_deleted` is set to `true`, then deleted providers are also listed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Iam.V1Beta.ListWorkloadIdentityPoolProvidersResponse> ListWorkloadIdentityPoolProvidersAsync(global::Google.Iam.V1Beta.ListWorkloadIdentityPoolProvidersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWorkloadIdentityPoolProvidersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all non-deleted
      /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityPoolProvider]s
      /// in a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
      /// If `show_deleted` is set to `true`, then deleted providers are also listed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Iam.V1Beta.ListWorkloadIdentityPoolProvidersResponse> ListWorkloadIdentityPoolProvidersAsync(global::Google.Iam.V1Beta.ListWorkloadIdentityPoolProvidersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListWorkloadIdentityPoolProviders, null, options, request);
      }
      /// <summary>
      /// Gets an individual
      /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityPoolProvider].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Iam.V1Beta.WorkloadIdentityPoolProvider GetWorkloadIdentityPoolProvider(global::Google.Iam.V1Beta.GetWorkloadIdentityPoolProviderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkloadIdentityPoolProvider(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets an individual
      /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityPoolProvider].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Iam.V1Beta.WorkloadIdentityPoolProvider GetWorkloadIdentityPoolProvider(global::Google.Iam.V1Beta.GetWorkloadIdentityPoolProviderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWorkloadIdentityPoolProvider, null, options, request);
      }
      /// <summary>
      /// Gets an individual
      /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityPoolProvider].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Iam.V1Beta.WorkloadIdentityPoolProvider> GetWorkloadIdentityPoolProviderAsync(global::Google.Iam.V1Beta.GetWorkloadIdentityPoolProviderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkloadIdentityPoolProviderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets an individual
      /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityPoolProvider].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Iam.V1Beta.WorkloadIdentityPoolProvider> GetWorkloadIdentityPoolProviderAsync(global::Google.Iam.V1Beta.GetWorkloadIdentityPoolProviderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWorkloadIdentityPoolProvider, null, options, request);
      }
      /// <summary>
      /// Creates a new
      /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider]
      /// in a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
      ///
      /// You cannot reuse the name of a deleted provider until 30 days after
      /// deletion.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateWorkloadIdentityPoolProvider(global::Google.Iam.V1Beta.CreateWorkloadIdentityPoolProviderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateWorkloadIdentityPoolProvider(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new
      /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider]
      /// in a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
      ///
      /// You cannot reuse the name of a deleted provider until 30 days after
      /// deletion.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateWorkloadIdentityPoolProvider(global::Google.Iam.V1Beta.CreateWorkloadIdentityPoolProviderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateWorkloadIdentityPoolProvider, null, options, request);
      }
      /// <summary>
      /// Creates a new
      /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider]
      /// in a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
      ///
      /// You cannot reuse the name of a deleted provider until 30 days after
      /// deletion.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateWorkloadIdentityPoolProviderAsync(global::Google.Iam.V1Beta.CreateWorkloadIdentityPoolProviderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateWorkloadIdentityPoolProviderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new
      /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider]
      /// in a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
      ///
      /// You cannot reuse the name of a deleted provider until 30 days after
      /// deletion.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateWorkloadIdentityPoolProviderAsync(global::Google.Iam.V1Beta.CreateWorkloadIdentityPoolProviderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateWorkloadIdentityPoolProvider, null, options, request);
      }
      /// <summary>
      /// Updates an existing
      /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateWorkloadIdentityPoolProvider(global::Google.Iam.V1Beta.UpdateWorkloadIdentityPoolProviderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateWorkloadIdentityPoolProvider(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing
      /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateWorkloadIdentityPoolProvider(global::Google.Iam.V1Beta.UpdateWorkloadIdentityPoolProviderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateWorkloadIdentityPoolProvider, null, options, request);
      }
      /// <summary>
      /// Updates an existing
      /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateWorkloadIdentityPoolProviderAsync(global::Google.Iam.V1Beta.UpdateWorkloadIdentityPoolProviderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateWorkloadIdentityPoolProviderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing
      /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateWorkloadIdentityPoolProviderAsync(global::Google.Iam.V1Beta.UpdateWorkloadIdentityPoolProviderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateWorkloadIdentityPoolProvider, null, options, request);
      }
      /// <summary>
      /// Deletes a
      /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider].
      /// Deleting a provider does not revoke credentials that have already been
      /// issued; they continue to grant access.
      /// You can undelete a provider for 30 days. After 30 days, deletion is
      /// permanent.
      /// You cannot update deleted providers. However, you can view and list them.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteWorkloadIdentityPoolProvider(global::Google.Iam.V1Beta.DeleteWorkloadIdentityPoolProviderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWorkloadIdentityPoolProvider(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a
      /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider].
      /// Deleting a provider does not revoke credentials that have already been
      /// issued; they continue to grant access.
      /// You can undelete a provider for 30 days. After 30 days, deletion is
      /// permanent.
      /// You cannot update deleted providers. However, you can view and list them.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteWorkloadIdentityPoolProvider(global::Google.Iam.V1Beta.DeleteWorkloadIdentityPoolProviderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteWorkloadIdentityPoolProvider, null, options, request);
      }
      /// <summary>
      /// Deletes a
      /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider].
      /// Deleting a provider does not revoke credentials that have already been
      /// issued; they continue to grant access.
      /// You can undelete a provider for 30 days. After 30 days, deletion is
      /// permanent.
      /// You cannot update deleted providers. However, you can view and list them.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteWorkloadIdentityPoolProviderAsync(global::Google.Iam.V1Beta.DeleteWorkloadIdentityPoolProviderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWorkloadIdentityPoolProviderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a
      /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider].
      /// Deleting a provider does not revoke credentials that have already been
      /// issued; they continue to grant access.
      /// You can undelete a provider for 30 days. After 30 days, deletion is
      /// permanent.
      /// You cannot update deleted providers. However, you can view and list them.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteWorkloadIdentityPoolProviderAsync(global::Google.Iam.V1Beta.DeleteWorkloadIdentityPoolProviderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteWorkloadIdentityPoolProvider, null, options, request);
      }
      /// <summary>
      /// Undeletes a
      /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider],
      /// as long as it was deleted fewer than 30 days ago.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UndeleteWorkloadIdentityPoolProvider(global::Google.Iam.V1Beta.UndeleteWorkloadIdentityPoolProviderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UndeleteWorkloadIdentityPoolProvider(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Undeletes a
      /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider],
      /// as long as it was deleted fewer than 30 days ago.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UndeleteWorkloadIdentityPoolProvider(global::Google.Iam.V1Beta.UndeleteWorkloadIdentityPoolProviderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UndeleteWorkloadIdentityPoolProvider, null, options, request);
      }
      /// <summary>
      /// Undeletes a
      /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider],
      /// as long as it was deleted fewer than 30 days ago.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UndeleteWorkloadIdentityPoolProviderAsync(global::Google.Iam.V1Beta.UndeleteWorkloadIdentityPoolProviderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UndeleteWorkloadIdentityPoolProviderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Undeletes a
      /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider],
      /// as long as it was deleted fewer than 30 days ago.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UndeleteWorkloadIdentityPoolProviderAsync(global::Google.Iam.V1Beta.UndeleteWorkloadIdentityPoolProviderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UndeleteWorkloadIdentityPoolProvider, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override WorkloadIdentityPoolsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WorkloadIdentityPoolsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(WorkloadIdentityPoolsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListWorkloadIdentityPools, serviceImpl.ListWorkloadIdentityPools)
          .AddMethod(__Method_GetWorkloadIdentityPool, serviceImpl.GetWorkloadIdentityPool)
          .AddMethod(__Method_CreateWorkloadIdentityPool, serviceImpl.CreateWorkloadIdentityPool)
          .AddMethod(__Method_UpdateWorkloadIdentityPool, serviceImpl.UpdateWorkloadIdentityPool)
          .AddMethod(__Method_DeleteWorkloadIdentityPool, serviceImpl.DeleteWorkloadIdentityPool)
          .AddMethod(__Method_UndeleteWorkloadIdentityPool, serviceImpl.UndeleteWorkloadIdentityPool)
          .AddMethod(__Method_ListWorkloadIdentityPoolProviders, serviceImpl.ListWorkloadIdentityPoolProviders)
          .AddMethod(__Method_GetWorkloadIdentityPoolProvider, serviceImpl.GetWorkloadIdentityPoolProvider)
          .AddMethod(__Method_CreateWorkloadIdentityPoolProvider, serviceImpl.CreateWorkloadIdentityPoolProvider)
          .AddMethod(__Method_UpdateWorkloadIdentityPoolProvider, serviceImpl.UpdateWorkloadIdentityPoolProvider)
          .AddMethod(__Method_DeleteWorkloadIdentityPoolProvider, serviceImpl.DeleteWorkloadIdentityPoolProvider)
          .AddMethod(__Method_UndeleteWorkloadIdentityPoolProvider, serviceImpl.UndeleteWorkloadIdentityPoolProvider).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, WorkloadIdentityPoolsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListWorkloadIdentityPools, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Iam.V1Beta.ListWorkloadIdentityPoolsRequest, global::Google.Iam.V1Beta.ListWorkloadIdentityPoolsResponse>(serviceImpl.ListWorkloadIdentityPools));
      serviceBinder.AddMethod(__Method_GetWorkloadIdentityPool, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Iam.V1Beta.GetWorkloadIdentityPoolRequest, global::Google.Iam.V1Beta.WorkloadIdentityPool>(serviceImpl.GetWorkloadIdentityPool));
      serviceBinder.AddMethod(__Method_CreateWorkloadIdentityPool, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Iam.V1Beta.CreateWorkloadIdentityPoolRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateWorkloadIdentityPool));
      serviceBinder.AddMethod(__Method_UpdateWorkloadIdentityPool, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Iam.V1Beta.UpdateWorkloadIdentityPoolRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateWorkloadIdentityPool));
      serviceBinder.AddMethod(__Method_DeleteWorkloadIdentityPool, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Iam.V1Beta.DeleteWorkloadIdentityPoolRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteWorkloadIdentityPool));
      serviceBinder.AddMethod(__Method_UndeleteWorkloadIdentityPool, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Iam.V1Beta.UndeleteWorkloadIdentityPoolRequest, global::Google.LongRunning.Operation>(serviceImpl.UndeleteWorkloadIdentityPool));
      serviceBinder.AddMethod(__Method_ListWorkloadIdentityPoolProviders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Iam.V1Beta.ListWorkloadIdentityPoolProvidersRequest, global::Google.Iam.V1Beta.ListWorkloadIdentityPoolProvidersResponse>(serviceImpl.ListWorkloadIdentityPoolProviders));
      serviceBinder.AddMethod(__Method_GetWorkloadIdentityPoolProvider, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Iam.V1Beta.GetWorkloadIdentityPoolProviderRequest, global::Google.Iam.V1Beta.WorkloadIdentityPoolProvider>(serviceImpl.GetWorkloadIdentityPoolProvider));
      serviceBinder.AddMethod(__Method_CreateWorkloadIdentityPoolProvider, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Iam.V1Beta.CreateWorkloadIdentityPoolProviderRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateWorkloadIdentityPoolProvider));
      serviceBinder.AddMethod(__Method_UpdateWorkloadIdentityPoolProvider, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Iam.V1Beta.UpdateWorkloadIdentityPoolProviderRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateWorkloadIdentityPoolProvider));
      serviceBinder.AddMethod(__Method_DeleteWorkloadIdentityPoolProvider, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Iam.V1Beta.DeleteWorkloadIdentityPoolProviderRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteWorkloadIdentityPoolProvider));
      serviceBinder.AddMethod(__Method_UndeleteWorkloadIdentityPoolProvider, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Iam.V1Beta.UndeleteWorkloadIdentityPoolProviderRequest, global::Google.LongRunning.Operation>(serviceImpl.UndeleteWorkloadIdentityPoolProvider));
    }

  }
}
#endregion
