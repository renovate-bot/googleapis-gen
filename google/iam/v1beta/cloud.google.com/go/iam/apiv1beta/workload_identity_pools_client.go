// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package iam

import (
	"context"
	"fmt"
	"math"
	"net/url"
	"time"

	"cloud.google.com/go/longrunning"
	lroauto "cloud.google.com/go/longrunning/autogen"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	iampb "google.golang.org/genproto/googleapis/iam/v1beta"
	longrunningpb "google.golang.org/genproto/googleapis/longrunning"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/metadata"
	"google.golang.org/protobuf/proto"
)

var newWorkloadIdentityPoolsClientHook clientHook

// WorkloadIdentityPoolsCallOptions contains the retry settings for each method of WorkloadIdentityPoolsClient.
type WorkloadIdentityPoolsCallOptions struct {
	ListWorkloadIdentityPools            []gax.CallOption
	GetWorkloadIdentityPool              []gax.CallOption
	CreateWorkloadIdentityPool           []gax.CallOption
	UpdateWorkloadIdentityPool           []gax.CallOption
	DeleteWorkloadIdentityPool           []gax.CallOption
	UndeleteWorkloadIdentityPool         []gax.CallOption
	ListWorkloadIdentityPoolProviders    []gax.CallOption
	GetWorkloadIdentityPoolProvider      []gax.CallOption
	CreateWorkloadIdentityPoolProvider   []gax.CallOption
	UpdateWorkloadIdentityPoolProvider   []gax.CallOption
	DeleteWorkloadIdentityPoolProvider   []gax.CallOption
	UndeleteWorkloadIdentityPoolProvider []gax.CallOption
}

func defaultWorkloadIdentityPoolsGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("iam.googleapis.com:443"),
		internaloption.WithDefaultMTLSEndpoint("iam.mtls.googleapis.com:443"),
		internaloption.WithDefaultAudience("https://iam.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultWorkloadIdentityPoolsCallOptions() *WorkloadIdentityPoolsCallOptions {
	return &WorkloadIdentityPoolsCallOptions{
		ListWorkloadIdentityPools: []gax.CallOption{
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		GetWorkloadIdentityPool: []gax.CallOption{
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		CreateWorkloadIdentityPool: []gax.CallOption{
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		UpdateWorkloadIdentityPool: []gax.CallOption{
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		DeleteWorkloadIdentityPool: []gax.CallOption{
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		UndeleteWorkloadIdentityPool: []gax.CallOption{
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		ListWorkloadIdentityPoolProviders: []gax.CallOption{
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		GetWorkloadIdentityPoolProvider: []gax.CallOption{
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		CreateWorkloadIdentityPoolProvider: []gax.CallOption{
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		UpdateWorkloadIdentityPoolProvider: []gax.CallOption{
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		DeleteWorkloadIdentityPoolProvider: []gax.CallOption{
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		UndeleteWorkloadIdentityPoolProvider: []gax.CallOption{
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
	}
}

// internalWorkloadIdentityPoolsClient is an interface that defines the methods availaible from Identity and Access Management (IAM) API.
type internalWorkloadIdentityPoolsClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	ListWorkloadIdentityPools(context.Context, *iampb.ListWorkloadIdentityPoolsRequest, ...gax.CallOption) *WorkloadIdentityPoolIterator
	GetWorkloadIdentityPool(context.Context, *iampb.GetWorkloadIdentityPoolRequest, ...gax.CallOption) (*iampb.WorkloadIdentityPool, error)
	CreateWorkloadIdentityPool(context.Context, *iampb.CreateWorkloadIdentityPoolRequest, ...gax.CallOption) (*CreateWorkloadIdentityPoolOperation, error)
	CreateWorkloadIdentityPoolOperation(name string) *CreateWorkloadIdentityPoolOperation
	UpdateWorkloadIdentityPool(context.Context, *iampb.UpdateWorkloadIdentityPoolRequest, ...gax.CallOption) (*UpdateWorkloadIdentityPoolOperation, error)
	UpdateWorkloadIdentityPoolOperation(name string) *UpdateWorkloadIdentityPoolOperation
	DeleteWorkloadIdentityPool(context.Context, *iampb.DeleteWorkloadIdentityPoolRequest, ...gax.CallOption) (*DeleteWorkloadIdentityPoolOperation, error)
	DeleteWorkloadIdentityPoolOperation(name string) *DeleteWorkloadIdentityPoolOperation
	UndeleteWorkloadIdentityPool(context.Context, *iampb.UndeleteWorkloadIdentityPoolRequest, ...gax.CallOption) (*UndeleteWorkloadIdentityPoolOperation, error)
	UndeleteWorkloadIdentityPoolOperation(name string) *UndeleteWorkloadIdentityPoolOperation
	ListWorkloadIdentityPoolProviders(context.Context, *iampb.ListWorkloadIdentityPoolProvidersRequest, ...gax.CallOption) *WorkloadIdentityPoolProviderIterator
	GetWorkloadIdentityPoolProvider(context.Context, *iampb.GetWorkloadIdentityPoolProviderRequest, ...gax.CallOption) (*iampb.WorkloadIdentityPoolProvider, error)
	CreateWorkloadIdentityPoolProvider(context.Context, *iampb.CreateWorkloadIdentityPoolProviderRequest, ...gax.CallOption) (*CreateWorkloadIdentityPoolProviderOperation, error)
	CreateWorkloadIdentityPoolProviderOperation(name string) *CreateWorkloadIdentityPoolProviderOperation
	UpdateWorkloadIdentityPoolProvider(context.Context, *iampb.UpdateWorkloadIdentityPoolProviderRequest, ...gax.CallOption) (*UpdateWorkloadIdentityPoolProviderOperation, error)
	UpdateWorkloadIdentityPoolProviderOperation(name string) *UpdateWorkloadIdentityPoolProviderOperation
	DeleteWorkloadIdentityPoolProvider(context.Context, *iampb.DeleteWorkloadIdentityPoolProviderRequest, ...gax.CallOption) (*DeleteWorkloadIdentityPoolProviderOperation, error)
	DeleteWorkloadIdentityPoolProviderOperation(name string) *DeleteWorkloadIdentityPoolProviderOperation
	UndeleteWorkloadIdentityPoolProvider(context.Context, *iampb.UndeleteWorkloadIdentityPoolProviderRequest, ...gax.CallOption) (*UndeleteWorkloadIdentityPoolProviderOperation, error)
	UndeleteWorkloadIdentityPoolProviderOperation(name string) *UndeleteWorkloadIdentityPoolProviderOperation
}

// WorkloadIdentityPoolsClient is a client for interacting with Identity and Access Management (IAM) API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// Manages WorkloadIdentityPools.
type WorkloadIdentityPoolsClient struct {
	// The internal transport-dependent client.
	internalClient internalWorkloadIdentityPoolsClient

	// The call options for this service.
	CallOptions *WorkloadIdentityPoolsCallOptions

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient *lroauto.OperationsClient
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *WorkloadIdentityPoolsClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *WorkloadIdentityPoolsClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *WorkloadIdentityPoolsClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// ListWorkloadIdentityPools lists all non-deleted
// WorkloadIdentityPools in a
// project. If show_deleted is set to true, then deleted pools are also
// listed.
func (c *WorkloadIdentityPoolsClient) ListWorkloadIdentityPools(ctx context.Context, req *iampb.ListWorkloadIdentityPoolsRequest, opts ...gax.CallOption) *WorkloadIdentityPoolIterator {
	return c.internalClient.ListWorkloadIdentityPools(ctx, req, opts...)
}

// GetWorkloadIdentityPool gets an individual
// WorkloadIdentityPool.
func (c *WorkloadIdentityPoolsClient) GetWorkloadIdentityPool(ctx context.Context, req *iampb.GetWorkloadIdentityPoolRequest, opts ...gax.CallOption) (*iampb.WorkloadIdentityPool, error) {
	return c.internalClient.GetWorkloadIdentityPool(ctx, req, opts...)
}

// CreateWorkloadIdentityPool creates a new
// WorkloadIdentityPool.
//
// You cannot reuse the name of a deleted pool until 30 days after deletion.
func (c *WorkloadIdentityPoolsClient) CreateWorkloadIdentityPool(ctx context.Context, req *iampb.CreateWorkloadIdentityPoolRequest, opts ...gax.CallOption) (*CreateWorkloadIdentityPoolOperation, error) {
	return c.internalClient.CreateWorkloadIdentityPool(ctx, req, opts...)
}

// CreateWorkloadIdentityPoolOperation returns a new CreateWorkloadIdentityPoolOperation from a given name.
// The name must be that of a previously created CreateWorkloadIdentityPoolOperation, possibly from a different process.
func (c *WorkloadIdentityPoolsClient) CreateWorkloadIdentityPoolOperation(name string) *CreateWorkloadIdentityPoolOperation {
	return c.internalClient.CreateWorkloadIdentityPoolOperation(name)
}

// UpdateWorkloadIdentityPool updates an existing
// WorkloadIdentityPool.
func (c *WorkloadIdentityPoolsClient) UpdateWorkloadIdentityPool(ctx context.Context, req *iampb.UpdateWorkloadIdentityPoolRequest, opts ...gax.CallOption) (*UpdateWorkloadIdentityPoolOperation, error) {
	return c.internalClient.UpdateWorkloadIdentityPool(ctx, req, opts...)
}

// UpdateWorkloadIdentityPoolOperation returns a new UpdateWorkloadIdentityPoolOperation from a given name.
// The name must be that of a previously created UpdateWorkloadIdentityPoolOperation, possibly from a different process.
func (c *WorkloadIdentityPoolsClient) UpdateWorkloadIdentityPoolOperation(name string) *UpdateWorkloadIdentityPoolOperation {
	return c.internalClient.UpdateWorkloadIdentityPoolOperation(name)
}

// DeleteWorkloadIdentityPool deletes a
// WorkloadIdentityPool.
//
// You cannot use a deleted pool to exchange external
// credentials for Google Cloud credentials. However, deletion does
// not revoke credentials that have already been issued.
// Credentials issued for a deleted pool do not grant access to resources.
// If the pool is undeleted, and the credentials are not expired, they
// grant access again.
// You can undelete a pool for 30 days. After 30 days, deletion is
// permanent.
// You cannot update deleted pools. However, you can view and list them.
func (c *WorkloadIdentityPoolsClient) DeleteWorkloadIdentityPool(ctx context.Context, req *iampb.DeleteWorkloadIdentityPoolRequest, opts ...gax.CallOption) (*DeleteWorkloadIdentityPoolOperation, error) {
	return c.internalClient.DeleteWorkloadIdentityPool(ctx, req, opts...)
}

// DeleteWorkloadIdentityPoolOperation returns a new DeleteWorkloadIdentityPoolOperation from a given name.
// The name must be that of a previously created DeleteWorkloadIdentityPoolOperation, possibly from a different process.
func (c *WorkloadIdentityPoolsClient) DeleteWorkloadIdentityPoolOperation(name string) *DeleteWorkloadIdentityPoolOperation {
	return c.internalClient.DeleteWorkloadIdentityPoolOperation(name)
}

// UndeleteWorkloadIdentityPool undeletes a WorkloadIdentityPool,
// as long as it was deleted fewer than 30 days ago.
func (c *WorkloadIdentityPoolsClient) UndeleteWorkloadIdentityPool(ctx context.Context, req *iampb.UndeleteWorkloadIdentityPoolRequest, opts ...gax.CallOption) (*UndeleteWorkloadIdentityPoolOperation, error) {
	return c.internalClient.UndeleteWorkloadIdentityPool(ctx, req, opts...)
}

// UndeleteWorkloadIdentityPoolOperation returns a new UndeleteWorkloadIdentityPoolOperation from a given name.
// The name must be that of a previously created UndeleteWorkloadIdentityPoolOperation, possibly from a different process.
func (c *WorkloadIdentityPoolsClient) UndeleteWorkloadIdentityPoolOperation(name string) *UndeleteWorkloadIdentityPoolOperation {
	return c.internalClient.UndeleteWorkloadIdentityPoolOperation(name)
}

// ListWorkloadIdentityPoolProviders lists all non-deleted
// WorkloadIdentityPoolProviders
// in a WorkloadIdentityPool.
// If show_deleted is set to true, then deleted providers are also listed.
func (c *WorkloadIdentityPoolsClient) ListWorkloadIdentityPoolProviders(ctx context.Context, req *iampb.ListWorkloadIdentityPoolProvidersRequest, opts ...gax.CallOption) *WorkloadIdentityPoolProviderIterator {
	return c.internalClient.ListWorkloadIdentityPoolProviders(ctx, req, opts...)
}

// GetWorkloadIdentityPoolProvider gets an individual
// WorkloadIdentityPoolProvider.
func (c *WorkloadIdentityPoolsClient) GetWorkloadIdentityPoolProvider(ctx context.Context, req *iampb.GetWorkloadIdentityPoolProviderRequest, opts ...gax.CallOption) (*iampb.WorkloadIdentityPoolProvider, error) {
	return c.internalClient.GetWorkloadIdentityPoolProvider(ctx, req, opts...)
}

// CreateWorkloadIdentityPoolProvider creates a new
// WorkloadIdentityPoolProvider
// in a WorkloadIdentityPool.
//
// You cannot reuse the name of a deleted provider until 30 days after
// deletion.
func (c *WorkloadIdentityPoolsClient) CreateWorkloadIdentityPoolProvider(ctx context.Context, req *iampb.CreateWorkloadIdentityPoolProviderRequest, opts ...gax.CallOption) (*CreateWorkloadIdentityPoolProviderOperation, error) {
	return c.internalClient.CreateWorkloadIdentityPoolProvider(ctx, req, opts...)
}

// CreateWorkloadIdentityPoolProviderOperation returns a new CreateWorkloadIdentityPoolProviderOperation from a given name.
// The name must be that of a previously created CreateWorkloadIdentityPoolProviderOperation, possibly from a different process.
func (c *WorkloadIdentityPoolsClient) CreateWorkloadIdentityPoolProviderOperation(name string) *CreateWorkloadIdentityPoolProviderOperation {
	return c.internalClient.CreateWorkloadIdentityPoolProviderOperation(name)
}

// UpdateWorkloadIdentityPoolProvider updates an existing
// WorkloadIdentityPoolProvider.
func (c *WorkloadIdentityPoolsClient) UpdateWorkloadIdentityPoolProvider(ctx context.Context, req *iampb.UpdateWorkloadIdentityPoolProviderRequest, opts ...gax.CallOption) (*UpdateWorkloadIdentityPoolProviderOperation, error) {
	return c.internalClient.UpdateWorkloadIdentityPoolProvider(ctx, req, opts...)
}

// UpdateWorkloadIdentityPoolProviderOperation returns a new UpdateWorkloadIdentityPoolProviderOperation from a given name.
// The name must be that of a previously created UpdateWorkloadIdentityPoolProviderOperation, possibly from a different process.
func (c *WorkloadIdentityPoolsClient) UpdateWorkloadIdentityPoolProviderOperation(name string) *UpdateWorkloadIdentityPoolProviderOperation {
	return c.internalClient.UpdateWorkloadIdentityPoolProviderOperation(name)
}

// DeleteWorkloadIdentityPoolProvider deletes a
// WorkloadIdentityPoolProvider.
// Deleting a provider does not revoke credentials that have already been
// issued; they continue to grant access.
// You can undelete a provider for 30 days. After 30 days, deletion is
// permanent.
// You cannot update deleted providers. However, you can view and list them.
func (c *WorkloadIdentityPoolsClient) DeleteWorkloadIdentityPoolProvider(ctx context.Context, req *iampb.DeleteWorkloadIdentityPoolProviderRequest, opts ...gax.CallOption) (*DeleteWorkloadIdentityPoolProviderOperation, error) {
	return c.internalClient.DeleteWorkloadIdentityPoolProvider(ctx, req, opts...)
}

// DeleteWorkloadIdentityPoolProviderOperation returns a new DeleteWorkloadIdentityPoolProviderOperation from a given name.
// The name must be that of a previously created DeleteWorkloadIdentityPoolProviderOperation, possibly from a different process.
func (c *WorkloadIdentityPoolsClient) DeleteWorkloadIdentityPoolProviderOperation(name string) *DeleteWorkloadIdentityPoolProviderOperation {
	return c.internalClient.DeleteWorkloadIdentityPoolProviderOperation(name)
}

// UndeleteWorkloadIdentityPoolProvider undeletes a
// WorkloadIdentityPoolProvider,
// as long as it was deleted fewer than 30 days ago.
func (c *WorkloadIdentityPoolsClient) UndeleteWorkloadIdentityPoolProvider(ctx context.Context, req *iampb.UndeleteWorkloadIdentityPoolProviderRequest, opts ...gax.CallOption) (*UndeleteWorkloadIdentityPoolProviderOperation, error) {
	return c.internalClient.UndeleteWorkloadIdentityPoolProvider(ctx, req, opts...)
}

// UndeleteWorkloadIdentityPoolProviderOperation returns a new UndeleteWorkloadIdentityPoolProviderOperation from a given name.
// The name must be that of a previously created UndeleteWorkloadIdentityPoolProviderOperation, possibly from a different process.
func (c *WorkloadIdentityPoolsClient) UndeleteWorkloadIdentityPoolProviderOperation(name string) *UndeleteWorkloadIdentityPoolProviderOperation {
	return c.internalClient.UndeleteWorkloadIdentityPoolProviderOperation(name)
}

// workloadIdentityPoolsGRPCClient is a client for interacting with Identity and Access Management (IAM) API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type workloadIdentityPoolsGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// flag to opt out of default deadlines via GOOGLE_API_GO_EXPERIMENTAL_DISABLE_DEFAULT_DEADLINE
	disableDeadlines bool

	// Points back to the CallOptions field of the containing WorkloadIdentityPoolsClient
	CallOptions **WorkloadIdentityPoolsCallOptions

	// The gRPC API client.
	workloadIdentityPoolsClient iampb.WorkloadIdentityPoolsClient

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient **lroauto.OperationsClient

	// The x-goog-* metadata to be sent with each request.
	xGoogMetadata metadata.MD
}

// NewWorkloadIdentityPoolsClient creates a new workload identity pools client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// Manages WorkloadIdentityPools.
func NewWorkloadIdentityPoolsClient(ctx context.Context, opts ...option.ClientOption) (*WorkloadIdentityPoolsClient, error) {
	clientOpts := defaultWorkloadIdentityPoolsGRPCClientOptions()
	if newWorkloadIdentityPoolsClientHook != nil {
		hookOpts, err := newWorkloadIdentityPoolsClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	disableDeadlines, err := checkDisableDeadlines()
	if err != nil {
		return nil, err
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := WorkloadIdentityPoolsClient{CallOptions: defaultWorkloadIdentityPoolsCallOptions()}

	c := &workloadIdentityPoolsGRPCClient{
		connPool:                    connPool,
		disableDeadlines:            disableDeadlines,
		workloadIdentityPoolsClient: iampb.NewWorkloadIdentityPoolsClient(connPool),
		CallOptions:                 &client.CallOptions,
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	client.LROClient, err = lroauto.NewOperationsClient(ctx, gtransport.WithConnPool(connPool))
	if err != nil {
		// This error "should not happen", since we are just reusing old connection pool
		// and never actually need to dial.
		// If this does happen, we could leak connp. However, we cannot close conn:
		// If the user invoked the constructor with option.WithGRPCConn,
		// we would close a connection that's still in use.
		// TODO: investigate error conditions.
		return nil, err
	}
	c.LROClient = &client.LROClient
	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *workloadIdentityPoolsGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *workloadIdentityPoolsGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", versionGo()}, keyval...)
	kv = append(kv, "gapic", versionClient, "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogMetadata = metadata.Pairs("x-goog-api-client", gax.XGoogHeader(kv...))
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *workloadIdentityPoolsGRPCClient) Close() error {
	return c.connPool.Close()
}

func (c *workloadIdentityPoolsGRPCClient) ListWorkloadIdentityPools(ctx context.Context, req *iampb.ListWorkloadIdentityPoolsRequest, opts ...gax.CallOption) *WorkloadIdentityPoolIterator {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).ListWorkloadIdentityPools[0:len((*c.CallOptions).ListWorkloadIdentityPools):len((*c.CallOptions).ListWorkloadIdentityPools)], opts...)
	it := &WorkloadIdentityPoolIterator{}
	req = proto.Clone(req).(*iampb.ListWorkloadIdentityPoolsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*iampb.WorkloadIdentityPool, string, error) {
		resp := &iampb.ListWorkloadIdentityPoolsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.workloadIdentityPoolsClient.ListWorkloadIdentityPools(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetWorkloadIdentityPools(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *workloadIdentityPoolsGRPCClient) GetWorkloadIdentityPool(ctx context.Context, req *iampb.GetWorkloadIdentityPoolRequest, opts ...gax.CallOption) (*iampb.WorkloadIdentityPool, error) {
	if _, ok := ctx.Deadline(); !ok && !c.disableDeadlines {
		cctx, cancel := context.WithTimeout(ctx, 60000*time.Millisecond)
		defer cancel()
		ctx = cctx
	}
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).GetWorkloadIdentityPool[0:len((*c.CallOptions).GetWorkloadIdentityPool):len((*c.CallOptions).GetWorkloadIdentityPool)], opts...)
	var resp *iampb.WorkloadIdentityPool
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.workloadIdentityPoolsClient.GetWorkloadIdentityPool(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *workloadIdentityPoolsGRPCClient) CreateWorkloadIdentityPool(ctx context.Context, req *iampb.CreateWorkloadIdentityPoolRequest, opts ...gax.CallOption) (*CreateWorkloadIdentityPoolOperation, error) {
	if _, ok := ctx.Deadline(); !ok && !c.disableDeadlines {
		cctx, cancel := context.WithTimeout(ctx, 60000*time.Millisecond)
		defer cancel()
		ctx = cctx
	}
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).CreateWorkloadIdentityPool[0:len((*c.CallOptions).CreateWorkloadIdentityPool):len((*c.CallOptions).CreateWorkloadIdentityPool)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.workloadIdentityPoolsClient.CreateWorkloadIdentityPool(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &CreateWorkloadIdentityPoolOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *workloadIdentityPoolsGRPCClient) UpdateWorkloadIdentityPool(ctx context.Context, req *iampb.UpdateWorkloadIdentityPoolRequest, opts ...gax.CallOption) (*UpdateWorkloadIdentityPoolOperation, error) {
	if _, ok := ctx.Deadline(); !ok && !c.disableDeadlines {
		cctx, cancel := context.WithTimeout(ctx, 60000*time.Millisecond)
		defer cancel()
		ctx = cctx
	}
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "workload_identity_pool.name", url.QueryEscape(req.GetWorkloadIdentityPool().GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).UpdateWorkloadIdentityPool[0:len((*c.CallOptions).UpdateWorkloadIdentityPool):len((*c.CallOptions).UpdateWorkloadIdentityPool)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.workloadIdentityPoolsClient.UpdateWorkloadIdentityPool(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &UpdateWorkloadIdentityPoolOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *workloadIdentityPoolsGRPCClient) DeleteWorkloadIdentityPool(ctx context.Context, req *iampb.DeleteWorkloadIdentityPoolRequest, opts ...gax.CallOption) (*DeleteWorkloadIdentityPoolOperation, error) {
	if _, ok := ctx.Deadline(); !ok && !c.disableDeadlines {
		cctx, cancel := context.WithTimeout(ctx, 60000*time.Millisecond)
		defer cancel()
		ctx = cctx
	}
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).DeleteWorkloadIdentityPool[0:len((*c.CallOptions).DeleteWorkloadIdentityPool):len((*c.CallOptions).DeleteWorkloadIdentityPool)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.workloadIdentityPoolsClient.DeleteWorkloadIdentityPool(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &DeleteWorkloadIdentityPoolOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *workloadIdentityPoolsGRPCClient) UndeleteWorkloadIdentityPool(ctx context.Context, req *iampb.UndeleteWorkloadIdentityPoolRequest, opts ...gax.CallOption) (*UndeleteWorkloadIdentityPoolOperation, error) {
	if _, ok := ctx.Deadline(); !ok && !c.disableDeadlines {
		cctx, cancel := context.WithTimeout(ctx, 60000*time.Millisecond)
		defer cancel()
		ctx = cctx
	}
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).UndeleteWorkloadIdentityPool[0:len((*c.CallOptions).UndeleteWorkloadIdentityPool):len((*c.CallOptions).UndeleteWorkloadIdentityPool)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.workloadIdentityPoolsClient.UndeleteWorkloadIdentityPool(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &UndeleteWorkloadIdentityPoolOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *workloadIdentityPoolsGRPCClient) ListWorkloadIdentityPoolProviders(ctx context.Context, req *iampb.ListWorkloadIdentityPoolProvidersRequest, opts ...gax.CallOption) *WorkloadIdentityPoolProviderIterator {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).ListWorkloadIdentityPoolProviders[0:len((*c.CallOptions).ListWorkloadIdentityPoolProviders):len((*c.CallOptions).ListWorkloadIdentityPoolProviders)], opts...)
	it := &WorkloadIdentityPoolProviderIterator{}
	req = proto.Clone(req).(*iampb.ListWorkloadIdentityPoolProvidersRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*iampb.WorkloadIdentityPoolProvider, string, error) {
		resp := &iampb.ListWorkloadIdentityPoolProvidersResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.workloadIdentityPoolsClient.ListWorkloadIdentityPoolProviders(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetWorkloadIdentityPoolProviders(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *workloadIdentityPoolsGRPCClient) GetWorkloadIdentityPoolProvider(ctx context.Context, req *iampb.GetWorkloadIdentityPoolProviderRequest, opts ...gax.CallOption) (*iampb.WorkloadIdentityPoolProvider, error) {
	if _, ok := ctx.Deadline(); !ok && !c.disableDeadlines {
		cctx, cancel := context.WithTimeout(ctx, 60000*time.Millisecond)
		defer cancel()
		ctx = cctx
	}
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).GetWorkloadIdentityPoolProvider[0:len((*c.CallOptions).GetWorkloadIdentityPoolProvider):len((*c.CallOptions).GetWorkloadIdentityPoolProvider)], opts...)
	var resp *iampb.WorkloadIdentityPoolProvider
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.workloadIdentityPoolsClient.GetWorkloadIdentityPoolProvider(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *workloadIdentityPoolsGRPCClient) CreateWorkloadIdentityPoolProvider(ctx context.Context, req *iampb.CreateWorkloadIdentityPoolProviderRequest, opts ...gax.CallOption) (*CreateWorkloadIdentityPoolProviderOperation, error) {
	if _, ok := ctx.Deadline(); !ok && !c.disableDeadlines {
		cctx, cancel := context.WithTimeout(ctx, 60000*time.Millisecond)
		defer cancel()
		ctx = cctx
	}
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).CreateWorkloadIdentityPoolProvider[0:len((*c.CallOptions).CreateWorkloadIdentityPoolProvider):len((*c.CallOptions).CreateWorkloadIdentityPoolProvider)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.workloadIdentityPoolsClient.CreateWorkloadIdentityPoolProvider(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &CreateWorkloadIdentityPoolProviderOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *workloadIdentityPoolsGRPCClient) UpdateWorkloadIdentityPoolProvider(ctx context.Context, req *iampb.UpdateWorkloadIdentityPoolProviderRequest, opts ...gax.CallOption) (*UpdateWorkloadIdentityPoolProviderOperation, error) {
	if _, ok := ctx.Deadline(); !ok && !c.disableDeadlines {
		cctx, cancel := context.WithTimeout(ctx, 60000*time.Millisecond)
		defer cancel()
		ctx = cctx
	}
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "workload_identity_pool_provider.name", url.QueryEscape(req.GetWorkloadIdentityPoolProvider().GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).UpdateWorkloadIdentityPoolProvider[0:len((*c.CallOptions).UpdateWorkloadIdentityPoolProvider):len((*c.CallOptions).UpdateWorkloadIdentityPoolProvider)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.workloadIdentityPoolsClient.UpdateWorkloadIdentityPoolProvider(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &UpdateWorkloadIdentityPoolProviderOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *workloadIdentityPoolsGRPCClient) DeleteWorkloadIdentityPoolProvider(ctx context.Context, req *iampb.DeleteWorkloadIdentityPoolProviderRequest, opts ...gax.CallOption) (*DeleteWorkloadIdentityPoolProviderOperation, error) {
	if _, ok := ctx.Deadline(); !ok && !c.disableDeadlines {
		cctx, cancel := context.WithTimeout(ctx, 60000*time.Millisecond)
		defer cancel()
		ctx = cctx
	}
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).DeleteWorkloadIdentityPoolProvider[0:len((*c.CallOptions).DeleteWorkloadIdentityPoolProvider):len((*c.CallOptions).DeleteWorkloadIdentityPoolProvider)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.workloadIdentityPoolsClient.DeleteWorkloadIdentityPoolProvider(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &DeleteWorkloadIdentityPoolProviderOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *workloadIdentityPoolsGRPCClient) UndeleteWorkloadIdentityPoolProvider(ctx context.Context, req *iampb.UndeleteWorkloadIdentityPoolProviderRequest, opts ...gax.CallOption) (*UndeleteWorkloadIdentityPoolProviderOperation, error) {
	if _, ok := ctx.Deadline(); !ok && !c.disableDeadlines {
		cctx, cancel := context.WithTimeout(ctx, 60000*time.Millisecond)
		defer cancel()
		ctx = cctx
	}
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).UndeleteWorkloadIdentityPoolProvider[0:len((*c.CallOptions).UndeleteWorkloadIdentityPoolProvider):len((*c.CallOptions).UndeleteWorkloadIdentityPoolProvider)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.workloadIdentityPoolsClient.UndeleteWorkloadIdentityPoolProvider(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &UndeleteWorkloadIdentityPoolProviderOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

// CreateWorkloadIdentityPoolOperation manages a long-running operation from CreateWorkloadIdentityPool.
type CreateWorkloadIdentityPoolOperation struct {
	lro *longrunning.Operation
}

// CreateWorkloadIdentityPoolOperation returns a new CreateWorkloadIdentityPoolOperation from a given name.
// The name must be that of a previously created CreateWorkloadIdentityPoolOperation, possibly from a different process.
func (c *workloadIdentityPoolsGRPCClient) CreateWorkloadIdentityPoolOperation(name string) *CreateWorkloadIdentityPoolOperation {
	return &CreateWorkloadIdentityPoolOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// Wait blocks until the long-running operation is completed, returning the response and any errors encountered.
//
// See documentation of Poll for error-handling information.
func (op *CreateWorkloadIdentityPoolOperation) Wait(ctx context.Context, opts ...gax.CallOption) (*iampb.WorkloadIdentityPool, error) {
	var resp iampb.WorkloadIdentityPool
	if err := op.lro.WaitWithInterval(ctx, &resp, time.Minute, opts...); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Poll fetches the latest state of the long-running operation.
//
// Poll also fetches the latest metadata, which can be retrieved by Metadata.
//
// If Poll fails, the error is returned and op is unmodified. If Poll succeeds and
// the operation has completed with failure, the error is returned and op.Done will return true.
// If Poll succeeds and the operation has completed successfully,
// op.Done will return true, and the response of the operation is returned.
// If Poll succeeds and the operation has not completed, the returned response and error are both nil.
func (op *CreateWorkloadIdentityPoolOperation) Poll(ctx context.Context, opts ...gax.CallOption) (*iampb.WorkloadIdentityPool, error) {
	var resp iampb.WorkloadIdentityPool
	if err := op.lro.Poll(ctx, &resp, opts...); err != nil {
		return nil, err
	}
	if !op.Done() {
		return nil, nil
	}
	return &resp, nil
}

// Metadata returns metadata associated with the long-running operation.
// Metadata itself does not contact the server, but Poll does.
// To get the latest metadata, call this method after a successful call to Poll.
// If the metadata is not available, the returned metadata and error are both nil.
func (op *CreateWorkloadIdentityPoolOperation) Metadata() (*iampb.WorkloadIdentityPoolOperationMetadata, error) {
	var meta iampb.WorkloadIdentityPoolOperationMetadata
	if err := op.lro.Metadata(&meta); err == longrunning.ErrNoMetadata {
		return nil, nil
	} else if err != nil {
		return nil, err
	}
	return &meta, nil
}

// Done reports whether the long-running operation has completed.
func (op *CreateWorkloadIdentityPoolOperation) Done() bool {
	return op.lro.Done()
}

// Name returns the name of the long-running operation.
// The name is assigned by the server and is unique within the service from which the operation is created.
func (op *CreateWorkloadIdentityPoolOperation) Name() string {
	return op.lro.Name()
}

// CreateWorkloadIdentityPoolProviderOperation manages a long-running operation from CreateWorkloadIdentityPoolProvider.
type CreateWorkloadIdentityPoolProviderOperation struct {
	lro *longrunning.Operation
}

// CreateWorkloadIdentityPoolProviderOperation returns a new CreateWorkloadIdentityPoolProviderOperation from a given name.
// The name must be that of a previously created CreateWorkloadIdentityPoolProviderOperation, possibly from a different process.
func (c *workloadIdentityPoolsGRPCClient) CreateWorkloadIdentityPoolProviderOperation(name string) *CreateWorkloadIdentityPoolProviderOperation {
	return &CreateWorkloadIdentityPoolProviderOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// Wait blocks until the long-running operation is completed, returning the response and any errors encountered.
//
// See documentation of Poll for error-handling information.
func (op *CreateWorkloadIdentityPoolProviderOperation) Wait(ctx context.Context, opts ...gax.CallOption) (*iampb.WorkloadIdentityPoolProvider, error) {
	var resp iampb.WorkloadIdentityPoolProvider
	if err := op.lro.WaitWithInterval(ctx, &resp, time.Minute, opts...); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Poll fetches the latest state of the long-running operation.
//
// Poll also fetches the latest metadata, which can be retrieved by Metadata.
//
// If Poll fails, the error is returned and op is unmodified. If Poll succeeds and
// the operation has completed with failure, the error is returned and op.Done will return true.
// If Poll succeeds and the operation has completed successfully,
// op.Done will return true, and the response of the operation is returned.
// If Poll succeeds and the operation has not completed, the returned response and error are both nil.
func (op *CreateWorkloadIdentityPoolProviderOperation) Poll(ctx context.Context, opts ...gax.CallOption) (*iampb.WorkloadIdentityPoolProvider, error) {
	var resp iampb.WorkloadIdentityPoolProvider
	if err := op.lro.Poll(ctx, &resp, opts...); err != nil {
		return nil, err
	}
	if !op.Done() {
		return nil, nil
	}
	return &resp, nil
}

// Metadata returns metadata associated with the long-running operation.
// Metadata itself does not contact the server, but Poll does.
// To get the latest metadata, call this method after a successful call to Poll.
// If the metadata is not available, the returned metadata and error are both nil.
func (op *CreateWorkloadIdentityPoolProviderOperation) Metadata() (*iampb.WorkloadIdentityPoolProviderOperationMetadata, error) {
	var meta iampb.WorkloadIdentityPoolProviderOperationMetadata
	if err := op.lro.Metadata(&meta); err == longrunning.ErrNoMetadata {
		return nil, nil
	} else if err != nil {
		return nil, err
	}
	return &meta, nil
}

// Done reports whether the long-running operation has completed.
func (op *CreateWorkloadIdentityPoolProviderOperation) Done() bool {
	return op.lro.Done()
}

// Name returns the name of the long-running operation.
// The name is assigned by the server and is unique within the service from which the operation is created.
func (op *CreateWorkloadIdentityPoolProviderOperation) Name() string {
	return op.lro.Name()
}

// DeleteWorkloadIdentityPoolOperation manages a long-running operation from DeleteWorkloadIdentityPool.
type DeleteWorkloadIdentityPoolOperation struct {
	lro *longrunning.Operation
}

// DeleteWorkloadIdentityPoolOperation returns a new DeleteWorkloadIdentityPoolOperation from a given name.
// The name must be that of a previously created DeleteWorkloadIdentityPoolOperation, possibly from a different process.
func (c *workloadIdentityPoolsGRPCClient) DeleteWorkloadIdentityPoolOperation(name string) *DeleteWorkloadIdentityPoolOperation {
	return &DeleteWorkloadIdentityPoolOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// Wait blocks until the long-running operation is completed, returning the response and any errors encountered.
//
// See documentation of Poll for error-handling information.
func (op *DeleteWorkloadIdentityPoolOperation) Wait(ctx context.Context, opts ...gax.CallOption) (*iampb.WorkloadIdentityPool, error) {
	var resp iampb.WorkloadIdentityPool
	if err := op.lro.WaitWithInterval(ctx, &resp, time.Minute, opts...); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Poll fetches the latest state of the long-running operation.
//
// Poll also fetches the latest metadata, which can be retrieved by Metadata.
//
// If Poll fails, the error is returned and op is unmodified. If Poll succeeds and
// the operation has completed with failure, the error is returned and op.Done will return true.
// If Poll succeeds and the operation has completed successfully,
// op.Done will return true, and the response of the operation is returned.
// If Poll succeeds and the operation has not completed, the returned response and error are both nil.
func (op *DeleteWorkloadIdentityPoolOperation) Poll(ctx context.Context, opts ...gax.CallOption) (*iampb.WorkloadIdentityPool, error) {
	var resp iampb.WorkloadIdentityPool
	if err := op.lro.Poll(ctx, &resp, opts...); err != nil {
		return nil, err
	}
	if !op.Done() {
		return nil, nil
	}
	return &resp, nil
}

// Metadata returns metadata associated with the long-running operation.
// Metadata itself does not contact the server, but Poll does.
// To get the latest metadata, call this method after a successful call to Poll.
// If the metadata is not available, the returned metadata and error are both nil.
func (op *DeleteWorkloadIdentityPoolOperation) Metadata() (*iampb.WorkloadIdentityPoolOperationMetadata, error) {
	var meta iampb.WorkloadIdentityPoolOperationMetadata
	if err := op.lro.Metadata(&meta); err == longrunning.ErrNoMetadata {
		return nil, nil
	} else if err != nil {
		return nil, err
	}
	return &meta, nil
}

// Done reports whether the long-running operation has completed.
func (op *DeleteWorkloadIdentityPoolOperation) Done() bool {
	return op.lro.Done()
}

// Name returns the name of the long-running operation.
// The name is assigned by the server and is unique within the service from which the operation is created.
func (op *DeleteWorkloadIdentityPoolOperation) Name() string {
	return op.lro.Name()
}

// DeleteWorkloadIdentityPoolProviderOperation manages a long-running operation from DeleteWorkloadIdentityPoolProvider.
type DeleteWorkloadIdentityPoolProviderOperation struct {
	lro *longrunning.Operation
}

// DeleteWorkloadIdentityPoolProviderOperation returns a new DeleteWorkloadIdentityPoolProviderOperation from a given name.
// The name must be that of a previously created DeleteWorkloadIdentityPoolProviderOperation, possibly from a different process.
func (c *workloadIdentityPoolsGRPCClient) DeleteWorkloadIdentityPoolProviderOperation(name string) *DeleteWorkloadIdentityPoolProviderOperation {
	return &DeleteWorkloadIdentityPoolProviderOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// Wait blocks until the long-running operation is completed, returning the response and any errors encountered.
//
// See documentation of Poll for error-handling information.
func (op *DeleteWorkloadIdentityPoolProviderOperation) Wait(ctx context.Context, opts ...gax.CallOption) (*iampb.WorkloadIdentityPoolProvider, error) {
	var resp iampb.WorkloadIdentityPoolProvider
	if err := op.lro.WaitWithInterval(ctx, &resp, time.Minute, opts...); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Poll fetches the latest state of the long-running operation.
//
// Poll also fetches the latest metadata, which can be retrieved by Metadata.
//
// If Poll fails, the error is returned and op is unmodified. If Poll succeeds and
// the operation has completed with failure, the error is returned and op.Done will return true.
// If Poll succeeds and the operation has completed successfully,
// op.Done will return true, and the response of the operation is returned.
// If Poll succeeds and the operation has not completed, the returned response and error are both nil.
func (op *DeleteWorkloadIdentityPoolProviderOperation) Poll(ctx context.Context, opts ...gax.CallOption) (*iampb.WorkloadIdentityPoolProvider, error) {
	var resp iampb.WorkloadIdentityPoolProvider
	if err := op.lro.Poll(ctx, &resp, opts...); err != nil {
		return nil, err
	}
	if !op.Done() {
		return nil, nil
	}
	return &resp, nil
}

// Metadata returns metadata associated with the long-running operation.
// Metadata itself does not contact the server, but Poll does.
// To get the latest metadata, call this method after a successful call to Poll.
// If the metadata is not available, the returned metadata and error are both nil.
func (op *DeleteWorkloadIdentityPoolProviderOperation) Metadata() (*iampb.WorkloadIdentityPoolProviderOperationMetadata, error) {
	var meta iampb.WorkloadIdentityPoolProviderOperationMetadata
	if err := op.lro.Metadata(&meta); err == longrunning.ErrNoMetadata {
		return nil, nil
	} else if err != nil {
		return nil, err
	}
	return &meta, nil
}

// Done reports whether the long-running operation has completed.
func (op *DeleteWorkloadIdentityPoolProviderOperation) Done() bool {
	return op.lro.Done()
}

// Name returns the name of the long-running operation.
// The name is assigned by the server and is unique within the service from which the operation is created.
func (op *DeleteWorkloadIdentityPoolProviderOperation) Name() string {
	return op.lro.Name()
}

// UndeleteWorkloadIdentityPoolOperation manages a long-running operation from UndeleteWorkloadIdentityPool.
type UndeleteWorkloadIdentityPoolOperation struct {
	lro *longrunning.Operation
}

// UndeleteWorkloadIdentityPoolOperation returns a new UndeleteWorkloadIdentityPoolOperation from a given name.
// The name must be that of a previously created UndeleteWorkloadIdentityPoolOperation, possibly from a different process.
func (c *workloadIdentityPoolsGRPCClient) UndeleteWorkloadIdentityPoolOperation(name string) *UndeleteWorkloadIdentityPoolOperation {
	return &UndeleteWorkloadIdentityPoolOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// Wait blocks until the long-running operation is completed, returning the response and any errors encountered.
//
// See documentation of Poll for error-handling information.
func (op *UndeleteWorkloadIdentityPoolOperation) Wait(ctx context.Context, opts ...gax.CallOption) (*iampb.WorkloadIdentityPool, error) {
	var resp iampb.WorkloadIdentityPool
	if err := op.lro.WaitWithInterval(ctx, &resp, time.Minute, opts...); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Poll fetches the latest state of the long-running operation.
//
// Poll also fetches the latest metadata, which can be retrieved by Metadata.
//
// If Poll fails, the error is returned and op is unmodified. If Poll succeeds and
// the operation has completed with failure, the error is returned and op.Done will return true.
// If Poll succeeds and the operation has completed successfully,
// op.Done will return true, and the response of the operation is returned.
// If Poll succeeds and the operation has not completed, the returned response and error are both nil.
func (op *UndeleteWorkloadIdentityPoolOperation) Poll(ctx context.Context, opts ...gax.CallOption) (*iampb.WorkloadIdentityPool, error) {
	var resp iampb.WorkloadIdentityPool
	if err := op.lro.Poll(ctx, &resp, opts...); err != nil {
		return nil, err
	}
	if !op.Done() {
		return nil, nil
	}
	return &resp, nil
}

// Metadata returns metadata associated with the long-running operation.
// Metadata itself does not contact the server, but Poll does.
// To get the latest metadata, call this method after a successful call to Poll.
// If the metadata is not available, the returned metadata and error are both nil.
func (op *UndeleteWorkloadIdentityPoolOperation) Metadata() (*iampb.WorkloadIdentityPoolOperationMetadata, error) {
	var meta iampb.WorkloadIdentityPoolOperationMetadata
	if err := op.lro.Metadata(&meta); err == longrunning.ErrNoMetadata {
		return nil, nil
	} else if err != nil {
		return nil, err
	}
	return &meta, nil
}

// Done reports whether the long-running operation has completed.
func (op *UndeleteWorkloadIdentityPoolOperation) Done() bool {
	return op.lro.Done()
}

// Name returns the name of the long-running operation.
// The name is assigned by the server and is unique within the service from which the operation is created.
func (op *UndeleteWorkloadIdentityPoolOperation) Name() string {
	return op.lro.Name()
}

// UndeleteWorkloadIdentityPoolProviderOperation manages a long-running operation from UndeleteWorkloadIdentityPoolProvider.
type UndeleteWorkloadIdentityPoolProviderOperation struct {
	lro *longrunning.Operation
}

// UndeleteWorkloadIdentityPoolProviderOperation returns a new UndeleteWorkloadIdentityPoolProviderOperation from a given name.
// The name must be that of a previously created UndeleteWorkloadIdentityPoolProviderOperation, possibly from a different process.
func (c *workloadIdentityPoolsGRPCClient) UndeleteWorkloadIdentityPoolProviderOperation(name string) *UndeleteWorkloadIdentityPoolProviderOperation {
	return &UndeleteWorkloadIdentityPoolProviderOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// Wait blocks until the long-running operation is completed, returning the response and any errors encountered.
//
// See documentation of Poll for error-handling information.
func (op *UndeleteWorkloadIdentityPoolProviderOperation) Wait(ctx context.Context, opts ...gax.CallOption) (*iampb.WorkloadIdentityPoolProvider, error) {
	var resp iampb.WorkloadIdentityPoolProvider
	if err := op.lro.WaitWithInterval(ctx, &resp, time.Minute, opts...); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Poll fetches the latest state of the long-running operation.
//
// Poll also fetches the latest metadata, which can be retrieved by Metadata.
//
// If Poll fails, the error is returned and op is unmodified. If Poll succeeds and
// the operation has completed with failure, the error is returned and op.Done will return true.
// If Poll succeeds and the operation has completed successfully,
// op.Done will return true, and the response of the operation is returned.
// If Poll succeeds and the operation has not completed, the returned response and error are both nil.
func (op *UndeleteWorkloadIdentityPoolProviderOperation) Poll(ctx context.Context, opts ...gax.CallOption) (*iampb.WorkloadIdentityPoolProvider, error) {
	var resp iampb.WorkloadIdentityPoolProvider
	if err := op.lro.Poll(ctx, &resp, opts...); err != nil {
		return nil, err
	}
	if !op.Done() {
		return nil, nil
	}
	return &resp, nil
}

// Metadata returns metadata associated with the long-running operation.
// Metadata itself does not contact the server, but Poll does.
// To get the latest metadata, call this method after a successful call to Poll.
// If the metadata is not available, the returned metadata and error are both nil.
func (op *UndeleteWorkloadIdentityPoolProviderOperation) Metadata() (*iampb.WorkloadIdentityPoolProviderOperationMetadata, error) {
	var meta iampb.WorkloadIdentityPoolProviderOperationMetadata
	if err := op.lro.Metadata(&meta); err == longrunning.ErrNoMetadata {
		return nil, nil
	} else if err != nil {
		return nil, err
	}
	return &meta, nil
}

// Done reports whether the long-running operation has completed.
func (op *UndeleteWorkloadIdentityPoolProviderOperation) Done() bool {
	return op.lro.Done()
}

// Name returns the name of the long-running operation.
// The name is assigned by the server and is unique within the service from which the operation is created.
func (op *UndeleteWorkloadIdentityPoolProviderOperation) Name() string {
	return op.lro.Name()
}

// UpdateWorkloadIdentityPoolOperation manages a long-running operation from UpdateWorkloadIdentityPool.
type UpdateWorkloadIdentityPoolOperation struct {
	lro *longrunning.Operation
}

// UpdateWorkloadIdentityPoolOperation returns a new UpdateWorkloadIdentityPoolOperation from a given name.
// The name must be that of a previously created UpdateWorkloadIdentityPoolOperation, possibly from a different process.
func (c *workloadIdentityPoolsGRPCClient) UpdateWorkloadIdentityPoolOperation(name string) *UpdateWorkloadIdentityPoolOperation {
	return &UpdateWorkloadIdentityPoolOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// Wait blocks until the long-running operation is completed, returning the response and any errors encountered.
//
// See documentation of Poll for error-handling information.
func (op *UpdateWorkloadIdentityPoolOperation) Wait(ctx context.Context, opts ...gax.CallOption) (*iampb.WorkloadIdentityPool, error) {
	var resp iampb.WorkloadIdentityPool
	if err := op.lro.WaitWithInterval(ctx, &resp, time.Minute, opts...); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Poll fetches the latest state of the long-running operation.
//
// Poll also fetches the latest metadata, which can be retrieved by Metadata.
//
// If Poll fails, the error is returned and op is unmodified. If Poll succeeds and
// the operation has completed with failure, the error is returned and op.Done will return true.
// If Poll succeeds and the operation has completed successfully,
// op.Done will return true, and the response of the operation is returned.
// If Poll succeeds and the operation has not completed, the returned response and error are both nil.
func (op *UpdateWorkloadIdentityPoolOperation) Poll(ctx context.Context, opts ...gax.CallOption) (*iampb.WorkloadIdentityPool, error) {
	var resp iampb.WorkloadIdentityPool
	if err := op.lro.Poll(ctx, &resp, opts...); err != nil {
		return nil, err
	}
	if !op.Done() {
		return nil, nil
	}
	return &resp, nil
}

// Metadata returns metadata associated with the long-running operation.
// Metadata itself does not contact the server, but Poll does.
// To get the latest metadata, call this method after a successful call to Poll.
// If the metadata is not available, the returned metadata and error are both nil.
func (op *UpdateWorkloadIdentityPoolOperation) Metadata() (*iampb.WorkloadIdentityPoolOperationMetadata, error) {
	var meta iampb.WorkloadIdentityPoolOperationMetadata
	if err := op.lro.Metadata(&meta); err == longrunning.ErrNoMetadata {
		return nil, nil
	} else if err != nil {
		return nil, err
	}
	return &meta, nil
}

// Done reports whether the long-running operation has completed.
func (op *UpdateWorkloadIdentityPoolOperation) Done() bool {
	return op.lro.Done()
}

// Name returns the name of the long-running operation.
// The name is assigned by the server and is unique within the service from which the operation is created.
func (op *UpdateWorkloadIdentityPoolOperation) Name() string {
	return op.lro.Name()
}

// UpdateWorkloadIdentityPoolProviderOperation manages a long-running operation from UpdateWorkloadIdentityPoolProvider.
type UpdateWorkloadIdentityPoolProviderOperation struct {
	lro *longrunning.Operation
}

// UpdateWorkloadIdentityPoolProviderOperation returns a new UpdateWorkloadIdentityPoolProviderOperation from a given name.
// The name must be that of a previously created UpdateWorkloadIdentityPoolProviderOperation, possibly from a different process.
func (c *workloadIdentityPoolsGRPCClient) UpdateWorkloadIdentityPoolProviderOperation(name string) *UpdateWorkloadIdentityPoolProviderOperation {
	return &UpdateWorkloadIdentityPoolProviderOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// Wait blocks until the long-running operation is completed, returning the response and any errors encountered.
//
// See documentation of Poll for error-handling information.
func (op *UpdateWorkloadIdentityPoolProviderOperation) Wait(ctx context.Context, opts ...gax.CallOption) (*iampb.WorkloadIdentityPoolProvider, error) {
	var resp iampb.WorkloadIdentityPoolProvider
	if err := op.lro.WaitWithInterval(ctx, &resp, time.Minute, opts...); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Poll fetches the latest state of the long-running operation.
//
// Poll also fetches the latest metadata, which can be retrieved by Metadata.
//
// If Poll fails, the error is returned and op is unmodified. If Poll succeeds and
// the operation has completed with failure, the error is returned and op.Done will return true.
// If Poll succeeds and the operation has completed successfully,
// op.Done will return true, and the response of the operation is returned.
// If Poll succeeds and the operation has not completed, the returned response and error are both nil.
func (op *UpdateWorkloadIdentityPoolProviderOperation) Poll(ctx context.Context, opts ...gax.CallOption) (*iampb.WorkloadIdentityPoolProvider, error) {
	var resp iampb.WorkloadIdentityPoolProvider
	if err := op.lro.Poll(ctx, &resp, opts...); err != nil {
		return nil, err
	}
	if !op.Done() {
		return nil, nil
	}
	return &resp, nil
}

// Metadata returns metadata associated with the long-running operation.
// Metadata itself does not contact the server, but Poll does.
// To get the latest metadata, call this method after a successful call to Poll.
// If the metadata is not available, the returned metadata and error are both nil.
func (op *UpdateWorkloadIdentityPoolProviderOperation) Metadata() (*iampb.WorkloadIdentityPoolProviderOperationMetadata, error) {
	var meta iampb.WorkloadIdentityPoolProviderOperationMetadata
	if err := op.lro.Metadata(&meta); err == longrunning.ErrNoMetadata {
		return nil, nil
	} else if err != nil {
		return nil, err
	}
	return &meta, nil
}

// Done reports whether the long-running operation has completed.
func (op *UpdateWorkloadIdentityPoolProviderOperation) Done() bool {
	return op.lro.Done()
}

// Name returns the name of the long-running operation.
// The name is assigned by the server and is unique within the service from which the operation is created.
func (op *UpdateWorkloadIdentityPoolProviderOperation) Name() string {
	return op.lro.Name()
}

// WorkloadIdentityPoolIterator manages a stream of *iampb.WorkloadIdentityPool.
type WorkloadIdentityPoolIterator struct {
	items    []*iampb.WorkloadIdentityPool
	pageInfo *iterator.PageInfo
	nextFunc func() error

	// Response is the raw response for the current page.
	// It must be cast to the RPC response type.
	// Calling Next() or InternalFetch() updates this value.
	Response interface{}

	// InternalFetch is for use by the Google Cloud Libraries only.
	// It is not part of the stable interface of this package.
	//
	// InternalFetch returns results from a single call to the underlying RPC.
	// The number of results is no greater than pageSize.
	// If there are no more results, nextPageToken is empty and err is nil.
	InternalFetch func(pageSize int, pageToken string) (results []*iampb.WorkloadIdentityPool, nextPageToken string, err error)
}

// PageInfo supports pagination. See the google.golang.org/api/iterator package for details.
func (it *WorkloadIdentityPoolIterator) PageInfo() *iterator.PageInfo {
	return it.pageInfo
}

// Next returns the next result. Its second return value is iterator.Done if there are no more
// results. Once Next returns Done, all subsequent calls will return Done.
func (it *WorkloadIdentityPoolIterator) Next() (*iampb.WorkloadIdentityPool, error) {
	var item *iampb.WorkloadIdentityPool
	if err := it.nextFunc(); err != nil {
		return item, err
	}
	item = it.items[0]
	it.items = it.items[1:]
	return item, nil
}

func (it *WorkloadIdentityPoolIterator) bufLen() int {
	return len(it.items)
}

func (it *WorkloadIdentityPoolIterator) takeBuf() interface{} {
	b := it.items
	it.items = nil
	return b
}

// WorkloadIdentityPoolProviderIterator manages a stream of *iampb.WorkloadIdentityPoolProvider.
type WorkloadIdentityPoolProviderIterator struct {
	items    []*iampb.WorkloadIdentityPoolProvider
	pageInfo *iterator.PageInfo
	nextFunc func() error

	// Response is the raw response for the current page.
	// It must be cast to the RPC response type.
	// Calling Next() or InternalFetch() updates this value.
	Response interface{}

	// InternalFetch is for use by the Google Cloud Libraries only.
	// It is not part of the stable interface of this package.
	//
	// InternalFetch returns results from a single call to the underlying RPC.
	// The number of results is no greater than pageSize.
	// If there are no more results, nextPageToken is empty and err is nil.
	InternalFetch func(pageSize int, pageToken string) (results []*iampb.WorkloadIdentityPoolProvider, nextPageToken string, err error)
}

// PageInfo supports pagination. See the google.golang.org/api/iterator package for details.
func (it *WorkloadIdentityPoolProviderIterator) PageInfo() *iterator.PageInfo {
	return it.pageInfo
}

// Next returns the next result. Its second return value is iterator.Done if there are no more
// results. Once Next returns Done, all subsequent calls will return Done.
func (it *WorkloadIdentityPoolProviderIterator) Next() (*iampb.WorkloadIdentityPoolProvider, error) {
	var item *iampb.WorkloadIdentityPoolProvider
	if err := it.nextFunc(); err != nil {
		return item, err
	}
	item = it.items[0]
	it.items = it.items[1:]
	return item, nil
}

func (it *WorkloadIdentityPoolProviderIterator) bufLen() int {
	return len(it.items)
}

func (it *WorkloadIdentityPoolProviderIterator) takeBuf() interface{} {
	b := it.items
	it.items = nil
	return b
}
