// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as iamModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1.IAMClient', () => {
    it('has servicePath', () => {
        const servicePath = iamModule.v1.IAMClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = iamModule.v1.IAMClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = iamModule.v1.IAMClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new iamModule.v1.IAMClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new iamModule.v1.IAMClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        assert.strictEqual(client.iAMStub, undefined);
        await client.initialize();
        assert(client.iAMStub);
    });

    it('has close method', () => {
        const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('getServiceAccount', () => {
        it('invokes getServiceAccount without error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.GetServiceAccountRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.ServiceAccount());
            client.innerApiCalls.getServiceAccount = stubSimpleCall(expectedResponse);
            const [response] = await client.getServiceAccount(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getServiceAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getServiceAccount without error using callback', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.GetServiceAccountRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.ServiceAccount());
            client.innerApiCalls.getServiceAccount = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getServiceAccount(
                    request,
                    (err?: Error|null, result?: protos.google.iam.admin.v1.IServiceAccount|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getServiceAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getServiceAccount with error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.GetServiceAccountRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getServiceAccount = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getServiceAccount(request), expectedError);
            assert((client.innerApiCalls.getServiceAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createServiceAccount', () => {
        it('invokes createServiceAccount without error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.CreateServiceAccountRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.ServiceAccount());
            client.innerApiCalls.createServiceAccount = stubSimpleCall(expectedResponse);
            const [response] = await client.createServiceAccount(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createServiceAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createServiceAccount without error using callback', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.CreateServiceAccountRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.ServiceAccount());
            client.innerApiCalls.createServiceAccount = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createServiceAccount(
                    request,
                    (err?: Error|null, result?: protos.google.iam.admin.v1.IServiceAccount|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createServiceAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createServiceAccount with error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.CreateServiceAccountRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createServiceAccount = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createServiceAccount(request), expectedError);
            assert((client.innerApiCalls.createServiceAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateServiceAccount', () => {
        it('invokes updateServiceAccount without error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.ServiceAccount());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.ServiceAccount());
            client.innerApiCalls.updateServiceAccount = stubSimpleCall(expectedResponse);
            const [response] = await client.updateServiceAccount(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateServiceAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateServiceAccount without error using callback', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.ServiceAccount());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.ServiceAccount());
            client.innerApiCalls.updateServiceAccount = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateServiceAccount(
                    request,
                    (err?: Error|null, result?: protos.google.iam.admin.v1.IServiceAccount|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateServiceAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateServiceAccount with error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.ServiceAccount());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateServiceAccount = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateServiceAccount(request), expectedError);
            assert((client.innerApiCalls.updateServiceAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('patchServiceAccount', () => {
        it('invokes patchServiceAccount without error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.PatchServiceAccountRequest());
            request.serviceAccount = {};
            request.serviceAccount.name = '';
            const expectedHeaderRequestParams = "service_account.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.ServiceAccount());
            client.innerApiCalls.patchServiceAccount = stubSimpleCall(expectedResponse);
            const [response] = await client.patchServiceAccount(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.patchServiceAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes patchServiceAccount without error using callback', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.PatchServiceAccountRequest());
            request.serviceAccount = {};
            request.serviceAccount.name = '';
            const expectedHeaderRequestParams = "service_account.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.ServiceAccount());
            client.innerApiCalls.patchServiceAccount = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.patchServiceAccount(
                    request,
                    (err?: Error|null, result?: protos.google.iam.admin.v1.IServiceAccount|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.patchServiceAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes patchServiceAccount with error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.PatchServiceAccountRequest());
            request.serviceAccount = {};
            request.serviceAccount.name = '';
            const expectedHeaderRequestParams = "service_account.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.patchServiceAccount = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.patchServiceAccount(request), expectedError);
            assert((client.innerApiCalls.patchServiceAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteServiceAccount', () => {
        it('invokes deleteServiceAccount without error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.DeleteServiceAccountRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteServiceAccount = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteServiceAccount(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteServiceAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteServiceAccount without error using callback', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.DeleteServiceAccountRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteServiceAccount = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteServiceAccount(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteServiceAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteServiceAccount with error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.DeleteServiceAccountRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteServiceAccount = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteServiceAccount(request), expectedError);
            assert((client.innerApiCalls.deleteServiceAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('undeleteServiceAccount', () => {
        it('invokes undeleteServiceAccount without error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.UndeleteServiceAccountRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.UndeleteServiceAccountResponse());
            client.innerApiCalls.undeleteServiceAccount = stubSimpleCall(expectedResponse);
            const [response] = await client.undeleteServiceAccount(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.undeleteServiceAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes undeleteServiceAccount without error using callback', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.UndeleteServiceAccountRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.UndeleteServiceAccountResponse());
            client.innerApiCalls.undeleteServiceAccount = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.undeleteServiceAccount(
                    request,
                    (err?: Error|null, result?: protos.google.iam.admin.v1.IUndeleteServiceAccountResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.undeleteServiceAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes undeleteServiceAccount with error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.UndeleteServiceAccountRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.undeleteServiceAccount = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.undeleteServiceAccount(request), expectedError);
            assert((client.innerApiCalls.undeleteServiceAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('enableServiceAccount', () => {
        it('invokes enableServiceAccount without error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.EnableServiceAccountRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.enableServiceAccount = stubSimpleCall(expectedResponse);
            const [response] = await client.enableServiceAccount(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.enableServiceAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes enableServiceAccount without error using callback', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.EnableServiceAccountRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.enableServiceAccount = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.enableServiceAccount(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.enableServiceAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes enableServiceAccount with error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.EnableServiceAccountRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.enableServiceAccount = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.enableServiceAccount(request), expectedError);
            assert((client.innerApiCalls.enableServiceAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('disableServiceAccount', () => {
        it('invokes disableServiceAccount without error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.DisableServiceAccountRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.disableServiceAccount = stubSimpleCall(expectedResponse);
            const [response] = await client.disableServiceAccount(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.disableServiceAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes disableServiceAccount without error using callback', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.DisableServiceAccountRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.disableServiceAccount = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.disableServiceAccount(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.disableServiceAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes disableServiceAccount with error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.DisableServiceAccountRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.disableServiceAccount = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.disableServiceAccount(request), expectedError);
            assert((client.innerApiCalls.disableServiceAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('listServiceAccountKeys', () => {
        it('invokes listServiceAccountKeys without error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.ListServiceAccountKeysRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.ListServiceAccountKeysResponse());
            client.innerApiCalls.listServiceAccountKeys = stubSimpleCall(expectedResponse);
            const [response] = await client.listServiceAccountKeys(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listServiceAccountKeys as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listServiceAccountKeys without error using callback', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.ListServiceAccountKeysRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.ListServiceAccountKeysResponse());
            client.innerApiCalls.listServiceAccountKeys = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listServiceAccountKeys(
                    request,
                    (err?: Error|null, result?: protos.google.iam.admin.v1.IListServiceAccountKeysResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listServiceAccountKeys as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listServiceAccountKeys with error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.ListServiceAccountKeysRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listServiceAccountKeys = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listServiceAccountKeys(request), expectedError);
            assert((client.innerApiCalls.listServiceAccountKeys as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getServiceAccountKey', () => {
        it('invokes getServiceAccountKey without error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.GetServiceAccountKeyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.ServiceAccountKey());
            client.innerApiCalls.getServiceAccountKey = stubSimpleCall(expectedResponse);
            const [response] = await client.getServiceAccountKey(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getServiceAccountKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getServiceAccountKey without error using callback', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.GetServiceAccountKeyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.ServiceAccountKey());
            client.innerApiCalls.getServiceAccountKey = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getServiceAccountKey(
                    request,
                    (err?: Error|null, result?: protos.google.iam.admin.v1.IServiceAccountKey|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getServiceAccountKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getServiceAccountKey with error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.GetServiceAccountKeyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getServiceAccountKey = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getServiceAccountKey(request), expectedError);
            assert((client.innerApiCalls.getServiceAccountKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createServiceAccountKey', () => {
        it('invokes createServiceAccountKey without error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.CreateServiceAccountKeyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.ServiceAccountKey());
            client.innerApiCalls.createServiceAccountKey = stubSimpleCall(expectedResponse);
            const [response] = await client.createServiceAccountKey(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createServiceAccountKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createServiceAccountKey without error using callback', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.CreateServiceAccountKeyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.ServiceAccountKey());
            client.innerApiCalls.createServiceAccountKey = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createServiceAccountKey(
                    request,
                    (err?: Error|null, result?: protos.google.iam.admin.v1.IServiceAccountKey|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createServiceAccountKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createServiceAccountKey with error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.CreateServiceAccountKeyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createServiceAccountKey = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createServiceAccountKey(request), expectedError);
            assert((client.innerApiCalls.createServiceAccountKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('uploadServiceAccountKey', () => {
        it('invokes uploadServiceAccountKey without error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.UploadServiceAccountKeyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.ServiceAccountKey());
            client.innerApiCalls.uploadServiceAccountKey = stubSimpleCall(expectedResponse);
            const [response] = await client.uploadServiceAccountKey(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.uploadServiceAccountKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes uploadServiceAccountKey without error using callback', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.UploadServiceAccountKeyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.ServiceAccountKey());
            client.innerApiCalls.uploadServiceAccountKey = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.uploadServiceAccountKey(
                    request,
                    (err?: Error|null, result?: protos.google.iam.admin.v1.IServiceAccountKey|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.uploadServiceAccountKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes uploadServiceAccountKey with error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.UploadServiceAccountKeyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.uploadServiceAccountKey = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.uploadServiceAccountKey(request), expectedError);
            assert((client.innerApiCalls.uploadServiceAccountKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteServiceAccountKey', () => {
        it('invokes deleteServiceAccountKey without error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.DeleteServiceAccountKeyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteServiceAccountKey = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteServiceAccountKey(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteServiceAccountKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteServiceAccountKey without error using callback', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.DeleteServiceAccountKeyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteServiceAccountKey = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteServiceAccountKey(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteServiceAccountKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteServiceAccountKey with error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.DeleteServiceAccountKeyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteServiceAccountKey = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteServiceAccountKey(request), expectedError);
            assert((client.innerApiCalls.deleteServiceAccountKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('signBlob', () => {
        it('invokes signBlob without error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            const stub = sinon.stub(client, 'warn');
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.SignBlobRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.SignBlobResponse());
            client.innerApiCalls.signBlob = stubSimpleCall(expectedResponse);
            const [response] = await client.signBlob(request);
            assert(stub.calledOnce);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.signBlob as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes signBlob without error using callback', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            const stub = sinon.stub(client, 'warn');
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.SignBlobRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.SignBlobResponse());
            client.innerApiCalls.signBlob = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.signBlob(
                    request,
                    (err?: Error|null, result?: protos.google.iam.admin.v1.ISignBlobResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert(stub.calledOnce);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.signBlob as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes signBlob with error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            const stub = sinon.stub(client, 'warn');
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.SignBlobRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.signBlob = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.signBlob(request), expectedError);
            assert(stub.calledOnce);
            assert((client.innerApiCalls.signBlob as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('signJwt', () => {
        it('invokes signJwt without error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            const stub = sinon.stub(client, 'warn');
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.SignJwtRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.SignJwtResponse());
            client.innerApiCalls.signJwt = stubSimpleCall(expectedResponse);
            const [response] = await client.signJwt(request);
            assert(stub.calledOnce);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.signJwt as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes signJwt without error using callback', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            const stub = sinon.stub(client, 'warn');
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.SignJwtRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.SignJwtResponse());
            client.innerApiCalls.signJwt = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.signJwt(
                    request,
                    (err?: Error|null, result?: protos.google.iam.admin.v1.ISignJwtResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert(stub.calledOnce);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.signJwt as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes signJwt with error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            const stub = sinon.stub(client, 'warn');
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.SignJwtRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.signJwt = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.signJwt(request), expectedError);
            assert(stub.calledOnce);
            assert((client.innerApiCalls.signJwt as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getIamPolicy', () => {
        it('invokes getIamPolicy without error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.GetIamPolicyRequest());
            request.resource = '';
            const expectedHeaderRequestParams = "resource=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.getIamPolicy = stubSimpleCall(expectedResponse);
            const [response] = await client.getIamPolicy(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getIamPolicy without error using callback', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.GetIamPolicyRequest());
            request.resource = '';
            const expectedHeaderRequestParams = "resource=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.getIamPolicy = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getIamPolicy(
                    request,
                    (err?: Error|null, result?: protos.google.iam.v1.IPolicy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getIamPolicy with error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.GetIamPolicyRequest());
            request.resource = '';
            const expectedHeaderRequestParams = "resource=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getIamPolicy(request), expectedError);
            assert((client.innerApiCalls.getIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('setIamPolicy', () => {
        it('invokes setIamPolicy without error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.SetIamPolicyRequest());
            request.resource = '';
            const expectedHeaderRequestParams = "resource=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.setIamPolicy = stubSimpleCall(expectedResponse);
            const [response] = await client.setIamPolicy(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes setIamPolicy without error using callback', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.SetIamPolicyRequest());
            request.resource = '';
            const expectedHeaderRequestParams = "resource=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.setIamPolicy = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setIamPolicy(
                    request,
                    (err?: Error|null, result?: protos.google.iam.v1.IPolicy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes setIamPolicy with error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.SetIamPolicyRequest());
            request.resource = '';
            const expectedHeaderRequestParams = "resource=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.setIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setIamPolicy(request), expectedError);
            assert((client.innerApiCalls.setIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('testIamPermissions', () => {
        it('invokes testIamPermissions without error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsRequest());
            request.resource = '';
            const expectedHeaderRequestParams = "resource=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsResponse());
            client.innerApiCalls.testIamPermissions = stubSimpleCall(expectedResponse);
            const [response] = await client.testIamPermissions(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.testIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes testIamPermissions without error using callback', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsRequest());
            request.resource = '';
            const expectedHeaderRequestParams = "resource=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsResponse());
            client.innerApiCalls.testIamPermissions = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.testIamPermissions(
                    request,
                    (err?: Error|null, result?: protos.google.iam.v1.ITestIamPermissionsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.testIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes testIamPermissions with error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsRequest());
            request.resource = '';
            const expectedHeaderRequestParams = "resource=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.testIamPermissions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.testIamPermissions(request), expectedError);
            assert((client.innerApiCalls.testIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getRole', () => {
        it('invokes getRole without error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.GetRoleRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.Role());
            client.innerApiCalls.getRole = stubSimpleCall(expectedResponse);
            const [response] = await client.getRole(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getRole as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getRole without error using callback', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.GetRoleRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.Role());
            client.innerApiCalls.getRole = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getRole(
                    request,
                    (err?: Error|null, result?: protos.google.iam.admin.v1.IRole|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getRole as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getRole with error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.GetRoleRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getRole = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getRole(request), expectedError);
            assert((client.innerApiCalls.getRole as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createRole', () => {
        it('invokes createRole without error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.CreateRoleRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.Role());
            client.innerApiCalls.createRole = stubSimpleCall(expectedResponse);
            const [response] = await client.createRole(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createRole as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createRole without error using callback', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.CreateRoleRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.Role());
            client.innerApiCalls.createRole = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createRole(
                    request,
                    (err?: Error|null, result?: protos.google.iam.admin.v1.IRole|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createRole as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createRole with error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.CreateRoleRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createRole = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createRole(request), expectedError);
            assert((client.innerApiCalls.createRole as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateRole', () => {
        it('invokes updateRole without error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.UpdateRoleRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.Role());
            client.innerApiCalls.updateRole = stubSimpleCall(expectedResponse);
            const [response] = await client.updateRole(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateRole as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateRole without error using callback', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.UpdateRoleRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.Role());
            client.innerApiCalls.updateRole = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateRole(
                    request,
                    (err?: Error|null, result?: protos.google.iam.admin.v1.IRole|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateRole as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateRole with error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.UpdateRoleRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateRole = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateRole(request), expectedError);
            assert((client.innerApiCalls.updateRole as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteRole', () => {
        it('invokes deleteRole without error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.DeleteRoleRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.Role());
            client.innerApiCalls.deleteRole = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteRole(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteRole as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteRole without error using callback', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.DeleteRoleRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.Role());
            client.innerApiCalls.deleteRole = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteRole(
                    request,
                    (err?: Error|null, result?: protos.google.iam.admin.v1.IRole|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteRole as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteRole with error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.DeleteRoleRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteRole = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteRole(request), expectedError);
            assert((client.innerApiCalls.deleteRole as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('undeleteRole', () => {
        it('invokes undeleteRole without error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.UndeleteRoleRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.Role());
            client.innerApiCalls.undeleteRole = stubSimpleCall(expectedResponse);
            const [response] = await client.undeleteRole(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.undeleteRole as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes undeleteRole without error using callback', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.UndeleteRoleRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.Role());
            client.innerApiCalls.undeleteRole = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.undeleteRole(
                    request,
                    (err?: Error|null, result?: protos.google.iam.admin.v1.IRole|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.undeleteRole as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes undeleteRole with error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.UndeleteRoleRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.undeleteRole = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.undeleteRole(request), expectedError);
            assert((client.innerApiCalls.undeleteRole as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('queryAuditableServices', () => {
        it('invokes queryAuditableServices without error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.QueryAuditableServicesRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.QueryAuditableServicesResponse());
            client.innerApiCalls.queryAuditableServices = stubSimpleCall(expectedResponse);
            const [response] = await client.queryAuditableServices(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.queryAuditableServices as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes queryAuditableServices without error using callback', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.QueryAuditableServicesRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.QueryAuditableServicesResponse());
            client.innerApiCalls.queryAuditableServices = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.queryAuditableServices(
                    request,
                    (err?: Error|null, result?: protos.google.iam.admin.v1.IQueryAuditableServicesResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.queryAuditableServices as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes queryAuditableServices with error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.QueryAuditableServicesRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.queryAuditableServices = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.queryAuditableServices(request), expectedError);
            assert((client.innerApiCalls.queryAuditableServices as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('lintPolicy', () => {
        it('invokes lintPolicy without error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.LintPolicyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.LintPolicyResponse());
            client.innerApiCalls.lintPolicy = stubSimpleCall(expectedResponse);
            const [response] = await client.lintPolicy(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.lintPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes lintPolicy without error using callback', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.LintPolicyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.iam.admin.v1.LintPolicyResponse());
            client.innerApiCalls.lintPolicy = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.lintPolicy(
                    request,
                    (err?: Error|null, result?: protos.google.iam.admin.v1.ILintPolicyResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.lintPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes lintPolicy with error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.LintPolicyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.lintPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.lintPolicy(request), expectedError);
            assert((client.innerApiCalls.lintPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('listServiceAccounts', () => {
        it('invokes listServiceAccounts without error', async () => {
            const client = new iamModule.v1.IAMClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.ListServiceAccountsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.iam.admin.v1.ServiceAccount()),
              generateSampleMessage(new protos.google.iam.admin.v1.ServiceAccount()),
              generateSampleMessage(new protos.google.iam.admin.v1.ServiceAccount()),
            ];
            client.innerApiCalls.listServiceAccounts = stubSimpleCall(expectedResponse);
            const [response] = await client.listServiceAccounts(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listServiceAccounts as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listServiceAccounts without error using callback', async () => {
            const client = new iamModule.v1.IAMClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.ListServiceAccountsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.iam.admin.v1.ServiceAccount()),
              generateSampleMessage(new protos.google.iam.admin.v1.ServiceAccount()),
              generateSampleMessage(new protos.google.iam.admin.v1.ServiceAccount()),
            ];
            client.innerApiCalls.listServiceAccounts = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listServiceAccounts(
                    request,
                    (err?: Error|null, result?: protos.google.iam.admin.v1.IServiceAccount[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listServiceAccounts as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listServiceAccounts with error', async () => {
            const client = new iamModule.v1.IAMClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.ListServiceAccountsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listServiceAccounts = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listServiceAccounts(request), expectedError);
            assert((client.innerApiCalls.listServiceAccounts as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listServiceAccountsStream without error', async () => {
            const client = new iamModule.v1.IAMClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.ListServiceAccountsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.iam.admin.v1.ServiceAccount()),
              generateSampleMessage(new protos.google.iam.admin.v1.ServiceAccount()),
              generateSampleMessage(new protos.google.iam.admin.v1.ServiceAccount()),
            ];
            client.descriptors.page.listServiceAccounts.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listServiceAccountsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.iam.admin.v1.ServiceAccount[] = [];
                stream.on('data', (response: protos.google.iam.admin.v1.ServiceAccount) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listServiceAccounts.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listServiceAccounts, request));
            assert.strictEqual(
                (client.descriptors.page.listServiceAccounts.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listServiceAccountsStream with error', async () => {
            const client = new iamModule.v1.IAMClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.ListServiceAccountsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedError = new Error('expected');
            client.descriptors.page.listServiceAccounts.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listServiceAccountsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.iam.admin.v1.ServiceAccount[] = [];
                stream.on('data', (response: protos.google.iam.admin.v1.ServiceAccount) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listServiceAccounts.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listServiceAccounts, request));
            assert.strictEqual(
                (client.descriptors.page.listServiceAccounts.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listServiceAccounts without error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.ListServiceAccountsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.iam.admin.v1.ServiceAccount()),
              generateSampleMessage(new protos.google.iam.admin.v1.ServiceAccount()),
              generateSampleMessage(new protos.google.iam.admin.v1.ServiceAccount()),
            ];
            client.descriptors.page.listServiceAccounts.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.iam.admin.v1.IServiceAccount[] = [];
            const iterable = client.listServiceAccountsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listServiceAccounts.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listServiceAccounts.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listServiceAccounts with error', async () => {
            const client = new iamModule.v1.IAMClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.ListServiceAccountsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";const expectedError = new Error('expected');
            client.descriptors.page.listServiceAccounts.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listServiceAccountsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.iam.admin.v1.IServiceAccount[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listServiceAccounts.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listServiceAccounts.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('queryGrantableRoles', () => {
        it('invokes queryGrantableRoles without error', async () => {
            const client = new iamModule.v1.IAMClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.QueryGrantableRolesRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = [
              generateSampleMessage(new protos.google.iam.admin.v1.Role()),
              generateSampleMessage(new protos.google.iam.admin.v1.Role()),
              generateSampleMessage(new protos.google.iam.admin.v1.Role()),
            ];
            client.innerApiCalls.queryGrantableRoles = stubSimpleCall(expectedResponse);
            const [response] = await client.queryGrantableRoles(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.queryGrantableRoles as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes queryGrantableRoles without error using callback', async () => {
            const client = new iamModule.v1.IAMClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.QueryGrantableRolesRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = [
              generateSampleMessage(new protos.google.iam.admin.v1.Role()),
              generateSampleMessage(new protos.google.iam.admin.v1.Role()),
              generateSampleMessage(new protos.google.iam.admin.v1.Role()),
            ];
            client.innerApiCalls.queryGrantableRoles = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.queryGrantableRoles(
                    request,
                    (err?: Error|null, result?: protos.google.iam.admin.v1.IRole[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.queryGrantableRoles as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes queryGrantableRoles with error', async () => {
            const client = new iamModule.v1.IAMClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.QueryGrantableRolesRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.queryGrantableRoles = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.queryGrantableRoles(request), expectedError);
            assert((client.innerApiCalls.queryGrantableRoles as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes queryGrantableRolesStream without error', async () => {
            const client = new iamModule.v1.IAMClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.QueryGrantableRolesRequest());
            const expectedResponse = [
              generateSampleMessage(new protos.google.iam.admin.v1.Role()),
              generateSampleMessage(new protos.google.iam.admin.v1.Role()),
              generateSampleMessage(new protos.google.iam.admin.v1.Role()),
            ];
            client.descriptors.page.queryGrantableRoles.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.queryGrantableRolesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.iam.admin.v1.Role[] = [];
                stream.on('data', (response: protos.google.iam.admin.v1.Role) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.queryGrantableRoles.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.queryGrantableRoles, request));
        });

        it('invokes queryGrantableRolesStream with error', async () => {
            const client = new iamModule.v1.IAMClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.QueryGrantableRolesRequest());
            const expectedError = new Error('expected');
            client.descriptors.page.queryGrantableRoles.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.queryGrantableRolesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.iam.admin.v1.Role[] = [];
                stream.on('data', (response: protos.google.iam.admin.v1.Role) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.queryGrantableRoles.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.queryGrantableRoles, request));
        });

        it('uses async iteration with queryGrantableRoles without error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.QueryGrantableRolesRequest());
            const expectedResponse = [
              generateSampleMessage(new protos.google.iam.admin.v1.Role()),
              generateSampleMessage(new protos.google.iam.admin.v1.Role()),
              generateSampleMessage(new protos.google.iam.admin.v1.Role()),
            ];
            client.descriptors.page.queryGrantableRoles.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.iam.admin.v1.IRole[] = [];
            const iterable = client.queryGrantableRolesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.queryGrantableRoles.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });

        it('uses async iteration with queryGrantableRoles with error', async () => {
            const client = new iamModule.v1.IAMClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.QueryGrantableRolesRequest());const expectedError = new Error('expected');
            client.descriptors.page.queryGrantableRoles.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.queryGrantableRolesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.iam.admin.v1.IRole[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.queryGrantableRoles.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
    });

    describe('listRoles', () => {
        it('invokes listRoles without error', async () => {
            const client = new iamModule.v1.IAMClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.ListRolesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.iam.admin.v1.Role()),
              generateSampleMessage(new protos.google.iam.admin.v1.Role()),
              generateSampleMessage(new protos.google.iam.admin.v1.Role()),
            ];
            client.innerApiCalls.listRoles = stubSimpleCall(expectedResponse);
            const [response] = await client.listRoles(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listRoles as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listRoles without error using callback', async () => {
            const client = new iamModule.v1.IAMClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.ListRolesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.iam.admin.v1.Role()),
              generateSampleMessage(new protos.google.iam.admin.v1.Role()),
              generateSampleMessage(new protos.google.iam.admin.v1.Role()),
            ];
            client.innerApiCalls.listRoles = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listRoles(
                    request,
                    (err?: Error|null, result?: protos.google.iam.admin.v1.IRole[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listRoles as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listRoles with error', async () => {
            const client = new iamModule.v1.IAMClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.ListRolesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listRoles = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listRoles(request), expectedError);
            assert((client.innerApiCalls.listRoles as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listRolesStream without error', async () => {
            const client = new iamModule.v1.IAMClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.ListRolesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.iam.admin.v1.Role()),
              generateSampleMessage(new protos.google.iam.admin.v1.Role()),
              generateSampleMessage(new protos.google.iam.admin.v1.Role()),
            ];
            client.descriptors.page.listRoles.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listRolesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.iam.admin.v1.Role[] = [];
                stream.on('data', (response: protos.google.iam.admin.v1.Role) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listRoles.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listRoles, request));
            assert.strictEqual(
                (client.descriptors.page.listRoles.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listRolesStream with error', async () => {
            const client = new iamModule.v1.IAMClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.ListRolesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listRoles.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listRolesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.iam.admin.v1.Role[] = [];
                stream.on('data', (response: protos.google.iam.admin.v1.Role) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listRoles.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listRoles, request));
            assert.strictEqual(
                (client.descriptors.page.listRoles.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listRoles without error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.ListRolesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.iam.admin.v1.Role()),
              generateSampleMessage(new protos.google.iam.admin.v1.Role()),
              generateSampleMessage(new protos.google.iam.admin.v1.Role()),
            ];
            client.descriptors.page.listRoles.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.iam.admin.v1.IRole[] = [];
            const iterable = client.listRolesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listRoles.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listRoles.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listRoles with error', async () => {
            const client = new iamModule.v1.IAMClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.ListRolesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listRoles.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listRolesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.iam.admin.v1.IRole[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listRoles.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listRoles.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('queryTestablePermissions', () => {
        it('invokes queryTestablePermissions without error', async () => {
            const client = new iamModule.v1.IAMClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.QueryTestablePermissionsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = [
              generateSampleMessage(new protos.google.iam.admin.v1.Permission()),
              generateSampleMessage(new protos.google.iam.admin.v1.Permission()),
              generateSampleMessage(new protos.google.iam.admin.v1.Permission()),
            ];
            client.innerApiCalls.queryTestablePermissions = stubSimpleCall(expectedResponse);
            const [response] = await client.queryTestablePermissions(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.queryTestablePermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes queryTestablePermissions without error using callback', async () => {
            const client = new iamModule.v1.IAMClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.QueryTestablePermissionsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = [
              generateSampleMessage(new protos.google.iam.admin.v1.Permission()),
              generateSampleMessage(new protos.google.iam.admin.v1.Permission()),
              generateSampleMessage(new protos.google.iam.admin.v1.Permission()),
            ];
            client.innerApiCalls.queryTestablePermissions = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.queryTestablePermissions(
                    request,
                    (err?: Error|null, result?: protos.google.iam.admin.v1.IPermission[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.queryTestablePermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes queryTestablePermissions with error', async () => {
            const client = new iamModule.v1.IAMClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.QueryTestablePermissionsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.queryTestablePermissions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.queryTestablePermissions(request), expectedError);
            assert((client.innerApiCalls.queryTestablePermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes queryTestablePermissionsStream without error', async () => {
            const client = new iamModule.v1.IAMClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.QueryTestablePermissionsRequest());
            const expectedResponse = [
              generateSampleMessage(new protos.google.iam.admin.v1.Permission()),
              generateSampleMessage(new protos.google.iam.admin.v1.Permission()),
              generateSampleMessage(new protos.google.iam.admin.v1.Permission()),
            ];
            client.descriptors.page.queryTestablePermissions.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.queryTestablePermissionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.iam.admin.v1.Permission[] = [];
                stream.on('data', (response: protos.google.iam.admin.v1.Permission) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.queryTestablePermissions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.queryTestablePermissions, request));
        });

        it('invokes queryTestablePermissionsStream with error', async () => {
            const client = new iamModule.v1.IAMClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.QueryTestablePermissionsRequest());
            const expectedError = new Error('expected');
            client.descriptors.page.queryTestablePermissions.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.queryTestablePermissionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.iam.admin.v1.Permission[] = [];
                stream.on('data', (response: protos.google.iam.admin.v1.Permission) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.queryTestablePermissions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.queryTestablePermissions, request));
        });

        it('uses async iteration with queryTestablePermissions without error', async () => {
            const client = new iamModule.v1.IAMClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.QueryTestablePermissionsRequest());
            const expectedResponse = [
              generateSampleMessage(new protos.google.iam.admin.v1.Permission()),
              generateSampleMessage(new protos.google.iam.admin.v1.Permission()),
              generateSampleMessage(new protos.google.iam.admin.v1.Permission()),
            ];
            client.descriptors.page.queryTestablePermissions.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.iam.admin.v1.IPermission[] = [];
            const iterable = client.queryTestablePermissionsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.queryTestablePermissions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });

        it('uses async iteration with queryTestablePermissions with error', async () => {
            const client = new iamModule.v1.IAMClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.admin.v1.QueryTestablePermissionsRequest());const expectedError = new Error('expected');
            client.descriptors.page.queryTestablePermissions.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.queryTestablePermissionsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.iam.admin.v1.IPermission[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.queryTestablePermissions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
    });

    describe('Path templates', () => {

        describe('key', () => {
            const fakePath = "/rendered/path/key";
            const expectedParameters = {
                project: "projectValue",
                service_account: "serviceAccountValue",
                key: "keyValue",
            };
            const client = new iamModule.v1.IAMClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.keyPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.keyPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('keyPath', () => {
                const result = client.keyPath("projectValue", "serviceAccountValue", "keyValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.keyPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromKeyName', () => {
                const result = client.matchProjectFromKeyName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.keyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchServiceAccountFromKeyName', () => {
                const result = client.matchServiceAccountFromKeyName(fakePath);
                assert.strictEqual(result, "serviceAccountValue");
                assert((client.pathTemplates.keyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchKeyFromKeyName', () => {
                const result = client.matchKeyFromKeyName(fakePath);
                assert.strictEqual(result, "keyValue");
                assert((client.pathTemplates.keyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('project', () => {
            const fakePath = "/rendered/path/project";
            const expectedParameters = {
                project: "projectValue",
            };
            const client = new iamModule.v1.IAMClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectPath', () => {
                const result = client.projectPath("projectValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectName', () => {
                const result = client.matchProjectFromProjectName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('serviceAccount', () => {
            const fakePath = "/rendered/path/serviceAccount";
            const expectedParameters = {
                project: "projectValue",
                service_account: "serviceAccountValue",
            };
            const client = new iamModule.v1.IAMClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.serviceAccountPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.serviceAccountPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('serviceAccountPath', () => {
                const result = client.serviceAccountPath("projectValue", "serviceAccountValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.serviceAccountPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromServiceAccountName', () => {
                const result = client.matchProjectFromServiceAccountName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.serviceAccountPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchServiceAccountFromServiceAccountName', () => {
                const result = client.matchServiceAccountFromServiceAccountName(fakePath);
                assert.strictEqual(result, "serviceAccountValue");
                assert((client.pathTemplates.serviceAccountPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
