# frozen_string_literal: true

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "helper"

require "gapic/grpc/service_stub"

require "google/iam/admin/v1/iam_pb"
require "google/iam/admin/v1/iam_services_pb"
require "google/iam/admin/v1/iam"

class ::Google::Iam::Admin::V1::IAM::ClientTest < Minitest::Test
  class ClientStub
    attr_accessor :call_rpc_count, :requests

    def initialize response, operation, &block
      @response = response
      @operation = operation
      @block = block
      @call_rpc_count = 0
      @requests = []
    end

    def call_rpc *args, **kwargs
      @call_rpc_count += 1

      @requests << @block&.call(*args, **kwargs)

      yield @response, @operation if block_given?

      @response
    end
  end

  def test_list_service_accounts
    # Create GRPC objects.
    grpc_response = ::Google::Iam::Admin::V1::ListServiceAccountsResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    page_size = 42
    page_token = "hello world"

    list_service_accounts_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :list_service_accounts, name
      assert_kind_of ::Google::Iam::Admin::V1::ListServiceAccountsRequest, request
      assert_equal "hello world", request["name"]
      assert_equal 42, request["page_size"]
      assert_equal "hello world", request["page_token"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, list_service_accounts_client_stub do
      # Create client
      client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.list_service_accounts({ name: name, page_size: page_size, page_token: page_token }) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.list_service_accounts name: name, page_size: page_size, page_token: page_token do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.list_service_accounts ::Google::Iam::Admin::V1::ListServiceAccountsRequest.new(name: name, page_size: page_size, page_token: page_token) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.list_service_accounts({ name: name, page_size: page_size, page_token: page_token }, grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.list_service_accounts(::Google::Iam::Admin::V1::ListServiceAccountsRequest.new(name: name, page_size: page_size, page_token: page_token), grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, list_service_accounts_client_stub.call_rpc_count
    end
  end

  def test_get_service_account
    # Create GRPC objects.
    grpc_response = ::Google::Iam::Admin::V1::ServiceAccount.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"

    get_service_account_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :get_service_account, name
      assert_kind_of ::Google::Iam::Admin::V1::GetServiceAccountRequest, request
      assert_equal "hello world", request["name"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, get_service_account_client_stub do
      # Create client
      client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.get_service_account({ name: name }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.get_service_account name: name do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.get_service_account ::Google::Iam::Admin::V1::GetServiceAccountRequest.new(name: name) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.get_service_account({ name: name }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.get_service_account(::Google::Iam::Admin::V1::GetServiceAccountRequest.new(name: name), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, get_service_account_client_stub.call_rpc_count
    end
  end

  def test_create_service_account
    # Create GRPC objects.
    grpc_response = ::Google::Iam::Admin::V1::ServiceAccount.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    account_id = "hello world"
    service_account = {}

    create_service_account_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :create_service_account, name
      assert_kind_of ::Google::Iam::Admin::V1::CreateServiceAccountRequest, request
      assert_equal "hello world", request["name"]
      assert_equal "hello world", request["account_id"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Iam::Admin::V1::ServiceAccount), request["service_account"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, create_service_account_client_stub do
      # Create client
      client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.create_service_account({ name: name, account_id: account_id, service_account: service_account }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.create_service_account name: name, account_id: account_id, service_account: service_account do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.create_service_account ::Google::Iam::Admin::V1::CreateServiceAccountRequest.new(name: name, account_id: account_id, service_account: service_account) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.create_service_account({ name: name, account_id: account_id, service_account: service_account }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.create_service_account(::Google::Iam::Admin::V1::CreateServiceAccountRequest.new(name: name, account_id: account_id, service_account: service_account), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, create_service_account_client_stub.call_rpc_count
    end
  end

  def test_update_service_account
    # Create GRPC objects.
    grpc_response = ::Google::Iam::Admin::V1::ServiceAccount.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    project_id = "hello world"
    unique_id = "hello world"
    email = "hello world"
    display_name = "hello world"
    etag = "hello world"
    description = "hello world"
    oauth2_client_id = "hello world"
    disabled = true

    update_service_account_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :update_service_account, name
      assert_kind_of ::Google::Iam::Admin::V1::ServiceAccount, request
      assert_equal "hello world", request["name"]
      assert_equal "hello world", request["project_id"]
      assert_equal "hello world", request["unique_id"]
      assert_equal "hello world", request["email"]
      assert_equal "hello world", request["display_name"]
      assert_equal "hello world", request["etag"]
      assert_equal "hello world", request["description"]
      assert_equal "hello world", request["oauth2_client_id"]
      assert_equal true, request["disabled"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, update_service_account_client_stub do
      # Create client
      client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.update_service_account({ name: name, project_id: project_id, unique_id: unique_id, email: email, display_name: display_name, etag: etag, description: description, oauth2_client_id: oauth2_client_id, disabled: disabled }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.update_service_account name: name, project_id: project_id, unique_id: unique_id, email: email, display_name: display_name, etag: etag, description: description, oauth2_client_id: oauth2_client_id, disabled: disabled do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.update_service_account ::Google::Iam::Admin::V1::ServiceAccount.new(name: name, project_id: project_id, unique_id: unique_id, email: email, display_name: display_name, etag: etag, description: description, oauth2_client_id: oauth2_client_id, disabled: disabled) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.update_service_account({ name: name, project_id: project_id, unique_id: unique_id, email: email, display_name: display_name, etag: etag, description: description, oauth2_client_id: oauth2_client_id, disabled: disabled }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.update_service_account(::Google::Iam::Admin::V1::ServiceAccount.new(name: name, project_id: project_id, unique_id: unique_id, email: email, display_name: display_name, etag: etag, description: description, oauth2_client_id: oauth2_client_id, disabled: disabled), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, update_service_account_client_stub.call_rpc_count
    end
  end

  def test_patch_service_account
    # Create GRPC objects.
    grpc_response = ::Google::Iam::Admin::V1::ServiceAccount.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    service_account = {}
    update_mask = {}

    patch_service_account_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :patch_service_account, name
      assert_kind_of ::Google::Iam::Admin::V1::PatchServiceAccountRequest, request
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Iam::Admin::V1::ServiceAccount), request["service_account"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::FieldMask), request["update_mask"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, patch_service_account_client_stub do
      # Create client
      client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.patch_service_account({ service_account: service_account, update_mask: update_mask }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.patch_service_account service_account: service_account, update_mask: update_mask do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.patch_service_account ::Google::Iam::Admin::V1::PatchServiceAccountRequest.new(service_account: service_account, update_mask: update_mask) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.patch_service_account({ service_account: service_account, update_mask: update_mask }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.patch_service_account(::Google::Iam::Admin::V1::PatchServiceAccountRequest.new(service_account: service_account, update_mask: update_mask), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, patch_service_account_client_stub.call_rpc_count
    end
  end

  def test_delete_service_account
    # Create GRPC objects.
    grpc_response = ::Google::Protobuf::Empty.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"

    delete_service_account_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :delete_service_account, name
      assert_kind_of ::Google::Iam::Admin::V1::DeleteServiceAccountRequest, request
      assert_equal "hello world", request["name"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, delete_service_account_client_stub do
      # Create client
      client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.delete_service_account({ name: name }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.delete_service_account name: name do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.delete_service_account ::Google::Iam::Admin::V1::DeleteServiceAccountRequest.new(name: name) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.delete_service_account({ name: name }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.delete_service_account(::Google::Iam::Admin::V1::DeleteServiceAccountRequest.new(name: name), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, delete_service_account_client_stub.call_rpc_count
    end
  end

  def test_undelete_service_account
    # Create GRPC objects.
    grpc_response = ::Google::Iam::Admin::V1::UndeleteServiceAccountResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"

    undelete_service_account_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :undelete_service_account, name
      assert_kind_of ::Google::Iam::Admin::V1::UndeleteServiceAccountRequest, request
      assert_equal "hello world", request["name"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, undelete_service_account_client_stub do
      # Create client
      client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.undelete_service_account({ name: name }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.undelete_service_account name: name do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.undelete_service_account ::Google::Iam::Admin::V1::UndeleteServiceAccountRequest.new(name: name) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.undelete_service_account({ name: name }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.undelete_service_account(::Google::Iam::Admin::V1::UndeleteServiceAccountRequest.new(name: name), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, undelete_service_account_client_stub.call_rpc_count
    end
  end

  def test_enable_service_account
    # Create GRPC objects.
    grpc_response = ::Google::Protobuf::Empty.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"

    enable_service_account_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :enable_service_account, name
      assert_kind_of ::Google::Iam::Admin::V1::EnableServiceAccountRequest, request
      assert_equal "hello world", request["name"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, enable_service_account_client_stub do
      # Create client
      client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.enable_service_account({ name: name }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.enable_service_account name: name do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.enable_service_account ::Google::Iam::Admin::V1::EnableServiceAccountRequest.new(name: name) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.enable_service_account({ name: name }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.enable_service_account(::Google::Iam::Admin::V1::EnableServiceAccountRequest.new(name: name), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, enable_service_account_client_stub.call_rpc_count
    end
  end

  def test_disable_service_account
    # Create GRPC objects.
    grpc_response = ::Google::Protobuf::Empty.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"

    disable_service_account_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :disable_service_account, name
      assert_kind_of ::Google::Iam::Admin::V1::DisableServiceAccountRequest, request
      assert_equal "hello world", request["name"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, disable_service_account_client_stub do
      # Create client
      client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.disable_service_account({ name: name }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.disable_service_account name: name do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.disable_service_account ::Google::Iam::Admin::V1::DisableServiceAccountRequest.new(name: name) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.disable_service_account({ name: name }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.disable_service_account(::Google::Iam::Admin::V1::DisableServiceAccountRequest.new(name: name), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, disable_service_account_client_stub.call_rpc_count
    end
  end

  def test_list_service_account_keys
    # Create GRPC objects.
    grpc_response = ::Google::Iam::Admin::V1::ListServiceAccountKeysResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    key_types = [:KEY_TYPE_UNSPECIFIED]

    list_service_account_keys_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :list_service_account_keys, name
      assert_kind_of ::Google::Iam::Admin::V1::ListServiceAccountKeysRequest, request
      assert_equal "hello world", request["name"]
      assert_equal [:KEY_TYPE_UNSPECIFIED], request["key_types"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, list_service_account_keys_client_stub do
      # Create client
      client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.list_service_account_keys({ name: name, key_types: key_types }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.list_service_account_keys name: name, key_types: key_types do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.list_service_account_keys ::Google::Iam::Admin::V1::ListServiceAccountKeysRequest.new(name: name, key_types: key_types) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.list_service_account_keys({ name: name, key_types: key_types }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.list_service_account_keys(::Google::Iam::Admin::V1::ListServiceAccountKeysRequest.new(name: name, key_types: key_types), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, list_service_account_keys_client_stub.call_rpc_count
    end
  end

  def test_get_service_account_key
    # Create GRPC objects.
    grpc_response = ::Google::Iam::Admin::V1::ServiceAccountKey.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    public_key_type = :TYPE_NONE

    get_service_account_key_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :get_service_account_key, name
      assert_kind_of ::Google::Iam::Admin::V1::GetServiceAccountKeyRequest, request
      assert_equal "hello world", request["name"]
      assert_equal :TYPE_NONE, request["public_key_type"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, get_service_account_key_client_stub do
      # Create client
      client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.get_service_account_key({ name: name, public_key_type: public_key_type }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.get_service_account_key name: name, public_key_type: public_key_type do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.get_service_account_key ::Google::Iam::Admin::V1::GetServiceAccountKeyRequest.new(name: name, public_key_type: public_key_type) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.get_service_account_key({ name: name, public_key_type: public_key_type }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.get_service_account_key(::Google::Iam::Admin::V1::GetServiceAccountKeyRequest.new(name: name, public_key_type: public_key_type), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, get_service_account_key_client_stub.call_rpc_count
    end
  end

  def test_create_service_account_key
    # Create GRPC objects.
    grpc_response = ::Google::Iam::Admin::V1::ServiceAccountKey.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    private_key_type = :TYPE_UNSPECIFIED
    key_algorithm = :KEY_ALG_UNSPECIFIED

    create_service_account_key_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :create_service_account_key, name
      assert_kind_of ::Google::Iam::Admin::V1::CreateServiceAccountKeyRequest, request
      assert_equal "hello world", request["name"]
      assert_equal :TYPE_UNSPECIFIED, request["private_key_type"]
      assert_equal :KEY_ALG_UNSPECIFIED, request["key_algorithm"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, create_service_account_key_client_stub do
      # Create client
      client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.create_service_account_key({ name: name, private_key_type: private_key_type, key_algorithm: key_algorithm }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.create_service_account_key name: name, private_key_type: private_key_type, key_algorithm: key_algorithm do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.create_service_account_key ::Google::Iam::Admin::V1::CreateServiceAccountKeyRequest.new(name: name, private_key_type: private_key_type, key_algorithm: key_algorithm) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.create_service_account_key({ name: name, private_key_type: private_key_type, key_algorithm: key_algorithm }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.create_service_account_key(::Google::Iam::Admin::V1::CreateServiceAccountKeyRequest.new(name: name, private_key_type: private_key_type, key_algorithm: key_algorithm), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, create_service_account_key_client_stub.call_rpc_count
    end
  end

  def test_upload_service_account_key
    # Create GRPC objects.
    grpc_response = ::Google::Iam::Admin::V1::ServiceAccountKey.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    public_key_data = "hello world"

    upload_service_account_key_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :upload_service_account_key, name
      assert_kind_of ::Google::Iam::Admin::V1::UploadServiceAccountKeyRequest, request
      assert_equal "hello world", request["name"]
      assert_equal "hello world", request["public_key_data"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, upload_service_account_key_client_stub do
      # Create client
      client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.upload_service_account_key({ name: name, public_key_data: public_key_data }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.upload_service_account_key name: name, public_key_data: public_key_data do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.upload_service_account_key ::Google::Iam::Admin::V1::UploadServiceAccountKeyRequest.new(name: name, public_key_data: public_key_data) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.upload_service_account_key({ name: name, public_key_data: public_key_data }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.upload_service_account_key(::Google::Iam::Admin::V1::UploadServiceAccountKeyRequest.new(name: name, public_key_data: public_key_data), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, upload_service_account_key_client_stub.call_rpc_count
    end
  end

  def test_delete_service_account_key
    # Create GRPC objects.
    grpc_response = ::Google::Protobuf::Empty.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"

    delete_service_account_key_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :delete_service_account_key, name
      assert_kind_of ::Google::Iam::Admin::V1::DeleteServiceAccountKeyRequest, request
      assert_equal "hello world", request["name"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, delete_service_account_key_client_stub do
      # Create client
      client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.delete_service_account_key({ name: name }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.delete_service_account_key name: name do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.delete_service_account_key ::Google::Iam::Admin::V1::DeleteServiceAccountKeyRequest.new(name: name) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.delete_service_account_key({ name: name }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.delete_service_account_key(::Google::Iam::Admin::V1::DeleteServiceAccountKeyRequest.new(name: name), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, delete_service_account_key_client_stub.call_rpc_count
    end
  end

  def test_sign_blob
    # Create GRPC objects.
    grpc_response = ::Google::Iam::Admin::V1::SignBlobResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    bytes_to_sign = "hello world"

    sign_blob_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :sign_blob, name
      assert_kind_of ::Google::Iam::Admin::V1::SignBlobRequest, request
      assert_equal "hello world", request["name"]
      assert_equal "hello world", request["bytes_to_sign"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, sign_blob_client_stub do
      # Create client
      client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.sign_blob({ name: name, bytes_to_sign: bytes_to_sign }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.sign_blob name: name, bytes_to_sign: bytes_to_sign do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.sign_blob ::Google::Iam::Admin::V1::SignBlobRequest.new(name: name, bytes_to_sign: bytes_to_sign) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.sign_blob({ name: name, bytes_to_sign: bytes_to_sign }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.sign_blob(::Google::Iam::Admin::V1::SignBlobRequest.new(name: name, bytes_to_sign: bytes_to_sign), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, sign_blob_client_stub.call_rpc_count
    end
  end

  def test_sign_jwt
    # Create GRPC objects.
    grpc_response = ::Google::Iam::Admin::V1::SignJwtResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    payload = "hello world"

    sign_jwt_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :sign_jwt, name
      assert_kind_of ::Google::Iam::Admin::V1::SignJwtRequest, request
      assert_equal "hello world", request["name"]
      assert_equal "hello world", request["payload"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, sign_jwt_client_stub do
      # Create client
      client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.sign_jwt({ name: name, payload: payload }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.sign_jwt name: name, payload: payload do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.sign_jwt ::Google::Iam::Admin::V1::SignJwtRequest.new(name: name, payload: payload) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.sign_jwt({ name: name, payload: payload }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.sign_jwt(::Google::Iam::Admin::V1::SignJwtRequest.new(name: name, payload: payload), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, sign_jwt_client_stub.call_rpc_count
    end
  end

  def test_get_iam_policy
    # Create GRPC objects.
    grpc_response = ::Google::Iam::V1::Policy.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    resource = "hello world"
    options = {}

    get_iam_policy_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :get_iam_policy, name
      assert_kind_of ::Google::Iam::V1::GetIamPolicyRequest, request
      assert_equal "hello world", request["resource"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Iam::V1::GetPolicyOptions), request["options"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, get_iam_policy_client_stub do
      # Create client
      client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.get_iam_policy({ resource: resource, options: options }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.get_iam_policy resource: resource, options: options do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.get_iam_policy ::Google::Iam::V1::GetIamPolicyRequest.new(resource: resource, options: options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.get_iam_policy({ resource: resource, options: options }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.get_iam_policy(::Google::Iam::V1::GetIamPolicyRequest.new(resource: resource, options: options), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, get_iam_policy_client_stub.call_rpc_count
    end
  end

  def test_set_iam_policy
    # Create GRPC objects.
    grpc_response = ::Google::Iam::V1::Policy.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    resource = "hello world"
    policy = {}

    set_iam_policy_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :set_iam_policy, name
      assert_kind_of ::Google::Iam::V1::SetIamPolicyRequest, request
      assert_equal "hello world", request["resource"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Iam::V1::Policy), request["policy"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, set_iam_policy_client_stub do
      # Create client
      client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.set_iam_policy({ resource: resource, policy: policy }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.set_iam_policy resource: resource, policy: policy do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.set_iam_policy ::Google::Iam::V1::SetIamPolicyRequest.new(resource: resource, policy: policy) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.set_iam_policy({ resource: resource, policy: policy }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.set_iam_policy(::Google::Iam::V1::SetIamPolicyRequest.new(resource: resource, policy: policy), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, set_iam_policy_client_stub.call_rpc_count
    end
  end

  def test_test_iam_permissions
    # Create GRPC objects.
    grpc_response = ::Google::Iam::V1::TestIamPermissionsResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    resource = "hello world"
    permissions = ["hello world"]

    test_iam_permissions_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :test_iam_permissions, name
      assert_kind_of ::Google::Iam::V1::TestIamPermissionsRequest, request
      assert_equal "hello world", request["resource"]
      assert_equal ["hello world"], request["permissions"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, test_iam_permissions_client_stub do
      # Create client
      client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.test_iam_permissions({ resource: resource, permissions: permissions }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.test_iam_permissions resource: resource, permissions: permissions do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.test_iam_permissions ::Google::Iam::V1::TestIamPermissionsRequest.new(resource: resource, permissions: permissions) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.test_iam_permissions({ resource: resource, permissions: permissions }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.test_iam_permissions(::Google::Iam::V1::TestIamPermissionsRequest.new(resource: resource, permissions: permissions), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, test_iam_permissions_client_stub.call_rpc_count
    end
  end

  def test_query_grantable_roles
    # Create GRPC objects.
    grpc_response = ::Google::Iam::Admin::V1::QueryGrantableRolesResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    full_resource_name = "hello world"
    view = :BASIC
    page_size = 42
    page_token = "hello world"

    query_grantable_roles_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :query_grantable_roles, name
      assert_kind_of ::Google::Iam::Admin::V1::QueryGrantableRolesRequest, request
      assert_equal "hello world", request["full_resource_name"]
      assert_equal :BASIC, request["view"]
      assert_equal 42, request["page_size"]
      assert_equal "hello world", request["page_token"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, query_grantable_roles_client_stub do
      # Create client
      client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.query_grantable_roles({ full_resource_name: full_resource_name, view: view, page_size: page_size, page_token: page_token }) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.query_grantable_roles full_resource_name: full_resource_name, view: view, page_size: page_size, page_token: page_token do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.query_grantable_roles ::Google::Iam::Admin::V1::QueryGrantableRolesRequest.new(full_resource_name: full_resource_name, view: view, page_size: page_size, page_token: page_token) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.query_grantable_roles({ full_resource_name: full_resource_name, view: view, page_size: page_size, page_token: page_token }, grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.query_grantable_roles(::Google::Iam::Admin::V1::QueryGrantableRolesRequest.new(full_resource_name: full_resource_name, view: view, page_size: page_size, page_token: page_token), grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, query_grantable_roles_client_stub.call_rpc_count
    end
  end

  def test_list_roles
    # Create GRPC objects.
    grpc_response = ::Google::Iam::Admin::V1::ListRolesResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    parent = "hello world"
    page_size = 42
    page_token = "hello world"
    view = :BASIC
    show_deleted = true

    list_roles_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :list_roles, name
      assert_kind_of ::Google::Iam::Admin::V1::ListRolesRequest, request
      assert_equal "hello world", request["parent"]
      assert_equal 42, request["page_size"]
      assert_equal "hello world", request["page_token"]
      assert_equal :BASIC, request["view"]
      assert_equal true, request["show_deleted"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, list_roles_client_stub do
      # Create client
      client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.list_roles({ parent: parent, page_size: page_size, page_token: page_token, view: view, show_deleted: show_deleted }) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.list_roles parent: parent, page_size: page_size, page_token: page_token, view: view, show_deleted: show_deleted do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.list_roles ::Google::Iam::Admin::V1::ListRolesRequest.new(parent: parent, page_size: page_size, page_token: page_token, view: view, show_deleted: show_deleted) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.list_roles({ parent: parent, page_size: page_size, page_token: page_token, view: view, show_deleted: show_deleted }, grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.list_roles(::Google::Iam::Admin::V1::ListRolesRequest.new(parent: parent, page_size: page_size, page_token: page_token, view: view, show_deleted: show_deleted), grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, list_roles_client_stub.call_rpc_count
    end
  end

  def test_get_role
    # Create GRPC objects.
    grpc_response = ::Google::Iam::Admin::V1::Role.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"

    get_role_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :get_role, name
      assert_kind_of ::Google::Iam::Admin::V1::GetRoleRequest, request
      assert_equal "hello world", request["name"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, get_role_client_stub do
      # Create client
      client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.get_role({ name: name }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.get_role name: name do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.get_role ::Google::Iam::Admin::V1::GetRoleRequest.new(name: name) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.get_role({ name: name }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.get_role(::Google::Iam::Admin::V1::GetRoleRequest.new(name: name), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, get_role_client_stub.call_rpc_count
    end
  end

  def test_create_role
    # Create GRPC objects.
    grpc_response = ::Google::Iam::Admin::V1::Role.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    parent = "hello world"
    role_id = "hello world"
    role = {}

    create_role_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :create_role, name
      assert_kind_of ::Google::Iam::Admin::V1::CreateRoleRequest, request
      assert_equal "hello world", request["parent"]
      assert_equal "hello world", request["role_id"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Iam::Admin::V1::Role), request["role"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, create_role_client_stub do
      # Create client
      client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.create_role({ parent: parent, role_id: role_id, role: role }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.create_role parent: parent, role_id: role_id, role: role do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.create_role ::Google::Iam::Admin::V1::CreateRoleRequest.new(parent: parent, role_id: role_id, role: role) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.create_role({ parent: parent, role_id: role_id, role: role }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.create_role(::Google::Iam::Admin::V1::CreateRoleRequest.new(parent: parent, role_id: role_id, role: role), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, create_role_client_stub.call_rpc_count
    end
  end

  def test_update_role
    # Create GRPC objects.
    grpc_response = ::Google::Iam::Admin::V1::Role.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    role = {}
    update_mask = {}

    update_role_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :update_role, name
      assert_kind_of ::Google::Iam::Admin::V1::UpdateRoleRequest, request
      assert_equal "hello world", request["name"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Iam::Admin::V1::Role), request["role"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::FieldMask), request["update_mask"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, update_role_client_stub do
      # Create client
      client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.update_role({ name: name, role: role, update_mask: update_mask }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.update_role name: name, role: role, update_mask: update_mask do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.update_role ::Google::Iam::Admin::V1::UpdateRoleRequest.new(name: name, role: role, update_mask: update_mask) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.update_role({ name: name, role: role, update_mask: update_mask }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.update_role(::Google::Iam::Admin::V1::UpdateRoleRequest.new(name: name, role: role, update_mask: update_mask), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, update_role_client_stub.call_rpc_count
    end
  end

  def test_delete_role
    # Create GRPC objects.
    grpc_response = ::Google::Iam::Admin::V1::Role.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    etag = "hello world"

    delete_role_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :delete_role, name
      assert_kind_of ::Google::Iam::Admin::V1::DeleteRoleRequest, request
      assert_equal "hello world", request["name"]
      assert_equal "hello world", request["etag"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, delete_role_client_stub do
      # Create client
      client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.delete_role({ name: name, etag: etag }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.delete_role name: name, etag: etag do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.delete_role ::Google::Iam::Admin::V1::DeleteRoleRequest.new(name: name, etag: etag) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.delete_role({ name: name, etag: etag }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.delete_role(::Google::Iam::Admin::V1::DeleteRoleRequest.new(name: name, etag: etag), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, delete_role_client_stub.call_rpc_count
    end
  end

  def test_undelete_role
    # Create GRPC objects.
    grpc_response = ::Google::Iam::Admin::V1::Role.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    etag = "hello world"

    undelete_role_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :undelete_role, name
      assert_kind_of ::Google::Iam::Admin::V1::UndeleteRoleRequest, request
      assert_equal "hello world", request["name"]
      assert_equal "hello world", request["etag"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, undelete_role_client_stub do
      # Create client
      client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.undelete_role({ name: name, etag: etag }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.undelete_role name: name, etag: etag do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.undelete_role ::Google::Iam::Admin::V1::UndeleteRoleRequest.new(name: name, etag: etag) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.undelete_role({ name: name, etag: etag }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.undelete_role(::Google::Iam::Admin::V1::UndeleteRoleRequest.new(name: name, etag: etag), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, undelete_role_client_stub.call_rpc_count
    end
  end

  def test_query_testable_permissions
    # Create GRPC objects.
    grpc_response = ::Google::Iam::Admin::V1::QueryTestablePermissionsResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    full_resource_name = "hello world"
    page_size = 42
    page_token = "hello world"

    query_testable_permissions_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :query_testable_permissions, name
      assert_kind_of ::Google::Iam::Admin::V1::QueryTestablePermissionsRequest, request
      assert_equal "hello world", request["full_resource_name"]
      assert_equal 42, request["page_size"]
      assert_equal "hello world", request["page_token"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, query_testable_permissions_client_stub do
      # Create client
      client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.query_testable_permissions({ full_resource_name: full_resource_name, page_size: page_size, page_token: page_token }) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.query_testable_permissions full_resource_name: full_resource_name, page_size: page_size, page_token: page_token do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.query_testable_permissions ::Google::Iam::Admin::V1::QueryTestablePermissionsRequest.new(full_resource_name: full_resource_name, page_size: page_size, page_token: page_token) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.query_testable_permissions({ full_resource_name: full_resource_name, page_size: page_size, page_token: page_token }, grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.query_testable_permissions(::Google::Iam::Admin::V1::QueryTestablePermissionsRequest.new(full_resource_name: full_resource_name, page_size: page_size, page_token: page_token), grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, query_testable_permissions_client_stub.call_rpc_count
    end
  end

  def test_query_auditable_services
    # Create GRPC objects.
    grpc_response = ::Google::Iam::Admin::V1::QueryAuditableServicesResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    full_resource_name = "hello world"

    query_auditable_services_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :query_auditable_services, name
      assert_kind_of ::Google::Iam::Admin::V1::QueryAuditableServicesRequest, request
      assert_equal "hello world", request["full_resource_name"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, query_auditable_services_client_stub do
      # Create client
      client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.query_auditable_services({ full_resource_name: full_resource_name }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.query_auditable_services full_resource_name: full_resource_name do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.query_auditable_services ::Google::Iam::Admin::V1::QueryAuditableServicesRequest.new(full_resource_name: full_resource_name) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.query_auditable_services({ full_resource_name: full_resource_name }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.query_auditable_services(::Google::Iam::Admin::V1::QueryAuditableServicesRequest.new(full_resource_name: full_resource_name), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, query_auditable_services_client_stub.call_rpc_count
    end
  end

  def test_lint_policy
    # Create GRPC objects.
    grpc_response = ::Google::Iam::Admin::V1::LintPolicyResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    full_resource_name = "hello world"
    condition = {}

    lint_policy_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :lint_policy, name
      assert_kind_of ::Google::Iam::Admin::V1::LintPolicyRequest, request
      assert_equal "hello world", request["full_resource_name"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Type::Expr), request["condition"]
      assert_equal :condition, request.lint_object
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, lint_policy_client_stub do
      # Create client
      client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.lint_policy({ full_resource_name: full_resource_name, condition: condition }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.lint_policy full_resource_name: full_resource_name, condition: condition do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.lint_policy ::Google::Iam::Admin::V1::LintPolicyRequest.new(full_resource_name: full_resource_name, condition: condition) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.lint_policy({ full_resource_name: full_resource_name, condition: condition }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.lint_policy(::Google::Iam::Admin::V1::LintPolicyRequest.new(full_resource_name: full_resource_name, condition: condition), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, lint_policy_client_stub.call_rpc_count
    end
  end

  def test_configure
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure

    client = block_config = config = nil
    Gapic::ServiceStub.stub :new, nil do
      client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
        config.credentials = grpc_channel
      end
    end

    config = client.configure do |c|
      block_config = c
    end

    assert_same block_config, config
    assert_kind_of ::Google::Iam::Admin::V1::IAM::Client::Configuration, config
  end
end
