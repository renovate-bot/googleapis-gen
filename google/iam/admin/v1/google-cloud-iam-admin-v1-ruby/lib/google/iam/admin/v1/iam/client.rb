# frozen_string_literal: true

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/cloud/errors"
require "google/iam/admin/v1/iam_pb"

module Google
  module Iam
    module Admin
      module V1
        module IAM
          ##
          # Client for the IAM service.
          #
          # Creates and manages Identity and Access Management (IAM) resources.
          #
          # You can use this service to work with all of the following resources:
          #
          # * **Service accounts**, which identify an application or a virtual machine
          #   (VM) instance rather than a person
          # * **Service account keys**, which service accounts use to authenticate with
          #   Google APIs
          # * **IAM policies for service accounts**, which specify the roles that a
          #   member has for the service account
          # * **IAM custom roles**, which help you limit the number of permissions that
          #   you grant to members
          #
          # In addition, you can use this service to complete the following tasks, among
          # others:
          #
          # * Test whether a service account can use specific permissions
          # * Check which roles you can grant for a specific resource
          # * Lint, or validate, condition expressions in an IAM policy
          #
          class Client
            include Paths

            # @private
            attr_reader :iam_stub

            ##
            # Configure the IAM Client class.
            #
            # See {::Google::Iam::Admin::V1::IAM::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @example
            #
            #   # Modify the configuration for all IAM clients
            #   ::Google::Iam::Admin::V1::IAM::Client.configure do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def self.configure
              @configure ||= begin
                namespace = ["Google", "Iam", "Admin", "V1"]
                parent_config = while namespace.any?
                                  parent_name = namespace.join "::"
                                  parent_const = const_get parent_name
                                  break parent_const.configure if parent_const.respond_to? :configure
                                  namespace.pop
                                end
                default_config = Client::Configuration.new parent_config

                default_config.rpcs.list_service_accounts.timeout = 60.0
                default_config.rpcs.list_service_accounts.retry_policy = {
                  initial_delay: 0.1, max_delay: 60.0, multiplier: 1.3, retry_codes: [14, 4]
                }

                default_config.rpcs.get_service_account.timeout = 60.0
                default_config.rpcs.get_service_account.retry_policy = {
                  initial_delay: 0.1, max_delay: 60.0, multiplier: 1.3, retry_codes: [14, 4]
                }

                default_config.rpcs.create_service_account.timeout = 60.0

                default_config.rpcs.update_service_account.timeout = 60.0
                default_config.rpcs.update_service_account.retry_policy = {
                  initial_delay: 0.1, max_delay: 60.0, multiplier: 1.3, retry_codes: [14, 4]
                }

                default_config.rpcs.delete_service_account.timeout = 60.0
                default_config.rpcs.delete_service_account.retry_policy = {
                  initial_delay: 0.1, max_delay: 60.0, multiplier: 1.3, retry_codes: [14, 4]
                }

                default_config.rpcs.list_service_account_keys.timeout = 60.0
                default_config.rpcs.list_service_account_keys.retry_policy = {
                  initial_delay: 0.1, max_delay: 60.0, multiplier: 1.3, retry_codes: [14, 4]
                }

                default_config.rpcs.get_service_account_key.timeout = 60.0
                default_config.rpcs.get_service_account_key.retry_policy = {
                  initial_delay: 0.1, max_delay: 60.0, multiplier: 1.3, retry_codes: [14, 4]
                }

                default_config.rpcs.create_service_account_key.timeout = 60.0

                default_config.rpcs.delete_service_account_key.timeout = 60.0
                default_config.rpcs.delete_service_account_key.retry_policy = {
                  initial_delay: 0.1, max_delay: 60.0, multiplier: 1.3, retry_codes: [14, 4]
                }

                default_config.rpcs.sign_blob.timeout = 60.0

                default_config.rpcs.sign_jwt.timeout = 60.0

                default_config.rpcs.get_iam_policy.timeout = 60.0

                default_config.rpcs.set_iam_policy.timeout = 60.0

                default_config.rpcs.test_iam_permissions.timeout = 60.0

                default_config.rpcs.query_grantable_roles.timeout = 60.0

                default_config
              end
              yield @configure if block_given?
              @configure
            end

            ##
            # Configure the IAM Client instance.
            #
            # The configuration is set to the derived mode, meaning that values can be changed,
            # but structural changes (adding new fields, etc.) are not allowed. Structural changes
            # should be made on {Client.configure}.
            #
            # See {::Google::Iam::Admin::V1::IAM::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def configure
              yield @config if block_given?
              @config
            end

            ##
            # Create a new IAM client object.
            #
            # @example
            #
            #   # Create a client using the default configuration
            #   client = ::Google::Iam::Admin::V1::IAM::Client.new
            #
            #   # Create a client using a custom configuration
            #   client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the IAM client.
            # @yieldparam config [Client::Configuration]
            #
            def initialize
              # These require statements are intentionally placed here to initialize
              # the gRPC module only when it's required.
              # See https://github.com/googleapis/toolkit/issues/446
              require "gapic/grpc"
              require "google/iam/admin/v1/iam_services_pb"

              # Create the configuration object
              @config = Configuration.new Client.configure

              # Yield the configuration if needed
              yield @config if block_given?

              # Create credentials
              credentials = @config.credentials
              # Use self-signed JWT if the endpoint is unchanged from default,
              # but only if the default endpoint does not have a region prefix.
              enable_self_signed_jwt = @config.endpoint == Client.configure.endpoint &&
                                       !@config.endpoint.split(".").first.include?("-")
              credentials ||= Credentials.default scope: @config.scope,
                                                  enable_self_signed_jwt: enable_self_signed_jwt
              if credentials.is_a?(::String) || credentials.is_a?(::Hash)
                credentials = Credentials.new credentials, scope: @config.scope
              end
              @quota_project_id = @config.quota_project
              @quota_project_id ||= credentials.quota_project_id if credentials.respond_to? :quota_project_id

              @iam_stub = ::Gapic::ServiceStub.new(
                ::Google::Iam::Admin::V1::IAM::Stub,
                credentials:  credentials,
                endpoint:     @config.endpoint,
                channel_args: @config.channel_args,
                interceptors: @config.interceptors
              )
            end

            # Service calls

            ##
            # Lists every {::Google::Iam::Admin::V1::ServiceAccount ServiceAccount} that belongs to a specific project.
            #
            # @overload list_service_accounts(request, options = nil)
            #   Pass arguments to `list_service_accounts` via a request object, either of type
            #   {::Google::Iam::Admin::V1::ListServiceAccountsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Iam::Admin::V1::ListServiceAccountsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_service_accounts(name: nil, page_size: nil, page_token: nil)
            #   Pass arguments to `list_service_accounts` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The resource name of the project associated with the service
            #     accounts, such as `projects/my-project-123`.
            #   @param page_size [::Integer]
            #     Optional limit on the number of service accounts to include in the
            #     response. Further accounts can subsequently be obtained by including the
            #     {::Google::Iam::Admin::V1::ListServiceAccountsResponse#next_page_token ListServiceAccountsResponse.next_page_token}
            #     in a subsequent request.
            #
            #     The default is 20, and the maximum is 100.
            #   @param page_token [::String]
            #     Optional pagination token returned in an earlier
            #     {::Google::Iam::Admin::V1::ListServiceAccountsResponse#next_page_token ListServiceAccountsResponse.next_page_token}.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Iam::Admin::V1::ServiceAccount>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Iam::Admin::V1::ServiceAccount>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def list_service_accounts request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::Admin::V1::ListServiceAccountsRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_service_accounts.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Iam::Admin::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.list_service_accounts.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_service_accounts.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @iam_stub.call_rpc :list_service_accounts, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @iam_stub, :list_service_accounts, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Gets a {::Google::Iam::Admin::V1::ServiceAccount ServiceAccount}.
            #
            # @overload get_service_account(request, options = nil)
            #   Pass arguments to `get_service_account` via a request object, either of type
            #   {::Google::Iam::Admin::V1::GetServiceAccountRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Iam::Admin::V1::GetServiceAccountRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_service_account(name: nil)
            #   Pass arguments to `get_service_account` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The resource name of the service account in the following format:
            #     `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
            #     Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
            #     the account. The `ACCOUNT` value can be the `email` address or the
            #     `unique_id` of the service account.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Iam::Admin::V1::ServiceAccount]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Iam::Admin::V1::ServiceAccount]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def get_service_account request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::Admin::V1::GetServiceAccountRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_service_account.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Iam::Admin::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get_service_account.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_service_account.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @iam_stub.call_rpc :get_service_account, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Creates a {::Google::Iam::Admin::V1::ServiceAccount ServiceAccount}.
            #
            # @overload create_service_account(request, options = nil)
            #   Pass arguments to `create_service_account` via a request object, either of type
            #   {::Google::Iam::Admin::V1::CreateServiceAccountRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Iam::Admin::V1::CreateServiceAccountRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload create_service_account(name: nil, account_id: nil, service_account: nil)
            #   Pass arguments to `create_service_account` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The resource name of the project associated with the service
            #     accounts, such as `projects/my-project-123`.
            #   @param account_id [::String]
            #     Required. The account id that is used to generate the service account
            #     email address and a stable unique id. It is unique within a project,
            #     must be 6-30 characters long, and match the regular expression
            #     `[a-z]([-a-z0-9]*[a-z0-9])` to comply with RFC1035.
            #   @param service_account [::Google::Iam::Admin::V1::ServiceAccount, ::Hash]
            #     The {::Google::Iam::Admin::V1::ServiceAccount ServiceAccount} resource to
            #     create. Currently, only the following values are user assignable:
            #     `display_name` and `description`.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Iam::Admin::V1::ServiceAccount]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Iam::Admin::V1::ServiceAccount]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def create_service_account request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::Admin::V1::CreateServiceAccountRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.create_service_account.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Iam::Admin::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.create_service_account.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.create_service_account.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @iam_stub.call_rpc :create_service_account, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # **Note:** We are in the process of deprecating this method. Use
            # {::Google::Iam::Admin::V1::IAM::Client#patch_service_account PatchServiceAccount} instead.
            #
            # Updates a {::Google::Iam::Admin::V1::ServiceAccount ServiceAccount}.
            #
            # You can update only the `display_name` and `description` fields.
            #
            # @overload update_service_account(request, options = nil)
            #   Pass arguments to `update_service_account` via a request object, either of type
            #   {::Google::Iam::Admin::V1::ServiceAccount} or an equivalent Hash.
            #
            #   @param request [::Google::Iam::Admin::V1::ServiceAccount, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload update_service_account(name: nil, display_name: nil, etag: nil, description: nil)
            #   Pass arguments to `update_service_account` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     The resource name of the service account.
            #
            #     Use one of the following formats:
            #
            #     * `projects/{PROJECT_ID}/serviceAccounts/{EMAIL_ADDRESS}`
            #     * `projects/{PROJECT_ID}/serviceAccounts/{UNIQUE_ID}`
            #
            #     As an alternative, you can use the `-` wildcard character instead of the
            #     project ID:
            #
            #     * `projects/-/serviceAccounts/{EMAIL_ADDRESS}`
            #     * `projects/-/serviceAccounts/{UNIQUE_ID}`
            #
            #     When possible, avoid using the `-` wildcard character, because it can cause
            #     response messages to contain misleading error codes. For example, if you
            #     try to get the service account
            #     `projects/-/serviceAccounts/fake@example.com`, which does not exist, the
            #     response contains an HTTP `403 Forbidden` error instead of a `404 Not
            #     Found` error.
            #   @param display_name [::String]
            #     Optional. A user-specified, human-readable name for the service account. The maximum
            #     length is 100 UTF-8 bytes.
            #   @param etag [::String]
            #     Deprecated. Do not use.
            #   @param description [::String]
            #     Optional. A user-specified, human-readable description of the service account. The
            #     maximum length is 256 UTF-8 bytes.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Iam::Admin::V1::ServiceAccount]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Iam::Admin::V1::ServiceAccount]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def update_service_account request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::Admin::V1::ServiceAccount

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.update_service_account.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Iam::Admin::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.update_service_account.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.update_service_account.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @iam_stub.call_rpc :update_service_account, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Patches a {::Google::Iam::Admin::V1::ServiceAccount ServiceAccount}.
            #
            # @overload patch_service_account(request, options = nil)
            #   Pass arguments to `patch_service_account` via a request object, either of type
            #   {::Google::Iam::Admin::V1::PatchServiceAccountRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Iam::Admin::V1::PatchServiceAccountRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload patch_service_account(service_account: nil, update_mask: nil)
            #   Pass arguments to `patch_service_account` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param service_account [::Google::Iam::Admin::V1::ServiceAccount, ::Hash]
            #   @param update_mask [::Google::Protobuf::FieldMask, ::Hash]
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Iam::Admin::V1::ServiceAccount]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Iam::Admin::V1::ServiceAccount]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def patch_service_account request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::Admin::V1::PatchServiceAccountRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.patch_service_account.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Iam::Admin::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "service_account.name" => request.service_account.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.patch_service_account.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.patch_service_account.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @iam_stub.call_rpc :patch_service_account, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Deletes a {::Google::Iam::Admin::V1::ServiceAccount ServiceAccount}.
            #
            # **Warning:** After you delete a service account, you might not be able to
            # undelete it. If you know that you need to re-enable the service account in
            # the future, use {::Google::Iam::Admin::V1::IAM::Client#disable_service_account DisableServiceAccount} instead.
            #
            # If you delete a service account, IAM permanently removes the service
            # account 30 days later. Google Cloud cannot recover the service account
            # after it is permanently removed, even if you file a support request.
            #
            # To help avoid unplanned outages, we recommend that you disable the service
            # account before you delete it. Use {::Google::Iam::Admin::V1::IAM::Client#disable_service_account DisableServiceAccount} to disable the
            # service account, then wait at least 24 hours and watch for unintended
            # consequences. If there are no unintended consequences, you can delete the
            # service account.
            #
            # @overload delete_service_account(request, options = nil)
            #   Pass arguments to `delete_service_account` via a request object, either of type
            #   {::Google::Iam::Admin::V1::DeleteServiceAccountRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Iam::Admin::V1::DeleteServiceAccountRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload delete_service_account(name: nil)
            #   Pass arguments to `delete_service_account` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The resource name of the service account in the following format:
            #     `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
            #     Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
            #     the account. The `ACCOUNT` value can be the `email` address or the
            #     `unique_id` of the service account.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Protobuf::Empty]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Protobuf::Empty]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def delete_service_account request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::Admin::V1::DeleteServiceAccountRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.delete_service_account.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Iam::Admin::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.delete_service_account.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.delete_service_account.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @iam_stub.call_rpc :delete_service_account, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Restores a deleted {::Google::Iam::Admin::V1::ServiceAccount ServiceAccount}.
            #
            # **Important:** It is not always possible to restore a deleted service
            # account. Use this method only as a last resort.
            #
            # After you delete a service account, IAM permanently removes the service
            # account 30 days later. There is no way to restore a deleted service account
            # that has been permanently removed.
            #
            # @overload undelete_service_account(request, options = nil)
            #   Pass arguments to `undelete_service_account` via a request object, either of type
            #   {::Google::Iam::Admin::V1::UndeleteServiceAccountRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Iam::Admin::V1::UndeleteServiceAccountRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload undelete_service_account(name: nil)
            #   Pass arguments to `undelete_service_account` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     The resource name of the service account in the following format:
            #     `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_UNIQUE_ID}`.
            #     Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
            #     the account.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Iam::Admin::V1::UndeleteServiceAccountResponse]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Iam::Admin::V1::UndeleteServiceAccountResponse]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def undelete_service_account request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::Admin::V1::UndeleteServiceAccountRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.undelete_service_account.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Iam::Admin::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.undelete_service_account.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.undelete_service_account.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @iam_stub.call_rpc :undelete_service_account, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Enables a {::Google::Iam::Admin::V1::ServiceAccount ServiceAccount} that was disabled by
            # {::Google::Iam::Admin::V1::IAM::Client#disable_service_account DisableServiceAccount}.
            #
            # If the service account is already enabled, then this method has no effect.
            #
            # If the service account was disabled by other means—for example, if Google
            # disabled the service account because it was compromised—you cannot use this
            # method to enable the service account.
            #
            # @overload enable_service_account(request, options = nil)
            #   Pass arguments to `enable_service_account` via a request object, either of type
            #   {::Google::Iam::Admin::V1::EnableServiceAccountRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Iam::Admin::V1::EnableServiceAccountRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload enable_service_account(name: nil)
            #   Pass arguments to `enable_service_account` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     The resource name of the service account in the following format:
            #     `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
            #     Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
            #     the account. The `ACCOUNT` value can be the `email` address or the
            #     `unique_id` of the service account.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Protobuf::Empty]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Protobuf::Empty]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def enable_service_account request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::Admin::V1::EnableServiceAccountRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.enable_service_account.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Iam::Admin::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.enable_service_account.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.enable_service_account.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @iam_stub.call_rpc :enable_service_account, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Disables a {::Google::Iam::Admin::V1::ServiceAccount ServiceAccount} immediately.
            #
            # If an application uses the service account to authenticate, that
            # application can no longer call Google APIs or access Google Cloud
            # resources. Existing access tokens for the service account are rejected, and
            # requests for new access tokens will fail.
            #
            # To re-enable the service account, use {::Google::Iam::Admin::V1::IAM::Client#enable_service_account EnableServiceAccount}. After you
            # re-enable the service account, its existing access tokens will be accepted,
            # and you can request new access tokens.
            #
            # To help avoid unplanned outages, we recommend that you disable the service
            # account before you delete it. Use this method to disable the service
            # account, then wait at least 24 hours and watch for unintended consequences.
            # If there are no unintended consequences, you can delete the service account
            # with {::Google::Iam::Admin::V1::IAM::Client#delete_service_account DeleteServiceAccount}.
            #
            # @overload disable_service_account(request, options = nil)
            #   Pass arguments to `disable_service_account` via a request object, either of type
            #   {::Google::Iam::Admin::V1::DisableServiceAccountRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Iam::Admin::V1::DisableServiceAccountRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload disable_service_account(name: nil)
            #   Pass arguments to `disable_service_account` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     The resource name of the service account in the following format:
            #     `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
            #     Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
            #     the account. The `ACCOUNT` value can be the `email` address or the
            #     `unique_id` of the service account.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Protobuf::Empty]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Protobuf::Empty]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def disable_service_account request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::Admin::V1::DisableServiceAccountRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.disable_service_account.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Iam::Admin::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.disable_service_account.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.disable_service_account.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @iam_stub.call_rpc :disable_service_account, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Lists every {::Google::Iam::Admin::V1::ServiceAccountKey ServiceAccountKey} for a service account.
            #
            # @overload list_service_account_keys(request, options = nil)
            #   Pass arguments to `list_service_account_keys` via a request object, either of type
            #   {::Google::Iam::Admin::V1::ListServiceAccountKeysRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Iam::Admin::V1::ListServiceAccountKeysRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_service_account_keys(name: nil, key_types: nil)
            #   Pass arguments to `list_service_account_keys` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The resource name of the service account in the following format:
            #     `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
            #
            #     Using `-` as a wildcard for the `PROJECT_ID`, will infer the project from
            #     the account. The `ACCOUNT` value can be the `email` address or the
            #     `unique_id` of the service account.
            #   @param key_types [::Array<::Google::Iam::Admin::V1::ListServiceAccountKeysRequest::KeyType>]
            #     Filters the types of keys the user wants to include in the list
            #     response. Duplicate key types are not allowed. If no key type
            #     is provided, all keys are returned.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Iam::Admin::V1::ListServiceAccountKeysResponse]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Iam::Admin::V1::ListServiceAccountKeysResponse]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def list_service_account_keys request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::Admin::V1::ListServiceAccountKeysRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_service_account_keys.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Iam::Admin::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.list_service_account_keys.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_service_account_keys.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @iam_stub.call_rpc :list_service_account_keys, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Gets a {::Google::Iam::Admin::V1::ServiceAccountKey ServiceAccountKey}.
            #
            # @overload get_service_account_key(request, options = nil)
            #   Pass arguments to `get_service_account_key` via a request object, either of type
            #   {::Google::Iam::Admin::V1::GetServiceAccountKeyRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Iam::Admin::V1::GetServiceAccountKeyRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_service_account_key(name: nil, public_key_type: nil)
            #   Pass arguments to `get_service_account_key` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The resource name of the service account key in the following format:
            #     `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}/keys/{key}`.
            #
            #     Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
            #     the account. The `ACCOUNT` value can be the `email` address or the
            #     `unique_id` of the service account.
            #   @param public_key_type [::Google::Iam::Admin::V1::ServiceAccountPublicKeyType]
            #     The output format of the public key requested.
            #     X509_PEM is the default output format.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Iam::Admin::V1::ServiceAccountKey]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Iam::Admin::V1::ServiceAccountKey]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def get_service_account_key request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::Admin::V1::GetServiceAccountKeyRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_service_account_key.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Iam::Admin::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get_service_account_key.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_service_account_key.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @iam_stub.call_rpc :get_service_account_key, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Creates a {::Google::Iam::Admin::V1::ServiceAccountKey ServiceAccountKey}.
            #
            # @overload create_service_account_key(request, options = nil)
            #   Pass arguments to `create_service_account_key` via a request object, either of type
            #   {::Google::Iam::Admin::V1::CreateServiceAccountKeyRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Iam::Admin::V1::CreateServiceAccountKeyRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload create_service_account_key(name: nil, private_key_type: nil, key_algorithm: nil)
            #   Pass arguments to `create_service_account_key` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The resource name of the service account in the following format:
            #     `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
            #     Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
            #     the account. The `ACCOUNT` value can be the `email` address or the
            #     `unique_id` of the service account.
            #   @param private_key_type [::Google::Iam::Admin::V1::ServiceAccountPrivateKeyType]
            #     The output format of the private key. The default value is
            #     `TYPE_GOOGLE_CREDENTIALS_FILE`, which is the Google Credentials File
            #     format.
            #   @param key_algorithm [::Google::Iam::Admin::V1::ServiceAccountKeyAlgorithm]
            #     Which type of key and algorithm to use for the key.
            #     The default is currently a 2K RSA key.  However this may change in the
            #     future.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Iam::Admin::V1::ServiceAccountKey]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Iam::Admin::V1::ServiceAccountKey]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def create_service_account_key request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::Admin::V1::CreateServiceAccountKeyRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.create_service_account_key.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Iam::Admin::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.create_service_account_key.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.create_service_account_key.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @iam_stub.call_rpc :create_service_account_key, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Creates a {::Google::Iam::Admin::V1::ServiceAccountKey ServiceAccountKey}, using a public key that you provide.
            #
            # @overload upload_service_account_key(request, options = nil)
            #   Pass arguments to `upload_service_account_key` via a request object, either of type
            #   {::Google::Iam::Admin::V1::UploadServiceAccountKeyRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Iam::Admin::V1::UploadServiceAccountKeyRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload upload_service_account_key(name: nil, public_key_data: nil)
            #   Pass arguments to `upload_service_account_key` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     The resource name of the service account in the following format:
            #     `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
            #     Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
            #     the account. The `ACCOUNT` value can be the `email` address or the
            #     `unique_id` of the service account.
            #   @param public_key_data [::String]
            #     A field that allows clients to upload their own public key. If set,
            #     use this public key data to create a service account key for given
            #     service account.
            #     Please note, the expected format for this field is X509_PEM.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Iam::Admin::V1::ServiceAccountKey]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Iam::Admin::V1::ServiceAccountKey]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def upload_service_account_key request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::Admin::V1::UploadServiceAccountKeyRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.upload_service_account_key.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Iam::Admin::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.upload_service_account_key.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.upload_service_account_key.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @iam_stub.call_rpc :upload_service_account_key, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Deletes a {::Google::Iam::Admin::V1::ServiceAccountKey ServiceAccountKey}. Deleting a service account key does not
            # revoke short-lived credentials that have been issued based on the service
            # account key.
            #
            # @overload delete_service_account_key(request, options = nil)
            #   Pass arguments to `delete_service_account_key` via a request object, either of type
            #   {::Google::Iam::Admin::V1::DeleteServiceAccountKeyRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Iam::Admin::V1::DeleteServiceAccountKeyRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload delete_service_account_key(name: nil)
            #   Pass arguments to `delete_service_account_key` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The resource name of the service account key in the following format:
            #     `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}/keys/{key}`.
            #     Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
            #     the account. The `ACCOUNT` value can be the `email` address or the
            #     `unique_id` of the service account.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Protobuf::Empty]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Protobuf::Empty]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def delete_service_account_key request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::Admin::V1::DeleteServiceAccountKeyRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.delete_service_account_key.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Iam::Admin::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.delete_service_account_key.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.delete_service_account_key.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @iam_stub.call_rpc :delete_service_account_key, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # **Note:** This method is deprecated. Use the
            # [`signBlob`](https://cloud.google.com/iam/help/rest-credentials/v1/projects.serviceAccounts/signBlob)
            # method in the IAM Service Account Credentials API instead. If you currently
            # use this method, see the [migration
            # guide](https://cloud.google.com/iam/help/credentials/migrate-api) for
            # instructions.
            #
            # Signs a blob using the system-managed private key for a {::Google::Iam::Admin::V1::ServiceAccount ServiceAccount}.
            #
            # @deprecated This method is deprecated and may be removed in the next major version update.
            #
            # @overload sign_blob(request, options = nil)
            #   Pass arguments to `sign_blob` via a request object, either of type
            #   {::Google::Iam::Admin::V1::SignBlobRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Iam::Admin::V1::SignBlobRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload sign_blob(name: nil, bytes_to_sign: nil)
            #   Pass arguments to `sign_blob` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. Deprecated. [Migrate to Service Account Credentials
            #     API](https://cloud.google.com/iam/help/credentials/migrate-api).
            #
            #     The resource name of the service account in the following format:
            #     `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
            #     Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
            #     the account. The `ACCOUNT` value can be the `email` address or the
            #     `unique_id` of the service account.
            #   @param bytes_to_sign [::String]
            #     Required. Deprecated. [Migrate to Service Account Credentials
            #     API](https://cloud.google.com/iam/help/credentials/migrate-api).
            #
            #     The bytes to sign.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Iam::Admin::V1::SignBlobResponse]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Iam::Admin::V1::SignBlobResponse]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def sign_blob request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::Admin::V1::SignBlobRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.sign_blob.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Iam::Admin::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.sign_blob.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.sign_blob.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @iam_stub.call_rpc :sign_blob, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # **Note:** This method is deprecated. Use the
            # [`signJwt`](https://cloud.google.com/iam/help/rest-credentials/v1/projects.serviceAccounts/signJwt)
            # method in the IAM Service Account Credentials API instead. If you currently
            # use this method, see the [migration
            # guide](https://cloud.google.com/iam/help/credentials/migrate-api) for
            # instructions.
            #
            # Signs a JSON Web Token (JWT) using the system-managed private key for a
            # {::Google::Iam::Admin::V1::ServiceAccount ServiceAccount}.
            #
            # @deprecated This method is deprecated and may be removed in the next major version update.
            #
            # @overload sign_jwt(request, options = nil)
            #   Pass arguments to `sign_jwt` via a request object, either of type
            #   {::Google::Iam::Admin::V1::SignJwtRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Iam::Admin::V1::SignJwtRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload sign_jwt(name: nil, payload: nil)
            #   Pass arguments to `sign_jwt` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. Deprecated. [Migrate to Service Account Credentials
            #     API](https://cloud.google.com/iam/help/credentials/migrate-api).
            #
            #     The resource name of the service account in the following format:
            #     `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
            #     Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
            #     the account. The `ACCOUNT` value can be the `email` address or the
            #     `unique_id` of the service account.
            #   @param payload [::String]
            #     Required. Deprecated. [Migrate to Service Account Credentials
            #     API](https://cloud.google.com/iam/help/credentials/migrate-api).
            #
            #     The JWT payload to sign. Must be a serialized JSON object that contains a
            #     JWT Claims Set. For example: `{"sub": "user@example.com", "iat": 313435}`
            #
            #     If the JWT Claims Set contains an expiration time (`exp`) claim, it must be
            #     an integer timestamp that is not in the past and no more than 1 hour in the
            #     future.
            #
            #     If the JWT Claims Set does not contain an expiration time (`exp`) claim,
            #     this claim is added automatically, with a timestamp that is 1 hour in the
            #     future.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Iam::Admin::V1::SignJwtResponse]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Iam::Admin::V1::SignJwtResponse]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def sign_jwt request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::Admin::V1::SignJwtRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.sign_jwt.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Iam::Admin::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.sign_jwt.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.sign_jwt.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @iam_stub.call_rpc :sign_jwt, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Gets the IAM policy that is attached to a {::Google::Iam::Admin::V1::ServiceAccount ServiceAccount}. This IAM
            # policy specifies which members have access to the service account.
            #
            # This method does not tell you whether the service account has been granted
            # any roles on other resources. To check whether a service account has role
            # grants on a resource, use the `getIamPolicy` method for that resource. For
            # example, to view the role grants for a project, call the Resource Manager
            # API's
            # [`projects.getIamPolicy`](https://cloud.google.com/resource-manager/reference/rest/v1/projects/getIamPolicy)
            # method.
            #
            # @overload get_iam_policy(request, options = nil)
            #   Pass arguments to `get_iam_policy` via a request object, either of type
            #   {::Google::Iam::V1::GetIamPolicyRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Iam::V1::GetIamPolicyRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_iam_policy(resource: nil, options: nil)
            #   Pass arguments to `get_iam_policy` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param resource [::String]
            #     REQUIRED: The resource for which the policy is being requested.
            #     See the operation documentation for the appropriate value for this field.
            #   @param options [::Google::Iam::V1::GetPolicyOptions, ::Hash]
            #     OPTIONAL: A `GetPolicyOptions` object for specifying options to
            #     `GetIamPolicy`. This field is only used by Cloud IAM.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Iam::V1::Policy]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Iam::V1::Policy]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def get_iam_policy request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::V1::GetIamPolicyRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_iam_policy.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Iam::Admin::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "resource" => request.resource
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get_iam_policy.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_iam_policy.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @iam_stub.call_rpc :get_iam_policy, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Sets the IAM policy that is attached to a {::Google::Iam::Admin::V1::ServiceAccount ServiceAccount}.
            #
            # Use this method to grant or revoke access to the service account. For
            # example, you could grant a member the ability to impersonate the service
            # account.
            #
            # This method does not enable the service account to access other resources.
            # To grant roles to a service account on a resource, follow these steps:
            #
            # 1. Call the resource's `getIamPolicy` method to get its current IAM policy.
            # 2. Edit the policy so that it binds the service account to an IAM role for
            # the resource.
            # 3. Call the resource's `setIamPolicy` method to update its IAM policy.
            #
            # For detailed instructions, see
            # [Granting roles to a service account for specific
            # resources](https://cloud.google.com/iam/help/service-accounts/granting-access-to-service-accounts).
            #
            # @overload set_iam_policy(request, options = nil)
            #   Pass arguments to `set_iam_policy` via a request object, either of type
            #   {::Google::Iam::V1::SetIamPolicyRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Iam::V1::SetIamPolicyRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload set_iam_policy(resource: nil, policy: nil)
            #   Pass arguments to `set_iam_policy` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param resource [::String]
            #     REQUIRED: The resource for which the policy is being specified.
            #     See the operation documentation for the appropriate value for this field.
            #   @param policy [::Google::Iam::V1::Policy, ::Hash]
            #     REQUIRED: The complete policy to be applied to the `resource`. The size of
            #     the policy is limited to a few 10s of KB. An empty policy is a
            #     valid policy but certain Cloud Platform services (such as Projects)
            #     might reject them.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Iam::V1::Policy]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Iam::V1::Policy]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def set_iam_policy request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::V1::SetIamPolicyRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.set_iam_policy.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Iam::Admin::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "resource" => request.resource
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.set_iam_policy.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.set_iam_policy.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @iam_stub.call_rpc :set_iam_policy, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Tests whether the caller has the specified permissions on a
            # {::Google::Iam::Admin::V1::ServiceAccount ServiceAccount}.
            #
            # @overload test_iam_permissions(request, options = nil)
            #   Pass arguments to `test_iam_permissions` via a request object, either of type
            #   {::Google::Iam::V1::TestIamPermissionsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Iam::V1::TestIamPermissionsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload test_iam_permissions(resource: nil, permissions: nil)
            #   Pass arguments to `test_iam_permissions` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param resource [::String]
            #     REQUIRED: The resource for which the policy detail is being requested.
            #     See the operation documentation for the appropriate value for this field.
            #   @param permissions [::Array<::String>]
            #     The set of permissions to check for the `resource`. Permissions with
            #     wildcards (such as '*' or 'storage.*') are not allowed. For more
            #     information see
            #     [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Iam::V1::TestIamPermissionsResponse]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Iam::V1::TestIamPermissionsResponse]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def test_iam_permissions request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::V1::TestIamPermissionsRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.test_iam_permissions.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Iam::Admin::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "resource" => request.resource
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.test_iam_permissions.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.test_iam_permissions.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @iam_stub.call_rpc :test_iam_permissions, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Lists roles that can be granted on a Google Cloud resource. A role is
            # grantable if the IAM policy for the resource can contain bindings to the
            # role.
            #
            # @overload query_grantable_roles(request, options = nil)
            #   Pass arguments to `query_grantable_roles` via a request object, either of type
            #   {::Google::Iam::Admin::V1::QueryGrantableRolesRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Iam::Admin::V1::QueryGrantableRolesRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload query_grantable_roles(full_resource_name: nil, view: nil, page_size: nil, page_token: nil)
            #   Pass arguments to `query_grantable_roles` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param full_resource_name [::String]
            #     Required. The full resource name to query from the list of grantable roles.
            #
            #     The name follows the Google Cloud Platform resource format.
            #     For example, a Cloud Platform project with id `my-project` will be named
            #     `//cloudresourcemanager.googleapis.com/projects/my-project`.
            #   @param view [::Google::Iam::Admin::V1::RoleView]
            #   @param page_size [::Integer]
            #     Optional limit on the number of roles to include in the response.
            #
            #     The default is 300, and the maximum is 1,000.
            #   @param page_token [::String]
            #     Optional pagination token returned in an earlier
            #     QueryGrantableRolesResponse.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Iam::Admin::V1::Role>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Iam::Admin::V1::Role>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def query_grantable_roles request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::Admin::V1::QueryGrantableRolesRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.query_grantable_roles.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Iam::Admin::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.query_grantable_roles.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.query_grantable_roles.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @iam_stub.call_rpc :query_grantable_roles, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @iam_stub, :query_grantable_roles, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Lists every predefined {::Google::Iam::Admin::V1::Role Role} that IAM supports, or every custom role
            # that is defined for an organization or project.
            #
            # @overload list_roles(request, options = nil)
            #   Pass arguments to `list_roles` via a request object, either of type
            #   {::Google::Iam::Admin::V1::ListRolesRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Iam::Admin::V1::ListRolesRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_roles(parent: nil, page_size: nil, page_token: nil, view: nil, show_deleted: nil)
            #   Pass arguments to `list_roles` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     The `parent` parameter's value depends on the target resource for the
            #     request, namely
            #     [`roles`](/iam/reference/rest/v1/roles),
            #     [`projects`](/iam/reference/rest/v1/projects.roles), or
            #     [`organizations`](/iam/reference/rest/v1/organizations.roles). Each
            #     resource type's `parent` value format is described below:
            #
            #     * [`roles.list()`](/iam/reference/rest/v1/roles/list): An empty string.
            #       This method doesn't require a resource; it simply returns all
            #       [predefined roles](/iam/docs/understanding-roles#predefined_roles) in
            #       Cloud IAM. Example request URL:
            #       `https://iam.googleapis.com/v1/roles`
            #
            #     * [`projects.roles.list()`](/iam/reference/rest/v1/projects.roles/list):
            #       `projects/{PROJECT_ID}`. This method lists all project-level
            #       [custom roles](/iam/docs/understanding-custom-roles).
            #       Example request URL:
            #       `https://iam.googleapis.com/v1/projects/{PROJECT_ID}/roles`
            #
            #     * [`organizations.roles.list()`](/iam/reference/rest/v1/organizations.roles/list):
            #       `organizations/{ORGANIZATION_ID}`. This method lists all
            #       organization-level [custom roles](/iam/docs/understanding-custom-roles).
            #       Example request URL:
            #       `https://iam.googleapis.com/v1/organizations/{ORGANIZATION_ID}/roles`
            #
            #     Note: Wildcard (*) values are invalid; you must specify a complete project
            #     ID or organization ID.
            #   @param page_size [::Integer]
            #     Optional limit on the number of roles to include in the response.
            #
            #     The default is 300, and the maximum is 1,000.
            #   @param page_token [::String]
            #     Optional pagination token returned in an earlier ListRolesResponse.
            #   @param view [::Google::Iam::Admin::V1::RoleView]
            #     Optional view for the returned Role objects. When `FULL` is specified,
            #     the `includedPermissions` field is returned, which includes a list of all
            #     permissions in the role. The default value is `BASIC`, which does not
            #     return the `includedPermissions` field.
            #   @param show_deleted [::Boolean]
            #     Include Roles that have been deleted.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Iam::Admin::V1::Role>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Iam::Admin::V1::Role>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def list_roles request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::Admin::V1::ListRolesRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_roles.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Iam::Admin::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.list_roles.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_roles.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @iam_stub.call_rpc :list_roles, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @iam_stub, :list_roles, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Gets the definition of a {::Google::Iam::Admin::V1::Role Role}.
            #
            # @overload get_role(request, options = nil)
            #   Pass arguments to `get_role` via a request object, either of type
            #   {::Google::Iam::Admin::V1::GetRoleRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Iam::Admin::V1::GetRoleRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_role(name: nil)
            #   Pass arguments to `get_role` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     The `name` parameter's value depends on the target resource for the
            #     request, namely
            #     [`roles`](/iam/reference/rest/v1/roles),
            #     [`projects`](/iam/reference/rest/v1/projects.roles), or
            #     [`organizations`](/iam/reference/rest/v1/organizations.roles). Each
            #     resource type's `name` value format is described below:
            #
            #     * [`roles.get()`](/iam/reference/rest/v1/roles/get): `roles/{ROLE_NAME}`.
            #       This method returns results from all
            #       [predefined roles](/iam/docs/understanding-roles#predefined_roles) in
            #       Cloud IAM. Example request URL:
            #       `https://iam.googleapis.com/v1/roles/{ROLE_NAME}`
            #
            #     * [`projects.roles.get()`](/iam/reference/rest/v1/projects.roles/get):
            #       `projects/{PROJECT_ID}/roles/{CUSTOM_ROLE_ID}`. This method returns only
            #       [custom roles](/iam/docs/understanding-custom-roles) that have been
            #       created at the project level. Example request URL:
            #       `https://iam.googleapis.com/v1/projects/{PROJECT_ID}/roles/{CUSTOM_ROLE_ID}`
            #
            #     * [`organizations.roles.get()`](/iam/reference/rest/v1/organizations.roles/get):
            #       `organizations/{ORGANIZATION_ID}/roles/{CUSTOM_ROLE_ID}`. This method
            #       returns only [custom roles](/iam/docs/understanding-custom-roles) that
            #       have been created at the organization level. Example request URL:
            #       `https://iam.googleapis.com/v1/organizations/{ORGANIZATION_ID}/roles/{CUSTOM_ROLE_ID}`
            #
            #     Note: Wildcard (*) values are invalid; you must specify a complete project
            #     ID or organization ID.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Iam::Admin::V1::Role]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Iam::Admin::V1::Role]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def get_role request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::Admin::V1::GetRoleRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_role.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Iam::Admin::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get_role.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_role.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @iam_stub.call_rpc :get_role, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Creates a new custom {::Google::Iam::Admin::V1::Role Role}.
            #
            # @overload create_role(request, options = nil)
            #   Pass arguments to `create_role` via a request object, either of type
            #   {::Google::Iam::Admin::V1::CreateRoleRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Iam::Admin::V1::CreateRoleRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload create_role(parent: nil, role_id: nil, role: nil)
            #   Pass arguments to `create_role` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     The `parent` parameter's value depends on the target resource for the
            #     request, namely
            #     [`projects`](/iam/reference/rest/v1/projects.roles) or
            #     [`organizations`](/iam/reference/rest/v1/organizations.roles). Each
            #     resource type's `parent` value format is described below:
            #
            #     * [`projects.roles.create()`](/iam/reference/rest/v1/projects.roles/create):
            #       `projects/{PROJECT_ID}`. This method creates project-level
            #       [custom roles](/iam/docs/understanding-custom-roles).
            #       Example request URL:
            #       `https://iam.googleapis.com/v1/projects/{PROJECT_ID}/roles`
            #
            #     * [`organizations.roles.create()`](/iam/reference/rest/v1/organizations.roles/create):
            #       `organizations/{ORGANIZATION_ID}`. This method creates organization-level
            #       [custom roles](/iam/docs/understanding-custom-roles). Example request
            #       URL:
            #       `https://iam.googleapis.com/v1/organizations/{ORGANIZATION_ID}/roles`
            #
            #     Note: Wildcard (*) values are invalid; you must specify a complete project
            #     ID or organization ID.
            #   @param role_id [::String]
            #     The role ID to use for this role.
            #
            #     A role ID may contain alphanumeric characters, underscores (`_`), and
            #     periods (`.`). It must contain a minimum of 3 characters and a maximum of
            #     64 characters.
            #   @param role [::Google::Iam::Admin::V1::Role, ::Hash]
            #     The Role resource to create.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Iam::Admin::V1::Role]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Iam::Admin::V1::Role]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def create_role request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::Admin::V1::CreateRoleRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.create_role.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Iam::Admin::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "parent" => request.parent
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.create_role.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.create_role.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @iam_stub.call_rpc :create_role, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Updates the definition of a custom {::Google::Iam::Admin::V1::Role Role}.
            #
            # @overload update_role(request, options = nil)
            #   Pass arguments to `update_role` via a request object, either of type
            #   {::Google::Iam::Admin::V1::UpdateRoleRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Iam::Admin::V1::UpdateRoleRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload update_role(name: nil, role: nil, update_mask: nil)
            #   Pass arguments to `update_role` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     The `name` parameter's value depends on the target resource for the
            #     request, namely
            #     [`projects`](/iam/reference/rest/v1/projects.roles) or
            #     [`organizations`](/iam/reference/rest/v1/organizations.roles). Each
            #     resource type's `name` value format is described below:
            #
            #     * [`projects.roles.patch()`](/iam/reference/rest/v1/projects.roles/patch):
            #       `projects/{PROJECT_ID}/roles/{CUSTOM_ROLE_ID}`. This method updates only
            #       [custom roles](/iam/docs/understanding-custom-roles) that have been
            #       created at the project level. Example request URL:
            #       `https://iam.googleapis.com/v1/projects/{PROJECT_ID}/roles/{CUSTOM_ROLE_ID}`
            #
            #     * [`organizations.roles.patch()`](/iam/reference/rest/v1/organizations.roles/patch):
            #       `organizations/{ORGANIZATION_ID}/roles/{CUSTOM_ROLE_ID}`. This method
            #       updates only [custom roles](/iam/docs/understanding-custom-roles) that
            #       have been created at the organization level. Example request URL:
            #       `https://iam.googleapis.com/v1/organizations/{ORGANIZATION_ID}/roles/{CUSTOM_ROLE_ID}`
            #
            #     Note: Wildcard (*) values are invalid; you must specify a complete project
            #     ID or organization ID.
            #   @param role [::Google::Iam::Admin::V1::Role, ::Hash]
            #     The updated role.
            #   @param update_mask [::Google::Protobuf::FieldMask, ::Hash]
            #     A mask describing which fields in the Role have changed.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Iam::Admin::V1::Role]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Iam::Admin::V1::Role]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def update_role request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::Admin::V1::UpdateRoleRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.update_role.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Iam::Admin::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.update_role.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.update_role.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @iam_stub.call_rpc :update_role, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Deletes a custom {::Google::Iam::Admin::V1::Role Role}.
            #
            # When you delete a custom role, the following changes occur immediately:
            #
            # * You cannot bind a member to the custom role in an IAM
            # {::Google::Iam::V1::Policy Policy}.
            # * Existing bindings to the custom role are not changed, but they have no
            # effect.
            # * By default, the response from {::Google::Iam::Admin::V1::IAM::Client#list_roles ListRoles} does not include the custom
            # role.
            #
            # You have 7 days to undelete the custom role. After 7 days, the following
            # changes occur:
            #
            # * The custom role is permanently deleted and cannot be recovered.
            # * If an IAM policy contains a binding to the custom role, the binding is
            # permanently removed.
            #
            # @overload delete_role(request, options = nil)
            #   Pass arguments to `delete_role` via a request object, either of type
            #   {::Google::Iam::Admin::V1::DeleteRoleRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Iam::Admin::V1::DeleteRoleRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload delete_role(name: nil, etag: nil)
            #   Pass arguments to `delete_role` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     The `name` parameter's value depends on the target resource for the
            #     request, namely
            #     [`projects`](/iam/reference/rest/v1/projects.roles) or
            #     [`organizations`](/iam/reference/rest/v1/organizations.roles). Each
            #     resource type's `name` value format is described below:
            #
            #     * [`projects.roles.delete()`](/iam/reference/rest/v1/projects.roles/delete):
            #       `projects/{PROJECT_ID}/roles/{CUSTOM_ROLE_ID}`. This method deletes only
            #       [custom roles](/iam/docs/understanding-custom-roles) that have been
            #       created at the project level. Example request URL:
            #       `https://iam.googleapis.com/v1/projects/{PROJECT_ID}/roles/{CUSTOM_ROLE_ID}`
            #
            #     * [`organizations.roles.delete()`](/iam/reference/rest/v1/organizations.roles/delete):
            #       `organizations/{ORGANIZATION_ID}/roles/{CUSTOM_ROLE_ID}`. This method
            #       deletes only [custom roles](/iam/docs/understanding-custom-roles) that
            #       have been created at the organization level. Example request URL:
            #       `https://iam.googleapis.com/v1/organizations/{ORGANIZATION_ID}/roles/{CUSTOM_ROLE_ID}`
            #
            #     Note: Wildcard (*) values are invalid; you must specify a complete project
            #     ID or organization ID.
            #   @param etag [::String]
            #     Used to perform a consistent read-modify-write.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Iam::Admin::V1::Role]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Iam::Admin::V1::Role]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def delete_role request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::Admin::V1::DeleteRoleRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.delete_role.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Iam::Admin::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.delete_role.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.delete_role.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @iam_stub.call_rpc :delete_role, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Undeletes a custom {::Google::Iam::Admin::V1::Role Role}.
            #
            # @overload undelete_role(request, options = nil)
            #   Pass arguments to `undelete_role` via a request object, either of type
            #   {::Google::Iam::Admin::V1::UndeleteRoleRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Iam::Admin::V1::UndeleteRoleRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload undelete_role(name: nil, etag: nil)
            #   Pass arguments to `undelete_role` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     The `name` parameter's value depends on the target resource for the
            #     request, namely
            #     [`projects`](/iam/reference/rest/v1/projects.roles) or
            #     [`organizations`](/iam/reference/rest/v1/organizations.roles). Each
            #     resource type's `name` value format is described below:
            #
            #     * [`projects.roles.undelete()`](/iam/reference/rest/v1/projects.roles/undelete):
            #       `projects/{PROJECT_ID}/roles/{CUSTOM_ROLE_ID}`. This method undeletes
            #       only [custom roles](/iam/docs/understanding-custom-roles) that have been
            #       created at the project level. Example request URL:
            #       `https://iam.googleapis.com/v1/projects/{PROJECT_ID}/roles/{CUSTOM_ROLE_ID}`
            #
            #     * [`organizations.roles.undelete()`](/iam/reference/rest/v1/organizations.roles/undelete):
            #       `organizations/{ORGANIZATION_ID}/roles/{CUSTOM_ROLE_ID}`. This method
            #       undeletes only [custom roles](/iam/docs/understanding-custom-roles) that
            #       have been created at the organization level. Example request URL:
            #       `https://iam.googleapis.com/v1/organizations/{ORGANIZATION_ID}/roles/{CUSTOM_ROLE_ID}`
            #
            #     Note: Wildcard (*) values are invalid; you must specify a complete project
            #     ID or organization ID.
            #   @param etag [::String]
            #     Used to perform a consistent read-modify-write.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Iam::Admin::V1::Role]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Iam::Admin::V1::Role]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def undelete_role request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::Admin::V1::UndeleteRoleRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.undelete_role.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Iam::Admin::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.undelete_role.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.undelete_role.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @iam_stub.call_rpc :undelete_role, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Lists every permission that you can test on a resource. A permission is
            # testable if you can check whether a member has that permission on the
            # resource.
            #
            # @overload query_testable_permissions(request, options = nil)
            #   Pass arguments to `query_testable_permissions` via a request object, either of type
            #   {::Google::Iam::Admin::V1::QueryTestablePermissionsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Iam::Admin::V1::QueryTestablePermissionsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload query_testable_permissions(full_resource_name: nil, page_size: nil, page_token: nil)
            #   Pass arguments to `query_testable_permissions` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param full_resource_name [::String]
            #     Required. The full resource name to query from the list of testable
            #     permissions.
            #
            #     The name follows the Google Cloud Platform resource format.
            #     For example, a Cloud Platform project with id `my-project` will be named
            #     `//cloudresourcemanager.googleapis.com/projects/my-project`.
            #   @param page_size [::Integer]
            #     Optional limit on the number of permissions to include in the response.
            #
            #     The default is 100, and the maximum is 1,000.
            #   @param page_token [::String]
            #     Optional pagination token returned in an earlier
            #     QueryTestablePermissionsRequest.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Iam::Admin::V1::Permission>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Iam::Admin::V1::Permission>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def query_testable_permissions request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::Admin::V1::QueryTestablePermissionsRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.query_testable_permissions.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Iam::Admin::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.query_testable_permissions.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.query_testable_permissions.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @iam_stub.call_rpc :query_testable_permissions, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @iam_stub, :query_testable_permissions, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Returns a list of services that allow you to opt into audit logs that are
            # not generated by default.
            #
            # To learn more about audit logs, see the [Logging
            # documentation](https://cloud.google.com/logging/docs/audit).
            #
            # @overload query_auditable_services(request, options = nil)
            #   Pass arguments to `query_auditable_services` via a request object, either of type
            #   {::Google::Iam::Admin::V1::QueryAuditableServicesRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Iam::Admin::V1::QueryAuditableServicesRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload query_auditable_services(full_resource_name: nil)
            #   Pass arguments to `query_auditable_services` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param full_resource_name [::String]
            #     Required. The full resource name to query from the list of auditable
            #     services.
            #
            #     The name follows the Google Cloud Platform resource format.
            #     For example, a Cloud Platform project with id `my-project` will be named
            #     `//cloudresourcemanager.googleapis.com/projects/my-project`.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Iam::Admin::V1::QueryAuditableServicesResponse]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Iam::Admin::V1::QueryAuditableServicesResponse]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def query_auditable_services request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::Admin::V1::QueryAuditableServicesRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.query_auditable_services.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Iam::Admin::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.query_auditable_services.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.query_auditable_services.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @iam_stub.call_rpc :query_auditable_services, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Lints, or validates, an IAM policy. Currently checks the
            # {::Google::Iam::V1::Binding#condition google.iam.v1.Binding.condition} field, which contains a condition
            # expression for a role binding.
            #
            # Successful calls to this method always return an HTTP `200 OK` status code,
            # even if the linter detects an issue in the IAM policy.
            #
            # @overload lint_policy(request, options = nil)
            #   Pass arguments to `lint_policy` via a request object, either of type
            #   {::Google::Iam::Admin::V1::LintPolicyRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Iam::Admin::V1::LintPolicyRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload lint_policy(full_resource_name: nil, condition: nil)
            #   Pass arguments to `lint_policy` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param full_resource_name [::String]
            #     The full resource name of the policy this lint request is about.
            #
            #     The name follows the Google Cloud Platform (GCP) resource format.
            #     For example, a GCP project with ID `my-project` will be named
            #     `//cloudresourcemanager.googleapis.com/projects/my-project`.
            #
            #     The resource name is not used to read the policy instance from the Cloud
            #     IAM database. The candidate policy for lint has to be provided in the same
            #     request object.
            #   @param condition [::Google::Type::Expr, ::Hash]
            #     [google.iam.v1.Binding.condition] [google.iam.v1.Binding.condition] object to be linted.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Iam::Admin::V1::LintPolicyResponse]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Iam::Admin::V1::LintPolicyResponse]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def lint_policy request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::Admin::V1::LintPolicyRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.lint_policy.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Iam::Admin::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.lint_policy.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.lint_policy.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @iam_stub.call_rpc :lint_policy, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Configuration class for the IAM API.
            #
            # This class represents the configuration for IAM,
            # providing control over timeouts, retry behavior, logging, transport
            # parameters, and other low-level controls. Certain parameters can also be
            # applied individually to specific RPCs. See
            # {::Google::Iam::Admin::V1::IAM::Client::Configuration::Rpcs}
            # for a list of RPCs that can be configured independently.
            #
            # Configuration can be applied globally to all clients, or to a single client
            # on construction.
            #
            # @example
            #
            #   # Modify the global config, setting the timeout for
            #   # list_service_accounts to 20 seconds,
            #   # and all remaining timeouts to 10 seconds.
            #   ::Google::Iam::Admin::V1::IAM::Client.configure do |config|
            #     config.timeout = 10.0
            #     config.rpcs.list_service_accounts.timeout = 20.0
            #   end
            #
            #   # Apply the above configuration only to a new client.
            #   client = ::Google::Iam::Admin::V1::IAM::Client.new do |config|
            #     config.timeout = 10.0
            #     config.rpcs.list_service_accounts.timeout = 20.0
            #   end
            #
            # @!attribute [rw] endpoint
            #   The hostname or hostname:port of the service endpoint.
            #   Defaults to `"iam.googleapis.com"`.
            #   @return [::String]
            # @!attribute [rw] credentials
            #   Credentials to send with calls. You may provide any of the following types:
            #    *  (`String`) The path to a service account key file in JSON format
            #    *  (`Hash`) A service account key as a Hash
            #    *  (`Google::Auth::Credentials`) A googleauth credentials object
            #       (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
            #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
            #       (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
            #    *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
            #    *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
            #    *  (`nil`) indicating no credentials
            #   @return [::Object]
            # @!attribute [rw] scope
            #   The OAuth scopes
            #   @return [::Array<::String>]
            # @!attribute [rw] lib_name
            #   The library name as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] lib_version
            #   The library version as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] channel_args
            #   Extra parameters passed to the gRPC channel. Note: this is ignored if a
            #   `GRPC::Core::Channel` object is provided as the credential.
            #   @return [::Hash]
            # @!attribute [rw] interceptors
            #   An array of interceptors that are run before calls are executed.
            #   @return [::Array<::GRPC::ClientInterceptor>]
            # @!attribute [rw] timeout
            #   The call timeout in seconds.
            #   @return [::Numeric]
            # @!attribute [rw] metadata
            #   Additional gRPC headers to be sent with the call.
            #   @return [::Hash{::Symbol=>::String}]
            # @!attribute [rw] retry_policy
            #   The retry policy. The value is a hash with the following keys:
            #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
            #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
            #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
            #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
            #       trigger a retry.
            #   @return [::Hash]
            # @!attribute [rw] quota_project
            #   A separate project against which to charge quota.
            #   @return [::String]
            #
            class Configuration
              extend ::Gapic::Config

              config_attr :endpoint,      "iam.googleapis.com", ::String
              config_attr :credentials,   nil do |value|
                allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
                allowed += [::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials] if defined? ::GRPC
                allowed.any? { |klass| klass === value }
              end
              config_attr :scope,         nil, ::String, ::Array, nil
              config_attr :lib_name,      nil, ::String, nil
              config_attr :lib_version,   nil, ::String, nil
              config_attr(:channel_args,  { "grpc.service_config_disable_resolution" => 1 }, ::Hash, nil)
              config_attr :interceptors,  nil, ::Array, nil
              config_attr :timeout,       nil, ::Numeric, nil
              config_attr :metadata,      nil, ::Hash, nil
              config_attr :retry_policy,  nil, ::Hash, ::Proc, nil
              config_attr :quota_project, nil, ::String, nil

              # @private
              def initialize parent_config = nil
                @parent_config = parent_config unless parent_config.nil?

                yield self if block_given?
              end

              ##
              # Configurations for individual RPCs
              # @return [Rpcs]
              #
              def rpcs
                @rpcs ||= begin
                  parent_rpcs = nil
                  parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config.respond_to?(:rpcs)
                  Rpcs.new parent_rpcs
                end
              end

              ##
              # Configuration RPC class for the IAM API.
              #
              # Includes fields providing the configuration for each RPC in this service.
              # Each configuration object is of type `Gapic::Config::Method` and includes
              # the following configuration fields:
              #
              #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
              #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
              #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
              #     include the following keys:
              #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
              #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
              #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
              #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
              #         trigger a retry.
              #
              class Rpcs
                ##
                # RPC-specific configuration for `list_service_accounts`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_service_accounts
                ##
                # RPC-specific configuration for `get_service_account`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_service_account
                ##
                # RPC-specific configuration for `create_service_account`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :create_service_account
                ##
                # RPC-specific configuration for `update_service_account`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :update_service_account
                ##
                # RPC-specific configuration for `patch_service_account`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :patch_service_account
                ##
                # RPC-specific configuration for `delete_service_account`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :delete_service_account
                ##
                # RPC-specific configuration for `undelete_service_account`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :undelete_service_account
                ##
                # RPC-specific configuration for `enable_service_account`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :enable_service_account
                ##
                # RPC-specific configuration for `disable_service_account`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :disable_service_account
                ##
                # RPC-specific configuration for `list_service_account_keys`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_service_account_keys
                ##
                # RPC-specific configuration for `get_service_account_key`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_service_account_key
                ##
                # RPC-specific configuration for `create_service_account_key`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :create_service_account_key
                ##
                # RPC-specific configuration for `upload_service_account_key`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :upload_service_account_key
                ##
                # RPC-specific configuration for `delete_service_account_key`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :delete_service_account_key
                ##
                # RPC-specific configuration for `sign_blob`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :sign_blob
                ##
                # RPC-specific configuration for `sign_jwt`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :sign_jwt
                ##
                # RPC-specific configuration for `get_iam_policy`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_iam_policy
                ##
                # RPC-specific configuration for `set_iam_policy`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :set_iam_policy
                ##
                # RPC-specific configuration for `test_iam_permissions`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :test_iam_permissions
                ##
                # RPC-specific configuration for `query_grantable_roles`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :query_grantable_roles
                ##
                # RPC-specific configuration for `list_roles`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_roles
                ##
                # RPC-specific configuration for `get_role`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_role
                ##
                # RPC-specific configuration for `create_role`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :create_role
                ##
                # RPC-specific configuration for `update_role`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :update_role
                ##
                # RPC-specific configuration for `delete_role`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :delete_role
                ##
                # RPC-specific configuration for `undelete_role`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :undelete_role
                ##
                # RPC-specific configuration for `query_testable_permissions`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :query_testable_permissions
                ##
                # RPC-specific configuration for `query_auditable_services`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :query_auditable_services
                ##
                # RPC-specific configuration for `lint_policy`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :lint_policy

                # @private
                def initialize parent_rpcs = nil
                  list_service_accounts_config = parent_rpcs.list_service_accounts if parent_rpcs.respond_to? :list_service_accounts
                  @list_service_accounts = ::Gapic::Config::Method.new list_service_accounts_config
                  get_service_account_config = parent_rpcs.get_service_account if parent_rpcs.respond_to? :get_service_account
                  @get_service_account = ::Gapic::Config::Method.new get_service_account_config
                  create_service_account_config = parent_rpcs.create_service_account if parent_rpcs.respond_to? :create_service_account
                  @create_service_account = ::Gapic::Config::Method.new create_service_account_config
                  update_service_account_config = parent_rpcs.update_service_account if parent_rpcs.respond_to? :update_service_account
                  @update_service_account = ::Gapic::Config::Method.new update_service_account_config
                  patch_service_account_config = parent_rpcs.patch_service_account if parent_rpcs.respond_to? :patch_service_account
                  @patch_service_account = ::Gapic::Config::Method.new patch_service_account_config
                  delete_service_account_config = parent_rpcs.delete_service_account if parent_rpcs.respond_to? :delete_service_account
                  @delete_service_account = ::Gapic::Config::Method.new delete_service_account_config
                  undelete_service_account_config = parent_rpcs.undelete_service_account if parent_rpcs.respond_to? :undelete_service_account
                  @undelete_service_account = ::Gapic::Config::Method.new undelete_service_account_config
                  enable_service_account_config = parent_rpcs.enable_service_account if parent_rpcs.respond_to? :enable_service_account
                  @enable_service_account = ::Gapic::Config::Method.new enable_service_account_config
                  disable_service_account_config = parent_rpcs.disable_service_account if parent_rpcs.respond_to? :disable_service_account
                  @disable_service_account = ::Gapic::Config::Method.new disable_service_account_config
                  list_service_account_keys_config = parent_rpcs.list_service_account_keys if parent_rpcs.respond_to? :list_service_account_keys
                  @list_service_account_keys = ::Gapic::Config::Method.new list_service_account_keys_config
                  get_service_account_key_config = parent_rpcs.get_service_account_key if parent_rpcs.respond_to? :get_service_account_key
                  @get_service_account_key = ::Gapic::Config::Method.new get_service_account_key_config
                  create_service_account_key_config = parent_rpcs.create_service_account_key if parent_rpcs.respond_to? :create_service_account_key
                  @create_service_account_key = ::Gapic::Config::Method.new create_service_account_key_config
                  upload_service_account_key_config = parent_rpcs.upload_service_account_key if parent_rpcs.respond_to? :upload_service_account_key
                  @upload_service_account_key = ::Gapic::Config::Method.new upload_service_account_key_config
                  delete_service_account_key_config = parent_rpcs.delete_service_account_key if parent_rpcs.respond_to? :delete_service_account_key
                  @delete_service_account_key = ::Gapic::Config::Method.new delete_service_account_key_config
                  sign_blob_config = parent_rpcs.sign_blob if parent_rpcs.respond_to? :sign_blob
                  @sign_blob = ::Gapic::Config::Method.new sign_blob_config
                  sign_jwt_config = parent_rpcs.sign_jwt if parent_rpcs.respond_to? :sign_jwt
                  @sign_jwt = ::Gapic::Config::Method.new sign_jwt_config
                  get_iam_policy_config = parent_rpcs.get_iam_policy if parent_rpcs.respond_to? :get_iam_policy
                  @get_iam_policy = ::Gapic::Config::Method.new get_iam_policy_config
                  set_iam_policy_config = parent_rpcs.set_iam_policy if parent_rpcs.respond_to? :set_iam_policy
                  @set_iam_policy = ::Gapic::Config::Method.new set_iam_policy_config
                  test_iam_permissions_config = parent_rpcs.test_iam_permissions if parent_rpcs.respond_to? :test_iam_permissions
                  @test_iam_permissions = ::Gapic::Config::Method.new test_iam_permissions_config
                  query_grantable_roles_config = parent_rpcs.query_grantable_roles if parent_rpcs.respond_to? :query_grantable_roles
                  @query_grantable_roles = ::Gapic::Config::Method.new query_grantable_roles_config
                  list_roles_config = parent_rpcs.list_roles if parent_rpcs.respond_to? :list_roles
                  @list_roles = ::Gapic::Config::Method.new list_roles_config
                  get_role_config = parent_rpcs.get_role if parent_rpcs.respond_to? :get_role
                  @get_role = ::Gapic::Config::Method.new get_role_config
                  create_role_config = parent_rpcs.create_role if parent_rpcs.respond_to? :create_role
                  @create_role = ::Gapic::Config::Method.new create_role_config
                  update_role_config = parent_rpcs.update_role if parent_rpcs.respond_to? :update_role
                  @update_role = ::Gapic::Config::Method.new update_role_config
                  delete_role_config = parent_rpcs.delete_role if parent_rpcs.respond_to? :delete_role
                  @delete_role = ::Gapic::Config::Method.new delete_role_config
                  undelete_role_config = parent_rpcs.undelete_role if parent_rpcs.respond_to? :undelete_role
                  @undelete_role = ::Gapic::Config::Method.new undelete_role_config
                  query_testable_permissions_config = parent_rpcs.query_testable_permissions if parent_rpcs.respond_to? :query_testable_permissions
                  @query_testable_permissions = ::Gapic::Config::Method.new query_testable_permissions_config
                  query_auditable_services_config = parent_rpcs.query_auditable_services if parent_rpcs.respond_to? :query_auditable_services
                  @query_auditable_services = ::Gapic::Config::Method.new query_auditable_services_config
                  lint_policy_config = parent_rpcs.lint_policy if parent_rpcs.respond_to? :lint_policy
                  @lint_policy = ::Gapic::Config::Method.new lint_policy_config

                  yield self if block_given?
                end
              end
            end
          end
        end
      end
    end
  end
end
